chart-10,65,"     */
    public String generateToolTipFragment(String toolTipText) {
return (""null"" + toolTipText);    }

}"
chart-10,65,"     */
    public String generateToolTipFragment(String toolTipText) {
return ((((""null"" + toolTipText) + ""null"") + ""null"") + ""null"");    }

}"
chart-10,65,"     */
    public String generateToolTipFragment(String toolTipText) {
return (((""null"" + toolTipText) + ""null"") + ""null"");    }

}"
chart-10,65,"     */
    public String generateToolTipFragment(String toolTipText) {
return ((""null"" + toolTipText) + ""null"");    }

}"
chart-10,65,"     */
    public String generateToolTipFragment(String toolTipText) {
return ((((""null"" + toolTipText) + ""null"") + ""null"") + toolTipText);    }

}"
chart-10,65,"     */
    public String generateToolTipFragment(String toolTipText) {
return (((((""null"" + toolTipText) + ""null"") + ""null"") + ""null"") + ""null"");    }

}"
chart-10,65,"     */
    public String generateToolTipFragment(String toolTipText) {
return ((((((""null"" + toolTipText) + ""null"") + ""null"") + ""null"") + ""null"") + ""null"");    }

}"
chart-10,65,"     */
    public String generateToolTipFragment(String toolTipText) {
return ((((""null"" + toolTipText) + ""null"") + ""null"") + (((""null"" + toolTipText) + ""null"") + ""null""));    }

}"
chart-10,65,"     */
    public String generateToolTipFragment(String toolTipText) {
return (((""null"" + toolTipText) + toolTipText) + ""null"");    }

}"
chart-10,65,"     */
    public String generateToolTipFragment(String toolTipText) {
return toolTipText;    }

}"
chart-10,65,"     */
    public String generateToolTipFragment(String toolTipText) {
return (((((((""null"" + toolTipText) + ""null"") + ""null"") + ""null"") + ""null"") + ""null"") + ""null"");    }

}"
chart-10,65,"     */
    public String generateToolTipFragment(String toolTipText) {
return ((""null"" + toolTipText) + null);    }

}"
chart-10,65,"     */
    public String generateToolTipFragment(String toolTipText) {
return ((((""null"" + toolTipText) + ""null"") + toolTipText) + ""null"");    }

}"
chart-10,65,"     */
    public String generateToolTipFragment(String toolTipText) {
return ((((((""null"" + toolTipText) + ""null"") + ""null"") + ""null"") + toolTipText) + ""null"");    }

}"
chart-10,65,"     */
    public String generateToolTipFragment(String toolTipText) {
return (((""null"" + ""null"") + toolTipText) + ""null"");    }

}"
chart-10,65,"     */
    public String generateToolTipFragment(String toolTipText) {
return ((""null"" != toolTipText) + ""null"");    }

}"
chart-10,65,"     */
    public String generateToolTipFragment(String toolTipText) {
return (((((""null"" + toolTipText) + ""null"") + ""null"") + ""null"") + toolTipText);    }

}"
chart-10,65,"     */
    public String generateToolTipFragment(String toolTipText) {
return ((""null"" + ""null"") + ""null"");    }

}"
chart-10,65,"     */
    public String generateToolTipFragment(String toolTipText) {
return (""null"" + ""null"");    }

}"
chart-10,65,"     */
    public String generateToolTipFragment(String toolTipText) {
return ((((""null"" + toolTipText) + ""null"") + ""null"") + (((""null"" + toolTipText) + ""null"") + toolTipText));    }

}"
chart-10,65,"     */
    public String generateToolTipFragment(String toolTipText) {
return ((""null"" + toolTipText) + toolTipText);    }

}"
chart-10,65,"     */
    public String generateToolTipFragment(String toolTipText) {
return (((((""null"" + toolTipText) + ""null"") + toolTipText) + ""null"") + ""null"");    }

}"
chart-10,65,"     */
    public String generateToolTipFragment(String toolTipText) {
return ""null"";    }

}"
chart-10,65,"     */
    public String generateToolTipFragment(String toolTipText) {
return ((((""null"" + toolTipText) + ""null"") + ""null"") + ((""null"" + toolTipText) + ""null""));    }

}"
chart-10,65,"     */
    public String generateToolTipFragment(String toolTipText) {
return ((((((((""null"" + toolTipText) + ""null"") + ""null"") + ""null"") + ""null"") + ""null"") + ""null"") + ""null"");    }

}"
chart-10,65,"     */
    public String generateToolTipFragment(String toolTipText) {
return ((((((""null"" + toolTipText) + ""null"") + ""null"") + toolTipText) + ""null"") + ""null"");    }

}"
chart-10,65,"     */
    public String generateToolTipFragment(String toolTipText) {
return (((""null"" + ""null"") + ""null"") + ""null"");    }

}"
chart-10,65,"     */
    public String generateToolTipFragment(String toolTipText) {
return (((((((""null"" + toolTipText) + ""null"") + ""null"") + toolTipText) + ""null"") + ""null"") + ""null"");    }

}"
chart-10,65,"     */
    public String generateToolTipFragment(String toolTipText) {
return ((""null"" == toolTipText) + ""null"");    }

}"
chart-10,65,"     */
    public String generateToolTipFragment(String toolTipText) {
return ((((((""null"" + toolTipText) + ""null"") + ""null"") + ""null"") + ""null"") + toolTipText);    }

}"
chart-10,65,"     */
    public String generateToolTipFragment(String toolTipText) {
return ((((""null"" + toolTipText) + toolTipText) + ""null"") + ""null"");    }

}"
chart-10,65,"     */
    public String generateToolTipFragment(String toolTipText) {
return ((""null"" + ""null"") + toolTipText);    }

}"
chart-10,65,"     */
    public String generateToolTipFragment(String toolTipText) {
return (((((((""null"" + toolTipText) + ""null"") + ""null"") + ""null"") + ""null"") + toolTipText) + ""null"");    }

}"
chart-10,65,"     */
    public String generateToolTipFragment(String toolTipText) {
return (toolTipText + ""null"");    }

}"
,,
time-22,222,"     */
    protected BasePeriod(long duration) {
super.BasePeriod();
        // bug [3264409]
    }

"
time-22,222,"     */
    protected BasePeriod(long duration) {
super.BasePeriod(duration, null, null);
        // bug [3264409]
    }

"
time-22,222,"     */
    protected BasePeriod(long duration) {
super.BasePeriod(duration);
        // bug [3264409]
    }

"
time-22,222,"     */
    protected BasePeriod(long duration) {
this(duration, 1, null);;
        // bug [3264409]
    }

"
time-22,222,"     */
    protected BasePeriod(long duration) {
this(duration, ""null"", null);;
        // bug [3264409]
    }

"
time-22,222,"     */
    protected BasePeriod(long duration) {
this(duration);;
        // bug [3264409]
    }

"
time-22,222,"     */
    protected BasePeriod(long duration) {
super.BasePeriod();
        this(duration, null, null);        // bug [3264409]
    }

"
time-22,222,"     */
    protected BasePeriod(long duration) {
super.BasePeriod(duration, null);
        // bug [3264409]
    }

"
time-22,222,"     */
    protected BasePeriod(long duration) {
super(duration);
        // bug [3264409]
    }

"
time-22,222,"     */
    protected BasePeriod(long duration) {
this(duration, 0, null);;
        // bug [3264409]
    }

"
time-22,222,"     */
    protected BasePeriod(long duration) {
this(duration, null);;
        // bug [3264409]
    }

"
time-22,222,"     */
    protected BasePeriod(long duration) {
super(duration, null);
        // bug [3264409]
    }

"
time-22,222,"     */
    protected BasePeriod(long duration) {
super.BasePeriod(null, duration);
        // bug [3264409]
    }

"
time-22,222,"     */
    protected BasePeriod(long duration) {
super.BasePeriod(duration);
        this(duration, null, null);        // bug [3264409]
    }

"
time-22,222,"     */
    protected BasePeriod(long duration) {
this(duration, null, null);;
        // bug [3264409]
    }

"
time-22,222,"     */
    protected BasePeriod(long duration) {
super.BasePeriod(duration, duration);
        // bug [3264409]
    }

"
time-22,222,"     */
    protected BasePeriod(long duration) {
this(null, duration);;
        // bug [3264409]
    }

"
time-22,222,"     */
    protected BasePeriod(long duration) {
super(null, duration);
        // bug [3264409]
    }

"
time-22,222,"     */
    protected BasePeriod(long duration) {
super(duration);
        this(duration, null, null);        // bug [3264409]
    }

"
time-22,222,"     */
    protected BasePeriod(long duration) {
this(duration, null, null, null);;
        // bug [3264409]
    }

"
time-22,222,"     */
    protected BasePeriod(long duration) {
super.BasePeriod(duration, null, 0);
        // bug [3264409]
    }

"
time-22,222,"     */
    protected BasePeriod(long duration) {
super(duration, null, null, null);
        // bug [3264409]
    }

"
time-22,222,"     */
    protected BasePeriod(long duration) {
if((duration != null)){
        this(duration, null, null);        // bug [3264409]
}
    }
"
time-22,222,"     */
    protected BasePeriod(long duration) {
if (true) { return;
 }
        this(duration, null, null);        // bug [3264409]
    }
"
time-22,222,"     */
    protected BasePeriod(long duration) {
super.BasePeriod(duration, null, false);
        // bug [3264409]
    }

"
time-22,222,"     */
    protected BasePeriod(long duration) {
this(duration, duration);;
        // bug [3264409]
    }

"
time-22,222,"     */
    protected BasePeriod(long duration) {
super.BasePeriod(duration, null, null, null);
        // bug [3264409]
    }

"
time-22,222,"     */
    protected BasePeriod(long duration) {
return;
        // bug [3264409]
    }

"
time-22,222,"     */
    protected BasePeriod(long duration) {
super.BasePeriod(duration, null, duration);
        // bug [3264409]
    }

"
time-22,222,"     */
    protected BasePeriod(long duration) {
this(duration, 2, null);;
        // bug [3264409]
    }

"
time-22,222,"     */
    protected BasePeriod(long duration) {
super.BasePeriod(duration, null, true);
        // bug [3264409]
    }

"
time-22,222,"     */
    protected BasePeriod(long duration) {
super.BasePeriod(null, duration, null);
        // bug [3264409]
    }

"
time-22,222,"     */
    protected BasePeriod(long duration) {
this(duration, false, null);;
        // bug [3264409]
    }

"
,,
closure-39,380,"        sb.append(property);
        sb.append("": "");
sb.append(getPropertyType(property).toString());

        ++i;
        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
"
closure-39,380,"        sb.append(property);
        sb.append("": "");
sb.append(toString(property).toString());

        ++i;
        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
"
closure-39,380,"        sb.append(property);
        sb.append("": "");
sb.append(newTreeSet(property).toString());

        ++i;
        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
"
closure-39,380,"        sb.append(property);
        sb.append("": "");
sb.append(getPropertyType(property).getOwnPropertyNames());

        ++i;
        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
"
closure-39,380,"        sb.append(property);
        sb.append("": "");
sb.append(getPropertyType(property).isNativeObjectType());

        ++i;
        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
"
closure-39,380,"        sb.append(property);
        sb.append("": "");
sb.append(getReferenceName(property).toString());

        ++i;
        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
"
closure-39,380,"        sb.append(property);
        sb.append("": "");
sb.append(getPropertyType(property).getImplicitPrototype());

        ++i;
        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
"
closure-39,380,"        sb.append(property);
        sb.append("": "");
sb.append(""null"");
        sb.append(getPropertyType(property).toString());
        ++i;
        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
"
closure-39,380,"        sb.append(property);
        sb.append("": "");
sb.append(getPropertyType(property));

        ++i;
        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
"
closure-39,380,"        sb.append(property);
        sb.append("": "");
sb.append(hasReferenceName(property).toString());

        ++i;
        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
"
closure-39,380,"        sb.append(property);
        sb.append("": "");
++i;
        sb.append(getPropertyType(property).toString());
        ++i;
        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
"
closure-39,380,"        sb.append(property);
        sb.append("": "");
sb.append(isNativeObjectType(property).toString());

        ++i;
        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
"
closure-39,380,"        sb.append(property);
        sb.append("": "");
sb.append(append(property).toString());

        ++i;
        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
"
closure-39,380,"        sb.append(property);
        sb.append("": "");
sb.append(getPropertyType(property).newTreeSet());

        ++i;
        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
"
closure-39,380,"        sb.append(property);
        sb.append("": "");
sb.append(getImplicitPrototype(property).toString());

        ++i;
        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
"
closure-39,380,"        sb.append(property);
        sb.append("": "");
sb.append(getPropertyType(property).getName());

        ++i;
        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
"
closure-39,380,"        sb.append(property);
        sb.append("": "");
sb.append(getOwnPropertyNames(property).toString());

        ++i;
        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
"
closure-39,380,"        sb.append(property);
        sb.append("": "");
break;
        sb.append(getPropertyType(property).toString());
        ++i;
        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
"
closure-39,380,"        sb.append(property);
        sb.append("": "");
propertyNames.addAll(current.getOwnPropertyNames());
        sb.append(getPropertyType(property).toString());
        ++i;
        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
"
closure-39,380,"        sb.append(property);
        sb.append("": "");
sb.append(getPropertyType(property).toStringHelper());

        ++i;
        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
"
closure-39,380,"        sb.append(property);
        sb.append("": "");
sb.append(property);
        sb.append(getPropertyType(property).toString());
        ++i;
        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
"
closure-39,380,"        sb.append(property);
        sb.append("": "");
prettyPrint = true;
        sb.append(getPropertyType(property).toString());
        ++i;
        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
"
closure-39,380,"        sb.append(property);
        sb.append("": "");
sb.append(getPropertyType(property).getReferenceName());

        ++i;
        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
"
closure-39,380,"        sb.append(property);
        sb.append("": "");
sb.append(getPropertyType(property).hasReferenceName());

        ++i;
        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
"
closure-39,380,"        sb.append(property);
        sb.append("": "");
sb.addAll(property);

        ++i;
        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
"
closure-39,380,"        sb.append(property);
        sb.append("": "");
if (true) { return ""null""; }
        sb.append(getPropertyType(property).toString());
        ++i;
        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
"
closure-39,380,"        sb.append(property);
        sb.append("": "");
propertyNames.addAll(current.getOwnPropertyNames());

        ++i;
        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
"
closure-39,380,"        sb.append(property);
        sb.append("": "");
sb.append(getPropertyType(sb).toString());

        ++i;
        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
"
closure-39,380,"        sb.append(property);
        sb.append("": "");
sb.append(""null"");

        ++i;
        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
"
closure-39,380,"        sb.append(property);
        sb.append("": "");
sb.append(property);

        ++i;
        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
"
closure-39,380,"        sb.append(property);
        sb.append("": "");
sb.append(toString());

        ++i;
        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
"
closure-39,380,"        sb.append(property);
        sb.append("": "");
i.append(property);

        ++i;
        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
"
closure-39,380,"        sb.append(property);
        sb.append("": "");
if((i == MAX_PRETTY_PRINTED_PROPERTIES)){
        sb.append(getPropertyType(property).toString());
        ++i;
        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
"
closure-39,380,"        sb.append(property);
        sb.append("": "");
sb.append(toString(property));

        ++i;
        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
"
closure-39,380,"        sb.append(property);
        sb.append("": "");
Sets.append(property);

        ++i;
        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
"
closure-39,380,"        sb.append(property);
        sb.append("": "");
continue;
        sb.append(getPropertyType(property).toString());
        ++i;
        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
"
closure-39,380,"        sb.append(property);
        sb.append("": "");
sb.append(getPropertyType(i).toString());

        ++i;
        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
"
closure-39,380,"        sb.append(property);
        sb.append("": "");
sb.append(getPropertyType().toString());

        ++i;
        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
"
closure-39,380,"        sb.append(property);
        sb.append("": "");
append(property);

        ++i;
        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
"
closure-39,380,"        sb.append(property);
        sb.append("": "");
++i;

        ++i;
        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
"
closure-39,380,"        sb.append(property);
        sb.append("": "");
sb.append(getPropertyType(className));

        ++i;
        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
"
closure-39,380,"        sb.append(property);
        sb.append("": "");
sb.append(getPropertyType(current).toString());

        ++i;
        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
"
,,
closure-39,394,"      return sb.toString();
    } else {
return sb.toString();    }
  }

  void setPrettyPrint(boolean prettyPrint) {
"
closure-39,394,"      return sb.toString();
    } else {
return null;    }
  }

  void setPrettyPrint(boolean prettyPrint) {
"
closure-39,394,"      return sb.toString();
    } else {
return getReferenceName();    }
  }

  void setPrettyPrint(boolean prettyPrint) {
"
closure-39,394,"      return sb.toString();
    } else {
return prettyPrint;    }
  }

  void setPrettyPrint(boolean prettyPrint) {
"
closure-39,394,"      return sb.toString();
    } else {
return false;    }
  }

  void setPrettyPrint(boolean prettyPrint) {
"
closure-39,394,"      return sb.toString();
    } else {
    }
  }

  void setPrettyPrint(boolean prettyPrint) {
"
closure-39,394,"      return sb.toString();
    } else {
sb.append(""null"");
      return ""{...}"";    }
  }

"
closure-39,394,"      return sb.toString();
    } else {
sb.append(getPropertyType(property).toString());
      return ""{...}"";    }
  }

"
closure-39,394,"      return sb.toString();
    } else {
prettyPrint = true;
      return ""{...}"";    }
  }

"
closure-39,394,"      return sb.toString();
    } else {
sb.append(property);
      return ""{...}"";    }
  }

"
closure-39,394,"      return sb.toString();
    } else {
++i;
      return ""{...}"";    }
  }

"
closure-39,394,"      return sb.toString();
    } else {
if (true) { return sb.toString(); }
      return ""{...}"";    }
  }

"
closure-39,394,"      return sb.toString();
    } else {
return true;    }
  }

  void setPrettyPrint(boolean prettyPrint) {
"
closure-39,394,"      return sb.toString();
    } else {
return (propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES);    }
  }

  void setPrettyPrint(boolean prettyPrint) {
"
closure-39,394,"      return sb.toString();
    } else {
return sb;    }
  }

  void setPrettyPrint(boolean prettyPrint) {
"
closure-39,394,"      return sb.toString();
    } else {
return MAX_PRETTY_PRINTED_PROPERTIES;    }
  }

  void setPrettyPrint(boolean prettyPrint) {
"
closure-39,394,"      return sb.toString();
    } else {
break;
      return ""{...}"";    }
  }

"
closure-39,394,"      return sb.toString();
    } else {
return current;    }
  }

  void setPrettyPrint(boolean prettyPrint) {
"
closure-39,394,"      return sb.toString();
    } else {
return ((current != null) && !current.isNativeObjectType());    }
  }

  void setPrettyPrint(boolean prettyPrint) {
"
closure-39,394,"      return sb.toString();
    } else {
return (current != null);    }
  }

  void setPrettyPrint(boolean prettyPrint) {
"
closure-39,394,"      return sb.toString();
    } else {
current.clearCachedValues();
      return ""{...}"";    }
  }

"
closure-39,394,"      return sb.toString();
    } else {
return i;    }
  }

  void setPrettyPrint(boolean prettyPrint) {
"
closure-39,394,"      return sb.toString();
    } else {
return propertyNames;    }
  }

  void setPrettyPrint(boolean prettyPrint) {
"
closure-39,394,"      return sb.toString();
    } else {
continue;
    }
  }

"
closure-39,394,"      return sb.toString();
    } else {
return ""null"";    }
  }

  void setPrettyPrint(boolean prettyPrint) {
"
closure-39,394,"      return sb.toString();
    } else {
sb.toString();
      return ""{...}"";    }
  }

"
closure-39,394,"      return sb.toString();
    } else {
return !current.isNativeObjectType();    }
  }

  void setPrettyPrint(boolean prettyPrint) {
"
closure-39,394,"      return sb.toString();
    } else {
return current.getOwnPropertyNames();    }
  }

  void setPrettyPrint(boolean prettyPrint) {
"
closure-39,394,"      return sb.toString();
    } else {
return propertyNames.size();    }
  }

  void setPrettyPrint(boolean prettyPrint) {
"
closure-39,394,"      return sb.toString();
    } else {
if((i == MAX_PRETTY_PRINTED_PROPERTIES)){
      return ""{...}"";    }
}
  }
"
closure-39,394,"      return sb.toString();
    } else {
if (true) { return false; }
      return ""{...}"";    }
  }

"
closure-39,394,"      return sb.toString();
    } else {
if((propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES)){
      return ""{...}"";    }
}
  }
"
closure-39,394,"      return sb.toString();
    } else {
return current.getImplicitPrototype();    }
  }

  void setPrettyPrint(boolean prettyPrint) {
"
closure-39,394,"      return sb.toString();
    } else {
return -1;    }
  }

  void setPrettyPrint(boolean prettyPrint) {
"
closure-39,394,"      return sb.toString();
    } else {
return (i > 0);    }
  }

  void setPrettyPrint(boolean prettyPrint) {
"
closure-39,394,"      return sb.toString();
    } else {
if (true) { return;
 }
      return ""{...}"";    }
  }
"
closure-39,394,"      return sb.toString();
    } else {
prettyPrint = null;
      return ""{...}"";    }
  }

"
closure-39,394,"      return sb.toString();
    } else {
break;
    }
  }

"
closure-39,394,"      return sb.toString();
    } else {
continue;
      return ""{...}"";    }
  }

"
closure-39,394,"      return sb.toString();
    } else {
if((i > 0)){
      return ""{...}"";    }
}
  }
"
closure-39,394,"      return sb.toString();
    } else {
return ++i;    }
  }

  void setPrettyPrint(boolean prettyPrint) {
"
closure-39,394,"      return sb.toString();
    } else {
return ((i == MAX_PRETTY_PRINTED_PROPERTIES) && (propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES));    }
  }

  void setPrettyPrint(boolean prettyPrint) {
"
,,
lang-38,872,"    public StringBuffer format(Calendar calendar, StringBuffer buf) {
        if (mTimeZoneForced) {
calendar = calendar.clone();
            calendar.setTimeZone(mTimeZone);
        }
        return applyRules(calendar, buf);
"
lang-38,872,"    public StringBuffer format(Calendar calendar, StringBuffer buf) {
        if (mTimeZoneForced) {
return calendar.clone();            calendar.setTimeZone(mTimeZone);
        }
        return applyRules(calendar, buf);
    }
"
lang-38,872,"    public StringBuffer format(Calendar calendar, StringBuffer buf) {
        if (mTimeZoneForced) {
calendar = calendar;
            calendar.setTimeZone(mTimeZone);
        }
        return applyRules(calendar, buf);
"
lang-38,872,"    public StringBuffer format(Calendar calendar, StringBuffer buf) {
        if (mTimeZoneForced) {
if((calendar instanceof Calendar)){
            calendar = (Calendar) calendar.clone();            calendar.setTimeZone(mTimeZone);
}
        }
"
lang-38,872,"    public StringBuffer format(Calendar calendar, StringBuffer buf) {
        if (mTimeZoneForced) {
calendar.clone();
            calendar.setTimeZone(mTimeZone);
        }
        return applyRules(calendar, buf);
"
lang-38,872,"    public StringBuffer format(Calendar calendar, StringBuffer buf) {
        if (mTimeZoneForced) {
if(mTimeZoneForced){
            calendar = (Calendar) calendar.clone();            calendar.setTimeZone(mTimeZone);
}
        }
"
lang-38,872,"    public StringBuffer format(Calendar calendar, StringBuffer buf) {
        if (mTimeZoneForced) {
calendar = (Calendar)buf.clone();
            calendar.setTimeZone(mTimeZone);
        }
        return applyRules(calendar, buf);
"
lang-38,872,"    public StringBuffer format(Calendar calendar, StringBuffer buf) {
        if (mTimeZoneForced) {
calendar = (Calendar)calendar;
            calendar.setTimeZone(mTimeZone);
        }
        return applyRules(calendar, buf);
"
lang-38,872,"    public StringBuffer format(Calendar calendar, StringBuffer buf) {
        if (mTimeZoneForced) {
calendar.setTimeZone(mTimeZone);
            calendar.setTimeZone(mTimeZone);
        }
        return applyRules(calendar, buf);
"
lang-38,872,"    public StringBuffer format(Calendar calendar, StringBuffer buf) {
        if (mTimeZoneForced) {
calendar = super.format();
            calendar.setTimeZone(mTimeZone);
        }
        return applyRules(calendar, buf);
"
lang-38,872,"    public StringBuffer format(Calendar calendar, StringBuffer buf) {
        if (mTimeZoneForced) {
calendar = (Calendar)calendar.clone();
            calendar.setTimeZone(mTimeZone);
        }
        return applyRules(calendar, buf);
"
lang-38,872,"    public StringBuffer format(Calendar calendar, StringBuffer buf) {
        if (mTimeZoneForced) {
return calendar;            calendar.setTimeZone(mTimeZone);
        }
        return applyRules(calendar, buf);
    }
"
lang-38,872,"    public StringBuffer format(Calendar calendar, StringBuffer buf) {
        if (mTimeZoneForced) {
if((calendar != null)){
            calendar = (Calendar) calendar.clone();            calendar.setTimeZone(mTimeZone);
}
        }
"
lang-38,872,"    public StringBuffer format(Calendar calendar, StringBuffer buf) {
        if (mTimeZoneForced) {
calendar = null;
            calendar.setTimeZone(mTimeZone);
        }
        return applyRules(calendar, buf);
"
lang-38,872,"    public StringBuffer format(Calendar calendar, StringBuffer buf) {
        if (mTimeZoneForced) {
init();
            calendar = (Calendar) calendar.clone();            calendar.setTimeZone(mTimeZone);
        }
        return applyRules(calendar, buf);
"
lang-38,872,"    public StringBuffer format(Calendar calendar, StringBuffer buf) {
        if (mTimeZoneForced) {
calendar.clone(calendar);
            calendar.setTimeZone(mTimeZone);
        }
        return applyRules(calendar, buf);
"
lang-38,872,"    public StringBuffer format(Calendar calendar, StringBuffer buf) {
        if (mTimeZoneForced) {
calendar = this.calendar;
            calendar.setTimeZone(mTimeZone);
        }
        return applyRules(calendar, buf);
"
lang-38,872,"    public StringBuffer format(Calendar calendar, StringBuffer buf) {
        if (mTimeZoneForced) {
            calendar.setTimeZone(mTimeZone);
        }
        return applyRules(calendar, buf);
    }
"
lang-38,872,"    public StringBuffer format(Calendar calendar, StringBuffer buf) {
        if (mTimeZoneForced) {
calendar = Calendar;
            calendar.setTimeZone(mTimeZone);
        }
        return applyRules(calendar, buf);
"
lang-38,872,"    public StringBuffer format(Calendar calendar, StringBuffer buf) {
        if (mTimeZoneForced) {
return (Calendar)calendar.clone();            calendar.setTimeZone(mTimeZone);
        }
        return applyRules(calendar, buf);
    }
"
lang-38,872,"    public StringBuffer format(Calendar calendar, StringBuffer buf) {
        if (mTimeZoneForced) {
if((mTimeZoneForced instanceof Calendar)){
            calendar = (Calendar) calendar.clone();            calendar.setTimeZone(mTimeZone);
}
        }
"
lang-38,872,"    public StringBuffer format(Calendar calendar, StringBuffer buf) {
        if (mTimeZoneForced) {
mTimeZoneForced = (Calendar)calendar.clone();
            calendar.setTimeZone(mTimeZone);
        }
        return applyRules(calendar, buf);
"
lang-38,872,"    public StringBuffer format(Calendar calendar, StringBuffer buf) {
        if (mTimeZoneForced) {
calendar = (Calendar)calendar.format();
            calendar.setTimeZone(mTimeZone);
        }
        return applyRules(calendar, buf);
"
lang-38,872,"    public StringBuffer format(Calendar calendar, StringBuffer buf) {
        if (mTimeZoneForced) {
if((calendar instanceof Calendar)){
return null;}            calendar = (Calendar) calendar.clone();            calendar.setTimeZone(mTimeZone);
        }
        return applyRules(calendar, buf);
"
lang-38,872,"    public StringBuffer format(Calendar calendar, StringBuffer buf) {
        if (mTimeZoneForced) {
calendar = calendar.clone(mTimeZone);
            calendar.setTimeZone(mTimeZone);
        }
        return applyRules(calendar, buf);
"
lang-38,872,"    public StringBuffer format(Calendar calendar, StringBuffer buf) {
        if (mTimeZoneForced) {
return this;            calendar.setTimeZone(mTimeZone);
        }
        return applyRules(calendar, buf);
    }
"
lang-38,872,"    public StringBuffer format(Calendar calendar, StringBuffer buf) {
        if (mTimeZoneForced) {
calendar = false;
            calendar.setTimeZone(mTimeZone);
        }
        return applyRules(calendar, buf);
"
lang-38,872,"    public StringBuffer format(Calendar calendar, StringBuffer buf) {
        if (mTimeZoneForced) {
calendar.setTimeZone(mTimeZone);
            calendar = (Calendar) calendar.clone();            calendar.setTimeZone(mTimeZone);
        }
        return applyRules(calendar, buf);
"
lang-38,872,"    public StringBuffer format(Calendar calendar, StringBuffer buf) {
        if (mTimeZoneForced) {
if((Calendar)calendar.clone()){
            calendar = (Calendar) calendar.clone();            calendar.setTimeZone(mTimeZone);
}
        }
"
lang-38,872,"    public StringBuffer format(Calendar calendar, StringBuffer buf) {
        if (mTimeZoneForced) {
calendar = true;
            calendar.setTimeZone(mTimeZone);
        }
        return applyRules(calendar, buf);
"
lang-38,872,"    public StringBuffer format(Calendar calendar, StringBuffer buf) {
        if (mTimeZoneForced) {
calendar = calendar.clone(this);
            calendar.setTimeZone(mTimeZone);
        }
        return applyRules(calendar, buf);
"
lang-38,872,"    public StringBuffer format(Calendar calendar, StringBuffer buf) {
        if (mTimeZoneForced) {
if((calendar == null)){
return null;}            calendar = (Calendar) calendar.clone();            calendar.setTimeZone(mTimeZone);
        }
        return applyRules(calendar, buf);
"
lang-38,872,"    public StringBuffer format(Calendar calendar, StringBuffer buf) {
        if (mTimeZoneForced) {
calendar = (Calendar)calendar.clone(mTimeZone);
            calendar.setTimeZone(mTimeZone);
        }
        return applyRules(calendar, buf);
"
lang-38,872,"    public StringBuffer format(Calendar calendar, StringBuffer buf) {
        if (mTimeZoneForced) {
return;
            calendar.setTimeZone(mTimeZone);
        }
        return applyRules(calendar, buf);
"
lang-38,872,"    public StringBuffer format(Calendar calendar, StringBuffer buf) {
        if (mTimeZoneForced) {
buf = (Calendar)calendar.clone();
            calendar.setTimeZone(mTimeZone);
        }
        return applyRules(calendar, buf);
"
,,
lang-21,262,"            throw new IllegalArgumentException(""The date must not be null"");
        }
return ((((cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND)) && (cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND))) && (cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE))) && (cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR)));    }

    //-----------------------------------------------------------------------
    /**
"
lang-21,262,"            throw new IllegalArgumentException(""The date must not be null"");
        }
return (((((((cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND)) && (cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND))) && (cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE))) && (cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR))) && (cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR))) && (cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR))) && (cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA)));    }

    //-----------------------------------------------------------------------
    /**
"
lang-21,262,"            throw new IllegalArgumentException(""The date must not be null"");
        }
return (((cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND)) && (cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND))) && (cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE)));    }

    //-----------------------------------------------------------------------
    /**
"
lang-21,262,"            throw new IllegalArgumentException(""The date must not be null"");
        }
return (((((cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND)) && (cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND))) && (cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE))) && (cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR))) && (cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR)));    }

    //-----------------------------------------------------------------------
    /**
"
lang-21,262,"            throw new IllegalArgumentException(""The date must not be null"");
        }
return ((((((cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND)) && (cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND))) && (cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE))) && (cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR))) && (cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR))) && (cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR)));    }

    //-----------------------------------------------------------------------
    /**
"
lang-21,262,"            throw new IllegalArgumentException(""The date must not be null"");
        }
return ((((((((cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND)) && (cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND))) && (cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE))) && (cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR))) && (cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR))) && (cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR))) && (cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA))) && (cal1.getClass() == cal2.getName()));    }

    //-----------------------------------------------------------------------
    /**
"
lang-21,262,"            throw new IllegalArgumentException(""The date must not be null"");
        }
return ((cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND)) && (cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND)));    }

    //-----------------------------------------------------------------------
    /**
"
lang-21,262,"            throw new IllegalArgumentException(""The date must not be null"");
        }
return ((((cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND)) && (cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND))) && (cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE))) && (cal1.getClass() == cal2.getClass()));    }

    //-----------------------------------------------------------------------
    /**
"
lang-21,262,"            throw new IllegalArgumentException(""The date must not be null"");
        }
return ((((((cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND)) && (cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND))) && (cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE))) && (cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR))) && (cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR))) && (cal1.getClass() == cal2.getClass()));    }

    //-----------------------------------------------------------------------
    /**
"
lang-21,262,"            throw new IllegalArgumentException(""The date must not be null"");
        }
return (((((cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND)) && (cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND))) && (cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE))) && (cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR))) && (cal1.getClass() == cal2.getClass()));    }

    //-----------------------------------------------------------------------
    /**
"
lang-21,262,"            throw new IllegalArgumentException(""The date must not be null"");
        }
return (((cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND)) && (cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND))) && (cal1.getClass() == cal2.getClass()));    }

    //-----------------------------------------------------------------------
    /**
"
lang-21,262,"            throw new IllegalArgumentException(""The date must not be null"");
        }
return ((((((((cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND)) && (cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND))) && (cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE))) && (cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR))) && (cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR))) && (cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR))) && (cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA))) && (cal1.getClass() == cal2.getClass()));    }

    //-----------------------------------------------------------------------
    /**
"
lang-21,262,"            throw new IllegalArgumentException(""The date must not be null"");
        }
return (((((((cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND)) && (cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND))) && (cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE))) && (cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR))) && (cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR))) && (cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR))) && (cal1.getClass() == cal2.getClass()));    }

    //-----------------------------------------------------------------------
    /**
"
lang-21,262,"            throw new IllegalArgumentException(""The date must not be null"");
        }
return ((((((((cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND)) && (cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND))) && (cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE))) && (cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR))) && (cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR))) && (cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR))) && (cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA))) && (cal2.getClass() == cal2.getClass()));    }

    //-----------------------------------------------------------------------
    /**
"
lang-21,262,"            throw new IllegalArgumentException(""The date must not be null"");
        }
return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND));    }

    //-----------------------------------------------------------------------
    /**
"
lang-21,262,"            throw new IllegalArgumentException(""The date must not be null"");
        }
return ((cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND)) && (cal1.getClass() == cal2.getClass()));    }

    //-----------------------------------------------------------------------
    /**
"
lang-21,262,"            throw new IllegalArgumentException(""The date must not be null"");
        }
return ((((((((cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND)) && (cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND))) && (cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE))) && (cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR))) && (cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR))) && (cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR))) && (cal1.get(Calendar.ERA) == cal1.get(Calendar.ERA))) && (cal1.getClass() == cal2.getClass()));    }

    //-----------------------------------------------------------------------
    /**
"
lang-21,262,"            throw new IllegalArgumentException(""The date must not be null"");
        }
return (((((((((cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND)) && (cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND))) && (cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE))) && (cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR))) && (cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR))) && (cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR))) && (cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA))) && (cal1.getClass() == cal2.getClass())) && (cal1.getClass() == cal2.getClass()));    }

    //-----------------------------------------------------------------------
    /**
"
lang-21,262,"            throw new IllegalArgumentException(""The date must not be null"");
        }
return cal1.get(Calendar.MILLISECOND);    }

    //-----------------------------------------------------------------------
    /**
"
lang-21,262,"            throw new IllegalArgumentException(""The date must not be null"");
        }
return (cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR));    }

    //-----------------------------------------------------------------------
    /**
"
lang-21,262,"            throw new IllegalArgumentException(""The date must not be null"");
        }
return ((((cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND)) && (cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND))) && (cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE))) && (cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR)));    }

    //-----------------------------------------------------------------------
    /**
"
lang-21,262,"            throw new IllegalArgumentException(""The date must not be null"");
        }
return ((((((cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND)) && (cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND))) && (cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE))) && (cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR))) && (cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR))) && (cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR)));    }

    //-----------------------------------------------------------------------
    /**
"
lang-21,262,"            throw new IllegalArgumentException(""The date must not be null"");
        }
return ((((((cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND)) && (cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND))) && (cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE))) && (cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR))) && (cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR))) && (cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR)));    }

    //-----------------------------------------------------------------------
    /**
"
lang-21,262,"            throw new IllegalArgumentException(""The date must not be null"");
        }
return (cal1.getClass() == cal2.getClass());    }

    //-----------------------------------------------------------------------
    /**
"
lang-21,262,"            throw new IllegalArgumentException(""The date must not be null"");
        }
return (((cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND)) && (cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND))) && (cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR)));    }

    //-----------------------------------------------------------------------
    /**
"
lang-21,262,"            throw new IllegalArgumentException(""The date must not be null"");
        }
return (((((((cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND)) && (cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND))) && (cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE))) && (cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR))) && (cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR))) && (cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR))) && (cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR)));    }

    //-----------------------------------------------------------------------
    /**
"
lang-21,262,"            throw new IllegalArgumentException(""The date must not be null"");
        }
return (((cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND)) && (cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND))) && (cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR)));    }

    //-----------------------------------------------------------------------
    /**
"
lang-21,262,"            throw new IllegalArgumentException(""The date must not be null"");
        }
return (((((((cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND)) && (cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND))) && (cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE))) && (cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR))) && (cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR))) && (cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR))) && (cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR)));    }

    //-----------------------------------------------------------------------
    /**
"
lang-21,262,"            throw new IllegalArgumentException(""The date must not be null"");
        }
return (((((cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND)) && (cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND))) && (cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE))) && (cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR))) && (cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR)));    }

    //-----------------------------------------------------------------------
    /**
"
lang-21,262,"            throw new IllegalArgumentException(""The date must not be null"");
        }
return ((((((((cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND)) && (cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND))) && (cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE))) && (cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR))) && (cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR))) && (cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR))) && (cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA))) && (cal1.getClass() == cal2.toString()));    }

    //-----------------------------------------------------------------------
    /**
"
lang-21,262,"            throw new IllegalArgumentException(""The date must not be null"");
        }
return ((((((cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND)) && (cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND))) && (cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE))) && (cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR))) && (cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR))) && (cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE)));    }

    //-----------------------------------------------------------------------
    /**
"
lang-21,262,"            throw new IllegalArgumentException(""The date must not be null"");
        }
return ((((cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND)) && (cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND))) && (cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE))) && (cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE)));    }

    //-----------------------------------------------------------------------
    /**
"
lang-21,262,"            throw new IllegalArgumentException(""The date must not be null"");
        }
return (((((((cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND)) && (cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND))) && (cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE))) && (cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR))) && (cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR))) && (cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR))) && (cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE)));    }

    //-----------------------------------------------------------------------
    /**
"
lang-21,262,"            throw new IllegalArgumentException(""The date must not be null"");
        }
return cal2.get(Calendar.MILLISECOND);    }

    //-----------------------------------------------------------------------
    /**
"
lang-21,262,"            throw new IllegalArgumentException(""The date must not be null"");
        }
return ((((((((cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND)) && (cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND))) && (cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE))) && (cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR))) && (cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR))) && (cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR))) && (cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA))) && (cal1.getClass() == cal2.isSameLocalTime()));    }

    //-----------------------------------------------------------------------
    /**
"
lang-21,262,"            throw new IllegalArgumentException(""The date must not be null"");
        }
return ((((((((cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND)) && (cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND))) && (cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE))) && (cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR))) && (cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR))) && (cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR))) && (cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA))) && (cal1.getClass() == cal2.get()));    }

    //-----------------------------------------------------------------------
    /**
"
,,
closure-130,172,"      }

if(((name.globalSets == 1) && (name.localSets == 0))){
        // {@code name} meets condition (b). Find all of its local aliases
        // and try to inline them.
        List<Ref> refs = Lists.newArrayList(name.getRefs());
"
closure-130,172,"      }

if((((name.globalSets == 1) && (name.localSets == 0)) && (name.aliasingGets >= 0))){        // {@code name} meets condition (b). Find all of its local aliases
        // and try to inline them.
        List<Ref> refs = Lists.newArrayList(name.getRefs());
        for (Ref ref : refs) {
"
closure-130,172,"      }

if((((name.globalSets == 1) && (name.localSets == 0)) && (name.aliasingGets <= 0))){        // {@code name} meets condition (b). Find all of its local aliases
        // and try to inline them.
        List<Ref> refs = Lists.newArrayList(name.getRefs());
        for (Ref ref : refs) {
"
closure-130,172,"      }

if((((name.globalSets == 1) && (name.localSets == 0)) && (name.aliasingGets > 0))){        // {@code name} meets condition (b). Find all of its local aliases
        // and try to inline them.
        List<Ref> refs = Lists.newArrayList(name.getRefs());
        for (Ref ref : refs) {
"
closure-130,172,"      }

if((((name.globalSets == 1) && (name.localSets == 0)) || (name.aliasingGets > 0))){        // {@code name} meets condition (b). Find all of its local aliases
        // and try to inline them.
        List<Ref> refs = Lists.newArrayList(name.getRefs());
        for (Ref ref : refs) {
"
closure-130,172,"      }

if((((name.globalSets == 1) && (name.localSets == 0)) && (name.aliasingGets == 0))){        // {@code name} meets condition (b). Find all of its local aliases
        // and try to inline them.
        List<Ref> refs = Lists.newArrayList(name.getRefs());
        for (Ref ref : refs) {
"
closure-130,172,"      }

if((((name.globalSets == 1) && (name.localSets >= 0)) && (name.aliasingGets > 0))){        // {@code name} meets condition (b). Find all of its local aliases
        // and try to inline them.
        List<Ref> refs = Lists.newArrayList(name.getRefs());
        for (Ref ref : refs) {
"
closure-130,172,"      }

if(((name.globalSets == 1) && (name.aliasingGets > 0))){
        // {@code name} meets condition (b). Find all of its local aliases
        // and try to inline them.
        List<Ref> refs = Lists.newArrayList(name.getRefs());
"
closure-130,172,"      }

if((name.aliasingGets > 0)){
        // {@code name} meets condition (b). Find all of its local aliases
        // and try to inline them.
        List<Ref> refs = Lists.newArrayList(name.getRefs());
"
closure-130,172,"      }

if((((name.globalSets == 1) && (name.localSets == 0)) && (name.aliasingGets < 0))){        // {@code name} meets condition (b). Find all of its local aliases
        // and try to inline them.
        List<Ref> refs = Lists.newArrayList(name.getRefs());
        for (Ref ref : refs) {
"
closure-130,172,"      }

if((((name.globalSets == 1) && (name.localSets <= 0)) && (name.aliasingGets > 0))){        // {@code name} meets condition (b). Find all of its local aliases
        // and try to inline them.
        List<Ref> refs = Lists.newArrayList(name.getRefs());
        for (Ref ref : refs) {
"
closure-130,172,"      }

if((((name.globalSets == 2) && (name.localSets == 0)) && (name.aliasingGets > 0))){        // {@code name} meets condition (b). Find all of its local aliases
        // and try to inline them.
        List<Ref> refs = Lists.newArrayList(name.getRefs());
        for (Ref ref : refs) {
"
closure-130,172,"      }

if((((name.globalSets == 1) && (name.localSets == 0)) && (name.aliasingGets != 0))){        // {@code name} meets condition (b). Find all of its local aliases
        // and try to inline them.
        List<Ref> refs = Lists.newArrayList(name.getRefs());
        for (Ref ref : refs) {
"
closure-130,172,"      }

if((name.globalSets == 1)){
        // {@code name} meets condition (b). Find all of its local aliases
        // and try to inline them.
        List<Ref> refs = Lists.newArrayList(name.getRefs());
"
closure-130,172,"      }

if((((name.globalSets == 1) && (name.localSets == 0)) && (name.aliasingGets > 0))){
        // {@code name} meets condition (b). Find all of its local aliases
        // and try to inline them.
        List<Ref> refs = Lists.newArrayList(name.getRefs());
"
closure-130,172,"      }

if((((name.globalSets == 1) && (name.localSets > 0)) && (name.aliasingGets > 0))){        // {@code name} meets condition (b). Find all of its local aliases
        // and try to inline them.
        List<Ref> refs = Lists.newArrayList(name.getRefs());
        for (Ref ref : refs) {
"
closure-130,172,"      }

if(((((name.globalSets == 1) && (name.localSets == 0)) && (name.aliasingGets > 0)) && (name.aliasingGets > 0))){
        // {@code name} meets condition (b). Find all of its local aliases
        // and try to inline them.
        List<Ref> refs = Lists.newArrayList(name.getRefs());
"
closure-130,172,"      }

if((((name.globalSets == 1) && (name.aliasingGets > 0)) && (name.aliasingGets > 0))){
        // {@code name} meets condition (b). Find all of its local aliases
        // and try to inline them.
        List<Ref> refs = Lists.newArrayList(name.getRefs());
"
closure-130,172,"      }

if((name.localSets == 0)){
        // {@code name} meets condition (b). Find all of its local aliases
        // and try to inline them.
        List<Ref> refs = Lists.newArrayList(name.getRefs());
"
closure-130,172,"      }

if((((name.globalSets == 1) && (name.localSets != 0)) && (name.aliasingGets > 0))){        // {@code name} meets condition (b). Find all of its local aliases
        // and try to inline them.
        List<Ref> refs = Lists.newArrayList(name.getRefs());
        for (Ref ref : refs) {
"
closure-130,172,"      }

if((((name.globalSets == 1) && (name.localSets == 0)) && (name.localSets > 0))){        // {@code name} meets condition (b). Find all of its local aliases
        // and try to inline them.
        List<Ref> refs = Lists.newArrayList(name.getRefs());
        for (Ref ref : refs) {
"
closure-130,172,"      }

if((((name.globalSets == 1) && (name.aliasingGets == 0)) && (name.aliasingGets > 0))){        // {@code name} meets condition (b). Find all of its local aliases
        // and try to inline them.
        List<Ref> refs = Lists.newArrayList(name.getRefs());
        for (Ref ref : refs) {
"
closure-130,172,"      }

if((((name.localSets == 1) && (name.localSets == 0)) && (name.aliasingGets > 0))){        // {@code name} meets condition (b). Find all of its local aliases
        // and try to inline them.
        List<Ref> refs = Lists.newArrayList(name.getRefs());
        for (Ref ref : refs) {
"
closure-130,172,"      }

if((((name.aliasingGets == 1) && (name.localSets == 0)) && (name.aliasingGets > 0))){        // {@code name} meets condition (b). Find all of its local aliases
        // and try to inline them.
        List<Ref> refs = Lists.newArrayList(name.getRefs());
        for (Ref ref : refs) {
"
closure-130,172,"      }

if((((name.globalSets == 1) && (name.globalSets == 0)) && (name.aliasingGets > 0))){        // {@code name} meets condition (b). Find all of its local aliases
        // and try to inline them.
        List<Ref> refs = Lists.newArrayList(name.getRefs());
        for (Ref ref : refs) {
"
closure-130,172,"      }

if((((name.globalSets == 1) && (name.localSets == 0)) && (name.globalSets > 0))){        // {@code name} meets condition (b). Find all of its local aliases
        // and try to inline them.
        List<Ref> refs = Lists.newArrayList(name.getRefs());
        for (Ref ref : refs) {
"
closure-130,172,"      }

if((((name.globalSets == 1) && (name.localSets < 0)) && (name.aliasingGets > 0))){        // {@code name} meets condition (b). Find all of its local aliases
        // and try to inline them.
        List<Ref> refs = Lists.newArrayList(name.getRefs());
        for (Ref ref : refs) {
"
closure-130,172,"      }

if((((((name.globalSets == 1) && (name.localSets == 0)) && (name.aliasingGets > 0)) && (name.aliasingGets > 0)) && (name.aliasingGets > 0))){
        // {@code name} meets condition (b). Find all of its local aliases
        // and try to inline them.
        List<Ref> refs = Lists.newArrayList(name.getRefs());
"
closure-130,172,"      }

if (true) { return;
 }
      if (name.globalSets == 1 && name.localSets == 0 &&
          name.aliasingGets > 0) {        // {@code name} meets condition (b). Find all of its local aliases
"
closure-130,172,"      }

if((((name == 1) && (name.localSets == 0)) && (name.aliasingGets > 0))){        // {@code name} meets condition (b). Find all of its local aliases
        // and try to inline them.
        List<Ref> refs = Lists.newArrayList(name.getRefs());
        for (Ref ref : refs) {
"
closure-130,172,"      }

if((((name.globalSets == 1) && (name.localSets == 0)) && (((name.globalSets == 1) && (name.localSets == 0)) && (name.aliasingGets > 0)))){
        // {@code name} meets condition (b). Find all of its local aliases
        // and try to inline them.
        List<Ref> refs = Lists.newArrayList(name.getRefs());
"
closure-130,172,"      }

if((((name.globalSets == 1) && (name.localSets == 0)) && ((name.globalSets == 1) && (name.localSets == 0)))){
        // {@code name} meets condition (b). Find all of its local aliases
        // and try to inline them.
        List<Ref> refs = Lists.newArrayList(name.getRefs());
"
closure-130,172,"      }

name.removeRef(ref);
      if (name.globalSets == 1 && name.localSets == 0 &&
          name.aliasingGets > 0) {        // {@code name} meets condition (b). Find all of its local aliases
        // and try to inline them.
"
,,
chart-7,300,"        
        if (this.maxMiddleIndex >= 0) {
long s = getDataItem(this.minStartIndex).getPeriod().getStart().getTime();
            long e = getDataItem(this.minMiddleIndex).getPeriod().getEnd()
                .getTime();
            long maxMiddle = s + (e - s) / 2;
"
chart-7,300,"        
        if (this.maxMiddleIndex >= 0) {
long s = getDataItem(this.maxStartIndex).getPeriod().getStart().getTime();
            long e = getDataItem(this.minMiddleIndex).getPeriod().getEnd()
                .getTime();
            long maxMiddle = s + (e - s) / 2;
"
chart-7,300,"        
        if (this.maxMiddleIndex >= 0) {
long s = getDataItem(this.minMiddleIndex).getPeriod().getStart().getTime();
            long e = getDataItem(this.minMiddleIndex).getPeriod().getEnd()
                .getTime();
            long maxMiddle = s + (e - s) / 2;
"
chart-7,300,"        
        if (this.maxMiddleIndex >= 0) {
long s = getDataItem(this.maxMiddleIndex).getPeriod().getStart().getTime();
            long e = getDataItem(this.minMiddleIndex).getPeriod().getEnd()
                .getTime();
            long maxMiddle = s + (e - s) / 2;
"
chart-7,300,"        
        if (this.maxMiddleIndex >= 0) {
long s = getDataItem(this.minEndIndex).getPeriod().getStart().getTime();
            long e = getDataItem(this.minMiddleIndex).getPeriod().getEnd()
                .getTime();
            long maxMiddle = s + (e - s) / 2;
"
chart-7,300,"        
        if (this.maxMiddleIndex >= 0) {
long s = getDataItem(this.maxEndIndex).getPeriod().getStart().getTime();
            long e = getDataItem(this.minMiddleIndex).getPeriod().getEnd()
                .getTime();
            long maxMiddle = s + (e - s) / 2;
"
chart-7,300,"        
        if (this.maxMiddleIndex >= 0) {
int s = getDataItem(this.minMiddleIndex).getPeriod().getStart().getTime();
            long e = getDataItem(this.minMiddleIndex).getPeriod().getEnd()
                .getTime();
            long maxMiddle = s + (e - s) / 2;
"
chart-7,300,"        
        if (this.maxMiddleIndex >= 0) {
long s = getDataItem(this.middle).getPeriod().getStart().getTime();
            long e = getDataItem(this.minMiddleIndex).getPeriod().getEnd()
                .getTime();
            long maxMiddle = s + (e - s) / 2;
"
chart-7,300,"        
        if (this.maxMiddleIndex >= 0) {
if (true) { return;
 }
            long s = getDataItem(this.minMiddleIndex).getPeriod().getStart()
                .getTime();            long e = getDataItem(this.minMiddleIndex).getPeriod().getEnd()
"
chart-7,300,"        
        if (this.maxMiddleIndex >= 0) {
long s = getDataItem(this.minMiddleIndex).getPeriod().getStart().getPeriod();
            long e = getDataItem(this.minMiddleIndex).getPeriod().getEnd()
                .getTime();
            long maxMiddle = s + (e - s) / 2;
"
chart-7,300,"        
        if (this.maxMiddleIndex >= 0) {
long s = getDataItem(this.minMiddleIndex).getPeriod().getStart().getEnd();
            long e = getDataItem(this.minMiddleIndex).getPeriod().getEnd()
                .getTime();
            long maxMiddle = s + (e - s) / 2;
"
chart-7,300,"        
        if (this.maxMiddleIndex >= 0) {
long s = getDataItem(this.minMiddleIndex).getEnd().getStart().getTime();
            long e = getDataItem(this.minMiddleIndex).getPeriod().getEnd()
                .getTime();
            long maxMiddle = s + (e - s) / 2;
"
chart-7,300,"        
        if (this.maxMiddleIndex >= 0) {
long s = getDataItem(this.minMiddleIndex).getPeriod().getPeriod().getTime();
            long e = getDataItem(this.minMiddleIndex).getPeriod().getEnd()
                .getTime();
            long maxMiddle = s + (e - s) / 2;
"
chart-7,300,"        
        if (this.maxMiddleIndex >= 0) {
long s = getDataItem(this.minMiddleIndex).getPeriod().getEnd().getTime();
            long e = getDataItem(this.minMiddleIndex).getPeriod().getEnd()
                .getTime();
            long maxMiddle = s + (e - s) / 2;
"
chart-7,300,"        
        if (this.maxMiddleIndex >= 0) {
long s = getDataItem(this.minMiddleIndex).getTime().getStart().getTime();
            long e = getDataItem(this.minMiddleIndex).getPeriod().getEnd()
                .getTime();
            long maxMiddle = s + (e - s) / 2;
"
chart-7,300,"        
        if (this.maxMiddleIndex >= 0) {
long s = getDataItem(this.minMiddleIndex).getPeriod().getTime().getTime();
            long e = getDataItem(this.minMiddleIndex).getPeriod().getEnd()
                .getTime();
            long maxMiddle = s + (e - s) / 2;
"
chart-7,300,"        
        if (this.maxMiddleIndex >= 0) {
long s = getDataItem(this.minMiddleIndex).getPeriod().getStart().getStart();
            long e = getDataItem(this.minMiddleIndex).getPeriod().getEnd()
                .getTime();
            long maxMiddle = s + (e - s) / 2;
"
chart-7,300,"        
        if (this.maxMiddleIndex >= 0) {
long s = getDataItem(this.minMiddleIndex).getStart().getStart().getTime();
            long e = getDataItem(this.minMiddleIndex).getPeriod().getEnd()
                .getTime();
            long maxMiddle = s + (e - s) / 2;
"
chart-7,300,"        
        if (this.maxMiddleIndex >= 0) {
long s = getPeriod(this.minMiddleIndex).getPeriod().getStart().getTime();
            long e = getDataItem(this.minMiddleIndex).getPeriod().getEnd()
                .getTime();
            long maxMiddle = s + (e - s) / 2;
"
chart-7,300,"        
        if (this.maxMiddleIndex >= 0) {
recalculateBounds();
            long s = getDataItem(this.minMiddleIndex).getPeriod().getStart()
                .getTime();            long e = getDataItem(this.minMiddleIndex).getPeriod().getEnd()
                .getTime();
"
chart-7,300,"        
        if (this.maxMiddleIndex >= 0) {
long s = getEnd(this.minMiddleIndex).getPeriod().getStart().getTime();
            long e = getDataItem(this.minMiddleIndex).getPeriod().getEnd()
                .getTime();
            long maxMiddle = s + (e - s) / 2;
"
chart-7,300,"        
        if (this.maxMiddleIndex >= 0) {
this.minEndIndex = index;
            long s = getDataItem(this.minMiddleIndex).getPeriod().getStart()
                .getTime();            long e = getDataItem(this.minMiddleIndex).getPeriod().getEnd()
                .getTime();
"
chart-7,300,"        
        if (this.maxMiddleIndex >= 0) {
this.maxMiddleIndex = index;
            long s = getDataItem(this.minMiddleIndex).getPeriod().getStart()
                .getTime();            long e = getDataItem(this.minMiddleIndex).getPeriod().getEnd()
                .getTime();
"
chart-7,300,"        
        if (this.maxMiddleIndex >= 0) {
long s = getDataItem(this.minStartIndex.minMiddleIndex).getPeriod().getStart().getTime();
            long e = getDataItem(this.minMiddleIndex).getPeriod().getEnd()
                .getTime();
            long maxMiddle = s + (e - s) / 2;
"
chart-7,300,"        
        if (this.maxMiddleIndex >= 0) {
long s = getDataItem(this.maxStartIndex.minMiddleIndex).getPeriod().getStart().getTime();
            long e = getDataItem(this.minMiddleIndex).getPeriod().getEnd()
                .getTime();
            long maxMiddle = s + (e - s) / 2;
"
chart-7,300,"        
        if (this.maxMiddleIndex >= 0) {
long s = getDataItem(this.minMiddleIndex.minMiddleIndex).getPeriod().getStart().getTime();
            long e = getDataItem(this.minMiddleIndex).getPeriod().getEnd()
                .getTime();
            long maxMiddle = s + (e - s) / 2;
"
chart-7,300,"        
        if (this.maxMiddleIndex >= 0) {
long s = getDataItem(this.maxMiddleIndex.minMiddleIndex).getPeriod().getStart().getTime();
            long e = getDataItem(this.minMiddleIndex).getPeriod().getEnd()
                .getTime();
            long maxMiddle = s + (e - s) / 2;
"
chart-7,300,"        
        if (this.maxMiddleIndex >= 0) {
long s = getDataItem(this.minEndIndex.minMiddleIndex).getPeriod().getStart().getTime();
            long e = getDataItem(this.minMiddleIndex).getPeriod().getEnd()
                .getTime();
            long maxMiddle = s + (e - s) / 2;
"
chart-7,300,"        
        if (this.maxMiddleIndex >= 0) {
long s = getDataItem(this.maxEndIndex.minMiddleIndex).getPeriod().getStart().getTime();
            long e = getDataItem(this.minMiddleIndex).getPeriod().getEnd()
                .getTime();
            long maxMiddle = s + (e - s) / 2;
"
chart-7,300,"        
        if (this.maxMiddleIndex >= 0) {
long s = getDataItem(this.getItemCount().minMiddleIndex).getPeriod().getStart().getTime();
            long e = getDataItem(this.minMiddleIndex).getPeriod().getEnd()
                .getTime();
            long maxMiddle = s + (e - s) / 2;
"
chart-7,300,"        
        if (this.maxMiddleIndex >= 0) {
long s = getDataItem(this.hashCode().minMiddleIndex).getPeriod().getStart().getTime();
            long e = getDataItem(this.minMiddleIndex).getPeriod().getEnd()
                .getTime();
            long maxMiddle = s + (e - s) / 2;
"
chart-7,300,"        
        if (this.maxMiddleIndex >= 0) {
long s = getDataItem(this.getMinStartIndex().minMiddleIndex).getPeriod().getStart().getTime();
            long e = getDataItem(this.minMiddleIndex).getPeriod().getEnd()
                .getTime();
            long maxMiddle = s + (e - s) / 2;
"
chart-7,300,"        
        if (this.maxMiddleIndex >= 0) {
long s = getDataItem(this.getMaxStartIndex().minMiddleIndex).getPeriod().getStart().getTime();
            long e = getDataItem(this.minMiddleIndex).getPeriod().getEnd()
                .getTime();
            long maxMiddle = s + (e - s) / 2;
"
chart-7,300,"        
        if (this.maxMiddleIndex >= 0) {
long s = getDataItem(this.getMinMiddleIndex().minMiddleIndex).getPeriod().getStart().getTime();
            long e = getDataItem(this.minMiddleIndex).getPeriod().getEnd()
                .getTime();
            long maxMiddle = s + (e - s) / 2;
"
chart-7,300,"        
        if (this.maxMiddleIndex >= 0) {
long s = getDataItem(this.getMaxMiddleIndex().minMiddleIndex).getPeriod().getStart().getTime();
            long e = getDataItem(this.minMiddleIndex).getPeriod().getEnd()
                .getTime();
            long maxMiddle = s + (e - s) / 2;
"
chart-7,300,"        
        if (this.maxMiddleIndex >= 0) {
long s = getDataItem(this.getMinEndIndex().minMiddleIndex).getPeriod().getStart().getTime();
            long e = getDataItem(this.minMiddleIndex).getPeriod().getEnd()
                .getTime();
            long maxMiddle = s + (e - s) / 2;
"
chart-7,300,"        
        if (this.maxMiddleIndex >= 0) {
long s = getDataItem(this.getMaxEndIndex().minMiddleIndex).getPeriod().getStart().getTime();
            long e = getDataItem(this.minMiddleIndex).getPeriod().getEnd()
                .getTime();
            long maxMiddle = s + (e - s) / 2;
"
chart-7,300,"        
        if (this.maxMiddleIndex >= 0) {
long s = getStart(this.minMiddleIndex).getPeriod().getStart().getTime();
            long e = getDataItem(this.minMiddleIndex).getPeriod().getEnd()
                .getTime();
            long maxMiddle = s + (e - s) / 2;
"
chart-7,300,"        
        if (this.maxMiddleIndex >= 0) {
long s = getTime(this.minMiddleIndex).getPeriod().getStart().getTime();
            long e = getDataItem(this.minMiddleIndex).getPeriod().getEnd()
                .getTime();
            long maxMiddle = s + (e - s) / 2;
"
chart-7,300,"        
        if (this.maxMiddleIndex >= 0) {
this.minMiddleIndex = index;
            long s = getDataItem(this.minMiddleIndex).getPeriod().getStart()
                .getTime();            long e = getDataItem(this.minMiddleIndex).getPeriod().getEnd()
                .getTime();
"
chart-7,300,"        
        if (this.maxMiddleIndex >= 0) {
if((e - s)){
            long s = getDataItem(this.minMiddleIndex).getPeriod().getStart()
                .getTime();            long e = getDataItem(this.minMiddleIndex).getPeriod().getEnd()
                .getTime();
"
chart-7,300,"        
        if (this.maxMiddleIndex >= 0) {
if(((e - s) / 2)){
            long s = getDataItem(this.minMiddleIndex).getPeriod().getStart()
                .getTime();            long e = getDataItem(this.minMiddleIndex).getPeriod().getEnd()
                .getTime();
"
chart-7,300,"        
        if (this.maxMiddleIndex >= 0) {
if((this.minMiddleIndex != null)){
            long s = getDataItem(this.minMiddleIndex).getPeriod().getStart()
                .getTime();            long e = getDataItem(this.minMiddleIndex).getPeriod().getEnd()
                .getTime();
"
chart-7,300,"        
        if (this.maxMiddleIndex >= 0) {
            long e = getDataItem(this.minMiddleIndex).getPeriod().getEnd()
                .getTime();
            long maxMiddle = s + (e - s) / 2;
            if (middle > maxMiddle) {
"
chart-7,300,"        
        if (this.maxMiddleIndex >= 0) {
break;
            long s = getDataItem(this.minMiddleIndex).getPeriod().getStart()
                .getTime();            long e = getDataItem(this.minMiddleIndex).getPeriod().getEnd()
                .getTime();
"
chart-7,300,"        
        if (this.maxMiddleIndex >= 0) {
long minEnd = getDataItem(this.minEndIndex).getPeriod().getEnd().getTime();
            long e = getDataItem(this.minMiddleIndex).getPeriod().getEnd()
                .getTime();
            long maxMiddle = s + (e - s) / 2;
"
chart-7,300,"        
        if (this.maxMiddleIndex >= 0) {
continue;
            long s = getDataItem(this.minMiddleIndex).getPeriod().getStart()
                .getTime();            long e = getDataItem(this.minMiddleIndex).getPeriod().getEnd()
                .getTime();
"
chart-7,300,"        
        if (this.maxMiddleIndex >= 0) {
long maxMiddle = (s + ((e - s) / 2));
            long e = getDataItem(this.minMiddleIndex).getPeriod().getEnd()
                .getTime();
            long maxMiddle = s + (e - s) / 2;
"
chart-7,300,"        
        if (this.maxMiddleIndex >= 0) {
long s = getDataItem(this.minMiddleIndex);
            long e = getDataItem(this.minMiddleIndex).getPeriod().getEnd()
                .getTime();
            long maxMiddle = s + (e - s) / 2;
"
chart-7,300,"        
        if (this.maxMiddleIndex >= 0) {
long s = getDataItem(this.minMiddleIndex, this.minMiddleIndex);
            long e = getDataItem(this.minMiddleIndex).getPeriod().getEnd()
                .getTime();
            long maxMiddle = s + (e - s) / 2;
"
,,
math-14,43,"    public Weight(double[] weight) {
        final int dim = weight.length;
weightMatrix = org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(dim, dim);
        for (int i = 0; i < dim; i++) {
            weightMatrix.setEntry(i, i, weight[i]);
        }
"
math-14,43,"    public Weight(double[] weight) {
        final int dim = weight.length;
weight = org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(dim, dim);
        for (int i = 0; i < dim; i++) {
            weightMatrix.setEntry(i, i, weight[i]);
        }
"
math-14,43,"    public Weight(double[] weight) {
        final int dim = weight.length;
dim = org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(dim, dim);
        for (int i = 0; i < dim; i++) {
            weightMatrix.setEntry(i, i, weight[i]);
        }
"
math-14,43,"    public Weight(double[] weight) {
        final int dim = weight.length;
weightMatrix = weightMatrix.createRealMatrix(dim, dim);
        for (int i = 0; i < dim; i++) {
            weightMatrix.setEntry(i, i, weight[i]);
        }
"
math-14,43,"    public Weight(double[] weight) {
        final int dim = weight.length;
weightMatrix = org.apache.commons.math3.linear.MatrixUtils.setEntry(dim, dim);
        for (int i = 0; i < dim; i++) {
            weightMatrix.setEntry(i, i, weight[i]);
        }
"
math-14,43,"    public Weight(double[] weight) {
        final int dim = weight.length;
weightMatrix = org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(weightMatrix, dim);
        for (int i = 0; i < dim; i++) {
            weightMatrix.setEntry(i, i, weight[i]);
        }
"
math-14,43,"    public Weight(double[] weight) {
        final int dim = weight.length;
weightMatrix = org.apache.commons.math3.linear.MatrixUtils.Weight(dim, dim);
        for (int i = 0; i < dim; i++) {
            weightMatrix.setEntry(i, i, weight[i]);
        }
"
math-14,43,"    public Weight(double[] weight) {
        final int dim = weight.length;
weightMatrix = org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(weightMatrix, weight);
        for (int i = 0; i < dim; i++) {
            weightMatrix.setEntry(i, i, weight[i]);
        }
"
math-14,43,"    public Weight(double[] weight) {
        final int dim = weight.length;
weightMatrix = org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(weight, dim);
        for (int i = 0; i < dim; i++) {
            weightMatrix.setEntry(i, i, weight[i]);
        }
"
math-14,43,"    public Weight(double[] weight) {
        final int dim = weight.length;
weightMatrix = createRealMatrix(dim, dim);
        for (int i = 0; i < dim; i++) {
            weightMatrix.setEntry(i, i, weight[i]);
        }
"
math-14,43,"    public Weight(double[] weight) {
        final int dim = weight.length;
weightMatrix = org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(weightMatrix);
        for (int i = 0; i < dim; i++) {
            weightMatrix.setEntry(i, i, weight[i]);
        }
"
math-14,43,"    public Weight(double[] weight) {
        final int dim = weight.length;
if((weightMatrix != null)){
        weightMatrix = org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(dim, dim);        for (int i = 0; i < dim; i++) {
            weightMatrix.setEntry(i, i, weight[i]);
        }
"
math-14,43,"    public Weight(double[] weight) {
        final int dim = weight.length;
weightMatrix = org.apache.commons.math3.linear.MatrixUtils.debug(dim, dim);
        for (int i = 0; i < dim; i++) {
            weightMatrix.setEntry(i, i, weight[i]);
        }
"
math-14,43,"    public Weight(double[] weight) {
        final int dim = weight.length;
weightMatrix = weight.createRealMatrix(dim, dim);
        for (int i = 0; i < dim; i++) {
            weightMatrix.setEntry(i, i, weight[i]);
        }
"
math-14,43,"    public Weight(double[] weight) {
        final int dim = weight.length;
weightMatrix = org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(dim);
        for (int i = 0; i < dim; i++) {
            weightMatrix.setEntry(i, i, weight[i]);
        }
"
math-14,43,"    public Weight(double[] weight) {
        final int dim = weight.length;
if((weightMatrix == null)){
        weightMatrix = org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(dim, dim);        for (int i = 0; i < dim; i++) {
            weightMatrix.setEntry(i, i, weight[i]);
        }
"
math-14,43,"    public Weight(double[] weight) {
        final int dim = weight.length;
if((dim != null)){
        weightMatrix = org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(dim, dim);        for (int i = 0; i < dim; i++) {
            weightMatrix.setEntry(i, i, weight[i]);
        }
"
math-14,43,"    public Weight(double[] weight) {
        final int dim = weight.length;
weightMatrix = org.apache.commons.math3.linear.MatrixUtils.e(dim, dim);
        for (int i = 0; i < dim; i++) {
            weightMatrix.setEntry(i, i, weight[i]);
        }
"
math-14,43,"    public Weight(double[] weight) {
        final int dim = weight.length;
weightMatrix = LOG.createRealMatrix(dim, dim);
        for (int i = 0; i < dim; i++) {
            weightMatrix.setEntry(i, i, weight[i]);
        }
"
math-14,43,"    public Weight(double[] weight) {
        final int dim = weight.length;
org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(dim, dim);
        for (int i = 0; i < dim; i++) {
            weightMatrix.setEntry(i, i, weight[i]);
        }
"
math-14,43,"    public Weight(double[] weight) {
        final int dim = weight.length;
weightMatrix.weightMatrix = org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(dim, dim);
        for (int i = 0; i < dim; i++) {
            weightMatrix.setEntry(i, i, weight[i]);
        }
"
math-14,43,"    public Weight(double[] weight) {
        final int dim = weight.length;
getWeight().weightMatrix = org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(dim, dim);
        for (int i = 0; i < dim; i++) {
            weightMatrix.setEntry(i, i, weight[i]);
        }
"
math-14,43,"    public Weight(double[] weight) {
        final int dim = weight.length;
org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(weightMatrix, dim);
        for (int i = 0; i < dim; i++) {
            weightMatrix.setEntry(i, i, weight[i]);
        }
"
math-14,43,"    public Weight(double[] weight) {
        final int dim = weight.length;
weightMatrix = org.apache.commons.math3.linear.MatrixUtils.add(dim, dim);
        for (int i = 0; i < dim; i++) {
            weightMatrix.setEntry(i, i, weight[i]);
        }
"
math-14,43,"    public Weight(double[] weight) {
        final int dim = weight.length;
if((dim == null)){
        weightMatrix = org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(dim, dim);        for (int i = 0; i < dim; i++) {
            weightMatrix.setEntry(i, i, weight[i]);
        }
"
math-14,43,"    public Weight(double[] weight) {
        final int dim = weight.length;
weightMatrix = weightMatrix;
        for (int i = 0; i < dim; i++) {
            weightMatrix.setEntry(i, i, weight[i]);
        }
"
math-14,43,"    public Weight(double[] weight) {
        final int dim = weight.length;
weightMatrix = org.apache.commons.math3.linear.MatrixUtils.weight(dim, dim);
        for (int i = 0; i < dim; i++) {
            weightMatrix.setEntry(i, i, weight[i]);
        }
"
math-14,43,"    public Weight(double[] weight) {
        final int dim = weight.length;
if(weightMatrix){
        weightMatrix = org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(dim, dim);        for (int i = 0; i < dim; i++) {
            weightMatrix.setEntry(i, i, weight[i]);
        }
"
math-14,43,"    public Weight(double[] weight) {
        final int dim = weight.length;
i = org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(dim, dim);
        for (int i = 0; i < dim; i++) {
            weightMatrix.setEntry(i, i, weight[i]);
        }
"
math-14,43,"    public Weight(double[] weight) {
        final int dim = weight.length;
length = org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(dim, dim);
        for (int i = 0; i < dim; i++) {
            weightMatrix.setEntry(i, i, weight[i]);
        }
"
math-14,43,"    public Weight(double[] weight) {
        final int dim = weight.length;
createRealMatrix(dim, dim);
        for (int i = 0; i < dim; i++) {
            weightMatrix.setEntry(i, i, weight[i]);
        }
"
math-14,43,"    public Weight(double[] weight) {
        final int dim = weight.length;
if(dim){
        weightMatrix = org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(dim, dim);        for (int i = 0; i < dim; i++) {
            weightMatrix.setEntry(i, i, weight[i]);
        }
"
math-14,43,"    public Weight(double[] weight) {
        final int dim = weight.length;
if((dim == 0)){
        weightMatrix = org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(dim, dim);        for (int i = 0; i < dim; i++) {
            weightMatrix.setEntry(i, i, weight[i]);
        }
"
math-14,43,"    public Weight(double[] weight) {
        final int dim = weight.length;
weightMatrix = org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(i, i, weight[i]);
        for (int i = 0; i < dim; i++) {
            weightMatrix.setEntry(i, i, weight[i]);
        }
"
math-14,43,"    public Weight(double[] weight) {
        final int dim = weight.length;
if((weightMatrix == dim)){
        weightMatrix = org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(dim, dim);        for (int i = 0; i < dim; i++) {
            weightMatrix.setEntry(i, i, weight[i]);
        }
"
math-14,43,"    public Weight(double[] weight) {
        final int dim = weight.length;
weightMatrix = org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(dim, weightMatrix);
        for (int i = 0; i < dim; i++) {
            weightMatrix.setEntry(i, i, weight[i]);
        }
"
math-14,43,"    public Weight(double[] weight) {
        final int dim = weight.length;
weightMatrix = org.apache.commons.math3.linear.MatrixUtils.max(dim, dim);
        for (int i = 0; i < dim; i++) {
            weightMatrix.setEntry(i, i, weight[i]);
        }
"
,,
math-14,267,"     */
    private RealMatrix squareRoot(RealMatrix m) {
new EigenDecomposition(m);
            return dec.getSquareRoot();
    }
}"
math-14,267,"     */
    private RealMatrix squareRoot(RealMatrix m) {
EigenDecomposition dec = new EigenDecomposition(m);
            return dec.getSquareRoot();
    }
}"
math-14,267,"     */
    private RealMatrix squareRoot(RealMatrix m) {
final EigenDecomposition dec = new EigenDecomposition(m);
            return dec.getSquareRoot();
    }
}"
math-14,267,"     */
    private RealMatrix squareRoot(RealMatrix m) {
final EigenDecomposition dec = new EigenDecomposition();
            return dec.getSquareRoot();
    }
}"
math-14,267,"     */
    private RealMatrix squareRoot(RealMatrix m) {
if((m == null)){
return null;}            final EigenDecomposition dec = new EigenDecomposition(m);            return dec.getSquareRoot();
    }
}"
math-14,267,"     */
    private RealMatrix squareRoot(RealMatrix m) {
final EigenDecomposition dec = new EigenDecomposition(m, false);
            return dec.getSquareRoot();
    }
}"
math-14,267,"     */
    private RealMatrix squareRoot(RealMatrix m) {
final EigenDecomposition dec = new EigenDecomposition(m, true);
            return dec.getSquareRoot();
    }
}"
math-14,267,"     */
    private RealMatrix squareRoot(RealMatrix m) {
dec = new EigenDecomposition(m);
            return dec.getSquareRoot();
    }
}"
math-14,267,"     */
    private RealMatrix squareRoot(RealMatrix m) {
final EigenDecomposition dec = new EigenDecomposition(m, this);
            return dec.getSquareRoot();
    }
}"
math-14,267,"     */
    private RealMatrix squareRoot(RealMatrix m) {
if((m != null)){
            final EigenDecomposition dec = new EigenDecomposition(m);            return dec.getSquareRoot();
}
    }
"
math-14,267,"     */
    private RealMatrix squareRoot(RealMatrix m) {
final EigenDecomposition dec = new EigenDecomposition(m, null);
            return dec.getSquareRoot();
    }
}"
math-14,267,"     */
    private RealMatrix squareRoot(RealMatrix m) {
final EigenDecomposition dec = new EigenDecomposition(m, m);
            return dec.getSquareRoot();
    }
}"
math-14,267,"     */
    private RealMatrix squareRoot(RealMatrix m) {
if((m == null)){
            final EigenDecomposition dec = new EigenDecomposition(m);            return dec.getSquareRoot();
}
    }
"
math-14,267,"     */
    private RealMatrix squareRoot(RealMatrix m) {
if((m != null)){
return null;}            final EigenDecomposition dec = new EigenDecomposition(m);            return dec.getSquareRoot();
    }
}"
math-14,267,"     */
    private RealMatrix squareRoot(RealMatrix m) {
final EigenDecomposition dec = new EigenDecomposition();
            return dec.getSquareRoot();
    }
}"
math-14,267,"     */
    private RealMatrix squareRoot(RealMatrix m) {
if (true) { return null; }
            final EigenDecomposition dec = new EigenDecomposition(m);            return dec.getSquareRoot();
    }
}"
math-14,267,"     */
    private RealMatrix squareRoot(RealMatrix m) {
final EigenDecomposition dec = new EigenDecomposition(m, 0);
            return dec.getSquareRoot();
    }
}"
math-14,267,"     */
    private RealMatrix squareRoot(RealMatrix m) {
final EigenDecomposition dec = new EigenDecomposition(m, ""null"");
            return dec.getSquareRoot();
    }
}"
math-14,267,"     */
    private RealMatrix squareRoot(RealMatrix m) {
super.squareRoot();
            final EigenDecomposition dec = new EigenDecomposition(m);            return dec.getSquareRoot();
    }
}"
math-14,267,"     */
    private RealMatrix squareRoot(RealMatrix m) {
final EigenDecomposition dec = new EigenDecomposition(dec);
            return dec.getSquareRoot();
    }
}"
math-14,267,"     */
    private RealMatrix squareRoot(RealMatrix m) {
final EigenDecomposition dec = new EigenDecomposition(true);
            return dec.getSquareRoot();
    }
}"
math-14,267,"     */
    private RealMatrix squareRoot(RealMatrix m) {
final EigenDecomposition dec = new EigenDecomposition(false);
            return dec.getSquareRoot();
    }
}"
math-14,267,"     */
    private RealMatrix squareRoot(RealMatrix m) {
final EigenDecomposition dec = (EigenDecomposition)m;
            return dec.getSquareRoot();
    }
}"
math-14,267,"     */
    private RealMatrix squareRoot(RealMatrix m) {
if((m == null)){
return ""null"";}            final EigenDecomposition dec = new EigenDecomposition(m);            return dec.getSquareRoot();
    }
}"
,,
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y >= TWO_POWER_52) || (y <= -TWO_POWER_52))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y >= TWO_POWER_52) || (y >= -TWO_POWER_52))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y >= TWO_POWER_52) || (y > -TWO_POWER_52))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y > TWO_POWER_52) || (y <= -TWO_POWER_52))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y <= TWO_POWER_52) || (y <= -TWO_POWER_52))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y >= TWO_POWER_52) || (y < -TWO_POWER_52))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y < TWO_POWER_52) || (y <= -TWO_POWER_52))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if((y >= TWO_POWER_52)){
                return pow(-x, y);
            }

"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if((y <= -TWO_POWER_52)){
                return pow(-x, y);
            }

"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y == TWO_POWER_52) || (y <= -TWO_POWER_52))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y >= TWO_POWER_52) || (y == -TWO_POWER_52))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y != TWO_POWER_52) || (y <= -TWO_POWER_52))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y >= TWO_POWER_52) || (y != -TWO_POWER_52))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y >= TWO_POWER_52) || (y <= LOG_MAX_VALUE))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y >= TWO_POWER_52) || (y <= PI))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y >= TWO_POWER_52) || (y <= E))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y >= TWO_POWER_52) || (y <= LN_2_A))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y >= TWO_POWER_52) || (y <= LN_2_B))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y >= TWO_POWER_52) || (y <= LN_QUICK_COEF))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y >= TWO_POWER_52) || (y <= LN_HI_PREC_COEF))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y >= TWO_POWER_52) || (y <= SINE_TABLE_A))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y >= TWO_POWER_52) || (y <= SINE_TABLE_B))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y >= TWO_POWER_52) || (y <= COSINE_TABLE_A))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y >= TWO_POWER_52) || (y <= COSINE_TABLE_B))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y >= TWO_POWER_52) || (y <= TANGENT_TABLE_A))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y >= TWO_POWER_52) || (y <= TANGENT_TABLE_B))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y >= TWO_POWER_52) || (y <= EIGHTHS))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y >= TWO_POWER_52) || (y <= CBRTTWO))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y >= TWO_POWER_52) || (y <= TWO_POWER_52))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y >= TWO_POWER_52) || (y <= F_1_3))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y >= TWO_POWER_52) || (y <= F_1_5))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y >= TWO_POWER_52) || (y <= F_1_7))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y >= TWO_POWER_52) || (y <= F_1_9))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y >= TWO_POWER_52) || (y <= F_1_11))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y >= TWO_POWER_52) || (y <= F_1_13))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y >= TWO_POWER_52) || (y <= F_1_15))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y >= TWO_POWER_52) || (y <= F_1_17))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y >= TWO_POWER_52) || (y <= F_3_4))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y >= TWO_POWER_52) || (y <= F_15_16))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y >= TWO_POWER_52) || (y <= F_13_14))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y >= TWO_POWER_52) || (y <= F_11_12))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y >= TWO_POWER_52) || (y <= F_9_10))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y >= TWO_POWER_52) || (y <= F_7_8))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y >= TWO_POWER_52) || (y <= F_5_6))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y >= TWO_POWER_52) || (y <= F_1_2))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y >= TWO_POWER_52) || (y <= F_1_4))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y >= TWO_POWER_52) || (y || -TWO_POWER_52))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y || TWO_POWER_52) || (y <= -TWO_POWER_52))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y >= TWO_POWER_52) || (y <= -TWO_POWER_52))){
                return pow(-x, y);
            }

"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y >= TWO_POWER_52) || (y && -TWO_POWER_52))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y && TWO_POWER_52) || (y <= -TWO_POWER_52))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y >= LOG_MAX_VALUE) || (y <= -TWO_POWER_52))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y >= PI) || (y <= -TWO_POWER_52))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y >= E) || (y <= -TWO_POWER_52))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y >= LN_2_A) || (y <= -TWO_POWER_52))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y >= LN_2_B) || (y <= -TWO_POWER_52))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y >= LN_QUICK_COEF) || (y <= -TWO_POWER_52))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y >= LN_HI_PREC_COEF) || (y <= -TWO_POWER_52))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y >= SINE_TABLE_A) || (y <= -TWO_POWER_52))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y >= SINE_TABLE_B) || (y <= -TWO_POWER_52))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y >= COSINE_TABLE_A) || (y <= -TWO_POWER_52))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y >= COSINE_TABLE_B) || (y <= -TWO_POWER_52))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y >= TANGENT_TABLE_A) || (y <= -TWO_POWER_52))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y >= TANGENT_TABLE_B) || (y <= -TWO_POWER_52))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y >= EIGHTHS) || (y <= -TWO_POWER_52))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y >= CBRTTWO) || (y <= -TWO_POWER_52))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y >= F_1_3) || (y <= -TWO_POWER_52))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y >= F_1_5) || (y <= -TWO_POWER_52))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y >= F_1_7) || (y <= -TWO_POWER_52))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y >= F_1_9) || (y <= -TWO_POWER_52))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y >= F_1_11) || (y <= -TWO_POWER_52))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y >= F_1_13) || (y <= -TWO_POWER_52))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y >= F_1_15) || (y <= -TWO_POWER_52))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y >= F_1_17) || (y <= -TWO_POWER_52))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y >= F_3_4) || (y <= -TWO_POWER_52))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y >= F_15_16) || (y <= -TWO_POWER_52))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y >= F_13_14) || (y <= -TWO_POWER_52))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y >= F_11_12) || (y <= -TWO_POWER_52))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y >= F_9_10) || (y <= -TWO_POWER_52))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y >= F_7_8) || (y <= -TWO_POWER_52))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y >= F_5_6) || (y <= -TWO_POWER_52))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y >= F_1_2) || (y <= -TWO_POWER_52))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y >= F_1_4) || (y <= -TWO_POWER_52))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y & TWO_POWER_52) || (y <= -TWO_POWER_52))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y >= TWO_POWER_52) || (y & -TWO_POWER_52))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if((((y >= TWO_POWER_52) || (y <= -TWO_POWER_52)) || (y <= -TWO_POWER_52))){
                return pow(-x, y);
            }

"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y >= TWO_POWER_52) || (y <= x))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y - TWO_POWER_52) || (y <= -TWO_POWER_52))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y >= TWO_POWER_52) || (y - -TWO_POWER_52))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y >= TWO_POWER_52) || (y <= y))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y >= TWO_POWER_52) && (y <= -TWO_POWER_52))){
                return pow(-x, y);
            }

"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y >= x) || (y <= -TWO_POWER_52))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y >= y) || (y <= -TWO_POWER_52))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y >= TWO_POWER_52) || (y <= -LOG_MAX_VALUE))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y >= TWO_POWER_52) || (y <= -PI))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y >= TWO_POWER_52) || (y <= -E))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y >= TWO_POWER_52) || (y <= -LN_2_A))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y >= TWO_POWER_52) || (y <= -LN_2_B))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y >= TWO_POWER_52) || (y <= -LN_QUICK_COEF))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y >= TWO_POWER_52) || (y <= -LN_HI_PREC_COEF))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y >= TWO_POWER_52) || (y <= -SINE_TABLE_A))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y >= TWO_POWER_52) || (y <= -SINE_TABLE_B))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y >= TWO_POWER_52) || (y <= -COSINE_TABLE_A))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y >= TWO_POWER_52) || (y <= -COSINE_TABLE_B))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y >= TWO_POWER_52) || (y <= -TANGENT_TABLE_A))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y >= TWO_POWER_52) || (y <= -TANGENT_TABLE_B))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y >= TWO_POWER_52) || (y <= -EIGHTHS))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y >= TWO_POWER_52) || (y <= -CBRTTWO))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y >= TWO_POWER_52) || (y <= -F_1_3))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y >= TWO_POWER_52) || (y <= -F_1_5))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y >= TWO_POWER_52) || (y <= -F_1_7))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y >= TWO_POWER_52) || (y <= -F_1_9))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y >= TWO_POWER_52) || (y <= -F_1_11))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y >= TWO_POWER_52) || (y <= -F_1_13))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y >= TWO_POWER_52) || (y <= -F_1_15))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y >= TWO_POWER_52) || (y <= -F_1_17))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y >= TWO_POWER_52) || (y <= -F_3_4))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y >= TWO_POWER_52) || (y <= -F_15_16))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y >= TWO_POWER_52) || (y <= -F_13_14))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y >= TWO_POWER_52) || (y <= -F_11_12))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y >= TWO_POWER_52) || (y <= -F_9_10))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y >= TWO_POWER_52) || (y <= -F_7_8))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y >= TWO_POWER_52) || (y <= -F_5_6))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y >= TWO_POWER_52) || (y <= -F_1_2))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y >= TWO_POWER_52) || (y <= -F_1_4))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((long)y & 1)){
                return pow(-x, y);
            }

"
math-15,1541,"        /* Handle special case x<0 */
        if (x < 0) {
            // y is an even integer in this case
            if (y >= TWO_POWER_52 || y <= -TWO_POWER_52) {                return pow(-x, y);
            }

"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y >= TWO_POWER_52) || (x <= -TWO_POWER_52))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        if (x < 0) {
            // y is an even integer in this case
if(((y >= TWO_POWER_52) || (y <= -x))){                return pow(-x, y);
            }

            if (y == (long) y) {
"
math-15,1541,"        /* Handle special case x<0 */
        if (x < 0) {
            // y is an even integer in this case
            if (y >= TWO_POWER_52 || y <= -TWO_POWER_52) {                return pow(-x, y);
            }

"
math-15,1541,"        /* Handle special case x<0 */
        if (x < 0) {
            // y is an even integer in this case
            if (y >= TWO_POWER_52 || y <= -TWO_POWER_52) {                return pow(-x, y);
            }

"
math-15,1541,"
        /* Handle special case x<0 */
        if (x < 0) {
            // y is an even integer in this case
            if (y >= TWO_POWER_52 || y <= -TWO_POWER_52) {                return pow(-x, y);
            }
"
math-15,1541,"        /* Handle special case x<0 */
        if (x < 0) {
            // y is an even integer in this case
            if (y >= TWO_POWER_52 || y <= -TWO_POWER_52) {                return pow(-x, y);
            }

"
,,
math-55,473,"
      // compute cross product from v3 and v2 instead of v1 and v2
return new Vector3D(((v1.y * v2.z) - (v1.z * v2.y)), ((v1.z * v2.x) - (v1.x * v2.z)), ((v1.x * v2.y) - (v1.y * v2.x)));
  }

  /** Compute the distance between two vectors according to the L<sub>1</sub> norm.
"
math-55,473,"
      // compute cross product from v3 and v2 instead of v1 and v2
return new Vector3D(((v1.y * v2.z) - (v1.z * v2.y)), ((v1.z * v2.x) - (v1.x * v2.z)), ((v1.x * v1.x) - (v1.y * v2.x)));
  }

  /** Compute the distance between two vectors according to the L<sub>1</sub> norm.
"
math-55,473,"
      // compute cross product from v3 and v2 instead of v1 and v2
return new Vector3D(((v1.y * v2.z) - (v1.z * v2.y)), ((v1.z * v2.x) - (v1.x * v2.z)), ((v1.x * v1.y) - (v1.y * v2.x)));
  }

  /** Compute the distance between two vectors according to the L<sub>1</sub> norm.
"
math-55,473,"
      // compute cross product from v3 and v2 instead of v1 and v2
return new Vector3D(((v1.y * v2.z) - (v1.z * v2.y)), ((v1.z * v2.x) - (v1.x * v2.z)), ((v1.x * v1.z) - (v1.y * v2.x)));
  }

  /** Compute the distance between two vectors according to the L<sub>1</sub> norm.
"
math-55,473,"
      // compute cross product from v3 and v2 instead of v1 and v2
return new Vector3D(((v1.y * v2.z) - (v1.z * v2.y)), ((v1.z * v2.x) - (v1.y * v2.z)), ((v1.x * v2.y) - (v1.y * v2.x)));
  }

  /** Compute the distance between two vectors according to the L<sub>1</sub> norm.
"
math-55,473,"
      // compute cross product from v3 and v2 instead of v1 and v2
return new Vector3D(((v1.y * v2.z) - (v1.z * v2.y)), ((v1.z * v2.x) - (v1.z * v2.z)), ((v1.x * v2.y) - (v1.y * v2.x)));
  }

  /** Compute the distance between two vectors according to the L<sub>1</sub> norm.
"
math-55,473,"
      // compute cross product from v3 and v2 instead of v1 and v2
return new Vector3D(((v1.y * v2.z) - (v1.z * v2.y)), ((v1.z * v2.x) - (v1.x * v2.z)), ((v1.x * v2.y) + (v1.y * v2.x)));
  }

  /** Compute the distance between two vectors according to the L<sub>1</sub> norm.
"
math-55,473,"
      // compute cross product from v3 and v2 instead of v1 and v2
return new Vector3D(((v1.y * v2.z) - (v1.z * v2.y)), ((v1.z * v2.x) - (v1.x * v2.z)), ((v1.x * v2.y) <= (v1.y * v2.x)));
  }

  /** Compute the distance between two vectors according to the L<sub>1</sub> norm.
"
math-55,473,"
      // compute cross product from v3 and v2 instead of v1 and v2
return ((v1.y * v2.z) - (v1.z * v2.y));
  }

  /** Compute the distance between two vectors according to the L<sub>1</sub> norm.
"
math-55,473,"
      // compute cross product from v3 and v2 instead of v1 and v2
return new Vector3D(((v1.y * v2.z) - (v1.z * v2.y)), ((v1.z * v2.x) - (v1.x * v1.x)), ((v1.x * v2.y) - (v1.y * v2.x)));
  }

  /** Compute the distance between two vectors according to the L<sub>1</sub> norm.
"
math-55,473,"
      // compute cross product from v3 and v2 instead of v1 and v2
return new Vector3D(((v1.y * v2.z) - (v1.z * v2.y)), ((v1.z * v2.x) - (v1.x * v1.y)), ((v1.x * v2.y) - (v1.y * v2.x)));
  }

  /** Compute the distance between two vectors according to the L<sub>1</sub> norm.
"
math-55,473,"
      // compute cross product from v3 and v2 instead of v1 and v2
return new Vector3D(((v1.y * v2.z) - (v1.z * v2.y)), ((v1.z * v2.x) - (v1.x * v1.z)), ((v1.x * v2.y) - (v1.y * v2.x)));
  }

  /** Compute the distance between two vectors according to the L<sub>1</sub> norm.
"
math-55,473,"
      // compute cross product from v3 and v2 instead of v1 and v2
return new Vector3D();
  }

  /** Compute the distance between two vectors according to the L<sub>1</sub> norm.
"
math-55,473,"
      // compute cross product from v3 and v2 instead of v1 and v2
return new Vector3D(((v1.y * v2.z) - (v1.z * v2.y)), ((v1.z * v2.x) - (v1.x * v2.z)), ((v1.x * v2.y) >= (v1.y * v2.x)));
  }

  /** Compute the distance between two vectors according to the L<sub>1</sub> norm.
"
math-55,473,"
      // compute cross product from v3 and v2 instead of v1 and v2
return new Vector3D(((v1.y * v2.z) - (v1.z * v2.y)), ((v1.z * v1.x) - (v1.x * v2.z)), ((v1.x * v2.y) - (v1.y * v2.x)));
  }

  /** Compute the distance between two vectors according to the L<sub>1</sub> norm.
"
math-55,473,"
      // compute cross product from v3 and v2 instead of v1 and v2
return new Vector3D(((v1.y * v2.z) - (v1.z * v2.y)), ((v1.z * v1.y) - (v1.x * v2.z)), ((v1.x * v2.y) - (v1.y * v2.x)));
  }

  /** Compute the distance between two vectors according to the L<sub>1</sub> norm.
"
math-55,473,"
      // compute cross product from v3 and v2 instead of v1 and v2
return new Vector3D(((v1.y * v2.z) - (v1.z * v2.y)), ((v1.z * v1.z) - (v1.x * v2.z)), ((v1.x * v2.y) - (v1.y * v2.x)));
  }

  /** Compute the distance between two vectors according to the L<sub>1</sub> norm.
"
math-55,473,"
      // compute cross product from v3 and v2 instead of v1 and v2
return ((v1.z * v2.x) - (v1.x * v2.z));
  }

  /** Compute the distance between two vectors according to the L<sub>1</sub> norm.
"
math-55,473,"
      // compute cross product from v3 and v2 instead of v1 and v2
return ((v1.x * v2.y) - (v1.y * v2.x));
  }

  /** Compute the distance between two vectors according to the L<sub>1</sub> norm.
"
math-55,473,"
      // compute cross product from v3 and v2 instead of v1 and v2
return new Vector3D(((v1.y * v2.z) - (v1.z * v2.y)), ((v1.z * v2.x) - (v1.x * v2.z)), ((v1.x * v2.y) / (v1.y * v2.x)));
  }

  /** Compute the distance between two vectors according to the L<sub>1</sub> norm.
"
math-55,473,"
      // compute cross product from v3 and v2 instead of v1 and v2
return new Vector3D(((v1.y * v2.z) - (v1.z * v2.y)), ((v1.z * v2.x) - (v1.x * v2.z)), ((v1.x * x) - (v1.y * v2.x)));
  }

  /** Compute the distance between two vectors according to the L<sub>1</sub> norm.
"
math-55,473,"
      // compute cross product from v3 and v2 instead of v1 and v2
return new Vector3D(((v1.y * v2.z) - (v1.z * v2.y)), ((v1.z * v2.x) - (v1.x * v2.z)), ((v1.x * y) - (v1.y * v2.x)));
  }

  /** Compute the distance between two vectors according to the L<sub>1</sub> norm.
"
math-55,473,"
      // compute cross product from v3 and v2 instead of v1 and v2
return new Vector3D(((v1.y * v2.z) - (v1.z * v2.y)), ((v1.z * v2.x) - (v1.x * v2.z)), ((v1.x * z) - (v1.y * v2.x)));
  }

  /** Compute the distance between two vectors according to the L<sub>1</sub> norm.
"
math-55,473,"
      // compute cross product from v3 and v2 instead of v1 and v2
return new Vector3D(((v1.y * v2.z) - (v1.z * v2.y)), ((v1.z * v2.x) - (v1.x * v2.z)), ((v1.x * v2.y) * (v1.y * v2.x)));
  }

  /** Compute the distance between two vectors according to the L<sub>1</sub> norm.
"
math-55,473,"
      // compute cross product from v3 and v2 instead of v1 and v2
return new Vector3D(((v1.y * v2.z) - (v1.z * v2.y)), ((v1.z * v2.x) - (v1.x * v2.z)), ((v1.x * v2.y) % (v1.y * v2.x)));
  }

  /** Compute the distance between two vectors according to the L<sub>1</sub> norm.
"
math-55,473,"
      // compute cross product from v3 and v2 instead of v1 and v2
return new Vector3D(((v1.y * v2.z) - (v1.z * v2.y)), ((v1.z * v2.x) - (v1.x * v2.z)), ((v1.x * v2.y) == (v1.y * v2.x)));
  }

  /** Compute the distance between two vectors according to the L<sub>1</sub> norm.
"
math-55,473,"
      // compute cross product from v3 and v2 instead of v1 and v2
return new Vector3D(((v1.y * v2.z) - (v1.z * v2.y)), ((v1.z * v2.x) - (v1.x * v2.z)), ((x * v2.y) - (v1.y * v2.x)));
  }

  /** Compute the distance between two vectors according to the L<sub>1</sub> norm.
"
math-55,473,"
      // compute cross product from v3 and v2 instead of v1 and v2
return new Vector3D(((v1.y * v2.z) - (v1.z * v2.y)), ((v1.z * v2.x) - (v1.x * v2.z)), ((y * v2.y) - (v1.y * v2.x)));
  }

  /** Compute the distance between two vectors according to the L<sub>1</sub> norm.
"
math-55,473,"
      // compute cross product from v3 and v2 instead of v1 and v2
return new Vector3D(((v1.y * v2.z) - (v1.z * v2.y)), ((v1.z * v2.x) - (v1.x * v2.z)), ((z * v2.y) - (v1.y * v2.x)));
  }

  /** Compute the distance between two vectors according to the L<sub>1</sub> norm.
"
math-55,473,"
      // compute cross product from v3 and v2 instead of v1 and v2
return new Vector3D(((v1.y * v2.z) - (v1.z * v2.y)), ((v1.z * v2.x) - (v1.x * v2.z)), ((v1.x * v2.x) - (v1.y * v2.x)));
  }

  /** Compute the distance between two vectors according to the L<sub>1</sub> norm.
"
math-55,473,"
      // compute cross product from v3 and v2 instead of v1 and v2
return new Vector3D(((v1.y * v2.z) - (v1.z * v2.y)), ((v1.z * v2.x) - (v1.x * v2.z)), ((v1.x * v2.z) - (v1.y * v2.x)));
  }

  /** Compute the distance between two vectors according to the L<sub>1</sub> norm.
"
math-55,473,"
      // compute cross product from v3 and v2 instead of v1 and v2
return v1;
  }

  /** Compute the distance between two vectors according to the L<sub>1</sub> norm.
"
math-55,473,"
      // compute cross product from v3 and v2 instead of v1 and v2
return new Vector3D(((v1.y * v2.z) - (v1.z * v2.y)), ((v1.z * v2.x) - (v1.x * v2.z)), ((v1.x * v1) - (v1.y * v2.x)));
  }

  /** Compute the distance between two vectors according to the L<sub>1</sub> norm.
"
math-55,473,"
      // compute cross product from v3 and v2 instead of v1 and v2
return new Vector3D(((v1.y * v2.z) - (v1.z * v2.y)), ((v1.z * v2.x) - (v1.x * v2.z)), ((v1.x * v2.y) > (v1.y * v2.x)));
  }

  /** Compute the distance between two vectors according to the L<sub>1</sub> norm.
"
math-55,473,"
      // compute cross product from v3 and v2 instead of v1 and v2
return new Vector3D(((v1.y * v2.z) - (v1.z * v2.y)), ((v1.z * v2.x) - (v2.x * v2.z)), ((v1.x * v2.y) - (v1.y * v2.x)));
  }

  /** Compute the distance between two vectors according to the L<sub>1</sub> norm.
"
math-55,473,"
      // compute cross product from v3 and v2 instead of v1 and v2
return new Vector3D(((v1.y * v2.z) - (v1.z * v2.y)), ((v1.z * v2.x) - (v2.y * v2.z)), ((v1.x * v2.y) - (v1.y * v2.x)));
  }

  /** Compute the distance between two vectors according to the L<sub>1</sub> norm.
"
math-55,473,"
      // compute cross product from v3 and v2 instead of v1 and v2
return new Vector3D(((v1.y * v2.z) - (v1.z * v2.y)), ((v1.z * v2.x) - (v2.z * v2.z)), ((v1.x * v2.y) - (v1.y * v2.x)));
  }

  /** Compute the distance between two vectors according to the L<sub>1</sub> norm.
"
math-55,473,"
      // compute cross product from v3 and v2 instead of v1 and v2
return new Vector3D(((v1.y * v2.z) - (v1.z * v2.y)), ((v1.z * v2.x) - (v1.x * v2.z)), ((v1 * v2.y) - (v1.y * v2.x)));
  }

  /** Compute the distance between two vectors according to the L<sub>1</sub> norm.
"
math-55,473,"
      // compute cross product from v3 and v2 instead of v1 and v2
return new Vector3D(((v1.y * v2.z) - (v1.z * v2.y)), ((v1.z * v2.x) - (v1.x * v2.z)), ((v1.x * v2.y) >> (v1.y * v2.x)));
  }

  /** Compute the distance between two vectors according to the L<sub>1</sub> norm.
"
math-55,473,"
      // compute cross product from v3 and v2 instead of v1 and v2
return new Vector3D(((v1.y * v2.z) - (v1.z * v2.y)), ((v1.z * v2.x) - (v1.x * v2.z)), ((v1.z * v2.y) - (v1.y * v2.x)));
  }

  /** Compute the distance between two vectors according to the L<sub>1</sub> norm.
"
math-55,473,"
      // compute cross product from v3 and v2 instead of v1 and v2
return new Vector3D(((v1.y * v2.z) - (v1.z * v2.y)), ((v1.z * v2.x) - (v1.x * v2.z)), ((v1.y * v2.y) - (v1.y * v2.x)));
  }

  /** Compute the distance between two vectors according to the L<sub>1</sub> norm.
"
math-55,473,"
      // compute cross product from v3 and v2 instead of v1 and v2
return new Vector3D(((v1.y * v2.z) - (v1.z * v2.y)), ((v1.z * v2.x) - (v1.x * x)), ((v1.x * v2.y) - (v1.y * v2.x)));
  }

  /** Compute the distance between two vectors according to the L<sub>1</sub> norm.
"
math-55,473,"
      // compute cross product from v3 and v2 instead of v1 and v2
return new Vector3D(((v1.y * v2.z) - (v1.z * v2.y)), ((v1.z * v2.x) - (v1.x * y)), ((v1.x * v2.y) - (v1.y * v2.x)));
  }

  /** Compute the distance between two vectors according to the L<sub>1</sub> norm.
"
math-55,473,"
      // compute cross product from v3 and v2 instead of v1 and v2
return new Vector3D(((v1.y * v2.z) - (v1.z * v2.y)), ((v1.z * v2.x) - (v1.x * z)), ((v1.x * v2.y) - (v1.y * v2.x)));
  }

  /** Compute the distance between two vectors according to the L<sub>1</sub> norm.
"
math-55,473,"
      // compute cross product from v3 and v2 instead of v1 and v2
return new Vector3D(((v1.y * v2.z) - (v1.z * v2.y)), ((v1.z * v2.x) - (v1.x * v1)), ((v1.x * v2.y) - (v1.y * v2.x)));
  }

  /** Compute the distance between two vectors according to the L<sub>1</sub> norm.
"
math-55,473,"
      // compute cross product from v3 and v2 instead of v1 and v2
return new Vector3D(((v1.y * v2.z) - (v1.z * v2.y)), ((v1.z * v2.x) - (v1.x * v2.z)), ((v1.x * v2) - (v1.y * v2.x)));
  }

  /** Compute the distance between two vectors according to the L<sub>1</sub> norm.
"
math-55,473,"
      // compute cross product from v3 and v2 instead of v1 and v2
return new Vector3D(((v1.y * v2.z) - (v1.z * v2.y)), ((v1.z * v2.x) - (v1.x * v2.z)), ((v2 * v2.y) - (v1.y * v2.x)));
  }

  /** Compute the distance between two vectors according to the L<sub>1</sub> norm.
"
math-55,473,"
      // compute cross product from v3 and v2 instead of v1 and v2
return new Vector3D(((v1.y * v2.z) & (v1.z * v2.y)), ((v1.z * v2.x) - (v1.x * v2.z)), ((v1.x * v2.y) - (v1.y * v2.x)));
  }

  /** Compute the distance between two vectors according to the L<sub>1</sub> norm.
"
math-55,473,"
      // compute cross product from v3 and v2 instead of v1 and v2
if (true) { return;
 }
      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
  }
"
,,
math-77,721,"        double max = 0;
        for (double a : data) {
Math.max(max, Math.abs(a));
        }
        return max;
    }
"
math-77,721,"        double max = 0;
        for (double a : data) {
max += Math.max(max, Math.getLInfNorm(a));
        }
        return max;
    }
"
math-77,721,"        double max = 0;
        for (double a : data) {
max += Math.max(a, Math.abs(a));
        }
        return max;
    }
"
math-77,721,"        double max = 0;
        for (double a : data) {
max = Math.max(max, Math.abs(a));
        }
        return max;
    }
"
math-77,721,"        double max = 0;
        for (double a : data) {
max += Math.getLInfNorm(max, Math.abs(a));
        }
        return max;
    }
"
math-77,721,"        double max = 0;
        for (double a : data) {
max += Math.max(data, Math.abs(a));
        }
        return max;
    }
"
math-77,721,"        double max = 0;
        for (double a : data) {
max = Math.abs(a);
        }
        return max;
    }
"
math-77,721,"        double max = 0;
        for (double a : data) {
max += Math.max(max, Math.abs(a));
        }
        return max;
    }
"
math-77,721,"        double max = 0;
        for (double a : data) {
max += Math.abs(a);
        }
        return max;
    }
"
math-77,721,"        double max = 0;
        for (double a : data) {
if((a != null)){
continue;
}
            max += Math.max(max, Math.abs(a));        }
"
math-77,721,"        double max = 0;
        for (double a : data) {
max = max;
        }
        return max;
    }
"
math-77,721,"        double max = 0;
        for (double a : data) {
max += Math.max(max, Math.abs(data));
        }
        return max;
    }
"
math-77,721,"        double max = 0;
        for (double a : data) {
max += max;
        }
        return max;
    }
"
math-77,721,"        double max = 0;
        for (double a : data) {
if((a == null)){
continue;
}
            max += Math.max(max, Math.abs(a));        }
"
math-77,721,"        double max = 0;
        for (double a : data) {
max += Math.debug(max, Math.abs(a));
        }
        return max;
    }
"
math-77,721,"        double max = 0;
        for (double a : data) {
max += Math.e(max, Math.abs(a));
        }
        return max;
    }
"
math-77,721,"        double max = 0;
        for (double a : data) {
        }
        return max;
    }

"
math-77,721,"        double max = 0;
        for (double a : data) {
max += Math.max(max, a);
        }
        return max;
    }
"
math-77,721,"        double max = 0;
        for (double a : data) {
max += Math.max(max, Math.debug(a));
        }
        return max;
    }
"
math-77,721,"        double max = 0;
        for (double a : data) {
if((data != null)){
continue;
}
            max += Math.max(max, Math.abs(a));        }
"
math-77,721,"        double max = 0;
        for (double a : data) {
max += Math.add(max, Math.abs(a));
        }
        return max;
    }
"
math-77,721,"        double max = 0;
        for (double a : data) {
max = set(a);
        }
        return max;
    }
"
math-77,721,"        double max = 0;
        for (double a : data) {
max += Math.max(max, Math.e(a));
        }
        return max;
    }
"
math-77,721,"        double max = 0;
        for (double a : data) {
max += Math.max(max, max.abs(a));
        }
        return max;
    }
"
math-77,721,"        double max = 0;
        for (double a : data) {
max += Math.max(max);
        }
        return max;
    }
"
math-77,721,"        double max = 0;
        for (double a : data) {
max += Math.max(max, Math.add(a));
        }
        return max;
    }
"
math-77,721,"        double max = 0;
        for (double a : data) {
max += set(a);
        }
        return max;
    }
"
math-77,721,"        double max = 0;
        for (double a : data) {
return Math.max(max, Math.abs(a));        }
        return max;
    }

"
math-77,721,"        double max = 0;
        for (double a : data) {
max += Math.max(max, Math.abs(max));
        }
        return max;
    }
"
math-77,721,"        double max = 0;
        for (double a : data) {
if((max != null)){
continue;
}
            max += Math.max(max, Math.abs(a));        }
"
math-77,721,"        double max = 0;
        for (double a : data) {
if((data == null)){
continue;
}
            max += Math.max(max, Math.abs(a));        }
"
math-77,721,"        double max = 0;
        for (double a : data) {
max = Math.max(max);
        }
        return max;
    }
"
math-77,721,"        double max = 0;
        for (double a : data) {
Math.abs(a);
        }
        return max;
    }
"
math-77,721,"        double max = 0;
        for (double a : data) {
max = Math.set(a);
        }
        return max;
    }
"
math-77,721,"        double max = 0;
        for (double a : data) {
if((a == null)){
continue;
}            max += Math.max(max, Math.abs(a));        }
        return max;
"
math-77,721,"        double max = 0;
        for (double a : data) {
if((a > 0)){
continue;
}
            max += Math.max(max, Math.abs(a));        }
"
math-77,721,"        double max = 0;
        for (double a : data) {
max += Math.abs(max, a);
        }
        return max;
    }
"
math-77,721,"        double max = 0;
        for (double a : data) {
if((a < 0)){
continue;
}
            max += Math.max(max, Math.abs(a));        }
"
math-77,721,"        double max = 0;
        for (double a : data) {
return max += Math.max(max, Math.abs(a));        }
        return max;
    }

"
math-77,721,"        double max = 0;
        for (double a : data) {
max += Math.set(a);
        }
        return max;
    }
"
math-77,721,"        double max = 0;
        for (double a : data) {
max = Math.set(max);
        }
        return max;
    }
"
math-77,721,"        double max = 0;
        for (double a : data) {
max += max(a);
        }
        return max;
    }
"
,,
math-77,499,"
    public double getLInfNorm() {
long max = 0;
        Iterator iter = entries.iterator();
        while (iter.hasNext()) {
            iter.advance();
"
math-77,499,"
    public double getLInfNorm() {
int max = 0;
        Iterator iter = entries.iterator();
        while (iter.hasNext()) {
            iter.advance();
"
math-77,499,"
    public double getLInfNorm() {
double max = 0;
        Iterator iter = entries.iterator();
        while (iter.hasNext()) {
            iter.advance();
"
math-77,499,"
    public double getLInfNorm() {
unitize();
        double max = 0;        Iterator iter = entries.iterator();
        while (iter.hasNext()) {
            iter.advance();
"
math-77,499,"
    public double getLInfNorm() {
final double max = 0;
        Iterator iter = entries.iterator();
        while (iter.hasNext()) {
            iter.advance();
"
math-77,499,"
    public double getLInfNorm() {
double max = 1;
        Iterator iter = entries.iterator();
        while (iter.hasNext()) {
            iter.advance();
"
math-77,499,"
    public double getLInfNorm() {
entries.growTable();
        double max = 0;        Iterator iter = entries.iterator();
        while (iter.hasNext()) {
            iter.advance();
"
math-77,499,"
    public double getLInfNorm() {
if (true) { return 0; }
        double max = 0;        Iterator iter = entries.iterator();
        while (iter.hasNext()) {
            iter.advance();
"
math-77,499,"
    public double getLInfNorm() {
iter.advance();
        double max = 0;        Iterator iter = entries.iterator();
        while (iter.hasNext()) {
            iter.advance();
"
math-77,499,"
    public double getLInfNorm() {
super.getLInfNorm();
        double max = 0;        Iterator iter = entries.iterator();
        while (iter.hasNext()) {
            iter.advance();
"
math-77,499,"
    public double getLInfNorm() {
max += iter.value();
        double max = 0;        Iterator iter = entries.iterator();
        while (iter.hasNext()) {
            iter.advance();
"
math-77,499,"
    public double getLInfNorm() {
if(isInfinite()){
return 0;}        double max = 0;        Iterator iter = entries.iterator();
        while (iter.hasNext()) {
            iter.advance();
"
math-77,499,"
    public double getLInfNorm() {
if(isNaN()){
return 0;}        double max = 0;        Iterator iter = entries.iterator();
        while (iter.hasNext()) {
            iter.advance();
"
math-77,499,"
    public double getLInfNorm() {
if(!isInfinite()){
return 0;}        double max = 0;        Iterator iter = entries.iterator();
        while (iter.hasNext()) {
            iter.advance();
"
math-77,499,"
    public double getLInfNorm() {
if(!isNaN()){
return 0;}        double max = 0;        Iterator iter = entries.iterator();
        while (iter.hasNext()) {
            iter.advance();
"
math-77,499,"
    public double getLInfNorm() {
if(entries.shouldGrowTable()){
return 0;}        double max = 0;        Iterator iter = entries.iterator();
        while (iter.hasNext()) {
            iter.advance();
"
math-77,499,"
    public double getLInfNorm() {
entries.iterator();
        Iterator iter = entries.iterator();
        while (iter.hasNext()) {
            iter.advance();
"
math-77,499,"
    public double getLInfNorm() {
if (true) { return;
 }
        double max = 0;        Iterator iter = entries.iterator();
        while (iter.hasNext()) {
"
math-77,499,"
    public double getLInfNorm() {
if(iter.hasNext()){
        double max = 0;        Iterator iter = entries.iterator();
        while (iter.hasNext()) {
            iter.advance();
"
math-77,499,"
    public double getLInfNorm() {
Iterator max = 0;
        Iterator iter = entries.iterator();
        while (iter.hasNext()) {
            iter.advance();
"
math-77,499,"
    public double getLInfNorm() {
if(isInfinite()){
return max;}        double max = 0;        Iterator iter = entries.iterator();
        while (iter.hasNext()) {
            iter.advance();
"
math-77,499,"
    public double getLInfNorm() {
if(isNaN()){
return max;}        double max = 0;        Iterator iter = entries.iterator();
        while (iter.hasNext()) {
            iter.advance();
"
math-77,499,"
    public double getLInfNorm() {
double max = -1;
        Iterator iter = entries.iterator();
        while (iter.hasNext()) {
            iter.advance();
"
,,
closure-68,869,"                    }

token = eatTokensUntilEOL();
                  }
                  continue retry;
              }
"
closure-68,869,"                    }

token = next();
                  }
                  continue retry;
              }
"
closure-68,869,"                    }

token = current();
                  }
                  continue retry;
              }
"
closure-68,869,"                    }

                  }
                  continue retry;
              }
            }
"
closure-68,869,"                    }

break;
                  token = eatTokensUntilEOL();                  }
                  continue retry;
              }
"
closure-68,869,"                    }

eatTokensUntilEOL();
                  }
                  continue retry;
              }
"
closure-68,869,"                    }

parser.addTypeWarning(""null"", lineno, charno);
                  }
                  continue retry;
              }
"
closure-68,869,"                    }

parser.addParserWarning(""null"", lineno, charno);
                  }
                  continue retry;
              }
"
closure-68,869,"                    }

parser.addTypeWarning(""null"", lineno, charno);
                  token = eatTokensUntilEOL();                  }
                  continue retry;
              }
"
closure-68,869,"                    }

if (true) { return;
 }
                  token = eatTokensUntilEOL();                  }
                  continue retry;
"
closure-68,869,"                    }

parser.addParserWarning(""null"", lineno, charno);
                  token = eatTokensUntilEOL();                  }
                  continue retry;
              }
"
closure-68,869,"                    }

token = returnDescriptionInfo.token;
                  }
                  continue retry;
              }
"
closure-68,869,"                    }

jsdocBuilder.recordReturnDescription(returnDescription);
                  }
                  continue retry;
              }
"
closure-68,869,"                    }

token = eatTokensUntilEOL(token);
                  }
                  continue retry;
              }
"
closure-68,869,"                    }

skipEOLs();
                  token = eatTokensUntilEOL();                  }
                  continue retry;
              }
"
closure-68,869,"                    }

continue;
                  token = eatTokensUntilEOL();                  }
                  continue retry;
              }
"
closure-68,869,"                    }

token = eatTokensUntilEOL(token);
                  token = eatTokensUntilEOL();                  }
                  continue retry;
              }
"
closure-68,869,"                    }

token = returnDescriptionInfo.token;
                  token = eatTokensUntilEOL();                  }
                  continue retry;
              }
"
closure-68,869,"                    }

jsdocBuilder.recordReturnDescription(returnDescription);
                  token = eatTokensUntilEOL();                  }
                  continue retry;
              }
"
closure-68,869,"                    }

type = createJSTypeExpression(typeNode);
                  token = eatTokensUntilEOL();                  }
                  continue retry;
              }
"
closure-68,869,"                    }

token = extractMultilineTextualBlock();
                  }
                  continue retry;
              }
"
closure-68,869,"                    }

type = eatTokensUntilEOL();
                  }
                  continue retry;
              }
"
closure-68,869,"                    }

type = createJSTypeExpression(typeNode);
                  }
                  continue retry;
              }
"
closure-68,869,"                    }

token = recordReturnType();
                  }
                  continue retry;
              }
"
closure-68,869,"                    }

token = recordDefineType();
                  }
                  continue retry;
              }
"
closure-68,869,"                    }

token = recordTypedef();
                  }
                  continue retry;
              }
"
closure-68,869,"                    }

token = createJSTypeExpression();
                  }
                  continue retry;
              }
"
closure-68,869,"                    }

token = recordType();
                  }
                  continue retry;
              }
"
closure-68,869,"                    }

return;
                  }
                  continue retry;
              }
"
closure-68,869,"                    }

break;
                  }
                  continue retry;
              }
"
closure-68,869,"                    }

if(parse()){
return;
}                  token = eatTokensUntilEOL();                  }
                  continue retry;
"
closure-68,869,"                    }

if(hasParsedFileOverviewDocInfo()){
return;
}                  token = eatTokensUntilEOL();                  }
                  continue retry;
"
closure-68,869,"                    }

if(hasParsedJSDocInfo()){
return;
}                  token = eatTokensUntilEOL();                  }
                  continue retry;
"
closure-68,869,"                    }

if(lookAheadForTypeAnnotation()){
return;
}                  token = eatTokensUntilEOL();                  }
                  continue retry;
"
closure-68,869,"                    }

if(!parse()){
return;
}                  token = eatTokensUntilEOL();                  }
                  continue retry;
"
closure-68,869,"                    }

if(!hasParsedFileOverviewDocInfo()){
return;
}                  token = eatTokensUntilEOL();                  }
                  continue retry;
"
closure-68,869,"                    }

if(!hasParsedJSDocInfo()){
return;
}                  token = eatTokensUntilEOL();                  }
                  continue retry;
"
closure-68,869,"                    }

if(!lookAheadForTypeAnnotation()){
return;
}                  token = eatTokensUntilEOL();                  }
                  continue retry;
"
closure-68,869,"                    }

parser.addTypeWarning(""null"", lineno, charno);
break;
                  token = eatTokensUntilEOL();                  }
                  continue retry;
"
closure-68,869,"                    }

token = eatTokensUntilEOL(NO_UNREAD_TOKEN);
                  }
                  continue retry;
              }
"
closure-68,869,"                    }

token = eatTokensUntilEOL(unreadToken);
                  }
                  continue retry;
              }
"
closure-68,869,"                    }

parser.addParserWarning(""null"", lineno, charno);
break;
                  token = eatTokensUntilEOL();                  }
                  continue retry;
"
closure-68,869,"                    }

                  token = eatTokensUntilEOL();                  }
                  continue retry;
              }
            }
"
closure-68,869,"                    }

token = returnDescriptionInfo.token;
break;
                  token = eatTokensUntilEOL();                  }
                  continue retry;
"
closure-68,869,"                    }

token = eatTokensUntilEOL(token);
break;
                  token = eatTokensUntilEOL();                  }
                  continue retry;
"
closure-68,869,"                    }

token = eatTokensUntilEOL(typeNode);
                  }
                  continue retry;
              }
"
closure-68,869,"                    }

jsdocBuilder.recordReturnDescription(returnDescription);
break;
                  token = eatTokensUntilEOL();                  }
                  continue retry;
"
closure-68,869,"                    }

if((type == null)){
}
                  token = eatTokensUntilEOL();                  }
                  continue retry;
"
closure-68,869,"                    }

if(!jsdocBuilder.recordDefineType(type)){
}
                  token = eatTokensUntilEOL();                  }
                  continue retry;
"
closure-68,869,"                    }

break;
break;
                  token = eatTokensUntilEOL();                  }
                  continue retry;
"
closure-68,869,"                    }

if(!jsdocBuilder.recordTypedef(type)){
}
                  token = eatTokensUntilEOL();                  }
                  continue retry;
"
closure-68,869,"                    }

type = createJSTypeExpression(typeNode);
break;
                  token = eatTokensUntilEOL();                  }
                  continue retry;
"
closure-68,869,"                    }

if(!jsdocBuilder.recordType(type)){
}
                  token = eatTokensUntilEOL();                  }
                  continue retry;
"
closure-68,869,"                    }

continue;
                  }
                  continue retry;
              }
"
closure-68,869,"                    }

if((returnDescription.length() > 0)){
}
                  token = eatTokensUntilEOL();                  }
                  continue retry;
"
,,
closure-68,1709,"    }

return createTemplateNode();  }

  /**
   * TypeName := NameExpression | NameExpression TypeApplication
"
closure-68,1709,"    }

return reportGenericTypeSyntaxWarning();  }

  /**
   * TypeName := NameExpression | NameExpression TypeApplication
"
closure-68,1709,"    }

  }

  /**
   * TypeName := NameExpression | NameExpression TypeApplication
"
closure-68,1709,"    }

return reportGenericTypeSyntaxWarning(token);  }

  /**
   * TypeName := NameExpression | NameExpression TypeApplication
"
closure-68,1709,"    }

if (true) { return parseTypeName(token); }
    return reportGenericTypeSyntaxWarning();  }

  /**
"
closure-68,1709,"    }

return parseArrayType(next());  }

  /**
   * TypeName := NameExpression | NameExpression TypeApplication
"
closure-68,1709,"    }

return parseTypeName(token);  }

  /**
   * TypeName := NameExpression | NameExpression TypeApplication
"
closure-68,1709,"    }

return skipEOLs();  }

  /**
   * TypeName := NameExpression | NameExpression TypeApplication
"
closure-68,1709,"    }

skipEOLs();
    return reportGenericTypeSyntaxWarning();  }

  /**
"
closure-68,1709,"    }

return parseRecordType(next());  }

  /**
   * TypeName := NameExpression | NameExpression TypeApplication
"
closure-68,1709,"    }

return parseRecordType();  }

  /**
   * TypeName := NameExpression | NameExpression TypeApplication
"
closure-68,1709,"    }

return parseArrayType();  }

  /**
   * TypeName := NameExpression | NameExpression TypeApplication
"
closure-68,1709,"    }

return parseTypeName();  }

  /**
   * TypeName := NameExpression | NameExpression TypeApplication
"
closure-68,1709,"    }

return parseUnionType();  }

  /**
   * TypeName := NameExpression | NameExpression TypeApplication
"
closure-68,1709,"    }

return parseFunctionType(next());  }

  /**
   * TypeName := NameExpression | NameExpression TypeApplication
"
closure-68,1709,"    }

return parseUnionType(next());  }

  /**
   * TypeName := NameExpression | NameExpression TypeApplication
"
closure-68,1709,"    }

return token;  }

  /**
   * TypeName := NameExpression | NameExpression TypeApplication
"
closure-68,1709,"    }

return newNode(Token.STAR);  }

  /**
   * TypeName := NameExpression | NameExpression TypeApplication
"
closure-68,1709,"    }

return parseFunctionType();  }

  /**
   * TypeName := NameExpression | NameExpression TypeApplication
"
closure-68,1709,"    }

if (true) { return parseArrayType(next()); }
    return reportGenericTypeSyntaxWarning();  }

  /**
"
closure-68,1709,"    }

if (true) { return parseRecordType(next()); }
    return reportGenericTypeSyntaxWarning();  }

  /**
"
closure-68,1709,"    }

if (true) { return parseFunctionType(next()); }
    return reportGenericTypeSyntaxWarning();  }

  /**
"
closure-68,1709,"    }

if (true) { return skipEOLs(); }
    return reportGenericTypeSyntaxWarning();  }

  /**
"
closure-68,1709,"    }

return newStringNode(string);  }

  /**
   * TypeName := NameExpression | NameExpression TypeApplication
"
closure-68,1709,"    }

if (true) { return parseUnionType(next()); }
    return reportGenericTypeSyntaxWarning();  }

  /**
"
closure-68,1709,"    }

return reportGenericTypeSyntaxWarning;  }

  /**
   * TypeName := NameExpression | NameExpression TypeApplication
"
closure-68,1709,"    }

return string;  }

  /**
   * TypeName := NameExpression | NameExpression TypeApplication
"
closure-68,1709,"    }

if (true) { return newNode(Token.STAR); }
    return reportGenericTypeSyntaxWarning();  }

  /**
"
closure-68,1709,"    }

return reportGenericTypeSyntaxWarning(string);  }

  /**
   * TypeName := NameExpression | NameExpression TypeApplication
"
closure-68,1709,"    }

return null;  }

  /**
   * TypeName := NameExpression | NameExpression TypeApplication
"
closure-68,1709,"    }

return restoreLookAhead(token);  }

  /**
   * TypeName := NameExpression | NameExpression TypeApplication
"
closure-68,1709,"    }

if(parse()){
return parseTypeName(token);}    return reportGenericTypeSyntaxWarning();  }

  /**
"
closure-68,1709,"    }

if(hasParsedFileOverviewDocInfo()){
return parseTypeName(token);}    return reportGenericTypeSyntaxWarning();  }

  /**
"
closure-68,1709,"    }

if(hasParsedJSDocInfo()){
return parseTypeName(token);}    return reportGenericTypeSyntaxWarning();  }

  /**
"
closure-68,1709,"    }

if(lookAheadForTypeAnnotation()){
return parseTypeName(token);}    return reportGenericTypeSyntaxWarning();  }

  /**
"
closure-68,1709,"    }

if (true) { return newStringNode(string); }
    return reportGenericTypeSyntaxWarning();  }

  /**
"
closure-68,1709,"    }

if (true) { return token; }
    return reportGenericTypeSyntaxWarning();  }

  /**
"
closure-68,1709,"    }

return reportGenericTypeSyntaxWarning(reportGenericTypeSyntaxWarning());  }

  /**
   * TypeName := NameExpression | NameExpression TypeApplication
"
closure-68,1709,"    }

return ;  }

  /**
   * TypeName := NameExpression | NameExpression TypeApplication
"
closure-68,1709,"    }

return;
  }

  /**
"
closure-68,1709,"    }

return reportGenericTypeSyntaxWarning(this);  }

  /**
   * TypeName := NameExpression | NameExpression TypeApplication
"
closure-68,1709,"    }

return reportGenericTypeSyntaxWarning(false);  }

  /**
   * TypeName := NameExpression | NameExpression TypeApplication
"
closure-68,1709,"    }

return reportGenericTypeSyntaxWarning(true);  }

  /**
   * TypeName := NameExpression | NameExpression TypeApplication
"
closure-68,1709,"    }

reportGenericTypeSyntaxWarning(token);
  }

  /**
"
closure-68,1709,"    }

return next();  }

  /**
   * TypeName := NameExpression | NameExpression TypeApplication
"
closure-68,1709,"    }

return super.reportGenericTypeSyntaxWarning();  }

  /**
   * TypeName := NameExpression | NameExpression TypeApplication
"
closure-68,1709,"    }

if (true) { return string; }
    return reportGenericTypeSyntaxWarning();  }

  /**
"
closure-68,1709,"    }

if (true) { return null; }
    return reportGenericTypeSyntaxWarning();  }

  /**
"
closure-68,1709,"    }

return ;  }

  /**
   * TypeName := NameExpression | NameExpression TypeApplication
"
closure-68,1709,"    }

return reportGenericTypeSyntaxWarning(""null"");  }

  /**
   * TypeName := NameExpression | NameExpression TypeApplication
"
closure-68,1709,"    }

parseTypeName(token);
    return reportGenericTypeSyntaxWarning();  }

  /**
"
closure-68,1709,"    }

return reportGenericTypeSyntaxWarning(stream.getString());  }

  /**
   * TypeName := NameExpression | NameExpression TypeApplication
"
,,
closure-68,1761,"    // just throw out TypeParameters.
    if (token != JsDocToken.LP) {
return parseTypeString(""null"");    }

    Node functionType = newNode(Token.FUNCTION);
    Node parameters = null;
"
closure-68,1761,"    // just throw out TypeParameters.
    if (token != JsDocToken.LP) {
return newStringNode(""null"");    }

    Node functionType = newNode(Token.FUNCTION);
    Node parameters = null;
"
closure-68,1761,"    // just throw out TypeParameters.
    if (token != JsDocToken.LP) {
return reportTypeSyntaxWarning(""null"");    }

    Node functionType = newNode(Token.FUNCTION);
    Node parameters = null;
"
closure-68,1761,"    // just throw out TypeParameters.
    if (token != JsDocToken.LP) {
    }

    Node functionType = newNode(Token.FUNCTION);
    Node parameters = null;
"
closure-68,1761,"    // just throw out TypeParameters.
    if (token != JsDocToken.LP) {
return null;    }

    Node functionType = newNode(Token.FUNCTION);
    Node parameters = null;
"
closure-68,1761,"    // just throw out TypeParameters.
    if (token != JsDocToken.LP) {
return newNode(""null"");    }

    Node functionType = newNode(Token.FUNCTION);
    Node parameters = null;
"
closure-68,1761,"    // just throw out TypeParameters.
    if (token != JsDocToken.LP) {
continue;
    }

    Node functionType = newNode(Token.FUNCTION);
"
closure-68,1761,"    // just throw out TypeParameters.
    if (token != JsDocToken.LP) {
return reportTypeSyntaxWarning(sourceName);    }

    Node functionType = newNode(Token.FUNCTION);
    Node parameters = null;
"
closure-68,1761,"    // just throw out TypeParameters.
    if (token != JsDocToken.LP) {
return match(""null"");    }

    Node functionType = newNode(Token.FUNCTION);
    Node parameters = null;
"
closure-68,1761,"    // just throw out TypeParameters.
    if (token != JsDocToken.LP) {
return skipEOLs(""null"");    }

    Node functionType = newNode(Token.FUNCTION);
    Node parameters = null;
"
closure-68,1761,"    // just throw out TypeParameters.
    if (token != JsDocToken.LP) {
skipEOLs();
      return reportTypeSyntaxWarning(""msg.jsdoc.missing.lp"");    }

    Node functionType = newNode(Token.FUNCTION);
"
closure-68,1761,"    // just throw out TypeParameters.
    if (token != JsDocToken.LP) {
if (true) { return null; }
      return reportTypeSyntaxWarning(""msg.jsdoc.missing.lp"");    }

    Node functionType = newNode(Token.FUNCTION);
"
closure-68,1761,"    // just throw out TypeParameters.
    if (token != JsDocToken.LP) {
return reportTypeSyntaxWarning(null);    }

    Node functionType = newNode(Token.FUNCTION);
    Node parameters = null;
"
closure-68,1761,"    // just throw out TypeParameters.
    if (token != JsDocToken.LP) {
return reportTypeSyntaxWarning(token);    }

    Node functionType = newNode(Token.FUNCTION);
    Node parameters = null;
"
closure-68,1761,"    // just throw out TypeParameters.
    if (token != JsDocToken.LP) {
return reportTypeSyntaxWarning(true);    }

    Node functionType = newNode(Token.FUNCTION);
    Node parameters = null;
"
closure-68,1761,"    // just throw out TypeParameters.
    if (token != JsDocToken.LP) {
return next(""null"");    }

    Node functionType = newNode(Token.FUNCTION);
    Node parameters = null;
"
closure-68,1761,"    // just throw out TypeParameters.
    if (token != JsDocToken.LP) {
return reportTypeSyntaxWarning(false);    }

    Node functionType = newNode(Token.FUNCTION);
    Node parameters = null;
"
closure-68,1761,"    // just throw out TypeParameters.
    if (token != JsDocToken.LP) {
token = next();
      return reportTypeSyntaxWarning(""msg.jsdoc.missing.lp"");    }

    Node functionType = newNode(Token.FUNCTION);
"
closure-68,1761,"    // just throw out TypeParameters.
    if (token != JsDocToken.LP) {
return reportTypeSyntaxWarning(""null"", ""null"");    }

    Node functionType = newNode(Token.FUNCTION);
    Node parameters = null;
"
closure-68,1761,"    // just throw out TypeParameters.
    if (token != JsDocToken.LP) {
next();
      return reportTypeSyntaxWarning(""msg.jsdoc.missing.lp"");    }

    Node functionType = newNode(Token.FUNCTION);
"
closure-68,1761,"    // just throw out TypeParameters.
    if (token != JsDocToken.LP) {
return reportTypeSyntaxWarning(Token.FUNCTION);    }

    Node functionType = newNode(Token.FUNCTION);
    Node parameters = null;
"
closure-68,1761,"    // just throw out TypeParameters.
    if (token != JsDocToken.LP) {
return wrapNode(""null"");    }

    Node functionType = newNode(Token.FUNCTION);
    Node parameters = null;
"
closure-68,1761,"    // just throw out TypeParameters.
    if (token != JsDocToken.LP) {
functionType.addChildToFront(contextType);
      return reportTypeSyntaxWarning(""msg.jsdoc.missing.lp"");    }

    Node functionType = newNode(Token.FUNCTION);
"
closure-68,1761,"    // just throw out TypeParameters.
    if (token != JsDocToken.LP) {
return reportTypeSyntaxWarning();    }

    Node functionType = newNode(Token.FUNCTION);
    Node parameters = null;
"
closure-68,1761,"    // just throw out TypeParameters.
    if (token != JsDocToken.LP) {
return parseFunctionType(""null"");    }

    Node functionType = newNode(Token.FUNCTION);
    Node parameters = null;
"
closure-68,1761,"    // just throw out TypeParameters.
    if (token != JsDocToken.LP) {
return;
    }

    Node functionType = newNode(Token.FUNCTION);
"
closure-68,1761,"    // just throw out TypeParameters.
    if (token != JsDocToken.LP) {
return reportTypeSyntaxWarning(tokenStr);    }

    Node functionType = newNode(Token.FUNCTION);
    Node parameters = null;
"
closure-68,1761,"    // just throw out TypeParameters.
    if (token != JsDocToken.LP) {
return true;    }

    Node functionType = newNode(Token.FUNCTION);
    Node parameters = null;
"
closure-68,1761,"    // just throw out TypeParameters.
    if (token != JsDocToken.LP) {
break;
    }

    Node functionType = newNode(Token.FUNCTION);
"
closure-68,1761,"    // just throw out TypeParameters.
    if (token != JsDocToken.LP) {
parameters = parseParametersType(token);
      return reportTypeSyntaxWarning(""msg.jsdoc.missing.lp"");    }

    Node functionType = newNode(Token.FUNCTION);
"
closure-68,1761,"    // just throw out TypeParameters.
    if (token != JsDocToken.LP) {
return token;    }

    Node functionType = newNode(Token.FUNCTION);
    Node parameters = null;
"
closure-68,1761,"    // just throw out TypeParameters.
    if (token != JsDocToken.LP) {
return reportTypeSyntaxWarning(JsDocToken.RP);    }

    Node functionType = newNode(Token.FUNCTION);
    Node parameters = null;
"
closure-68,1761,"    // just throw out TypeParameters.
    if (token != JsDocToken.LP) {
return newNode(Token.FUNCTION);    }

    Node functionType = newNode(Token.FUNCTION);
    Node parameters = null;
"
closure-68,1761,"    // just throw out TypeParameters.
    if (token != JsDocToken.LP) {
return false;    }

    Node functionType = newNode(Token.FUNCTION);
    Node parameters = null;
"
closure-68,1761,"    // just throw out TypeParameters.
    if (token != JsDocToken.LP) {
return (reportTypeSyntaxWarning(""null"") && reportTypeSyntaxWarning(""null""));    }

    Node functionType = newNode(Token.FUNCTION);
    Node parameters = null;
"
closure-68,1761,"    // just throw out TypeParameters.
    if (token != JsDocToken.LP) {
if (true) { return reportTypeSyntaxWarning(""null""); }
      return reportTypeSyntaxWarning(""msg.jsdoc.missing.lp"");    }

    Node functionType = newNode(Token.FUNCTION);
"
closure-68,1761,"    // just throw out TypeParameters.
    if (token != JsDocToken.LP) {
return reportTypeSyntaxWarning(this);    }

    Node functionType = newNode(Token.FUNCTION);
    Node parameters = null;
"
closure-68,1761,"    // just throw out TypeParameters.
    if (token != JsDocToken.LP) {
return parseTypeName(NO_UNREAD_TOKEN);    }

    Node functionType = newNode(Token.FUNCTION);
    Node parameters = null;
"
closure-68,1761,"    // just throw out TypeParameters.
    if (token != JsDocToken.LP) {
return parseTypeName(unreadToken);    }

    Node functionType = newNode(Token.FUNCTION);
    Node parameters = null;
"
closure-68,1761,"    // just throw out TypeParameters.
    if (token != JsDocToken.LP) {
return (reportTypeSyntaxWarning(""null"") || reportTypeSyntaxWarning(""null""));    }

    Node functionType = newNode(Token.FUNCTION);
    Node parameters = null;
"
closure-68,1761,"    // just throw out TypeParameters.
    if (token != JsDocToken.LP) {
return reportTypeSyntaxWarning(token, ""null"");    }

    Node functionType = newNode(Token.FUNCTION);
    Node parameters = null;
"
closure-68,1761,"    // just throw out TypeParameters.
    if (token != JsDocToken.LP) {
return match(NO_UNREAD_TOKEN);    }

    Node functionType = newNode(Token.FUNCTION);
    Node parameters = null;
"
closure-68,1761,"    // just throw out TypeParameters.
    if (token != JsDocToken.LP) {
return match(unreadToken);    }

    Node functionType = newNode(Token.FUNCTION);
    Node parameters = null;
"
closure-68,1761,"    // just throw out TypeParameters.
    if (token != JsDocToken.LP) {
return reportTypeSyntaxWarning(""null"", token);    }

    Node functionType = newNode(Token.FUNCTION);
    Node parameters = null;
"
closure-68,1761,"    // just throw out TypeParameters.
    if (token != JsDocToken.LP) {
break;
      return reportTypeSyntaxWarning(""msg.jsdoc.missing.lp"");    }

    Node functionType = newNode(Token.FUNCTION);
"
,,
closure-123,285,"        Preconditions.checkState(childCount == 3);
        int p = NodeUtil.precedence(type);
        addExpr(first, p + 1, context);
        cc.addOp(""?"", true);
        addExpr(first.getNext(), 1, rhsContext);
        cc.addOp("":"", true);
"
closure-123,285,"        Preconditions.checkState(childCount == 3);
        int p = NodeUtil.precedence(type);
if((p != null)){
        Context rhsContext = Context.OTHER;        addExpr(first, p + 1, context);
        cc.addOp(""?"", true);
        addExpr(first.getNext(), 1, rhsContext);
"
closure-123,285,"        Preconditions.checkState(childCount == 3);
        int p = NodeUtil.precedence(type);
Context rhsContext = p;
        addExpr(first, p + 1, context);
        cc.addOp(""?"", true);
        addExpr(first.getNext(), 1, rhsContext);
"
closure-123,285,"        Preconditions.checkState(childCount == 3);
        int p = NodeUtil.precedence(type);
if (true) { return;
 }
        Context rhsContext = Context.OTHER;        addExpr(first, p + 1, context);
        cc.addOp(""?"", true);
"
closure-123,285,"        Preconditions.checkState(childCount == 3);
        int p = NodeUtil.precedence(type);
if((p + 1)){
        Context rhsContext = Context.OTHER;        addExpr(first, p + 1, context);
        cc.addOp(""?"", true);
        addExpr(first.getNext(), 1, rhsContext);
"
closure-123,285,"        Preconditions.checkState(childCount == 3);
        int p = NodeUtil.precedence(type);
tagAsStrict();
        Context rhsContext = Context.OTHER;        addExpr(first, p + 1, context);
        cc.addOp(""?"", true);
        addExpr(first.getNext(), 1, rhsContext);
"
closure-123,285,"        Preconditions.checkState(childCount == 3);
        int p = NodeUtil.precedence(type);
if((context != null)){
        Context rhsContext = Context.OTHER;        addExpr(first, p + 1, context);
        cc.addOp(""?"", true);
        addExpr(first.getNext(), 1, rhsContext);
"
closure-123,285,"        Preconditions.checkState(childCount == 3);
        int p = NodeUtil.precedence(type);
if((p == null)){
return;
}        Context rhsContext = Context.OTHER;        addExpr(first, p + 1, context);
        cc.addOp(""?"", true);
"
closure-123,285,"        Preconditions.checkState(childCount == 3);
        int p = NodeUtil.precedence(type);
if((p == null)){
        Context rhsContext = Context.OTHER;        addExpr(first, p + 1, context);
        cc.addOp(""?"", true);
        addExpr(first.getNext(), 1, rhsContext);
"
closure-123,285,"        Preconditions.checkState(childCount == 3);
        int p = NodeUtil.precedence(type);
Context rhsContext = Token.OTHER;
        addExpr(first, p + 1, context);
        cc.addOp(""?"", true);
        addExpr(first.getNext(), 1, rhsContext);
"
closure-123,285,"        Preconditions.checkState(childCount == 3);
        int p = NodeUtil.precedence(type);
if((first != null)){
        Context rhsContext = Context.OTHER;        addExpr(first, p + 1, context);
        cc.addOp(""?"", true);
        addExpr(first.getNext(), 1, rhsContext);
"
closure-123,285,"        Preconditions.checkState(childCount == 3);
        int p = NodeUtil.precedence(type);
Context rhsContext = context;
        addExpr(first, p + 1, context);
        cc.addOp(""?"", true);
        addExpr(first.getNext(), 1, rhsContext);
"
closure-123,285,"        Preconditions.checkState(childCount == 3);
        int p = NodeUtil.precedence(type);
break;
        Context rhsContext = Context.OTHER;        addExpr(first, p + 1, context);
        cc.addOp(""?"", true);
        addExpr(first.getNext(), 1, rhsContext);
"
closure-123,285,"        Preconditions.checkState(childCount == 3);
        int p = NodeUtil.precedence(type);
if((childCount == 3)){
        Context rhsContext = Context.OTHER;        addExpr(first, p + 1, context);
        cc.addOp(""?"", true);
        addExpr(first.getNext(), 1, rhsContext);
"
closure-123,285,"        Preconditions.checkState(childCount == 3);
        int p = NodeUtil.precedence(type);
Context rhsContext = rhsContext;
        addExpr(first, p + 1, context);
        cc.addOp(""?"", true);
        addExpr(first.getNext(), 1, rhsContext);
"
closure-123,285,"        Preconditions.checkState(childCount == 3);
        int p = NodeUtil.precedence(type);
if((p != null)){
return;
}        Context rhsContext = Context.OTHER;        addExpr(first, p + 1, context);
        cc.addOp(""?"", true);
"
closure-123,285,"        Preconditions.checkState(childCount == 3);
        int p = NodeUtil.precedence(type);
Context rhsContext = first;
        addExpr(first, p + 1, context);
        cc.addOp(""?"", true);
        addExpr(first.getNext(), 1, rhsContext);
"
closure-123,285,"        Preconditions.checkState(childCount == 3);
        int p = NodeUtil.precedence(type);
if((p + 1)){
return;
}        Context rhsContext = Context.OTHER;        addExpr(first, p + 1, context);
        cc.addOp(""?"", true);
"
closure-123,285,"        Preconditions.checkState(childCount == 3);
        int p = NodeUtil.precedence(type);
if(p){
        Context rhsContext = Context.OTHER;        addExpr(first, p + 1, context);
        cc.addOp(""?"", true);
        addExpr(first.getNext(), 1, rhsContext);
"
closure-123,285,"        Preconditions.checkState(childCount == 3);
        int p = NodeUtil.precedence(type);
if((last != null)){
        Context rhsContext = Context.OTHER;        addExpr(first, p + 1, context);
        cc.addOp(""?"", true);
        addExpr(first.getNext(), 1, rhsContext);
"
closure-123,285,"        Preconditions.checkState(childCount == 3);
        int p = NodeUtil.precedence(type);
if(!p){
        Context rhsContext = Context.OTHER;        addExpr(first, p + 1, context);
        cc.addOp(""?"", true);
        addExpr(first.getNext(), 1, rhsContext);
"
closure-123,285,"        Preconditions.checkState(childCount == 3);
        int p = NodeUtil.precedence(type);
Context rhsContext = type;
        addExpr(first, p + 1, context);
        cc.addOp(""?"", true);
        addExpr(first.getNext(), 1, rhsContext);
"
closure-123,285,"        Preconditions.checkState(childCount == 3);
        int p = NodeUtil.precedence(type);
if(p){
return;
}        Context rhsContext = Context.OTHER;        addExpr(first, p + 1, context);
        cc.addOp(""?"", true);
"
closure-123,285,"        Preconditions.checkState(childCount == 3);
        int p = NodeUtil.precedence(type);
if((outputCharsetEncoder != null)){
        Context rhsContext = Context.OTHER;        addExpr(first, p + 1, context);
        cc.addOp(""?"", true);
        addExpr(first.getNext(), 1, rhsContext);
"
closure-123,285,"        Preconditions.checkState(childCount == 3);
        int p = NodeUtil.precedence(type);
continue;
        Context rhsContext = Context.OTHER;        addExpr(first, p + 1, context);
        cc.addOp(""?"", true);
        addExpr(first.getNext(), 1, rhsContext);
"
closure-123,285,"        Preconditions.checkState(childCount == 3);
        int p = NodeUtil.precedence(type);
if((childCount == 2)){
        Context rhsContext = Context.OTHER;        addExpr(first, p + 1, context);
        cc.addOp(""?"", true);
        addExpr(first.getNext(), 1, rhsContext);
"
closure-123,285,"        Preconditions.checkState(childCount == 3);
        int p = NodeUtil.precedence(type);
if((!first.isString() || !last.isString())){
        Context rhsContext = Context.OTHER;        addExpr(first, p + 1, context);
        cc.addOp(""?"", true);
        addExpr(first.getNext(), 1, rhsContext);
"
closure-123,285,"        Preconditions.checkState(childCount == 3);
        int p = NodeUtil.precedence(type);
addExpr(first.getNext(), 1, rhsContext);
        Context rhsContext = Context.OTHER;        addExpr(first, p + 1, context);
        cc.addOp(""?"", true);
        addExpr(first.getNext(), 1, rhsContext);
"
closure-123,285,"        Preconditions.checkState(childCount == 3);
        int p = NodeUtil.precedence(type);
if((p == null)){
continue;
}        Context rhsContext = Context.OTHER;        addExpr(first, p + 1, context);
        cc.addOp(""?"", true);
"
closure-123,285,"        Preconditions.checkState(childCount == 3);
        int p = NodeUtil.precedence(type);
Context rhsContext = OTHER;
        addExpr(first, p + 1, context);
        cc.addOp(""?"", true);
        addExpr(first.getNext(), 1, rhsContext);
"
closure-123,285,"        Preconditions.checkState(childCount == 3);
        int p = NodeUtil.precedence(type);
Context rhsContext = Context.OTHER;
        addExpr(first, p + 1, context);
        cc.addOp(""?"", true);
        addExpr(first.getNext(), 1, rhsContext);
"
closure-123,285,"        Preconditions.checkState(childCount == 3);
        int p = NodeUtil.precedence(type);
addExpr(last, 1, rhsContext);
        Context rhsContext = Context.OTHER;        addExpr(first, p + 1, context);
        cc.addOp(""?"", true);
        addExpr(first.getNext(), 1, rhsContext);
"
closure-123,285,"        Preconditions.checkState(childCount == 3);
        int p = NodeUtil.precedence(type);
if((p != null)){
continue;
}        Context rhsContext = Context.OTHER;        addExpr(first, p + 1, context);
        cc.addOp(""?"", true);
"
closure-123,285,"        Preconditions.checkState(childCount == 3);
        int p = NodeUtil.precedence(type);
Context rhsContext = outputCharsetEncoder;
        addExpr(first, p + 1, context);
        cc.addOp(""?"", true);
        addExpr(first.getNext(), 1, rhsContext);
"
,,
math-36,688,"            // Numerator and/or denominator must be out of range:
            // Calculate how far to shift them to put them in range.
return result;    }

    /**
     * <p>
"
math-36,688,"            // Numerator and/or denominator must be out of range:
            // Calculate how far to shift them to put them in range.
return result.doubleValue();    }

    /**
     * <p>
"
math-36,688,"            // Numerator and/or denominator must be out of range:
            // Calculate how far to shift them to put them in range.
return denominator.doubleValue();    }

    /**
     * <p>
"
math-36,688,"            // Numerator and/or denominator must be out of range:
            // Calculate how far to shift them to put them in range.
return 0;    }

    /**
     * <p>
"
math-36,688,"            // Numerator and/or denominator must be out of range:
            // Calculate how far to shift them to put them in range.
return result();    }

    /**
     * <p>
"
math-36,688,"            // Numerator and/or denominator must be out of range:
            // Calculate how far to shift them to put them in range.
if((result == null)){
return 0;}        return result;    }

    /**
"
math-36,688,"            // Numerator and/or denominator must be out of range:
            // Calculate how far to shift them to put them in range.
return this.result;    }

    /**
     * <p>
"
math-36,688,"            // Numerator and/or denominator must be out of range:
            // Calculate how far to shift them to put them in range.
return ;    }

    /**
     * <p>
"
math-36,688,"            // Numerator and/or denominator must be out of range:
            // Calculate how far to shift them to put them in range.
return ;    }

    /**
     * <p>
"
math-36,688,"            // Numerator and/or denominator must be out of range:
            // Calculate how far to shift them to put them in range.
return numerator.doubleValue();    }

    /**
     * <p>
"
math-36,688,"            // Numerator and/or denominator must be out of range:
            // Calculate how far to shift them to put them in range.
denominator.doubleValue();
        return result;    }

    /**
"
math-36,688,"            // Numerator and/or denominator must be out of range:
            // Calculate how far to shift them to put them in range.
return 1;    }

    /**
     * <p>
"
math-36,688,"            // Numerator and/or denominator must be out of range:
            // Calculate how far to shift them to put them in range.
if((result != null)){
}
        return result;    }

"
math-36,688,"            // Numerator and/or denominator must be out of range:
            // Calculate how far to shift them to put them in range.
return result.size();    }

    /**
     * <p>
"
math-36,688,"            // Numerator and/or denominator must be out of range:
            // Calculate how far to shift them to put them in range.
if((result == null)){
}
        return result;    }

"
math-36,688,"            // Numerator and/or denominator must be out of range:
            // Calculate how far to shift them to put them in range.
return 2;    }

    /**
     * <p>
"
math-36,688,"            // Numerator and/or denominator must be out of range:
            // Calculate how far to shift them to put them in range.
return result.doubleValue(result);    }

    /**
     * <p>
"
math-36,688,"            // Numerator and/or denominator must be out of range:
            // Calculate how far to shift them to put them in range.
result++;
        return result;    }

    /**
"
math-36,688,"            // Numerator and/or denominator must be out of range:
            // Calculate how far to shift them to put them in range.
if((result != null)){
return 0;}        return result;    }

    /**
"
math-36,688,"            // Numerator and/or denominator must be out of range:
            // Calculate how far to shift them to put them in range.
return numerator.result();    }

    /**
     * <p>
"
math-36,688,"            // Numerator and/or denominator must be out of range:
            // Calculate how far to shift them to put them in range.
return result.doubleValue(0);    }

    /**
     * <p>
"
math-36,688,"            // Numerator and/or denominator must be out of range:
            // Calculate how far to shift them to put them in range.
return (double)result;    }

    /**
     * <p>
"
math-36,688,"            // Numerator and/or denominator must be out of range:
            // Calculate how far to shift them to put them in range.
return this.result.doubleValue();    }

    /**
     * <p>
"
math-36,688,"            // Numerator and/or denominator must be out of range:
            // Calculate how far to shift them to put them in range.
return (numerator.doubleValue() / denominator.doubleValue());    }

    /**
     * <p>
"
math-36,688,"            // Numerator and/or denominator must be out of range:
            // Calculate how far to shift them to put them in range.
result = result;
        return result;    }

    /**
"
math-36,688,"            // Numerator and/or denominator must be out of range:
            // Calculate how far to shift them to put them in range.
return this;    }

    /**
     * <p>
"
math-36,688,"            // Numerator and/or denominator must be out of range:
            // Calculate how far to shift them to put them in range.
numerator.doubleValue();
        return result;    }

    /**
"
math-36,688,"            // Numerator and/or denominator must be out of range:
            // Calculate how far to shift them to put them in range.
if (true) { return 0; }
        return result;    }

    /**
"
math-36,688,"            // Numerator and/or denominator must be out of range:
            // Calculate how far to shift them to put them in range.
if((result == result)){
return 0;}        return result;    }

    /**
"
math-36,688,"            // Numerator and/or denominator must be out of range:
            // Calculate how far to shift them to put them in range.
return denominator.result();    }

    /**
     * <p>
"
math-36,688,"            // Numerator and/or denominator must be out of range:
            // Calculate how far to shift them to put them in range.
return doubleValue(result);    }

    /**
     * <p>
"
math-36,688,"            // Numerator and/or denominator must be out of range:
            // Calculate how far to shift them to put them in range.
return result.get();    }

    /**
     * <p>
"
math-36,688,"            // Numerator and/or denominator must be out of range:
            // Calculate how far to shift them to put them in range.
if((numerator.doubleValue() / denominator.doubleValue())){
}
        return result;    }

"
math-36,688,"            // Numerator and/or denominator must be out of range:
            // Calculate how far to shift them to put them in range.
return (result * result);    }

    /**
     * <p>
"
math-36,688,"            // Numerator and/or denominator must be out of range:
            // Calculate how far to shift them to put them in range.
result.e();
        return result;    }

    /**
"
math-36,688,"            // Numerator and/or denominator must be out of range:
            // Calculate how far to shift them to put them in range.
return result.toString();    }

    /**
     * <p>
"
,,
math-36,735,"            // Numerator and/or denominator must be out of range:
            // Calculate how far to shift them to put them in range.
return result;    }

    /**
     * <p>
"
math-36,735,"            // Numerator and/or denominator must be out of range:
            // Calculate how far to shift them to put them in range.
return result.floatValue();    }

    /**
     * <p>
"
math-36,735,"            // Numerator and/or denominator must be out of range:
            // Calculate how far to shift them to put them in range.
return 0;    }

    /**
     * <p>
"
math-36,735,"            // Numerator and/or denominator must be out of range:
            // Calculate how far to shift them to put them in range.
return denominator.floatValue();    }

    /**
     * <p>
"
math-36,735,"            // Numerator and/or denominator must be out of range:
            // Calculate how far to shift them to put them in range.
return result();    }

    /**
     * <p>
"
math-36,735,"            // Numerator and/or denominator must be out of range:
            // Calculate how far to shift them to put them in range.
if((result == null)){
return 0;}        return result;    }

    /**
"
math-36,735,"            // Numerator and/or denominator must be out of range:
            // Calculate how far to shift them to put them in range.
return ;    }

    /**
     * <p>
"
math-36,735,"            // Numerator and/or denominator must be out of range:
            // Calculate how far to shift them to put them in range.
return this.result;    }

    /**
     * <p>
"
math-36,735,"            // Numerator and/or denominator must be out of range:
            // Calculate how far to shift them to put them in range.
return ;    }

    /**
     * <p>
"
math-36,735,"            // Numerator and/or denominator must be out of range:
            // Calculate how far to shift them to put them in range.
return 1;    }

    /**
     * <p>
"
math-36,735,"            // Numerator and/or denominator must be out of range:
            // Calculate how far to shift them to put them in range.
return result.size();    }

    /**
     * <p>
"
math-36,735,"            // Numerator and/or denominator must be out of range:
            // Calculate how far to shift them to put them in range.
if((result != null)){
}
        return result;    }

"
math-36,735,"            // Numerator and/or denominator must be out of range:
            // Calculate how far to shift them to put them in range.
return numerator.floatValue();    }

    /**
     * <p>
"
math-36,735,"            // Numerator and/or denominator must be out of range:
            // Calculate how far to shift them to put them in range.
if((result == null)){
}
        return result;    }

"
math-36,735,"            // Numerator and/or denominator must be out of range:
            // Calculate how far to shift them to put them in range.
denominator.floatValue();
        return result;    }

    /**
"
math-36,735,"            // Numerator and/or denominator must be out of range:
            // Calculate how far to shift them to put them in range.
return result.floatValue(result);    }

    /**
     * <p>
"
math-36,735,"            // Numerator and/or denominator must be out of range:
            // Calculate how far to shift them to put them in range.
return 2;    }

    /**
     * <p>
"
math-36,735,"            // Numerator and/or denominator must be out of range:
            // Calculate how far to shift them to put them in range.
return this.result.floatValue();    }

    /**
     * <p>
"
math-36,735,"            // Numerator and/or denominator must be out of range:
            // Calculate how far to shift them to put them in range.
result++;
        return result;    }

    /**
"
math-36,735,"            // Numerator and/or denominator must be out of range:
            // Calculate how far to shift them to put them in range.
return result.floatValue(0);    }

    /**
     * <p>
"
math-36,735,"            // Numerator and/or denominator must be out of range:
            // Calculate how far to shift them to put them in range.
return numerator.result();    }

    /**
     * <p>
"
math-36,735,"            // Numerator and/or denominator must be out of range:
            // Calculate how far to shift them to put them in range.
if((result != null)){
return 0;}        return result;    }

    /**
"
math-36,735,"            // Numerator and/or denominator must be out of range:
            // Calculate how far to shift them to put them in range.
return (numerator.floatValue() / denominator.floatValue());    }

    /**
     * <p>
"
math-36,735,"            // Numerator and/or denominator must be out of range:
            // Calculate how far to shift them to put them in range.
return floatValue(result);    }

    /**
     * <p>
"
math-36,735,"            // Numerator and/or denominator must be out of range:
            // Calculate how far to shift them to put them in range.
result = result;
        return result;    }

    /**
"
math-36,735,"            // Numerator and/or denominator must be out of range:
            // Calculate how far to shift them to put them in range.
return this;    }

    /**
     * <p>
"
math-36,735,"            // Numerator and/or denominator must be out of range:
            // Calculate how far to shift them to put them in range.
return result.toString();    }

    /**
     * <p>
"
math-36,735,"            // Numerator and/or denominator must be out of range:
            // Calculate how far to shift them to put them in range.
if((result == result)){
return 0;}        return result;    }

    /**
"
math-36,735,"            // Numerator and/or denominator must be out of range:
            // Calculate how far to shift them to put them in range.
return denominator.result();    }

    /**
     * <p>
"
math-36,735,"            // Numerator and/or denominator must be out of range:
            // Calculate how far to shift them to put them in range.
return (float)result;    }

    /**
     * <p>
"
math-36,735,"            // Numerator and/or denominator must be out of range:
            // Calculate how far to shift them to put them in range.
return result.get();    }

    /**
     * <p>
"
math-36,735,"            // Numerator and/or denominator must be out of range:
            // Calculate how far to shift them to put them in range.
return result.length();    }

    /**
     * <p>
"
math-36,735,"            // Numerator and/or denominator must be out of range:
            // Calculate how far to shift them to put them in range.
if((numerator.floatValue() / denominator.floatValue())){
}
        return result;    }

"
math-36,735,"            // Numerator and/or denominator must be out of range:
            // Calculate how far to shift them to put them in range.
return (result - 0);    }

    /**
     * <p>
"
math-36,735,"            // Numerator and/or denominator must be out of range:
            // Calculate how far to shift them to put them in range.
return (result * denominator.floatValue());    }

    /**
     * <p>
"
,,
closure-13,126,"      Node c = node.getFirstChild();
      while(c != null) {
traverse(c);
        Node next = c.getNext();
        c = next;
      }
"
closure-13,126,"      Node c = node.getFirstChild();
      while(c != null) {
exitNode(c);
        Node next = c.getNext();
        c = next;
      }
"
closure-13,126,"      Node c = node.getFirstChild();
      while(c != null) {
visit(c);
        Node next = c.getNext();
        c = next;
      }
"
closure-13,126,"      Node c = node.getFirstChild();
      while(c != null) {
beginTraversal();
        traverse(c);        Node next = c.getNext();
        c = next;
      }
"
closure-13,126,"      Node c = node.getFirstChild();
      while(c != null) {
endTraversal();
        traverse(c);        Node next = c.getNext();
        c = next;
      }
"
closure-13,126,"      Node c = node.getFirstChild();
      while(c != null) {
if (true) { return;
 }
        traverse(c);        Node next = c.getNext();
        c = next;
"
closure-13,126,"      Node c = node.getFirstChild();
      while(c != null) {
shouldVisit(c);
        Node next = c.getNext();
        c = next;
      }
"
closure-13,126,"      Node c = node.getFirstChild();
      while(c != null) {
shouldRetraverse(c);
        Node next = c.getNext();
        c = next;
      }
"
closure-13,126,"      Node c = node.getFirstChild();
      while(c != null) {
traverse();
        Node next = c.getNext();
        c = next;
      }
"
closure-13,126,"      Node c = node.getFirstChild();
      while(c != null) {
Preconditions.traverse(c);
        Node next = c.getNext();
        c = next;
      }
"
closure-13,126,"      Node c = node.getFirstChild();
      while(c != null) {
break;
        traverse(c);        Node next = c.getNext();
        c = next;
      }
"
closure-13,126,"      Node c = node.getFirstChild();
      while(c != null) {
checkState(c);
        Node next = c.getNext();
        c = next;
      }
"
closure-13,126,"      Node c = node.getFirstChild();
      while(c != null) {
traverse(next);
        Node next = c.getNext();
        c = next;
      }
"
closure-13,126,"      Node c = node.getFirstChild();
      while(c != null) {
traverse(node);
        Node next = c.getNext();
        c = next;
      }
"
closure-13,126,"      Node c = node.getFirstChild();
      while(c != null) {
traverse(visits);
        Node next = c.getNext();
        c = next;
      }
"
closure-13,126,"      Node c = node.getFirstChild();
      while(c != null) {
c = traverse(c);
        Node next = c.getNext();
        c = next;
      }
"
closure-13,126,"      Node c = node.getFirstChild();
      while(c != null) {
Preconditions.checkState((visits < 10000), ""null"");
        traverse(c);        Node next = c.getNext();
        c = next;
      }
"
closure-13,126,"      Node c = node.getFirstChild();
      while(c != null) {
visit(node);
        traverse(c);        Node next = c.getNext();
        c = next;
      }
"
closure-13,126,"      Node c = node.getFirstChild();
      while(c != null) {
c.detachChildren();
        traverse(c);        Node next = c.getNext();
        c = next;
      }
"
closure-13,126,"      Node c = node.getFirstChild();
      while(c != null) {
c.setQuotedString();
        traverse(c);        Node next = c.getNext();
        c = next;
      }
"
closure-13,126,"      Node c = node.getFirstChild();
      while(c != null) {
visits++;
        traverse(c);        Node next = c.getNext();
        c = next;
      }
"
closure-13,126,"      Node c = node.getFirstChild();
      while(c != null) {
Preconditions.beginTraversal();
        traverse(c);        Node next = c.getNext();
        c = next;
      }
"
closure-13,126,"      Node c = node.getFirstChild();
      while(c != null) {
Preconditions.endTraversal();
        traverse(c);        Node next = c.getNext();
        c = next;
      }
"
closure-13,126,"      Node c = node.getFirstChild();
      while(c != null) {
c = next;
        traverse(c);        Node next = c.getNext();
        c = next;
      }
"
closure-13,126,"      Node c = node.getFirstChild();
      while(c != null) {
if((c != null)){
        traverse(c);        Node next = c.getNext();
        c = next;
}
"
closure-13,126,"      Node c = node.getFirstChild();
      while(c != null) {
exitNode(node);
        traverse(c);        Node next = c.getNext();
        c = next;
      }
"
closure-13,126,"      Node c = node.getFirstChild();
      while(c != null) {
c.traverse();
        Node next = c.getNext();
        c = next;
      }
"
closure-13,126,"      Node c = node.getFirstChild();
      while(c != null) {
traverse(c, false);
        Node next = c.getNext();
        c = next;
      }
"
closure-13,126,"      Node c = node.getFirstChild();
      while(c != null) {
c = next;
        Node next = c.getNext();
        c = next;
      }
"
closure-13,126,"      Node c = node.getFirstChild();
      while(c != null) {
traverse(c, true);
        Node next = c.getNext();
        c = next;
      }
"
closure-13,126,"      Node c = node.getFirstChild();
      while(c != null) {
traverse();
        Node next = c.getNext();
        c = next;
      }
"
closure-13,126,"      Node c = node.getFirstChild();
      while(c != null) {
traverse(c, null);
        Node next = c.getNext();
        c = next;
      }
"
closure-13,126,"      Node c = node.getFirstChild();
      while(c != null) {
visit(node);
        Node next = c.getNext();
        c = next;
      }
"
closure-13,126,"      Node c = node.getFirstChild();
      while(c != null) {
exitNode(node);
        Node next = c.getNext();
        c = next;
      }
"
closure-13,126,"      Node c = node.getFirstChild();
      while(c != null) {
if(shouldRetraverse(node)){
        traverse(c);        Node next = c.getNext();
        c = next;
}
"
closure-13,126,"      Node c = node.getFirstChild();
      while(c != null) {
continue;
        traverse(c);        Node next = c.getNext();
        c = next;
      }
"
closure-13,126,"      Node c = node.getFirstChild();
      while(c != null) {
        Node next = c.getNext();
        c = next;
      }

"
closure-13,126,"      Node c = node.getFirstChild();
      while(c != null) {
visits++;
        Node next = c.getNext();
        c = next;
      }
"
closure-13,126,"      Node c = node.getFirstChild();
      while(c != null) {
traverse(c.getNext());
        Node next = c.getNext();
        c = next;
      }
"
closure-13,126,"      Node c = node.getFirstChild();
      while(c != null) {
Preconditions.checkState((visits < 10000), ""null"");
        Node next = c.getNext();
        c = next;
      }
"
closure-13,126,"      Node c = node.getFirstChild();
      while(c != null) {
if(!shouldVisit(node)){
        traverse(c);        Node next = c.getNext();
        c = next;
}
"
closure-13,126,"      Node c = node.getFirstChild();
      while(c != null) {
Preconditions.exitNode(c);
        Node next = c.getNext();
        c = next;
      }
"
closure-13,126,"      Node c = node.getFirstChild();
      while(c != null) {
Preconditions.visit(c);
        Node next = c.getNext();
        c = next;
      }
"
,,
lang-44,145,"            throw new NumberFormatException(""\""\"" is not a valid number."");
        }
if(val.length(""null"")){            // this is protection for poorness in java.lang.BigDecimal.
            // it accepts this as a legal value, but it does not appear 
            // to be in specification of class. OS X Java parses it to 
            // a wrong value.
"
lang-44,145,"            throw new NumberFormatException(""\""\"" is not a valid number."");
        }
if(val.startsWith(""null"")){            // this is protection for poorness in java.lang.BigDecimal.
            // it accepts this as a legal value, but it does not appear 
            // to be in specification of class. OS X Java parses it to 
            // a wrong value.
"
lang-44,145,"            throw new NumberFormatException(""\""\"" is not a valid number."");
        }
if(val.getName(""null"")){            // this is protection for poorness in java.lang.BigDecimal.
            // it accepts this as a legal value, but it does not appear 
            // to be in specification of class. OS X Java parses it to 
            // a wrong value.
"
lang-44,145,"            throw new NumberFormatException(""\""\"" is not a valid number."");
        }
if(val.startsWith(""null"")){
            // this is protection for poorness in java.lang.BigDecimal.
            // it accepts this as a legal value, but it does not appear 
            // to be in specification of class. OS X Java parses it to 
"
lang-44,145,"            throw new NumberFormatException(""\""\"" is not a valid number."");
        }
if(!val.startsWith(""null"")){
            // this is protection for poorness in java.lang.BigDecimal.
            // it accepts this as a legal value, but it does not appear 
            // to be in specification of class. OS X Java parses it to 
"
lang-44,145,"            throw new NumberFormatException(""\""\"" is not a valid number."");
        }
if(val.get(""null"")){            // this is protection for poorness in java.lang.BigDecimal.
            // it accepts this as a legal value, but it does not appear 
            // to be in specification of class. OS X Java parses it to 
            // a wrong value.
"
lang-44,145,"            throw new NumberFormatException(""\""\"" is not a valid number."");
        }
if(val.toString(""null"")){            // this is protection for poorness in java.lang.BigDecimal.
            // it accepts this as a legal value, but it does not appear 
            // to be in specification of class. OS X Java parses it to 
            // a wrong value.
"
lang-44,145,"            throw new NumberFormatException(""\""\"" is not a valid number."");
        }
if(val.createNumber(""null"")){            // this is protection for poorness in java.lang.BigDecimal.
            // it accepts this as a legal value, but it does not appear 
            // to be in specification of class. OS X Java parses it to 
            // a wrong value.
"
lang-44,145,"            throw new NumberFormatException(""\""\"" is not a valid number."");
        }
if((val.startsWith(""null"") && val.startsWith(""null""))){
            // this is protection for poorness in java.lang.BigDecimal.
            // it accepts this as a legal value, but it does not appear 
            // to be in specification of class. OS X Java parses it to 
"
lang-44,145,"            throw new NumberFormatException(""\""\"" is not a valid number."");
        }
if(((val.length() == 0) && val.startsWith(""null""))){
            // this is protection for poorness in java.lang.BigDecimal.
            // it accepts this as a legal value, but it does not appear 
            // to be in specification of class. OS X Java parses it to 
"
lang-44,145,"            throw new NumberFormatException(""\""\"" is not a valid number."");
        }
if((val.startsWith(""null"") || val.startsWith(""null""))){
            // this is protection for poorness in java.lang.BigDecimal.
            // it accepts this as a legal value, but it does not appear 
            // to be in specification of class. OS X Java parses it to 
"
lang-44,145,"            throw new NumberFormatException(""\""\"" is not a valid number."");
        }
if(((val.length() == 0) || val.startsWith(""null""))){
            // this is protection for poorness in java.lang.BigDecimal.
            // it accepts this as a legal value, but it does not appear 
            // to be in specification of class. OS X Java parses it to 
"
lang-44,145,"            throw new NumberFormatException(""\""\"" is not a valid number."");
        }
if((val.startsWith(""null"") && 0)){
            // this is protection for poorness in java.lang.BigDecimal.
            // it accepts this as a legal value, but it does not appear 
            // to be in specification of class. OS X Java parses it to 
"
lang-44,145,"            throw new NumberFormatException(""\""\"" is not a valid number."");
        }
if((val.length() == 0)){
            // this is protection for poorness in java.lang.BigDecimal.
            // it accepts this as a legal value, but it does not appear 
            // to be in specification of class. OS X Java parses it to 
"
lang-44,145,"            throw new NumberFormatException(""\""\"" is not a valid number."");
        }
if((val.startsWith(""null"") || 0)){
            // this is protection for poorness in java.lang.BigDecimal.
            // it accepts this as a legal value, but it does not appear 
            // to be in specification of class. OS X Java parses it to 
"
lang-44,145,"            throw new NumberFormatException(""\""\"" is not a valid number."");
        }
if((val.startsWith(""null"") && (val.length() == 0))){
            // this is protection for poorness in java.lang.BigDecimal.
            // it accepts this as a legal value, but it does not appear 
            // to be in specification of class. OS X Java parses it to 
"
lang-44,145,"            throw new NumberFormatException(""\""\"" is not a valid number."");
        }
if((val.startsWith(""null"") || (val.length() == 0))){
            // this is protection for poorness in java.lang.BigDecimal.
            // it accepts this as a legal value, but it does not appear 
            // to be in specification of class. OS X Java parses it to 
"
lang-44,145,"            throw new NumberFormatException(""\""\"" is not a valid number."");
        }
if(((val.startsWith(""null"") || val.startsWith(""null"")) && val.startsWith(""null""))){
            // this is protection for poorness in java.lang.BigDecimal.
            // it accepts this as a legal value, but it does not appear 
            // to be in specification of class. OS X Java parses it to 
"
lang-44,145,"            throw new NumberFormatException(""\""\"" is not a valid number."");
        }
if((val.length() == 0)){
        if (val.startsWith(""--"")) {            // this is protection for poorness in java.lang.BigDecimal.
            // it accepts this as a legal value, but it does not appear 
            // to be in specification of class. OS X Java parses it to 
"
lang-44,145,"            throw new NumberFormatException(""\""\"" is not a valid number."");
        }
if((val.startsWith(""null"") || val.startsWith(""null""))){
        if (val.startsWith(""--"")) {            // this is protection for poorness in java.lang.BigDecimal.
            // it accepts this as a legal value, but it does not appear 
            // to be in specification of class. OS X Java parses it to 
"
lang-44,145,"            throw new NumberFormatException(""\""\"" is not a valid number."");
        }
if (true) { return null; }
        if (val.startsWith(""--"")) {            // this is protection for poorness in java.lang.BigDecimal.
            // it accepts this as a legal value, but it does not appear 
            // to be in specification of class. OS X Java parses it to 
"
lang-44,145,"            throw new NumberFormatException(""\""\"" is not a valid number."");
        }
if (true) { return;
 }
        if (val.startsWith(""--"")) {            // this is protection for poorness in java.lang.BigDecimal.
            // it accepts this as a legal value, but it does not appear 
"
lang-44,145,"            throw new NumberFormatException(""\""\"" is not a valid number."");
        }
        if (val.startsWith(""--"")) {            // this is protection for poorness in java.lang.BigDecimal.
            // it accepts this as a legal value, but it does not appear 
            // to be in specification of class. OS X Java parses it to 
            // a wrong value.
"
,,
closure-121,301,"      // reference data is out of sync. We're better off just waiting for
      // the next pass.)
if(((!maybeModifiedArguments && !staleVars.contains(v)) && referenceInfo.isWellDefined())){
          // Inlining the variable based solely on well-defined and assigned
          // once is *NOT* correct. We relax the correctness requirement if
          // the variable is declared constant.
"
closure-121,301,"      // reference data is out of sync. We're better off just waiting for
      // the next pass.)
if((!maybeModifiedArguments && !staleVars.contains(v))){
          // Inlining the variable based solely on well-defined and assigned
          // once is *NOT* correct. We relax the correctness requirement if
          // the variable is declared constant.
"
closure-121,301,"      // reference data is out of sync. We're better off just waiting for
      // the next pass.)
if(((!maybeModifiedArguments && !staleVars.contains(v)) && referenceInfo.isAssignedOnceInLifetime())){
          // Inlining the variable based solely on well-defined and assigned
          // once is *NOT* correct. We relax the correctness requirement if
          // the variable is declared constant.
"
closure-121,301,"      // reference data is out of sync. We're better off just waiting for
      // the next pass.)
if((((!maybeModifiedArguments && !staleVars.contains(v)) && referenceInfo.isWellDefined()) && referenceInfo.getNode())){          // Inlining the variable based solely on well-defined and assigned
          // once is *NOT* correct. We relax the correctness requirement if
          // the variable is declared constant.
        List<Reference> refs = referenceInfo.references;
"
closure-121,301,"      // reference data is out of sync. We're better off just waiting for
      // the next pass.)
if(((((!maybeModifiedArguments && !staleVars.contains(v)) && referenceInfo.isWellDefined()) && referenceInfo.isAssignedOnceInLifetime()) && referenceInfo.isAssignedOnceInLifetime())){
          // Inlining the variable based solely on well-defined and assigned
          // once is *NOT* correct. We relax the correctness requirement if
          // the variable is declared constant.
"
closure-121,301,"      // reference data is out of sync. We're better off just waiting for
      // the next pass.)
if(!staleVars.contains(v)){
          // Inlining the variable based solely on well-defined and assigned
          // once is *NOT* correct. We relax the correctness requirement if
          // the variable is declared constant.
"
closure-121,301,"      // reference data is out of sync. We're better off just waiting for
      // the next pass.)
if((((!maybeModifiedArguments && !staleVars.contains(v)) && referenceInfo.isWellDefined()) && referenceInfo.getInitializingReference())){          // Inlining the variable based solely on well-defined and assigned
          // once is *NOT* correct. We relax the correctness requirement if
          // the variable is declared constant.
        List<Reference> refs = referenceInfo.references;
"
closure-121,301,"      // reference data is out of sync. We're better off just waiting for
      // the next pass.)
if((((!maybeModifiedArguments && !staleVars.contains(v)) && referenceInfo.getNode()) && referenceInfo.isAssignedOnceInLifetime())){          // Inlining the variable based solely on well-defined and assigned
          // once is *NOT* correct. We relax the correctness requirement if
          // the variable is declared constant.
        List<Reference> refs = referenceInfo.references;
"
closure-121,301,"      // reference data is out of sync. We're better off just waiting for
      // the next pass.)
if((!maybeModifiedArguments && referenceInfo.isAssignedOnceInLifetime())){
          // Inlining the variable based solely on well-defined and assigned
          // once is *NOT* correct. We relax the correctness requirement if
          // the variable is declared constant.
"
closure-121,301,"      // reference data is out of sync. We're better off just waiting for
      // the next pass.)
if((((!maybeModifiedArguments && !staleVars.contains(v)) && referenceInfo.isWellDefined()) && referenceInfo.getName())){          // Inlining the variable based solely on well-defined and assigned
          // once is *NOT* correct. We relax the correctness requirement if
          // the variable is declared constant.
        List<Reference> refs = referenceInfo.references;
"
closure-121,301,"      // reference data is out of sync. We're better off just waiting for
      // the next pass.)
if((((!maybeModifiedArguments && !staleVars.contains(v)) && referenceInfo.isWellDefined()) && referenceInfo.isAssignedOnceInLifetime())){          // Inlining the variable based solely on well-defined and assigned
          // once is *NOT* correct. We relax the correctness requirement if
          // the variable is declared constant.
        List<Reference> refs = referenceInfo.references;
"
closure-121,301,"      // reference data is out of sync. We're better off just waiting for
      // the next pass.)
if((((maybeModifiedArguments && !staleVars.contains(v)) && referenceInfo.isWellDefined()) && referenceInfo.isAssignedOnceInLifetime())){          // Inlining the variable based solely on well-defined and assigned
          // once is *NOT* correct. We relax the correctness requirement if
          // the variable is declared constant.
        List<Reference> refs = referenceInfo.references;
"
closure-121,301,"      // reference data is out of sync. We're better off just waiting for
      // the next pass.)
if(referenceInfo.isAssignedOnceInLifetime()){
          // Inlining the variable based solely on well-defined and assigned
          // once is *NOT* correct. We relax the correctness requirement if
          // the variable is declared constant.
"
closure-121,301,"      // reference data is out of sync. We're better off just waiting for
      // the next pass.)
if((((!maybeModifiedArguments && !staleVars.contains(v)) && referenceInfo.getInitializingReference()) && referenceInfo.isAssignedOnceInLifetime())){          // Inlining the variable based solely on well-defined and assigned
          // once is *NOT* correct. We relax the correctness requirement if
          // the variable is declared constant.
        List<Reference> refs = referenceInfo.references;
"
closure-121,301,"      // reference data is out of sync. We're better off just waiting for
      // the next pass.)
if((((!maybeModifiedArguments && !staleVars.contains(v)) && referenceInfo.isAssignedOnceInLifetime()) && referenceInfo.isAssignedOnceInLifetime())){
          // Inlining the variable based solely on well-defined and assigned
          // once is *NOT* correct. We relax the correctness requirement if
          // the variable is declared constant.
"
closure-121,301,"      // reference data is out of sync. We're better off just waiting for
      // the next pass.)
if(referenceInfo.isWellDefined()){
          // Inlining the variable based solely on well-defined and assigned
          // once is *NOT* correct. We relax the correctness requirement if
          // the variable is declared constant.
"
closure-121,301,"      // reference data is out of sync. We're better off just waiting for
      // the next pass.)
if((((!maybeModifiedArguments && !staleVars.contains(v)) && referenceInfo.isAssignedOnceInLifetime()) && referenceInfo.isAssignedOnceInLifetime())){          // Inlining the variable based solely on well-defined and assigned
          // once is *NOT* correct. We relax the correctness requirement if
          // the variable is declared constant.
        List<Reference> refs = referenceInfo.references;
"
closure-121,301,"      // reference data is out of sync. We're better off just waiting for
      // the next pass.)
if((((!maybeModifiedArguments && !staleVars.contains(maybeModifiedArguments)) && referenceInfo.isWellDefined()) && referenceInfo.isAssignedOnceInLifetime())){          // Inlining the variable based solely on well-defined and assigned
          // once is *NOT* correct. We relax the correctness requirement if
          // the variable is declared constant.
        List<Reference> refs = referenceInfo.references;
"
closure-121,301,"      // reference data is out of sync. We're better off just waiting for
      // the next pass.)
if((((!maybeModifiedArguments && !staleVars.contains(v)) && referenceInfo.isWellDefined()) || referenceInfo.isAssignedOnceInLifetime())){          // Inlining the variable based solely on well-defined and assigned
          // once is *NOT* correct. We relax the correctness requirement if
          // the variable is declared constant.
        List<Reference> refs = referenceInfo.references;
"
closure-121,301,"      // reference data is out of sync. We're better off just waiting for
      // the next pass.)
if((((v && !staleVars.contains(v)) && referenceInfo.isWellDefined()) && referenceInfo.isAssignedOnceInLifetime())){          // Inlining the variable based solely on well-defined and assigned
          // once is *NOT* correct. We relax the correctness requirement if
          // the variable is declared constant.
        List<Reference> refs = referenceInfo.references;
"
closure-121,301,"      // reference data is out of sync. We're better off just waiting for
      // the next pass.)
if(((!maybeModifiedArguments && !staleVars.contains(v)) && !staleVars.contains(v))){
          // Inlining the variable based solely on well-defined and assigned
          // once is *NOT* correct. We relax the correctness requirement if
          // the variable is declared constant.
"
closure-121,301,"      // reference data is out of sync. We're better off just waiting for
      // the next pass.)
if((((!maybeModifiedArguments && !staleVars.contains(v)) && referenceInfo.isWellDefined()) && referenceInfo.size())){          // Inlining the variable based solely on well-defined and assigned
          // once is *NOT* correct. We relax the correctness requirement if
          // the variable is declared constant.
        List<Reference> refs = referenceInfo.references;
"
closure-121,301,"      // reference data is out of sync. We're better off just waiting for
      // the next pass.)
if((((!maybeModifiedArguments && !staleVars.contains(v)) && !staleVars.contains(v)) && referenceInfo.isAssignedOnceInLifetime())){
          // Inlining the variable based solely on well-defined and assigned
          // once is *NOT* correct. We relax the correctness requirement if
          // the variable is declared constant.
"
closure-121,301,"      // reference data is out of sync. We're better off just waiting for
      // the next pass.)
if((((!maybeModifiedArguments && !staleVars.contains(v)) && referenceInfo.isWellDefined()) && referenceInfo.isWellDefined())){          // Inlining the variable based solely on well-defined and assigned
          // once is *NOT* correct. We relax the correctness requirement if
          // the variable is declared constant.
        List<Reference> refs = referenceInfo.references;
"
closure-121,301,"      // reference data is out of sync. We're better off just waiting for
      // the next pass.)
if((!maybeModifiedArguments && referenceInfo.isWellDefined())){
          // Inlining the variable based solely on well-defined and assigned
          // once is *NOT* correct. We relax the correctness requirement if
          // the variable is declared constant.
"
closure-121,301,"      // reference data is out of sync. We're better off just waiting for
      // the next pass.)
if(maybeModifiedArguments){
          // Inlining the variable based solely on well-defined and assigned
          // once is *NOT* correct. We relax the correctness requirement if
          // the variable is declared constant.
"
closure-121,301,"      // reference data is out of sync. We're better off just waiting for
      // the next pass.)
if(((!maybeModifiedArguments && referenceInfo.isWellDefined()) && referenceInfo.isAssignedOnceInLifetime())){
          // Inlining the variable based solely on well-defined and assigned
          // once is *NOT* correct. We relax the correctness requirement if
          // the variable is declared constant.
"
closure-121,301,"      // reference data is out of sync. We're better off just waiting for
      // the next pass.)
if((((((!maybeModifiedArguments && !staleVars.contains(v)) && referenceInfo.isWellDefined()) && referenceInfo.isAssignedOnceInLifetime()) && referenceInfo.isAssignedOnceInLifetime()) && referenceInfo.isAssignedOnceInLifetime())){
          // Inlining the variable based solely on well-defined and assigned
          // once is *NOT* correct. We relax the correctness requirement if
          // the variable is declared constant.
"
closure-121,301,"      // reference data is out of sync. We're better off just waiting for
      // the next pass.)
if((((!maybeModifiedArguments && !staleVars.contains(v)) && referenceInfo.isWellDefined()) && referenceInfo.isWellDefined())){
          // Inlining the variable based solely on well-defined and assigned
          // once is *NOT* correct. We relax the correctness requirement if
          // the variable is declared constant.
"
closure-121,301,"      // reference data is out of sync. We're better off just waiting for
      // the next pass.)
if(((!maybeModifiedArguments && referenceInfo.isAssignedOnceInLifetime()) && referenceInfo.isAssignedOnceInLifetime())){
          // Inlining the variable based solely on well-defined and assigned
          // once is *NOT* correct. We relax the correctness requirement if
          // the variable is declared constant.
"
closure-121,301,"      // reference data is out of sync. We're better off just waiting for
      // the next pass.)
if((((!maybeModifiedArguments && !staleVars.contains(v)) && referenceInfo.getName()) && referenceInfo.isAssignedOnceInLifetime())){          // Inlining the variable based solely on well-defined and assigned
          // once is *NOT* correct. We relax the correctness requirement if
          // the variable is declared constant.
        List<Reference> refs = referenceInfo.references;
"
closure-121,301,"      // reference data is out of sync. We're better off just waiting for
      // the next pass.)
if((((!maybeModifiedArguments && !staleVars.contains(v)) && referenceInfo.size()) && referenceInfo.isAssignedOnceInLifetime())){          // Inlining the variable based solely on well-defined and assigned
          // once is *NOT* correct. We relax the correctness requirement if
          // the variable is declared constant.
        List<Reference> refs = referenceInfo.references;
"
closure-121,301,"      // reference data is out of sync. We're better off just waiting for
      // the next pass.)
if((((!maybeModifiedArguments && !staleVars.contains(v)) && referenceInfo.isWellDefined()) && candidate.refInfo.isAssignedOnceInLifetime())){          // Inlining the variable based solely on well-defined and assigned
          // once is *NOT* correct. We relax the correctness requirement if
          // the variable is declared constant.
        List<Reference> refs = referenceInfo.references;
"
closure-121,301,"      // reference data is out of sync. We're better off just waiting for
      // the next pass.)
if(((((!maybeModifiedArguments && !staleVars.contains(v)) && referenceInfo.isWellDefined()) && referenceInfo.isAssignedOnceInLifetime()) && referenceInfo.isWellDefined())){
          // Inlining the variable based solely on well-defined and assigned
          // once is *NOT* correct. We relax the correctness requirement if
          // the variable is declared constant.
"
closure-121,301,"      // reference data is out of sync. We're better off just waiting for
      // the next pass.)
if((((!maybeModifiedArguments && !staleVars.contains(v)) && referenceInfo.isWellDefined()) && staleVars.isAssignedOnceInLifetime())){          // Inlining the variable based solely on well-defined and assigned
          // once is *NOT* correct. We relax the correctness requirement if
          // the variable is declared constant.
        List<Reference> refs = referenceInfo.references;
"
closure-121,301,"      // reference data is out of sync. We're better off just waiting for
      // the next pass.)
if(((!maybeModifiedArguments && !staleVars.contains(v)) && !isVarInlineForbidden(candidate.alias))){
          // Inlining the variable based solely on well-defined and assigned
          // once is *NOT* correct. We relax the correctness requirement if
          // the variable is declared constant.
"
closure-121,301,"      // reference data is out of sync. We're better off just waiting for
      // the next pass.)
if(aliasCandidates.containsKey(nameNode)){
          // Inlining the variable based solely on well-defined and assigned
          // once is *NOT* correct. We relax the correctness requirement if
          // the variable is declared constant.
"
closure-121,301,"      // reference data is out of sync. We're better off just waiting for
      // the next pass.)
if((!staleVars.contains(candidate.alias) && !isVarInlineForbidden(candidate.alias))){
          // Inlining the variable based solely on well-defined and assigned
          // once is *NOT* correct. We relax the correctness requirement if
          // the variable is declared constant.
"
closure-121,301,"      // reference data is out of sync. We're better off just waiting for
      // the next pass.)
if((maybeModifiedArguments && referenceInfo.isAssignedOnceInLifetime())){
          // Inlining the variable based solely on well-defined and assigned
          // once is *NOT* correct. We relax the correctness requirement if
          // the variable is declared constant.
"
closure-121,301,"      // reference data is out of sync. We're better off just waiting for
      // the next pass.)
if(((((!maybeModifiedArguments && !staleVars.contains(v)) && referenceInfo.isWellDefined()) && referenceInfo.isAssignedOnceInLifetime()) && !isVarInlineForbidden(candidate.alias))){
          // Inlining the variable based solely on well-defined and assigned
          // once is *NOT* correct. We relax the correctness requirement if
          // the variable is declared constant.
"
closure-121,301,"      // reference data is out of sync. We're better off just waiting for
      // the next pass.)
if((((!maybeModifiedArguments && !staleVars.contains(v)) && !staleVars.contains(v)) && referenceInfo.isWellDefined())){
          // Inlining the variable based solely on well-defined and assigned
          // once is *NOT* correct. We relax the correctness requirement if
          // the variable is declared constant.
"
closure-121,301,"      // reference data is out of sync. We're better off just waiting for
      // the next pass.)
if((((!maybeModifiedArguments && !staleVars.getNode(v)) && referenceInfo.isWellDefined()) && referenceInfo.isAssignedOnceInLifetime())){          // Inlining the variable based solely on well-defined and assigned
          // once is *NOT* correct. We relax the correctness requirement if
          // the variable is declared constant.
        List<Reference> refs = referenceInfo.references;
"
closure-121,301,"      // reference data is out of sync. We're better off just waiting for
      // the next pass.)
if((((((!maybeModifiedArguments && !staleVars.contains(v)) && referenceInfo.isWellDefined()) && referenceInfo.isAssignedOnceInLifetime()) && referenceInfo.isWellDefined()) && referenceInfo.isAssignedOnceInLifetime())){
          // Inlining the variable based solely on well-defined and assigned
          // once is *NOT* correct. We relax the correctness requirement if
          // the variable is declared constant.
"
closure-121,301,"      // reference data is out of sync. We're better off just waiting for
      // the next pass.)
if((((!maybeModifiedArguments && !staleVars.contains(v)) && referenceInfo.isWellDefined()) && !staleVars.contains(v))){
          // Inlining the variable based solely on well-defined and assigned
          // once is *NOT* correct. We relax the correctness requirement if
          // the variable is declared constant.
"
closure-121,301,"      // reference data is out of sync. We're better off just waiting for
      // the next pass.)
if((((!maybeModifiedArguments && !staleVars.contains(nameNode)) && referenceInfo.isWellDefined()) && referenceInfo.isAssignedOnceInLifetime())){          // Inlining the variable based solely on well-defined and assigned
          // once is *NOT* correct. We relax the correctness requirement if
          // the variable is declared constant.
        List<Reference> refs = referenceInfo.references;
"
closure-121,301,"      // reference data is out of sync. We're better off just waiting for
      // the next pass.)
if((!staleVars.contains(candidate.alias) && referenceInfo.isAssignedOnceInLifetime())){
          // Inlining the variable based solely on well-defined and assigned
          // once is *NOT* correct. We relax the correctness requirement if
          // the variable is declared constant.
"
closure-121,301,"      // reference data is out of sync. We're better off just waiting for
      // the next pass.)
if(!maybeModifiedArguments){
          // Inlining the variable based solely on well-defined and assigned
          // once is *NOT* correct. We relax the correctness requirement if
          // the variable is declared constant.
"
closure-121,301,"      // reference data is out of sync. We're better off just waiting for
      // the next pass.)
if((((!maybeModifiedArguments && !staleVars.contains(v)) && referenceInfo.isWellDefined()) && aliasCandidates.isAssignedOnceInLifetime())){          // Inlining the variable based solely on well-defined and assigned
          // once is *NOT* correct. We relax the correctness requirement if
          // the variable is declared constant.
        List<Reference> refs = referenceInfo.references;
"
,,
mockito-24,76,"            //mocks by default should return 0 if references are the same, otherwise some other value because they are not the same. Hence we return 1 (anything but 0 is good).
            //Only for compareTo() method by the Comparable interface
        }
        
        Class<?> returnType = invocation.getMethod().getReturnType();
        return returnValueFor(returnType);
"
mockito-24,76,"            //mocks by default should return 0 if references are the same, otherwise some other value because they are not the same. Hence we return 1 (anything but 0 is good).
            //Only for compareTo() method by the Comparable interface
return 0;        }
        
        Class<?> returnType = invocation.getMethod().getReturnType();
        return returnValueFor(returnType);
"
mockito-24,76,"            //mocks by default should return 0 if references are the same, otherwise some other value because they are not the same. Hence we return 1 (anything but 0 is good).
            //Only for compareTo() method by the Comparable interface
continue;
        }
        
        Class<?> returnType = invocation.getMethod().getReturnType();
"
mockito-24,76,"            //mocks by default should return 0 if references are the same, otherwise some other value because they are not the same. Hence we return 1 (anything but 0 is good).
            //Only for compareTo() method by the Comparable interface
return 2;        }
        
        Class<?> returnType = invocation.getMethod().getReturnType();
        return returnValueFor(returnType);
"
mockito-24,76,"            //mocks by default should return 0 if references are the same, otherwise some other value because they are not the same. Hence we return 1 (anything but 0 is good).
            //Only for compareTo() method by the Comparable interface
return returnValueFor(returnType);        }
        
        Class<?> returnType = invocation.getMethod().getReturnType();
        return returnValueFor(returnType);
"
mockito-24,76,"            //mocks by default should return 0 if references are the same, otherwise some other value because they are not the same. Hence we return 1 (anything but 0 is good).
            //Only for compareTo() method by the Comparable interface
return (((""null"" + mockUtil.getMockSettings(mock).getTypeToMock().getSimpleName()) + ""null"") + mock.hashCode());        }
        
        Class<?> returnType = invocation.getMethod().getReturnType();
        return returnValueFor(returnType);
"
mockito-24,76,"            //mocks by default should return 0 if references are the same, otherwise some other value because they are not the same. Hence we return 1 (anything but 0 is good).
            //Only for compareTo() method by the Comparable interface
return returnType;        }
        
        Class<?> returnType = invocation.getMethod().getReturnType();
        return returnValueFor(returnType);
"
mockito-24,76,"            //mocks by default should return 0 if references are the same, otherwise some other value because they are not the same. Hence we return 1 (anything but 0 is good).
            //Only for compareTo() method by the Comparable interface
return name.toString();        }
        
        Class<?> returnType = invocation.getMethod().getReturnType();
        return returnValueFor(returnType);
"
mockito-24,76,"            //mocks by default should return 0 if references are the same, otherwise some other value because they are not the same. Hence we return 1 (anything but 0 is good).
            //Only for compareTo() method by the Comparable interface
return null;        }
        
        Class<?> returnType = invocation.getMethod().getReturnType();
        return returnValueFor(returnType);
"
mockito-24,76,"            //mocks by default should return 0 if references are the same, otherwise some other value because they are not the same. Hence we return 1 (anything but 0 is good).
            //Only for compareTo() method by the Comparable interface
return name;        }
        
        Class<?> returnType = invocation.getMethod().getReturnType();
        return returnValueFor(returnType);
"
mockito-24,76,"            //mocks by default should return 0 if references are the same, otherwise some other value because they are not the same. Hence we return 1 (anything but 0 is good).
            //Only for compareTo() method by the Comparable interface
break;
        }
        
        Class<?> returnType = invocation.getMethod().getReturnType();
"
mockito-24,76,"            //mocks by default should return 0 if references are the same, otherwise some other value because they are not the same. Hence we return 1 (anything but 0 is good).
            //Only for compareTo() method by the Comparable interface
return ;        }
        
        Class<?> returnType = invocation.getMethod().getReturnType();
        return returnValueFor(returnType);
"
mockito-24,76,"            //mocks by default should return 0 if references are the same, otherwise some other value because they are not the same. Hence we return 1 (anything but 0 is good).
            //Only for compareTo() method by the Comparable interface
if (true) { return returnValueFor(returnType); }
            return 1;        }
        
        Class<?> returnType = invocation.getMethod().getReturnType();
"
mockito-24,76,"            //mocks by default should return 0 if references are the same, otherwise some other value because they are not the same. Hence we return 1 (anything but 0 is good).
            //Only for compareTo() method by the Comparable interface
if (true) { return (((""null"" + mockUtil.getMockSettings(mock).getTypeToMock().getSimpleName()) + ""null"") + mock.hashCode()); }
            return 1;        }
        
        Class<?> returnType = invocation.getMethod().getReturnType();
"
mockito-24,76,"            //mocks by default should return 0 if references are the same, otherwise some other value because they are not the same. Hence we return 1 (anything but 0 is good).
            //Only for compareTo() method by the Comparable interface
if (true) { return name.toString(); }
            return 1;        }
        
        Class<?> returnType = invocation.getMethod().getReturnType();
"
mockito-24,76,"            //mocks by default should return 0 if references are the same, otherwise some other value because they are not the same. Hence we return 1 (anything but 0 is good).
            //Only for compareTo() method by the Comparable interface
if (true) { return null; }
            return 1;        }
        
        Class<?> returnType = invocation.getMethod().getReturnType();
"
mockito-24,76,"            //mocks by default should return 0 if references are the same, otherwise some other value because they are not the same. Hence we return 1 (anything but 0 is good).
            //Only for compareTo() method by the Comparable interface
return;
        }
        
        Class<?> returnType = invocation.getMethod().getReturnType();
"
mockito-24,76,"            //mocks by default should return 0 if references are the same, otherwise some other value because they are not the same. Hence we return 1 (anything but 0 is good).
            //Only for compareTo() method by the Comparable interface
return mock;        }
        
        Class<?> returnType = invocation.getMethod().getReturnType();
        return returnValueFor(returnType);
"
mockito-24,76,"            //mocks by default should return 0 if references are the same, otherwise some other value because they are not the same. Hence we return 1 (anything but 0 is good).
            //Only for compareTo() method by the Comparable interface
if (true) { return;
 }
            return 1;        }
        
"
mockito-24,76,"            //mocks by default should return 0 if references are the same, otherwise some other value because they are not the same. Hence we return 1 (anything but 0 is good).
            //Only for compareTo() method by the Comparable interface
break;
            return 1;        }
        
        Class<?> returnType = invocation.getMethod().getReturnType();
"
mockito-24,76,"            //mocks by default should return 0 if references are the same, otherwise some other value because they are not the same. Hence we return 1 (anything but 0 is good).
            //Only for compareTo() method by the Comparable interface
return -1;        }
        
        Class<?> returnType = invocation.getMethod().getReturnType();
        return returnValueFor(returnType);
"
mockito-24,76,"            //mocks by default should return 0 if references are the same, otherwise some other value because they are not the same. Hence we return 1 (anything but 0 is good).
            //Only for compareTo() method by the Comparable interface
if(((""null"" + mockUtil.getMockSettings(mock).getTypeToMock().getSimpleName()) + ""null"")){
continue;
}
            return 1;        }
"
mockito-24,76,"            //mocks by default should return 0 if references are the same, otherwise some other value because they are not the same. Hence we return 1 (anything but 0 is good).
            //Only for compareTo() method by the Comparable interface
return ((""null"" + mockUtil.getMockSettings(mock).getTypeToMock().getSimpleName()) + ""null"");        }
        
        Class<?> returnType = invocation.getMethod().getReturnType();
        return returnValueFor(returnType);
"
mockito-24,76,"            //mocks by default should return 0 if references are the same, otherwise some other value because they are not the same. Hence we return 1 (anything but 0 is good).
            //Only for compareTo() method by the Comparable interface
if(methodsGuru.isCompareToMethod(invocation.getMethod())){
continue;
}
            return 1;        }
"
mockito-24,76,"            //mocks by default should return 0 if references are the same, otherwise some other value because they are not the same. Hence we return 1 (anything but 0 is good).
            //Only for compareTo() method by the Comparable interface
if (true) { return returnType; }
            return 1;        }
        
        Class<?> returnType = invocation.getMethod().getReturnType();
"
mockito-24,76,"            //mocks by default should return 0 if references are the same, otherwise some other value because they are not the same. Hence we return 1 (anything but 0 is good).
            //Only for compareTo() method by the Comparable interface
if((""null"" + mockUtil.getMockSettings(mock).getTypeToMock().getSimpleName())){
continue;
}
            return 1;        }
"
mockito-24,76,"            //mocks by default should return 0 if references are the same, otherwise some other value because they are not the same. Hence we return 1 (anything but 0 is good).
            //Only for compareTo() method by the Comparable interface
return ;        }
        
        Class<?> returnType = invocation.getMethod().getReturnType();
        return returnValueFor(returnType);
"
mockito-24,76,"            //mocks by default should return 0 if references are the same, otherwise some other value because they are not the same. Hence we return 1 (anything but 0 is good).
            //Only for compareTo() method by the Comparable interface
return (""null"" + mockUtil.getMockSettings(mock).getTypeToMock().getSimpleName());        }
        
        Class<?> returnType = invocation.getMethod().getReturnType();
        return returnValueFor(returnType);
"
mockito-24,76,"            //mocks by default should return 0 if references are the same, otherwise some other value because they are not the same. Hence we return 1 (anything but 0 is good).
            //Only for compareTo() method by the Comparable interface
return invocation.getMethod();        }
        
        Class<?> returnType = invocation.getMethod().getReturnType();
        return returnValueFor(returnType);
"
mockito-24,76,"            //mocks by default should return 0 if references are the same, otherwise some other value because they are not the same. Hence we return 1 (anything but 0 is good).
            //Only for compareTo() method by the Comparable interface
return false;        }
        
        Class<?> returnType = invocation.getMethod().getReturnType();
        return returnValueFor(returnType);
"
mockito-24,76,"            //mocks by default should return 0 if references are the same, otherwise some other value because they are not the same. Hence we return 1 (anything but 0 is good).
            //Only for compareTo() method by the Comparable interface
continue;
            return 1;        }
        
        Class<?> returnType = invocation.getMethod().getReturnType();
"
mockito-24,76,"            //mocks by default should return 0 if references are the same, otherwise some other value because they are not the same. Hence we return 1 (anything but 0 is good).
            //Only for compareTo() method by the Comparable interface
return 1;        }
        
        Class<?> returnType = invocation.getMethod().getReturnType();
        return returnValueFor(returnType);
"
,,
chart-19,698,"     */
    public int getDomainAxisIndex(CategoryAxis axis) {
return this.domainAxes.indexOf(axis);    }
    
    /**
     * Returns the domain axis location for the primary domain axis.
"
chart-19,698,"     */
    public int getDomainAxisIndex(CategoryAxis axis) {
return this.domainAxisLocations.indexOf(axis);    }
    
    /**
     * Returns the domain axis location for the primary domain axis.
"
chart-19,698,"     */
    public int getDomainAxisIndex(CategoryAxis axis) {
return this.rangeAxes.indexOf(axis);    }
    
    /**
     * Returns the domain axis location for the primary domain axis.
"
chart-19,698,"     */
    public int getDomainAxisIndex(CategoryAxis axis) {
return this.rangeAxisLocations.indexOf(axis);    }
    
    /**
     * Returns the domain axis location for the primary domain axis.
"
chart-19,698,"     */
    public int getDomainAxisIndex(CategoryAxis axis) {
return this.datasets.indexOf(axis);    }
    
    /**
     * Returns the domain axis location for the primary domain axis.
"
chart-19,698,"     */
    public int getDomainAxisIndex(CategoryAxis axis) {
return this.datasetToDomainAxisMap.indexOf(axis);    }
    
    /**
     * Returns the domain axis location for the primary domain axis.
"
chart-19,698,"     */
    public int getDomainAxisIndex(CategoryAxis axis) {
return this.datasetToRangeAxisMap.indexOf(axis);    }
    
    /**
     * Returns the domain axis location for the primary domain axis.
"
chart-19,698,"     */
    public int getDomainAxisIndex(CategoryAxis axis) {
return this.renderers.indexOf(axis);    }
    
    /**
     * Returns the domain axis location for the primary domain axis.
"
chart-19,698,"     */
    public int getDomainAxisIndex(CategoryAxis axis) {
return this.domainAxes.getDomainAxisIndex(axis);    }
    
    /**
     * Returns the domain axis location for the primary domain axis.
"
chart-19,698,"     */
    public int getDomainAxisIndex(CategoryAxis axis) {
return this.domainAxes;    }
    
    /**
     * Returns the domain axis location for the primary domain axis.
"
chart-19,698,"     */
    public int getDomainAxisIndex(CategoryAxis axis) {
return this.axis.indexOf(axis);    }
    
    /**
     * Returns the domain axis location for the primary domain axis.
"
chart-19,698,"     */
    public int getDomainAxisIndex(CategoryAxis axis) {
return this.domainAxes.domainAxes.indexOf(axis);    }
    
    /**
     * Returns the domain axis location for the primary domain axis.
"
chart-19,698,"     */
    public int getDomainAxisIndex(CategoryAxis axis) {
return this.domainAxisLocations.domainAxes.indexOf(axis);    }
    
    /**
     * Returns the domain axis location for the primary domain axis.
"
chart-19,698,"     */
    public int getDomainAxisIndex(CategoryAxis axis) {
return this.rangeAxes.domainAxes.indexOf(axis);    }
    
    /**
     * Returns the domain axis location for the primary domain axis.
"
chart-19,698,"     */
    public int getDomainAxisIndex(CategoryAxis axis) {
return this.rangeAxisLocations.domainAxes.indexOf(axis);    }
    
    /**
     * Returns the domain axis location for the primary domain axis.
"
chart-19,698,"     */
    public int getDomainAxisIndex(CategoryAxis axis) {
return this.datasets.domainAxes.indexOf(axis);    }
    
    /**
     * Returns the domain axis location for the primary domain axis.
"
chart-19,698,"     */
    public int getDomainAxisIndex(CategoryAxis axis) {
return this.datasetToDomainAxisMap.domainAxes.indexOf(axis);    }
    
    /**
     * Returns the domain axis location for the primary domain axis.
"
chart-19,698,"     */
    public int getDomainAxisIndex(CategoryAxis axis) {
return this.datasetToRangeAxisMap.domainAxes.indexOf(axis);    }
    
    /**
     * Returns the domain axis location for the primary domain axis.
"
chart-19,698,"     */
    public int getDomainAxisIndex(CategoryAxis axis) {
return this.renderers.domainAxes.indexOf(axis);    }
    
    /**
     * Returns the domain axis location for the primary domain axis.
"
chart-19,698,"     */
    public int getDomainAxisIndex(CategoryAxis axis) {
return indexOf(axis);    }
    
    /**
     * Returns the domain axis location for the primary domain axis.
"
chart-19,698,"     */
    public int getDomainAxisIndex(CategoryAxis axis) {
return this.domainAxes.setDomainAxis(axis);    }
    
    /**
     * Returns the domain axis location for the primary domain axis.
"
chart-19,698,"     */
    public int getDomainAxisIndex(CategoryAxis axis) {
return this.domainAxes.setDomainAxes(axis);    }
    
    /**
     * Returns the domain axis location for the primary domain axis.
"
chart-19,698,"     */
    public int getDomainAxisIndex(CategoryAxis axis) {
return setDomainAxis(axis);    }
    
    /**
     * Returns the domain axis location for the primary domain axis.
"
chart-19,698,"     */
    public int getDomainAxisIndex(CategoryAxis axis) {
return setDomainAxes(axis);    }
    
    /**
     * Returns the domain axis location for the primary domain axis.
"
chart-19,698,"     */
    public int getDomainAxisIndex(CategoryAxis axis) {
return domainAxes;    }
    
    /**
     * Returns the domain axis location for the primary domain axis.
"
chart-19,698,"     */
    public int getDomainAxisIndex(CategoryAxis axis) {
clearDomainAxes();
        return this.domainAxes.indexOf(axis);    }
    
    /**
"
chart-19,698,"     */
    public int getDomainAxisIndex(CategoryAxis axis) {
configureDomainAxes();
        return this.domainAxes.indexOf(axis);    }
    
    /**
"
chart-19,698,"     */
    public int getDomainAxisIndex(CategoryAxis axis) {
clearRangeAxes();
        return this.domainAxes.indexOf(axis);    }
    
    /**
"
chart-19,698,"     */
    public int getDomainAxisIndex(CategoryAxis axis) {
configureRangeAxes();
        return this.domainAxes.indexOf(axis);    }
    
    /**
"
chart-19,698,"     */
    public int getDomainAxisIndex(CategoryAxis axis) {
clearDomainMarkers();
        return this.domainAxes.indexOf(axis);    }
    
    /**
"
chart-19,698,"     */
    public int getDomainAxisIndex(CategoryAxis axis) {
clearRangeMarkers();
        return this.domainAxes.indexOf(axis);    }
    
    /**
"
chart-19,698,"     */
    public int getDomainAxisIndex(CategoryAxis axis) {
clearAnnotations();
        return this.domainAxes.indexOf(axis);    }
    
    /**
"
chart-19,698,"     */
    public int getDomainAxisIndex(CategoryAxis axis) {
return this.domainAxes.add(axis);    }
    
    /**
     * Returns the domain axis location for the primary domain axis.
"
chart-19,698,"     */
    public int getDomainAxisIndex(CategoryAxis axis) {
return this.indexOf(axis);    }
    
    /**
     * Returns the domain axis location for the primary domain axis.
"
chart-19,698,"     */
    public int getDomainAxisIndex(CategoryAxis axis) {
return this.domainAxes.debug(axis);    }
    
    /**
     * Returns the domain axis location for the primary domain axis.
"
chart-19,698,"     */
    public int getDomainAxisIndex(CategoryAxis axis) {
return 0;    }
    
    /**
     * Returns the domain axis location for the primary domain axis.
"
chart-19,698,"     */
    public int getDomainAxisIndex(CategoryAxis axis) {
this.domainAxes.indexOf(axis);
        return this.domainAxes.indexOf(axis);    }
    
    /**
"
chart-19,698,"     */
    public int getDomainAxisIndex(CategoryAxis axis) {
return this.domainAxes.max(axis);    }
    
    /**
     * Returns the domain axis location for the primary domain axis.
"
chart-19,698,"     */
    public int getDomainAxisIndex(CategoryAxis axis) {
return this.domainAxes.indexOf(axis, false);    }
    
    /**
     * Returns the domain axis location for the primary domain axis.
"
chart-19,698,"     */
    public int getDomainAxisIndex(CategoryAxis axis) {
return this;    }
    
    /**
     * Returns the domain axis location for the primary domain axis.
"
chart-19,698,"     */
    public int getDomainAxisIndex(CategoryAxis axis) {
return axis;    }
    
    /**
     * Returns the domain axis location for the primary domain axis.
"
chart-19,698,"     */
    public int getDomainAxisIndex(CategoryAxis axis) {
return this.domainAxes.indexOf(axis, true);    }
    
    /**
     * Returns the domain axis location for the primary domain axis.
"
chart-19,698,"     */
    public int getDomainAxisIndex(CategoryAxis axis) {
this.axis.indexOf(axis);
        return this.domainAxes.indexOf(axis);    }
    
    /**
"
chart-19,698,"     */
    public int getDomainAxisIndex(CategoryAxis axis) {
if(this.domainAxes){
}
        return this.domainAxes.indexOf(axis);    }
    
"
chart-19,698,"     */
    public int getDomainAxisIndex(CategoryAxis axis) {
return this.domainAxes.e(axis);    }
    
    /**
     * Returns the domain axis location for the primary domain axis.
"
chart-19,698,"     */
    public int getDomainAxisIndex(CategoryAxis axis) {
this.axis = axis;
        return this.domainAxes.indexOf(axis);    }
    
    /**
"
chart-19,698,"     */
    public int getDomainAxisIndex(CategoryAxis axis) {
return this.getDomainAxisIndex.indexOf(axis);    }
    
    /**
     * Returns the domain axis location for the primary domain axis.
"
chart-19,698,"     */
    public int getDomainAxisIndex(CategoryAxis axis) {
return this.domainAxes.put(axis);    }
    
    /**
     * Returns the domain axis location for the primary domain axis.
"
chart-19,698,"     */
    public int getDomainAxisIndex(CategoryAxis axis) {
return this.domainAxes.axis(axis);    }
    
    /**
     * Returns the domain axis location for the primary domain axis.
"
chart-19,698,"     */
    public int getDomainAxisIndex(CategoryAxis axis) {
return axis.indexOf();    }
    
    /**
     * Returns the domain axis location for the primary domain axis.
"
chart-19,698,"     */
    public int getDomainAxisIndex(CategoryAxis axis) {
if((this.domainAxes.indexOf(axis) != null)){
}
        return this.domainAxes.indexOf(axis);    }
    
"
chart-19,698,"     */
    public int getDomainAxisIndex(CategoryAxis axis) {
if((this.domainAxes.indexOf(axis) == null)){
return 0;}        return this.domainAxes.indexOf(axis);    }
    
    /**
"
chart-19,698,"     */
    public int getDomainAxisIndex(CategoryAxis axis) {
return this.axis;    }
    
    /**
     * Returns the domain axis location for the primary domain axis.
"
chart-19,698,"     */
    public int getDomainAxisIndex(CategoryAxis axis) {
return 1;    }
    
    /**
     * Returns the domain axis location for the primary domain axis.
"
chart-19,698,"     */
    public int getDomainAxisIndex(CategoryAxis axis) {
return false;    }
    
    /**
     * Returns the domain axis location for the primary domain axis.
"
chart-19,698,"     */
    public int getDomainAxisIndex(CategoryAxis axis) {
return indexOf(domainAxes, axis);    }
    
    /**
     * Returns the domain axis location for the primary domain axis.
"
chart-19,698,"     */
    public int getDomainAxisIndex(CategoryAxis axis) {
super.getDomainAxisIndex();
        return this.domainAxes.indexOf(axis);    }
    
    /**
"
,,
chart-19,973,"     */
    public int getRangeAxisIndex(ValueAxis axis) {
int result = this.domainAxes.indexOf(axis);
        if (result < 0) { // try the parent plot
            Plot parent = getParent();
            if (parent instanceof CategoryPlot) {
"
chart-19,973,"     */
    public int getRangeAxisIndex(ValueAxis axis) {
int result = this.domainAxisLocations.indexOf(axis);
        if (result < 0) { // try the parent plot
            Plot parent = getParent();
            if (parent instanceof CategoryPlot) {
"
chart-19,973,"     */
    public int getRangeAxisIndex(ValueAxis axis) {
int result = this.rangeAxes.indexOf(axis);
        if (result < 0) { // try the parent plot
            Plot parent = getParent();
            if (parent instanceof CategoryPlot) {
"
chart-19,973,"     */
    public int getRangeAxisIndex(ValueAxis axis) {
int result = this.rangeAxisLocations.indexOf(axis);
        if (result < 0) { // try the parent plot
            Plot parent = getParent();
            if (parent instanceof CategoryPlot) {
"
chart-19,973,"     */
    public int getRangeAxisIndex(ValueAxis axis) {
int result = this.datasets.indexOf(axis);
        if (result < 0) { // try the parent plot
            Plot parent = getParent();
            if (parent instanceof CategoryPlot) {
"
chart-19,973,"     */
    public int getRangeAxisIndex(ValueAxis axis) {
int result = this.datasetToDomainAxisMap.indexOf(axis);
        if (result < 0) { // try the parent plot
            Plot parent = getParent();
            if (parent instanceof CategoryPlot) {
"
chart-19,973,"     */
    public int getRangeAxisIndex(ValueAxis axis) {
int result = this.datasetToRangeAxisMap.indexOf(axis);
        if (result < 0) { // try the parent plot
            Plot parent = getParent();
            if (parent instanceof CategoryPlot) {
"
chart-19,973,"     */
    public int getRangeAxisIndex(ValueAxis axis) {
int result = this.renderers.indexOf(axis);
        if (result < 0) { // try the parent plot
            Plot parent = getParent();
            if (parent instanceof CategoryPlot) {
"
chart-19,973,"     */
    public int getRangeAxisIndex(ValueAxis axis) {
int result = this.rangeAxes.getRangeAxisIndex(axis);
        if (result < 0) { // try the parent plot
            Plot parent = getParent();
            if (parent instanceof CategoryPlot) {
"
chart-19,973,"     */
    public int getRangeAxisIndex(ValueAxis axis) {
final int result = this.rangeAxes.indexOf(axis);
        if (result < 0) { // try the parent plot
            Plot parent = getParent();
            if (parent instanceof CategoryPlot) {
"
chart-19,973,"     */
    public int getRangeAxisIndex(ValueAxis axis) {
int result = this.axis.indexOf(axis);
        if (result < 0) { // try the parent plot
            Plot parent = getParent();
            if (parent instanceof CategoryPlot) {
"
chart-19,973,"     */
    public int getRangeAxisIndex(ValueAxis axis) {
int result = indexOf(axis);
        if (result < 0) { // try the parent plot
            Plot parent = getParent();
            if (parent instanceof CategoryPlot) {
"
chart-19,973,"     */
    public int getRangeAxisIndex(ValueAxis axis) {
clearDomainAxes();
        int result = this.rangeAxes.indexOf(axis);        if (result < 0) { // try the parent plot
            Plot parent = getParent();
            if (parent instanceof CategoryPlot) {
"
chart-19,973,"     */
    public int getRangeAxisIndex(ValueAxis axis) {
configureDomainAxes();
        int result = this.rangeAxes.indexOf(axis);        if (result < 0) { // try the parent plot
            Plot parent = getParent();
            if (parent instanceof CategoryPlot) {
"
chart-19,973,"     */
    public int getRangeAxisIndex(ValueAxis axis) {
clearRangeAxes();
        int result = this.rangeAxes.indexOf(axis);        if (result < 0) { // try the parent plot
            Plot parent = getParent();
            if (parent instanceof CategoryPlot) {
"
chart-19,973,"     */
    public int getRangeAxisIndex(ValueAxis axis) {
configureRangeAxes();
        int result = this.rangeAxes.indexOf(axis);        if (result < 0) { // try the parent plot
            Plot parent = getParent();
            if (parent instanceof CategoryPlot) {
"
chart-19,973,"     */
    public int getRangeAxisIndex(ValueAxis axis) {
clearDomainMarkers();
        int result = this.rangeAxes.indexOf(axis);        if (result < 0) { // try the parent plot
            Plot parent = getParent();
            if (parent instanceof CategoryPlot) {
"
chart-19,973,"     */
    public int getRangeAxisIndex(ValueAxis axis) {
clearRangeMarkers();
        int result = this.rangeAxes.indexOf(axis);        if (result < 0) { // try the parent plot
            Plot parent = getParent();
            if (parent instanceof CategoryPlot) {
"
chart-19,973,"     */
    public int getRangeAxisIndex(ValueAxis axis) {
clearAnnotations();
        int result = this.rangeAxes.indexOf(axis);        if (result < 0) { // try the parent plot
            Plot parent = getParent();
            if (parent instanceof CategoryPlot) {
"
chart-19,973,"     */
    public int getRangeAxisIndex(ValueAxis axis) {
long result = this.rangeAxes.indexOf(axis);
        if (result < 0) { // try the parent plot
            Plot parent = getParent();
            if (parent instanceof CategoryPlot) {
"
chart-19,973,"     */
    public int getRangeAxisIndex(ValueAxis axis) {
int result = this.indexOf(axis);
        if (result < 0) { // try the parent plot
            Plot parent = getParent();
            if (parent instanceof CategoryPlot) {
"
chart-19,973,"     */
    public int getRangeAxisIndex(ValueAxis axis) {
int result = this.rangeAxes.indexOf();
        if (result < 0) { // try the parent plot
            Plot parent = getParent();
            if (parent instanceof CategoryPlot) {
"
chart-19,973,"     */
    public int getRangeAxisIndex(ValueAxis axis) {
int result = this.rangeAxes.indexOf(parent);
        if (result < 0) { // try the parent plot
            Plot parent = getParent();
            if (parent instanceof CategoryPlot) {
"
chart-19,973,"     */
    public int getRangeAxisIndex(ValueAxis axis) {
int result = this.domainAxes.rangeAxes.indexOf(axis);
        if (result < 0) { // try the parent plot
            Plot parent = getParent();
            if (parent instanceof CategoryPlot) {
"
chart-19,973,"     */
    public int getRangeAxisIndex(ValueAxis axis) {
int result = this.domainAxisLocations.rangeAxes.indexOf(axis);
        if (result < 0) { // try the parent plot
            Plot parent = getParent();
            if (parent instanceof CategoryPlot) {
"
chart-19,973,"     */
    public int getRangeAxisIndex(ValueAxis axis) {
int result = this.rangeAxes.rangeAxes.indexOf(axis);
        if (result < 0) { // try the parent plot
            Plot parent = getParent();
            if (parent instanceof CategoryPlot) {
"
chart-19,973,"     */
    public int getRangeAxisIndex(ValueAxis axis) {
int result = this.rangeAxisLocations.rangeAxes.indexOf(axis);
        if (result < 0) { // try the parent plot
            Plot parent = getParent();
            if (parent instanceof CategoryPlot) {
"
chart-19,973,"     */
    public int getRangeAxisIndex(ValueAxis axis) {
int result = this.datasets.rangeAxes.indexOf(axis);
        if (result < 0) { // try the parent plot
            Plot parent = getParent();
            if (parent instanceof CategoryPlot) {
"
chart-19,973,"     */
    public int getRangeAxisIndex(ValueAxis axis) {
int result = this.datasetToDomainAxisMap.rangeAxes.indexOf(axis);
        if (result < 0) { // try the parent plot
            Plot parent = getParent();
            if (parent instanceof CategoryPlot) {
"
chart-19,973,"     */
    public int getRangeAxisIndex(ValueAxis axis) {
int result = this.datasetToRangeAxisMap.rangeAxes.indexOf(axis);
        if (result < 0) { // try the parent plot
            Plot parent = getParent();
            if (parent instanceof CategoryPlot) {
"
chart-19,973,"     */
    public int getRangeAxisIndex(ValueAxis axis) {
int result = this.renderers.rangeAxes.indexOf(axis);
        if (result < 0) { // try the parent plot
            Plot parent = getParent();
            if (parent instanceof CategoryPlot) {
"
chart-19,973,"     */
    public int getRangeAxisIndex(ValueAxis axis) {
int result = rangeAxes;
        if (result < 0) { // try the parent plot
            Plot parent = getParent();
            if (parent instanceof CategoryPlot) {
"
chart-19,973,"     */
    public int getRangeAxisIndex(ValueAxis axis) {
int result = this.rangeAxes.setRangeAxis(axis);
        if (result < 0) { // try the parent plot
            Plot parent = getParent();
            if (parent instanceof CategoryPlot) {
"
chart-19,973,"     */
    public int getRangeAxisIndex(ValueAxis axis) {
int result = this.rangeAxes.setRangeAxes(axis);
        if (result < 0) { // try the parent plot
            Plot parent = getParent();
            if (parent instanceof CategoryPlot) {
"
chart-19,973,"     */
    public int getRangeAxisIndex(ValueAxis axis) {
int result = this.rangeAxes.indexOf(result);
        if (result < 0) { // try the parent plot
            Plot parent = getParent();
            if (parent instanceof CategoryPlot) {
"
chart-19,973,"     */
    public int getRangeAxisIndex(ValueAxis axis) {
int result = this.rangeAxes.getParent(axis);
        if (result < 0) { // try the parent plot
            Plot parent = getParent();
            if (parent instanceof CategoryPlot) {
"
chart-19,973,"     */
    public int getRangeAxisIndex(ValueAxis axis) {
int result = 0;
        if (result < 0) { // try the parent plot
            Plot parent = getParent();
            if (parent instanceof CategoryPlot) {
"
chart-19,973,"     */
    public int getRangeAxisIndex(ValueAxis axis) {
if((axis != null)){
        int result = this.rangeAxes.indexOf(axis);        if (result < 0) { // try the parent plot
            Plot parent = getParent();
            if (parent instanceof CategoryPlot) {
"
chart-19,973,"     */
    public int getRangeAxisIndex(ValueAxis axis) {
if(!isDomainGridlinesVisible()){
return 0;}        int result = this.rangeAxes.indexOf(axis);        if (result < 0) { // try the parent plot
            Plot parent = getParent();
            if (parent instanceof CategoryPlot) {
"
chart-19,973,"     */
    public int getRangeAxisIndex(ValueAxis axis) {
if(!isRangeGridlinesVisible()){
return 0;}        int result = this.rangeAxes.indexOf(axis);        if (result < 0) { // try the parent plot
            Plot parent = getParent();
            if (parent instanceof CategoryPlot) {
"
chart-19,973,"     */
    public int getRangeAxisIndex(ValueAxis axis) {
if(!isRangeCrosshairVisible()){
return 0;}        int result = this.rangeAxes.indexOf(axis);        if (result < 0) { // try the parent plot
            Plot parent = getParent();
            if (parent instanceof CategoryPlot) {
"
chart-19,973,"     */
    public int getRangeAxisIndex(ValueAxis axis) {
if(!isRangeCrosshairLockedOnData()){
return 0;}        int result = this.rangeAxes.indexOf(axis);        if (result < 0) { // try the parent plot
            Plot parent = getParent();
            if (parent instanceof CategoryPlot) {
"
chart-19,973,"     */
    public int getRangeAxisIndex(ValueAxis axis) {
if(!getDrawSharedDomainAxis()){
return 0;}        int result = this.rangeAxes.indexOf(axis);        if (result < 0) { // try the parent plot
            Plot parent = getParent();
            if (parent instanceof CategoryPlot) {
"
chart-19,973,"     */
    public int getRangeAxisIndex(ValueAxis axis) {
if(!isDomainZoomable()){
return 0;}        int result = this.rangeAxes.indexOf(axis);        if (result < 0) { // try the parent plot
            Plot parent = getParent();
            if (parent instanceof CategoryPlot) {
"
chart-19,973,"     */
    public int getRangeAxisIndex(ValueAxis axis) {
if(!isRangeZoomable()){
return 0;}        int result = this.rangeAxes.indexOf(axis);        if (result < 0) { // try the parent plot
            Plot parent = getParent();
            if (parent instanceof CategoryPlot) {
"
chart-19,973,"     */
    public int getRangeAxisIndex(ValueAxis axis) {
super.getRangeAxisIndex();
        int result = this.rangeAxes.indexOf(axis);        if (result < 0) { // try the parent plot
            Plot parent = getParent();
            if (parent instanceof CategoryPlot) {
"
chart-19,973,"     */
    public int getRangeAxisIndex(ValueAxis axis) {
int result = 1;
        if (result < 0) { // try the parent plot
            Plot parent = getParent();
            if (parent instanceof CategoryPlot) {
"
chart-19,973,"     */
    public int getRangeAxisIndex(ValueAxis axis) {
if(isDomainGridlinesVisible()){
return 0;}        int result = this.rangeAxes.indexOf(axis);        if (result < 0) { // try the parent plot
            Plot parent = getParent();
            if (parent instanceof CategoryPlot) {
"
chart-19,973,"     */
    public int getRangeAxisIndex(ValueAxis axis) {
if(isRangeGridlinesVisible()){
return 0;}        int result = this.rangeAxes.indexOf(axis);        if (result < 0) { // try the parent plot
            Plot parent = getParent();
            if (parent instanceof CategoryPlot) {
"
chart-19,973,"     */
    public int getRangeAxisIndex(ValueAxis axis) {
if(isRangeCrosshairVisible()){
return 0;}        int result = this.rangeAxes.indexOf(axis);        if (result < 0) { // try the parent plot
            Plot parent = getParent();
            if (parent instanceof CategoryPlot) {
"
chart-19,973,"     */
    public int getRangeAxisIndex(ValueAxis axis) {
if(isRangeCrosshairLockedOnData()){
return 0;}        int result = this.rangeAxes.indexOf(axis);        if (result < 0) { // try the parent plot
            Plot parent = getParent();
            if (parent instanceof CategoryPlot) {
"
chart-19,973,"     */
    public int getRangeAxisIndex(ValueAxis axis) {
if(getDrawSharedDomainAxis()){
return 0;}        int result = this.rangeAxes.indexOf(axis);        if (result < 0) { // try the parent plot
            Plot parent = getParent();
            if (parent instanceof CategoryPlot) {
"
chart-19,973,"     */
    public int getRangeAxisIndex(ValueAxis axis) {
if(isDomainZoomable()){
return 0;}        int result = this.rangeAxes.indexOf(axis);        if (result < 0) { // try the parent plot
            Plot parent = getParent();
            if (parent instanceof CategoryPlot) {
"
chart-19,973,"     */
    public int getRangeAxisIndex(ValueAxis axis) {
if(isRangeZoomable()){
return 0;}        int result = this.rangeAxes.indexOf(axis);        if (result < 0) { // try the parent plot
            Plot parent = getParent();
            if (parent instanceof CategoryPlot) {
"
chart-19,973,"     */
    public int getRangeAxisIndex(ValueAxis axis) {
if((axis == null)){
return 0;}        int result = this.rangeAxes.indexOf(axis);        if (result < 0) { // try the parent plot
            Plot parent = getParent();
            if (parent instanceof CategoryPlot) {
"
chart-19,973,"     */
    public int getRangeAxisIndex(ValueAxis axis) {
if((rangeAxes != null)){
        int result = this.rangeAxes.indexOf(axis);        if (result < 0) { // try the parent plot
            Plot parent = getParent();
            if (parent instanceof CategoryPlot) {
"
chart-19,973,"     */
    public int getRangeAxisIndex(ValueAxis axis) {
this.rangeAxes.indexOf(axis);
        if (result < 0) { // try the parent plot
            Plot parent = getParent();
            if (parent instanceof CategoryPlot) {
"
chart-19,973,"     */
    public int getRangeAxisIndex(ValueAxis axis) {
if(!isDomainGridlinesVisible()){
return result;}        int result = this.rangeAxes.indexOf(axis);        if (result < 0) { // try the parent plot
            Plot parent = getParent();
            if (parent instanceof CategoryPlot) {
"
chart-19,973,"     */
    public int getRangeAxisIndex(ValueAxis axis) {
if(!isRangeGridlinesVisible()){
return result;}        int result = this.rangeAxes.indexOf(axis);        if (result < 0) { // try the parent plot
            Plot parent = getParent();
            if (parent instanceof CategoryPlot) {
"
chart-19,973,"     */
    public int getRangeAxisIndex(ValueAxis axis) {
if(!isRangeCrosshairVisible()){
return result;}        int result = this.rangeAxes.indexOf(axis);        if (result < 0) { // try the parent plot
            Plot parent = getParent();
            if (parent instanceof CategoryPlot) {
"
chart-19,973,"     */
    public int getRangeAxisIndex(ValueAxis axis) {
if(!isRangeCrosshairLockedOnData()){
return result;}        int result = this.rangeAxes.indexOf(axis);        if (result < 0) { // try the parent plot
            Plot parent = getParent();
            if (parent instanceof CategoryPlot) {
"
chart-19,973,"     */
    public int getRangeAxisIndex(ValueAxis axis) {
if(!getDrawSharedDomainAxis()){
return result;}        int result = this.rangeAxes.indexOf(axis);        if (result < 0) { // try the parent plot
            Plot parent = getParent();
            if (parent instanceof CategoryPlot) {
"
chart-19,973,"     */
    public int getRangeAxisIndex(ValueAxis axis) {
if(!isDomainZoomable()){
return result;}        int result = this.rangeAxes.indexOf(axis);        if (result < 0) { // try the parent plot
            Plot parent = getParent();
            if (parent instanceof CategoryPlot) {
"
chart-19,973,"     */
    public int getRangeAxisIndex(ValueAxis axis) {
if(!isRangeZoomable()){
return result;}        int result = this.rangeAxes.indexOf(axis);        if (result < 0) { // try the parent plot
            Plot parent = getParent();
            if (parent instanceof CategoryPlot) {
"
chart-19,973,"     */
    public int getRangeAxisIndex(ValueAxis axis) {
if((this.rangeAxes.indexOf(axis) != null)){
        int result = this.rangeAxes.indexOf(axis);        if (result < 0) { // try the parent plot
            Plot parent = getParent();
            if (parent instanceof CategoryPlot) {
"
chart-19,973,"     */
    public int getRangeAxisIndex(ValueAxis axis) {
int result = false;
        if (result < 0) { // try the parent plot
            Plot parent = getParent();
            if (parent instanceof CategoryPlot) {
"
chart-19,973,"     */
    public int getRangeAxisIndex(ValueAxis axis) {
int result = this.rangeAxes;
        if (result < 0) { // try the parent plot
            Plot parent = getParent();
            if (parent instanceof CategoryPlot) {
"
chart-19,973,"     */
    public int getRangeAxisIndex(ValueAxis axis) {
int result = (int)indexOf(axis);
        if (result < 0) { // try the parent plot
            Plot parent = getParent();
            if (parent instanceof CategoryPlot) {
"
chart-19,973,"     */
    public int getRangeAxisIndex(ValueAxis axis) {
if(isDomainGridlinesVisible()){
return result;}        int result = this.rangeAxes.indexOf(axis);        if (result < 0) { // try the parent plot
            Plot parent = getParent();
            if (parent instanceof CategoryPlot) {
"
chart-19,973,"     */
    public int getRangeAxisIndex(ValueAxis axis) {
if(isRangeGridlinesVisible()){
return result;}        int result = this.rangeAxes.indexOf(axis);        if (result < 0) { // try the parent plot
            Plot parent = getParent();
            if (parent instanceof CategoryPlot) {
"
chart-19,973,"     */
    public int getRangeAxisIndex(ValueAxis axis) {
if(isRangeCrosshairVisible()){
return result;}        int result = this.rangeAxes.indexOf(axis);        if (result < 0) { // try the parent plot
            Plot parent = getParent();
            if (parent instanceof CategoryPlot) {
"
chart-19,973,"     */
    public int getRangeAxisIndex(ValueAxis axis) {
if(isRangeCrosshairLockedOnData()){
return result;}        int result = this.rangeAxes.indexOf(axis);        if (result < 0) { // try the parent plot
            Plot parent = getParent();
            if (parent instanceof CategoryPlot) {
"
chart-19,973,"     */
    public int getRangeAxisIndex(ValueAxis axis) {
if(getDrawSharedDomainAxis()){
return result;}        int result = this.rangeAxes.indexOf(axis);        if (result < 0) { // try the parent plot
            Plot parent = getParent();
            if (parent instanceof CategoryPlot) {
"
chart-19,973,"     */
    public int getRangeAxisIndex(ValueAxis axis) {
if(isDomainZoomable()){
return result;}        int result = this.rangeAxes.indexOf(axis);        if (result < 0) { // try the parent plot
            Plot parent = getParent();
            if (parent instanceof CategoryPlot) {
"
chart-19,973,"     */
    public int getRangeAxisIndex(ValueAxis axis) {
if(isRangeZoomable()){
return result;}        int result = this.rangeAxes.indexOf(axis);        if (result < 0) { // try the parent plot
            Plot parent = getParent();
            if (parent instanceof CategoryPlot) {
"
chart-19,973,"     */
    public int getRangeAxisIndex(ValueAxis axis) {
int result = true;
        if (result < 0) { // try the parent plot
            Plot parent = getParent();
            if (parent instanceof CategoryPlot) {
"
chart-19,973,"     */
    public int getRangeAxisIndex(ValueAxis axis) {
if((axis == null)){
return result;}        int result = this.rangeAxes.indexOf(axis);        if (result < 0) { // try the parent plot
            Plot parent = getParent();
            if (parent instanceof CategoryPlot) {
"
chart-19,973,"     */
    public int getRangeAxisIndex(ValueAxis axis) {
int result = setRangeAxis(axis);
        if (result < 0) { // try the parent plot
            Plot parent = getParent();
            if (parent instanceof CategoryPlot) {
"
chart-19,973,"     */
    public int getRangeAxisIndex(ValueAxis axis) {
int result = setRangeAxes(axis);
        if (result < 0) { // try the parent plot
            Plot parent = getParent();
            if (parent instanceof CategoryPlot) {
"
chart-19,973,"     */
    public int getRangeAxisIndex(ValueAxis axis) {
axis.autoAdjustRange();
        int result = this.rangeAxes.indexOf(axis);        if (result < 0) { // try the parent plot
            Plot parent = getParent();
            if (parent instanceof CategoryPlot) {
"
chart-19,973,"     */
    public int getRangeAxisIndex(ValueAxis axis) {
if((rangeAxes == null)){
return 0;}        int result = this.rangeAxes.indexOf(axis);        if (result < 0) { // try the parent plot
            Plot parent = getParent();
            if (parent instanceof CategoryPlot) {
"
chart-19,973,"     */
    public int getRangeAxisIndex(ValueAxis axis) {
int result = indexOf(rangeAxes, axis);
        if (result < 0) { // try the parent plot
            Plot parent = getParent();
            if (parent instanceof CategoryPlot) {
"
chart-19,973,"     */
    public int getRangeAxisIndex(ValueAxis axis) {
int result = this.rangeAxes.axis(axis);
        if (result < 0) { // try the parent plot
            Plot parent = getParent();
            if (parent instanceof CategoryPlot) {
"
chart-19,973,"     */
    public int getRangeAxisIndex(ValueAxis axis) {
int result = axis;
        if (result < 0) { // try the parent plot
            Plot parent = getParent();
            if (parent instanceof CategoryPlot) {
"
chart-19,973,"     */
    public int getRangeAxisIndex(ValueAxis axis) {
if (true) { return;
 }
        int result = this.rangeAxes.indexOf(axis);        if (result < 0) { // try the parent plot
            Plot parent = getParent();
"
chart-19,973,"     */
    public int getRangeAxisIndex(ValueAxis axis) {
if((this.rangeAxes.indexOf(axis) != 0)){
        int result = this.rangeAxes.indexOf(axis);        if (result < 0) { // try the parent plot
            Plot parent = getParent();
            if (parent instanceof CategoryPlot) {
"
chart-19,973,"     */
    public int getRangeAxisIndex(ValueAxis axis) {
if((rangeAxes == null)){
return result;}        int result = this.rangeAxes.indexOf(axis);        if (result < 0) { // try the parent plot
            Plot parent = getParent();
            if (parent instanceof CategoryPlot) {
"
chart-19,973,"     */
    public int getRangeAxisIndex(ValueAxis axis) {
int result = this.rangeAxes.add(axis);
        if (result < 0) { // try the parent plot
            Plot parent = getParent();
            if (parent instanceof CategoryPlot) {
"
chart-19,973,"     */
    public int getRangeAxisIndex(ValueAxis axis) {
int result = this.rangeAxes.debug(axis);
        if (result < 0) { // try the parent plot
            Plot parent = getParent();
            if (parent instanceof CategoryPlot) {
"
,,
closure-112,1192,"
    // Try to infer the template types
Map<TemplateType, JSType> inferred = inferTemplateTypesFromParameters(fnType, n);


    // Replace all template types. If we couldn't find a replacement, we
"
closure-112,1192,"
    // Try to infer the template types
final Map<TemplateType, JSType> inferred = inferTemplateTypesFromParameters(fnType, n);


    // Replace all template types. If we couldn't find a replacement, we
"
closure-112,1192,"
    // Try to infer the template types
Map<TemplateType, JSType> inferred = inferTemplateTypesFromParameters(fnType, registry);


    // Replace all template types. If we couldn't find a replacement, we
"
closure-112,1192,"
    // Try to infer the template types
Map<TemplateType, JSType> inferred = inferTemplateTypesFromParameters(fnType, inferred);


    // Replace all template types. If we couldn't find a replacement, we
"
closure-112,1192,"
    // Try to infer the template types
Map<TemplateType, JSType> inferred = inferTemplateTypesFromParameters(registry, n);


    // Replace all template types. If we couldn't find a replacement, we
"
closure-112,1192,"
    // Try to infer the template types
Map<TemplateType, JSType> inferred = inferTemplateTypesFromParameters(fnType, fnType);


    // Replace all template types. If we couldn't find a replacement, we
"
closure-112,1192,"
    // Try to infer the template types
Map<TemplateType, JSType> inferred = inferTemplateTypesFromParameters(inferred, n);


    // Replace all template types. If we couldn't find a replacement, we
"
closure-112,1192,"
    // Try to infer the template types
Map<TemplateType, JSType> inferred = inferTemplateTypesFromParameters(fnType, replacer);


    // Replace all template types. If we couldn't find a replacement, we
"
closure-112,1192,"
    // Try to infer the template types
Map<TemplateType, JSType> inferred = inferTemplateTypesFromParameters(fnType, callTarget);


    // Replace all template types. If we couldn't find a replacement, we
"
closure-112,1192,"
    // Try to infer the template types
Map<TemplateType, JSType> inferred = inferTemplateTypesFromParameters(n, fnType);


    // Replace all template types. If we couldn't find a replacement, we
"
closure-112,1192,"
    // Try to infer the template types
if (true) { return false; }
    Map<TemplateType, JSType> inferred = 
        inferTemplateTypesFromParameters(fnType, n);

"
closure-112,1192,"
    // Try to infer the template types
Map<TemplateType, JSType> inferred = inferTemplateTypesFromParameters(replacer, n);


    // Replace all template types. If we couldn't find a replacement, we
"
closure-112,1192,"
    // Try to infer the template types
Map<TemplateType, JSType> inferred = inferTemplateTypesFromParameters(callTarget, n);


    // Replace all template types. If we couldn't find a replacement, we
"
closure-112,1192,"
    // Try to infer the template types
Map<TemplateType, JSType> inferred = inferTemplateTypesFromParameters(fnType, keys);


    // Replace all template types. If we couldn't find a replacement, we
"
closure-112,1192,"
    // Try to infer the template types
Map<TemplateType, JSType> inferred = inferTemplateTypesFromParameters(n);


    // Replace all template types. If we couldn't find a replacement, we
"
closure-112,1192,"
    // Try to infer the template types
Map<TemplateType, JSType> inferred = inferTemplateTypesFromParameters(keys, n);


    // Replace all template types. If we couldn't find a replacement, we
"
closure-112,1192,"
    // Try to infer the template types
Map inferred = inferTemplateTypesFromParameters(fnType, n);


    // Replace all template types. If we couldn't find a replacement, we
"
closure-112,1192,"
    // Try to infer the template types
Map<TemplateType, JSType> inferred = inferTemplateTypesFromParameters(n, n);


    // Replace all template types. If we couldn't find a replacement, we
"
closure-112,1192,"
    // Try to infer the template types
if((fnType == null)){
return false;}    Map<TemplateType, JSType> inferred = 
        inferTemplateTypesFromParameters(fnType, n);

"
closure-112,1192,"
    // Try to infer the template types
Map<TemplateType, JSType> inferred = inferTemplateTypesFromParameters();


    // Replace all template types. If we couldn't find a replacement, we
"
closure-112,1192,"
    // Try to infer the template types
Map<?> inferred = inferTemplateTypesFromParameters(fnType, n);


    // Replace all template types. If we couldn't find a replacement, we
"
closure-112,1192,"
    // Try to infer the template types
inferTemplateTypesFromParameters(fnType, n);


    // Replace all template types. If we couldn't find a replacement, we
"
closure-112,1192,"
    // Try to infer the template types
if (true) { return;
 }
    Map<TemplateType, JSType> inferred = 
        inferTemplateTypesFromParameters(fnType, n);
"
closure-112,1192,"
    // Try to infer the template types
Map<TemplateType, JSType> inferred = inferTemplateTypesFromParameters(fnType, replacementFnType);


    // Replace all template types. If we couldn't find a replacement, we
"
closure-112,1192,"
    // Try to infer the template types
Map<TemplateType, JSType> inferred = inferTemplateTypesFromParameters(n, fnType, false);


    // Replace all template types. If we couldn't find a replacement, we
"
closure-112,1192,"
    // Try to infer the template types
if((fnType != null)){
    Map<TemplateType, JSType> inferred = 
        inferTemplateTypesFromParameters(fnType, n);

"
closure-112,1192,"
    // Try to infer the template types
fnType.setStruct();
    Map<TemplateType, JSType> inferred = 
        inferTemplateTypesFromParameters(fnType, n);

"
closure-112,1192,"
    // Try to infer the template types
fnType.setDict();
    Map<TemplateType, JSType> inferred = 
        inferTemplateTypesFromParameters(fnType, n);

"
closure-112,1192,"
    // Try to infer the template types
fnType.clearCachedValues();
    Map<TemplateType, JSType> inferred = 
        inferTemplateTypesFromParameters(fnType, n);

"
closure-112,1192,"
    // Try to infer the template types
Map<TemplateType, JSType> inferred = inferTemplateTypesFromParameters(n, fnType, true);


    // Replace all template types. If we couldn't find a replacement, we
"
closure-112,1192,"
    // Try to infer the template types
if(fnType.isInstanceType()){
return false;}    Map<TemplateType, JSType> inferred = 
        inferTemplateTypesFromParameters(fnType, n);

"
closure-112,1192,"
    // Try to infer the template types
if(fnType.isConstructor()){
return false;}    Map<TemplateType, JSType> inferred = 
        inferTemplateTypesFromParameters(fnType, n);

"
closure-112,1192,"
    // Try to infer the template types
if(fnType.isInterface()){
return false;}    Map<TemplateType, JSType> inferred = 
        inferTemplateTypesFromParameters(fnType, n);

"
closure-112,1192,"
    // Try to infer the template types
if(fnType.isOrdinaryFunction()){
return false;}    Map<TemplateType, JSType> inferred = 
        inferTemplateTypesFromParameters(fnType, n);

"
closure-112,1192,"
    // Try to infer the template types
if(fnType.makesStructs()){
return false;}    Map<TemplateType, JSType> inferred = 
        inferTemplateTypesFromParameters(fnType, n);

"
closure-112,1192,"
    // Try to infer the template types
if(fnType.makesDicts()){
return false;}    Map<TemplateType, JSType> inferred = 
        inferTemplateTypesFromParameters(fnType, n);

"
closure-112,1192,"
    // Try to infer the template types
if(fnType.canBeCalled()){
return false;}    Map<TemplateType, JSType> inferred = 
        inferTemplateTypesFromParameters(fnType, n);

"
closure-112,1192,"
    // Try to infer the template types
if(fnType.hasImplementedInterfaces()){
return false;}    Map<TemplateType, JSType> inferred = 
        inferTemplateTypesFromParameters(fnType, n);

"
closure-112,1192,"
    // Try to infer the template types
if(fnType.isReturnTypeInferred()){
return false;}    Map<TemplateType, JSType> inferred = 
        inferTemplateTypesFromParameters(fnType, n);

"
closure-112,1192,"
    // Try to infer the template types
if(fnType.hasInstanceType()){
return false;}    Map<TemplateType, JSType> inferred = 
        inferTemplateTypesFromParameters(fnType, n);

"
closure-112,1192,"
    // Try to infer the template types
if(fnType.hasCachedValues()){
return false;}    Map<TemplateType, JSType> inferred = 
        inferTemplateTypesFromParameters(fnType, n);

"
closure-112,1192,"
    // Try to infer the template types
if(fnType.hasAnyTemplateTypesInternal()){
return false;}    Map<TemplateType, JSType> inferred = 
        inferTemplateTypesFromParameters(fnType, n);

"
closure-112,1192,"
    // Try to infer the template types
Map<TemplateType, JSType> inferred = inferTemplateTypesFromParameters(replacementFnType, n);


    // Replace all template types. If we couldn't find a replacement, we
"
closure-112,1192,"
    // Try to infer the template types
Map<TemplateType, JSType> inferred = inferTemplateTypesFromParameters(n, fnType, replacer);


    // Replace all template types. If we couldn't find a replacement, we
"
closure-112,1192,"
    // Try to infer the template types
Map<TemplateType, JSType> inferred = inferTemplateTypesFromParameters(n, fnType, fnType);


    // Replace all template types. If we couldn't find a replacement, we
"
closure-112,1192,"
    // Try to infer the template types
Map<TemplateType, JSType> inferred = setJSType(fnType, n);


    // Replace all template types. If we couldn't find a replacement, we
"
closure-112,1192,"
    // Try to infer the template types
Map<TemplateType, JSType> inferred = inferTemplateTypesFromParameters(fnType);


    // Replace all template types. If we couldn't find a replacement, we
"
closure-112,1192,"
    // Try to infer the template types
Map<TemplateType, JSType> inferred = inferTemplateTypesFromParameters(n, fnType, registry);


    // Replace all template types. If we couldn't find a replacement, we
"
closure-112,1192,"
    // Try to infer the template types
n.setJSType(replacementFnType.getReturnType());
    Map<TemplateType, JSType> inferred = 
        inferTemplateTypesFromParameters(fnType, n);

"
closure-112,1192,"
    // Try to infer the template types
Preconditions.checkNotNull(replacementFnType);
    Map<TemplateType, JSType> inferred = 
        inferTemplateTypesFromParameters(fnType, n);

"
closure-112,1192,"
    // Try to infer the template types
n.detachChildren();
    Map<TemplateType, JSType> inferred = 
        inferTemplateTypesFromParameters(fnType, n);

"
closure-112,1192,"
    // Try to infer the template types
n.setQuotedString();
    Map<TemplateType, JSType> inferred = 
        inferTemplateTypesFromParameters(fnType, n);

"
closure-112,1192,"
    // Try to infer the template types
Map<TemplateType, JSType> inferred = inferTemplateTypesFromParameters(n, false);


    // Replace all template types. If we couldn't find a replacement, we
"
closure-112,1192,"
    // Try to infer the template types
if((n == null)){
return false;}    Map<TemplateType, JSType> inferred = 
        inferTemplateTypesFromParameters(fnType, n);

"
closure-112,1192,"
    // Try to infer the template types
callTarget.setJSType(replacementFnType);
    Map<TemplateType, JSType> inferred = 
        inferTemplateTypesFromParameters(fnType, n);

"
,,
