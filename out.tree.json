"CompilationUnit(imports=[Import(path=java.awt.AlphaComposite, static=False, wildcard=False), Import(path=java.awt.Composite, static=False, wildcard=False), Import(path=java.awt.Font, static=False, wildcard=False), Import(path=java.awt.GradientPaint, static=False, wildcard=False), Import(path=java.awt.Graphics2D, static=False, wildcard=False), Import(path=java.awt.Paint, static=False, wildcard=False), Import(path=java.awt.Rectangle, static=False, wildcard=False), Import(path=java.awt.Shape, static=False, wildcard=False), Import(path=java.awt.Stroke, static=False, wildcard=False), Import(path=java.awt.geom.Ellipse2D, static=False, wildcard=False), Import(path=java.awt.geom.Line2D, static=False, wildcard=False), Import(path=java.awt.geom.Point2D, static=False, wildcard=False), Import(path=java.awt.geom.Rectangle2D, static=False, wildcard=False), Import(path=java.io.Serializable, static=False, wildcard=False), Import(path=java.util.ArrayList, static=False, wildcard=False), Import(path=java.util.Iterator, static=False, wildcard=False), Import(path=java.util.List, static=False, wildcard=False), Import(path=org.jfree.chart.ChartRenderingInfo, static=False, wildcard=False), Import(path=org.jfree.chart.LegendItem, static=False, wildcard=False), Import(path=org.jfree.chart.LegendItemCollection, static=False, wildcard=False), Import(path=org.jfree.chart.RenderingSource, static=False, wildcard=False), Import(path=org.jfree.chart.annotations.CategoryAnnotation, static=False, wildcard=False), Import(path=org.jfree.chart.axis.CategoryAxis, static=False, wildcard=False), Import(path=org.jfree.chart.axis.ValueAxis, static=False, wildcard=False), Import(path=org.jfree.chart.entity.CategoryItemEntity, static=False, wildcard=False), Import(path=org.jfree.chart.entity.EntityCollection, static=False, wildcard=False), Import(path=org.jfree.chart.event.RendererChangeEvent, static=False, wildcard=False), Import(path=org.jfree.chart.labels.CategoryItemLabelGenerator, static=False, wildcard=False), Import(path=org.jfree.chart.labels.CategorySeriesLabelGenerator, static=False, wildcard=False), Import(path=org.jfree.chart.labels.CategoryToolTipGenerator, static=False, wildcard=False), Import(path=org.jfree.chart.labels.ItemLabelPosition, static=False, wildcard=False), Import(path=org.jfree.chart.labels.StandardCategorySeriesLabelGenerator, static=False, wildcard=False), Import(path=org.jfree.chart.plot.CategoryCrosshairState, static=False, wildcard=False), Import(path=org.jfree.chart.plot.CategoryMarker, static=False, wildcard=False), Import(path=org.jfree.chart.plot.CategoryPlot, static=False, wildcard=False), Import(path=org.jfree.chart.plot.DrawingSupplier, static=False, wildcard=False), Import(path=org.jfree.chart.plot.IntervalMarker, static=False, wildcard=False), Import(path=org.jfree.chart.plot.Marker, static=False, wildcard=False), Import(path=org.jfree.chart.plot.PlotOrientation, static=False, wildcard=False), Import(path=org.jfree.chart.plot.PlotRenderingInfo, static=False, wildcard=False), Import(path=org.jfree.chart.plot.ValueMarker, static=False, wildcard=False), Import(path=org.jfree.chart.renderer.AbstractRenderer, static=False, wildcard=False), Import(path=org.jfree.chart.text.TextUtilities, static=False, wildcard=False), Import(path=org.jfree.chart.urls.CategoryURLGenerator, static=False, wildcard=False), Import(path=org.jfree.chart.util.GradientPaintTransformer, static=False, wildcard=False), Import(path=org.jfree.chart.util.Layer, static=False, wildcard=False), Import(path=org.jfree.chart.util.LengthAdjustmentType, static=False, wildcard=False), Import(path=org.jfree.chart.util.ObjectList, static=False, wildcard=False), Import(path=org.jfree.chart.util.ObjectUtilities, static=False, wildcard=False), Import(path=org.jfree.chart.util.PublicCloneable, static=False, wildcard=False), Import(path=org.jfree.chart.util.RectangleAnchor, static=False, wildcard=False), Import(path=org.jfree.chart.util.RectangleEdge, static=False, wildcard=False), Import(path=org.jfree.chart.util.RectangleInsets, static=False, wildcard=False), Import(path=org.jfree.chart.util.SortOrder, static=False, wildcard=False), Import(path=org.jfree.data.Range, static=False, wildcard=False), Import(path=org.jfree.data.category.CategoryDataset, static=False, wildcard=False), Import(path=org.jfree.data.category.CategoryDatasetSelectionState, static=False, wildcard=False), Import(path=org.jfree.data.category.SelectableCategoryDataset, static=False, wildcard=False), Import(path=org.jfree.data.general.DatasetUtilities, static=False, wildcard=False)], package=PackageDeclaration(annotations=None, documentation=None, modifiers=None, name=org.jfree.chart.renderer.category), types=[ClassDeclaration(annotations=[], body=[FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1247553218442497391L), name=serialVersionUID)], documentation=/** For serialization. */, modifiers={'final', 'static', 'private'}, type=BasicType(dimensions=[], name=long)), FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=plot)], documentation=/** The plot that the renderer is assigned to. */, modifiers={'private'}, type=ReferenceType(arguments=None, dimensions=[], name=CategoryPlot, sub_type=None)), FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=itemLabelGeneratorList)], documentation=/** A list of item label generators (one per series). */, modifiers={'private'}, type=ReferenceType(arguments=None, dimensions=[], name=ObjectList, sub_type=None)), FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=baseItemLabelGenerator)], documentation=/** The base item label generator. */, modifiers={'private'}, type=ReferenceType(arguments=None, dimensions=[], name=CategoryItemLabelGenerator, sub_type=None)), FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=toolTipGeneratorList)], documentation=/** A list of tool tip generators (one per series). */, modifiers={'private'}, type=ReferenceType(arguments=None, dimensions=[], name=ObjectList, sub_type=None)), FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=baseToolTipGenerator)], documentation=/** The base tool tip generator. */, modifiers={'private'}, type=ReferenceType(arguments=None, dimensions=[], name=CategoryToolTipGenerator, sub_type=None)), FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=urlGeneratorList)], documentation=/** A list of label generators (one per series). */, modifiers={'private'}, type=ReferenceType(arguments=None, dimensions=[], name=ObjectList, sub_type=None)), FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=baseURLGenerator)], documentation=/** The base label generator. */, modifiers={'private'}, type=ReferenceType(arguments=None, dimensions=[], name=CategoryURLGenerator, sub_type=None)), FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=legendItemLabelGenerator)], documentation=/** The legend item label generator. */, modifiers={'private'}, type=ReferenceType(arguments=None, dimensions=[], name=CategorySeriesLabelGenerator, sub_type=None)), FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=legendItemToolTipGenerator)], documentation=/** The legend item tool tip generator. */, modifiers={'private'}, type=ReferenceType(arguments=None, dimensions=[], name=CategorySeriesLabelGenerator, sub_type=None)), FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=legendItemURLGenerator)], documentation=/** The legend item URL generator. */, modifiers={'private'}, type=ReferenceType(arguments=None, dimensions=[], name=CategorySeriesLabelGenerator, sub_type=None)), FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=backgroundAnnotations)], documentation=/**\n     * Annotations to be drawn in the background layer ('underneath' the data\n     * items).\n     *\n     * @since 1.2.0\n     */, modifiers={'private'}, type=ReferenceType(arguments=None, dimensions=[], name=List, sub_type=None)), FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=foregroundAnnotations)], documentation=/**\n     * Annotations to be drawn in the foreground layer ('on top' of the data\n     * items).\n     *\n     * @since 1.2.0\n     */, modifiers={'private'}, type=ReferenceType(arguments=None, dimensions=[], name=List, sub_type=None)), FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=rowCount)], documentation=/** The number of rows in the dataset (temporary record). */, modifiers={'transient', 'private'}, type=BasicType(dimensions=[], name=int)), FieldDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=columnCount)], documentation=/** The number of columns in the dataset (temporary record). */, modifiers={'transient', 'private'}, type=BasicType(dimensions=[], name=int)), ConstructorDeclaration(annotations=[], body=[StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=itemLabelGeneratorList, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=ClassCreator(arguments=[], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=ObjectList, sub_type=None))), label=None), StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=toolTipGeneratorList, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=ClassCreator(arguments=[], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=ObjectList, sub_type=None))), label=None), StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=urlGeneratorList, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=ClassCreator(arguments=[], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=ObjectList, sub_type=None))), label=None), StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=legendItemLabelGenerator, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=ClassCreator(arguments=[], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=StandardCategorySeriesLabelGenerator, sub_type=None))), label=None), StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=backgroundAnnotations, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=ClassCreator(arguments=[], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=ArrayList, sub_type=None))), label=None), StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=foregroundAnnotations, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=ClassCreator(arguments=[], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=ArrayList, sub_type=None))), label=None)], documentation=/**\n     * Creates a new renderer with no tool tip generator and no URL generator.\n     * The defaults (no tool tip or URL generators) have been chosen to\n     * minimise the processing required to generate a default chart.  If you\n     * require tool tips or URLs, then you can easily add the required\n     * generators.\n     */, modifiers={'protected'}, name=AbstractCategoryItemRenderer, parameters=[], throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[ReturnStatement(expression=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), label=None)], documentation=/**\n     * Returns the number of passes through the dataset required by the\n     * renderer.  This method returns <code>1</code>, subclasses should\n     * override if they need more passes.\n     *\n     * @return The pass count.\n     */, modifiers={'public'}, name=getPassCount, parameters=[], return_type=BasicType(dimensions=[], name=int), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[ReturnStatement(expression=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=plot, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), label=None)], documentation=/**\n     * Returns the plot that the renderer has been assigned to (where\n     * <code>null</code> indicates that the renderer is not currently assigned\n     * to a plot).\n     *\n     * @return The plot (possibly <code>null</code>).\n     *\n     * @see #setPlot(CategoryPlot)\n     */, modifiers={'public'}, name=getPlot, parameters=[], return_type=ReferenceType(arguments=None, dimensions=[], name=CategoryPlot, sub_type=None), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[IfStatement(condition=BinaryOperation(operandl=MemberReference(member=plot, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator===), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[ThrowStatement(expression=ClassCreator(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"Null 'plot' argument.\")], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=IllegalArgumentException, sub_type=None)), label=None)])), StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=plot, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MemberReference(member=plot, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)], documentation=/**\n     * Sets the plot that the renderer has been assigned to.  This method is\n     * usually called by the {@link CategoryPlot}, in normal usage you\n     * shouldn't need to call this method directly.\n     *\n     * @param plot  the plot (<code>null</code> not permitted).\n     *\n     * @see #getPlot()\n     */, modifiers={'public'}, name=setPlot, parameters=[FormalParameter(annotations=[], modifiers=set(), name=plot, type=ReferenceType(arguments=None, dimensions=[], name=CategoryPlot, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Cast(expression=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=itemLabelGeneratorList, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None), MethodInvocation(arguments=[MemberReference(member=row, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=get, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None, type_arguments=None)]), type=ReferenceType(arguments=None, dimensions=[], name=CategoryItemLabelGenerator, sub_type=None)), name=generator)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=CategoryItemLabelGenerator, sub_type=None)), IfStatement(condition=BinaryOperation(operandl=MemberReference(member=generator, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator===), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=generator, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=baseItemLabelGenerator, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)])), label=None)])), ReturnStatement(expression=MemberReference(member=generator, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)], documentation=/**\n     * Returns the item label generator for a data item.  This implementation\n     * returns the series item label generator if one is defined, otherwise\n     * it returns the default item label generator (which may be\n     * <code>null</code>).\n     *\n     * @param row  the row index (zero based).\n     * @param column  the column index (zero based).\n     * @param selected  is the item selected?\n     *\n     * @return The generator (possibly <code>null</code>).\n     *\n     * @since 1.2.0\n     */, modifiers={'public'}, name=getItemLabelGenerator, parameters=[FormalParameter(annotations=[], modifiers=set(), name=row, type=BasicType(dimensions=[], name=int), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=column, type=BasicType(dimensions=[], name=int), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=selected, type=BasicType(dimensions=[], name=boolean), varargs=False)], return_type=ReferenceType(arguments=None, dimensions=[], name=CategoryItemLabelGenerator, sub_type=None), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[ReturnStatement(expression=Cast(expression=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=itemLabelGeneratorList, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None), MethodInvocation(arguments=[MemberReference(member=series, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=get, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None, type_arguments=None)]), type=ReferenceType(arguments=None, dimensions=[], name=CategoryItemLabelGenerator, sub_type=None)), label=None)], documentation=/**\n     * Returns the item label generator for a series.\n     *\n     * @param series  the series index (zero based).\n     *\n     * @return The generator (possibly <code>null</code>).\n     *\n     * @see #setSeriesItemLabelGenerator(int, CategoryItemLabelGenerator)\n     */, modifiers={'public'}, name=getSeriesItemLabelGenerator, parameters=[FormalParameter(annotations=[], modifiers=set(), name=series, type=BasicType(dimensions=[], name=int), varargs=False)], return_type=ReferenceType(arguments=None, dimensions=[], name=CategoryItemLabelGenerator, sub_type=None), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=series, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=generator, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=true)], member=setSeriesItemLabelGenerator, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), label=None)], documentation=/**\n     * Sets the item label generator for a series and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param series  the series index (zero based).\n     * @param generator  the generator (<code>null</code> permitted).\n     *\n     * @see #getSeriesItemLabelGenerator(int)\n     */, modifiers={'public'}, name=setSeriesItemLabelGenerator, parameters=[FormalParameter(annotations=[], modifiers=set(), name=series, type=BasicType(dimensions=[], name=int), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=generator, type=ReferenceType(arguments=None, dimensions=[], name=CategoryItemLabelGenerator, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[StatementExpression(expression=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=itemLabelGeneratorList, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None), MethodInvocation(arguments=[MemberReference(member=series, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=generator, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=set, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None, type_arguments=None)]), label=None), IfStatement(condition=MemberReference(member=notify, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[ClassCreator(arguments=[This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[])], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=RendererChangeEvent, sub_type=None))], member=notifyListeners, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), label=None)]))], documentation=/**\n     * Sets the item label generator for a series and, if requested, sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param series  the series index (zero based).\n     * @param generator  the generator (<code>null</code> permitted).\n     * @param notify  notify listeners?\n     *\n     * @since 1.2.0\n     *\n     * @see #getSeriesItemLabelGenerator(int)\n     */, modifiers={'public'}, name=setSeriesItemLabelGenerator, parameters=[FormalParameter(annotations=[], modifiers=set(), name=series, type=BasicType(dimensions=[], name=int), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=generator, type=ReferenceType(arguments=None, dimensions=[], name=CategoryItemLabelGenerator, sub_type=None), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=notify, type=BasicType(dimensions=[], name=boolean), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[ReturnStatement(expression=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=baseItemLabelGenerator, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), label=None)], documentation=/**\n     * Returns the base item label generator.\n     *\n     * @return The generator (possibly <code>null</code>).\n     *\n     * @see #setBaseItemLabelGenerator(CategoryItemLabelGenerator)\n     */, modifiers={'public'}, name=getBaseItemLabelGenerator, parameters=[], return_type=ReferenceType(arguments=None, dimensions=[], name=CategoryItemLabelGenerator, sub_type=None), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=generator, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=true)], member=setBaseItemLabelGenerator, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), label=None)], documentation=/**\n     * Sets the base item label generator and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param generator  the generator (<code>null</code> permitted).\n     *\n     * @see #getBaseItemLabelGenerator()\n     */, modifiers={'public'}, name=setBaseItemLabelGenerator, parameters=[FormalParameter(annotations=[], modifiers=set(), name=generator, type=ReferenceType(arguments=None, dimensions=[], name=CategoryItemLabelGenerator, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=baseItemLabelGenerator, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MemberReference(member=generator, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None), IfStatement(condition=MemberReference(member=notify, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[ClassCreator(arguments=[This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[])], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=RendererChangeEvent, sub_type=None))], member=notifyListeners, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), label=None)]))], documentation=/**\n     * Sets the base item label generator and, if requested, sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param generator  the generator (<code>null</code> permitted).\n     * @param notify  notify listeners?\n     *\n     * @since 1.2.0\n     *\n     * @see #getBaseItemLabelGenerator()\n     */, modifiers={'public'}, name=setBaseItemLabelGenerator, parameters=[FormalParameter(annotations=[], modifiers=set(), name=generator, type=ReferenceType(arguments=None, dimensions=[], name=CategoryItemLabelGenerator, sub_type=None), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=notify, type=BasicType(dimensions=[], name=boolean), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), name=result)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=CategoryToolTipGenerator, sub_type=None)), StatementExpression(expression=Assignment(expressionl=MemberReference(member=result, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=MethodInvocation(arguments=[MemberReference(member=row, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=getSeriesToolTipGenerator, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None)), label=None), IfStatement(condition=BinaryOperation(operandl=MemberReference(member=result, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator===), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=result, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=baseToolTipGenerator, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)])), label=None)])), ReturnStatement(expression=MemberReference(member=result, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)], documentation=/**\n     * Returns the tool tip generator that should be used for the specified\n     * item.  You can override this method if you want to return a different\n     * generator per item.\n     *\n     * @param row  the row index (zero-based).\n     * @param column  the column index (zero-based).\n     * @param selected  is the item selected?\n     *\n     * @return The generator (possibly <code>null</code>).\n     *\n     * @since 1.2.0\n     */, modifiers={'public'}, name=getToolTipGenerator, parameters=[FormalParameter(annotations=[], modifiers=set(), name=row, type=BasicType(dimensions=[], name=int), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=column, type=BasicType(dimensions=[], name=int), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=selected, type=BasicType(dimensions=[], name=boolean), varargs=False)], return_type=ReferenceType(arguments=None, dimensions=[], name=CategoryToolTipGenerator, sub_type=None), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[ReturnStatement(expression=Cast(expression=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=toolTipGeneratorList, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None), MethodInvocation(arguments=[MemberReference(member=series, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=get, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None, type_arguments=None)]), type=ReferenceType(arguments=None, dimensions=[], name=CategoryToolTipGenerator, sub_type=None)), label=None)], documentation=/**\n     * Returns the tool tip generator for the specified series (a \"layer 1\"\n     * generator).\n     *\n     * @param series  the series index (zero-based).\n     *\n     * @return The tool tip generator (possibly <code>null</code>).\n     *\n     * @see #setSeriesToolTipGenerator(int, CategoryToolTipGenerator)\n     */, modifiers={'public'}, name=getSeriesToolTipGenerator, parameters=[FormalParameter(annotations=[], modifiers=set(), name=series, type=BasicType(dimensions=[], name=int), varargs=False)], return_type=ReferenceType(arguments=None, dimensions=[], name=CategoryToolTipGenerator, sub_type=None), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=series, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=generator, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=true)], member=setSeriesToolTipGenerator, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), label=None)], documentation=/**\n     * Sets the tool tip generator for a series and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param series  the series index (zero-based).\n     * @param generator  the generator (<code>null</code> permitted).\n     *\n     * @see #getSeriesToolTipGenerator(int)\n     */, modifiers={'public'}, name=setSeriesToolTipGenerator, parameters=[FormalParameter(annotations=[], modifiers=set(), name=series, type=BasicType(dimensions=[], name=int), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=generator, type=ReferenceType(arguments=None, dimensions=[], name=CategoryToolTipGenerator, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[StatementExpression(expression=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=toolTipGeneratorList, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None), MethodInvocation(arguments=[MemberReference(member=series, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=generator, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=set, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None, type_arguments=None)]), label=None), IfStatement(condition=MemberReference(member=notify, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[ClassCreator(arguments=[This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[])], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=RendererChangeEvent, sub_type=None))], member=notifyListeners, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), label=None)]))], documentation=/**\n     * Sets the tool tip generator for a series and sends a\n     * {@link org.jfree.chart.event.RendererChangeEvent} to all registered\n     * listeners.\n     *\n     * @param series  the series index (zero-based).\n     * @param generator  the generator (<code>null</code> permitted).\n     * @param notify  notify listeners?\n     *\n     * @since 1.2.0\n     *\n     * @see #getSeriesToolTipGenerator(int)\n     */, modifiers={'public'}, name=setSeriesToolTipGenerator, parameters=[FormalParameter(annotations=[], modifiers=set(), name=series, type=BasicType(dimensions=[], name=int), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=generator, type=ReferenceType(arguments=None, dimensions=[], name=CategoryToolTipGenerator, sub_type=None), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=notify, type=BasicType(dimensions=[], name=boolean), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[ReturnStatement(expression=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=baseToolTipGenerator, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), label=None)], documentation=/**\n     * Returns the base tool tip generator (the \"layer 2\" generator).\n     *\n     * @return The tool tip generator (possibly <code>null</code>).\n     *\n     * @see #setBaseToolTipGenerator(CategoryToolTipGenerator)\n     */, modifiers={'public'}, name=getBaseToolTipGenerator, parameters=[], return_type=ReferenceType(arguments=None, dimensions=[], name=CategoryToolTipGenerator, sub_type=None), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=generator, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=true)], member=setBaseToolTipGenerator, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), label=None)], documentation=/**\n     * Sets the base tool tip generator and sends a {@link RendererChangeEvent}\n     * to all registered listeners.\n     *\n     * @param generator  the generator (<code>null</code> permitted).\n     *\n     * @see #getBaseToolTipGenerator()\n     */, modifiers={'public'}, name=setBaseToolTipGenerator, parameters=[FormalParameter(annotations=[], modifiers=set(), name=generator, type=ReferenceType(arguments=None, dimensions=[], name=CategoryToolTipGenerator, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=baseToolTipGenerator, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MemberReference(member=generator, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None), IfStatement(condition=MemberReference(member=notify, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[ClassCreator(arguments=[This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[])], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=RendererChangeEvent, sub_type=None))], member=notifyListeners, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), label=None)]))], documentation=/**\n     * Sets the base tool tip generator and sends a {@link RendererChangeEvent}\n     * to all registered listeners.\n     *\n     * @param generator  the generator (<code>null</code> permitted).\n     * @param notify  notify listeners?\n     *\n     * @since 1.2.0\n     *\n     * @see #getBaseToolTipGenerator()\n     */, modifiers={'public'}, name=setBaseToolTipGenerator, parameters=[FormalParameter(annotations=[], modifiers=set(), name=generator, type=ReferenceType(arguments=None, dimensions=[], name=CategoryToolTipGenerator, sub_type=None), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=notify, type=BasicType(dimensions=[], name=boolean), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Cast(expression=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=urlGeneratorList, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None), MethodInvocation(arguments=[MemberReference(member=row, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=get, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None, type_arguments=None)]), type=ReferenceType(arguments=None, dimensions=[], name=CategoryURLGenerator, sub_type=None)), name=generator)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=CategoryURLGenerator, sub_type=None)), IfStatement(condition=BinaryOperation(operandl=MemberReference(member=generator, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator===), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=generator, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=baseURLGenerator, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)])), label=None)])), ReturnStatement(expression=MemberReference(member=generator, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)], documentation=/**\n     * Returns the URL generator for a data item.\n     *\n     * @param row  the row index (zero based).\n     * @param column  the column index (zero based).\n     * @param selected  is the item selected?\n     *\n     * @return The URL generator.\n     *\n     * @since 1.2.0\n     */, modifiers={'public'}, name=getURLGenerator, parameters=[FormalParameter(annotations=[], modifiers=set(), name=row, type=BasicType(dimensions=[], name=int), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=column, type=BasicType(dimensions=[], name=int), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=selected, type=BasicType(dimensions=[], name=boolean), varargs=False)], return_type=ReferenceType(arguments=None, dimensions=[], name=CategoryURLGenerator, sub_type=None), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[ReturnStatement(expression=Cast(expression=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=urlGeneratorList, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None), MethodInvocation(arguments=[MemberReference(member=series, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=get, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None, type_arguments=None)]), type=ReferenceType(arguments=None, dimensions=[], name=CategoryURLGenerator, sub_type=None)), label=None)], documentation=/**\n     * Returns the URL generator for a series.\n     *\n     * @param series  the series index (zero based).\n     *\n     * @return The URL generator for the series.\n     *\n     * @see #setSeriesURLGenerator(int, CategoryURLGenerator)\n     */, modifiers={'public'}, name=getSeriesURLGenerator, parameters=[FormalParameter(annotations=[], modifiers=set(), name=series, type=BasicType(dimensions=[], name=int), varargs=False)], return_type=ReferenceType(arguments=None, dimensions=[], name=CategoryURLGenerator, sub_type=None), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=series, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=generator, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=true)], member=setSeriesURLGenerator, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), label=None)], documentation=/**\n     * Sets the URL generator for a series and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param series  the series index (zero based).\n     * @param generator  the generator.\n     *\n     * @see #getSeriesURLGenerator(int)\n     */, modifiers={'public'}, name=setSeriesURLGenerator, parameters=[FormalParameter(annotations=[], modifiers=set(), name=series, type=BasicType(dimensions=[], name=int), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=generator, type=ReferenceType(arguments=None, dimensions=[], name=CategoryURLGenerator, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[StatementExpression(expression=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=urlGeneratorList, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None), MethodInvocation(arguments=[MemberReference(member=series, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=generator, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=set, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None, type_arguments=None)]), label=None), IfStatement(condition=MemberReference(member=notify, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[ClassCreator(arguments=[This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[])], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=RendererChangeEvent, sub_type=None))], member=notifyListeners, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), label=None)]))], documentation=/**\n     * Sets the URL generator for a series and, if requested, sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param series  the series index (zero based).\n     * @param generator  the generator (<code>null</code> permitted).\n     * @param notify  notify listeners?\n     *\n     * @since 1.2.0\n     *\n     * @see #getSeriesURLGenerator(int)\n     */, modifiers={'public'}, name=setSeriesURLGenerator, parameters=[FormalParameter(annotations=[], modifiers=set(), name=series, type=BasicType(dimensions=[], name=int), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=generator, type=ReferenceType(arguments=None, dimensions=[], name=CategoryURLGenerator, sub_type=None), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=notify, type=BasicType(dimensions=[], name=boolean), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[ReturnStatement(expression=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=baseURLGenerator, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), label=None)], documentation=/**\n     * Returns the base item URL generator.\n     *\n     * @return The item URL generator.\n     *\n     * @see #setBaseURLGenerator(CategoryURLGenerator)\n     */, modifiers={'public'}, name=getBaseURLGenerator, parameters=[], return_type=ReferenceType(arguments=None, dimensions=[], name=CategoryURLGenerator, sub_type=None), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=generator, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=true)], member=setBaseURLGenerator, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), label=None)], documentation=/**\n     * Sets the base item URL generator.\n     *\n     * @param generator  the item URL generator.\n     *\n     * @see #getBaseURLGenerator()\n     */, modifiers={'public'}, name=setBaseURLGenerator, parameters=[FormalParameter(annotations=[], modifiers=set(), name=generator, type=ReferenceType(arguments=None, dimensions=[], name=CategoryURLGenerator, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=baseURLGenerator, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MemberReference(member=generator, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None), IfStatement(condition=MemberReference(member=notify, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[ClassCreator(arguments=[This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[])], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=RendererChangeEvent, sub_type=None))], member=notifyListeners, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), label=None)]))], documentation=/**\n     * Sets the base item URL generator.\n     *\n     * @param generator  the item URL generator (<code>null</code> permitted).\n     * @param notify  notify listeners?\n     *\n     * @see #getBaseURLGenerator()\n     *\n     * @since 1.2.0\n     */, modifiers={'public'}, name=setBaseURLGenerator, parameters=[FormalParameter(annotations=[], modifiers=set(), name=generator, type=ReferenceType(arguments=None, dimensions=[], name=CategoryURLGenerator, sub_type=None), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=notify, type=BasicType(dimensions=[], name=boolean), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=annotation, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=FOREGROUND, postfix_operators=[], prefix_operators=[], qualifier=Layer, selectors=[])], member=addAnnotation, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), label=None)], documentation=/**\n     * Adds an annotation and sends a {@link RendererChangeEvent} to all\n     * registered listeners.  The annotation is added to the foreground\n     * layer.\n     *\n     * @param annotation  the annotation (<code>null</code> not permitted).\n     *\n     * @since 1.2.0\n     */, modifiers={'public'}, name=addAnnotation, parameters=[FormalParameter(annotations=[], modifiers=set(), name=annotation, type=ReferenceType(arguments=None, dimensions=[], name=CategoryAnnotation, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[IfStatement(condition=BinaryOperation(operandl=MemberReference(member=annotation, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator===), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[ThrowStatement(expression=ClassCreator(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"Null 'annotation' argument.\")], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=IllegalArgumentException, sub_type=None)), label=None)])), IfStatement(condition=MethodInvocation(arguments=[MemberReference(member=FOREGROUND, postfix_operators=[], prefix_operators=[], qualifier=Layer, selectors=[])], member=equals, postfix_operators=[], prefix_operators=[], qualifier=layer, selectors=[], type_arguments=None), else_statement=IfStatement(condition=MethodInvocation(arguments=[MemberReference(member=BACKGROUND, postfix_operators=[], prefix_operators=[], qualifier=Layer, selectors=[])], member=equals, postfix_operators=[], prefix_operators=[], qualifier=layer, selectors=[], type_arguments=None), else_statement=BlockStatement(label=None, statements=[ThrowStatement(expression=ClassCreator(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"Unknown layer.\")], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=RuntimeException, sub_type=None)), label=None)]), label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=backgroundAnnotations, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None), MethodInvocation(arguments=[MemberReference(member=annotation, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=add, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None, type_arguments=None)]), label=None), StatementExpression(expression=MethodInvocation(arguments=[ClassCreator(arguments=[This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[])], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=RendererChangeEvent, sub_type=None))], member=notifyListeners, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), label=None)])), label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=foregroundAnnotations, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None), MethodInvocation(arguments=[MemberReference(member=annotation, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=add, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None, type_arguments=None)]), label=None), StatementExpression(expression=MethodInvocation(arguments=[ClassCreator(arguments=[This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[])], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=RendererChangeEvent, sub_type=None))], member=notifyListeners, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), label=None)]))], documentation=/**\n     * Adds an annotation to the specified layer.\n     *\n     * @param annotation  the annotation (<code>null</code> not permitted).\n     * @param layer  the layer (<code>null</code> not permitted).\n     *\n     * @since 1.2.0\n     */, modifiers={'public'}, name=addAnnotation, parameters=[FormalParameter(annotations=[], modifiers=set(), name=annotation, type=ReferenceType(arguments=None, dimensions=[], name=CategoryAnnotation, sub_type=None), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=layer, type=ReferenceType(arguments=None, dimensions=[], name=Layer, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=foregroundAnnotations, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None), MethodInvocation(arguments=[MemberReference(member=annotation, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=remove, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None, type_arguments=None)]), name=removed)], modifiers=set(), type=BasicType(dimensions=[], name=boolean)), StatementExpression(expression=Assignment(expressionl=MemberReference(member=removed, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=BinaryOperation(operandl=MemberReference(member=removed, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=backgroundAnnotations, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None), MethodInvocation(arguments=[MemberReference(member=annotation, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=remove, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None, type_arguments=None)]), operator=&)), label=None), StatementExpression(expression=MethodInvocation(arguments=[ClassCreator(arguments=[This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[])], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=RendererChangeEvent, sub_type=None))], member=notifyListeners, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), label=None), ReturnStatement(expression=MemberReference(member=removed, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)], documentation=/**\n     * Removes the specified annotation and sends a {@link RendererChangeEvent}\n     * to all registered listeners.\n     *\n     * @param annotation  the annotation to remove (<code>null</code> not\n     *                    permitted).\n     *\n     * @return A boolean to indicate whether or not the annotation was\n     *         successfully removed.\n     *\n     * @since 1.2.0\n     */, modifiers={'public'}, name=removeAnnotation, parameters=[FormalParameter(annotations=[], modifiers=set(), name=annotation, type=ReferenceType(arguments=None, dimensions=[], name=CategoryAnnotation, sub_type=None), varargs=False)], return_type=BasicType(dimensions=[], name=boolean), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[StatementExpression(expression=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=foregroundAnnotations, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None), MethodInvocation(arguments=[], member=clear, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None, type_arguments=None)]), label=None), StatementExpression(expression=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=backgroundAnnotations, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None), MethodInvocation(arguments=[], member=clear, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None, type_arguments=None)]), label=None), StatementExpression(expression=MethodInvocation(arguments=[ClassCreator(arguments=[This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[])], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=RendererChangeEvent, sub_type=None))], member=notifyListeners, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), label=None)], documentation=/**\n     * Removes all annotations and sends a {@link RendererChangeEvent}\n     * to all registered listeners.\n     *\n     * @since 1.2.0\n     */, modifiers={'public'}, name=removeAnnotations, parameters=[], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[ReturnStatement(expression=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=legendItemLabelGenerator, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), label=None)], documentation=/**\n     * Returns the legend item label generator.\n     *\n     * @return The label generator (never <code>null</code>).\n     *\n     * @see #setLegendItemLabelGenerator(CategorySeriesLabelGenerator)\n     */, modifiers={'public'}, name=getLegendItemLabelGenerator, parameters=[], return_type=ReferenceType(arguments=None, dimensions=[], name=CategorySeriesLabelGenerator, sub_type=None), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[IfStatement(condition=BinaryOperation(operandl=MemberReference(member=generator, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator===), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[ThrowStatement(expression=ClassCreator(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"Null 'generator' argument.\")], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=IllegalArgumentException, sub_type=None)), label=None)])), StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=legendItemLabelGenerator, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MemberReference(member=generator, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None), StatementExpression(expression=MethodInvocation(arguments=[], member=fireChangeEvent, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), label=None)], documentation=/**\n     * Sets the legend item label generator and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param generator  the generator (<code>null</code> not permitted).\n     *\n     * @see #getLegendItemLabelGenerator()\n     */, modifiers={'public'}, name=setLegendItemLabelGenerator, parameters=[FormalParameter(annotations=[], modifiers=set(), name=generator, type=ReferenceType(arguments=None, dimensions=[], name=CategorySeriesLabelGenerator, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[ReturnStatement(expression=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=legendItemToolTipGenerator, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), label=None)], documentation=/**\n     * Returns the legend item tool tip generator.\n     *\n     * @return The tool tip generator (possibly <code>null</code>).\n     *\n     * @see #setLegendItemToolTipGenerator(CategorySeriesLabelGenerator)\n     */, modifiers={'public'}, name=getLegendItemToolTipGenerator, parameters=[], return_type=ReferenceType(arguments=None, dimensions=[], name=CategorySeriesLabelGenerator, sub_type=None), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=legendItemToolTipGenerator, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MemberReference(member=generator, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None), StatementExpression(expression=MethodInvocation(arguments=[], member=fireChangeEvent, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), label=None)], documentation=/**\n     * Sets the legend item tool tip generator and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param generator  the generator (<code>null</code> permitted).\n     *\n     * @see #setLegendItemToolTipGenerator(CategorySeriesLabelGenerator)\n     */, modifiers={'public'}, name=setLegendItemToolTipGenerator, parameters=[FormalParameter(annotations=[], modifiers=set(), name=generator, type=ReferenceType(arguments=None, dimensions=[], name=CategorySeriesLabelGenerator, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[ReturnStatement(expression=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=legendItemURLGenerator, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), label=None)], documentation=/**\n     * Returns the legend item URL generator.\n     *\n     * @return The URL generator (possibly <code>null</code>).\n     *\n     * @see #setLegendItemURLGenerator(CategorySeriesLabelGenerator)\n     */, modifiers={'public'}, name=getLegendItemURLGenerator, parameters=[], return_type=ReferenceType(arguments=None, dimensions=[], name=CategorySeriesLabelGenerator, sub_type=None), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=legendItemURLGenerator, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MemberReference(member=generator, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None), StatementExpression(expression=MethodInvocation(arguments=[], member=fireChangeEvent, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), label=None)], documentation=/**\n     * Sets the legend item URL generator and sends a\n     * {@link RendererChangeEvent} to all registered listeners.\n     *\n     * @param generator  the generator (<code>null</code> permitted).\n     *\n     * @see #getLegendItemURLGenerator()\n     */, modifiers={'public'}, name=setLegendItemURLGenerator, parameters=[FormalParameter(annotations=[], modifiers=set(), name=generator, type=ReferenceType(arguments=None, dimensions=[], name=CategorySeriesLabelGenerator, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[ReturnStatement(expression=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=rowCount, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), label=None)], documentation=/**\n     * Returns the number of rows in the dataset.  This value is updated in the\n     * {@link AbstractCategoryItemRenderer#initialise} method.\n     *\n     * @return The row count.\n     */, modifiers={'public'}, name=getRowCount, parameters=[], return_type=BasicType(dimensions=[], name=int), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[ReturnStatement(expression=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=columnCount, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), label=None)], documentation=/**\n     * Returns the number of columns in the dataset.  This value is updated in\n     * the {@link AbstractCategoryItemRenderer#initialise} method.\n     *\n     * @return The column count.\n     */, modifiers={'public'}, name=getColumnCount, parameters=[], return_type=BasicType(dimensions=[], name=int), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ClassCreator(arguments=[MemberReference(member=info, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=CategoryItemRendererState, sub_type=None)), name=state)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=CategoryItemRendererState, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ArrayCreator(dimensions=[This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=rowCount, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)])], initializer=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=BasicType(dimensions=None, name=int)), name=visibleSeriesTemp)], modifiers=set(), type=BasicType(dimensions=[None], name=int)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=visibleSeriesCount)], modifiers=set(), type=BasicType(dimensions=[], name=int)), ForStatement(body=BlockStatement(label=None, statements=[IfStatement(condition=MethodInvocation(arguments=[MemberReference(member=row, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=isSeriesVisible, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=visibleSeriesTemp, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[ArraySelector(index=MemberReference(member=visibleSeriesCount, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]))]), type==, value=MemberReference(member=row, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None), StatementExpression(expression=MemberReference(member=visibleSeriesCount, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[]), label=None)]))]), control=ForControl(condition=BinaryOperation(operandl=MemberReference(member=row, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=rowCount, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), operator=<), init=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=row)], modifiers=set(), type=BasicType(dimensions=[], name=int)), update=[MemberReference(member=row, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[])]), label=None), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ArrayCreator(dimensions=[MemberReference(member=visibleSeriesCount, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], initializer=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=BasicType(dimensions=None, name=int)), name=visibleSeries)], modifiers=set(), type=BasicType(dimensions=[None], name=int)), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=visibleSeriesTemp, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), MemberReference(member=visibleSeries, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), MemberReference(member=visibleSeriesCount, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=arraycopy, postfix_operators=[], prefix_operators=[], qualifier=System, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=visibleSeries, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=setVisibleSeriesArray, postfix_operators=[], prefix_operators=[], qualifier=state, selectors=[], type_arguments=None), label=None), ReturnStatement(expression=MemberReference(member=state, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)], documentation=/**\n     * Creates a new state instance---this method is called from the\n     * {@link #initialise(Graphics2D, Rectangle2D, CategoryPlot, int,\n     * PlotRenderingInfo)} method.  Subclasses can override this method if\n     * they need to use a subclass of {@link CategoryItemRendererState}.\n     *\n     * @param info  collects plot rendering info (<code>null</code> permitted).\n     *\n     * @return The new state instance (never <code>null</code>).\n     *\n     * @since 1.0.5\n     */, modifiers={'protected'}, name=createState, parameters=[FormalParameter(annotations=[], modifiers=set(), name=info, type=ReferenceType(arguments=None, dimensions=[], name=PlotRenderingInfo, sub_type=None), varargs=False)], return_type=ReferenceType(arguments=None, dimensions=[], name=CategoryItemRendererState, sub_type=None), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=plot, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=setPlot, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), label=None), IfStatement(condition=BinaryOperation(operandl=MemberReference(member=dataset, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator=!=), else_statement=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=rowCount, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0)), label=None), StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=columnCount, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0)), label=None)]), label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=rowCount, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MethodInvocation(arguments=[], member=getRowCount, postfix_operators=[], prefix_operators=[], qualifier=dataset, selectors=[], type_arguments=None)), label=None), StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=columnCount, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MethodInvocation(arguments=[], member=getColumnCount, postfix_operators=[], prefix_operators=[], qualifier=dataset, selectors=[], type_arguments=None)), label=None)])), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MemberReference(member=info, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=createState, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), name=state)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=CategoryItemRendererState, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), name=selectionState)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=CategoryDatasetSelectionState, sub_type=None)), IfStatement(condition=BinaryOperation(operandl=MemberReference(member=dataset, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=ReferenceType(arguments=None, dimensions=[], name=SelectableCategoryDataset, sub_type=None), operator=instanceof), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Cast(expression=MemberReference(member=dataset, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type=ReferenceType(arguments=None, dimensions=[], name=SelectableCategoryDataset, sub_type=None)), name=scd)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=SelectableCategoryDataset, sub_type=None)), StatementExpression(expression=Assignment(expressionl=MemberReference(member=selectionState, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=MethodInvocation(arguments=[], member=getSelectionState, postfix_operators=[], prefix_operators=[], qualifier=scd, selectors=[], type_arguments=None)), label=None)])), IfStatement(condition=BinaryOperation(operandl=BinaryOperation(operandl=MemberReference(member=selectionState, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator===), operandr=BinaryOperation(operandl=MemberReference(member=info, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator=!=), operator=&&), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[], member=getOwner, postfix_operators=[], prefix_operators=[], qualifier=info, selectors=[], type_arguments=None), name=cri)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=ChartRenderingInfo, sub_type=None)), IfStatement(condition=BinaryOperation(operandl=MemberReference(member=cri, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator=!=), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[], member=getRenderingSource, postfix_operators=[], prefix_operators=[], qualifier=cri, selectors=[], type_arguments=None), name=rs)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=RenderingSource, sub_type=None)), StatementExpression(expression=Assignment(expressionl=MemberReference(member=selectionState, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=Cast(expression=MethodInvocation(arguments=[MemberReference(member=dataset, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=getSelectionState, postfix_operators=[], prefix_operators=[], qualifier=rs, selectors=[], type_arguments=None), type=ReferenceType(arguments=None, dimensions=[], name=CategoryDatasetSelectionState, sub_type=None))), label=None)]))])), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=selectionState, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=setSelectionState, postfix_operators=[], prefix_operators=[], qualifier=state, selectors=[], type_arguments=None), label=None), ReturnStatement(expression=MemberReference(member=state, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)], documentation=/**\n     * Initialises the renderer and returns a state object that will be used\n     * for the remainder of the drawing process for a single chart.  The state\n     * object allows for the fact that the renderer may be used simultaneously\n     * by multiple threads (each thread will work with a separate state object).\n     *\n     * @param g2  the graphics device.\n     * @param dataArea  the data area.\n     * @param plot  the plot.\n     * @param info  an object for returning information about the structure of\n     *              the plot (<code>null</code> permitted).\n     *\n     * @return The renderer state.\n     */, modifiers={'public'}, name=initialise, parameters=[FormalParameter(annotations=[], modifiers=set(), name=g2, type=ReferenceType(arguments=None, dimensions=[], name=Graphics2D, sub_type=None), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=dataArea, type=ReferenceType(arguments=None, dimensions=[], name=Rectangle2D, sub_type=None), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=plot, type=ReferenceType(arguments=None, dimensions=[], name=CategoryPlot, sub_type=None), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=dataset, type=ReferenceType(arguments=None, dimensions=[], name=CategoryDataset, sub_type=None), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=info, type=ReferenceType(arguments=None, dimensions=[], name=PlotRenderingInfo, sub_type=None), varargs=False)], return_type=ReferenceType(arguments=None, dimensions=[], name=CategoryItemRendererState, sub_type=None), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[ReturnStatement(expression=MethodInvocation(arguments=[MemberReference(member=dataset, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false)], member=findRangeBounds, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), label=None)], documentation=/**\n     * Returns the range of values the renderer requires to display all the\n     * items from the specified dataset.\n     *\n     * @param dataset  the dataset (<code>null</code> permitted).\n     *\n     * @return The range (or <code>null</code> if the dataset is\n     *         <code>null</code> or empty).\n     */, modifiers={'public'}, name=findRangeBounds, parameters=[FormalParameter(annotations=[], modifiers=set(), name=dataset, type=ReferenceType(arguments=None, dimensions=[], name=CategoryDataset, sub_type=None), varargs=False)], return_type=ReferenceType(arguments=None, dimensions=[], name=Range, sub_type=None), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[IfStatement(condition=BinaryOperation(operandl=MemberReference(member=dataset, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator===), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[ReturnStatement(expression=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), label=None)])), IfStatement(condition=MethodInvocation(arguments=[], member=getDataBoundsIncludesVisibleSeriesOnly, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), else_statement=BlockStatement(label=None, statements=[ReturnStatement(expression=MethodInvocation(arguments=[MemberReference(member=dataset, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=includeInterval, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=findRangeBounds, postfix_operators=[], prefix_operators=[], qualifier=DatasetUtilities, selectors=[], type_arguments=None), label=None)]), label=None, then_statement=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ClassCreator(arguments=[], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=ArrayList, sub_type=None)), name=visibleSeriesKeys)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=List, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[], member=getRowCount, postfix_operators=[], prefix_operators=[], qualifier=dataset, selectors=[], type_arguments=None), name=seriesCount)], modifiers=set(), type=BasicType(dimensions=[], name=int)), ForStatement(body=BlockStatement(label=None, statements=[IfStatement(condition=MethodInvocation(arguments=[MemberReference(member=s, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=isSeriesVisible, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[MethodInvocation(arguments=[MemberReference(member=s, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=getRowKey, postfix_operators=[], prefix_operators=[], qualifier=dataset, selectors=[], type_arguments=None)], member=add, postfix_operators=[], prefix_operators=[], qualifier=visibleSeriesKeys, selectors=[], type_arguments=None), label=None)]))]), control=ForControl(condition=BinaryOperation(operandl=MemberReference(member=s, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=seriesCount, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<), init=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=s)], modifiers=set(), type=BasicType(dimensions=[], name=int)), update=[MemberReference(member=s, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[])]), label=None), ReturnStatement(expression=MethodInvocation(arguments=[MemberReference(member=dataset, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=visibleSeriesKeys, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=includeInterval, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=findRangeBounds, postfix_operators=[], prefix_operators=[], qualifier=DatasetUtilities, selectors=[], type_arguments=None), label=None)]))], documentation=/**\n     * Returns the range of values the renderer requires to display all the\n     * items from the specified dataset.\n     *\n     * @param dataset  the dataset (<code>null</code> permitted).\n     * @param includeInterval  include the y-interval if the dataset has one.\n     *\n     * @return The range (<code>null</code> if the dataset is <code>null</code>\n     *         or empty).\n     *\n     * @since 1.0.13\n     */, modifiers={'protected'}, name=findRangeBounds, parameters=[FormalParameter(annotations=[], modifiers=set(), name=dataset, type=ReferenceType(arguments=None, dimensions=[], name=CategoryDataset, sub_type=None), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=includeInterval, type=BasicType(dimensions=[], name=boolean), varargs=False)], return_type=ReferenceType(arguments=None, dimensions=[], name=Range, sub_type=None), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[ReturnStatement(expression=MethodInvocation(arguments=[MemberReference(member=columnKey, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MethodInvocation(arguments=[], member=getColumnKeys, postfix_operators=[], prefix_operators=[], qualifier=dataset, selectors=[], type_arguments=None), MemberReference(member=area, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=edge, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=getCategoryMiddle, postfix_operators=[], prefix_operators=[], qualifier=axis, selectors=[], type_arguments=None), label=None)], documentation=/**\n     * Returns the Java2D coordinate for the middle of the specified data item.\n     *\n     * @param rowKey  the row key.\n     * @param columnKey  the column key.\n     * @param dataset  the dataset.\n     * @param axis  the axis.\n     * @param area  the data area.\n     * @param edge  the edge along which the axis lies.\n     *\n     * @return The Java2D coordinate for the middle of the item.\n     *\n     * @since 1.0.11\n     */, modifiers={'public'}, name=getItemMiddle, parameters=[FormalParameter(annotations=[], modifiers=set(), name=rowKey, type=ReferenceType(arguments=None, dimensions=[], name=Comparable, sub_type=None), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=columnKey, type=ReferenceType(arguments=None, dimensions=[], name=Comparable, sub_type=None), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=dataset, type=ReferenceType(arguments=None, dimensions=[], name=CategoryDataset, sub_type=None), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=axis, type=ReferenceType(arguments=None, dimensions=[], name=CategoryAxis, sub_type=None), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=area, type=ReferenceType(arguments=None, dimensions=[], name=Rectangle2D, sub_type=None), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=edge, type=ReferenceType(arguments=None, dimensions=[], name=RectangleEdge, sub_type=None), varargs=False)], return_type=BasicType(dimensions=[], name=double), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=g2, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=dataArea, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=drawBackground, postfix_operators=[], prefix_operators=[], qualifier=plot, selectors=[], type_arguments=None), label=None)], documentation=/**\n     * Draws a background for the data area.  The default implementation just\n     * gets the plot to draw the background, but some renderers will override\n     * this behaviour.\n     *\n     * @param g2  the graphics device.\n     * @param plot  the plot.\n     * @param dataArea  the data area.\n     */, modifiers={'public'}, name=drawBackground, parameters=[FormalParameter(annotations=[], modifiers=set(), name=g2, type=ReferenceType(arguments=None, dimensions=[], name=Graphics2D, sub_type=None), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=plot, type=ReferenceType(arguments=None, dimensions=[], name=CategoryPlot, sub_type=None), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=dataArea, type=ReferenceType(arguments=None, dimensions=[], name=Rectangle2D, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=g2, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=dataArea, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=drawOutline, postfix_operators=[], prefix_operators=[], qualifier=plot, selectors=[], type_arguments=None), label=None)], documentation=/**\n     * Draws an outline for the data area.  The default implementation just\n     * gets the plot to draw the outline, but some renderers will override this\n     * behaviour.\n     *\n     * @param g2  the graphics device.\n     * @param plot  the plot.\n     * @param dataArea  the data area.\n     */, modifiers={'public'}, name=drawOutline, parameters=[FormalParameter(annotations=[], modifiers=set(), name=g2, type=ReferenceType(arguments=None, dimensions=[], name=Graphics2D, sub_type=None), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=plot, type=ReferenceType(arguments=None, dimensions=[], name=CategoryPlot, sub_type=None), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=dataArea, type=ReferenceType(arguments=None, dimensions=[], name=Rectangle2D, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[IfStatement(condition=BinaryOperation(operandl=MemberReference(member=paint, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator===), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[ThrowStatement(expression=ClassCreator(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"Null 'paint' argument.\")], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=IllegalArgumentException, sub_type=None)), label=None)])), IfStatement(condition=BinaryOperation(operandl=MemberReference(member=stroke, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator===), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[ThrowStatement(expression=ClassCreator(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"Null 'stroke' argument.\")], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=IllegalArgumentException, sub_type=None)), label=None)])), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), name=line)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Line2D, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[], member=getOrientation, postfix_operators=[], prefix_operators=[], qualifier=plot, selectors=[], type_arguments=None), name=orientation)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=PlotOrientation, sub_type=None)), IfStatement(condition=BinaryOperation(operandl=MemberReference(member=orientation, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=HORIZONTAL, postfix_operators=[], prefix_operators=[], qualifier=PlotOrientation, selectors=[]), operator===), else_statement=IfStatement(condition=BinaryOperation(operandl=MemberReference(member=orientation, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=VERTICAL, postfix_operators=[], prefix_operators=[], qualifier=PlotOrientation, selectors=[]), operator===), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=line, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=ClassCreator(arguments=[MemberReference(member=value, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MethodInvocation(arguments=[], member=getMinY, postfix_operators=[], prefix_operators=[], qualifier=dataArea, selectors=[], type_arguments=None), MemberReference(member=value, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MethodInvocation(arguments=[], member=getMaxY, postfix_operators=[], prefix_operators=[], qualifier=dataArea, selectors=[], type_arguments=None)], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=Line2D, sub_type=ReferenceType(arguments=None, dimensions=None, name=Double, sub_type=None)))), label=None)])), label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=line, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=ClassCreator(arguments=[MethodInvocation(arguments=[], member=getMinX, postfix_operators=[], prefix_operators=[], qualifier=dataArea, selectors=[], type_arguments=None), MemberReference(member=value, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MethodInvocation(arguments=[], member=getMaxX, postfix_operators=[], prefix_operators=[], qualifier=dataArea, selectors=[], type_arguments=None), MemberReference(member=value, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=Line2D, sub_type=ReferenceType(arguments=None, dimensions=None, name=Double, sub_type=None)))), label=None)])), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=paint, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=setPaint, postfix_operators=[], prefix_operators=[], qualifier=g2, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=stroke, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=setStroke, postfix_operators=[], prefix_operators=[], qualifier=g2, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=line, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=draw, postfix_operators=[], prefix_operators=[], qualifier=g2, selectors=[], type_arguments=None), label=None)], documentation=/**\n     * Draws a grid line against the domain axis.\n     * <P>\n     * Note that this default implementation assumes that the horizontal axis\n     * is the domain axis. If this is not the case, you will need to override\n     * this method.\n     *\n     * @param g2  the graphics device.\n     * @param plot  the plot.\n     * @param dataArea  the area for plotting data (not yet adjusted for any\n     *                  3D effect).\n     * @param value  the Java2D value at which the grid line should be drawn.\n     * @param paint  the paint (<code>null</code> not permitted).\n     * @param stroke  the stroke (<code>null</code> not permitted).\n     *\n     * @see #drawRangeGridline(Graphics2D, CategoryPlot, ValueAxis,\n     *     Rectangle2D, double)\n     *\n     * @since 1.2.0\n     */, modifiers={'public'}, name=drawDomainLine, parameters=[FormalParameter(annotations=[], modifiers=set(), name=g2, type=ReferenceType(arguments=None, dimensions=[], name=Graphics2D, sub_type=None), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=plot, type=ReferenceType(arguments=None, dimensions=[], name=CategoryPlot, sub_type=None), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=dataArea, type=ReferenceType(arguments=None, dimensions=[], name=Rectangle2D, sub_type=None), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=value, type=BasicType(dimensions=[], name=double), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=paint, type=ReferenceType(arguments=None, dimensions=[], name=Paint, sub_type=None), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=stroke, type=ReferenceType(arguments=None, dimensions=[], name=Stroke, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[], member=getRange, postfix_operators=[], prefix_operators=[], qualifier=axis, selectors=[], type_arguments=None), name=range)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Range, sub_type=None)), IfStatement(condition=MethodInvocation(arguments=[MemberReference(member=value, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=contains, postfix_operators=[], prefix_operators=['!'], qualifier=range, selectors=[], type_arguments=None), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[ReturnStatement(expression=None, label=None)])), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[], member=getOrientation, postfix_operators=[], prefix_operators=[], qualifier=plot, selectors=[], type_arguments=None), name=orientation)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=PlotOrientation, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), name=line)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Line2D, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MemberReference(member=value, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=dataArea, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MethodInvocation(arguments=[], member=getRangeAxisEdge, postfix_operators=[], prefix_operators=[], qualifier=plot, selectors=[], type_arguments=None)], member=valueToJava2D, postfix_operators=[], prefix_operators=[], qualifier=axis, selectors=[], type_arguments=None), name=v)], modifiers=set(), type=BasicType(dimensions=[], name=double)), IfStatement(condition=BinaryOperation(operandl=MemberReference(member=orientation, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=HORIZONTAL, postfix_operators=[], prefix_operators=[], qualifier=PlotOrientation, selectors=[]), operator===), else_statement=IfStatement(condition=BinaryOperation(operandl=MemberReference(member=orientation, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=VERTICAL, postfix_operators=[], prefix_operators=[], qualifier=PlotOrientation, selectors=[]), operator===), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=line, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=ClassCreator(arguments=[MethodInvocation(arguments=[], member=getMinX, postfix_operators=[], prefix_operators=[], qualifier=dataArea, selectors=[], type_arguments=None), MemberReference(member=v, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MethodInvocation(arguments=[], member=getMaxX, postfix_operators=[], prefix_operators=[], qualifier=dataArea, selectors=[], type_arguments=None), MemberReference(member=v, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=Line2D, sub_type=ReferenceType(arguments=None, dimensions=None, name=Double, sub_type=None)))), label=None)])), label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=line, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=ClassCreator(arguments=[MemberReference(member=v, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MethodInvocation(arguments=[], member=getMinY, postfix_operators=[], prefix_operators=[], qualifier=dataArea, selectors=[], type_arguments=None), MemberReference(member=v, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MethodInvocation(arguments=[], member=getMaxY, postfix_operators=[], prefix_operators=[], qualifier=dataArea, selectors=[], type_arguments=None)], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=Line2D, sub_type=ReferenceType(arguments=None, dimensions=None, name=Double, sub_type=None)))), label=None)])), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=paint, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=setPaint, postfix_operators=[], prefix_operators=[], qualifier=g2, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=stroke, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=setStroke, postfix_operators=[], prefix_operators=[], qualifier=g2, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=line, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=draw, postfix_operators=[], prefix_operators=[], qualifier=g2, selectors=[], type_arguments=None), label=None)], documentation=/**\n     * Draws a line perpendicular to the range axis.\n     *\n     * @param g2  the graphics device.\n     * @param plot  the plot.\n     * @param axis  the value axis.\n     * @param dataArea  the area for plotting data (not yet adjusted for any 3D\n     *                  effect).\n     * @param value  the value at which the grid line should be drawn.\n     * @param paint  the paint (<code>null</code> not permitted).\n     * @param stroke  the stroke (<code>null</code> not permitted).\n     *\n     * @see #drawRangeGridline\n     *\n     * @since 1.0.13\n     */, modifiers={'public'}, name=drawRangeLine, parameters=[FormalParameter(annotations=[], modifiers=set(), name=g2, type=ReferenceType(arguments=None, dimensions=[], name=Graphics2D, sub_type=None), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=plot, type=ReferenceType(arguments=None, dimensions=[], name=CategoryPlot, sub_type=None), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=axis, type=ReferenceType(arguments=None, dimensions=[], name=ValueAxis, sub_type=None), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=dataArea, type=ReferenceType(arguments=None, dimensions=[], name=Rectangle2D, sub_type=None), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=value, type=BasicType(dimensions=[], name=double), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=paint, type=ReferenceType(arguments=None, dimensions=[], name=Paint, sub_type=None), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=stroke, type=ReferenceType(arguments=None, dimensions=[], name=Stroke, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[], member=getKey, postfix_operators=[], prefix_operators=[], qualifier=marker, selectors=[], type_arguments=None), name=category)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Comparable, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MethodInvocation(arguments=[This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[])], member=getIndexOf, postfix_operators=[], prefix_operators=[], qualifier=plot, selectors=[], type_arguments=None)], member=getDataset, postfix_operators=[], prefix_operators=[], qualifier=plot, selectors=[], type_arguments=None), name=dataset)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=CategoryDataset, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MemberReference(member=category, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=getColumnIndex, postfix_operators=[], prefix_operators=[], qualifier=dataset, selectors=[], type_arguments=None), name=columnIndex)], modifiers=set(), type=BasicType(dimensions=[], name=int)), IfStatement(condition=BinaryOperation(operandl=MemberReference(member=columnIndex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), operator=<), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[ReturnStatement(expression=None, label=None)])), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[], member=getComposite, postfix_operators=[], prefix_operators=[], qualifier=g2, selectors=[], type_arguments=None), name=savedComposite)], modifiers={'final'}, type=ReferenceType(arguments=None, dimensions=[], name=Composite, sub_type=None)), StatementExpression(expression=MethodInvocation(arguments=[MethodInvocation(arguments=[MemberReference(member=SRC_OVER, postfix_operators=[], prefix_operators=[], qualifier=AlphaComposite, selectors=[]), MethodInvocation(arguments=[], member=getAlpha, postfix_operators=[], prefix_operators=[], qualifier=marker, selectors=[], type_arguments=None)], member=getInstance, postfix_operators=[], prefix_operators=[], qualifier=AlphaComposite, selectors=[], type_arguments=None)], member=setComposite, postfix_operators=[], prefix_operators=[], qualifier=g2, selectors=[], type_arguments=None), label=None), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[], member=getOrientation, postfix_operators=[], prefix_operators=[], qualifier=plot, selectors=[], type_arguments=None), name=orientation)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=PlotOrientation, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), name=bounds)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Rectangle2D, sub_type=None)), IfStatement(condition=MethodInvocation(arguments=[], member=getDrawAsLine, postfix_operators=[], prefix_operators=[], qualifier=marker, selectors=[], type_arguments=None), else_statement=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MemberReference(member=columnIndex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MethodInvocation(arguments=[], member=getColumnCount, postfix_operators=[], prefix_operators=[], qualifier=dataset, selectors=[], type_arguments=None), MemberReference(member=dataArea, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MethodInvocation(arguments=[], member=getDomainAxisEdge, postfix_operators=[], prefix_operators=[], qualifier=plot, selectors=[], type_arguments=None)], member=getCategoryStart, postfix_operators=[], prefix_operators=[], qualifier=axis, selectors=[], type_arguments=None), name=v0)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MemberReference(member=columnIndex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MethodInvocation(arguments=[], member=getColumnCount, postfix_operators=[], prefix_operators=[], qualifier=dataset, selectors=[], type_arguments=None), MemberReference(member=dataArea, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MethodInvocation(arguments=[], member=getDomainAxisEdge, postfix_operators=[], prefix_operators=[], qualifier=plot, selectors=[], type_arguments=None)], member=getCategoryEnd, postfix_operators=[], prefix_operators=[], qualifier=axis, selectors=[], type_arguments=None), name=v1)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), name=area)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Rectangle2D, sub_type=None)), IfStatement(condition=BinaryOperation(operandl=MemberReference(member=orientation, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=HORIZONTAL, postfix_operators=[], prefix_operators=[], qualifier=PlotOrientation, selectors=[]), operator===), else_statement=IfStatement(condition=BinaryOperation(operandl=MemberReference(member=orientation, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=VERTICAL, postfix_operators=[], prefix_operators=[], qualifier=PlotOrientation, selectors=[]), operator===), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=area, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=ClassCreator(arguments=[MemberReference(member=v0, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MethodInvocation(arguments=[], member=getMinY, postfix_operators=[], prefix_operators=[], qualifier=dataArea, selectors=[], type_arguments=None), BinaryOperation(operandl=MemberReference(member=v1, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=v0, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=-), MethodInvocation(arguments=[], member=getHeight, postfix_operators=[], prefix_operators=[], qualifier=dataArea, selectors=[], type_arguments=None)], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=Rectangle2D, sub_type=ReferenceType(arguments=None, dimensions=None, name=Double, sub_type=None)))), label=None)])), label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=area, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=ClassCreator(arguments=[MethodInvocation(arguments=[], member=getMinX, postfix_operators=[], prefix_operators=[], qualifier=dataArea, selectors=[], type_arguments=None), MemberReference(member=v0, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MethodInvocation(arguments=[], member=getWidth, postfix_operators=[], prefix_operators=[], qualifier=dataArea, selectors=[], type_arguments=None), BinaryOperation(operandl=MemberReference(member=v1, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=v0, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=-)], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=Rectangle2D, sub_type=ReferenceType(arguments=None, dimensions=None, name=Double, sub_type=None)))), label=None)])), StatementExpression(expression=MethodInvocation(arguments=[MethodInvocation(arguments=[], member=getPaint, postfix_operators=[], prefix_operators=[], qualifier=marker, selectors=[], type_arguments=None)], member=setPaint, postfix_operators=[], prefix_operators=[], qualifier=g2, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=area, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=fill, postfix_operators=[], prefix_operators=[], qualifier=g2, selectors=[], type_arguments=None), label=None), StatementExpression(expression=Assignment(expressionl=MemberReference(member=bounds, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=MemberReference(member=area, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)]), label=None, then_statement=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MemberReference(member=columnIndex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MethodInvocation(arguments=[], member=getColumnCount, postfix_operators=[], prefix_operators=[], qualifier=dataset, selectors=[], type_arguments=None), MemberReference(member=dataArea, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MethodInvocation(arguments=[], member=getDomainAxisEdge, postfix_operators=[], prefix_operators=[], qualifier=plot, selectors=[], type_arguments=None)], member=getCategoryMiddle, postfix_operators=[], prefix_operators=[], qualifier=axis, selectors=[], type_arguments=None), name=v)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), name=line)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Line2D, sub_type=None)), IfStatement(condition=BinaryOperation(operandl=MemberReference(member=orientation, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=HORIZONTAL, postfix_operators=[], prefix_operators=[], qualifier=PlotOrientation, selectors=[]), operator===), else_statement=IfStatement(condition=BinaryOperation(operandl=MemberReference(member=orientation, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=VERTICAL, postfix_operators=[], prefix_operators=[], qualifier=PlotOrientation, selectors=[]), operator===), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=line, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=ClassCreator(arguments=[MemberReference(member=v, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MethodInvocation(arguments=[], member=getMinY, postfix_operators=[], prefix_operators=[], qualifier=dataArea, selectors=[], type_arguments=None), MemberReference(member=v, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MethodInvocation(arguments=[], member=getMaxY, postfix_operators=[], prefix_operators=[], qualifier=dataArea, selectors=[], type_arguments=None)], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=Line2D, sub_type=ReferenceType(arguments=None, dimensions=None, name=Double, sub_type=None)))), label=None)])), label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=line, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=ClassCreator(arguments=[MethodInvocation(arguments=[], member=getMinX, postfix_operators=[], prefix_operators=[], qualifier=dataArea, selectors=[], type_arguments=None), MemberReference(member=v, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MethodInvocation(arguments=[], member=getMaxX, postfix_operators=[], prefix_operators=[], qualifier=dataArea, selectors=[], type_arguments=None), MemberReference(member=v, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=Line2D, sub_type=ReferenceType(arguments=None, dimensions=None, name=Double, sub_type=None)))), label=None)])), StatementExpression(expression=MethodInvocation(arguments=[MethodInvocation(arguments=[], member=getPaint, postfix_operators=[], prefix_operators=[], qualifier=marker, selectors=[], type_arguments=None)], member=setPaint, postfix_operators=[], prefix_operators=[], qualifier=g2, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[MethodInvocation(arguments=[], member=getStroke, postfix_operators=[], prefix_operators=[], qualifier=marker, selectors=[], type_arguments=None)], member=setStroke, postfix_operators=[], prefix_operators=[], qualifier=g2, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=line, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=draw, postfix_operators=[], prefix_operators=[], qualifier=g2, selectors=[], type_arguments=None), label=None), StatementExpression(expression=Assignment(expressionl=MemberReference(member=bounds, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=MethodInvocation(arguments=[], member=getBounds2D, postfix_operators=[], prefix_operators=[], qualifier=line, selectors=[], type_arguments=None)), label=None)])), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[], member=getLabel, postfix_operators=[], prefix_operators=[], qualifier=marker, selectors=[], type_arguments=None), name=label)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[], member=getLabelAnchor, postfix_operators=[], prefix_operators=[], qualifier=marker, selectors=[], type_arguments=None), name=anchor)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=RectangleAnchor, sub_type=None)), IfStatement(condition=BinaryOperation(operandl=MemberReference(member=label, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator=!=), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[], member=getLabelFont, postfix_operators=[], prefix_operators=[], qualifier=marker, selectors=[], type_arguments=None), name=labelFont)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Font, sub_type=None)), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=labelFont, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=setFont, postfix_operators=[], prefix_operators=[], qualifier=g2, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[MethodInvocation(arguments=[], member=getLabelPaint, postfix_operators=[], prefix_operators=[], qualifier=marker, selectors=[], type_arguments=None)], member=setPaint, postfix_operators=[], prefix_operators=[], qualifier=g2, selectors=[], type_arguments=None), label=None), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MemberReference(member=g2, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=orientation, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=dataArea, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=bounds, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MethodInvocation(arguments=[], member=getLabelOffset, postfix_operators=[], prefix_operators=[], qualifier=marker, selectors=[], type_arguments=None), MethodInvocation(arguments=[], member=getLabelOffsetType, postfix_operators=[], prefix_operators=[], qualifier=marker, selectors=[], type_arguments=None), MemberReference(member=anchor, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=calculateDomainMarkerTextAnchorPoint, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), name=coordinates)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Point2D, sub_type=None)), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=label, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=g2, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), Cast(expression=MethodInvocation(arguments=[], member=getX, postfix_operators=[], prefix_operators=[], qualifier=coordinates, selectors=[], type_arguments=None), type=BasicType(dimensions=[], name=float)), Cast(expression=MethodInvocation(arguments=[], member=getY, postfix_operators=[], prefix_operators=[], qualifier=coordinates, selectors=[], type_arguments=None), type=BasicType(dimensions=[], name=float)), MethodInvocation(arguments=[], member=getLabelTextAnchor, postfix_operators=[], prefix_operators=[], qualifier=marker, selectors=[], type_arguments=None)], member=drawAlignedString, postfix_operators=[], prefix_operators=[], qualifier=TextUtilities, selectors=[], type_arguments=None), label=None)])), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=savedComposite, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=setComposite, postfix_operators=[], prefix_operators=[], qualifier=g2, selectors=[], type_arguments=None), label=None)], documentation=/**\n     * Draws a marker for the domain axis.\n     *\n     * @param g2  the graphics device (not <code>null</code>).\n     * @param plot  the plot (not <code>null</code>).\n     * @param axis  the range axis (not <code>null</code>).\n     * @param marker  the marker to be drawn (not <code>null</code>).\n     * @param dataArea  the area inside the axes (not <code>null</code>).\n     *\n     * @see #drawRangeMarker(Graphics2D, CategoryPlot, ValueAxis, Marker,\n     *     Rectangle2D)\n     */, modifiers={'public'}, name=drawDomainMarker, parameters=[FormalParameter(annotations=[], modifiers=set(), name=g2, type=ReferenceType(arguments=None, dimensions=[], name=Graphics2D, sub_type=None), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=plot, type=ReferenceType(arguments=None, dimensions=[], name=CategoryPlot, sub_type=None), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=axis, type=ReferenceType(arguments=None, dimensions=[], name=CategoryAxis, sub_type=None), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=marker, type=ReferenceType(arguments=None, dimensions=[], name=CategoryMarker, sub_type=None), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=dataArea, type=ReferenceType(arguments=None, dimensions=[], name=Rectangle2D, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[IfStatement(condition=BinaryOperation(operandl=MemberReference(member=marker, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=ReferenceType(arguments=None, dimensions=[], name=ValueMarker, sub_type=None), operator=instanceof), else_statement=IfStatement(condition=BinaryOperation(operandl=MemberReference(member=marker, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=ReferenceType(arguments=None, dimensions=[], name=IntervalMarker, sub_type=None), operator=instanceof), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Cast(expression=MemberReference(member=marker, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type=ReferenceType(arguments=None, dimensions=[], name=IntervalMarker, sub_type=None)), name=im)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=IntervalMarker, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[], member=getStartValue, postfix_operators=[], prefix_operators=[], qualifier=im, selectors=[], type_arguments=None), name=start)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[], member=getEndValue, postfix_operators=[], prefix_operators=[], qualifier=im, selectors=[], type_arguments=None), name=end)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[], member=getRange, postfix_operators=[], prefix_operators=[], qualifier=axis, selectors=[], type_arguments=None), name=range)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Range, sub_type=None)), IfStatement(condition=MethodInvocation(arguments=[MemberReference(member=start, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=end, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=intersects, postfix_operators=[], prefix_operators=['!'], qualifier=range, selectors=[], type_arguments=None), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[ReturnStatement(expression=None, label=None)])), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[], member=getComposite, postfix_operators=[], prefix_operators=[], qualifier=g2, selectors=[], type_arguments=None), name=savedComposite)], modifiers={'final'}, type=ReferenceType(arguments=None, dimensions=[], name=Composite, sub_type=None)), StatementExpression(expression=MethodInvocation(arguments=[MethodInvocation(arguments=[MemberReference(member=SRC_OVER, postfix_operators=[], prefix_operators=[], qualifier=AlphaComposite, selectors=[]), MethodInvocation(arguments=[], member=getAlpha, postfix_operators=[], prefix_operators=[], qualifier=marker, selectors=[], type_arguments=None)], member=getInstance, postfix_operators=[], prefix_operators=[], qualifier=AlphaComposite, selectors=[], type_arguments=None)], member=setComposite, postfix_operators=[], prefix_operators=[], qualifier=g2, selectors=[], type_arguments=None), label=None), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MemberReference(member=start, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=dataArea, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MethodInvocation(arguments=[], member=getRangeAxisEdge, postfix_operators=[], prefix_operators=[], qualifier=plot, selectors=[], type_arguments=None)], member=valueToJava2D, postfix_operators=[], prefix_operators=[], qualifier=axis, selectors=[], type_arguments=None), name=start2d)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MemberReference(member=end, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=dataArea, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MethodInvocation(arguments=[], member=getRangeAxisEdge, postfix_operators=[], prefix_operators=[], qualifier=plot, selectors=[], type_arguments=None)], member=valueToJava2D, postfix_operators=[], prefix_operators=[], qualifier=axis, selectors=[], type_arguments=None), name=end2d)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MemberReference(member=start2d, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=end2d, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=min, postfix_operators=[], prefix_operators=[], qualifier=Math, selectors=[], type_arguments=None), name=low)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MemberReference(member=start2d, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=end2d, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=max, postfix_operators=[], prefix_operators=[], qualifier=Math, selectors=[], type_arguments=None), name=high)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[], member=getOrientation, postfix_operators=[], prefix_operators=[], qualifier=plot, selectors=[], type_arguments=None), name=orientation)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=PlotOrientation, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), name=rect)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Rectangle2D, sub_type=None)), IfStatement(condition=BinaryOperation(operandl=MemberReference(member=orientation, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=HORIZONTAL, postfix_operators=[], prefix_operators=[], qualifier=PlotOrientation, selectors=[]), operator===), else_statement=IfStatement(condition=BinaryOperation(operandl=MemberReference(member=orientation, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=VERTICAL, postfix_operators=[], prefix_operators=[], qualifier=PlotOrientation, selectors=[]), operator===), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=low, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=MethodInvocation(arguments=[MemberReference(member=low, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MethodInvocation(arguments=[], member=getMinY, postfix_operators=[], prefix_operators=[], qualifier=dataArea, selectors=[], type_arguments=None)], member=max, postfix_operators=[], prefix_operators=[], qualifier=Math, selectors=[], type_arguments=None)), label=None), StatementExpression(expression=Assignment(expressionl=MemberReference(member=high, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=MethodInvocation(arguments=[MemberReference(member=high, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MethodInvocation(arguments=[], member=getMaxY, postfix_operators=[], prefix_operators=[], qualifier=dataArea, selectors=[], type_arguments=None)], member=min, postfix_operators=[], prefix_operators=[], qualifier=Math, selectors=[], type_arguments=None)), label=None), StatementExpression(expression=Assignment(expressionl=MemberReference(member=rect, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=ClassCreator(arguments=[MethodInvocation(arguments=[], member=getMinX, postfix_operators=[], prefix_operators=[], qualifier=dataArea, selectors=[], type_arguments=None), MemberReference(member=low, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MethodInvocation(arguments=[], member=getWidth, postfix_operators=[], prefix_operators=[], qualifier=dataArea, selectors=[], type_arguments=None), BinaryOperation(operandl=MemberReference(member=high, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=low, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=-)], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=Rectangle2D, sub_type=ReferenceType(arguments=None, dimensions=None, name=Double, sub_type=None)))), label=None)])), label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=low, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=MethodInvocation(arguments=[MemberReference(member=low, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MethodInvocation(arguments=[], member=getMinX, postfix_operators=[], prefix_operators=[], qualifier=dataArea, selectors=[], type_arguments=None)], member=max, postfix_operators=[], prefix_operators=[], qualifier=Math, selectors=[], type_arguments=None)), label=None), StatementExpression(expression=Assignment(expressionl=MemberReference(member=high, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=MethodInvocation(arguments=[MemberReference(member=high, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MethodInvocation(arguments=[], member=getMaxX, postfix_operators=[], prefix_operators=[], qualifier=dataArea, selectors=[], type_arguments=None)], member=min, postfix_operators=[], prefix_operators=[], qualifier=Math, selectors=[], type_arguments=None)), label=None), StatementExpression(expression=Assignment(expressionl=MemberReference(member=rect, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=ClassCreator(arguments=[MemberReference(member=low, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MethodInvocation(arguments=[], member=getMinY, postfix_operators=[], prefix_operators=[], qualifier=dataArea, selectors=[], type_arguments=None), BinaryOperation(operandl=MemberReference(member=high, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=low, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=-), MethodInvocation(arguments=[], member=getHeight, postfix_operators=[], prefix_operators=[], qualifier=dataArea, selectors=[], type_arguments=None)], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=Rectangle2D, sub_type=ReferenceType(arguments=None, dimensions=None, name=Double, sub_type=None)))), label=None)])), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[], member=getPaint, postfix_operators=[], prefix_operators=[], qualifier=marker, selectors=[], type_arguments=None), name=p)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Paint, sub_type=None)), IfStatement(condition=BinaryOperation(operandl=MemberReference(member=p, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=ReferenceType(arguments=None, dimensions=[], name=GradientPaint, sub_type=None), operator=instanceof), else_statement=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=p, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=setPaint, postfix_operators=[], prefix_operators=[], qualifier=g2, selectors=[], type_arguments=None), label=None)]), label=None, then_statement=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Cast(expression=MemberReference(member=p, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type=ReferenceType(arguments=None, dimensions=[], name=GradientPaint, sub_type=None)), name=gp)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=GradientPaint, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[], member=getGradientPaintTransformer, postfix_operators=[], prefix_operators=[], qualifier=im, selectors=[], type_arguments=None), name=t)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=GradientPaintTransformer, sub_type=None)), IfStatement(condition=BinaryOperation(operandl=MemberReference(member=t, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator=!=), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=gp, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=MethodInvocation(arguments=[MemberReference(member=gp, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=rect, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=transform, postfix_operators=[], prefix_operators=[], qualifier=t, selectors=[], type_arguments=None)), label=None)])), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=gp, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=setPaint, postfix_operators=[], prefix_operators=[], qualifier=g2, selectors=[], type_arguments=None), label=None)])), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=rect, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=fill, postfix_operators=[], prefix_operators=[], qualifier=g2, selectors=[], type_arguments=None), label=None), IfStatement(condition=BinaryOperation(operandl=BinaryOperation(operandl=MethodInvocation(arguments=[], member=getOutlinePaint, postfix_operators=[], prefix_operators=[], qualifier=im, selectors=[], type_arguments=None), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator=!=), operandr=BinaryOperation(operandl=MethodInvocation(arguments=[], member=getOutlineStroke, postfix_operators=[], prefix_operators=[], qualifier=im, selectors=[], type_arguments=None), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator=!=), operator=&&), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[IfStatement(condition=BinaryOperation(operandl=MemberReference(member=orientation, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=VERTICAL, postfix_operators=[], prefix_operators=[], qualifier=PlotOrientation, selectors=[]), operator===), else_statement=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ClassCreator(arguments=[], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=Line2D, sub_type=ReferenceType(arguments=None, dimensions=None, name=Double, sub_type=None))), name=line)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Line2D, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[], member=getMinY, postfix_operators=[], prefix_operators=[], qualifier=dataArea, selectors=[], type_arguments=None), name=y0)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[], member=getMaxY, postfix_operators=[], prefix_operators=[], qualifier=dataArea, selectors=[], type_arguments=None), name=y1)], modifiers=set(), type=BasicType(dimensions=[], name=double)), StatementExpression(expression=MethodInvocation(arguments=[MethodInvocation(arguments=[], member=getOutlinePaint, postfix_operators=[], prefix_operators=[], qualifier=im, selectors=[], type_arguments=None)], member=setPaint, postfix_operators=[], prefix_operators=[], qualifier=g2, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[MethodInvocation(arguments=[], member=getOutlineStroke, postfix_operators=[], prefix_operators=[], qualifier=im, selectors=[], type_arguments=None)], member=setStroke, postfix_operators=[], prefix_operators=[], qualifier=g2, selectors=[], type_arguments=None), label=None), IfStatement(condition=MethodInvocation(arguments=[MemberReference(member=start, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=contains, postfix_operators=[], prefix_operators=[], qualifier=range, selectors=[], type_arguments=None), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=start2d, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=y0, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=start2d, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=y1, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=setLine, postfix_operators=[], prefix_operators=[], qualifier=line, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=line, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=draw, postfix_operators=[], prefix_operators=[], qualifier=g2, selectors=[], type_arguments=None), label=None)])), IfStatement(condition=MethodInvocation(arguments=[MemberReference(member=end, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=contains, postfix_operators=[], prefix_operators=[], qualifier=range, selectors=[], type_arguments=None), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=end2d, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=y0, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=end2d, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=y1, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=setLine, postfix_operators=[], prefix_operators=[], qualifier=line, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=line, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=draw, postfix_operators=[], prefix_operators=[], qualifier=g2, selectors=[], type_arguments=None), label=None)]))]), label=None, then_statement=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ClassCreator(arguments=[], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=Line2D, sub_type=ReferenceType(arguments=None, dimensions=None, name=Double, sub_type=None))), name=line)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Line2D, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[], member=getMinX, postfix_operators=[], prefix_operators=[], qualifier=dataArea, selectors=[], type_arguments=None), name=x0)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[], member=getMaxX, postfix_operators=[], prefix_operators=[], qualifier=dataArea, selectors=[], type_arguments=None), name=x1)], modifiers=set(), type=BasicType(dimensions=[], name=double)), StatementExpression(expression=MethodInvocation(arguments=[MethodInvocation(arguments=[], member=getOutlinePaint, postfix_operators=[], prefix_operators=[], qualifier=im, selectors=[], type_arguments=None)], member=setPaint, postfix_operators=[], prefix_operators=[], qualifier=g2, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[MethodInvocation(arguments=[], member=getOutlineStroke, postfix_operators=[], prefix_operators=[], qualifier=im, selectors=[], type_arguments=None)], member=setStroke, postfix_operators=[], prefix_operators=[], qualifier=g2, selectors=[], type_arguments=None), label=None), IfStatement(condition=MethodInvocation(arguments=[MemberReference(member=start, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=contains, postfix_operators=[], prefix_operators=[], qualifier=range, selectors=[], type_arguments=None), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=x0, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=start2d, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=x1, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=start2d, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=setLine, postfix_operators=[], prefix_operators=[], qualifier=line, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=line, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=draw, postfix_operators=[], prefix_operators=[], qualifier=g2, selectors=[], type_arguments=None), label=None)])), IfStatement(condition=MethodInvocation(arguments=[MemberReference(member=end, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=contains, postfix_operators=[], prefix_operators=[], qualifier=range, selectors=[], type_arguments=None), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=x0, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=end2d, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=x1, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=end2d, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=setLine, postfix_operators=[], prefix_operators=[], qualifier=line, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=line, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=draw, postfix_operators=[], prefix_operators=[], qualifier=g2, selectors=[], type_arguments=None), label=None)]))]))])), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[], member=getLabel, postfix_operators=[], prefix_operators=[], qualifier=marker, selectors=[], type_arguments=None), name=label)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[], member=getLabelAnchor, postfix_operators=[], prefix_operators=[], qualifier=marker, selectors=[], type_arguments=None), name=anchor)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=RectangleAnchor, sub_type=None)), IfStatement(condition=BinaryOperation(operandl=MemberReference(member=label, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator=!=), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[], member=getLabelFont, postfix_operators=[], prefix_operators=[], qualifier=marker, selectors=[], type_arguments=None), name=labelFont)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Font, sub_type=None)), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=labelFont, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=setFont, postfix_operators=[], prefix_operators=[], qualifier=g2, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[MethodInvocation(arguments=[], member=getLabelPaint, postfix_operators=[], prefix_operators=[], qualifier=marker, selectors=[], type_arguments=None)], member=setPaint, postfix_operators=[], prefix_operators=[], qualifier=g2, selectors=[], type_arguments=None), label=None), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MemberReference(member=g2, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=orientation, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=dataArea, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=rect, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MethodInvocation(arguments=[], member=getLabelOffset, postfix_operators=[], prefix_operators=[], qualifier=marker, selectors=[], type_arguments=None), MethodInvocation(arguments=[], member=getLabelOffsetType, postfix_operators=[], prefix_operators=[], qualifier=marker, selectors=[], type_arguments=None), MemberReference(member=anchor, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=calculateRangeMarkerTextAnchorPoint, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), name=coordinates)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Point2D, sub_type=None)), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=label, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=g2, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), Cast(expression=MethodInvocation(arguments=[], member=getX, postfix_operators=[], prefix_operators=[], qualifier=coordinates, selectors=[], type_arguments=None), type=BasicType(dimensions=[], name=float)), Cast(expression=MethodInvocation(arguments=[], member=getY, postfix_operators=[], prefix_operators=[], qualifier=coordinates, selectors=[], type_arguments=None), type=BasicType(dimensions=[], name=float)), MethodInvocation(arguments=[], member=getLabelTextAnchor, postfix_operators=[], prefix_operators=[], qualifier=marker, selectors=[], type_arguments=None)], member=drawAlignedString, postfix_operators=[], prefix_operators=[], qualifier=TextUtilities, selectors=[], type_arguments=None), label=None)])), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=savedComposite, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=setComposite, postfix_operators=[], prefix_operators=[], qualifier=g2, selectors=[], type_arguments=None), label=None)])), label=None, then_statement=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Cast(expression=MemberReference(member=marker, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type=ReferenceType(arguments=None, dimensions=[], name=ValueMarker, sub_type=None)), name=vm)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=ValueMarker, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[], member=getValue, postfix_operators=[], prefix_operators=[], qualifier=vm, selectors=[], type_arguments=None), name=value)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[], member=getRange, postfix_operators=[], prefix_operators=[], qualifier=axis, selectors=[], type_arguments=None), name=range)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Range, sub_type=None)), IfStatement(condition=MethodInvocation(arguments=[MemberReference(member=value, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=contains, postfix_operators=[], prefix_operators=['!'], qualifier=range, selectors=[], type_arguments=None), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[ReturnStatement(expression=None, label=None)])), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[], member=getComposite, postfix_operators=[], prefix_operators=[], qualifier=g2, selectors=[], type_arguments=None), name=savedComposite)], modifiers={'final'}, type=ReferenceType(arguments=None, dimensions=[], name=Composite, sub_type=None)), StatementExpression(expression=MethodInvocation(arguments=[MethodInvocation(arguments=[MemberReference(member=SRC_OVER, postfix_operators=[], prefix_operators=[], qualifier=AlphaComposite, selectors=[]), MethodInvocation(arguments=[], member=getAlpha, postfix_operators=[], prefix_operators=[], qualifier=marker, selectors=[], type_arguments=None)], member=getInstance, postfix_operators=[], prefix_operators=[], qualifier=AlphaComposite, selectors=[], type_arguments=None)], member=setComposite, postfix_operators=[], prefix_operators=[], qualifier=g2, selectors=[], type_arguments=None), label=None), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[], member=getOrientation, postfix_operators=[], prefix_operators=[], qualifier=plot, selectors=[], type_arguments=None), name=orientation)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=PlotOrientation, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MemberReference(member=value, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=dataArea, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MethodInvocation(arguments=[], member=getRangeAxisEdge, postfix_operators=[], prefix_operators=[], qualifier=plot, selectors=[], type_arguments=None)], member=valueToJava2D, postfix_operators=[], prefix_operators=[], qualifier=axis, selectors=[], type_arguments=None), name=v)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), name=line)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Line2D, sub_type=None)), IfStatement(condition=BinaryOperation(operandl=MemberReference(member=orientation, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=HORIZONTAL, postfix_operators=[], prefix_operators=[], qualifier=PlotOrientation, selectors=[]), operator===), else_statement=IfStatement(condition=BinaryOperation(operandl=MemberReference(member=orientation, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=VERTICAL, postfix_operators=[], prefix_operators=[], qualifier=PlotOrientation, selectors=[]), operator===), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=line, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=ClassCreator(arguments=[MethodInvocation(arguments=[], member=getMinX, postfix_operators=[], prefix_operators=[], qualifier=dataArea, selectors=[], type_arguments=None), MemberReference(member=v, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MethodInvocation(arguments=[], member=getMaxX, postfix_operators=[], prefix_operators=[], qualifier=dataArea, selectors=[], type_arguments=None), MemberReference(member=v, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=Line2D, sub_type=ReferenceType(arguments=None, dimensions=None, name=Double, sub_type=None)))), label=None)])), label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=line, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=ClassCreator(arguments=[MemberReference(member=v, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MethodInvocation(arguments=[], member=getMinY, postfix_operators=[], prefix_operators=[], qualifier=dataArea, selectors=[], type_arguments=None), MemberReference(member=v, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MethodInvocation(arguments=[], member=getMaxY, postfix_operators=[], prefix_operators=[], qualifier=dataArea, selectors=[], type_arguments=None)], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=Line2D, sub_type=ReferenceType(arguments=None, dimensions=None, name=Double, sub_type=None)))), label=None)])), StatementExpression(expression=MethodInvocation(arguments=[MethodInvocation(arguments=[], member=getPaint, postfix_operators=[], prefix_operators=[], qualifier=marker, selectors=[], type_arguments=None)], member=setPaint, postfix_operators=[], prefix_operators=[], qualifier=g2, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[MethodInvocation(arguments=[], member=getStroke, postfix_operators=[], prefix_operators=[], qualifier=marker, selectors=[], type_arguments=None)], member=setStroke, postfix_operators=[], prefix_operators=[], qualifier=g2, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=line, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=draw, postfix_operators=[], prefix_operators=[], qualifier=g2, selectors=[], type_arguments=None), label=None), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[], member=getLabel, postfix_operators=[], prefix_operators=[], qualifier=marker, selectors=[], type_arguments=None), name=label)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[], member=getLabelAnchor, postfix_operators=[], prefix_operators=[], qualifier=marker, selectors=[], type_arguments=None), name=anchor)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=RectangleAnchor, sub_type=None)), IfStatement(condition=BinaryOperation(operandl=MemberReference(member=label, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator=!=), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[], member=getLabelFont, postfix_operators=[], prefix_operators=[], qualifier=marker, selectors=[], type_arguments=None), name=labelFont)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Font, sub_type=None)), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=labelFont, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=setFont, postfix_operators=[], prefix_operators=[], qualifier=g2, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[MethodInvocation(arguments=[], member=getLabelPaint, postfix_operators=[], prefix_operators=[], qualifier=marker, selectors=[], type_arguments=None)], member=setPaint, postfix_operators=[], prefix_operators=[], qualifier=g2, selectors=[], type_arguments=None), label=None), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MemberReference(member=g2, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=orientation, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=dataArea, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MethodInvocation(arguments=[], member=getBounds2D, postfix_operators=[], prefix_operators=[], qualifier=line, selectors=[], type_arguments=None), MethodInvocation(arguments=[], member=getLabelOffset, postfix_operators=[], prefix_operators=[], qualifier=marker, selectors=[], type_arguments=None), MemberReference(member=EXPAND, postfix_operators=[], prefix_operators=[], qualifier=LengthAdjustmentType, selectors=[]), MemberReference(member=anchor, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=calculateRangeMarkerTextAnchorPoint, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), name=coordinates)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Point2D, sub_type=None)), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=label, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=g2, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), Cast(expression=MethodInvocation(arguments=[], member=getX, postfix_operators=[], prefix_operators=[], qualifier=coordinates, selectors=[], type_arguments=None), type=BasicType(dimensions=[], name=float)), Cast(expression=MethodInvocation(arguments=[], member=getY, postfix_operators=[], prefix_operators=[], qualifier=coordinates, selectors=[], type_arguments=None), type=BasicType(dimensions=[], name=float)), MethodInvocation(arguments=[], member=getLabelTextAnchor, postfix_operators=[], prefix_operators=[], qualifier=marker, selectors=[], type_arguments=None)], member=drawAlignedString, postfix_operators=[], prefix_operators=[], qualifier=TextUtilities, selectors=[], type_arguments=None), label=None)])), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=savedComposite, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=setComposite, postfix_operators=[], prefix_operators=[], qualifier=g2, selectors=[], type_arguments=None), label=None)]))], documentation=/**\n     * Draws a marker for the range axis.\n     *\n     * @param g2  the graphics device (not <code>null</code>).\n     * @param plot  the plot (not <code>null</code>).\n     * @param axis  the range axis (not <code>null</code>).\n     * @param marker  the marker to be drawn (not <code>null</code>).\n     * @param dataArea  the area inside the axes (not <code>null</code>).\n     *\n     * @see #drawDomainMarker(Graphics2D, CategoryPlot, CategoryAxis,\n     *     CategoryMarker, Rectangle2D)\n     */, modifiers={'public'}, name=drawRangeMarker, parameters=[FormalParameter(annotations=[], modifiers=set(), name=g2, type=ReferenceType(arguments=None, dimensions=[], name=Graphics2D, sub_type=None), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=plot, type=ReferenceType(arguments=None, dimensions=[], name=CategoryPlot, sub_type=None), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=axis, type=ReferenceType(arguments=None, dimensions=[], name=ValueAxis, sub_type=None), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=marker, type=ReferenceType(arguments=None, dimensions=[], name=Marker, sub_type=None), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=dataArea, type=ReferenceType(arguments=None, dimensions=[], name=Rectangle2D, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), name=anchorRect)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Rectangle2D, sub_type=None)), IfStatement(condition=BinaryOperation(operandl=MemberReference(member=orientation, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=HORIZONTAL, postfix_operators=[], prefix_operators=[], qualifier=PlotOrientation, selectors=[]), operator===), else_statement=IfStatement(condition=BinaryOperation(operandl=MemberReference(member=orientation, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=VERTICAL, postfix_operators=[], prefix_operators=[], qualifier=PlotOrientation, selectors=[]), operator===), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=anchorRect, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=MethodInvocation(arguments=[MemberReference(member=markerArea, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=labelOffsetType, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=CONTRACT, postfix_operators=[], prefix_operators=[], qualifier=LengthAdjustmentType, selectors=[])], member=createAdjustedRectangle, postfix_operators=[], prefix_operators=[], qualifier=markerOffset, selectors=[], type_arguments=None)), label=None)])), label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=anchorRect, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=MethodInvocation(arguments=[MemberReference(member=markerArea, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=CONTRACT, postfix_operators=[], prefix_operators=[], qualifier=LengthAdjustmentType, selectors=[]), MemberReference(member=labelOffsetType, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=createAdjustedRectangle, postfix_operators=[], prefix_operators=[], qualifier=markerOffset, selectors=[], type_arguments=None)), label=None)])), ReturnStatement(expression=MethodInvocation(arguments=[MemberReference(member=anchorRect, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=anchor, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=coordinates, postfix_operators=[], prefix_operators=[], qualifier=RectangleAnchor, selectors=[], type_arguments=None), label=None)], documentation=/**\n     * Calculates the (x, y) coordinates for drawing the label for a marker on\n     * the range axis.\n     *\n     * @param g2  the graphics device.\n     * @param orientation  the plot orientation.\n     * @param dataArea  the data area.\n     * @param markerArea  the rectangle surrounding the marker.\n     * @param markerOffset  the marker offset.\n     * @param labelOffsetType  the label offset type.\n     * @param anchor  the label anchor.\n     *\n     * @return The coordinates for drawing the marker label.\n     */, modifiers={'protected'}, name=calculateDomainMarkerTextAnchorPoint, parameters=[FormalParameter(annotations=[], modifiers=set(), name=g2, type=ReferenceType(arguments=None, dimensions=[], name=Graphics2D, sub_type=None), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=orientation, type=ReferenceType(arguments=None, dimensions=[], name=PlotOrientation, sub_type=None), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=dataArea, type=ReferenceType(arguments=None, dimensions=[], name=Rectangle2D, sub_type=None), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=markerArea, type=ReferenceType(arguments=None, dimensions=[], name=Rectangle2D, sub_type=None), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=markerOffset, type=ReferenceType(arguments=None, dimensions=[], name=RectangleInsets, sub_type=None), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=labelOffsetType, type=ReferenceType(arguments=None, dimensions=[], name=LengthAdjustmentType, sub_type=None), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=anchor, type=ReferenceType(arguments=None, dimensions=[], name=RectangleAnchor, sub_type=None), varargs=False)], return_type=ReferenceType(arguments=None, dimensions=[], name=Point2D, sub_type=None), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), name=anchorRect)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Rectangle2D, sub_type=None)), IfStatement(condition=BinaryOperation(operandl=MemberReference(member=orientation, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=HORIZONTAL, postfix_operators=[], prefix_operators=[], qualifier=PlotOrientation, selectors=[]), operator===), else_statement=IfStatement(condition=BinaryOperation(operandl=MemberReference(member=orientation, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=VERTICAL, postfix_operators=[], prefix_operators=[], qualifier=PlotOrientation, selectors=[]), operator===), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=anchorRect, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=MethodInvocation(arguments=[MemberReference(member=markerArea, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=CONTRACT, postfix_operators=[], prefix_operators=[], qualifier=LengthAdjustmentType, selectors=[]), MemberReference(member=labelOffsetType, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=createAdjustedRectangle, postfix_operators=[], prefix_operators=[], qualifier=markerOffset, selectors=[], type_arguments=None)), label=None)])), label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=anchorRect, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=MethodInvocation(arguments=[MemberReference(member=markerArea, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=labelOffsetType, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=CONTRACT, postfix_operators=[], prefix_operators=[], qualifier=LengthAdjustmentType, selectors=[])], member=createAdjustedRectangle, postfix_operators=[], prefix_operators=[], qualifier=markerOffset, selectors=[], type_arguments=None)), label=None)])), ReturnStatement(expression=MethodInvocation(arguments=[MemberReference(member=anchorRect, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=anchor, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=coordinates, postfix_operators=[], prefix_operators=[], qualifier=RectangleAnchor, selectors=[], type_arguments=None), label=None)], documentation=/**\n     * Calculates the (x, y) coordinates for drawing a marker label.\n     *\n     * @param g2  the graphics device.\n     * @param orientation  the plot orientation.\n     * @param dataArea  the data area.\n     * @param markerArea  the rectangle surrounding the marker.\n     * @param markerOffset  the marker offset.\n     * @param labelOffsetType  the label offset type.\n     * @param anchor  the label anchor.\n     *\n     * @return The coordinates for drawing the marker label.\n     */, modifiers={'protected'}, name=calculateRangeMarkerTextAnchorPoint, parameters=[FormalParameter(annotations=[], modifiers=set(), name=g2, type=ReferenceType(arguments=None, dimensions=[], name=Graphics2D, sub_type=None), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=orientation, type=ReferenceType(arguments=None, dimensions=[], name=PlotOrientation, sub_type=None), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=dataArea, type=ReferenceType(arguments=None, dimensions=[], name=Rectangle2D, sub_type=None), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=markerArea, type=ReferenceType(arguments=None, dimensions=[], name=Rectangle2D, sub_type=None), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=markerOffset, type=ReferenceType(arguments=None, dimensions=[], name=RectangleInsets, sub_type=None), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=labelOffsetType, type=ReferenceType(arguments=None, dimensions=[], name=LengthAdjustmentType, sub_type=None), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=anchor, type=ReferenceType(arguments=None, dimensions=[], name=RectangleAnchor, sub_type=None), varargs=False)], return_type=ReferenceType(arguments=None, dimensions=[], name=Point2D, sub_type=None), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[], member=getPlot, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), name=p)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=CategoryPlot, sub_type=None)), IfStatement(condition=BinaryOperation(operandl=MemberReference(member=p, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator===), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[ReturnStatement(expression=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), label=None)])), IfStatement(condition=BinaryOperation(operandl=MethodInvocation(arguments=[MemberReference(member=series, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=isSeriesVisible, postfix_operators=[], prefix_operators=['!'], qualifier=, selectors=[], type_arguments=None), operandr=MethodInvocation(arguments=[MemberReference(member=series, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=isSeriesVisibleInLegend, postfix_operators=[], prefix_operators=['!'], qualifier=, selectors=[], type_arguments=None), operator=||), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[ReturnStatement(expression=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), label=None)])), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MemberReference(member=datasetIndex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=getDataset, postfix_operators=[], prefix_operators=[], qualifier=p, selectors=[], type_arguments=None), name=dataset)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=CategoryDataset, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=legendItemLabelGenerator, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None), MethodInvocation(arguments=[MemberReference(member=dataset, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=series, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=generateLabel, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None, type_arguments=None)]), name=label)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MemberReference(member=label, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), name=description)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), name=toolTipText)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), IfStatement(condition=BinaryOperation(operandl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=legendItemToolTipGenerator, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator=!=), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=toolTipText, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=legendItemToolTipGenerator, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None), MethodInvocation(arguments=[MemberReference(member=dataset, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=series, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=generateLabel, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None, type_arguments=None)])), label=None)])), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), name=urlText)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), IfStatement(condition=BinaryOperation(operandl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=legendItemURLGenerator, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator=!=), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=urlText, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=legendItemURLGenerator, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None), MethodInvocation(arguments=[MemberReference(member=dataset, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=series, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=generateLabel, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None, type_arguments=None)])), label=None)])), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MemberReference(member=series, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=lookupLegendShape, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), name=shape)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Shape, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MemberReference(member=series, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=lookupSeriesPaint, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), name=paint)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Paint, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MemberReference(member=series, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=lookupSeriesOutlinePaint, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), name=outlinePaint)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Paint, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MemberReference(member=series, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=lookupSeriesOutlineStroke, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), name=outlineStroke)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Stroke, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ClassCreator(arguments=[MemberReference(member=label, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=description, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=toolTipText, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=urlText, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=shape, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=paint, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=outlineStroke, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=outlinePaint, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=LegendItem, sub_type=None)), name=item)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=LegendItem, sub_type=None)), StatementExpression(expression=MethodInvocation(arguments=[MethodInvocation(arguments=[MemberReference(member=series, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=lookupLegendTextFont, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None)], member=setLabelFont, postfix_operators=[], prefix_operators=[], qualifier=item, selectors=[], type_arguments=None), label=None), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MemberReference(member=series, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=lookupLegendTextPaint, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), name=labelPaint)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Paint, sub_type=None)), IfStatement(condition=BinaryOperation(operandl=MemberReference(member=labelPaint, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator=!=), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=labelPaint, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=setLabelPaint, postfix_operators=[], prefix_operators=[], qualifier=item, selectors=[], type_arguments=None), label=None)])), StatementExpression(expression=MethodInvocation(arguments=[MethodInvocation(arguments=[MemberReference(member=series, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=getRowKey, postfix_operators=[], prefix_operators=[], qualifier=dataset, selectors=[], type_arguments=None)], member=setSeriesKey, postfix_operators=[], prefix_operators=[], qualifier=item, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=series, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=setSeriesIndex, postfix_operators=[], prefix_operators=[], qualifier=item, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=dataset, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=setDataset, postfix_operators=[], prefix_operators=[], qualifier=item, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=datasetIndex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=setDatasetIndex, postfix_operators=[], prefix_operators=[], qualifier=item, selectors=[], type_arguments=None), label=None), ReturnStatement(expression=MemberReference(member=item, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)], documentation=/**\n     * Returns a legend item for a series.  This default implementation will\n     * return <code>null</code> if {@link #isSeriesVisible(int)} or\n     * {@link #isSeriesVisibleInLegend(int)} returns <code>false</code>.\n     *\n     * @param datasetIndex  the dataset index (zero-based).\n     * @param series  the series index (zero-based).\n     *\n     * @return The legend item (possibly <code>null</code>).\n     *\n     * @see #getLegendItems()\n     */, modifiers={'public'}, name=getLegendItem, parameters=[FormalParameter(annotations=[], modifiers=set(), name=datasetIndex, type=BasicType(dimensions=[], name=int), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=series, type=BasicType(dimensions=[], name=int), varargs=False)], return_type=ReferenceType(arguments=None, dimensions=[], name=LegendItem, sub_type=None), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[IfStatement(condition=BinaryOperation(operandl=MemberReference(member=obj, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[]), operator===), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[ReturnStatement(expression=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=true), label=None)])), IfStatement(condition=BinaryOperation(operandl=MemberReference(member=obj, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=ReferenceType(arguments=None, dimensions=[], name=AbstractCategoryItemRenderer, sub_type=None), operator=instanceof), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[ReturnStatement(expression=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false), label=None)])), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Cast(expression=MemberReference(member=obj, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type=ReferenceType(arguments=None, dimensions=[], name=AbstractCategoryItemRenderer, sub_type=None)), name=that)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=AbstractCategoryItemRenderer, sub_type=None)), IfStatement(condition=MethodInvocation(arguments=[This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=itemLabelGeneratorList, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), MemberReference(member=itemLabelGeneratorList, postfix_operators=[], prefix_operators=[], qualifier=that, selectors=[])], member=equal, postfix_operators=[], prefix_operators=['!'], qualifier=ObjectUtilities, selectors=[], type_arguments=None), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[ReturnStatement(expression=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false), label=None)])), IfStatement(condition=MethodInvocation(arguments=[This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=baseItemLabelGenerator, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), MemberReference(member=baseItemLabelGenerator, postfix_operators=[], prefix_operators=[], qualifier=that, selectors=[])], member=equal, postfix_operators=[], prefix_operators=['!'], qualifier=ObjectUtilities, selectors=[], type_arguments=None), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[ReturnStatement(expression=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false), label=None)])), IfStatement(condition=MethodInvocation(arguments=[This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=toolTipGeneratorList, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), MemberReference(member=toolTipGeneratorList, postfix_operators=[], prefix_operators=[], qualifier=that, selectors=[])], member=equal, postfix_operators=[], prefix_operators=['!'], qualifier=ObjectUtilities, selectors=[], type_arguments=None), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[ReturnStatement(expression=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false), label=None)])), IfStatement(condition=MethodInvocation(arguments=[This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=baseToolTipGenerator, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), MemberReference(member=baseToolTipGenerator, postfix_operators=[], prefix_operators=[], qualifier=that, selectors=[])], member=equal, postfix_operators=[], prefix_operators=['!'], qualifier=ObjectUtilities, selectors=[], type_arguments=None), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[ReturnStatement(expression=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false), label=None)])), IfStatement(condition=MethodInvocation(arguments=[This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=urlGeneratorList, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), MemberReference(member=urlGeneratorList, postfix_operators=[], prefix_operators=[], qualifier=that, selectors=[])], member=equal, postfix_operators=[], prefix_operators=['!'], qualifier=ObjectUtilities, selectors=[], type_arguments=None), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[ReturnStatement(expression=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false), label=None)])), IfStatement(condition=MethodInvocation(arguments=[This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=baseURLGenerator, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), MemberReference(member=baseURLGenerator, postfix_operators=[], prefix_operators=[], qualifier=that, selectors=[])], member=equal, postfix_operators=[], prefix_operators=['!'], qualifier=ObjectUtilities, selectors=[], type_arguments=None), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[ReturnStatement(expression=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false), label=None)])), IfStatement(condition=MethodInvocation(arguments=[This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=legendItemLabelGenerator, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), MemberReference(member=legendItemLabelGenerator, postfix_operators=[], prefix_operators=[], qualifier=that, selectors=[])], member=equal, postfix_operators=[], prefix_operators=['!'], qualifier=ObjectUtilities, selectors=[], type_arguments=None), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[ReturnStatement(expression=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false), label=None)])), IfStatement(condition=MethodInvocation(arguments=[This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=legendItemToolTipGenerator, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), MemberReference(member=legendItemToolTipGenerator, postfix_operators=[], prefix_operators=[], qualifier=that, selectors=[])], member=equal, postfix_operators=[], prefix_operators=['!'], qualifier=ObjectUtilities, selectors=[], type_arguments=None), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[ReturnStatement(expression=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false), label=None)])), IfStatement(condition=MethodInvocation(arguments=[This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=legendItemURLGenerator, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), MemberReference(member=legendItemURLGenerator, postfix_operators=[], prefix_operators=[], qualifier=that, selectors=[])], member=equal, postfix_operators=[], prefix_operators=['!'], qualifier=ObjectUtilities, selectors=[], type_arguments=None), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[ReturnStatement(expression=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false), label=None)])), IfStatement(condition=MethodInvocation(arguments=[This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=backgroundAnnotations, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), MemberReference(member=backgroundAnnotations, postfix_operators=[], prefix_operators=[], qualifier=that, selectors=[])], member=equal, postfix_operators=[], prefix_operators=['!'], qualifier=ObjectUtilities, selectors=[], type_arguments=None), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[ReturnStatement(expression=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false), label=None)])), IfStatement(condition=MethodInvocation(arguments=[This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=foregroundAnnotations, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), MemberReference(member=foregroundAnnotations, postfix_operators=[], prefix_operators=[], qualifier=that, selectors=[])], member=equal, postfix_operators=[], prefix_operators=['!'], qualifier=ObjectUtilities, selectors=[], type_arguments=None), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[ReturnStatement(expression=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false), label=None)])), ReturnStatement(expression=SuperMethodInvocation(arguments=[MemberReference(member=obj, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=equals, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type_arguments=None), label=None)], documentation=/**\n     * Tests this renderer for equality with another object.\n     *\n     * @param obj  the object.\n     *\n     * @return <code>true</code> or <code>false</code>.\n     */, modifiers={'public'}, name=equals, parameters=[FormalParameter(annotations=[], modifiers=set(), name=obj, type=ReferenceType(arguments=None, dimensions=[], name=Object, sub_type=None), varargs=False)], return_type=BasicType(dimensions=[], name=boolean), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=SuperMethodInvocation(arguments=[], member=hashCode, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type_arguments=None), name=result)], modifiers=set(), type=BasicType(dimensions=[], name=int)), ReturnStatement(expression=MemberReference(member=result, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)], documentation=/**\n     * Returns a hash code for the renderer.\n     *\n     * @return The hash code.\n     */, modifiers={'public'}, name=hashCode, parameters=[], return_type=BasicType(dimensions=[], name=int), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), name=result)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=DrawingSupplier, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[], member=getPlot, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), name=cp)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=CategoryPlot, sub_type=None)), IfStatement(condition=BinaryOperation(operandl=MemberReference(member=cp, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator=!=), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=result, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=MethodInvocation(arguments=[], member=getDrawingSupplier, postfix_operators=[], prefix_operators=[], qualifier=cp, selectors=[], type_arguments=None)), label=None)])), ReturnStatement(expression=MemberReference(member=result, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)], documentation=/**\n     * Returns the drawing supplier from the plot.\n     *\n     * @return The drawing supplier (possibly <code>null</code>).\n     */, modifiers={'public'}, name=getDrawingSupplier, parameters=[], return_type=ReferenceType(arguments=None, dimensions=[], name=DrawingSupplier, sub_type=None), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[IfStatement(condition=BinaryOperation(operandl=MemberReference(member=orientation, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator===), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[ThrowStatement(expression=ClassCreator(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"Null 'orientation' argument.\")], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=IllegalArgumentException, sub_type=None)), label=None)])), IfStatement(condition=BinaryOperation(operandl=MemberReference(member=crosshairState, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator=!=), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[IfStatement(condition=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=plot, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None), MethodInvocation(arguments=[], member=isRangeCrosshairLockedOnData, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None, type_arguments=None)]), else_statement=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=rowKey, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=columnKey, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=datasetIndex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=transX, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=orientation, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=updateCrosshairX, postfix_operators=[], prefix_operators=[], qualifier=crosshairState, selectors=[], type_arguments=None), label=None)]), label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=rowKey, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=columnKey, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=value, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=datasetIndex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=transX, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=transY, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=orientation, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=updateCrosshairPoint, postfix_operators=[], prefix_operators=[], qualifier=crosshairState, selectors=[], type_arguments=None), label=None)]))]))], documentation=/**\n     * Considers the current (x, y) coordinate and updates the crosshair point\n     * if it meets the criteria (usually means the (x, y) coordinate is the\n     * closest to the anchor point so far).\n     *\n     * @param crosshairState  the crosshair state (<code>null</code> permitted,\n     *                        but the method does nothing in that case).\n     * @param rowKey  the row key.\n     * @param columnKey  the column key.\n     * @param value  the data value.\n     * @param datasetIndex  the dataset index.\n     * @param transX  the x-value translated to Java2D space.\n     * @param transY  the y-value translated to Java2D space.\n     * @param orientation  the plot orientation (<code>null</code> not\n     *                     permitted).\n     *\n     * @since 1.0.11\n     */, modifiers={'protected'}, name=updateCrosshairValues, parameters=[FormalParameter(annotations=[], modifiers=set(), name=crosshairState, type=ReferenceType(arguments=None, dimensions=[], name=CategoryCrosshairState, sub_type=None), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=rowKey, type=ReferenceType(arguments=None, dimensions=[], name=Comparable, sub_type=None), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=columnKey, type=ReferenceType(arguments=None, dimensions=[], name=Comparable, sub_type=None), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=value, type=BasicType(dimensions=[], name=double), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=datasetIndex, type=BasicType(dimensions=[], name=int), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=transX, type=BasicType(dimensions=[], name=double), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=transY, type=BasicType(dimensions=[], name=double), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=orientation, type=ReferenceType(arguments=None, dimensions=[], name=PlotOrientation, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MemberReference(member=row, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=column, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=selected, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=getItemLabelGenerator, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), name=generator)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=CategoryItemLabelGenerator, sub_type=None)), IfStatement(condition=BinaryOperation(operandl=MemberReference(member=generator, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator=!=), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MemberReference(member=row, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=column, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=selected, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=getItemLabelFont, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), name=labelFont)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Font, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MemberReference(member=row, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=column, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=selected, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=getItemLabelPaint, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), name=paint)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Paint, sub_type=None)), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=labelFont, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=setFont, postfix_operators=[], prefix_operators=[], qualifier=g2, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=paint, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=setPaint, postfix_operators=[], prefix_operators=[], qualifier=g2, selectors=[], type_arguments=None), label=None), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MemberReference(member=dataset, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=row, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=column, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=generateLabel, postfix_operators=[], prefix_operators=[], qualifier=generator, selectors=[], type_arguments=None), name=label)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), name=position)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=ItemLabelPosition, sub_type=None)), IfStatement(condition=MemberReference(member=negative, postfix_operators=[], prefix_operators=['!'], qualifier=, selectors=[]), else_statement=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=position, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=MethodInvocation(arguments=[MemberReference(member=row, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=column, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=selected, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=getNegativeItemLabelPosition, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None)), label=None)]), label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=position, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=MethodInvocation(arguments=[MemberReference(member=row, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=column, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=selected, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=getPositiveItemLabelPosition, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None)), label=None)])), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MethodInvocation(arguments=[], member=getItemLabelAnchor, postfix_operators=[], prefix_operators=[], qualifier=position, selectors=[], type_arguments=None), MemberReference(member=x, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=orientation, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=calculateLabelAnchorPoint, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), name=anchorPoint)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Point2D, sub_type=None)), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=label, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=g2, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), Cast(expression=MethodInvocation(arguments=[], member=getX, postfix_operators=[], prefix_operators=[], qualifier=anchorPoint, selectors=[], type_arguments=None), type=BasicType(dimensions=[], name=float)), Cast(expression=MethodInvocation(arguments=[], member=getY, postfix_operators=[], prefix_operators=[], qualifier=anchorPoint, selectors=[], type_arguments=None), type=BasicType(dimensions=[], name=float)), MethodInvocation(arguments=[], member=getTextAnchor, postfix_operators=[], prefix_operators=[], qualifier=position, selectors=[], type_arguments=None), MethodInvocation(arguments=[], member=getAngle, postfix_operators=[], prefix_operators=[], qualifier=position, selectors=[], type_arguments=None), MethodInvocation(arguments=[], member=getRotationAnchor, postfix_operators=[], prefix_operators=[], qualifier=position, selectors=[], type_arguments=None)], member=drawRotatedString, postfix_operators=[], prefix_operators=[], qualifier=TextUtilities, selectors=[], type_arguments=None), label=None)]))], documentation=/**\n     * Draws an item label.\n     *\n     * @param g2  the graphics device.\n     * @param orientation  the orientation.\n     * @param dataset  the dataset.\n     * @param row  the row.\n     * @param column  the column.\n     * @param selected  is the item selected?\n     * @param x  the x coordinate (in Java2D space).\n     * @param y  the y coordinate (in Java2D space).\n     * @param negative  indicates a negative value (which affects the item\n     *                  label position).\n     *\n     * @since 1.2.0\n     */, modifiers={'protected'}, name=drawItemLabel, parameters=[FormalParameter(annotations=[], modifiers=set(), name=g2, type=ReferenceType(arguments=None, dimensions=[], name=Graphics2D, sub_type=None), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=orientation, type=ReferenceType(arguments=None, dimensions=[], name=PlotOrientation, sub_type=None), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=dataset, type=ReferenceType(arguments=None, dimensions=[], name=CategoryDataset, sub_type=None), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=row, type=BasicType(dimensions=[], name=int), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=column, type=BasicType(dimensions=[], name=int), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=selected, type=BasicType(dimensions=[], name=boolean), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=x, type=BasicType(dimensions=[], name=double), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=y, type=BasicType(dimensions=[], name=double), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=negative, type=BasicType(dimensions=[], name=boolean), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), name=iterator)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Iterator, sub_type=None)), IfStatement(condition=MethodInvocation(arguments=[MemberReference(member=FOREGROUND, postfix_operators=[], prefix_operators=[], qualifier=Layer, selectors=[])], member=equals, postfix_operators=[], prefix_operators=[], qualifier=layer, selectors=[], type_arguments=None), else_statement=IfStatement(condition=MethodInvocation(arguments=[MemberReference(member=BACKGROUND, postfix_operators=[], prefix_operators=[], qualifier=Layer, selectors=[])], member=equals, postfix_operators=[], prefix_operators=[], qualifier=layer, selectors=[], type_arguments=None), else_statement=BlockStatement(label=None, statements=[ThrowStatement(expression=ClassCreator(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"Unknown layer.\")], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=RuntimeException, sub_type=None)), label=None)]), label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=iterator, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=backgroundAnnotations, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None), MethodInvocation(arguments=[], member=iterator, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None, type_arguments=None)])), label=None)])), label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=iterator, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=foregroundAnnotations, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None), MethodInvocation(arguments=[], member=iterator, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None, type_arguments=None)])), label=None)])), WhileStatement(body=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Cast(expression=MethodInvocation(arguments=[], member=next, postfix_operators=[], prefix_operators=[], qualifier=iterator, selectors=[], type_arguments=None), type=ReferenceType(arguments=None, dimensions=[], name=CategoryAnnotation, sub_type=None)), name=annotation)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=CategoryAnnotation, sub_type=None)), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=g2, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=plot, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), MemberReference(member=dataArea, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=domainAxis, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=rangeAxis, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), MemberReference(member=info, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=draw, postfix_operators=[], prefix_operators=[], qualifier=annotation, selectors=[], type_arguments=None), label=None)]), condition=MethodInvocation(arguments=[], member=hasNext, postfix_operators=[], prefix_operators=[], qualifier=iterator, selectors=[], type_arguments=None), label=None)], documentation=/**\n     * Draws all the annotations for the specified layer.\n     *\n     * @param g2  the graphics device.\n     * @param dataArea  the data area.\n     * @param domainAxis  the domain axis.\n     * @param rangeAxis  the range axis.\n     * @param layer  the layer.\n     * @param info  the plot rendering info.\n     *\n     * @since 1.2.0\n     */, modifiers={'public'}, name=drawAnnotations, parameters=[FormalParameter(annotations=[], modifiers=set(), name=g2, type=ReferenceType(arguments=None, dimensions=[], name=Graphics2D, sub_type=None), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=dataArea, type=ReferenceType(arguments=None, dimensions=[], name=Rectangle2D, sub_type=None), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=domainAxis, type=ReferenceType(arguments=None, dimensions=[], name=CategoryAxis, sub_type=None), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=rangeAxis, type=ReferenceType(arguments=None, dimensions=[], name=ValueAxis, sub_type=None), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=layer, type=ReferenceType(arguments=None, dimensions=[], name=Layer, sub_type=None), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=info, type=ReferenceType(arguments=None, dimensions=[], name=PlotRenderingInfo, sub_type=None), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Cast(expression=SuperMethodInvocation(arguments=[], member=clone, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type_arguments=None), type=ReferenceType(arguments=None, dimensions=[], name=AbstractCategoryItemRenderer, sub_type=None)), name=clone)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=AbstractCategoryItemRenderer, sub_type=None)), IfStatement(condition=BinaryOperation(operandl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=itemLabelGeneratorList, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator=!=), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=itemLabelGeneratorList, postfix_operators=[], prefix_operators=[], qualifier=clone, selectors=[]), type==, value=Cast(expression=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=itemLabelGeneratorList, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None), MethodInvocation(arguments=[], member=clone, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None, type_arguments=None)]), type=ReferenceType(arguments=None, dimensions=[], name=ObjectList, sub_type=None))), label=None)])), IfStatement(condition=BinaryOperation(operandl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=baseItemLabelGenerator, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator=!=), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[IfStatement(condition=BinaryOperation(operandl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=baseItemLabelGenerator, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), operandr=ReferenceType(arguments=None, dimensions=[], name=PublicCloneable, sub_type=None), operator=instanceof), else_statement=BlockStatement(label=None, statements=[ThrowStatement(expression=ClassCreator(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"ItemLabelGenerator not cloneable.\")], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=CloneNotSupportedException, sub_type=None)), label=None)]), label=None, then_statement=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Cast(expression=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=baseItemLabelGenerator, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type=ReferenceType(arguments=None, dimensions=[], name=PublicCloneable, sub_type=None)), name=pc)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=PublicCloneable, sub_type=None)), StatementExpression(expression=Assignment(expressionl=MemberReference(member=baseItemLabelGenerator, postfix_operators=[], prefix_operators=[], qualifier=clone, selectors=[]), type==, value=Cast(expression=MethodInvocation(arguments=[], member=clone, postfix_operators=[], prefix_operators=[], qualifier=pc, selectors=[], type_arguments=None), type=ReferenceType(arguments=None, dimensions=[], name=CategoryItemLabelGenerator, sub_type=None))), label=None)]))])), IfStatement(condition=BinaryOperation(operandl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=toolTipGeneratorList, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator=!=), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=toolTipGeneratorList, postfix_operators=[], prefix_operators=[], qualifier=clone, selectors=[]), type==, value=Cast(expression=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=toolTipGeneratorList, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None), MethodInvocation(arguments=[], member=clone, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None, type_arguments=None)]), type=ReferenceType(arguments=None, dimensions=[], name=ObjectList, sub_type=None))), label=None)])), IfStatement(condition=BinaryOperation(operandl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=baseToolTipGenerator, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator=!=), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[IfStatement(condition=BinaryOperation(operandl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=baseToolTipGenerator, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), operandr=ReferenceType(arguments=None, dimensions=[], name=PublicCloneable, sub_type=None), operator=instanceof), else_statement=BlockStatement(label=None, statements=[ThrowStatement(expression=ClassCreator(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"Base tool tip generator not cloneable.\")], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=CloneNotSupportedException, sub_type=None)), label=None)]), label=None, then_statement=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Cast(expression=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=baseToolTipGenerator, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type=ReferenceType(arguments=None, dimensions=[], name=PublicCloneable, sub_type=None)), name=pc)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=PublicCloneable, sub_type=None)), StatementExpression(expression=Assignment(expressionl=MemberReference(member=baseToolTipGenerator, postfix_operators=[], prefix_operators=[], qualifier=clone, selectors=[]), type==, value=Cast(expression=MethodInvocation(arguments=[], member=clone, postfix_operators=[], prefix_operators=[], qualifier=pc, selectors=[], type_arguments=None), type=ReferenceType(arguments=None, dimensions=[], name=CategoryToolTipGenerator, sub_type=None))), label=None)]))])), IfStatement(condition=BinaryOperation(operandl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=urlGeneratorList, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator=!=), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=urlGeneratorList, postfix_operators=[], prefix_operators=[], qualifier=clone, selectors=[]), type==, value=Cast(expression=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=urlGeneratorList, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None), MethodInvocation(arguments=[], member=clone, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None, type_arguments=None)]), type=ReferenceType(arguments=None, dimensions=[], name=ObjectList, sub_type=None))), label=None)])), IfStatement(condition=BinaryOperation(operandl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=baseURLGenerator, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator=!=), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[IfStatement(condition=BinaryOperation(operandl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=baseURLGenerator, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), operandr=ReferenceType(arguments=None, dimensions=[], name=PublicCloneable, sub_type=None), operator=instanceof), else_statement=BlockStatement(label=None, statements=[ThrowStatement(expression=ClassCreator(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"Base item URL generator not cloneable.\")], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=CloneNotSupportedException, sub_type=None)), label=None)]), label=None, then_statement=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Cast(expression=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=baseURLGenerator, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type=ReferenceType(arguments=None, dimensions=[], name=PublicCloneable, sub_type=None)), name=pc)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=PublicCloneable, sub_type=None)), StatementExpression(expression=Assignment(expressionl=MemberReference(member=baseURLGenerator, postfix_operators=[], prefix_operators=[], qualifier=clone, selectors=[]), type==, value=Cast(expression=MethodInvocation(arguments=[], member=clone, postfix_operators=[], prefix_operators=[], qualifier=pc, selectors=[], type_arguments=None), type=ReferenceType(arguments=None, dimensions=[], name=CategoryURLGenerator, sub_type=None))), label=None)]))])), IfStatement(condition=BinaryOperation(operandl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=legendItemLabelGenerator, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), operandr=ReferenceType(arguments=None, dimensions=[], name=PublicCloneable, sub_type=None), operator=instanceof), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=legendItemLabelGenerator, postfix_operators=[], prefix_operators=[], qualifier=clone, selectors=[]), type==, value=Cast(expression=MethodInvocation(arguments=[This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=legendItemLabelGenerator, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)])], member=clone, postfix_operators=[], prefix_operators=[], qualifier=ObjectUtilities, selectors=[], type_arguments=None), type=ReferenceType(arguments=None, dimensions=[], name=CategorySeriesLabelGenerator, sub_type=None))), label=None)])), IfStatement(condition=BinaryOperation(operandl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=legendItemToolTipGenerator, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), operandr=ReferenceType(arguments=None, dimensions=[], name=PublicCloneable, sub_type=None), operator=instanceof), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=legendItemToolTipGenerator, postfix_operators=[], prefix_operators=[], qualifier=clone, selectors=[]), type==, value=Cast(expression=MethodInvocation(arguments=[This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=legendItemToolTipGenerator, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)])], member=clone, postfix_operators=[], prefix_operators=[], qualifier=ObjectUtilities, selectors=[], type_arguments=None), type=ReferenceType(arguments=None, dimensions=[], name=CategorySeriesLabelGenerator, sub_type=None))), label=None)])), IfStatement(condition=BinaryOperation(operandl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=legendItemURLGenerator, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), operandr=ReferenceType(arguments=None, dimensions=[], name=PublicCloneable, sub_type=None), operator=instanceof), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=legendItemURLGenerator, postfix_operators=[], prefix_operators=[], qualifier=clone, selectors=[]), type==, value=Cast(expression=MethodInvocation(arguments=[This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=legendItemURLGenerator, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)])], member=clone, postfix_operators=[], prefix_operators=[], qualifier=ObjectUtilities, selectors=[], type_arguments=None), type=ReferenceType(arguments=None, dimensions=[], name=CategorySeriesLabelGenerator, sub_type=None))), label=None)])), ReturnStatement(expression=MemberReference(member=clone, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)], documentation=/**\n     * Returns an independent copy of the renderer.  The <code>plot</code>\n     * reference is shallow copied.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException  can be thrown if one of the objects\n     *         belonging to the renderer does not support cloning (for example,\n     *         an item label generator).\n     */, modifiers={'public'}, name=clone, parameters=[], return_type=ReferenceType(arguments=None, dimensions=[], name=Object, sub_type=None), throws=['CloneNotSupportedException'], type_parameters=None), MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MemberReference(member=dataset, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=indexOf, postfix_operators=[], prefix_operators=[], qualifier=plot, selectors=[], type_arguments=None), name=datasetIndex)], modifiers=set(), type=BasicType(dimensions=[], name=int)), ReturnStatement(expression=MethodInvocation(arguments=[MemberReference(member=datasetIndex, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=getDomainAxisForDataset, postfix_operators=[], prefix_operators=[], qualifier=plot, selectors=[], type_arguments=None), label=None)], documentation=/**\n     * Returns the domain axis that is used for the specified dataset.\n     *\n     * @param plot  the plot (<code>null</code> not permitted).\n     * @param dataset  the dataset (<code>null</code> not permitted).\n     *\n     * @return A domain axis.\n     */, modifiers={'protected'}, name=getDomainAxis, parameters=[FormalParameter(annotations=[], modifiers=set(), name=plot, type=ReferenceType(arguments=None, dimensions=[], name=CategoryPlot, sub_type=None), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=dataset, type=ReferenceType(arguments=None, dimensions=[], name=CategoryDataset, sub_type=None), varargs=False)], return_type=ReferenceType(arguments=None, dimensions=[], name=CategoryAxis, sub_type=None), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MemberReference(member=index, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=getRangeAxis, postfix_operators=[], prefix_operators=[], qualifier=plot, selectors=[], type_arguments=None), name=result)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=ValueAxis, sub_type=None)), IfStatement(condition=BinaryOperation(operandl=MemberReference(member=result, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator===), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=result, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=MethodInvocation(arguments=[], member=getRangeAxis, postfix_operators=[], prefix_operators=[], qualifier=plot, selectors=[], type_arguments=None)), label=None)])), ReturnStatement(expression=MemberReference(member=result, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)], documentation=/**\n     * Returns a range axis for a plot.\n     *\n     * @param plot  the plot.\n     * @param index  the axis index.\n     *\n     * @return A range axis.\n     */, modifiers={'protected'}, name=getRangeAxis, parameters=[FormalParameter(annotations=[], modifiers=set(), name=plot, type=ReferenceType(arguments=None, dimensions=[], name=CategoryPlot, sub_type=None), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=index, type=BasicType(dimensions=[], name=int), varargs=False)], return_type=ReferenceType(arguments=None, dimensions=[], name=ValueAxis, sub_type=None), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ClassCreator(arguments=[], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=LegendItemCollection, sub_type=None)), name=result)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=LegendItemCollection, sub_type=None)), IfStatement(condition=BinaryOperation(operandl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=plot, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator===), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[ReturnStatement(expression=MemberReference(member=result, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)])), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=plot, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None), MethodInvocation(arguments=[This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[])], member=getIndexOf, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None, type_arguments=None)]), name=index)], modifiers=set(), type=BasicType(dimensions=[], name=int)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=plot, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None), MethodInvocation(arguments=[MemberReference(member=index, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=getDataset, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None, type_arguments=None)]), name=dataset)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=CategoryDataset, sub_type=None)), IfStatement(condition=BinaryOperation(operandl=MemberReference(member=dataset, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator=!=), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[ReturnStatement(expression=MemberReference(member=result, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)])), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[], member=getRowCount, postfix_operators=[], prefix_operators=[], qualifier=dataset, selectors=[], type_arguments=None), name=seriesCount)], modifiers=set(), type=BasicType(dimensions=[], name=int)), IfStatement(condition=MethodInvocation(arguments=[], member=getRowRenderingOrder, postfix_operators=[], prefix_operators=[], qualifier=plot, selectors=[MethodInvocation(arguments=[MemberReference(member=ASCENDING, postfix_operators=[], prefix_operators=[], qualifier=SortOrder, selectors=[])], member=equals, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None, type_arguments=None)], type_arguments=None), else_statement=BlockStatement(label=None, statements=[ForStatement(body=BlockStatement(label=None, statements=[IfStatement(condition=MethodInvocation(arguments=[MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=isSeriesVisibleInLegend, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MemberReference(member=index, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=getLegendItem, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), name=item)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=LegendItem, sub_type=None)), IfStatement(condition=BinaryOperation(operandl=MemberReference(member=item, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator=!=), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=item, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=add, postfix_operators=[], prefix_operators=[], qualifier=result, selectors=[], type_arguments=None), label=None)]))]))]), control=ForControl(condition=BinaryOperation(operandl=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), operator=>=), init=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=BinaryOperation(operandl=MemberReference(member=seriesCount, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1), operator=-), name=i)], modifiers=set(), type=BasicType(dimensions=[], name=int)), update=[MemberReference(member=i, postfix_operators=['--'], prefix_operators=[], qualifier=, selectors=[])]), label=None)]), label=None, then_statement=BlockStatement(label=None, statements=[ForStatement(body=BlockStatement(label=None, statements=[IfStatement(condition=MethodInvocation(arguments=[MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=isSeriesVisibleInLegend, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MemberReference(member=index, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=getLegendItem, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), name=item)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=LegendItem, sub_type=None)), IfStatement(condition=BinaryOperation(operandl=MemberReference(member=item, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator=!=), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=item, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=add, postfix_operators=[], prefix_operators=[], qualifier=result, selectors=[], type_arguments=None), label=None)]))]))]), control=ForControl(condition=BinaryOperation(operandl=MemberReference(member=i, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=seriesCount, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=<), init=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0), name=i)], modifiers=set(), type=BasicType(dimensions=[], name=int)), update=[MemberReference(member=i, postfix_operators=['++'], prefix_operators=[], qualifier=, selectors=[])]), label=None)])), ReturnStatement(expression=MemberReference(member=result, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)], documentation=/**\n     * Returns a (possibly empty) collection of legend items for the series\n     * that this renderer is responsible for drawing.\n     *\n     * @return The legend item collection (never <code>null</code>).\n     *\n     * @see #getLegendItem(int, int)\n     */, modifiers={'public'}, name=getLegendItems, parameters=[], return_type=ReferenceType(arguments=None, dimensions=[], name=LegendItemCollection, sub_type=None), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[IfStatement(condition=BinaryOperation(operandl=MemberReference(member=hotspot, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator===), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[ThrowStatement(expression=ClassCreator(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"Null 'hotspot' argument.\")], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=IllegalArgumentException, sub_type=None)), label=None)])), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=entities, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=hotspot, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=dataset, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=row, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=column, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=selected, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.0), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=0.0)], member=addEntity, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), label=None)], documentation=/**\n     * Adds an entity with the specified hotspot.\n     *\n     * @param entities  the entity collection.\n     * @param hotspot  the hotspot (<code>null</code> not permitted).\n     * @param dataset  the dataset.\n     * @param row  the row index.\n     * @param column  the column index.\n     * @param selected  is the item selected?\n     *\n     * @since 1.2.0\n     */, modifiers={'protected'}, name=addEntity, parameters=[FormalParameter(annotations=[], modifiers=set(), name=entities, type=ReferenceType(arguments=None, dimensions=[], name=EntityCollection, sub_type=None), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=hotspot, type=ReferenceType(arguments=None, dimensions=[], name=Shape, sub_type=None), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=dataset, type=ReferenceType(arguments=None, dimensions=[], name=CategoryDataset, sub_type=None), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=row, type=BasicType(dimensions=[], name=int), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=column, type=BasicType(dimensions=[], name=int), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=selected, type=BasicType(dimensions=[], name=boolean), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[IfStatement(condition=MethodInvocation(arguments=[MemberReference(member=row, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=column, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=selected, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=getItemCreateEntity, postfix_operators=[], prefix_operators=['!'], qualifier=, selectors=[], type_arguments=None), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[ReturnStatement(expression=None, label=None)])), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MemberReference(member=hotspot, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), name=s)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Shape, sub_type=None)), IfStatement(condition=BinaryOperation(operandl=MemberReference(member=hotspot, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator===), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[], member=getDefaultEntityRadius, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), name=r)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=MemberReference(member=r, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2), operator=*), name=w)], modifiers=set(), type=BasicType(dimensions=[], name=double)), IfStatement(condition=BinaryOperation(operandl=MethodInvocation(arguments=[], member=getPlot, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[MethodInvocation(arguments=[], member=getOrientation, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None, type_arguments=None)], type_arguments=None), operandr=MemberReference(member=VERTICAL, postfix_operators=[], prefix_operators=[], qualifier=PlotOrientation, selectors=[]), operator===), else_statement=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=s, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=ClassCreator(arguments=[BinaryOperation(operandl=MemberReference(member=entityY, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=r, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=-), BinaryOperation(operandl=MemberReference(member=entityX, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=r, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=-), MemberReference(member=w, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=w, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=Ellipse2D, sub_type=ReferenceType(arguments=None, dimensions=None, name=Double, sub_type=None)))), label=None)]), label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=s, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=ClassCreator(arguments=[BinaryOperation(operandl=MemberReference(member=entityX, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=r, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=-), BinaryOperation(operandl=MemberReference(member=entityY, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=r, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=-), MemberReference(member=w, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=w, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=Ellipse2D, sub_type=ReferenceType(arguments=None, dimensions=None, name=Double, sub_type=None)))), label=None)]))])), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), name=tip)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MemberReference(member=row, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=column, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=selected, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=getToolTipGenerator, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), name=generator)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=CategoryToolTipGenerator, sub_type=None)), IfStatement(condition=BinaryOperation(operandl=MemberReference(member=generator, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator=!=), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=tip, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=MethodInvocation(arguments=[MemberReference(member=dataset, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=row, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=column, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=generateToolTip, postfix_operators=[], prefix_operators=[], qualifier=generator, selectors=[], type_arguments=None)), label=None)])), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), name=url)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MemberReference(member=row, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=column, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=selected, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=getURLGenerator, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), name=urlster)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=CategoryURLGenerator, sub_type=None)), IfStatement(condition=BinaryOperation(operandl=MemberReference(member=urlster, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator=!=), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=url, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=MethodInvocation(arguments=[MemberReference(member=dataset, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=row, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=column, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=generateURL, postfix_operators=[], prefix_operators=[], qualifier=urlster, selectors=[], type_arguments=None)), label=None)])), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ClassCreator(arguments=[MemberReference(member=s, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=tip, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=url, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=dataset, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MethodInvocation(arguments=[MemberReference(member=row, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=getRowKey, postfix_operators=[], prefix_operators=[], qualifier=dataset, selectors=[], type_arguments=None), MethodInvocation(arguments=[MemberReference(member=column, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=getColumnKey, postfix_operators=[], prefix_operators=[], qualifier=dataset, selectors=[], type_arguments=None)], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=CategoryItemEntity, sub_type=None)), name=entity)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=CategoryItemEntity, sub_type=None)), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=entity, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=add, postfix_operators=[], prefix_operators=[], qualifier=entities, selectors=[], type_arguments=None), label=None)], documentation=/**\n     * Adds an entity to the collection.\n     *\n     * @param entities  the entity collection being populated.\n     * @param hotspot  the entity area (if <code>null</code> a default will be\n     *              used).\n     * @param dataset  the dataset.\n     * @param row  the series.\n     * @param column  the item.\n     * @param selected  is the item selected?\n     * @param entityX  the entity's center x-coordinate in user space (only\n     *                 used if <code>area</code> is <code>null</code>).\n     * @param entityY  the entity's center y-coordinate in user space (only\n     *                 used if <code>area</code> is <code>null</code>).\n     *\n     * @since 1.2.0\n     */, modifiers={'protected'}, name=addEntity, parameters=[FormalParameter(annotations=[], modifiers=set(), name=entities, type=ReferenceType(arguments=None, dimensions=[], name=EntityCollection, sub_type=None), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=hotspot, type=ReferenceType(arguments=None, dimensions=[], name=Shape, sub_type=None), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=dataset, type=ReferenceType(arguments=None, dimensions=[], name=CategoryDataset, sub_type=None), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=row, type=BasicType(dimensions=[], name=int), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=column, type=BasicType(dimensions=[], name=int), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=selected, type=BasicType(dimensions=[], name=boolean), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=entityX, type=BasicType(dimensions=[], name=double), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=entityY, type=BasicType(dimensions=[], name=double), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[ThrowStatement(expression=ClassCreator(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"Not implemented.\")], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=RuntimeException, sub_type=None)), label=None)], documentation=/**\n     * Returns a shape that can be used for hit testing on a data item drawn\n     * by the renderer.\n     *\n     * @param g2  the graphics device.\n     * @param dataArea  the area within which the data is being rendered.\n     * @param plot  the plot (can be used to obtain standard color\n     *              information etc).\n     * @param domainAxis  the domain axis.\n     * @param rangeAxis  the range axis.\n     * @param dataset  the dataset.\n     * @param row  the row index (zero-based).\n     * @param column  the column index (zero-based).\n     * @param selected  is the item selected?\n     *\n     * @return A shape equal to the hot spot for a data item.\n     */, modifiers={'public'}, name=createHotSpotShape, parameters=[FormalParameter(annotations=[], modifiers=set(), name=g2, type=ReferenceType(arguments=None, dimensions=[], name=Graphics2D, sub_type=None), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=dataArea, type=ReferenceType(arguments=None, dimensions=[], name=Rectangle2D, sub_type=None), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=plot, type=ReferenceType(arguments=None, dimensions=[], name=CategoryPlot, sub_type=None), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=domainAxis, type=ReferenceType(arguments=None, dimensions=[], name=CategoryAxis, sub_type=None), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=rangeAxis, type=ReferenceType(arguments=None, dimensions=[], name=ValueAxis, sub_type=None), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=dataset, type=ReferenceType(arguments=None, dimensions=[], name=CategoryDataset, sub_type=None), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=row, type=BasicType(dimensions=[], name=int), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=column, type=BasicType(dimensions=[], name=int), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=selected, type=BasicType(dimensions=[], name=boolean), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=state, type=ReferenceType(arguments=None, dimensions=[], name=CategoryItemRendererState, sub_type=None), varargs=False)], return_type=ReferenceType(arguments=None, dimensions=[], name=Shape, sub_type=None), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[IfStatement(condition=BinaryOperation(operandl=MemberReference(member=result, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator===), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=result, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=ClassCreator(arguments=[], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=Rectangle, sub_type=None))), label=None)])), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MemberReference(member=column, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=getColumnKey, postfix_operators=[], prefix_operators=[], qualifier=dataset, selectors=[], type_arguments=None), name=key)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Comparable, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MemberReference(member=row, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=column, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=getValue, postfix_operators=[], prefix_operators=[], qualifier=dataset, selectors=[], type_arguments=None), name=y)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Number, sub_type=None)), IfStatement(condition=BinaryOperation(operandl=MemberReference(member=y, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator===), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[ReturnStatement(expression=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), label=None)])), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MemberReference(member=key, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MethodInvocation(arguments=[MemberReference(member=domainAxis, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=getCategoriesForAxis, postfix_operators=[], prefix_operators=[], qualifier=plot, selectors=[], type_arguments=None), MemberReference(member=dataArea, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MethodInvocation(arguments=[], member=getDomainAxisEdge, postfix_operators=[], prefix_operators=[], qualifier=plot, selectors=[], type_arguments=None)], member=getCategoryMiddle, postfix_operators=[], prefix_operators=[], qualifier=domainAxis, selectors=[], type_arguments=None), name=xx)], modifiers=set(), type=BasicType(dimensions=[], name=double)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MethodInvocation(arguments=[], member=doubleValue, postfix_operators=[], prefix_operators=[], qualifier=y, selectors=[], type_arguments=None), MemberReference(member=dataArea, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MethodInvocation(arguments=[], member=getRangeAxisEdge, postfix_operators=[], prefix_operators=[], qualifier=plot, selectors=[], type_arguments=None)], member=valueToJava2D, postfix_operators=[], prefix_operators=[], qualifier=rangeAxis, selectors=[], type_arguments=None), name=yy)], modifiers=set(), type=BasicType(dimensions=[], name=double)), StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=MemberReference(member=xx, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2), operator=-), BinaryOperation(operandl=MemberReference(member=yy, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=2), operator=-), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=4), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=4)], member=setRect, postfix_operators=[], prefix_operators=[], qualifier=result, selectors=[], type_arguments=None), label=None), ReturnStatement(expression=MemberReference(member=result, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)], documentation=/**\n     * Returns the rectangular bounds for the hot spot for an item drawn by\n     * this renderer.  This is intended to provide a quick test for\n     * eliminating data points before more accurate testing against the\n     * shape returned by createHotSpotShape().\n     *\n     * @param g2\n     * @param dataArea\n     * @param plot\n     * @param domainAxis\n     * @param rangeAxis\n     * @param dataset\n     * @param row\n     * @param column\n     * @param selected\n     * @param result\n     * @return\n     */, modifiers={'public'}, name=createHotSpotBounds, parameters=[FormalParameter(annotations=[], modifiers=set(), name=g2, type=ReferenceType(arguments=None, dimensions=[], name=Graphics2D, sub_type=None), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=dataArea, type=ReferenceType(arguments=None, dimensions=[], name=Rectangle2D, sub_type=None), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=plot, type=ReferenceType(arguments=None, dimensions=[], name=CategoryPlot, sub_type=None), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=domainAxis, type=ReferenceType(arguments=None, dimensions=[], name=CategoryAxis, sub_type=None), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=rangeAxis, type=ReferenceType(arguments=None, dimensions=[], name=ValueAxis, sub_type=None), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=dataset, type=ReferenceType(arguments=None, dimensions=[], name=CategoryDataset, sub_type=None), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=row, type=BasicType(dimensions=[], name=int), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=column, type=BasicType(dimensions=[], name=int), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=selected, type=BasicType(dimensions=[], name=boolean), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=state, type=ReferenceType(arguments=None, dimensions=[], name=CategoryItemRendererState, sub_type=None), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=result, type=ReferenceType(arguments=None, dimensions=[], name=Rectangle2D, sub_type=None), varargs=False)], return_type=ReferenceType(arguments=None, dimensions=[], name=Rectangle2D, sub_type=None), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MemberReference(member=g2, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=dataArea, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=plot, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=domainAxis, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=rangeAxis, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=dataset, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=row, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=column, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=selected, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=state, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null)], member=createHotSpotBounds, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), name=bounds)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Rectangle2D, sub_type=None)), IfStatement(condition=BinaryOperation(operandl=MemberReference(member=bounds, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator===), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[ReturnStatement(expression=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false), label=None)])), ReturnStatement(expression=MethodInvocation(arguments=[MemberReference(member=xx, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=yy, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=contains, postfix_operators=[], prefix_operators=[], qualifier=bounds, selectors=[], type_arguments=None), label=None)], documentation=/**\n     * Returns <code>true</code> if the specified point (xx, yy) in Java2D\n     * space falls within the \"hot spot\" for the specified data item, and\n     * <code>false</code> otherwise.\n     *\n     * @param xx\n     * @param yy\n     * @param g2\n     * @param dataArea\n     * @param plot\n     * @param domainAxis\n     * @param rangeAxis\n     * @param dataset\n     * @param row\n     * @param column\n     * @param selected\n     *\n     * @return\n     *\n     * @since 1.2.0\n     */, modifiers={'public'}, name=hitTest, parameters=[FormalParameter(annotations=[], modifiers=set(), name=xx, type=BasicType(dimensions=[], name=double), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=yy, type=BasicType(dimensions=[], name=double), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=g2, type=ReferenceType(arguments=None, dimensions=[], name=Graphics2D, sub_type=None), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=dataArea, type=ReferenceType(arguments=None, dimensions=[], name=Rectangle2D, sub_type=None), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=plot, type=ReferenceType(arguments=None, dimensions=[], name=CategoryPlot, sub_type=None), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=domainAxis, type=ReferenceType(arguments=None, dimensions=[], name=CategoryAxis, sub_type=None), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=rangeAxis, type=ReferenceType(arguments=None, dimensions=[], name=ValueAxis, sub_type=None), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=dataset, type=ReferenceType(arguments=None, dimensions=[], name=CategoryDataset, sub_type=None), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=row, type=BasicType(dimensions=[], name=int), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=column, type=BasicType(dimensions=[], name=int), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=selected, type=BasicType(dimensions=[], name=boolean), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=state, type=ReferenceType(arguments=None, dimensions=[], name=CategoryItemRendererState, sub_type=None), varargs=False)], return_type=BasicType(dimensions=[], name=boolean), throws=None, type_parameters=None)], documentation=/**\n * An abstract base class that you can use to implement a new\n * {@link CategoryItemRenderer}.  When you create a new\n * {@link CategoryItemRenderer} you are not required to extend this class,\n * but it makes the job easier.\n */, extends=ReferenceType(arguments=None, dimensions=[], name=AbstractRenderer, sub_type=None), implements=[ReferenceType(arguments=None, dimensions=[], name=CategoryItemRenderer, sub_type=None), ReferenceType(arguments=None, dimensions=[], name=Cloneable, sub_type=None), ReferenceType(arguments=None, dimensions=[], name=PublicCloneable, sub_type=None), ReferenceType(arguments=None, dimensions=[], name=Serializable, sub_type=None)], modifiers={'abstract', 'public'}, name=AbstractCategoryItemRenderer, type_parameters=None)])"