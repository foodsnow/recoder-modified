stdout: ReturnStatement expression MethodInvocation arguments MemberReference member f_ter ^ ^ ^ MemberReference member goal_ter ^ ^ ^ MemberReference member min_ter ^ ^ ^ MemberReference member max_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ ^ member optimize_ter ^ ^ ^ ^ ^ 
return optimize(f, goal, min, max, 0);
ReturnStatement expression MethodInvocation arguments MemberReference member f_ter ^ ^ ^ MemberReference member goal_ter ^ ^ ^ MemberReference member min_ter ^ ^ ^ MemberReference member max_ter ^ ^ ^ Literal value <string>_ter ^ ^ ^ ^ member optimize_ter ^ ^ ^ ^ ^ 
return optimize(f, goal, min, max, "null");
ReturnStatement expression MethodInvocation arguments MemberReference member f_ter ^ ^ ^ ^ member optimize_ter ^ ^ ^ ^ ^ 
return optimize(f);
ReturnStatement expression MethodInvocation arguments MemberReference member f_ter ^ ^ ^ MemberReference member goal_ter ^ ^ ^ ^ member optimize_ter ^ ^ ^ ^ ^ 
return optimize(f, goal);
ReturnStatement expression MethodInvocation arguments MemberReference member f_ter ^ ^ ^ MemberReference member goal_ter ^ ^ ^ MemberReference member min_ter ^ ^ ^ MemberReference member max_ter ^ ^ ^ Literal value null_ter ^ ^ ^ ^ member optimize_ter ^ ^ ^ ^ ^ 
return optimize(f, goal, min, max, null);
ReturnStatement expression MethodInvocation arguments MemberReference member f_ter ^ ^ ^ MemberReference member goal_ter ^ ^ ^ MemberReference member min_ter ^ ^ ^ MemberReference member max_ter ^ ^ ^ Literal value false_ter ^ ^ ^ ^ member optimize_ter ^ ^ ^ ^ ^ 
return optimize(f, goal, min, max, false);
ReturnStatement expression MethodInvocation arguments MemberReference member f_ter ^ ^ ^ MemberReference member goal_ter ^ ^ ^ MemberReference member min_ter ^ ^ ^ ^ member optimize_ter ^ ^ ^ ^ ^ 
return optimize(f, goal, min);
ReturnStatement expression MethodInvocation arguments MemberReference member f_ter ^ ^ ^ MemberReference member goal_ter ^ ^ ^ MemberReference member goal_ter ^ ^ ^ MemberReference member min_ter ^ ^ ^ MemberReference member max_ter ^ ^ ^ ^ member optimize_ter ^ ^ ^ ^ ^ 
return optimize(f, goal, goal, min, max);
ReturnStatement expression MemberReference member f_ter ^ ^ ^ ^ ^ 
return f;
ReturnStatement expression MethodInvocation arguments MemberReference member f_ter ^ ^ ^ MemberReference member goal_ter ^ ^ ^ MemberReference member min_ter ^ ^ ^ MemberReference member max_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member optimize_ter ^ ^ ^ ^ ^ 
return optimize(f, goal, min, max, true);
ReturnStatement expression MethodInvocation arguments MemberReference member f_ter ^ ^ ^ MemberReference member goal_ter ^ ^ ^ MemberReference member goal_ter ^ ^ ^ ^ member optimize_ter ^ ^ ^ ^ ^ 
return optimize(f, goal, goal);
ReturnStatement expression MethodInvocation arguments MemberReference member f_ter ^ ^ ^ MemberReference member goal_ter ^ ^ ^ MemberReference member min_ter ^ ^ ^ MemberReference member max_ter ^ ^ ^ Literal value 1_ter ^ ^ ^ ^ member optimize_ter ^ ^ ^ ^ ^ 
return optimize(f, goal, min, max, 1);
ReturnStatement expression MethodInvocation arguments MemberReference member f_ter ^ ^ ^ MemberReference member goal_ter ^ ^ ^ MemberReference member min_ter ^ ^ ^ MemberReference member min_ter ^ ^ ^ MemberReference member max_ter ^ ^ ^ ^ member optimize_ter ^ ^ ^ ^ ^ 
return optimize(f, goal, min, min, max);
ReturnStatement expression MethodInvocation arguments MemberReference member f_ter ^ ^ ^ MemberReference member goal_ter ^ ^ ^ MemberReference member goal_ter ^ ^ ^ MemberReference member min_ter ^ ^ ^ ^ member optimize_ter ^ ^ ^ ^ ^ 
return optimize(f, goal, goal, min);
ReturnStatement expression MethodInvocation arguments MemberReference member f_ter ^ ^ ^ MemberReference member goal_ter ^ ^ ^ MemberReference member min_ter ^ ^ ^ MemberReference member max_ter ^ ^ ^ ^ member optimize_ter ^ ^ ^ ^ ^ 
return optimize(f, goal, min, max);
ReturnStatement expression MethodInvocation arguments MemberReference member f_ter ^ ^ ^ MemberReference member goal_ter ^ ^ ^ MemberReference member min_ter ^ ^ ^ MemberReference member max_ter ^ ^ ^ MemberReference member max_ter ^ ^ ^ ^ member optimize_ter ^ ^ ^ ^ ^ 
return optimize(f, goal, min, max, max);
ReturnStatement expression MethodInvocation arguments MemberReference member f_ter ^ ^ ^ MemberReference member f_ter ^ ^ ^ MemberReference member goal_ter ^ ^ ^ MemberReference member min_ter ^ ^ ^ MemberReference member max_ter ^ ^ ^ ^ member optimize_ter ^ ^ ^ ^ ^ 
return optimize(f, f, goal, min, max);
ReturnStatement expression MethodInvocation arguments MemberReference member f_ter ^ ^ ^ MemberReference member goal_ter ^ ^ ^ MemberReference member min_ter ^ ^ ^ MemberReference member min_ter ^ ^ ^ ^ member optimize_ter ^ ^ ^ ^ ^ 
return optimize(f, goal, min, min);
ReturnStatement expression MethodInvocation arguments MemberReference member f_ter ^ ^ ^ MemberReference member goal_ter ^ ^ ^ MemberReference member goal_ter ^ ^ ^ MemberReference member min_ter ^ ^ ^ MemberReference member min_ter ^ ^ ^ ^ member optimize_ter ^ ^ ^ ^ ^ 
return optimize(f, goal, goal, min, min);
ReturnStatement expression MethodInvocation arguments MemberReference member f_ter ^ ^ ^ MemberReference member goal_ter ^ ^ ^ MemberReference member min_ter ^ ^ ^ MemberReference member goal_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ ^ member optimize_ter ^ ^ ^ ^ ^ 
return optimize(f, goal, min, goal, 0);
ReturnStatement expression MethodInvocation arguments MemberReference member f_ter ^ ^ ^ MemberReference member goal_ter ^ ^ ^ MemberReference member goal_ter ^ ^ ^ MemberReference member max_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ ^ member optimize_ter ^ ^ ^ ^ ^ 
return optimize(f, goal, goal, max, 0);
ReturnStatement expression MethodInvocation arguments MemberReference member f_ter ^ ^ ^ MemberReference member goal_ter ^ ^ ^ MemberReference member min_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ MemberReference member max_ter ^ ^ ^ ^ member optimize_ter ^ ^ ^ ^ ^ 
return optimize(f, goal, min, 0, max);
ReturnStatement expression MethodInvocation arguments MemberReference member f_ter ^ ^ ^ MemberReference member goal_ter ^ ^ ^ MemberReference member min_ter ^ ^ ^ MemberReference member max_ter ^ ^ ^ MemberReference member par4 ^ ^ ^ ^ member optimize_ter ^ ^ ^ ^ ^ 
return optimize(f, goal, min, max, );

ReturnStatement expression MethodInvocation arguments MemberReference member f_ter ^ ^ ^ MemberReference member f_ter ^ ^ ^ MemberReference member goal_ter ^ ^ ^ ^ member optimize_ter ^ ^ ^ ^ ^ 
return optimize(f, f, goal);
ReturnStatement expression MethodInvocation arguments MemberReference member f_ter ^ ^ ^ MemberReference member goal_ter ^ ^ ^ MemberReference member goal_ter ^ ^ ^ MemberReference member goal_ter ^ ^ ^ MemberReference member max_ter ^ ^ ^ ^ member optimize_ter ^ ^ ^ ^ ^ 
return optimize(f, goal, goal, goal, max);
ReturnStatement expression MethodInvocation arguments MemberReference member f_ter ^ ^ ^ MemberReference member f_ter ^ ^ ^ MemberReference member goal_ter ^ ^ ^ MemberReference member min_ter ^ ^ ^ ^ member optimize_ter ^ ^ ^ ^ ^ 
return optimize(f, f, goal, min);
ReturnStatement expression MethodInvocation arguments MemberReference member f_ter ^ ^ ^ MemberReference member f_ter ^ ^ ^ ^ member optimize_ter ^ ^ ^ ^ ^ 
return optimize(f, f);
ReturnStatement expression MethodInvocation arguments MemberReference member goal_ter ^ ^ ^ MemberReference member goal_ter ^ ^ ^ MemberReference member min_ter ^ ^ ^ MemberReference member max_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ ^ member optimize_ter ^ ^ ^ ^ ^ 
return optimize(goal, goal, min, max, 0);
ReturnStatement expression MethodInvocation arguments MemberReference member f_ter ^ ^ ^ MemberReference member goal_ter ^ ^ ^ MemberReference member min_ter ^ ^ ^ MemberReference member f_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ ^ member optimize_ter ^ ^ ^ ^ ^ 
return optimize(f, goal, min, f, 0);
ReturnStatement expression MethodInvocation arguments MemberReference member f_ter ^ ^ ^ MemberReference member goal_ter ^ ^ ^ MemberReference member min_ter ^ ^ ^ MemberReference member min_ter ^ ^ ^ MemberReference member min_ter ^ ^ ^ ^ member optimize_ter ^ ^ ^ ^ ^ 
return optimize(f, goal, min, min, min);
ReturnStatement expression MethodInvocation arguments MemberReference member f_ter ^ ^ ^ MemberReference member f_ter ^ ^ ^ MemberReference member min_ter ^ ^ ^ MemberReference member max_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ ^ member optimize_ter ^ ^ ^ ^ ^ 
return optimize(f, f, min, max, 0);
ReturnStatement expression MethodInvocation arguments MemberReference member f_ter ^ ^ ^ MemberReference member goal_ter ^ ^ ^ MemberReference member f_ter ^ ^ ^ MemberReference member max_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ ^ member optimize_ter ^ ^ ^ ^ ^ 
return optimize(f, goal, f, max, 0);
ReturnStatement expression MethodInvocation arguments MemberReference member f_ter ^ ^ ^ MemberReference member f_ter ^ ^ ^ MemberReference member goal_ter ^ ^ ^ MemberReference member min_ter ^ ^ ^ MemberReference member min_ter ^ ^ ^ ^ member optimize_ter ^ ^ ^ ^ ^ 
return optimize(f, f, goal, min, min);
ReturnStatement expression MethodInvocation arguments MemberReference member f_ter ^ ^ ^ MemberReference member goal_ter ^ ^ ^ MemberReference member min_ter ^ ^ ^ MemberReference member min_ter ^ ^ ^ MemberReference member par4 ^ ^ ^ ^ member optimize_ter ^ ^ ^ ^ ^ 
return optimize(f, goal, min, min, );

ReturnStatement expression MethodInvocation arguments MemberReference member f_ter ^ ^ ^ MemberReference member goal_ter ^ ^ ^ MemberReference member goal_ter ^ ^ ^ MemberReference member min_ter ^ ^ ^ MemberReference member par4 ^ ^ ^ ^ member optimize_ter ^ ^ ^ ^ ^ 
return optimize(f, goal, goal, min, );

ReturnStatement expression MethodInvocation arguments MemberReference member f_ter ^ ^ ^ MemberReference member goal_ter ^ ^ ^ MemberReference member min_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ MemberReference member min_ter ^ ^ ^ ^ member optimize_ter ^ ^ ^ ^ ^ 
return optimize(f, goal, min, 0, min);
ReturnStatement expression MethodInvocation arguments MemberReference member f_ter ^ ^ ^ MemberReference member goal_ter ^ ^ ^ MemberReference member goal_ter ^ ^ ^ MemberReference member max_ter ^ ^ ^ MemberReference member max_ter ^ ^ ^ ^ member optimize_ter ^ ^ ^ ^ ^ 
return optimize(f, goal, goal, max, max);
ReturnStatement expression MethodInvocation arguments MemberReference member f_ter ^ ^ ^ MemberReference member goal_ter ^ ^ ^ MemberReference member min_ter ^ ^ ^ MemberReference member max_ter ^ ^ ^ MemberReference member min_ter ^ ^ ^ ^ member optimize_ter ^ ^ ^ ^ ^ 
return optimize(f, goal, min, max, min);
ReturnStatement expression MethodInvocation arguments MemberReference member f_ter ^ ^ ^ MemberReference member goal_ter ^ ^ ^ MemberReference member goal_ter ^ ^ ^ MemberReference member goal_ter ^ ^ ^ MemberReference member min_ter ^ ^ ^ ^ member optimize_ter ^ ^ ^ ^ ^ 
return optimize(f, goal, goal, goal, min);
ReturnStatement expression MethodInvocation arguments MemberReference member f_ter ^ ^ ^ MemberReference member goal_ter ^ ^ ^ MemberReference member goal_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ MemberReference member min_ter ^ ^ ^ ^ member optimize_ter ^ ^ ^ ^ ^ 
return optimize(f, goal, goal, 0, min);
ReturnStatement expression MethodInvocation arguments MemberReference member f_ter ^ ^ ^ MemberReference member goal_ter ^ ^ ^ MemberReference member goal_ter ^ ^ ^ MemberReference member goal_ter ^ ^ ^ ^ member optimize_ter ^ ^ ^ ^ ^ 
return optimize(f, goal, goal, goal);
IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member goal_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if((goal == null)){
return null;}
ReturnStatement expression MethodInvocation arguments MemberReference member f_ter ^ ^ ^ MemberReference member goal_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ MemberReference member min_ter ^ ^ ^ MemberReference member max_ter ^ ^ ^ ^ member optimize_ter ^ ^ ^ ^ ^ 
return optimize(f, goal, 0, min, max);
ReturnStatement expression MethodInvocation arguments MemberReference member f_ter ^ ^ ^ MemberReference member goal_ter ^ ^ ^ MemberReference member goal_ter ^ ^ ^ MemberReference member max_ter ^ ^ ^ ^ member optimize_ter ^ ^ ^ ^ ^ 
return optimize(f, goal, goal, max);
ReturnStatement expression MethodInvocation arguments MemberReference member f_ter ^ ^ ^ MemberReference member goal_ter ^ ^ ^ MemberReference member goal_ter ^ ^ ^ MemberReference member min_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ ^ member optimize_ter ^ ^ ^ ^ ^ 
return optimize(f, goal, goal, min, 0);
ReturnStatement expression MethodInvocation arguments MemberReference member f_ter ^ ^ ^ MemberReference member f_ter ^ ^ ^ MemberReference member goal_ter ^ ^ ^ MemberReference member goal_ter ^ ^ ^ MemberReference member max_ter ^ ^ ^ ^ member optimize_ter ^ ^ ^ ^ ^ 
return optimize(f, f, goal, goal, max);
ReturnStatement expression MethodInvocation arguments MemberReference member f_ter ^ ^ ^ MemberReference member goal_ter ^ ^ ^ MemberReference member min_ter ^ ^ ^ MemberReference member goal_ter ^ ^ ^ MemberReference member max_ter ^ ^ ^ ^ member optimize_ter ^ ^ ^ ^ ^ 
return optimize(f, goal, min, goal, max);
ReturnStatement expression MethodInvocation member optimize_ter ^ ^ ^ ^ ^ 
return optimize();
ReturnStatement expression MethodInvocation arguments ^ member optimize_ter ^ ^ ^ ^ ^ 
return optimize();
ReturnStatement expression MethodInvocation arguments MemberReference member f_ter ^ ^ ^ MemberReference member goal_ter ^ ^ ^ MemberReference member min_ter ^ ^ ^ MemberReference member min_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ ^ member optimize_ter ^ ^ ^ ^ ^ 
return optimize(f, goal, min, min, 0);
ReturnStatement expression MemberReference member goal_ter ^ ^ ^ ^ ^ 
return goal;
LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name bound1_ter ^ ^ initializer TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member i_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member min_ter ^ ^ ^ ^ if_false BinaryOperation operator +_ter ^ ^ operandl MemberReference member min_ter ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MethodInvocation qualifier generator_ter ^ ^ member nextDouble_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member max_ter ^ ^ ^ ^ operandr MemberReference member min_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
final double bound1 = ((i == 0))?min:(min + (generator.nextDouble() * (max - min)));

LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name bound1_ter ^ ^ initializer TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member i_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member min_ter ^ ^ ^ ^ if_false BinaryOperation operator +_ter ^ ^ operandl MemberReference member min_ter ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MethodInvocation qualifier generator_ter ^ ^ member nextGaussian_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member max_ter ^ ^ ^ ^ operandr MemberReference member min_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
final double bound1 = ((i == 0))?min:(min + (generator.nextGaussian() * (max - min)));

LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name bound1_ter ^ ^ initializer BinaryOperation operator +_ter ^ ^ operandl MemberReference member min_ter ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MethodInvocation qualifier generator_ter ^ ^ member nextDouble_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member max_ter ^ ^ ^ ^ operandr MemberReference member min_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
final double bound1 = (min + (generator.nextDouble() * (max - min)));

LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name bound1_ter ^ ^ initializer TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member i_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member min_ter ^ ^ ^ ^ if_false BinaryOperation operator +_ter ^ ^ operandl MemberReference member min_ter ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MethodInvocation qualifier generator_ter ^ ^ member getName_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member max_ter ^ ^ ^ ^ operandr MemberReference member min_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
final double bound1 = ((i == 0))?min:(min + (generator.getName() * (max - min)));

LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name bound1_ter ^ ^ initializer TernaryExpression condition BinaryOperation operator -_ter ^ ^ operandl MemberReference member i_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member min_ter ^ ^ ^ ^ if_false BinaryOperation operator +_ter ^ ^ operandl MemberReference member min_ter ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MethodInvocation qualifier generator_ter ^ ^ member nextDouble_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member max_ter ^ ^ ^ ^ operandr MemberReference member min_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
final double bound1 = ((i - 0))?min:(min + (generator.nextDouble() * (max - min)));

LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name bound1_ter ^ ^ initializer TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member i_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member min_ter ^ ^ ^ ^ if_false BinaryOperation operator +_ter ^ ^ operandl MemberReference member min_ter ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MethodInvocation qualifier generator_ter ^ ^ member getMaxEvaluations_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member max_ter ^ ^ ^ ^ operandr MemberReference member min_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
final double bound1 = ((i == 0))?min:(min + (generator.getMaxEvaluations() * (max - min)));

LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name bound1_ter ^ ^ initializer TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member i_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member min_ter ^ ^ ^ ^ if_false BinaryOperation operator +_ter ^ ^ operandl MemberReference member min_ter ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MethodInvocation qualifier generator_ter ^ ^ member nextDouble_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member i_ter ^ ^ ^ ^ operandr MemberReference member min_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
final double bound1 = ((i == 0))?min:(min + (generator.nextDouble() * (i - min)));

LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name bound1_ter ^ ^ initializer TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member i_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member min_ter ^ ^ ^ ^ if_false BinaryOperation operator +_ter ^ ^ operandl MemberReference member min_ter ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MethodInvocation qualifier generator_ter ^ ^ member nextDouble_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member max_ter ^ ^ ^ ^ operandr MemberReference member i_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
final double bound1 = ((i == 0))?min:(min + (generator.nextDouble() * (max - i)));

LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name bound1_ter ^ ^ initializer BinaryOperation operator *_ter ^ ^ operandl MethodInvocation qualifier generator_ter ^ ^ member nextDouble_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member max_ter ^ ^ ^ ^ operandr MemberReference member min_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
final double bound1 = (generator.nextDouble() * (max - min));

LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name bound1_ter ^ ^ initializer TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member i_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member min_ter ^ ^ ^ ^ if_false BinaryOperation operator +_ter ^ ^ operandl MemberReference member min_ter ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MethodInvocation qualifier generator_ter ^ ^ member getEvaluations_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member max_ter ^ ^ ^ ^ operandr MemberReference member min_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
final double bound1 = ((i == 0))?min:(min + (generator.getEvaluations() * (max - min)));

LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name bound1_ter ^ ^ initializer TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member i_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member min_ter ^ ^ ^ ^ if_false BinaryOperation operator +_ter ^ ^ operandl MemberReference member min_ter ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MethodInvocation qualifier generator_ter ^ ^ member optimize_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member max_ter ^ ^ ^ ^ operandr MemberReference member min_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
final double bound1 = ((i == 0))?min:(min + (generator.optimize() * (max - min)));

LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name bound1_ter ^ ^ initializer TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member i_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member min_ter ^ ^ ^ ^ if_false BinaryOperation operator +_ter ^ ^ operandl MemberReference member min_ter ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MethodInvocation qualifier generator_ter ^ ^ member toString_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member max_ter ^ ^ ^ ^ operandr MemberReference member min_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
final double bound1 = ((i == 0))?min:(min + (generator.toString() * (max - min)));

LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name bound1_ter ^ ^ initializer MethodInvocation qualifier generator_ter ^ ^ member nextDouble_ter ^ ^ ^ ^ ^ ^ ^ 
final double bound1 = generator.nextDouble();

LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name bound1_ter ^ ^ initializer TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member i_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member min_ter ^ ^ ^ ^ if_false BinaryOperation operator +_ter ^ ^ operandl MemberReference member min_ter ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MethodInvocation qualifier generator_ter ^ ^ member get_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member max_ter ^ ^ ^ ^ operandr MemberReference member min_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
final double bound1 = ((i == 0))?min:(min + (generator.get() * (max - min)));

LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name bound1_ter ^ ^ initializer TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member i_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member min_ter ^ ^ ^ ^ if_false BinaryOperation operator -_ter ^ ^ operandl MemberReference member min_ter ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MethodInvocation qualifier generator_ter ^ ^ member nextDouble_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member max_ter ^ ^ ^ ^ operandr MemberReference member min_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
final double bound1 = ((i == 0))?min:(min - (generator.nextDouble() * (max - min)));

LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name bound1_ter ^ ^ initializer TernaryExpression condition BinaryOperation operator +_ter ^ ^ operandl MemberReference member i_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member min_ter ^ ^ ^ ^ if_false BinaryOperation operator +_ter ^ ^ operandl MemberReference member min_ter ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MethodInvocation qualifier generator_ter ^ ^ member nextDouble_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member max_ter ^ ^ ^ ^ operandr MemberReference member min_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
final double bound1 = ((i + 0))?min:(min + (generator.nextDouble() * (max - min)));

LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name bound1_ter ^ ^ initializer TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member i_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member min_ter ^ ^ ^ ^ if_false BinaryOperation operator +_ter ^ ^ operandl MemberReference member min_ter ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MethodInvocation qualifier FastMath_ter ^ ^ member nextDouble_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member max_ter ^ ^ ^ ^ operandr MemberReference member min_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
final double bound1 = ((i == 0))?min:(min + (FastMath.nextDouble() * (max - min)));

LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name bound1_ter ^ ^ initializer TernaryExpression condition BinaryOperation operator +_ter ^ ^ operandl MemberReference member min_ter ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MethodInvocation qualifier generator_ter ^ ^ member nextDouble_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member max_ter ^ ^ ^ ^ operandr MemberReference member min_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ if_true MemberReference member min_ter ^ ^ ^ ^ if_false BinaryOperation operator +_ter ^ ^ operandl MemberReference member min_ter ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MethodInvocation qualifier generator_ter ^ ^ member nextDouble_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member max_ter ^ ^ ^ ^ operandr MemberReference member min_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
final double bound1 = ((min + (generator.nextDouble() * (max - min))))?min:(min + (generator.nextDouble() * (max - min)));

LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name bound1_ter ^ ^ initializer TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member i_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member min_ter ^ ^ ^ ^ if_false BinaryOperation operator +_ter ^ ^ operandl MemberReference member min_ter ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MethodInvocation qualifier generator_ter ^ ^ member nextDouble_ter ^ ^ ^ ^ operandr BinaryOperation operator +_ter ^ ^ operandl MemberReference member max_ter ^ ^ ^ ^ operandr MemberReference member min_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
final double bound1 = ((i == 0))?min:(min + (generator.nextDouble() * (max + min)));

LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name bound1_ter ^ ^ initializer TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member i_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member min_ter ^ ^ ^ ^ if_false BinaryOperation operator ==_ter ^ ^ operandl MemberReference member i_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
final double bound1 = ((i == 0))?min:(i == 0);

LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name bound1_ter ^ ^ initializer BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member i_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MethodInvocation qualifier generator_ter ^ ^ member nextDouble_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member max_ter ^ ^ ^ ^ operandr MemberReference member min_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
final double bound1 = ((i == 0) + (generator.nextDouble() * (max - min)));

LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name bound1_ter ^ ^ initializer Cast type BasicType name double_ter ^ ^ ^ ^ expression BinaryOperation operator +_ter ^ ^ operandl MemberReference member min_ter ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MethodInvocation qualifier generator_ter ^ ^ member nextDouble_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member max_ter ^ ^ ^ ^ operandr MemberReference member min_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
final double bound1 = (double)(min + (generator.nextDouble() * (max - min)));

LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name bound1_ter ^ ^ initializer BinaryOperation operator ==_ter ^ ^ operandl MemberReference member i_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
final double bound1 = (i == 0);

LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name bound1_ter ^ ^ initializer TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member i_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ if_true BinaryOperation operator +_ter ^ ^ operandl MemberReference member min_ter ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MethodInvocation qualifier generator_ter ^ ^ member nextDouble_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member max_ter ^ ^ ^ ^ operandr MemberReference member min_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ if_false BinaryOperation operator +_ter ^ ^ operandl MemberReference member min_ter ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MethodInvocation qualifier generator_ter ^ ^ member nextDouble_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member max_ter ^ ^ ^ ^ operandr MemberReference member min_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
final double bound1 = ((i == 0))?(min + (generator.nextDouble() * (max - min))):(min + (generator.nextDouble() * (max - min)));

LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name bound1_ter ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl MemberReference member max_ter ^ ^ ^ ^ operandr MemberReference member min_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
final double bound1 = (max - min);

LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name bound1_ter ^ ^ initializer TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member i_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member min_ter ^ ^ ^ ^ if_false BinaryOperation operator +_ter ^ ^ operandl MemberReference member min_ter ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MethodInvocation qualifier f_ter ^ ^ member nextDouble_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member max_ter ^ ^ ^ ^ operandr MemberReference member min_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
final double bound1 = ((i == 0))?min:(min + (f.nextDouble() * (max - min)));

LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name bound1_ter ^ ^ initializer TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member i_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member min_ter ^ ^ ^ ^ if_false BinaryOperation operator +_ter ^ ^ operandl MemberReference member min_ter ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MethodInvocation qualifier generator_ter ^ ^ member nextDouble_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member goal_ter ^ ^ ^ ^ operandr MemberReference member min_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
final double bound1 = ((i == 0))?min:(min + (generator.nextDouble() * (goal - min)));

LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name bound1_ter ^ ^ initializer TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member i_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member min_ter ^ ^ ^ ^ if_false BinaryOperation operator *_ter ^ ^ operandl MethodInvocation qualifier generator_ter ^ ^ member nextDouble_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member max_ter ^ ^ ^ ^ operandr MemberReference member min_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
final double bound1 = ((i == 0))?min:(generator.nextDouble() * (max - min));

LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name bound1_ter ^ ^ initializer TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member i_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member min_ter ^ ^ ^ ^ if_false BinaryOperation operator +_ter ^ ^ operandl MemberReference member min_ter ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MethodInvocation qualifier generator_ter ^ ^ member nextDouble_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member max_ter ^ ^ ^ ^ operandr MemberReference member goal_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
final double bound1 = ((i == 0))?min:(min + (generator.nextDouble() * (max - goal)));

LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name bound1_ter ^ ^ initializer TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member i_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member min_ter ^ ^ ^ ^ if_false BinaryOperation operator +_ter ^ ^ operandl MemberReference member min_ter ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MethodInvocation qualifier generator_ter ^ ^ member nextDouble_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member min_ter ^ ^ ^ ^ operandr MemberReference member min_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
final double bound1 = ((i == 0))?min:(min + (generator.nextDouble() * (min - min)));

LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name bound1_ter ^ ^ initializer TernaryExpression condition BinaryOperation operator *_ter ^ ^ operandl MethodInvocation qualifier generator_ter ^ ^ member nextDouble_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member max_ter ^ ^ ^ ^ operandr MemberReference member min_ter ^ ^ ^ ^ ^ ^ ^ ^ if_true MemberReference member min_ter ^ ^ ^ ^ if_false BinaryOperation operator +_ter ^ ^ operandl MemberReference member min_ter ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MethodInvocation qualifier generator_ter ^ ^ member nextDouble_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member max_ter ^ ^ ^ ^ operandr MemberReference member min_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
final double bound1 = ((generator.nextDouble() * (max - min)))?min:(min + (generator.nextDouble() * (max - min)));

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member i_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ 
if((i != 0)){


LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name bound1_ter ^ ^ initializer TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member min_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member min_ter ^ ^ ^ ^ if_false BinaryOperation operator +_ter ^ ^ operandl MemberReference member min_ter ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MethodInvocation qualifier generator_ter ^ ^ member nextDouble_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member max_ter ^ ^ ^ ^ operandr MemberReference member min_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
final double bound1 = ((min == 0))?min:(min + (generator.nextDouble() * (max - min)));

LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name bound1_ter ^ ^ initializer TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member i_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ if_true BinaryOperation operator ==_ter ^ ^ operandl MemberReference member i_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ if_false BinaryOperation operator +_ter ^ ^ operandl MemberReference member min_ter ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MethodInvocation qualifier generator_ter ^ ^ member nextDouble_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member max_ter ^ ^ ^ ^ operandr MemberReference member min_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
final double bound1 = ((i == 0))?(i == 0):(min + (generator.nextDouble() * (max - min)));

LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name bound1_ter ^ ^ initializer TernaryExpression condition BinaryOperation operator /_ter ^ ^ operandl MemberReference member i_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member min_ter ^ ^ ^ ^ if_false BinaryOperation operator +_ter ^ ^ operandl MemberReference member min_ter ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MethodInvocation qualifier generator_ter ^ ^ member nextDouble_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member max_ter ^ ^ ^ ^ operandr MemberReference member min_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
final double bound1 = ((i / 0))?min:(min + (generator.nextDouble() * (max - min)));

LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name bound1_ter ^ ^ initializer TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member i_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member min_ter ^ ^ ^ ^ if_false BinaryOperation operator +_ter ^ ^ operandl MemberReference member min_ter ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MethodInvocation qualifier optimizer_ter ^ ^ member nextDouble_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member max_ter ^ ^ ^ ^ operandr MemberReference member min_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
final double bound1 = ((i == 0))?min:(min + (optimizer.nextDouble() * (max - min)));

LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name bound1_ter ^ ^ initializer TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member i_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member min_ter ^ ^ ^ ^ if_false BinaryOperation operator +_ter ^ ^ operandl MemberReference member min_ter ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MethodInvocation qualifier generator_ter ^ ^ member nextDouble_ter ^ ^ ^ ^ operandr BinaryOperation operator /_ter ^ ^ operandl MemberReference member max_ter ^ ^ ^ ^ operandr MemberReference member min_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
final double bound1 = ((i == 0))?min:(min + (generator.nextDouble() * (max / min)));

LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name bound1_ter ^ ^ initializer TernaryExpression condition BinaryOperation operator <=_ter ^ ^ operandl MemberReference member i_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member min_ter ^ ^ ^ ^ if_false BinaryOperation operator +_ter ^ ^ operandl MemberReference member min_ter ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MethodInvocation qualifier generator_ter ^ ^ member nextDouble_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member max_ter ^ ^ ^ ^ operandr MemberReference member min_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
final double bound1 = ((i <= 0))?min:(min + (generator.nextDouble() * (max - min)));

LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name bound1_ter ^ ^ initializer TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member goal_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member min_ter ^ ^ ^ ^ if_false BinaryOperation operator +_ter ^ ^ operandl MemberReference member min_ter ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MethodInvocation qualifier generator_ter ^ ^ member nextDouble_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member max_ter ^ ^ ^ ^ operandr MemberReference member min_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
final double bound1 = ((goal == 0))?min:(min + (generator.nextDouble() * (max - min)));

LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name bound1_ter ^ ^ initializer TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member i_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member min_ter ^ ^ ^ ^ if_false BinaryOperation operator +_ter ^ ^ operandl MemberReference member min_ter ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MethodInvocation qualifier generator_ter ^ ^ member nextDouble_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member f_ter ^ ^ ^ ^ operandr MemberReference member min_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
final double bound1 = ((i == 0))?min:(min + (generator.nextDouble() * (f - min)));

ReturnStatement_ter ^ 
if (true) { return;
 }

LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name bound1_ter ^ ^ initializer TernaryExpression condition BinaryOperation operator *_ter ^ ^ operandl MemberReference member i_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member min_ter ^ ^ ^ ^ if_false BinaryOperation operator +_ter ^ ^ operandl MemberReference member min_ter ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MethodInvocation qualifier generator_ter ^ ^ member nextDouble_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member max_ter ^ ^ ^ ^ operandr MemberReference member min_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
final double bound1 = ((i * 0))?min:(min + (generator.nextDouble() * (max - min)));

LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name bound1_ter ^ ^ initializer TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member i_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member min_ter ^ ^ ^ ^ if_false BinaryOperation operator +_ter ^ ^ operandl MemberReference member min_ter ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MethodInvocation qualifier generator_ter ^ ^ member nextDouble_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member max_ter ^ ^ ^ ^ operandr MemberReference member f_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
final double bound1 = ((i == 0))?min:(min + (generator.nextDouble() * (max - f)));

LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name bound1_ter ^ ^ initializer TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member i_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member min_ter ^ ^ ^ ^ if_false BinaryOperation operator +_ter ^ ^ operandl MemberReference member min_ter ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MethodInvocation qualifier generator_ter ^ ^ member size_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member max_ter ^ ^ ^ ^ operandr MemberReference member min_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
final double bound1 = ((i == 0))?min:(min + (generator.size() * (max - min)));

LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name bound1_ter ^ ^ initializer TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member i_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member min_ter ^ ^ ^ ^ if_false BinaryOperation operator +_ter ^ ^ operandl MemberReference member min_ter ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MethodInvocation qualifier generator_ter ^ ^ member nextDouble_ter ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MemberReference member max_ter ^ ^ ^ ^ operandr MemberReference member min_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
final double bound1 = ((i == 0))?min:(min + (generator.nextDouble() * (max * min)));

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member i_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ 
if((i == 0)){


LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name bound2_ter ^ ^ initializer TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member i_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member max_ter ^ ^ ^ ^ if_false BinaryOperation operator +_ter ^ ^ operandl MemberReference member min_ter ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MethodInvocation qualifier generator_ter ^ ^ member nextDouble_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member max_ter ^ ^ ^ ^ operandr MemberReference member min_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
final double bound2 = ((i == 0))?max:(min + (generator.nextDouble() * (max - min)));

stderr: 