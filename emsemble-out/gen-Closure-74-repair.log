stdout: LocalVariableDeclaration type BasicType name long_ter ^ ^ ^ ^ declarators VariableDeclarator name lhType_ter ^ ^ initializer MethodInvocation qualifier left_ter ^ ^ member getType_ter ^ ^ ^ ^ ^ ^ ^ 
long lhType = left.getType();

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name lhType_ter ^ ^ initializer MethodInvocation qualifier NodeUtil_ter ^ ^ member getType_ter ^ ^ ^ ^ ^ ^ ^ 
int lhType = NodeUtil.getType();

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name lhType_ter ^ ^ initializer MethodInvocation qualifier right_ter ^ ^ member getType_ter ^ ^ ^ ^ ^ ^ ^ 
int lhType = right.getType();

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name lhType_ter ^ ^ initializer MethodInvocation qualifier left_ter ^ ^ member tryFoldComparison_ter ^ ^ ^ ^ ^ ^ ^ 
int lhType = left.tryFoldComparison();

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name lhType_ter ^ ^ initializer MethodInvocation qualifier left_ter ^ ^ member getType_ter ^ ^ ^ ^ ^ ^ ^ 
int lhType = left.getType();

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name lhType_ter ^ ^ initializer MethodInvocation qualifier left_ter ^ ^ member getString_ter ^ ^ ^ ^ ^ ^ ^ 
int lhType = left.getString();

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name lhType_ter ^ ^ initializer MethodInvocation qualifier left_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
int lhType = left.getFirstChild();

LocalVariableDeclaration type BasicType name boolean_ter ^ ^ ^ ^ declarators VariableDeclarator name lhType_ter ^ ^ initializer MethodInvocation qualifier left_ter ^ ^ member getType_ter ^ ^ ^ ^ ^ ^ ^ 
boolean lhType = left.getType();


StatementExpression expression MethodInvocation qualifier left_ter ^ ^ member getType_ter ^ ^ ^ ^ ^ 
left.getType();

LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name lhType_ter ^ ^ initializer MethodInvocation qualifier left_ter ^ ^ member getType_ter ^ ^ ^ ^ ^ ^ ^ 
final int lhType = left.getType();

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name lhType_ter ^ ^ initializer MethodInvocation member getType_ter ^ ^ ^ ^ ^ ^ ^ 
int lhType = getType();

StatementExpression expression Assignment expressionl MemberReference member lhType_ter ^ ^ ^ ^ value MethodInvocation qualifier left_ter ^ ^ member getType_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
lhType = left.getType();

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name lhType_ter ^ ^ initializer Cast type BasicType name int_ter ^ ^ ^ ^ expression MethodInvocation qualifier left_ter ^ ^ member getType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
int lhType = (int)left.getType();

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name lhType_ter ^ ^ initializer MethodInvocation qualifier left_ter ^ ^ arguments MethodInvocation qualifier left_ter ^ ^ member getType_ter ^ ^ ^ ^ member getType_ter ^ ^ ^ ^ ^ ^ ^ 
int lhType = left.getType(left.getType());

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name rhType_ter ^ ^ initializer MethodInvocation qualifier right_ter ^ ^ member getType_ter ^ ^ ^ ^ ^ ^ ^ 
int rhType = right.getType();

LocalVariableDeclaration type BasicType name Object_ter ^ ^ ^ ^ declarators VariableDeclarator name lhType_ter ^ ^ initializer MethodInvocation qualifier left_ter ^ ^ member getType_ter ^ ^ ^ ^ ^ ^ ^ 
Object lhType = left.getType();

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name lhType_ter ^ ^ initializer MethodInvocation qualifier right_ter ^ ^ arguments MethodInvocation qualifier left_ter ^ ^ member getType_ter ^ ^ ^ ^ member isLiteralValue_ter ^ ^ ^ ^ ^ ^ ^ 
int lhType = right.isLiteralValue(left.getType());

LocalVariableDeclaration type BasicType name long_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name lhType_ter ^ ^ initializer MethodInvocation qualifier left_ter ^ ^ member getType_ter ^ ^ ^ ^ ^ ^ ^ 
long[] lhType = left.getType();

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name lhType_ter ^ ^ initializer MethodInvocation qualifier left_ter ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member getType_ter ^ ^ ^ ^ ^ ^ ^ 
int lhType = left.getType(0);

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name lhType_ter ^ ^ initializer MethodInvocation qualifier left_ter ^ ^ arguments Literal value false_ter ^ ^ ^ ^ member getType_ter ^ ^ ^ ^ ^ ^ ^ 
int lhType = left.getType(false);

LocalVariableDeclaration type BasicType name par0 ^ ^ ^ ^ declarators VariableDeclarator name lhType_ter ^ ^ initializer MethodInvocation qualifier left_ter ^ ^ member getType_ter ^ ^ ^ ^ ^ ^ ^ 
 lhType = left.getType();

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name lhType_ter ^ ^ initializer MethodInvocation qualifier left_ter ^ ^ arguments MemberReference member lhType_ter ^ ^ ^ ^ member getType_ter ^ ^ ^ ^ ^ ^ ^ 
int lhType = left.getType(lhType);

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name lhType_ter ^ ^ initializer MethodInvocation qualifier left_ter ^ ^ arguments MethodInvocation qualifier left_ter ^ ^ member getType_ter ^ ^ ^ ^ member isLiteralValue_ter ^ ^ ^ ^ ^ ^ ^ 
int lhType = left.isLiteralValue(left.getType());

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name lhType_ter ^ ^ initializer MethodInvocation qualifier left_ter ^ ^ arguments Literal value true_ter ^ ^ ^ ^ member getType_ter ^ ^ ^ ^ ^ ^ ^ 
int lhType = left.getType(true);

LocalVariableDeclaration type BasicType name String_ter ^ ^ ^ ^ declarators VariableDeclarator name lhType_ter ^ ^ initializer MethodInvocation qualifier left_ter ^ ^ member getType_ter ^ ^ ^ ^ ^ ^ ^ 
String lhType = left.getType();

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name lhType_ter ^ ^ initializer MethodInvocation qualifier left_ter ^ ^ arguments Literal value 1_ter ^ ^ ^ ^ member getType_ter ^ ^ ^ ^ ^ ^ ^ 
int lhType = left.getType(1);

LocalVariableDeclaration type BasicType name int_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name lhType_ter ^ ^ initializer MethodInvocation qualifier left_ter ^ ^ member getType_ter ^ ^ ^ ^ ^ ^ ^ 
int[] lhType = left.getType();

LocalVariableDeclaration type BasicType name boolean_ter ^ ^ ^ ^ declarators VariableDeclarator name rhType_ter ^ ^ initializer MethodInvocation qualifier right_ter ^ ^ member getType_ter ^ ^ ^ ^ ^ ^ ^ 
boolean rhType = right.getType();

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators ^ ^ 
int ;


LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name lhType_ter ^ ^ initializer MethodInvocation qualifier right_ter ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member getType_ter ^ ^ ^ ^ ^ ^ ^ 
int lhType = right.getType(0);

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name lhType_ter ^ ^ initializer MethodInvocation qualifier right_ter ^ ^ arguments MemberReference member lhType_ter ^ ^ ^ ^ member getType_ter ^ ^ ^ ^ ^ ^ ^ 
int lhType = right.getType(lhType);

LocalVariableDeclaration type BasicType name List_ter ^ ^ ^ ^ declarators VariableDeclarator name lhType_ter ^ ^ initializer MethodInvocation qualifier left_ter ^ ^ member getType_ter ^ ^ ^ ^ ^ ^ ^ 
List lhType = left.getType();

stderr: 