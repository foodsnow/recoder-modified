stdout: condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member c_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ 
if((c == 0)){
condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member c_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ 
if((c != 0)){
condition BinaryOperation operator >=_ter ^ ^ operandl MemberReference member c_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ 
if((c >= 0)){
condition BinaryOperation operator <=_ter ^ ^ operandl MemberReference member c_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ 
if((c <= 0)){
condition BinaryOperation operator >_ter ^ ^ operandl MemberReference member c_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ 
if((c > 0)){
condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member c_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ 
if((c == 1)){
condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member v3_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ 
if((v3 == 0)){
condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member v3Su3_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ 
if((v3Su3 == 0)){
IfStatement condition MemberReference member v3Su3_ter ^ ^ ^ ^ ^ 
if(v3Su3){

condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member c_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ 
if((c < 0)){
condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member v2_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ 
if((v2 == 0)){
condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member uRef_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ 
if((uRef == 0)){
condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member u2_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ 
if((u2 == 0)){
condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member q0_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ 
if((q0 == 0)){
condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member vRef_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ 
if((vRef == 0)){
condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member q1_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ 
if((q1 == 0)){
IfStatement condition MemberReference member v3_ter ^ ^ ^ ^ ^ 
if(v3){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member c_ter ^ ^ ^ ^ operandr Literal prefix_operators -_ter ^ ^ value 1_ter ^ ^ ^ ^ ^ ^ 
if((c == -1)){
condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member c_ter ^ ^ ^ ^ operandr Literal value 2_ter ^ ^ ^ ^ ^ ^ 
if((c == 2)){
IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member c_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member c_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((c == 0) || (c == 0))){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member c_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ 
if(((c == 0) || 0)){

IfStatement condition MemberReference prefix_operators !_ter ^ ^ member v3Su3_ter ^ ^ ^ ^ ^ 
if(!v3Su3){

condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member c_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ 
if((c && 0)){
IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member c_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member v2_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((c == 0) || (v2 == null))){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member c_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member v2_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((c == 0) || (v2 == 0))){

IfStatement condition MemberReference member u2Prime_ter ^ ^ ^ ^ ^ 
if(u2Prime){

condition BinaryOperation operator -_ter ^ ^ operandl MemberReference member c_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ 
if((c - 0)){


IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member c_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member uRef_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((c == 0) || (uRef == null))){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member c_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member k_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((c == 0) || (k == 0))){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member c_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member u2_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((c == 0) || (u2 == null))){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member c_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member vRef_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((c == 0) || (vRef == null))){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member c_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ 
if((c == 0)){
condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member c_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ 
if((c != 0)){
condition BinaryOperation operator >=_ter ^ ^ operandl MemberReference member c_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ 
if((c >= 0)){
condition BinaryOperation operator <=_ter ^ ^ operandl MemberReference member c_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ 
if((c <= 0)){
IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member v3Su3_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((v3Su3 != null)){

condition BinaryOperation operator >_ter ^ ^ operandl MemberReference member c_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ 
if((c > 0)){
ReturnStatement_ter ^ 
if (true) { return;
 }

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member v3_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((v3 != null)){

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member u2Prime_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((u2Prime != null)){

StatementExpression expression Assignment expressionl MemberReference member c_ter ^ ^ ^ ^ value MethodInvocation qualifier k_ter ^ ^ arguments MemberReference member u2Prime_ter ^ ^ ^ ^ member dotProduct_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
c = k.dotProduct(u2Prime);

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member v3Su3_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ 
if((v3Su3 == 0)){
StatementExpression expression Assignment expressionl MemberReference member k_ter ^ ^ ^ ^ value MethodInvocation qualifier v1Su1_ter ^ ^ arguments MemberReference member v3Su3_ter ^ ^ ^ ^ member crossProduct_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
k = v1Su1.crossProduct(v3Su3);

StatementExpression expression Assignment expressionl MemberReference member vRef_ter ^ ^ ^ ^ value MemberReference member v2_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
vRef = v2;

StatementExpression expression Assignment expressionl MemberReference member c_ter ^ ^ ^ ^ value MethodInvocation qualifier k_ter ^ ^ arguments MethodInvocation qualifier u2_ter ^ ^ arguments MemberReference member u3_ter ^ ^ ^ ^ member crossProduct_ter ^ ^ ^ ^ member dotProduct_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
c = k.dotProduct(u2.crossProduct(u3));

StatementExpression expression Assignment expressionl MemberReference member k_ter ^ ^ ^ ^ value MethodInvocation qualifier v2Su2_ter ^ ^ arguments MemberReference member v3Su3_ter ^ ^ ^ ^ member crossProduct_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
k = v2Su2.crossProduct(v3Su3);

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member v3Su3_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((v3Su3 == null)){

StatementExpression expression Assignment expressionl MemberReference member q3_ter ^ ^ ^ ^ value Literal value 0.0_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
q3 = 0.0;

StatementExpression expression Assignment expressionl MemberReference member q2_ter ^ ^ ^ ^ value Literal value 0.0_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
q2 = 0.0;

StatementExpression expression Assignment expressionl MemberReference member uRef_ter ^ ^ ^ ^ value MemberReference member u2_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
uRef = u2;

StatementExpression expression Assignment expressionl MemberReference member q0_ter ^ ^ ^ ^ value Literal value 1.0_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
q0 = 1.0;

IfStatement condition MemberReference member v3Su3_ter ^ ^ ^ ^ ^ 
if(v3Su3){

condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member c_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ 
if((c < 0)){
StatementExpression expression MemberReference postfix_operators ++_ter ^ ^ member u2Prime_ter ^ ^ ^ ^ ^ 
u2Prime++;

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member u2Prime_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((u2Prime == null)){

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member v3Su3_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if((v3Su3 == null)){
return;
}
IfStatement condition MemberReference member v3_ter ^ ^ ^ ^ ^ 
if(v3){

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member v2_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((v2 != null)){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member c_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ 
if((c == 1)){
IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member v3_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((v3 == null)){

StatementExpression expression MemberReference postfix_operators ++_ter ^ ^ member v3Su3_ter ^ ^ ^ ^ ^ 
v3Su3++;

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member vRef_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((vRef != null)){

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc3 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if(( != null)){


IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member uRef_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((uRef != null)){

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member u2_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((u2 != null)){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member u2Prime_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ 
if((u2Prime == 0)){
condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member c_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ 
if((c == 0)){
condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member c_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ 
if((c != 0)){
condition BinaryOperation operator >=_ter ^ ^ operandl MemberReference member c_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ 
if((c >= 0)){
condition BinaryOperation operator <=_ter ^ ^ operandl MemberReference member c_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ 
if((c <= 0)){
condition BinaryOperation operator >_ter ^ ^ operandl MemberReference member c_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ 
if((c > 0)){
IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member v3Su3_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((v3Su3 != null)){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member v3Su3_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ 
if((v3Su3 == 0)){
IfStatement condition MemberReference member v3Su3_ter ^ ^ ^ ^ ^ 
if(v3Su3){

condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member c_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ 
if((c < 0)){
ReturnStatement_ter ^ 
if (true) { return;
 }

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member v3_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((v3 != null)){

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member u2Prime_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((u2Prime != null)){

StatementExpression expression Assignment expressionl MemberReference member c_ter ^ ^ ^ ^ value MethodInvocation qualifier k_ter ^ ^ arguments MemberReference member u2Prime_ter ^ ^ ^ ^ member dotProduct_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
c = k.dotProduct(u2Prime);

StatementExpression expression Assignment expressionl MemberReference member c_ter ^ ^ ^ ^ value MethodInvocation qualifier k_ter ^ ^ arguments MethodInvocation qualifier u2_ter ^ ^ arguments MemberReference member u3_ter ^ ^ ^ ^ member crossProduct_ter ^ ^ ^ ^ member dotProduct_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
c = k.dotProduct(u2.crossProduct(u3));

StatementExpression expression Assignment expressionl MemberReference member k_ter ^ ^ ^ ^ value MethodInvocation qualifier v2Su2_ter ^ ^ arguments MemberReference member v3Su3_ter ^ ^ ^ ^ member crossProduct_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
k = v2Su2.crossProduct(v3Su3);

StatementExpression expression Assignment expressionl MemberReference member vRef_ter ^ ^ ^ ^ value MemberReference member v2_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
vRef = v2;

StatementExpression expression Assignment expressionl MemberReference member k_ter ^ ^ ^ ^ value MethodInvocation qualifier v1Su1_ter ^ ^ arguments MemberReference member v3Su3_ter ^ ^ ^ ^ member crossProduct_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
k = v1Su1.crossProduct(v3Su3);

StatementExpression expression Assignment expressionl MemberReference member q3_ter ^ ^ ^ ^ value Literal value 0.0_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
q3 = 0.0;

StatementExpression expression Assignment expressionl MemberReference member q2_ter ^ ^ ^ ^ value Literal value 0.0_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
q2 = 0.0;

StatementExpression expression Assignment expressionl MemberReference member q0_ter ^ ^ ^ ^ value Literal value 1.0_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
q0 = 1.0;

StatementExpression expression Assignment expressionl MemberReference member uRef_ter ^ ^ ^ ^ value MemberReference member u2_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
uRef = u2;

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member u2Prime_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ 
if((u2Prime == 0)){
IfStatement condition MemberReference member v3_ter ^ ^ ^ ^ ^ 
if(v3){

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member v3Su3_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((v3Su3 == null)){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member c_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ 
if((c == 1)){


StatementExpression expression MemberReference postfix_operators ++_ter ^ ^ member u2Prime_ter ^ ^ ^ ^ ^ 
u2Prime++;

IfStatement condition MemberReference prefix_operators !_ter ^ ^ member v3Su3_ter ^ ^ ^ ^ ^ 
if(!v3Su3){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member v3_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ 
if((v3 == 0)){
IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member c_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member c_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((c == 0) || (c == 0))){

condition BinaryOperation operator -_ter ^ ^ operandl MemberReference member c_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ 
if((c - 0)){
IfStatement condition MemberReference member v3_ter ^ ^ ^ ^ ^ 
if(v3){

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member v3Su3_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if((v3Su3 == null)){
return;
}
IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member u2Prime_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((u2Prime == null)){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member v2_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ 
if((v2 == 0)){
StatementExpression expression MemberReference postfix_operators ++_ter ^ ^ member v3Su3_ter ^ ^ ^ ^ ^ 
v3Su3++;

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member v2_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((v2 != null)){

stderr: 