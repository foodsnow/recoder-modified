stdout: else_statement -> BlockStatement
using GPU
p
path org.apache.commons.math.complex.Complex
divide
Position(line=251, column=12)
FOUND IT!
path org.apache.commons.math.complex.Complex
divide
Position(line=291, column=12)
FOUND IT!
[{'bugid': 'Math-46', 'treeroot': <Searchnode.Node object at 0x7fde9a12a810>, 'troot': <Searchnode.Node object at 0x7fde9a12a810>, 'oldcode': '            return isZero ? NaN : INF;', 'filepath': 'buggy/Math-46/src/main/java/org/apache/commons/math/complex/Complex.java', 'subroot': <Searchnode.Node object at 0x7fde913f3890>, 'vardic': {'divide_ter': 'meth0', 'divisor_ter': 'par0', 'c_ter': 'loc0', 'd_ter': 'loc1', 'q_ter': 'loc4', 'denominator_ter': 'loc5'}, 'typedic': {'divisor_ter': 'Complex', 'c_ter': 'double', 'd_ter': 'double', 'q_ter': 'double', 'denominator_ter': 'double'}, 'idss': 'Math-46', 'classname': 'org.apache.commons.math.complex.Complex', 'precode': '/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the "License"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.commons.math.complex;\n\nimport java.io.Serializable;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.apache.commons.math.FieldElement;\nimport org.apache.commons.math.exception.NullArgumentException;\nimport org.apache.commons.math.exception.NotPositiveException;\nimport org.apache.commons.math.exception.util.LocalizedFormats;\nimport org.apache.commons.math.util.MathUtils;\nimport org.apache.commons.math.util.FastMath;\n\n/**\n * Representation of a Complex number, i.e. a number which has both a\n * real and imaginary part.\n * <br/>\n * Implementations of arithmetic operations handle {@code NaN} and\n * infinite values according to the rules for {@link java.lang.Double}, i.e.\n * {@link #equals} is an equivalence relation for all instances that have\n * a {@code NaN} in either real or imaginary part, e.g. the following are\n * considered equal:\n * <ul>\n *  <li>{@code 1 + NaNi}</li>\n *  <li>{@code NaN + i}</li>\n *  <li>{@code NaN + NaNi}</li>\n * </ul>\n * Note that this is in contradiction with the IEEE-754 standard for floating\n * point numbers (according to which the test {@code x == x} must fail if\n * {@code x} is {@code NaN}). The method\n * {@link MathUtils#equals(double,double,int) equals for primitive double} in\n * {@link MathUtils} conforms with IEEE-754 while this class conforms with\n * the standard behavior for Java object types.\n * <br/>\n * Implements Serializable since 2.0\n *\n * @version $Id$\n */\npublic class Complex implements FieldElement<Complex>, Serializable  {\n    /** The square root of -1. A number representing "0.0 + 1.0i" */\n    public static final Complex I = new Complex(0.0, 1.0);\n    // CHECKSTYLE: stop ConstantName\n    /** A complex number representing "NaN + NaNi" */\n    public static final Complex NaN = new Complex(Double.NaN, Double.NaN);\n    // CHECKSTYLE: resume ConstantName\n    /** A complex number representing "+INF + INFi" */\n    public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);\n    /** A complex number representing "1.0 + 0.0i" */\n    public static final Complex ONE = new Complex(1.0, 0.0);\n    /** A complex number representing "0.0 + 0.0i" */\n    public static final Complex ZERO = new Complex(0.0, 0.0);\n\n    /** Serializable version identifier */\n    private static final long serialVersionUID = -6195664516687396620L;\n\n    /** The imaginary part. */\n    private final double imaginary;\n    /** The real part. */\n    private final double real;\n    /** Record whether this complex number is equal to NaN. */\n    private final transient boolean isNaN;\n    /** Record whether this complex number is infinite. */\n    private final transient boolean isInfinite;\n    /** Record whether this complex number is zero. */\n    private final transient boolean isZero;\n\n    /**\n     * Create a complex number given only the real part.\n     *\n     * @param real Real part.\n     */\n    public Complex(double real) {\n        this(real, 0.0);\n    }\n\n    /**\n     * Create a complex number given the real and imaginary parts.\n     *\n     * @param real Real part.\n     * @param imaginary Imaginary part.\n     */\n    public Complex(double real, double imaginary) {\n        this.real = real;\n        this.imaginary = imaginary;\n\n        isNaN = Double.isNaN(real) || Double.isNaN(imaginary);\n        isInfinite = !isNaN &&\n            (Double.isInfinite(real) || Double.isInfinite(imaginary));\n        isZero = real == 0 && imaginary == 0;\n    }\n\n    /**\n     * Return the absolute value of this complex number.\n     * Returns {@code NaN} if either real or imaginary part is {@code NaN}\n     * and {@code Double.POSITIVE_INFINITY} if neither part is {@code NaN},\n     * but at least one part is infinite.\n     *\n     * @return the absolute value.\n     */\n    public double abs() {\n        if (isNaN) {\n            return Double.NaN;\n        }\n        if (isInfinite()) {\n            return Double.POSITIVE_INFINITY;\n        }\n        if (FastMath.abs(real) < FastMath.abs(imaginary)) {\n            if (imaginary == 0.0) {\n                return FastMath.abs(real);\n            }\n            double q = real / imaginary;\n            return FastMath.abs(imaginary) * FastMath.sqrt(1 + q * q);\n        } else {\n            if (real == 0.0) {\n                return FastMath.abs(imaginary);\n            }\n            double q = imaginary / real;\n            return FastMath.abs(real) * FastMath.sqrt(1 + q * q);\n        }\n    }\n\n    /**\n     * Returns a {@code Complex} whose value is\n     * {@code (this + addend)}.\n     * Uses the definitional formula\n     * <pre>\n     *  <code>\n     *   (a + bi) + (c + di) = (a+c) + (b+d)i\n     *  </code>\n     * </pre>\n     * <br/>\n     * If either {@code this} or {@code addend} has a {@code NaN} value in\n     * either part, {@link #NaN} is returned; otherwise {@code Infinite}\n     * and {@code NaN} values are returned in the parts of the result\n     * according to the rules for {@link java.lang.Double} arithmetic.\n     *\n     * @param  addend Value to be added to this {@code Complex}.\n     * @return {@code this + addend}.\n     * @throws NullArgumentException if {@code addend} is {@code null}.\n     */\n    public Complex add(Complex addend) throws NullArgumentException {\n        MathUtils.checkNotNull(addend);\n        if (isNaN || addend.isNaN) {\n            return NaN;\n        }\n\n        return createComplex(real + addend.getReal(),\n                             imaginary + addend.getImaginary());\n    }\n\n    /**\n     * Returns a {@code Complex} whose value is {@code (this + addend)},\n     * with {@code addend} interpreted as a real number.\n     *\n     * @param addend Value to be added to this {@code Complex}.\n     * @return {@code this + addend}.\n     * @see #add(Complex)\n     */\n    public Complex add(double addend) {\n        if (isNaN || Double.isNaN(addend)) {\n            return NaN;\n        }\n\n        return createComplex(real + addend, imaginary);\n    }\n\n     /**\n     * Return the conjugate of this complex number.\n     * The conjugate of {@code a + bi} is {@code a - bi}.\n     * <br/>\n     * {@link #NaN} is returned if either the real or imaginary\n     * part of this Complex number equals {@code Double.NaN}.\n     * <br/>\n     * If the imaginary part is infinite, and the real part is not\n     * {@code NaN}, the returned value has infinite imaginary part\n     * of the opposite sign, e.g. the conjugate of\n     * {@code 1 + POSITIVE_INFINITY i} is {@code 1 - NEGATIVE_INFINITY i}.\n     *\n     * @return the conjugate of this Complex object.\n     */\n    public Complex conjugate() {\n        if (isNaN) {\n            return NaN;\n        }\n\n        return createComplex(real, -imaginary);\n    }\n\n    /**\n     * Returns a {@code Complex} whose value is\n     * {@code (this / divisor)}.\n     * Implements the definitional formula\n     * <pre>\n     *  <code>\n     *    a + bi          ac + bd + (bc - ad)i\n     *    ----------- = -------------------------\n     *    c + di         c<sup>2</sup> + d<sup>2</sup>\n     *  </code>\n     * </pre>\n     * but uses\n     * <a href="http://doi.acm.org/10.1145/1039813.1039814">\n     * prescaling of operands</a> to limit the effects of overflows and\n     * underflows in the computation.\n     * <br/>\n     * {@code Infinite} and {@code NaN} values are handled according to the\n     * following rules, applied in the order presented:\n     * <ul>\n     *  <li>If either {@code this} or {@code divisor} has a {@code NaN} value\n     *   in either part, {@link #NaN} is returned.\n     *  </li>\n     *  <li>If {@code this} and {@code divisor} are both {@link #ZERO},\n     *   {@link #NaN} is returned.\n     *  </li>\n     *  <li>If {@code divisor} equals {@link #ZERO}, {@link #INF} is returned.\n     *  </li>\n     *  <li>If {@code this} and {@code divisor} are both infinite,\n     *   {@link #NaN} is returned.\n     *  </li>\n     *  <li>If {@code this} is finite (i.e., has no {@code Infinite} or\n     *   {@code NaN} parts) and {@code divisor} is infinite (one or both parts\n     *   infinite), {@link #ZERO} is returned.\n     *  </li>\n     *  <li>If {@code this} is infinite and {@code divisor} is finite,\n     *   {@code NaN} values are returned in the parts of the result if the\n     *   {@link java.lang.Double} rules applied to the definitional formula\n     *   force {@code NaN} results.\n     *  </li>\n     * </ul>\n     *\n     * @param divisor Value by which this {@code Complex} is to be divided.\n     * @return {@code this / divisor}.\n     * @throws NullArgumentException if {@code divisor} is {@code null}.\n     */\n    public Complex divide(Complex divisor)\n        throws NullArgumentException {\n        MathUtils.checkNotNull(divisor);\n        if (isNaN || divisor.isNaN) {\n            return NaN;\n        }\n\n        if (divisor.isZero) {\n            // return isZero ? NaN : INF; // See MATH-657', 'aftercode': '        }\n\n        if (divisor.isInfinite() && !isInfinite()) {\n            return ZERO;\n        }\n\n        final double c = divisor.getReal();\n        final double d = divisor.getImaginary();\n\n        if (FastMath.abs(c) < FastMath.abs(d)) {\n            double q = c / d;\n            double denominator = c * q + d;\n            return createComplex((real * q + imaginary) / denominator,\n                (imaginary * q - real) / denominator);\n        } else {\n            double q = d / c;\n            double denominator = d * q + c;\n            return createComplex((imaginary * q + real) / denominator,\n                (imaginary - real * q) / denominator);\n        }\n    }\n\n    /**\n     * Returns a {@code Complex} whose value is {@code (this / divisor)},\n     * with {@code divisor} interpreted as a real number.\n     *\n     * @param  divisor Value by which this {@code Complex} is to be divided.\n     * @return {@code this / divisor}.\n     * @see #divide(Complex)\n     */\n    public Complex divide(double divisor) {\n        if (isNaN || Double.isNaN(divisor)) {\n            return NaN;\n        }\n        if (divisor == 0d) {\n            // return isZero ? NaN : INF; // See MATH-657\n            return isZero ? NaN : INF;\n        }\n        if (Double.isInfinite(divisor)) {\n            return !isInfinite() ? ZERO : NaN;\n        }\n        return createComplex(real / divisor,\n                             imaginary  / divisor);\n    }\n\n    /**\n     * Test for the equality of two Complex objects.\n     * If both the real and imaginary parts of two complex numbers\n     * are exactly the same, and neither is {@code Double.NaN}, the two\n     * Complex objects are considered to be equal.\n     * All {@code NaN} values are considered to be equal - i.e, if either\n     * (or both) real and imaginary parts of the complex number are equal\n     * to {@code Double.NaN}, the complex number is equal to\n     * {@code NaN}.\n     *\n     * @param other Object to test for equality to this\n     * @return true if two Complex objects are equal, false if object is\n     * {@code null}, not an instance of Complex, or not equal to this Complex\n     * instance.\n     */\n    @Override\n    public boolean equals(Object other) {\n        if (this == other) {\n            return true;\n        }\n        if (other instanceof Complex){\n            Complex c = (Complex)other;\n            if (c.isNaN) {\n                return isNaN;\n            } else {\n                return (real == c.real) && (imaginary == c.imaginary);\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Get a hashCode for the complex number.\n     * Any {@code Double.NaN} value in real or imaginary part produces\n     * the same hash code {@code 7}.\n     *\n     * @return a hash code value for this object.\n     */\n    @Override\n    public int hashCode() {\n        if (isNaN) {\n            return 7;\n        }\n        return 37 * (17 * MathUtils.hash(imaginary) +\n            MathUtils.hash(real));\n    }\n\n    /**\n     * Access the imaginary part.\n     *\n     * @return the imaginary part.\n     */\n    public double getImaginary() {\n        return imaginary;\n    }\n\n    /**\n     * Access the real part.\n     *\n     * @return the real part.\n     */\n    public double getReal() {\n        return real;\n    }\n\n    /**\n     * Checks whether either or both parts of this complex number is\n     * {@code NaN}.\n     *\n     * @return true if either or both parts of this complex number is\n     * {@code NaN}; false otherwise.\n     */\n    public boolean isNaN() {\n        return isNaN;\n    }\n\n    /**\n     * Checks whether either the real or imaginary part of this complex number\n     * takes an infinite value (either {@code Double.POSITIVE_INFINITY} or\n     * {@code Double.NEGATIVE_INFINITY}) and neither part\n     * is {@code NaN}.\n     *\n     * @return true if one or both parts of this complex number are infinite\n     * and neither part is {@code NaN}.\n     */\n    public boolean isInfinite() {\n        return isInfinite;\n    }\n\n    /**\n     * Returns a {@code Complex} whose value is {@code this * factor}.\n     * Implements preliminary checks for {@code NaN} and infinity followed by\n     * the definitional formula:\n     * <pre>\n     *  <code>\n     *   (a + bi)(c + di) = (ac - bd) + (ad + bc)i\n     *  </code>\n     * </pre>\n     * Returns {@link #NaN} if either {@code this} or {@code factor} has one or\n     * more {@code NaN} parts.\n     * <br/>\n     * Returns {@link #INF} if neither {@code this} nor {@code factor} has one\n     * or more {@code NaN} parts and if either {@code this} or {@code factor}\n     * has one or more infinite parts (same result is returned regardless of\n     * the sign of the components).\n     * <br/>\n     * Returns finite values in components of the result per the definitional\n     * formula in all remaining cases.\n     *\n     * @param  factor value to be multiplied by this {@code Complex}.\n     * @return {@code this * factor}.\n     * @throws NullArgumentException if {@code factor} is {@code null}.\n     */\n    public Complex multiply(Complex factor)\n        throws NullArgumentException {\n        MathUtils.checkNotNull(factor);\n        if (isNaN || factor.isNaN) {\n            return NaN;\n        }\n        if (Double.isInfinite(real) ||\n            Double.isInfinite(imaginary) ||\n            Double.isInfinite(factor.real) ||\n            Double.isInfinite(factor.imaginary)) {\n            // we don\'t use isInfinite() to avoid testing for NaN again\n            return INF;\n        }\n        return createComplex(real * factor.real - imaginary * factor.imaginary,\n                             real * factor.imaginary + imaginary * factor.real);\n    }\n\n    /**\n     * Returns a {@code Complex} whose value is {@code this * factor}, with {@code factor}\n     * interpreted as a real number.\n     *\n     * @param  factor value to be multiplied by this {@code Complex}.\n     * @return {@code this * factor}.\n     * @see #multiply(Complex)\n     */\n    public Complex multiply(double factor) {\n        if (isNaN || Double.isNaN(factor)) {\n            return NaN;\n        }\n        if (Double.isInfinite(real) ||\n            Double.isInfinite(imaginary) ||\n            Double.isInfinite(factor)) {\n            // we don\'t use isInfinite() to avoid testing for NaN again\n            return INF;\n        }\n        return createComplex(real * factor, imaginary * factor);\n    }\n\n    /**\n     * Returns a {@code Complex} whose value is {@code (-this)}.\n     * Returns {@code NaN} if either real or imaginary\n     * part of this Complex number equals {@code Double.NaN}.\n     *\n     * @return {@code -this}.\n     */\n    public Complex negate() {\n        if (isNaN) {\n            return NaN;\n        }\n\n        return createComplex(-real, -imaginary);\n    }\n\n    /**\n     * Returns a {@code Complex} whose value is\n     * {@code (this - subtrahend)}.\n     * Uses the definitional formula\n     * <pre>\n     *  <code>\n     *   (a + bi) - (c + di) = (a-c) + (b-d)i\n     *  </code>\n     * </pre>\n     * If either {@code this} or {@code subtrahend} has a {@code NaN]} value in either part,\n     * {@link #NaN} is returned; otherwise infinite and {@code NaN} values are\n     * returned in the parts of the result according to the rules for\n     * {@link java.lang.Double} arithmetic.\n     *\n     * @param  subtrahend value to be subtracted from this {@code Complex}.\n     * @return {@code this - subtrahend}.\n     * @throws NullArgumentException if {@code subtrahend} is {@code null}.\n     */\n    public Complex subtract(Complex subtrahend)\n        throws NullArgumentException {\n        MathUtils.checkNotNull(subtrahend);\n        if (isNaN || subtrahend.isNaN) {\n            return NaN;\n        }\n\n        return createComplex(real - subtrahend.getReal(),\n                             imaginary - subtrahend.getImaginary());\n    }\n\n    /**\n     * Returns a {@code Complex} whose value is\n     * {@code (this - subtrahend)}.\n     *\n     * @param  subtrahend value to be subtracted from this {@code Complex}.\n     * @return {@code this - subtrahend}.\n     * @see #subtract(Complex)\n     */\n    public Complex subtract(double subtrahend) {\n        if (isNaN || Double.isNaN(subtrahend)) {\n            return NaN;\n        }\n        return createComplex(real - subtrahend, imaginary);\n    }\n\n    /**\n     * Compute the\n     * <a href="http://mathworld.wolfram.com/InverseCosine.html" TARGET="_top">\n     * inverse cosine</a> of this complex number.\n     * Implements the formula:\n     * <pre>\n     *  <code>\n     *   acos(z) = -i (log(z + i (sqrt(1 - z<sup>2</sup>))))\n     *  </code>\n     * </pre>\n     * Returns {@link Complex#NaN} if either real or imaginary part of the\n     * input argument is {@code NaN} or infinite.\n     *\n     * @return the inverse cosine of this complex number.\n     * @since 1.2\n     */\n    public Complex acos() {\n        if (isNaN) {\n            return NaN;\n        }\n\n        return this.add(this.sqrt1z().multiply(I)).log()\n            .multiply(I.negate());\n    }\n\n    /**\n     * Compute the\n     * <a href="http://mathworld.wolfram.com/InverseSine.html" TARGET="_top">\n     * inverse sine</a> of this complex number.\n     * Implements the formula:\n     * <pre>\n     *  <code>\n     *   asin(z) = -i (log(sqrt(1 - z<sup>2</sup>) + iz))\n     *  </code>\n     * </pre>\n     * Returns {@link Complex#NaN} if either real or imaginary part of the\n     * input argument is {@code NaN} or infinite.\n     *\n     * @return the inverse sine of this complex number.\n     * @since 1.2\n     */\n    public Complex asin() {\n        if (isNaN) {\n            return NaN;\n        }\n\n        return sqrt1z().add(this.multiply(I)).log()\n            .multiply(I.negate());\n    }\n\n    /**\n     * Compute the\n     * <a href="http://mathworld.wolfram.com/InverseTangent.html" TARGET="_top">\n     * inverse tangent</a> of this complex number.\n     * Implements the formula:\n     * <pre>\n     *  <code>\n     *   atan(z) = (i/2) log((i + z)/(i - z))\n     *  </code>\n     * </pre>\n     * Returns {@link Complex#NaN} if either real or imaginary part of the\n     * input argument is {@code NaN} or infinite.\n     *\n     * @return the inverse tangent of this complex number\n     * @since 1.2\n     */\n    public Complex atan() {\n        if (isNaN) {\n            return NaN;\n        }\n\n        return this.add(I).divide(I.subtract(this)).log()\n            .multiply(I.divide(createComplex(2.0, 0.0)));\n    }\n\n    /**\n     * Compute the\n     * <a href="http://mathworld.wolfram.com/Cosine.html" TARGET="_top">\n     * cosine</a>\n     * of this complex number.\n     * Implements the formula:\n     * <pre>\n     *  <code>\n     *   cos(a + bi) = cos(a)cosh(b) - sin(a)sinh(b)i\n     *  </code>\n     * </pre>\n     * where the (real) functions on the right-hand side are\n     * {@link java.lang.Math#sin}, {@link java.lang.Math#cos},\n     * {@link MathUtils#cosh} and {@link MathUtils#sinh}.\n     * <br/>\n     * Returns {@link Complex#NaN} if either real or imaginary part of the\n     * input argument is {@code NaN}.\n     * <br/>\n     * Infinite values in real or imaginary parts of the input may result in\n     * infinite or NaN values returned in parts of the result.\n     * <pre>\n     *  Examples:\n     *  <code>\n     *   cos(1 &plusmn; INFINITY i) = 1 &#x2213; INFINITY i\n     *   cos(&plusmn;INFINITY + i) = NaN + NaN i\n     *   cos(&plusmn;INFINITY &plusmn; INFINITY i) = NaN + NaN i\n     *  </code>\n     * </pre>\n     *\n     * @return the cosine of this complex number.\n     * @since 1.2\n     */\n    public Complex cos() {\n        if (isNaN) {\n            return NaN;\n        }\n\n        return createComplex(FastMath.cos(real) * MathUtils.cosh(imaginary),\n                             -FastMath.sin(real) * MathUtils.sinh(imaginary));\n    }\n\n    /**\n     * Compute the\n     * <a href="http://mathworld.wolfram.com/HyperbolicCosine.html" TARGET="_top">\n     * hyperbolic cosine</a> of this complex number.\n     * Implements the formula:\n     * <pre>\n     *  <code>\n     *   cosh(a + bi) = cosh(a)cos(b) + sinh(a)sin(b)i}\n     *  </code>\n     * </pre>\n     * where the (real) functions on the right-hand side are\n     * {@link java.lang.Math#sin}, {@link java.lang.Math#cos},\n     * {@link MathUtils#cosh} and {@link MathUtils#sinh}.\n     * <br/>\n     * Returns {@link Complex#NaN} if either real or imaginary part of the\n     * input argument is {@code NaN}.\n     * <br/>\n     * Infinite values in real or imaginary parts of the input may result in\n     * infinite or NaN values returned in parts of the result.\n     * <pre>\n     *  Examples:\n     *  <code>\n     *   cosh(1 &plusmn; INFINITY i) = NaN + NaN i\n     *   cosh(&plusmn;INFINITY + i) = INFINITY &plusmn; INFINITY i\n     *   cosh(&plusmn;INFINITY &plusmn; INFINITY i) = NaN + NaN i\n     *  </code>\n     * </pre>\n     *\n     * @return the hyperbolic cosine of this complex number.\n     * @since 1.2\n     */\n    public Complex cosh() {\n        if (isNaN) {\n            return NaN;\n        }\n\n        return createComplex(MathUtils.cosh(real) * FastMath.cos(imaginary),\n                             MathUtils.sinh(real) * FastMath.sin(imaginary));\n    }\n\n    /**\n     * Compute the\n     * <a href="http://mathworld.wolfram.com/ExponentialFunction.html" TARGET="_top">\n     * exponential function</a> of this complex number.\n     * Implements the formula:\n     * <pre>\n     *  <code>\n     *   exp(a + bi) = exp(a)cos(b) + exp(a)sin(b)i\n     *  </code>\n     * </pre>\n     * where the (real) functions on the right-hand side are\n     * {@link java.lang.Math#exp}, {@link java.lang.Math#cos}, and\n     * {@link java.lang.Math#sin}.\n     * <br/>\n     * Returns {@link Complex#NaN} if either real or imaginary part of the\n     * input argument is {@code NaN}.\n     * <br/>\n     * Infinite values in real or imaginary parts of the input may result in\n     * infinite or NaN values returned in parts of the result.\n     * <pre>\n     *  Examples:\n     *  <code>\n     *   exp(1 &plusmn; INFINITY i) = NaN + NaN i\n     *   exp(INFINITY + i) = INFINITY + INFINITY i\n     *   exp(-INFINITY + i) = 0 + 0i\n     *   exp(&plusmn;INFINITY &plusmn; INFINITY i) = NaN + NaN i\n     *  </code>\n     * </pre>\n     *\n     * @return <code><i>e</i><sup>this</sup></code>.\n     * @since 1.2\n     */\n    public Complex exp() {\n        if (isNaN) {\n            return NaN;\n        }\n\n        double expReal = FastMath.exp(real);\n        return createComplex(expReal *  FastMath.cos(imaginary),\n                             expReal * FastMath.sin(imaginary));\n    }\n\n    /**\n     * Compute the\n     * <a href="http://mathworld.wolfram.com/NaturalLogarithm.html" TARGET="_top">\n     * natural logarithm</a> of this complex number.\n     * Implements the formula:\n     * <pre>\n     *  <code>\n     *   log(a + bi) = ln(|a + bi|) + arg(a + bi)i\n     *  </code>\n     * </pre>\n     * where ln on the right hand side is {@link java.lang.Math#log},\n     * {@code |a + bi|} is the modulus, {@link Complex#abs},  and\n     * {@code arg(a + bi) = }{@link java.lang.Math#atan2}(b, a).\n     * <br/>\n     * Returns {@link Complex#NaN} if either real or imaginary part of the\n     * input argument is {@code NaN}.\n     * <br/>\n     * Infinite (or critical) values in real or imaginary parts of the input may\n     * result in infinite or NaN values returned in parts of the result.\n     * <pre>\n     *  Examples:\n     *  <code>\n     *   log(1 &plusmn; INFINITY i) = INFINITY &plusmn; (&pi;/2)i\n     *   log(INFINITY + i) = INFINITY + 0i\n     *   log(-INFINITY + i) = INFINITY + &pi;i\n     *   log(INFINITY &plusmn; INFINITY i) = INFINITY &plusmn; (&pi;/4)i\n     *   log(-INFINITY &plusmn; INFINITY i) = INFINITY &plusmn; (3&pi;/4)i\n     *   log(0 + 0i) = -INFINITY + 0i\n     *  </code>\n     * </pre>\n     *\n     * @return the value <code>ln &nbsp; this</code>, the natural logarithm\n     * of {@code this}.\n     * @since 1.2\n     */\n    public Complex log() {\n        if (isNaN) {\n            return NaN;\n        }\n\n        return createComplex(FastMath.log(abs()),\n                             FastMath.atan2(imaginary, real));\n    }\n\n    /**\n     * Returns of value of this complex number raised to the power of {@code x}.\n     * Implements the formula:\n     * <pre>\n     *  <code>\n     *   y<sup>x</sup> = exp(x&middot;log(y))\n     *  </code>\n     * </pre>\n     * where {@code exp} and {@code log} are {@link #exp} and\n     * {@link #log}, respectively.\n     * <br/>\n     * Returns {@link Complex#NaN} if either real or imaginary part of the\n     * input argument is {@code NaN} or infinite, or if {@code y}\n     * equals {@link Complex#ZERO}.\n     *\n     * @param  x exponent to which this {@code Complex} is to be raised.\n     * @return <code> this<sup>{@code x}</sup></code>.\n     * @throws NullArgumentException if x is {@code null}.\n     * @since 1.2\n     */\n    public Complex pow(Complex x)\n        throws NullArgumentException {\n        MathUtils.checkNotNull(x);\n        return this.log().multiply(x).exp();\n    }\n\n    /**\n     * Returns of value of this complex number raised to the power of {@code x}.\n     *\n     * @param  x exponent to which this {@code Complex} is to be raised.\n     * @return <code>this<sup>x</sup></code>.\n     * @see #pow(Complex)\n     */\n     public Complex pow(double x) {\n        return this.log().multiply(x).exp();\n    }\n\n    /**\n     * Compute the\n     * <a href="http://mathworld.wolfram.com/Sine.html" TARGET="_top">\n     * sine</a>\n     * of this complex number.\n     * Implements the formula:\n     * <pre>\n     *  <code>\n     *   sin(a + bi) = sin(a)cosh(b) - cos(a)sinh(b)i\n     *  </code>\n     * </pre>\n     * where the (real) functions on the right-hand side are\n     * {@link java.lang.Math#sin}, {@link java.lang.Math#cos},\n     * {@link MathUtils#cosh} and {@link MathUtils#sinh}.\n     * <br/>\n     * Returns {@link Complex#NaN} if either real or imaginary part of the\n     * input argument is {@code NaN}.\n     * <br/>\n     * Infinite values in real or imaginary parts of the input may result in\n     * infinite or {@code NaN} values returned in parts of the result.\n     * <pre>\n     *  Examples:\n     *  <code>\n     *   sin(1 &plusmn; INFINITY i) = 1 &plusmn; INFINITY i\n     *   sin(&plusmn;INFINITY + i) = NaN + NaN i\n     *   sin(&plusmn;INFINITY &plusmn; INFINITY i) = NaN + NaN i\n     *  </code>\n     * </pre>\n     *\n     * @return the sine of this complex number.\n     * @since 1.2\n     */\n    public Complex sin() {\n        if (isNaN) {\n            return NaN;\n        }\n\n        return createComplex(FastMath.sin(real) * MathUtils.cosh(imaginary),\n                             FastMath.cos(real) * MathUtils.sinh(imaginary));\n    }\n\n    /**\n     * Compute the\n     * <a href="http://mathworld.wolfram.com/HyperbolicSine.html" TARGET="_top">\n     * hyperbolic sine</a> of this complex number.\n     * Implements the formula:\n     * <pre>\n     *  <code>\n     *   sinh(a + bi) = sinh(a)cos(b)) + cosh(a)sin(b)i\n     *  </code>\n     * </pre>\n     * where the (real) functions on the right-hand side are\n     * {@link java.lang.Math#sin}, {@link java.lang.Math#cos},\n     * {@link MathUtils#cosh} and {@link MathUtils#sinh}.\n     * <br/>\n     * Returns {@link Complex#NaN} if either real or imaginary part of the\n     * input argument is {@code NaN}.\n     * <br/>\n     * Infinite values in real or imaginary parts of the input may result in\n     * infinite or NaN values returned in parts of the result.\n     * <pre>\n     *  Examples:\n     *  <code>\n     *   sinh(1 &plusmn; INFINITY i) = NaN + NaN i\n     *   sinh(&plusmn;INFINITY + i) = &plusmn; INFINITY + INFINITY i\n     *   sinh(&plusmn;INFINITY &plusmn; INFINITY i) = NaN + NaN i\n     *  </code>\n     * </pre>\n     *\n     * @return the hyperbolic sine of {@code this}.\n     * @since 1.2\n     */\n    public Complex sinh() {\n        if (isNaN) {\n            return NaN;\n        }\n\n        return createComplex(MathUtils.sinh(real) * FastMath.cos(imaginary),\n            MathUtils.cosh(real) * FastMath.sin(imaginary));\n    }\n\n    /**\n     * Compute the\n     * <a href="http://mathworld.wolfram.com/SquareRoot.html" TARGET="_top">\n     * square root</a> of this complex number.\n     * Implements the following algorithm to compute {@code sqrt(a + bi)}:\n     * <ol><li>Let {@code t = sqrt((|a| + |a + bi|) / 2)}</li>\n     * <li><pre>if {@code  a &#8805; 0} return {@code t + (b/2t)i}\n     *  else return {@code |b|/2t + sign(b)t i }</pre></li>\n     * </ol>\n     * where <ul>\n     * <li>{@code |a| = }{@link Math#abs}(a)</li>\n     * <li>{@code |a + bi| = }{@link Complex#abs}(a + bi)</li>\n     * <li>{@code sign(b) =  }{@link MathUtils#indicator}(b)\n     * </ul>\n     * <br/>\n     * Returns {@link Complex#NaN} if either real or imaginary part of the\n     * input argument is {@code NaN}.\n     * <br/>\n     * Infinite values in real or imaginary parts of the input may result in\n     * infinite or NaN values returned in parts of the result.\n     * <pre>\n     *  Examples:\n     *  <code>\n     *   sqrt(1 &plusmn; INFINITY i) = INFINITY + NaN i\n     *   sqrt(INFINITY + i) = INFINITY + 0i\n     *   sqrt(-INFINITY + i) = 0 + INFINITY i\n     *   sqrt(INFINITY &plusmn; INFINITY i) = INFINITY + NaN i\n     *   sqrt(-INFINITY &plusmn; INFINITY i) = NaN &plusmn; INFINITY i\n     *  </code>\n     * </pre>\n     *\n     * @return the square root of {@code this}.\n     * @since 1.2\n     */\n    public Complex sqrt() {\n        if (isNaN) {\n            return NaN;\n        }\n\n        if (real == 0.0 && imaginary == 0.0) {\n            return createComplex(0.0, 0.0);\n        }\n\n        double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);\n        if (real >= 0.0) {\n            return createComplex(t, imaginary / (2.0 * t));\n        } else {\n            return createComplex(FastMath.abs(imaginary) / (2.0 * t),\n                                 MathUtils.indicator(imaginary) * t);\n        }\n    }\n\n    /**\n     * Compute the\n     * <a href="http://mathworld.wolfram.com/SquareRoot.html" TARGET="_top">\n     * square root</a> of <code>1 - this<sup>2</sup></code> for this complex\n     * number.\n     * Computes the result directly as\n     * {@code sqrt(ONE.subtract(z.multiply(z)))}.\n     * <br/>\n     * Returns {@link Complex#NaN} if either real or imaginary part of the\n     * input argument is {@code NaN}.\n     * <br/>\n     * Infinite values in real or imaginary parts of the input may result in\n     * infinite or NaN values returned in parts of the result.\n     *\n     * @return the square root of <code>1 - this<sup>2</sup></code>.\n     * @since 1.2\n     */\n    public Complex sqrt1z() {\n        return createComplex(1.0, 0.0).subtract(this.multiply(this)).sqrt();\n    }\n\n    /**\n     * Compute the\n     * <a href="http://mathworld.wolfram.com/Tangent.html" TARGET="_top">\n     * tangent</a> of this complex number.\n     * Implements the formula:\n     * <pre>\n     *  <code>\n     *   tan(a + bi) = sin(2a)/(cos(2a)+cosh(2b)) + [sinh(2b)/(cos(2a)+cosh(2b))]i\n     *  </code>\n     * </pre>\n     * where the (real) functions on the right-hand side are\n     * {@link java.lang.Math#sin}, {@link java.lang.Math#cos},\n     * {@link MathUtils#cosh} and {@link MathUtils#sinh}.\n     * <br/>\n     * Returns {@link Complex#NaN} if either real or imaginary part of the\n     * input argument is {@code NaN}.\n     * <br/>\n     * Infinite (or critical) values in real or imaginary parts of the input may\n     * result in infinite or NaN values returned in parts of the result.\n     * <pre>\n     *  Examples:\n     *  <code>\n     *   tan(1 &plusmn; INFINITY i) = 0 + NaN i\n     *   tan(&plusmn;INFINITY + i) = NaN + NaN i\n     *   tan(&plusmn;INFINITY &plusmn; INFINITY i) = NaN + NaN i\n     *   tan(&plusmn;&pi;/2 + 0 i) = &plusmn;INFINITY + NaN i\n     *  </code>\n     * </pre>\n     *\n     * @return the tangent of {@code this}.\n     * @since 1.2\n     */\n    public Complex tan() {\n        if (isNaN) {\n            return NaN;\n        }\n\n        double real2 = 2.0 * real;\n        double imaginary2 = 2.0 * imaginary;\n        double d = FastMath.cos(real2) + MathUtils.cosh(imaginary2);\n\n        return createComplex(FastMath.sin(real2) / d,\n                             MathUtils.sinh(imaginary2) / d);\n    }\n\n    /**\n     * Compute the\n     * <a href="http://mathworld.wolfram.com/HyperbolicTangent.html" TARGET="_top">\n     * hyperbolic tangent</a> of this complex number.\n     * Implements the formula:\n     * <pre>\n     *  <code>\n     *   tan(a + bi) = sinh(2a)/(cosh(2a)+cos(2b)) + [sin(2b)/(cosh(2a)+cos(2b))]i\n     *  </code>\n     * </pre>\n     * where the (real) functions on the right-hand side are\n     * {@link java.lang.Math#sin}, {@link java.lang.Math#cos},\n     * {@link MathUtils#cosh} and {@link MathUtils#sinh}.\n     * <br/>\n     * Returns {@link Complex#NaN} if either real or imaginary part of the\n     * input argument is {@code NaN}.\n     * <br/>\n     * Infinite values in real or imaginary parts of the input may result in\n     * infinite or NaN values returned in parts of the result.\n     * <pre>\n     *  Examples:\n     *  <code>\n     *   tanh(1 &plusmn; INFINITY i) = NaN + NaN i\n     *   tanh(&plusmn;INFINITY + i) = NaN + 0 i\n     *   tanh(&plusmn;INFINITY &plusmn; INFINITY i) = NaN + NaN i\n     *   tanh(0 + (&pi;/2)i) = NaN + INFINITY i\n     *  </code>\n     * </pre>\n     *\n     * @return the hyperbolic tangent of {@code this}.\n     * @since 1.2\n     */\n    public Complex tanh() {\n        if (isNaN) {\n            return NaN;\n        }\n\n        double real2 = 2.0 * real;\n        double imaginary2 = 2.0 * imaginary;\n        double d = MathUtils.cosh(real2) + FastMath.cos(imaginary2);\n\n        return createComplex(MathUtils.sinh(real2) / d,\n                             FastMath.sin(imaginary2) / d);\n    }\n\n\n\n    /**\n     * Compute the argument of this complex number.\n     * The argument is the angle phi between the positive real axis and\n     * the point representing this number in the complex plane.\n     * The value returned is between -PI (not inclusive)\n     * and PI (inclusive), with negative values returned for numbers with\n     * negative imaginary parts.\n     * <br/>\n     * If either real or imaginary part (or both) is NaN, NaN is returned.\n     * Infinite parts are handled as {@code Math.atan2} handles them,\n     * essentially treating finite parts as zero in the presence of an\n     * infinite coordinate and returning a multiple of pi/4 depending on\n     * the signs of the infinite parts.\n     * See the javadoc for {@code Math.atan2} for full details.\n     *\n     * @return the argument of {@code this}.\n     */\n    public double getArgument() {\n        return FastMath.atan2(getImaginary(), getReal());\n    }\n\n    /**\n     * Computes the n-th roots of this complex number.\n     * The nth roots are defined by the formula:\n     * <pre>\n     *  <code>\n     *   z<sub>k</sub> = abs<sup>1/n</sup> (cos(phi + 2&pi;k/n) + i (sin(phi + 2&pi;k/n))\n     *  </code>\n     * </pre>\n     * for <i>{@code k=0, 1, ..., n-1}</i>, where {@code abs} and {@code phi}\n     * are respectively the {@link #abs() modulus} and\n     * {@link #getArgument() argument} of this complex number.\n     * <br/>\n     * If one or both parts of this complex number is NaN, a list with just\n     * one element, {@link #NaN} is returned.\n     * if neither part is NaN, but at least one part is infinite, the result\n     * is a one-element list containing {@link #INF}.\n     *\n     * @param n Degree of root.\n     * @return a List<Complex> of all {@code n}-th roots of {@code this}.\n     * @throws NotPositiveException if {@code n <= 0}.\n     * @since 2.0\n     */\n    public List<Complex> nthRoot(int n) {\n\n        if (n <= 0) {\n            throw new NotPositiveException(LocalizedFormats.CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N,\n                                           n);\n        }\n\n        final List<Complex> result = new ArrayList<Complex>();\n\n        if (isNaN) {\n            result.add(NaN);\n            return result;\n        }\n        if (isInfinite()) {\n            result.add(INF);\n            return result;\n        }\n\n        // nth root of abs -- faster / more accurate to use a solver here?\n        final double nthRootOfAbs = FastMath.pow(abs(), 1.0 / n);\n\n        // Compute nth roots of complex number with k = 0, 1, ... n-1\n        final double nthPhi = getArgument() / n;\n        final double slice = 2 * FastMath.PI / n;\n        double innerPart = nthPhi;\n        for (int k = 0; k < n ; k++) {\n            // inner part\n            final double realPart = nthRootOfAbs *  FastMath.cos(innerPart);\n            final double imaginaryPart = nthRootOfAbs *  FastMath.sin(innerPart);\n            result.add(createComplex(realPart, imaginaryPart));\n            innerPart += slice;\n        }\n\n        return result;\n    }\n\n    /**\n     * Create a complex number given the real and imaginary parts.\n     *\n     * @param realPart Real part.\n     * @param imaginaryPart Imaginary part.\n     * @return a new complex number instance.\n     * @since 1.2\n     * @see #valueOf(double, double)\n     */\n    protected Complex createComplex(double realPart,\n                                    double imaginaryPart) {\n        return new Complex(realPart, imaginaryPart);\n    }\n\n    /**\n     * Create a complex number given the real and imaginary parts.\n     *\n     * @param realPart Real part.\n     * @param imaginaryPart Imaginary part.\n     * @return a Complex instance.\n     */\n    public static Complex valueOf(double realPart,\n                                  double imaginaryPart) {\n        if (Double.isNaN(realPart) ||\n            Double.isNaN(imaginaryPart)) {\n            return NaN;\n        }\n        return new Complex(realPart, imaginaryPart);\n    }\n\n    /**\n     * Create a complex number given only the real part.\n     *\n     * @param realPart Real part.\n     * @return a Complex instance.\n     */\n    public static Complex valueOf(double realPart) {\n        if (Double.isNaN(realPart)) {\n            return NaN;\n        }\n        return new Complex(realPart);\n    }\n\n    /**\n     * Resolve the transient fields in a deserialized Complex Object.\n     * Subclasses will need to override {@link #createComplex} to\n     * deserialize properly.\n     *\n     * @return A Complex instance with all fields resolved.\n     * @since 2.0\n     */\n    protected final Object readResolve() {\n        return createComplex(real, imaginary);\n    }\n\n    /** {@inheritDoc} */\n    public ComplexField getField() {\n        return ComplexField.getInstance();\n    }\n\n    /** {@inheritDoc} */\n    @Override\n    public String toString() {\n        return "(" + real + ", " + imaginary + ")";\n    }\n}', 'tree': 'MethodDeclaration modifiers public_ter ^ ^ return_type ReferenceType name Complex_ter ^ ^ ^ ^ name meth0 ^ ^ parameters FormalParameter type ReferenceType name Complex_ter ^ ^ ^ ^ name par0 ^ ^ ^ ^ throws NullArgumentException_ter ^ ^ body StatementExpression expression MethodInvocation qualifier MathUtils_ter ^ ^ arguments MemberReference member par0 ^ ^ ^ ^ member checkNotNull_ter ^ ^ ^ ^ ^ IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MemberReference member isNaN_ter ^ ^ ^ ^ operandr MemberReference qualifier par0 ^ ^ member isNaN_ter ^ ^ ^ ^ ^ ^ then_statement BlockStatement statements ReturnStatement expression MemberReference member NaN_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ IfStatement condition MemberReference qualifier par0 ^ ^ member isZero_ter ^ ^ ^ ^ then_statement BlockStatement statements ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier par0 ^ ^ member isInfinite_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member isInfinite_ter ^ ^ ^ ^ ^ ^ then_statement BlockStatement statements ReturnStatement expression MemberReference member ZERO_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer MethodInvocation qualifier par0 ^ ^ member getReal_ter ^ ^ ^ ^ ^ ^ ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name loc1 ^ ^ initializer MethodInvocation qualifier par0 ^ ^ member getImaginary_ter ^ ^ ^ ^ ^ ^ ^ IfStatement condition BinaryOperation operator <_ter ^ ^ operandl MethodInvocation qualifier FastMath_ter ^ ^ arguments MemberReference member loc0 ^ ^ ^ ^ member abs_ter ^ ^ ^ ^ operandr MethodInvocation qualifier FastMath_ter ^ ^ arguments MemberReference member loc1 ^ ^ ^ ^ member abs_ter ^ ^ ^ ^ ^ ^ then_statement BlockStatement statements LocalVariableDeclaration type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name loc4 ^ ^ initializer BinaryOperation operator /_ter ^ ^ operandl MemberReference member loc0 ^ ^ ^ ^ operandr MemberReference member loc1 ^ ^ ^ ^ ^ ^ ^ ^ ^ LocalVariableDeclaration type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name loc5 ^ ^ initializer BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member loc0 ^ ^ ^ ^ operandr MemberReference member loc4 ^ ^ ^ ^ ^ ^ operandr MemberReference member loc1 ^ ^ ^ ^ ^ ^ ^ ^ ^ ReturnStatement expression MethodInvocation arguments BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member real_ter ^ ^ ^ ^ operandr MemberReference member loc4 ^ ^ ^ ^ ^ ^ operandr MemberReference member imaginary_ter ^ ^ ^ ^ ^ ^ operandr MemberReference member loc5 ^ ^ ^ ^ ^ BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member imaginary_ter ^ ^ ^ ^ operandr MemberReference member loc4 ^ ^ ^ ^ ^ ^ operandr MemberReference member real_ter ^ ^ ^ ^ ^ ^ operandr MemberReference member loc5 ^ ^ ^ ^ ^ ^ member createComplex_ter ^ ^ ^ ^ ^ ^ ^ ^ else_statement BlockStatement statements LocalVariableDeclaration type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name loc4 ^ ^ initializer BinaryOperation operator /_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr MemberReference member loc0 ^ ^ ^ ^ ^ ^ ^ ^ ^ LocalVariableDeclaration type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name loc5 ^ ^ initializer BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr MemberReference member loc4 ^ ^ ^ ^ ^ ^ operandr MemberReference member loc0 ^ ^ ^ ^ ^ ^ ^ ^ ^ ReturnStatement expression MethodInvocation arguments BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member imaginary_ter ^ ^ ^ ^ operandr MemberReference member loc4 ^ ^ ^ ^ ^ ^ operandr MemberReference member real_ter ^ ^ ^ ^ ^ ^ operandr MemberReference member loc5 ^ ^ ^ ^ ^ BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator -_ter ^ ^ operandl MemberReference member imaginary_ter ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MemberReference member real_ter ^ ^ ^ ^ operandr MemberReference member loc4 ^ ^ ^ ^ ^ ^ ^ ^ operandr MemberReference member loc5 ^ ^ ^ ^ ^ ^ member createComplex_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ', 'prob': [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], 'mode': 0, 'line': 260, 'isa': False, 'fl_score': 1}, {'bugid': 'Math-46', 'treeroot': <Searchnode.Node object at 0x7fde9146e310>, 'troot': <Searchnode.Node object at 0x7fde9146e310>, 'oldcode': '            return isZero ? NaN : INF;', 'filepath': 'buggy/Math-46/src/main/java/org/apache/commons/math/complex/Complex.java', 'subroot': <Searchnode.Node object at 0x7fde91474490>, 'vardic': {'divide_ter': 'meth0', 'divisor_ter': 'par0'}, 'typedic': {'divisor_ter': 'double'}, 'idss': 'Math-46', 'classname': 'org.apache.commons.math.complex.Complex', 'precode': '/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the "License"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.commons.math.complex;\n\nimport java.io.Serializable;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.apache.commons.math.FieldElement;\nimport org.apache.commons.math.exception.NullArgumentException;\nimport org.apache.commons.math.exception.NotPositiveException;\nimport org.apache.commons.math.exception.util.LocalizedFormats;\nimport org.apache.commons.math.util.MathUtils;\nimport org.apache.commons.math.util.FastMath;\n\n/**\n * Representation of a Complex number, i.e. a number which has both a\n * real and imaginary part.\n * <br/>\n * Implementations of arithmetic operations handle {@code NaN} and\n * infinite values according to the rules for {@link java.lang.Double}, i.e.\n * {@link #equals} is an equivalence relation for all instances that have\n * a {@code NaN} in either real or imaginary part, e.g. the following are\n * considered equal:\n * <ul>\n *  <li>{@code 1 + NaNi}</li>\n *  <li>{@code NaN + i}</li>\n *  <li>{@code NaN + NaNi}</li>\n * </ul>\n * Note that this is in contradiction with the IEEE-754 standard for floating\n * point numbers (according to which the test {@code x == x} must fail if\n * {@code x} is {@code NaN}). The method\n * {@link MathUtils#equals(double,double,int) equals for primitive double} in\n * {@link MathUtils} conforms with IEEE-754 while this class conforms with\n * the standard behavior for Java object types.\n * <br/>\n * Implements Serializable since 2.0\n *\n * @version $Id$\n */\npublic class Complex implements FieldElement<Complex>, Serializable  {\n    /** The square root of -1. A number representing "0.0 + 1.0i" */\n    public static final Complex I = new Complex(0.0, 1.0);\n    // CHECKSTYLE: stop ConstantName\n    /** A complex number representing "NaN + NaNi" */\n    public static final Complex NaN = new Complex(Double.NaN, Double.NaN);\n    // CHECKSTYLE: resume ConstantName\n    /** A complex number representing "+INF + INFi" */\n    public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);\n    /** A complex number representing "1.0 + 0.0i" */\n    public static final Complex ONE = new Complex(1.0, 0.0);\n    /** A complex number representing "0.0 + 0.0i" */\n    public static final Complex ZERO = new Complex(0.0, 0.0);\n\n    /** Serializable version identifier */\n    private static final long serialVersionUID = -6195664516687396620L;\n\n    /** The imaginary part. */\n    private final double imaginary;\n    /** The real part. */\n    private final double real;\n    /** Record whether this complex number is equal to NaN. */\n    private final transient boolean isNaN;\n    /** Record whether this complex number is infinite. */\n    private final transient boolean isInfinite;\n    /** Record whether this complex number is zero. */\n    private final transient boolean isZero;\n\n    /**\n     * Create a complex number given only the real part.\n     *\n     * @param real Real part.\n     */\n    public Complex(double real) {\n        this(real, 0.0);\n    }\n\n    /**\n     * Create a complex number given the real and imaginary parts.\n     *\n     * @param real Real part.\n     * @param imaginary Imaginary part.\n     */\n    public Complex(double real, double imaginary) {\n        this.real = real;\n        this.imaginary = imaginary;\n\n        isNaN = Double.isNaN(real) || Double.isNaN(imaginary);\n        isInfinite = !isNaN &&\n            (Double.isInfinite(real) || Double.isInfinite(imaginary));\n        isZero = real == 0 && imaginary == 0;\n    }\n\n    /**\n     * Return the absolute value of this complex number.\n     * Returns {@code NaN} if either real or imaginary part is {@code NaN}\n     * and {@code Double.POSITIVE_INFINITY} if neither part is {@code NaN},\n     * but at least one part is infinite.\n     *\n     * @return the absolute value.\n     */\n    public double abs() {\n        if (isNaN) {\n            return Double.NaN;\n        }\n        if (isInfinite()) {\n            return Double.POSITIVE_INFINITY;\n        }\n        if (FastMath.abs(real) < FastMath.abs(imaginary)) {\n            if (imaginary == 0.0) {\n                return FastMath.abs(real);\n            }\n            double q = real / imaginary;\n            return FastMath.abs(imaginary) * FastMath.sqrt(1 + q * q);\n        } else {\n            if (real == 0.0) {\n                return FastMath.abs(imaginary);\n            }\n            double q = imaginary / real;\n            return FastMath.abs(real) * FastMath.sqrt(1 + q * q);\n        }\n    }\n\n    /**\n     * Returns a {@code Complex} whose value is\n     * {@code (this + addend)}.\n     * Uses the definitional formula\n     * <pre>\n     *  <code>\n     *   (a + bi) + (c + di) = (a+c) + (b+d)i\n     *  </code>\n     * </pre>\n     * <br/>\n     * If either {@code this} or {@code addend} has a {@code NaN} value in\n     * either part, {@link #NaN} is returned; otherwise {@code Infinite}\n     * and {@code NaN} values are returned in the parts of the result\n     * according to the rules for {@link java.lang.Double} arithmetic.\n     *\n     * @param  addend Value to be added to this {@code Complex}.\n     * @return {@code this + addend}.\n     * @throws NullArgumentException if {@code addend} is {@code null}.\n     */\n    public Complex add(Complex addend) throws NullArgumentException {\n        MathUtils.checkNotNull(addend);\n        if (isNaN || addend.isNaN) {\n            return NaN;\n        }\n\n        return createComplex(real + addend.getReal(),\n                             imaginary + addend.getImaginary());\n    }\n\n    /**\n     * Returns a {@code Complex} whose value is {@code (this + addend)},\n     * with {@code addend} interpreted as a real number.\n     *\n     * @param addend Value to be added to this {@code Complex}.\n     * @return {@code this + addend}.\n     * @see #add(Complex)\n     */\n    public Complex add(double addend) {\n        if (isNaN || Double.isNaN(addend)) {\n            return NaN;\n        }\n\n        return createComplex(real + addend, imaginary);\n    }\n\n     /**\n     * Return the conjugate of this complex number.\n     * The conjugate of {@code a + bi} is {@code a - bi}.\n     * <br/>\n     * {@link #NaN} is returned if either the real or imaginary\n     * part of this Complex number equals {@code Double.NaN}.\n     * <br/>\n     * If the imaginary part is infinite, and the real part is not\n     * {@code NaN}, the returned value has infinite imaginary part\n     * of the opposite sign, e.g. the conjugate of\n     * {@code 1 + POSITIVE_INFINITY i} is {@code 1 - NEGATIVE_INFINITY i}.\n     *\n     * @return the conjugate of this Complex object.\n     */\n    public Complex conjugate() {\n        if (isNaN) {\n            return NaN;\n        }\n\n        return createComplex(real, -imaginary);\n    }\n\n    /**\n     * Returns a {@code Complex} whose value is\n     * {@code (this / divisor)}.\n     * Implements the definitional formula\n     * <pre>\n     *  <code>\n     *    a + bi          ac + bd + (bc - ad)i\n     *    ----------- = -------------------------\n     *    c + di         c<sup>2</sup> + d<sup>2</sup>\n     *  </code>\n     * </pre>\n     * but uses\n     * <a href="http://doi.acm.org/10.1145/1039813.1039814">\n     * prescaling of operands</a> to limit the effects of overflows and\n     * underflows in the computation.\n     * <br/>\n     * {@code Infinite} and {@code NaN} values are handled according to the\n     * following rules, applied in the order presented:\n     * <ul>\n     *  <li>If either {@code this} or {@code divisor} has a {@code NaN} value\n     *   in either part, {@link #NaN} is returned.\n     *  </li>\n     *  <li>If {@code this} and {@code divisor} are both {@link #ZERO},\n     *   {@link #NaN} is returned.\n     *  </li>\n     *  <li>If {@code divisor} equals {@link #ZERO}, {@link #INF} is returned.\n     *  </li>\n     *  <li>If {@code this} and {@code divisor} are both infinite,\n     *   {@link #NaN} is returned.\n     *  </li>\n     *  <li>If {@code this} is finite (i.e., has no {@code Infinite} or\n     *   {@code NaN} parts) and {@code divisor} is infinite (one or both parts\n     *   infinite), {@link #ZERO} is returned.\n     *  </li>\n     *  <li>If {@code this} is infinite and {@code divisor} is finite,\n     *   {@code NaN} values are returned in the parts of the result if the\n     *   {@link java.lang.Double} rules applied to the definitional formula\n     *   force {@code NaN} results.\n     *  </li>\n     * </ul>\n     *\n     * @param divisor Value by which this {@code Complex} is to be divided.\n     * @return {@code this / divisor}.\n     * @throws NullArgumentException if {@code divisor} is {@code null}.\n     */\n    public Complex divide(Complex divisor)\n        throws NullArgumentException {\n        MathUtils.checkNotNull(divisor);\n        if (isNaN || divisor.isNaN) {\n            return NaN;\n        }\n\n        if (divisor.isZero) {\n            // return isZero ? NaN : INF; // See MATH-657\n            return isZero ? NaN : INF;\n        }\n\n        if (divisor.isInfinite() && !isInfinite()) {\n            return ZERO;\n        }\n\n        final double c = divisor.getReal();\n        final double d = divisor.getImaginary();\n\n        if (FastMath.abs(c) < FastMath.abs(d)) {\n            double q = c / d;\n            double denominator = c * q + d;\n            return createComplex((real * q + imaginary) / denominator,\n                (imaginary * q - real) / denominator);\n        } else {\n            double q = d / c;\n            double denominator = d * q + c;\n            return createComplex((imaginary * q + real) / denominator,\n                (imaginary - real * q) / denominator);\n        }\n    }\n\n    /**\n     * Returns a {@code Complex} whose value is {@code (this / divisor)},\n     * with {@code divisor} interpreted as a real number.\n     *\n     * @param  divisor Value by which this {@code Complex} is to be divided.\n     * @return {@code this / divisor}.\n     * @see #divide(Complex)\n     */\n    public Complex divide(double divisor) {\n        if (isNaN || Double.isNaN(divisor)) {\n            return NaN;\n        }\n        if (divisor == 0d) {\n            // return isZero ? NaN : INF; // See MATH-657', 'aftercode': '        }\n        if (Double.isInfinite(divisor)) {\n            return !isInfinite() ? ZERO : NaN;\n        }\n        return createComplex(real / divisor,\n                             imaginary  / divisor);\n    }\n\n    /**\n     * Test for the equality of two Complex objects.\n     * If both the real and imaginary parts of two complex numbers\n     * are exactly the same, and neither is {@code Double.NaN}, the two\n     * Complex objects are considered to be equal.\n     * All {@code NaN} values are considered to be equal - i.e, if either\n     * (or both) real and imaginary parts of the complex number are equal\n     * to {@code Double.NaN}, the complex number is equal to\n     * {@code NaN}.\n     *\n     * @param other Object to test for equality to this\n     * @return true if two Complex objects are equal, false if object is\n     * {@code null}, not an instance of Complex, or not equal to this Complex\n     * instance.\n     */\n    @Override\n    public boolean equals(Object other) {\n        if (this == other) {\n            return true;\n        }\n        if (other instanceof Complex){\n            Complex c = (Complex)other;\n            if (c.isNaN) {\n                return isNaN;\n            } else {\n                return (real == c.real) && (imaginary == c.imaginary);\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Get a hashCode for the complex number.\n     * Any {@code Double.NaN} value in real or imaginary part produces\n     * the same hash code {@code 7}.\n     *\n     * @return a hash code value for this object.\n     */\n    @Override\n    public int hashCode() {\n        if (isNaN) {\n            return 7;\n        }\n        return 37 * (17 * MathUtils.hash(imaginary) +\n            MathUtils.hash(real));\n    }\n\n    /**\n     * Access the imaginary part.\n     *\n     * @return the imaginary part.\n     */\n    public double getImaginary() {\n        return imaginary;\n    }\n\n    /**\n     * Access the real part.\n     *\n     * @return the real part.\n     */\n    public double getReal() {\n        return real;\n    }\n\n    /**\n     * Checks whether either or both parts of this complex number is\n     * {@code NaN}.\n     *\n     * @return true if either or both parts of this complex number is\n     * {@code NaN}; false otherwise.\n     */\n    public boolean isNaN() {\n        return isNaN;\n    }\n\n    /**\n     * Checks whether either the real or imaginary part of this complex number\n     * takes an infinite value (either {@code Double.POSITIVE_INFINITY} or\n     * {@code Double.NEGATIVE_INFINITY}) and neither part\n     * is {@code NaN}.\n     *\n     * @return true if one or both parts of this complex number are infinite\n     * and neither part is {@code NaN}.\n     */\n    public boolean isInfinite() {\n        return isInfinite;\n    }\n\n    /**\n     * Returns a {@code Complex} whose value is {@code this * factor}.\n     * Implements preliminary checks for {@code NaN} and infinity followed by\n     * the definitional formula:\n     * <pre>\n     *  <code>\n     *   (a + bi)(c + di) = (ac - bd) + (ad + bc)i\n     *  </code>\n     * </pre>\n     * Returns {@link #NaN} if either {@code this} or {@code factor} has one or\n     * more {@code NaN} parts.\n     * <br/>\n     * Returns {@link #INF} if neither {@code this} nor {@code factor} has one\n     * or more {@code NaN} parts and if either {@code this} or {@code factor}\n     * has one or more infinite parts (same result is returned regardless of\n     * the sign of the components).\n     * <br/>\n     * Returns finite values in components of the result per the definitional\n     * formula in all remaining cases.\n     *\n     * @param  factor value to be multiplied by this {@code Complex}.\n     * @return {@code this * factor}.\n     * @throws NullArgumentException if {@code factor} is {@code null}.\n     */\n    public Complex multiply(Complex factor)\n        throws NullArgumentException {\n        MathUtils.checkNotNull(factor);\n        if (isNaN || factor.isNaN) {\n            return NaN;\n        }\n        if (Double.isInfinite(real) ||\n            Double.isInfinite(imaginary) ||\n            Double.isInfinite(factor.real) ||\n            Double.isInfinite(factor.imaginary)) {\n            // we don\'t use isInfinite() to avoid testing for NaN again\n            return INF;\n        }\n        return createComplex(real * factor.real - imaginary * factor.imaginary,\n                             real * factor.imaginary + imaginary * factor.real);\n    }\n\n    /**\n     * Returns a {@code Complex} whose value is {@code this * factor}, with {@code factor}\n     * interpreted as a real number.\n     *\n     * @param  factor value to be multiplied by this {@code Complex}.\n     * @return {@code this * factor}.\n     * @see #multiply(Complex)\n     */\n    public Complex multiply(double factor) {\n        if (isNaN || Double.isNaN(factor)) {\n            return NaN;\n        }\n        if (Double.isInfinite(real) ||\n            Double.isInfinite(imaginary) ||\n            Double.isInfinite(factor)) {\n            // we don\'t use isInfinite() to avoid testing for NaN again\n            return INF;\n        }\n        return createComplex(real * factor, imaginary * factor);\n    }\n\n    /**\n     * Returns a {@code Complex} whose value is {@code (-this)}.\n     * Returns {@code NaN} if either real or imaginary\n     * part of this Complex number equals {@code Double.NaN}.\n     *\n     * @return {@code -this}.\n     */\n    public Complex negate() {\n        if (isNaN) {\n            return NaN;\n        }\n\n        return createComplex(-real, -imaginary);\n    }\n\n    /**\n     * Returns a {@code Complex} whose value is\n     * {@code (this - subtrahend)}.\n     * Uses the definitional formula\n     * <pre>\n     *  <code>\n     *   (a + bi) - (c + di) = (a-c) + (b-d)i\n     *  </code>\n     * </pre>\n     * If either {@code this} or {@code subtrahend} has a {@code NaN]} value in either part,\n     * {@link #NaN} is returned; otherwise infinite and {@code NaN} values are\n     * returned in the parts of the result according to the rules for\n     * {@link java.lang.Double} arithmetic.\n     *\n     * @param  subtrahend value to be subtracted from this {@code Complex}.\n     * @return {@code this - subtrahend}.\n     * @throws NullArgumentException if {@code subtrahend} is {@code null}.\n     */\n    public Complex subtract(Complex subtrahend)\n        throws NullArgumentException {\n        MathUtils.checkNotNull(subtrahend);\n        if (isNaN || subtrahend.isNaN) {\n            return NaN;\n        }\n\n        return createComplex(real - subtrahend.getReal(),\n                             imaginary - subtrahend.getImaginary());\n    }\n\n    /**\n     * Returns a {@code Complex} whose value is\n     * {@code (this - subtrahend)}.\n     *\n     * @param  subtrahend value to be subtracted from this {@code Complex}.\n     * @return {@code this - subtrahend}.\n     * @see #subtract(Complex)\n     */\n    public Complex subtract(double subtrahend) {\n        if (isNaN || Double.isNaN(subtrahend)) {\n            return NaN;\n        }\n        return createComplex(real - subtrahend, imaginary);\n    }\n\n    /**\n     * Compute the\n     * <a href="http://mathworld.wolfram.com/InverseCosine.html" TARGET="_top">\n     * inverse cosine</a> of this complex number.\n     * Implements the formula:\n     * <pre>\n     *  <code>\n     *   acos(z) = -i (log(z + i (sqrt(1 - z<sup>2</sup>))))\n     *  </code>\n     * </pre>\n     * Returns {@link Complex#NaN} if either real or imaginary part of the\n     * input argument is {@code NaN} or infinite.\n     *\n     * @return the inverse cosine of this complex number.\n     * @since 1.2\n     */\n    public Complex acos() {\n        if (isNaN) {\n            return NaN;\n        }\n\n        return this.add(this.sqrt1z().multiply(I)).log()\n            .multiply(I.negate());\n    }\n\n    /**\n     * Compute the\n     * <a href="http://mathworld.wolfram.com/InverseSine.html" TARGET="_top">\n     * inverse sine</a> of this complex number.\n     * Implements the formula:\n     * <pre>\n     *  <code>\n     *   asin(z) = -i (log(sqrt(1 - z<sup>2</sup>) + iz))\n     *  </code>\n     * </pre>\n     * Returns {@link Complex#NaN} if either real or imaginary part of the\n     * input argument is {@code NaN} or infinite.\n     *\n     * @return the inverse sine of this complex number.\n     * @since 1.2\n     */\n    public Complex asin() {\n        if (isNaN) {\n            return NaN;\n        }\n\n        return sqrt1z().add(this.multiply(I)).log()\n            .multiply(I.negate());\n    }\n\n    /**\n     * Compute the\n     * <a href="http://mathworld.wolfram.com/InverseTangent.html" TARGET="_top">\n     * inverse tangent</a> of this complex number.\n     * Implements the formula:\n     * <pre>\n     *  <code>\n     *   atan(z) = (i/2) log((i + z)/(i - z))\n     *  </code>\n     * </pre>\n     * Returns {@link Complex#NaN} if either real or imaginary part of the\n     * input argument is {@code NaN} or infinite.\n     *\n     * @return the inverse tangent of this complex number\n     * @since 1.2\n     */\n    public Complex atan() {\n        if (isNaN) {\n            return NaN;\n        }\n\n        return this.add(I).divide(I.subtract(this)).log()\n            .multiply(I.divide(createComplex(2.0, 0.0)));\n    }\n\n    /**\n     * Compute the\n     * <a href="http://mathworld.wolfram.com/Cosine.html" TARGET="_top">\n     * cosine</a>\n     * of this complex number.\n     * Implements the formula:\n     * <pre>\n     *  <code>\n     *   cos(a + bi) = cos(a)cosh(b) - sin(a)sinh(b)i\n     *  </code>\n     * </pre>\n     * where the (real) functions on the right-hand side are\n     * {@link java.lang.Math#sin}, {@link java.lang.Math#cos},\n     * {@link MathUtils#cosh} and {@link MathUtils#sinh}.\n     * <br/>\n     * Returns {@link Complex#NaN} if either real or imaginary part of the\n     * input argument is {@code NaN}.\n     * <br/>\n     * Infinite values in real or imaginary parts of the input may result in\n     * infinite or NaN values returned in parts of the result.\n     * <pre>\n     *  Examples:\n     *  <code>\n     *   cos(1 &plusmn; INFINITY i) = 1 &#x2213; INFINITY i\n     *   cos(&plusmn;INFINITY + i) = NaN + NaN i\n     *   cos(&plusmn;INFINITY &plusmn; INFINITY i) = NaN + NaN i\n     *  </code>\n     * </pre>\n     *\n     * @return the cosine of this complex number.\n     * @since 1.2\n     */\n    public Complex cos() {\n        if (isNaN) {\n            return NaN;\n        }\n\n        return createComplex(FastMath.cos(real) * MathUtils.cosh(imaginary),\n                             -FastMath.sin(real) * MathUtils.sinh(imaginary));\n    }\n\n    /**\n     * Compute the\n     * <a href="http://mathworld.wolfram.com/HyperbolicCosine.html" TARGET="_top">\n     * hyperbolic cosine</a> of this complex number.\n     * Implements the formula:\n     * <pre>\n     *  <code>\n     *   cosh(a + bi) = cosh(a)cos(b) + sinh(a)sin(b)i}\n     *  </code>\n     * </pre>\n     * where the (real) functions on the right-hand side are\n     * {@link java.lang.Math#sin}, {@link java.lang.Math#cos},\n     * {@link MathUtils#cosh} and {@link MathUtils#sinh}.\n     * <br/>\n     * Returns {@link Complex#NaN} if either real or imaginary part of the\n     * input argument is {@code NaN}.\n     * <br/>\n     * Infinite values in real or imaginary parts of the input may result in\n     * infinite or NaN values returned in parts of the result.\n     * <pre>\n     *  Examples:\n     *  <code>\n     *   cosh(1 &plusmn; INFINITY i) = NaN + NaN i\n     *   cosh(&plusmn;INFINITY + i) = INFINITY &plusmn; INFINITY i\n     *   cosh(&plusmn;INFINITY &plusmn; INFINITY i) = NaN + NaN i\n     *  </code>\n     * </pre>\n     *\n     * @return the hyperbolic cosine of this complex number.\n     * @since 1.2\n     */\n    public Complex cosh() {\n        if (isNaN) {\n            return NaN;\n        }\n\n        return createComplex(MathUtils.cosh(real) * FastMath.cos(imaginary),\n                             MathUtils.sinh(real) * FastMath.sin(imaginary));\n    }\n\n    /**\n     * Compute the\n     * <a href="http://mathworld.wolfram.com/ExponentialFunction.html" TARGET="_top">\n     * exponential function</a> of this complex number.\n     * Implements the formula:\n     * <pre>\n     *  <code>\n     *   exp(a + bi) = exp(a)cos(b) + exp(a)sin(b)i\n     *  </code>\n     * </pre>\n     * where the (real) functions on the right-hand side are\n     * {@link java.lang.Math#exp}, {@link java.lang.Math#cos}, and\n     * {@link java.lang.Math#sin}.\n     * <br/>\n     * Returns {@link Complex#NaN} if either real or imaginary part of the\n     * input argument is {@code NaN}.\n     * <br/>\n     * Infinite values in real or imaginary parts of the input may result in\n     * infinite or NaN values returned in parts of the result.\n     * <pre>\n     *  Examples:\n     *  <code>\n     *   exp(1 &plusmn; INFINITY i) = NaN + NaN i\n     *   exp(INFINITY + i) = INFINITY + INFINITY i\n     *   exp(-INFINITY + i) = 0 + 0i\n     *   exp(&plusmn;INFINITY &plusmn; INFINITY i) = NaN + NaN i\n     *  </code>\n     * </pre>\n     *\n     * @return <code><i>e</i><sup>this</sup></code>.\n     * @since 1.2\n     */\n    public Complex exp() {\n        if (isNaN) {\n            return NaN;\n        }\n\n        double expReal = FastMath.exp(real);\n        return createComplex(expReal *  FastMath.cos(imaginary),\n                             expReal * FastMath.sin(imaginary));\n    }\n\n    /**\n     * Compute the\n     * <a href="http://mathworld.wolfram.com/NaturalLogarithm.html" TARGET="_top">\n     * natural logarithm</a> of this complex number.\n     * Implements the formula:\n     * <pre>\n     *  <code>\n     *   log(a + bi) = ln(|a + bi|) + arg(a + bi)i\n     *  </code>\n     * </pre>\n     * where ln on the right hand side is {@link java.lang.Math#log},\n     * {@code |a + bi|} is the modulus, {@link Complex#abs},  and\n     * {@code arg(a + bi) = }{@link java.lang.Math#atan2}(b, a).\n     * <br/>\n     * Returns {@link Complex#NaN} if either real or imaginary part of the\n     * input argument is {@code NaN}.\n     * <br/>\n     * Infinite (or critical) values in real or imaginary parts of the input may\n     * result in infinite or NaN values returned in parts of the result.\n     * <pre>\n     *  Examples:\n     *  <code>\n     *   log(1 &plusmn; INFINITY i) = INFINITY &plusmn; (&pi;/2)i\n     *   log(INFINITY + i) = INFINITY + 0i\n     *   log(-INFINITY + i) = INFINITY + &pi;i\n     *   log(INFINITY &plusmn; INFINITY i) = INFINITY &plusmn; (&pi;/4)i\n     *   log(-INFINITY &plusmn; INFINITY i) = INFINITY &plusmn; (3&pi;/4)i\n     *   log(0 + 0i) = -INFINITY + 0i\n     *  </code>\n     * </pre>\n     *\n     * @return the value <code>ln &nbsp; this</code>, the natural logarithm\n     * of {@code this}.\n     * @since 1.2\n     */\n    public Complex log() {\n        if (isNaN) {\n            return NaN;\n        }\n\n        return createComplex(FastMath.log(abs()),\n                             FastMath.atan2(imaginary, real));\n    }\n\n    /**\n     * Returns of value of this complex number raised to the power of {@code x}.\n     * Implements the formula:\n     * <pre>\n     *  <code>\n     *   y<sup>x</sup> = exp(x&middot;log(y))\n     *  </code>\n     * </pre>\n     * where {@code exp} and {@code log} are {@link #exp} and\n     * {@link #log}, respectively.\n     * <br/>\n     * Returns {@link Complex#NaN} if either real or imaginary part of the\n     * input argument is {@code NaN} or infinite, or if {@code y}\n     * equals {@link Complex#ZERO}.\n     *\n     * @param  x exponent to which this {@code Complex} is to be raised.\n     * @return <code> this<sup>{@code x}</sup></code>.\n     * @throws NullArgumentException if x is {@code null}.\n     * @since 1.2\n     */\n    public Complex pow(Complex x)\n        throws NullArgumentException {\n        MathUtils.checkNotNull(x);\n        return this.log().multiply(x).exp();\n    }\n\n    /**\n     * Returns of value of this complex number raised to the power of {@code x}.\n     *\n     * @param  x exponent to which this {@code Complex} is to be raised.\n     * @return <code>this<sup>x</sup></code>.\n     * @see #pow(Complex)\n     */\n     public Complex pow(double x) {\n        return this.log().multiply(x).exp();\n    }\n\n    /**\n     * Compute the\n     * <a href="http://mathworld.wolfram.com/Sine.html" TARGET="_top">\n     * sine</a>\n     * of this complex number.\n     * Implements the formula:\n     * <pre>\n     *  <code>\n     *   sin(a + bi) = sin(a)cosh(b) - cos(a)sinh(b)i\n     *  </code>\n     * </pre>\n     * where the (real) functions on the right-hand side are\n     * {@link java.lang.Math#sin}, {@link java.lang.Math#cos},\n     * {@link MathUtils#cosh} and {@link MathUtils#sinh}.\n     * <br/>\n     * Returns {@link Complex#NaN} if either real or imaginary part of the\n     * input argument is {@code NaN}.\n     * <br/>\n     * Infinite values in real or imaginary parts of the input may result in\n     * infinite or {@code NaN} values returned in parts of the result.\n     * <pre>\n     *  Examples:\n     *  <code>\n     *   sin(1 &plusmn; INFINITY i) = 1 &plusmn; INFINITY i\n     *   sin(&plusmn;INFINITY + i) = NaN + NaN i\n     *   sin(&plusmn;INFINITY &plusmn; INFINITY i) = NaN + NaN i\n     *  </code>\n     * </pre>\n     *\n     * @return the sine of this complex number.\n     * @since 1.2\n     */\n    public Complex sin() {\n        if (isNaN) {\n            return NaN;\n        }\n\n        return createComplex(FastMath.sin(real) * MathUtils.cosh(imaginary),\n                             FastMath.cos(real) * MathUtils.sinh(imaginary));\n    }\n\n    /**\n     * Compute the\n     * <a href="http://mathworld.wolfram.com/HyperbolicSine.html" TARGET="_top">\n     * hyperbolic sine</a> of this complex number.\n     * Implements the formula:\n     * <pre>\n     *  <code>\n     *   sinh(a + bi) = sinh(a)cos(b)) + cosh(a)sin(b)i\n     *  </code>\n     * </pre>\n     * where the (real) functions on the right-hand side are\n     * {@link java.lang.Math#sin}, {@link java.lang.Math#cos},\n     * {@link MathUtils#cosh} and {@link MathUtils#sinh}.\n     * <br/>\n     * Returns {@link Complex#NaN} if either real or imaginary part of the\n     * input argument is {@code NaN}.\n     * <br/>\n     * Infinite values in real or imaginary parts of the input may result in\n     * infinite or NaN values returned in parts of the result.\n     * <pre>\n     *  Examples:\n     *  <code>\n     *   sinh(1 &plusmn; INFINITY i) = NaN + NaN i\n     *   sinh(&plusmn;INFINITY + i) = &plusmn; INFINITY + INFINITY i\n     *   sinh(&plusmn;INFINITY &plusmn; INFINITY i) = NaN + NaN i\n     *  </code>\n     * </pre>\n     *\n     * @return the hyperbolic sine of {@code this}.\n     * @since 1.2\n     */\n    public Complex sinh() {\n        if (isNaN) {\n            return NaN;\n        }\n\n        return createComplex(MathUtils.sinh(real) * FastMath.cos(imaginary),\n            MathUtils.cosh(real) * FastMath.sin(imaginary));\n    }\n\n    /**\n     * Compute the\n     * <a href="http://mathworld.wolfram.com/SquareRoot.html" TARGET="_top">\n     * square root</a> of this complex number.\n     * Implements the following algorithm to compute {@code sqrt(a + bi)}:\n     * <ol><li>Let {@code t = sqrt((|a| + |a + bi|) / 2)}</li>\n     * <li><pre>if {@code  a &#8805; 0} return {@code t + (b/2t)i}\n     *  else return {@code |b|/2t + sign(b)t i }</pre></li>\n     * </ol>\n     * where <ul>\n     * <li>{@code |a| = }{@link Math#abs}(a)</li>\n     * <li>{@code |a + bi| = }{@link Complex#abs}(a + bi)</li>\n     * <li>{@code sign(b) =  }{@link MathUtils#indicator}(b)\n     * </ul>\n     * <br/>\n     * Returns {@link Complex#NaN} if either real or imaginary part of the\n     * input argument is {@code NaN}.\n     * <br/>\n     * Infinite values in real or imaginary parts of the input may result in\n     * infinite or NaN values returned in parts of the result.\n     * <pre>\n     *  Examples:\n     *  <code>\n     *   sqrt(1 &plusmn; INFINITY i) = INFINITY + NaN i\n     *   sqrt(INFINITY + i) = INFINITY + 0i\n     *   sqrt(-INFINITY + i) = 0 + INFINITY i\n     *   sqrt(INFINITY &plusmn; INFINITY i) = INFINITY + NaN i\n     *   sqrt(-INFINITY &plusmn; INFINITY i) = NaN &plusmn; INFINITY i\n     *  </code>\n     * </pre>\n     *\n     * @return the square root of {@code this}.\n     * @since 1.2\n     */\n    public Complex sqrt() {\n        if (isNaN) {\n            return NaN;\n        }\n\n        if (real == 0.0 && imaginary == 0.0) {\n            return createComplex(0.0, 0.0);\n        }\n\n        double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);\n        if (real >= 0.0) {\n            return createComplex(t, imaginary / (2.0 * t));\n        } else {\n            return createComplex(FastMath.abs(imaginary) / (2.0 * t),\n                                 MathUtils.indicator(imaginary) * t);\n        }\n    }\n\n    /**\n     * Compute the\n     * <a href="http://mathworld.wolfram.com/SquareRoot.html" TARGET="_top">\n     * square root</a> of <code>1 - this<sup>2</sup></code> for this complex\n     * number.\n     * Computes the result directly as\n     * {@code sqrt(ONE.subtract(z.multiply(z)))}.\n     * <br/>\n     * Returns {@link Complex#NaN} if either real or imaginary part of the\n     * input argument is {@code NaN}.\n     * <br/>\n     * Infinite values in real or imaginary parts of the input may result in\n     * infinite or NaN values returned in parts of the result.\n     *\n     * @return the square root of <code>1 - this<sup>2</sup></code>.\n     * @since 1.2\n     */\n    public Complex sqrt1z() {\n        return createComplex(1.0, 0.0).subtract(this.multiply(this)).sqrt();\n    }\n\n    /**\n     * Compute the\n     * <a href="http://mathworld.wolfram.com/Tangent.html" TARGET="_top">\n     * tangent</a> of this complex number.\n     * Implements the formula:\n     * <pre>\n     *  <code>\n     *   tan(a + bi) = sin(2a)/(cos(2a)+cosh(2b)) + [sinh(2b)/(cos(2a)+cosh(2b))]i\n     *  </code>\n     * </pre>\n     * where the (real) functions on the right-hand side are\n     * {@link java.lang.Math#sin}, {@link java.lang.Math#cos},\n     * {@link MathUtils#cosh} and {@link MathUtils#sinh}.\n     * <br/>\n     * Returns {@link Complex#NaN} if either real or imaginary part of the\n     * input argument is {@code NaN}.\n     * <br/>\n     * Infinite (or critical) values in real or imaginary parts of the input may\n     * result in infinite or NaN values returned in parts of the result.\n     * <pre>\n     *  Examples:\n     *  <code>\n     *   tan(1 &plusmn; INFINITY i) = 0 + NaN i\n     *   tan(&plusmn;INFINITY + i) = NaN + NaN i\n     *   tan(&plusmn;INFINITY &plusmn; INFINITY i) = NaN + NaN i\n     *   tan(&plusmn;&pi;/2 + 0 i) = &plusmn;INFINITY + NaN i\n     *  </code>\n     * </pre>\n     *\n     * @return the tangent of {@code this}.\n     * @since 1.2\n     */\n    public Complex tan() {\n        if (isNaN) {\n            return NaN;\n        }\n\n        double real2 = 2.0 * real;\n        double imaginary2 = 2.0 * imaginary;\n        double d = FastMath.cos(real2) + MathUtils.cosh(imaginary2);\n\n        return createComplex(FastMath.sin(real2) / d,\n                             MathUtils.sinh(imaginary2) / d);\n    }\n\n    /**\n     * Compute the\n     * <a href="http://mathworld.wolfram.com/HyperbolicTangent.html" TARGET="_top">\n     * hyperbolic tangent</a> of this complex number.\n     * Implements the formula:\n     * <pre>\n     *  <code>\n     *   tan(a + bi) = sinh(2a)/(cosh(2a)+cos(2b)) + [sin(2b)/(cosh(2a)+cos(2b))]i\n     *  </code>\n     * </pre>\n     * where the (real) functions on the right-hand side are\n     * {@link java.lang.Math#sin}, {@link java.lang.Math#cos},\n     * {@link MathUtils#cosh} and {@link MathUtils#sinh}.\n     * <br/>\n     * Returns {@link Complex#NaN} if either real or imaginary part of the\n     * input argument is {@code NaN}.\n     * <br/>\n     * Infinite values in real or imaginary parts of the input may result in\n     * infinite or NaN values returned in parts of the result.\n     * <pre>\n     *  Examples:\n     *  <code>\n     *   tanh(1 &plusmn; INFINITY i) = NaN + NaN i\n     *   tanh(&plusmn;INFINITY + i) = NaN + 0 i\n     *   tanh(&plusmn;INFINITY &plusmn; INFINITY i) = NaN + NaN i\n     *   tanh(0 + (&pi;/2)i) = NaN + INFINITY i\n     *  </code>\n     * </pre>\n     *\n     * @return the hyperbolic tangent of {@code this}.\n     * @since 1.2\n     */\n    public Complex tanh() {\n        if (isNaN) {\n            return NaN;\n        }\n\n        double real2 = 2.0 * real;\n        double imaginary2 = 2.0 * imaginary;\n        double d = MathUtils.cosh(real2) + FastMath.cos(imaginary2);\n\n        return createComplex(MathUtils.sinh(real2) / d,\n                             FastMath.sin(imaginary2) / d);\n    }\n\n\n\n    /**\n     * Compute the argument of this complex number.\n     * The argument is the angle phi between the positive real axis and\n     * the point representing this number in the complex plane.\n     * The value returned is between -PI (not inclusive)\n     * and PI (inclusive), with negative values returned for numbers with\n     * negative imaginary parts.\n     * <br/>\n     * If either real or imaginary part (or both) is NaN, NaN is returned.\n     * Infinite parts are handled as {@code Math.atan2} handles them,\n     * essentially treating finite parts as zero in the presence of an\n     * infinite coordinate and returning a multiple of pi/4 depending on\n     * the signs of the infinite parts.\n     * See the javadoc for {@code Math.atan2} for full details.\n     *\n     * @return the argument of {@code this}.\n     */\n    public double getArgument() {\n        return FastMath.atan2(getImaginary(), getReal());\n    }\n\n    /**\n     * Computes the n-th roots of this complex number.\n     * The nth roots are defined by the formula:\n     * <pre>\n     *  <code>\n     *   z<sub>k</sub> = abs<sup>1/n</sup> (cos(phi + 2&pi;k/n) + i (sin(phi + 2&pi;k/n))\n     *  </code>\n     * </pre>\n     * for <i>{@code k=0, 1, ..., n-1}</i>, where {@code abs} and {@code phi}\n     * are respectively the {@link #abs() modulus} and\n     * {@link #getArgument() argument} of this complex number.\n     * <br/>\n     * If one or both parts of this complex number is NaN, a list with just\n     * one element, {@link #NaN} is returned.\n     * if neither part is NaN, but at least one part is infinite, the result\n     * is a one-element list containing {@link #INF}.\n     *\n     * @param n Degree of root.\n     * @return a List<Complex> of all {@code n}-th roots of {@code this}.\n     * @throws NotPositiveException if {@code n <= 0}.\n     * @since 2.0\n     */\n    public List<Complex> nthRoot(int n) {\n\n        if (n <= 0) {\n            throw new NotPositiveException(LocalizedFormats.CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N,\n                                           n);\n        }\n\n        final List<Complex> result = new ArrayList<Complex>();\n\n        if (isNaN) {\n            result.add(NaN);\n            return result;\n        }\n        if (isInfinite()) {\n            result.add(INF);\n            return result;\n        }\n\n        // nth root of abs -- faster / more accurate to use a solver here?\n        final double nthRootOfAbs = FastMath.pow(abs(), 1.0 / n);\n\n        // Compute nth roots of complex number with k = 0, 1, ... n-1\n        final double nthPhi = getArgument() / n;\n        final double slice = 2 * FastMath.PI / n;\n        double innerPart = nthPhi;\n        for (int k = 0; k < n ; k++) {\n            // inner part\n            final double realPart = nthRootOfAbs *  FastMath.cos(innerPart);\n            final double imaginaryPart = nthRootOfAbs *  FastMath.sin(innerPart);\n            result.add(createComplex(realPart, imaginaryPart));\n            innerPart += slice;\n        }\n\n        return result;\n    }\n\n    /**\n     * Create a complex number given the real and imaginary parts.\n     *\n     * @param realPart Real part.\n     * @param imaginaryPart Imaginary part.\n     * @return a new complex number instance.\n     * @since 1.2\n     * @see #valueOf(double, double)\n     */\n    protected Complex createComplex(double realPart,\n                                    double imaginaryPart) {\n        return new Complex(realPart, imaginaryPart);\n    }\n\n    /**\n     * Create a complex number given the real and imaginary parts.\n     *\n     * @param realPart Real part.\n     * @param imaginaryPart Imaginary part.\n     * @return a Complex instance.\n     */\n    public static Complex valueOf(double realPart,\n                                  double imaginaryPart) {\n        if (Double.isNaN(realPart) ||\n            Double.isNaN(imaginaryPart)) {\n            return NaN;\n        }\n        return new Complex(realPart, imaginaryPart);\n    }\n\n    /**\n     * Create a complex number given only the real part.\n     *\n     * @param realPart Real part.\n     * @return a Complex instance.\n     */\n    public static Complex valueOf(double realPart) {\n        if (Double.isNaN(realPart)) {\n            return NaN;\n        }\n        return new Complex(realPart);\n    }\n\n    /**\n     * Resolve the transient fields in a deserialized Complex Object.\n     * Subclasses will need to override {@link #createComplex} to\n     * deserialize properly.\n     *\n     * @return A Complex instance with all fields resolved.\n     * @since 2.0\n     */\n    protected final Object readResolve() {\n        return createComplex(real, imaginary);\n    }\n\n    /** {@inheritDoc} */\n    public ComplexField getField() {\n        return ComplexField.getInstance();\n    }\n\n    /** {@inheritDoc} */\n    @Override\n    public String toString() {\n        return "(" + real + ", " + imaginary + ")";\n    }\n}', 'tree': 'MethodDeclaration modifiers public_ter ^ ^ return_type ReferenceType name Complex_ter ^ ^ ^ ^ name meth0 ^ ^ parameters FormalParameter type BasicType name double_ter ^ ^ ^ ^ name par0 ^ ^ ^ ^ body IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MemberReference member isNaN_ter ^ ^ ^ ^ operandr MethodInvocation qualifier Double_ter ^ ^ arguments MemberReference member par0 ^ ^ ^ ^ member isNaN_ter ^ ^ ^ ^ ^ ^ then_statement BlockStatement statements ReturnStatement expression MemberReference member NaN_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value 0d_ter ^ ^ ^ ^ ^ ^ then_statement BlockStatement statements ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ IfStatement condition MethodInvocation qualifier Double_ter ^ ^ arguments MemberReference member par0 ^ ^ ^ ^ member isInfinite_ter ^ ^ ^ ^ then_statement BlockStatement statements ReturnStatement expression TernaryExpression condition MethodInvocation prefix_operators !_ter ^ ^ member isInfinite_ter ^ ^ ^ ^ if_true MemberReference member ZERO_ter ^ ^ ^ ^ if_false MemberReference member NaN_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ReturnStatement expression MethodInvocation arguments BinaryOperation operator /_ter ^ ^ operandl MemberReference member real_ter ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ BinaryOperation operator /_ter ^ ^ operandl MemberReference member imaginary_ter ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ member createComplex_ter ^ ^ ^ ^ ^ ^ ^ ', 'prob': [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], 'mode': 0, 'line': 297, 'isa': False, 'fl_score': 1}]
before@0 batch0 x: 0: root ^  ; []
after@0 batch0 x: 0: root ^  ; []
before@0 batch1 x: 0: root ^  ; []
after@0 batch1 x: 0: root ^  ; []
copynode 0:  root modified ^ ^ ; ['root -> modified']
copynode 0:  root add ^ ^ ; ['root -> add']
copynode 0:  root return_type ^ ^ ; ['root -> return_type']
copynode 0:  root ^ ; ['root -> End']
copynode 0:  root ReturnStatement ^ ^ ; ['root -> ReturnStatement']
copynode 0:  root IfStatement ^ ^ ; ['root -> IfStatement']
copynode 0:  root StatementExpression ^ ^ ; ['root -> StatementExpression']
copynode 0:  root parameters ^ ^ ; ['root -> parameters']
copynode 0:  root MemberReference-MemberReference member isZero_ter ^ ^ ^  ^ ^ ; ['copy-MemberReference']
copynode 0:  root MemberReference-MemberReference member INF_ter ^ ^ ^  ^ ^ ; ['copy-MemberReference']
copynode 0:  root modified ^ ^ ; ['root -> modified']
copynode 0:  root add ^ ^ ; ['root -> add']
copynode 0:  root MemberReference-MemberReference member INF_ter ^ ^ ^  ^ ^ ; ['copy-MemberReference']
copynode 0:  root ^ ; ['root -> End']
copynode 0:  root return_type ^ ^ ; ['root -> return_type']
copynode 0:  root IfStatement ^ ^ ; ['root -> IfStatement']
copynode 0:  root MemberReference-MemberReference member isZero_ter ^ ^ ^  ^ ^ ; ['copy-MemberReference']
copynode 0:  root ReturnStatement ^ ^ ; ['root -> ReturnStatement']
copynode 0:  root StatementExpression ^ ^ ; ['root -> StatementExpression']
copynode 0:  root MemberReference-MemberReference member NaN_ter ^ ^ ^  ^ ^ ; ['copy-MemberReference']
before@1 batch0 x: -11.254305839538574: root MemberReference-MemberReference member INF_ter ^ ^ ^  ^ ^  ; ['copy-MemberReference']
after@1 batch0 x: -11.254305839538574: root MemberReference-MemberReference member INF_ter ^ ^ ^  ^ ^  ; ['copy-MemberReference']
before@1 batch1 x: -12.547004699707031: root MemberReference-MemberReference member NaN_ter ^ ^ ^  ^ ^  ; ['copy-MemberReference']
after@1 batch1 x: -12.547004699707031: root MemberReference-MemberReference member NaN_ter ^ ^ ^  ^ ^  ; ['copy-MemberReference']
copynode -0.1593162715435028:  root modified ^ ReturnStatement ^ ^ ; ['root -> modified', 'root -> ReturnStatement']
copynode -0.1593162715435028:  root modified ^ MemberReference-MemberReference member INF_ter ^ ^ ^  ^ ^ ; ['root -> modified', 'copy-MemberReference']
copynode -0.1593162715435028:  root modified ^ MemberReference-MemberReference member isZero_ter ^ ^ ^  ^ ^ ; ['root -> modified', 'copy-MemberReference']
copynode -1.917731523513794:  root add ^ IfStatement ^ ^ ; ['root -> add', 'root -> IfStatement']
copynode -0.1593162715435028:  root modified ^ MemberReference-MemberReference member NaN_ter ^ ^ ^  ^ ^ ; ['root -> modified', 'copy-MemberReference']
copynode -1.917731523513794:  root add ^ StatementExpression ^ ^ ; ['root -> add', 'root -> StatementExpression']
copynode -1.917731523513794:  root add ^ ReturnStatement ^ ^ ; ['root -> add', 'root -> ReturnStatement']
copynode -1.917731523513794:  root add ^ LocalVariableDeclaration ^ ^ ; ['root -> add', 'root -> LocalVariableDeclaration']
copynode -0.1593162715435028:  root modified ^ ReturnStatement_ter ^ ^ ; ['root -> modified', 'root -> ReturnStatement_ter']
copynode -0.1593162715435028:  root modified ^ IfStatement ^ ^ ; ['root -> modified', 'root -> IfStatement']
copynode -1.917731523513794:  root add ^ control ^ ^ ; ['root -> add', 'root -> control']
copynode -0.1593162715435028:  root modified ^ ContinueStatement_ter ^ ^ ; ['root -> modified', 'root -> ContinueStatement_ter']
copynode -0.1593162715435028:  root modified ^ StatementExpression ^ ^ ; ['root -> modified', 'root -> StatementExpression']
copynode -0.1593162715435028:  root modified ^ ^ ; ['root -> modified', 'root -> End']
copynode -1.917731523513794:  root add ^ AssertStatement ^ ^ ; ['root -> add', 'root -> AssertStatement']
copynode -1.917731523513794:  root add ^ ReturnStatement_ter ^ ^ ; ['root -> add', 'root -> ReturnStatement_ter']
copynode -1.917731523513794:  root add ^ WhileStatement ^ ^ ; ['root -> add', 'root -> WhileStatement']
copynode -1.917731523513794:  root add ^ BreakStatement_ter ^ ^ ; ['root -> add', 'root -> BreakStatement_ter']
copynode -0.1593162715435028:  root modified ^ control ^ ^ ; ['root -> modified', 'root -> control']
copynode -1.917731523513794:  root add ^ Statement_ter ^ ^ ; ['root -> add', 'root -> Statement_ter']
copynode -9.656149864196777:  root return_type ReferenceType ^ ^ ^ ; ['root -> return_type', 'return_type -> ReferenceType']
copynode -10.026890754699707:  root ReturnStatement expression ^ ^ ^ ; ['root -> ReturnStatement', 'ReturnStatement -> expression']
copynode -10.530245780944824:  root IfStatement condition ^ ^ ^ ; ['root -> IfStatement', 'IfStatement -> condition']
copynode -10.75078296661377:  root StatementExpression expression ^ ^ ^ ; ['root -> StatementExpression', 'StatementExpression -> expression']
copynode -11.055936813354492:  root MemberReference-MemberReference member isZero_ter ^ ^ ^  member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> member']
copynode -10.976243019104004:  root parameters FormalParameter ^ ^ ^ ; ['root -> parameters', 'parameters -> FormalParameter']
copynode -11.254305839538574:  root MemberReference-MemberReference member INF_ter ^ ^ ^  member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> member']
copynode -9.656149864196777:  root return_type BasicType ^ ^ ^ ; ['root -> return_type', 'return_type -> BasicType']
copynode -10.976243019104004:  root parameters ^ ^ ; ['root -> parameters', 'parameters -> End']
copynode -10.75078296661377:  root StatementExpression expression MethodInvocation qualifier MathUtils_ter ^ ^ arguments MemberReference member par0 ^ ^ ^ ^ member checkNotNull_ter ^ ^ ^ ^ ^ ^ ; ['root -> StatementExpression', 'copy-StatementExpression']
copynode -10.026890754699707:  root ReturnStatement expression MemberReference member NaN_ter ^ ^ ^ ^ ^ ^ ; ['root -> ReturnStatement', 'copy-ReturnStatement']
copynode -10.026890754699707:  root ReturnStatement expression MemberReference member ZERO_ter ^ ^ ^ ^ ^ ^ ; ['root -> ReturnStatement', 'copy-ReturnStatement']
copynode -11.055936813354492:  root MemberReference-MemberReference member isZero_ter ^ ^ ^  qualifier ^ member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> qualifier member']
copynode -10.026890754699707:  root ReturnStatement expression MethodInvocation arguments BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member real_ter ^ ^ ^ ^ operandr MemberReference member loc4 ^ ^ ^ ^ ^ ^ operandr MemberReference member imaginary_ter ^ ^ ^ ^ ^ ^ operandr MemberReference member loc5 ^ ^ ^ ^ ^ BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member imaginary_ter ^ ^ ^ ^ operandr MemberReference member loc4 ^ ^ ^ ^ ^ ^ operandr MemberReference member real_ter ^ ^ ^ ^ ^ ^ operandr MemberReference member loc5 ^ ^ ^ ^ ^ ^ member createComplex_ter ^ ^ ^ ^ ^ ^ ; ['root -> ReturnStatement', 'copy-ReturnStatement']
copynode -11.254305839538574:  root MemberReference-MemberReference member INF_ter ^ ^ ^  qualifier ^ member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> qualifier member']
copynode -11.055936813354492:  root MemberReference-MemberReference member isZero_ter ^ ^ ^  prefix_operators ^ member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> prefix_operators member']
copynode -11.254305839538574:  root MemberReference-MemberReference member INF_ter ^ ^ ^  prefix_operators ^ member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> prefix_operators member']
copynode -10.976243019104004:  root parameters MemberReference ^ ^ ^ ; ['root -> parameters', 'parameters -> MemberReference']
copynode -10.026890754699707:  root ReturnStatement expression MethodInvocation arguments BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member imaginary_ter ^ ^ ^ ^ operandr MemberReference member loc4 ^ ^ ^ ^ ^ ^ operandr MemberReference member real_ter ^ ^ ^ ^ ^ ^ operandr MemberReference member loc5 ^ ^ ^ ^ ^ BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator -_ter ^ ^ operandl MemberReference member imaginary_ter ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MemberReference member real_ter ^ ^ ^ ^ operandr MemberReference member loc4 ^ ^ ^ ^ ^ ^ ^ ^ operandr MemberReference member loc5 ^ ^ ^ ^ ^ ^ member createComplex_ter ^ ^ ^ ^ ^ ^ ; ['root -> ReturnStatement', 'copy-ReturnStatement']
copynode -11.254305839538574:  root MemberReference-MemberReference member INF_ter ^ ^ ^  postfix_operators ^ member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> postfix_operators member']
copynode -10.976243019104004:  root parameters InferredFormalParameter ^ ^ ^ ; ['root -> parameters', 'parameters -> InferredFormalParameter']
copynode -9.656149864196777:  root return_type ReferenceType name Complex_ter ^ ^ ^ ^ ^ ; ['root -> return_type', 'copy-return_type']
copynode -11.055936813354492:  root MemberReference-MemberReference member isZero_ter ^ ^ ^  postfix_operators ^ member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> postfix_operators member']
copynode -11.055936813354492:  root MemberReference-MemberReference member isZero_ter ^ ^ ^  selectors ^ member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> selectors member']
copynode -11.254305839538574:  root MemberReference-MemberReference member INF_ter ^ ^ ^  selectors ^ member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> selectors member']
copynode -10.976243019104004:  root parameters FormalParameter type ReferenceType name Complex_ter ^ ^ ^ ^ name par0 ^ ^ ^ ^ ^ ; ['root -> parameters', 'copy-parameters']
copynode -10.026890754699707:  root ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> ReturnStatement', 'copy-ReturnStatement']
copynode -11.055936813354492:  root MemberReference-MemberReference member isZero_ter ^ ^ ^  prefix_operators ^ qualifier ^ member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> prefix_operators qualifier member']
copynode -10.530245780944824:  root IfStatement condition MemberReference qualifier par0 ^ ^ member isZero_ter ^ ^ ^ ^ then_statement BlockStatement statements ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> IfStatement', 'copy-IfStatement']
copynode -10.530245780944824:  root IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MemberReference member isNaN_ter ^ ^ ^ ^ operandr MemberReference qualifier par0 ^ ^ member isNaN_ter ^ ^ ^ ^ ^ ^ then_statement BlockStatement statements ReturnStatement expression MemberReference member NaN_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> IfStatement', 'copy-IfStatement']
copynode -10.530245780944824:  root IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier par0 ^ ^ member isInfinite_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member isInfinite_ter ^ ^ ^ ^ ^ ^ then_statement BlockStatement statements ReturnStatement expression MemberReference member ZERO_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> IfStatement', 'copy-IfStatement']
copynode -10.75078296661377:  root StatementExpression par0 ^ ^ ^ ; ['root -> StatementExpression', 'copy-FormalParameter']
copynode -11.055936813354492:  root MemberReference-MemberReference member isZero_ter ^ ^ ^  qualifier ^ selectors ^ member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> qualifier selectors member']
copynode -9.656149864196777:  root return_type par0 ^ ^ ^ ; ['root -> return_type', 'copy-FormalParameter']
copynode -11.254305839538574:  root MemberReference-MemberReference member INF_ter ^ ^ ^  prefix_operators ^ qualifier ^ member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> prefix_operators qualifier member']
copynode -10.530245780944824:  root IfStatement condition BinaryOperation operator <_ter ^ ^ operandl MethodInvocation qualifier FastMath_ter ^ ^ arguments MemberReference member loc0 ^ ^ ^ ^ member abs_ter ^ ^ ^ ^ operandr MethodInvocation qualifier FastMath_ter ^ ^ arguments MemberReference member loc1 ^ ^ ^ ^ member abs_ter ^ ^ ^ ^ ^ ^ then_statement BlockStatement statements LocalVariableDeclaration type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name loc4 ^ ^ initializer BinaryOperation operator /_ter ^ ^ operandl MemberReference member loc0 ^ ^ ^ ^ operandr MemberReference member loc1 ^ ^ ^ ^ ^ ^ ^ ^ ^ LocalVariableDeclaration type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name loc5 ^ ^ initializer BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member loc0 ^ ^ ^ ^ operandr MemberReference member loc4 ^ ^ ^ ^ ^ ^ operandr MemberReference member loc1 ^ ^ ^ ^ ^ ^ ^ ^ ^ ReturnStatement expression MethodInvocation arguments BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member real_ter ^ ^ ^ ^ operandr MemberReference member loc4 ^ ^ ^ ^ ^ ^ operandr MemberReference member imaginary_ter ^ ^ ^ ^ ^ ^ operandr MemberReference member loc5 ^ ^ ^ ^ ^ BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member imaginary_ter ^ ^ ^ ^ operandr MemberReference member loc4 ^ ^ ^ ^ ^ ^ operandr MemberReference member real_ter ^ ^ ^ ^ ^ ^ operandr MemberReference member loc5 ^ ^ ^ ^ ^ ^ member createComplex_ter ^ ^ ^ ^ ^ ^ ^ ^ else_statement BlockStatement statements LocalVariableDeclaration type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name loc4 ^ ^ initializer BinaryOperation operator /_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr MemberReference member loc0 ^ ^ ^ ^ ^ ^ ^ ^ ^ LocalVariableDeclaration type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name loc5 ^ ^ initializer BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr MemberReference member loc4 ^ ^ ^ ^ ^ ^ operandr MemberReference member loc0 ^ ^ ^ ^ ^ ^ ^ ^ ^ ReturnStatement expression MethodInvocation arguments BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member imaginary_ter ^ ^ ^ ^ operandr MemberReference member loc4 ^ ^ ^ ^ ^ ^ operandr MemberReference member real_ter ^ ^ ^ ^ ^ ^ operandr MemberReference member loc5 ^ ^ ^ ^ ^ BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator -_ter ^ ^ operandl MemberReference member imaginary_ter ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MemberReference member real_ter ^ ^ ^ ^ operandr MemberReference member loc4 ^ ^ ^ ^ ^ ^ ^ ^ operandr MemberReference member loc5 ^ ^ ^ ^ ^ ^ member createComplex_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> IfStatement', 'copy-IfStatement']
copynode -11.254305839538574:  root MemberReference-MemberReference member INF_ter ^ ^ ^  qualifier ^ selectors ^ member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> qualifier selectors member']
copynode -10.976243019104004:  root parameters loc5 ^ ^ ^ ; ['root -> parameters', 'copy-VariableDeclarator']
copynode -10.976243019104004:  root parameters loc4 ^ ^ ^ ; ['root -> parameters', 'copy-VariableDeclarator']
copynode -10.976243019104004:  root parameters loc1 ^ ^ ^ ; ['root -> parameters', 'copy-VariableDeclarator']
copynode -10.976243019104004:  root parameters loc0 ^ ^ ^ ; ['root -> parameters', 'copy-VariableDeclarator']
copynode -10.75078296661377:  root StatementExpression unknown ^ ^ ^ ; ['root -> StatementExpression', 'start -> unknown']
copynode -10.976243019104004:  root parameters loc4 ^ ^ ^ ; ['root -> parameters', 'copy-VariableDeclarator']
copynode -11.055936813354492:  root MemberReference-MemberReference member isZero_ter ^ ^ ^  prefix_operators ^ selectors ^ member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> prefix_operators selectors member']
copynode -11.254305839538574:  root MemberReference-MemberReference member INF_ter ^ ^ ^  prefix_operators ^ selectors ^ member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> prefix_operators selectors member']
copynode -10.026890754699707:  root ReturnStatement par0 ^ ^ ^ ; ['root -> ReturnStatement', 'copy-FormalParameter']
copynode -9.656149864196777:  root return_type unknown ^ ^ ^ ; ['root -> return_type', 'start -> unknown']
copynode -11.055936813354492:  root MemberReference-MemberReference member isZero_ter ^ ^ ^  prefix_operators ^ qualifier ^ selectors ^ member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> prefix_operators qualifier selectors member']
copynode -11.254305839538574:  root MemberReference-MemberReference member INF_ter ^ ^ ^  postfix_operators ^ selectors ^ member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> postfix_operators selectors member']
copynode -11.254305839538574:  root MemberReference-MemberReference member INF_ter ^ ^ ^  prefix_operators ^ qualifier ^ selectors ^ member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> prefix_operators qualifier selectors member']
copynode -10.530245780944824:  root IfStatement condition ^ then_statement ^ ^ ^ ; ['root -> IfStatement', 'IfStatement -> condition then_statement']
copynode -11.055936813354492:  root MemberReference-MemberReference member isZero_ter ^ ^ ^  postfix_operators ^ selectors ^ member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> postfix_operators selectors member']
copynode -10.530245780944824:  root IfStatement unknown ^ ^ ^ ; ['root -> IfStatement', 'start -> unknown']
copynode -10.026890754699707:  root ReturnStatement unknown ^ ^ ^ ; ['root -> ReturnStatement', 'start -> unknown']
copynode -10.530245780944824:  root IfStatement par0 ^ ^ ^ ; ['root -> IfStatement', 'copy-FormalParameter']
copynode -9.656149864196777:  root return_type loc0 ^ ^ ^ ; ['root -> return_type', 'copy-VariableDeclarator']
copynode -9.656149864196777:  root return_type loc1 ^ ^ ^ ; ['root -> return_type', 'copy-VariableDeclarator']
copynode -9.656149864196777:  root return_type loc4 ^ ^ ^ ; ['root -> return_type', 'copy-VariableDeclarator']
copynode -10.530245780944824:  root IfStatement condition ^ then_statement ^ else_statement ^ ^ ^ ; ['root -> IfStatement', 'IfStatement -> condition then_statement else_statement']
copynode -9.656149864196777:  root return_type loc4 ^ ^ ^ ; ['root -> return_type', 'copy-VariableDeclarator']
copynode -9.656149864196777:  root return_type loc5 ^ ^ ^ ; ['root -> return_type', 'copy-VariableDeclarator']
copynode -10.75078296661377:  root StatementExpression loc4 ^ ^ ^ ; ['root -> StatementExpression', 'copy-VariableDeclarator']
copynode -10.75078296661377:  root StatementExpression loc5 ^ ^ ^ ; ['root -> StatementExpression', 'copy-VariableDeclarator']
copynode -10.75078296661377:  root StatementExpression loc5 ^ ^ ^ ; ['root -> StatementExpression', 'copy-VariableDeclarator']
copynode -10.75078296661377:  root StatementExpression loc1 ^ ^ ^ ; ['root -> StatementExpression', 'copy-VariableDeclarator']
copynode -10.75078296661377:  root StatementExpression loc0 ^ ^ ^ ; ['root -> StatementExpression', 'copy-VariableDeclarator']
copynode -10.75078296661377:  root StatementExpression loc4 ^ ^ ^ ; ['root -> StatementExpression', 'copy-VariableDeclarator']
copynode -10.026890754699707:  root ReturnStatement loc4 ^ ^ ^ ; ['root -> ReturnStatement', 'copy-VariableDeclarator']
copynode -10.026890754699707:  root ReturnStatement loc1 ^ ^ ^ ; ['root -> ReturnStatement', 'copy-VariableDeclarator']
copynode -10.530245780944824:  root IfStatement loc0 ^ ^ ^ ; ['root -> IfStatement', 'copy-VariableDeclarator']
copynode -0.04231734573841095:  root modified ^ MemberReference-MemberReference member INF_ter ^ ^ ^  ^ ^ ; ['root -> modified', 'copy-MemberReference']
copynode -0.04231734573841095:  root modified ^ ReturnStatement ^ ^ ; ['root -> modified', 'root -> ReturnStatement']
copynode -0.04231734573841095:  root modified ^ MemberReference-MemberReference member isZero_ter ^ ^ ^  ^ ^ ; ['root -> modified', 'copy-MemberReference']
copynode -0.04231734573841095:  root modified ^ MemberReference-MemberReference member NaN_ter ^ ^ ^  ^ ^ ; ['root -> modified', 'copy-MemberReference']
copynode -3.1882524490356445:  root add ^ IfStatement ^ ^ ; ['root -> add', 'root -> IfStatement']
copynode -3.1882524490356445:  root add ^ StatementExpression ^ ^ ; ['root -> add', 'root -> StatementExpression']
copynode -3.1882524490356445:  root add ^ ReturnStatement ^ ^ ; ['root -> add', 'root -> ReturnStatement']
copynode -0.04231734573841095:  root modified ^ ^ ; ['root -> modified', 'root -> End']
copynode -0.04231734573841095:  root modified ^ StatementExpression ^ ^ ; ['root -> modified', 'root -> StatementExpression']
copynode -0.04231734573841095:  root modified ^ IfStatement ^ ^ ; ['root -> modified', 'root -> IfStatement']
copynode -3.1882524490356445:  root add ^ LocalVariableDeclaration ^ ^ ; ['root -> add', 'root -> LocalVariableDeclaration']
copynode -0.04231734573841095:  root modified ^ ReturnStatement_ter ^ ^ ; ['root -> modified', 'root -> ReturnStatement_ter']
copynode -3.1882524490356445:  root add ^ control ^ ^ ; ['root -> add', 'root -> control']
copynode -0.04231734573841095:  root modified ^ ContinueStatement_ter ^ ^ ; ['root -> modified', 'root -> ContinueStatement_ter']
copynode -3.1882524490356445:  root add ^ ReturnStatement_ter ^ ^ ; ['root -> add', 'root -> ReturnStatement_ter']
copynode -0.04231734573841095:  root modified ^ control ^ ^ ; ['root -> modified', 'root -> control']
copynode -3.1882524490356445:  root add ^ AssertStatement ^ ^ ; ['root -> add', 'root -> AssertStatement']
copynode -10.305425643920898:  root MemberReference-MemberReference member INF_ter ^ ^ ^  member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> member']
copynode -3.1882524490356445:  root add ^ BreakStatement_ter ^ ^ ; ['root -> add', 'root -> BreakStatement_ter']
copynode -3.1882524490356445:  root add ^ MemberReference-MemberReference member INF_ter ^ ^ ^  ^ ^ ; ['root -> add', 'copy-MemberReference']
copynode -3.1882524490356445:  root add ^ WhileStatement ^ ^ ; ['root -> add', 'root -> WhileStatement']
copynode -10.916911125183105:  root IfStatement condition ^ ^ ^ ; ['root -> IfStatement', 'IfStatement -> condition']
copynode -11.032291412353516:  root MemberReference-MemberReference member isZero_ter ^ ^ ^  member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> member']
copynode -11.05936336517334:  root ReturnStatement expression ^ ^ ^ ; ['root -> ReturnStatement', 'ReturnStatement -> expression']
copynode -10.889056205749512:  root return_type ReferenceType ^ ^ ^ ; ['root -> return_type', 'return_type -> ReferenceType']
copynode -11.83325481414795:  root StatementExpression expression ^ ^ ^ ; ['root -> StatementExpression', 'StatementExpression -> expression']
copynode -12.547004699707031:  root MemberReference-MemberReference member NaN_ter ^ ^ ^  member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> member']
copynode -10.889056205749512:  root return_type BasicType ^ ^ ^ ; ['root -> return_type', 'return_type -> BasicType']
copynode -10.305425643920898:  root MemberReference-MemberReference member INF_ter ^ ^ ^  qualifier ^ member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> qualifier member']
copynode -11.032291412353516:  root MemberReference-MemberReference member isZero_ter ^ ^ ^  qualifier ^ member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> qualifier member']
copynode -11.05936336517334:  root ReturnStatement expression MemberReference member NaN_ter ^ ^ ^ ^ ^ ^ ; ['root -> ReturnStatement', 'copy-ReturnStatement']
copynode -11.05936336517334:  root ReturnStatement expression TernaryExpression condition MethodInvocation prefix_operators !_ter ^ ^ member isInfinite_ter ^ ^ ^ ^ if_true MemberReference member ZERO_ter ^ ^ ^ ^ if_false MemberReference member NaN_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> ReturnStatement', 'copy-ReturnStatement']
copynode -11.05936336517334:  root ReturnStatement expression MethodInvocation arguments BinaryOperation operator /_ter ^ ^ operandl MemberReference member real_ter ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ BinaryOperation operator /_ter ^ ^ operandl MemberReference member imaginary_ter ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ member createComplex_ter ^ ^ ^ ^ ^ ^ ; ['root -> ReturnStatement', 'copy-ReturnStatement']
copynode -12.547004699707031:  root MemberReference-MemberReference member NaN_ter ^ ^ ^  qualifier ^ member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> qualifier member']
copynode -10.305425643920898:  root MemberReference-MemberReference member INF_ter ^ ^ ^  prefix_operators ^ member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> prefix_operators member']
copynode -11.032291412353516:  root MemberReference-MemberReference member isZero_ter ^ ^ ^  prefix_operators ^ member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> prefix_operators member']
copynode -10.305425643920898:  root MemberReference-MemberReference member INF_ter ^ ^ ^  selectors ^ member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> selectors member']
copynode -10.889056205749512:  root return_type ReferenceType name Complex_ter ^ ^ ^ ^ ^ ; ['root -> return_type', 'copy-return_type']
copynode -11.032291412353516:  root MemberReference-MemberReference member isZero_ter ^ ^ ^  selectors ^ member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> selectors member']
copynode -10.305425643920898:  root MemberReference-MemberReference member INF_ter ^ ^ ^  postfix_operators ^ member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> postfix_operators member']
copynode -12.547004699707031:  root MemberReference-MemberReference member NaN_ter ^ ^ ^  prefix_operators ^ member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> prefix_operators member']
copynode -11.032291412353516:  root MemberReference-MemberReference member isZero_ter ^ ^ ^  postfix_operators ^ member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> postfix_operators member']
copynode -12.547004699707031:  root MemberReference-MemberReference member NaN_ter ^ ^ ^  selectors ^ member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> selectors member']
copynode -11.05936336517334:  root ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> ReturnStatement', 'copy-ReturnStatement']
copynode -12.547004699707031:  root MemberReference-MemberReference member NaN_ter ^ ^ ^  postfix_operators ^ member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> postfix_operators member']
copynode -10.305425643920898:  root MemberReference-MemberReference member INF_ter ^ ^ ^  qualifier ^ selectors ^ member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> qualifier selectors member']
copynode -11.032291412353516:  root MemberReference-MemberReference member isZero_ter ^ ^ ^  prefix_operators ^ qualifier ^ member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> prefix_operators qualifier member']
copynode -10.305425643920898:  root MemberReference-MemberReference member INF_ter ^ ^ ^  prefix_operators ^ qualifier ^ member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> prefix_operators qualifier member']
copynode -11.032291412353516:  root MemberReference-MemberReference member isZero_ter ^ ^ ^  qualifier ^ selectors ^ member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> qualifier selectors member']
copynode -10.889056205749512:  root return_type par0 ^ ^ ^ ; ['root -> return_type', 'copy-FormalParameter']
copynode -10.916911125183105:  root IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value 0d_ter ^ ^ ^ ^ ^ ^ then_statement BlockStatement statements ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> IfStatement', 'copy-IfStatement']
copynode -10.916911125183105:  root IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MemberReference member isNaN_ter ^ ^ ^ ^ operandr MethodInvocation qualifier Double_ter ^ ^ arguments MemberReference member par0 ^ ^ ^ ^ member isNaN_ter ^ ^ ^ ^ ^ ^ then_statement BlockStatement statements ReturnStatement expression MemberReference member NaN_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> IfStatement', 'copy-IfStatement']
copynode -10.305425643920898:  root MemberReference-MemberReference member INF_ter ^ ^ ^  prefix_operators ^ selectors ^ member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> prefix_operators selectors member']
copynode -10.916911125183105:  root IfStatement condition MethodInvocation qualifier Double_ter ^ ^ arguments MemberReference member par0 ^ ^ ^ ^ member isInfinite_ter ^ ^ ^ ^ then_statement BlockStatement statements ReturnStatement expression TernaryExpression condition MethodInvocation prefix_operators !_ter ^ ^ member isInfinite_ter ^ ^ ^ ^ if_true MemberReference member ZERO_ter ^ ^ ^ ^ if_false MemberReference member NaN_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> IfStatement', 'copy-IfStatement']
copynode -11.83325481414795:  root StatementExpression par0 ^ ^ ^ ; ['root -> StatementExpression', 'copy-FormalParameter']
copynode -11.032291412353516:  root MemberReference-MemberReference member isZero_ter ^ ^ ^  prefix_operators ^ selectors ^ member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> prefix_operators selectors member']
copynode -12.547004699707031:  root MemberReference-MemberReference member NaN_ter ^ ^ ^  qualifier ^ selectors ^ member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> qualifier selectors member']
copynode -12.547004699707031:  root MemberReference-MemberReference member NaN_ter ^ ^ ^  prefix_operators ^ qualifier ^ member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> prefix_operators qualifier member']
copynode -10.305425643920898:  root MemberReference-MemberReference member INF_ter ^ ^ ^  postfix_operators ^ selectors ^ member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> postfix_operators selectors member']
copynode -10.305425643920898:  root MemberReference-MemberReference member INF_ter ^ ^ ^  prefix_operators ^ qualifier ^ selectors ^ member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> prefix_operators qualifier selectors member']
copynode -12.547004699707031:  root MemberReference-MemberReference member NaN_ter ^ ^ ^  prefix_operators ^ selectors ^ member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> prefix_operators selectors member']
copynode -11.032291412353516:  root MemberReference-MemberReference member isZero_ter ^ ^ ^  prefix_operators ^ qualifier ^ selectors ^ member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> prefix_operators qualifier selectors member']
copynode -11.83325481414795:  root StatementExpression unknown ^ ^ ^ ; ['root -> StatementExpression', 'start -> unknown']
copynode -11.05936336517334:  root ReturnStatement par0 ^ ^ ^ ; ['root -> ReturnStatement', 'copy-FormalParameter']
copynode -10.889056205749512:  root return_type unknown ^ ^ ^ ; ['root -> return_type', 'start -> unknown']
copynode -11.032291412353516:  root MemberReference-MemberReference member isZero_ter ^ ^ ^  postfix_operators ^ selectors ^ member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> postfix_operators selectors member']
copynode -10.916911125183105:  root IfStatement unknown ^ ^ ^ ; ['root -> IfStatement', 'start -> unknown']
copynode -10.916911125183105:  root IfStatement condition ^ then_statement ^ ^ ^ ; ['root -> IfStatement', 'IfStatement -> condition then_statement']
copynode -12.547004699707031:  root MemberReference-MemberReference member NaN_ter ^ ^ ^  postfix_operators ^ selectors ^ member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> postfix_operators selectors member']
copynode -11.05936336517334:  root ReturnStatement unknown ^ ^ ^ ; ['root -> ReturnStatement', 'start -> unknown']
copynode -12.547004699707031:  root MemberReference-MemberReference member NaN_ter ^ ^ ^  prefix_operators ^ qualifier ^ selectors ^ member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> prefix_operators qualifier selectors member']
copynode -10.916911125183105:  root IfStatement condition ^ then_statement ^ else_statement ^ ^ ^ ; ['root -> IfStatement', 'IfStatement -> condition then_statement else_statement']
copynode -10.916911125183105:  root IfStatement par0 ^ ^ ^ ; ['root -> IfStatement', 'copy-FormalParameter']
copynode -11.83325481414795:  root StatementExpression label ^ expression ^ ^ ^ ; ['root -> StatementExpression', 'StatementExpression -> label expression']
before@2 batch0 x: -34.08439350128174: root IfStatement loc0 ^ ^ ^  ; ['root -> IfStatement', 'copy-VariableDeclarator']
after@2 batch0 x: -34.08439350128174: root IfStatement loc0 ^ ^ ^  ; ['root -> IfStatement', 'copy-VariableDeclarator']
before@2 batch1 x: -31.384272575378418: root StatementExpression label ^ expression ^ ^ ^  ; ['root -> StatementExpression', 'StatementExpression -> label expression']
after@2 batch1 x: -31.384272575378418: root StatementExpression label ^ expression ^ ^ ^  ; ['root -> StatementExpression', 'StatementExpression -> label expression']
copynode -1.1248519122600555:  root modified ^ ReturnStatement expression ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression']
copynode -1.2972581088542938:  root modified ^ MemberReference-MemberReference member INF_ter ^ ^ ^  member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member']
copynode -1.6660173833370209:  root modified ^ MemberReference-MemberReference member isZero_ter ^ ^ ^  member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member']
copynode -2.524119019508362:  root add ^ IfStatement condition ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition']
copynode -2.783281773328781:  root modified ^ MemberReference-MemberReference member NaN_ter ^ ^ ^  member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member']
copynode -2.8054051995277405:  root add ^ StatementExpression expression ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression']
copynode -1.6660173833370209:  root modified ^ MemberReference-MemberReference member isZero_ter ^ ^ ^  qualifier ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member']
copynode -2.8054051995277405:  root add ^ StatementExpression expression MethodInvocation qualifier MathUtils_ter ^ ^ arguments MemberReference member par0 ^ ^ ^ ^ member checkNotNull_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'copy-StatementExpression']
copynode -1.2972581088542938:  root modified ^ MemberReference-MemberReference member INF_ter ^ ^ ^  qualifier ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member']
copynode -1.1248519122600555:  root modified ^ ReturnStatement expression MemberReference member NaN_ter ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'copy-ReturnStatement']
copynode -1.1248519122600555:  root modified ^ ReturnStatement expression MemberReference member ZERO_ter ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'copy-ReturnStatement']
copynode -1.6660173833370209:  root modified ^ MemberReference-MemberReference member isZero_ter ^ ^ ^  prefix_operators ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> prefix_operators member']
copynode -5.465237140655518:  root add ^ ReturnStatement expression ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'ReturnStatement -> expression']
copynode -1.2972581088542938:  root modified ^ MemberReference-MemberReference member INF_ter ^ ^ ^  prefix_operators ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> prefix_operators member']
copynode -2.783281773328781:  root modified ^ MemberReference-MemberReference member NaN_ter ^ ^ ^  qualifier ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member']
copynode -1.1248519122600555:  root modified ^ ReturnStatement expression MethodInvocation arguments BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member real_ter ^ ^ ^ ^ operandr MemberReference member loc4 ^ ^ ^ ^ ^ ^ operandr MemberReference member imaginary_ter ^ ^ ^ ^ ^ ^ operandr MemberReference member loc5 ^ ^ ^ ^ ^ BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member imaginary_ter ^ ^ ^ ^ operandr MemberReference member loc4 ^ ^ ^ ^ ^ ^ operandr MemberReference member real_ter ^ ^ ^ ^ ^ ^ operandr MemberReference member loc5 ^ ^ ^ ^ ^ ^ member createComplex_ter ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'copy-ReturnStatement']
copynode -1.2972581088542938:  root modified ^ MemberReference-MemberReference member INF_ter ^ ^ ^  postfix_operators ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> postfix_operators member']
copynode -5.465237140655518:  root add ^ ReturnStatement expression MemberReference member NaN_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'copy-ReturnStatement']
copynode -1.2972581088542938:  root modified ^ MemberReference-MemberReference member INF_ter ^ ^ ^  selectors ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> selectors member']
copynode -2.783281773328781:  root modified ^ MemberReference-MemberReference member NaN_ter ^ ^ ^  prefix_operators ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> prefix_operators member']
copynode -5.465237140655518:  root add ^ ReturnStatement expression MemberReference member ZERO_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'copy-ReturnStatement']
copynode -1.6660173833370209:  root modified ^ MemberReference-MemberReference member isZero_ter ^ ^ ^  postfix_operators ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> postfix_operators member']
copynode -1.6660173833370209:  root modified ^ MemberReference-MemberReference member isZero_ter ^ ^ ^  selectors ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> selectors member']
copynode -1.1248519122600555:  root modified ^ ReturnStatement expression MethodInvocation arguments BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member imaginary_ter ^ ^ ^ ^ operandr MemberReference member loc4 ^ ^ ^ ^ ^ ^ operandr MemberReference member real_ter ^ ^ ^ ^ ^ ^ operandr MemberReference member loc5 ^ ^ ^ ^ ^ BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator -_ter ^ ^ operandl MemberReference member imaginary_ter ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MemberReference member real_ter ^ ^ ^ ^ operandr MemberReference member loc4 ^ ^ ^ ^ ^ ^ ^ ^ operandr MemberReference member loc5 ^ ^ ^ ^ ^ ^ member createComplex_ter ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'copy-ReturnStatement']
copynode -2.783281773328781:  root modified ^ MemberReference-MemberReference member NaN_ter ^ ^ ^  postfix_operators ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> postfix_operators member']
copynode -7.907768934965134:  root modified ^ ReturnStatement_ter ^ ^ ; ['root -> modified', 'root -> ReturnStatement_ter', 'root -> End']
copynode -7.920126646757126:  root modified ^ IfStatement condition ^ ^ ^ ; ['root -> modified', 'root -> IfStatement', 'IfStatement -> condition']
copynode -8.020851820707321:  root modified ^ ContinueStatement_ter ^ ^ ; ['root -> modified', 'root -> ContinueStatement_ter', 'root -> End']
copynode -8.050327986478806:  root modified ^ StatementExpression expression ^ ^ ^ ; ['root -> modified', 'root -> StatementExpression', 'StatementExpression -> expression']
copynode -7.438412427902222:  root add ^ LocalVariableDeclaration type ^ declarators ^ ^ ^ ; ['root -> add', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators']
copynode -8.304369688034058:  root add ^ AssertStatement condition ^ ^ ^ ; ['root -> add', 'root -> AssertStatement', 'AssertStatement -> condition']
copynode -7.937044858932495:  root add ^ control EnhancedForControl ^ ^ ^ ; ['root -> add', 'root -> control', 'control -> EnhancedForControl']
copynode -8.472498655319214:  root add ^ ReturnStatement_ter ^ ^ ; ['root -> add', 'root -> ReturnStatement_ter', 'root -> End']
copynode -8.545132398605347:  root add ^ WhileStatement condition ^ ^ ^ ; ['root -> add', 'root -> WhileStatement', 'WhileStatement -> condition']
copynode -5.465237140655518:  root add ^ ReturnStatement expression MethodInvocation arguments BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member real_ter ^ ^ ^ ^ operandr MemberReference member loc4 ^ ^ ^ ^ ^ ^ operandr MemberReference member imaginary_ter ^ ^ ^ ^ ^ ^ operandr MemberReference member loc5 ^ ^ ^ ^ ^ BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member imaginary_ter ^ ^ ^ ^ operandr MemberReference member loc4 ^ ^ ^ ^ ^ ^ operandr MemberReference member real_ter ^ ^ ^ ^ ^ ^ operandr MemberReference member loc5 ^ ^ ^ ^ ^ ^ member createComplex_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'copy-ReturnStatement']
copynode -7.438412427902222:  root add ^ LocalVariableDeclaration modifiers ^ type ^ declarators ^ ^ ^ ; ['root -> add', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators']
copynode -2.783281773328781:  root modified ^ MemberReference-MemberReference member NaN_ter ^ ^ ^  selectors ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> selectors member']
copynode -8.977495908737183:  root add ^ BreakStatement_ter ^ ^ ; ['root -> add', 'root -> BreakStatement_ter', 'root -> End']
copynode -5.465237140655518:  root add ^ ReturnStatement expression MethodInvocation arguments BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member imaginary_ter ^ ^ ^ ^ operandr MemberReference member loc4 ^ ^ ^ ^ ^ ^ operandr MemberReference member real_ter ^ ^ ^ ^ ^ ^ operandr MemberReference member loc5 ^ ^ ^ ^ ^ BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator -_ter ^ ^ operandl MemberReference member imaginary_ter ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MemberReference member real_ter ^ ^ ^ ^ operandr MemberReference member loc4 ^ ^ ^ ^ ^ ^ ^ ^ operandr MemberReference member loc5 ^ ^ ^ ^ ^ ^ member createComplex_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'copy-ReturnStatement']
copynode -7.438412427902222:  root add ^ LocalVariableDeclaration annotations ^ type ^ declarators ^ ^ ^ ; ['root -> add', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> annotations type declarators']
copynode -9.561558932065964:  root modified ^ control EnhancedForControl ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> EnhancedForControl']
copynode -9.685992002487183:  root add ^ Statement_ter ^ ^ ; ['root -> add', 'root -> Statement_ter', 'root -> End']
copynode -10.125017553567886:  root ReturnStatement expression TernaryExpression ^ ^ ^ ^ ; ['root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression']
copynode -9.930997669696808:  root return_type ReferenceType name Complex_ter ^ ^ ^ ^ ^ ; ['root -> return_type', 'return_type -> ReferenceType', 'copy-ReferenceType']
copynode -1.6660173833370209:  root modified ^ MemberReference-MemberReference member isZero_ter ^ ^ ^  qualifier ^ selectors ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier selectors member']
copynode -9.930997669696808:  root return_type ReferenceType name Complex_ter ^ ^ ^ ^ ^ ; ['root -> return_type', 'return_type -> ReferenceType', 'copy-ReferenceType']
copynode -10.530846478126477:  root IfStatement condition BinaryOperation ^ ^ ^ ^ ; ['root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation']
copynode -1.6660173833370209:  root modified ^ MemberReference-MemberReference member isZero_ter ^ ^ ^  prefix_operators ^ qualifier ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> prefix_operators qualifier member']
copynode -7.438412427902222:  root add ^ LocalVariableDeclaration type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name loc4 ^ ^ initializer BinaryOperation operator /_ter ^ ^ operandl MemberReference member loc0 ^ ^ ^ ^ operandr MemberReference member loc1 ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> LocalVariableDeclaration', 'copy-LocalVariableDeclaration']
copynode -7.438412427902222:  root add ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer MethodInvocation qualifier par0 ^ ^ member getReal_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> LocalVariableDeclaration', 'copy-LocalVariableDeclaration']
copynode -1.2972581088542938:  root modified ^ MemberReference-MemberReference member INF_ter ^ ^ ^  qualifier ^ selectors ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier selectors member']
copynode -7.438412427902222:  root add ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name loc1 ^ ^ initializer MethodInvocation qualifier par0 ^ ^ member getImaginary_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> LocalVariableDeclaration', 'copy-LocalVariableDeclaration']
copynode -7.937044858932495:  root add ^ control par0 ^ ^ ^ ; ['root -> add', 'root -> control', 'copy-FormalParameter']
copynode -10.899438455700874:  root StatementExpression expression MethodInvocation ^ ^ ^ ^ ; ['root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation']
copynode -8.050327986478806:  root modified ^ StatementExpression expression MethodInvocation qualifier MathUtils_ter ^ ^ arguments MemberReference member par0 ^ ^ ^ ^ member checkNotNull_ter ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> StatementExpression', 'copy-StatementExpression']
copynode -7.937044858932495:  root add ^ control ForControl ^ ^ ^ ; ['root -> add', 'root -> control', 'control -> ForControl']
copynode -1.2972581088542938:  root modified ^ MemberReference-MemberReference member INF_ter ^ ^ ^  prefix_operators ^ qualifier ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> prefix_operators qualifier member']
copynode -7.438412427902222:  root add ^ LocalVariableDeclaration type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name loc5 ^ ^ initializer BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member loc0 ^ ^ ^ ^ operandr MemberReference member loc4 ^ ^ ^ ^ ^ ^ operandr MemberReference member loc1 ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> LocalVariableDeclaration', 'copy-LocalVariableDeclaration']
copynode -10.125017553567886:  root ReturnStatement expression BinaryOperation ^ ^ ^ ^ ; ['root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation']
copynode -1.2972581088542938:  root modified ^ MemberReference-MemberReference member INF_ter ^ ^ ^  prefix_operators ^ selectors ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> prefix_operators selectors member']
copynode -9.561558932065964:  root modified ^ control ForControl ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl']
copynode -11.30691822245717:  root MemberReference-MemberReference member INF_ter ^ ^ ^  member unknown ^ ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> member', 'start -> unknown']
copynode -8.472498655319214:  root add ^ ReturnStatement_ter ^ IfStatement ^ ^ ; ['root -> add', 'root -> ReturnStatement_ter', 'root -> IfStatement']
copynode -8.472498655319214:  root add ^ ReturnStatement_ter ^ StatementExpression ^ ^ ; ['root -> add', 'root -> ReturnStatement_ter', 'root -> StatementExpression']
copynode -11.133114323019981:  root MemberReference-MemberReference member isZero_ter ^ ^ ^  member unknown ^ ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> member', 'start -> unknown']
copynode -2.524119019508362:  root add ^ IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MemberReference member isNaN_ter ^ ^ ^ ^ operandr MemberReference qualifier par0 ^ ^ member isNaN_ter ^ ^ ^ ^ ^ ^ then_statement BlockStatement statements ReturnStatement expression MemberReference member NaN_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'copy-IfStatement']
copynode -1.1248519122600555:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'copy-ReturnStatement']
copynode -2.524119019508362:  root add ^ IfStatement condition MemberReference qualifier par0 ^ ^ member isZero_ter ^ ^ ^ ^ then_statement BlockStatement statements ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'copy-IfStatement']
copynode -11.223770424723625:  root parameters FormalParameter modifiers ^ type ^ name ^ ^ ^ ^ ; ['root -> parameters', 'parameters -> FormalParameter', 'FormalParameter -> modifiers type name']
copynode -11.223770424723625:  root parameters FormalParameter type ^ name ^ ^ ^ ^ ; ['root -> parameters', 'parameters -> FormalParameter', 'FormalParameter -> type name']
copynode -1.6660173833370209:  root modified ^ MemberReference-MemberReference member isZero_ter ^ ^ ^  prefix_operators ^ selectors ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> prefix_operators selectors member']
copynode -7.937044858932495:  root add ^ control ForControl_ter ^ ^ ^ ; ['root -> add', 'root -> control', 'control -> ForControl_ter']
copynode -10.530846478126477:  root IfStatement condition MethodInvocation ^ ^ ^ ^ ; ['root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation']
copynode -10.530846478126477:  root IfStatement condition MemberReference ^ ^ ^ ^ ; ['root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference']
copynode -7.438412427902222:  root add ^ LocalVariableDeclaration type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name loc4 ^ ^ initializer BinaryOperation operator /_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr MemberReference member loc0 ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> LocalVariableDeclaration', 'copy-LocalVariableDeclaration']
copynode -9.930997669696808:  root return_type ReferenceType name ^ ^ ^ ^ ; ['root -> return_type', 'return_type -> ReferenceType', 'ReferenceType -> name']
copynode -2.524119019508362:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier par0 ^ ^ member isInfinite_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member isInfinite_ter ^ ^ ^ ^ ^ ^ then_statement BlockStatement statements ReturnStatement expression MemberReference member ZERO_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'copy-IfStatement']
copynode -8.977495908737183:  root add ^ BreakStatement_ter ^ StatementExpression ^ ^ ; ['root -> add', 'root -> BreakStatement_ter', 'root -> StatementExpression']
copynode -9.930997669696808:  root return_type ReferenceType name ^ arguments ^ ^ ^ ^ ; ['root -> return_type', 'return_type -> ReferenceType', 'ReferenceType -> name arguments']
copynode -8.977495908737183:  root add ^ BreakStatement_ter ^ IfStatement ^ ^ ; ['root -> add', 'root -> BreakStatement_ter', 'root -> IfStatement']
copynode -2.783281773328781:  root modified ^ MemberReference-MemberReference member NaN_ter ^ ^ ^  qualifier ^ selectors ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier selectors member']
copynode -7.438412427902222:  root add ^ LocalVariableDeclaration type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name loc5 ^ ^ initializer BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr MemberReference member loc4 ^ ^ ^ ^ ^ ^ operandr MemberReference member loc0 ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> LocalVariableDeclaration', 'copy-LocalVariableDeclaration']
copynode -2.783281773328781:  root modified ^ MemberReference-MemberReference member NaN_ter ^ ^ ^  prefix_operators ^ qualifier ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> prefix_operators qualifier member']
copynode -11.968559265136719:  root return_type BasicType name ^ ^ ^ ^ ; ['root -> return_type', 'return_type -> BasicType', 'BasicType -> name']
copynode -7.438412427902222:  root add ^ LocalVariableDeclaration modifiers ^ annotations ^ type ^ declarators ^ ^ ^ ; ['root -> add', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers annotations type declarators']
copynode -9.685992002487183:  root add ^ Statement_ter ^ StatementExpression ^ ^ ; ['root -> add', 'root -> Statement_ter', 'root -> StatementExpression']
copynode -9.685992002487183:  root add ^ Statement_ter ^ IfStatement ^ ^ ; ['root -> add', 'root -> Statement_ter', 'root -> IfStatement']
copynode -11.133114323019981:  root MemberReference-MemberReference member isZero_ter ^ ^ ^  member par0 ^ ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> member', 'member -> par0']
copynode -2.783281773328781:  root modified ^ MemberReference-MemberReference member NaN_ter ^ ^ ^  prefix_operators ^ selectors ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> prefix_operators selectors member']
copynode -10.899438455700874:  root StatementExpression expression Assignment ^ ^ ^ ^ ; ['root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment']
copynode -11.30691822245717:  root MemberReference-MemberReference member INF_ter ^ ^ ^  member par0 ^ ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> member', 'member -> par0']
copynode -5.465237140655518:  root add ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'copy-ReturnStatement']
copynode -12.943837881088257:  root StatementExpression expression MethodInvocation qualifier MathUtils_ter ^ ^ arguments MemberReference member par0 ^ ^ ^ ^ member checkNotNull_ter ^ ^ ^ ^ ^ ^ ; ['root -> StatementExpression', 'copy-StatementExpression', 'root -> End']
copynode -13.157853603363037:  root ReturnStatement expression MemberReference member NaN_ter ^ ^ ^ ^ ^ ^ ; ['root -> ReturnStatement', 'copy-ReturnStatement', 'root -> End']
copynode -9.561558932065964:  root modified ^ control ForControl_ter ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl_ter']
copynode -11.223770424723625:  root parameters FormalParameter annotations ^ type ^ name ^ ^ ^ ^ ; ['root -> parameters', 'parameters -> FormalParameter', 'FormalParameter -> annotations type name']
copynode -10.125017553567886:  root ReturnStatement expression MethodInvocation ^ ^ ^ ^ ; ['root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation']
copynode -10.899438455700874:  root StatementExpression expression This ^ ^ ^ ^ ; ['root -> StatementExpression', 'StatementExpression -> expression', 'expression -> This']
copynode -0.8137205988168716:  root modified ^ MemberReference-MemberReference member INF_ter ^ ^ ^  member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member']
copynode -1.0725891143083572:  root modified ^ ReturnStatement expression ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression']
copynode -2.024274781346321:  root modified ^ MemberReference-MemberReference member isZero_ter ^ ^ ^  member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member']
copynode -3.3032249957323074:  root modified ^ MemberReference-MemberReference member NaN_ter ^ ^ ^  member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member']
copynode -3.748133361339569:  root add ^ IfStatement condition ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition']
copynode -0.8137205988168716:  root modified ^ MemberReference-MemberReference member INF_ter ^ ^ ^  qualifier ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member']
copynode -4.226237058639526:  root add ^ StatementExpression expression ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression']
copynode -2.024274781346321:  root modified ^ MemberReference-MemberReference member isZero_ter ^ ^ ^  qualifier ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member']
copynode -1.0725891143083572:  root modified ^ ReturnStatement expression MemberReference member NaN_ter ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'copy-ReturnStatement']
copynode -0.8137205988168716:  root modified ^ MemberReference-MemberReference member INF_ter ^ ^ ^  prefix_operators ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> prefix_operators member']
copynode -0.8137205988168716:  root modified ^ MemberReference-MemberReference member INF_ter ^ ^ ^  selectors ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> selectors member']
copynode -1.0725891143083572:  root modified ^ ReturnStatement expression TernaryExpression condition MethodInvocation prefix_operators !_ter ^ ^ member isInfinite_ter ^ ^ ^ ^ if_true MemberReference member ZERO_ter ^ ^ ^ ^ if_false MemberReference member NaN_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'copy-ReturnStatement']
copynode -5.959301710128784:  root add ^ ReturnStatement expression ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'ReturnStatement -> expression']
copynode -2.024274781346321:  root modified ^ MemberReference-MemberReference member isZero_ter ^ ^ ^  prefix_operators ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> prefix_operators member']
copynode -1.0725891143083572:  root modified ^ ReturnStatement expression MethodInvocation arguments BinaryOperation operator /_ter ^ ^ operandl MemberReference member real_ter ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ BinaryOperation operator /_ter ^ ^ operandl MemberReference member imaginary_ter ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ member createComplex_ter ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'copy-ReturnStatement']
copynode -3.3032249957323074:  root modified ^ MemberReference-MemberReference member NaN_ter ^ ^ ^  qualifier ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member']
copynode -0.8137205988168716:  root modified ^ MemberReference-MemberReference member INF_ter ^ ^ ^  postfix_operators ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> postfix_operators member']
copynode -5.959301710128784:  root add ^ ReturnStatement expression MemberReference member NaN_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'copy-ReturnStatement']
copynode -2.024274781346321:  root modified ^ MemberReference-MemberReference member isZero_ter ^ ^ ^  selectors ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> selectors member']
copynode -7.759587720036507:  root modified ^ StatementExpression expression ^ ^ ^ ; ['root -> modified', 'root -> StatementExpression', 'StatementExpression -> expression']
copynode -3.3032249957323074:  root modified ^ MemberReference-MemberReference member NaN_ter ^ ^ ^  prefix_operators ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> prefix_operators member']
copynode -8.565417245030403:  root modified ^ IfStatement condition ^ ^ ^ ; ['root -> modified', 'root -> IfStatement', 'IfStatement -> condition']
copynode -5.959301710128784:  root add ^ ReturnStatement expression MethodInvocation arguments BinaryOperation operator /_ter ^ ^ operandl MemberReference member real_ter ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ BinaryOperation operator /_ter ^ ^ operandl MemberReference member imaginary_ter ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ member createComplex_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'copy-ReturnStatement']
copynode -2.024274781346321:  root modified ^ MemberReference-MemberReference member isZero_ter ^ ^ ^  postfix_operators ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> postfix_operators member']
copynode -5.959301710128784:  root add ^ ReturnStatement expression TernaryExpression condition MethodInvocation prefix_operators !_ter ^ ^ member isInfinite_ter ^ ^ ^ ^ if_true MemberReference member ZERO_ter ^ ^ ^ ^ if_false MemberReference member NaN_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'copy-ReturnStatement']
copynode -8.859909534454346:  root add ^ LocalVariableDeclaration type ^ declarators ^ ^ ^ ; ['root -> add', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators']
copynode -3.3032249957323074:  root modified ^ MemberReference-MemberReference member NaN_ter ^ ^ ^  selectors ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> selectors member']
copynode -3.3032249957323074:  root modified ^ MemberReference-MemberReference member NaN_ter ^ ^ ^  postfix_operators ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> postfix_operators member']
copynode -8.990042641758919:  root modified ^ ReturnStatement_ter ^ ^ ; ['root -> modified', 'root -> ReturnStatement_ter', 'root -> End']
copynode -9.605553582310677:  root modified ^ ContinueStatement_ter ^ ^ ; ['root -> modified', 'root -> ContinueStatement_ter', 'root -> End']
copynode -9.665226936340332:  root add ^ ReturnStatement_ter ^ ^ ; ['root -> add', 'root -> ReturnStatement_ter', 'root -> End']
copynode -10.091177940368652:  root add ^ AssertStatement condition ^ ^ ^ ; ['root -> add', 'root -> AssertStatement', 'AssertStatement -> condition']
copynode -9.539406299591064:  root add ^ control EnhancedForControl ^ ^ ^ ; ['root -> add', 'root -> control', 'control -> EnhancedForControl']
copynode -9.982146218419075:  root modified ^ control EnhancedForControl ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> EnhancedForControl']
copynode -0.8137205988168716:  root modified ^ MemberReference-MemberReference member INF_ter ^ ^ ^  qualifier ^ selectors ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier selectors member']
copynode -10.341639041900635:  root add ^ BreakStatement_ter ^ ^ ; ['root -> add', 'root -> BreakStatement_ter', 'root -> End']
copynode -10.52423906326294:  root add ^ WhileStatement condition ^ ^ ^ ; ['root -> add', 'root -> WhileStatement', 'WhileStatement -> condition']
copynode -10.520172119140625:  root add ^ MemberReference-MemberReference member INF_ter ^ ^ ^  member ^ ^ ^ ; ['root -> add', 'copy-MemberReference', 'MemberReference -> member']
copynode -0.8137205988168716:  root modified ^ MemberReference-MemberReference member INF_ter ^ ^ ^  prefix_operators ^ qualifier ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> prefix_operators qualifier member']
copynode -10.336378123611212:  root MemberReference-MemberReference member INF_ter ^ ^ ^  member unknown ^ ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> member', 'start -> unknown']
copynode -1.0725891143083572:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'copy-ReturnStatement']
copynode -2.024274781346321:  root modified ^ MemberReference-MemberReference member isZero_ter ^ ^ ^  qualifier ^ selectors ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier selectors member']
copynode -11.169889986515045:  root return_type ReferenceType name Complex_ter ^ ^ ^ ^ ^ ; ['root -> return_type', 'return_type -> ReferenceType', 'copy-ReferenceType']
copynode -0.8137205988168716:  root modified ^ MemberReference-MemberReference member INF_ter ^ ^ ^  prefix_operators ^ selectors ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> prefix_operators selectors member']
copynode -11.129667155444622:  root ReturnStatement expression TernaryExpression ^ ^ ^ ^ ; ['root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression']
copynode -10.91739934674115:  root IfStatement condition BinaryOperation ^ ^ ^ ^ ; ['root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation']
copynode -9.982146218419075:  root modified ^ control ForControl ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl']
copynode -2.024274781346321:  root modified ^ MemberReference-MemberReference member isZero_ter ^ ^ ^  prefix_operators ^ qualifier ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> prefix_operators qualifier member']
copynode -10.336378123611212:  root MemberReference-MemberReference member INF_ter ^ ^ ^  member par0 ^ ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> member', 'member -> par0']
copynode -9.539406299591064:  root add ^ control par0 ^ ^ ^ ; ['root -> add', 'root -> control', 'copy-FormalParameter']
copynode -10.91739934674115:  root IfStatement condition MethodInvocation ^ ^ ^ ^ ; ['root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation']
copynode -11.973296016454697:  root StatementExpression expression MethodInvocation ^ ^ ^ ^ ; ['root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation']
copynode -8.990042641758919:  root modified ^ ReturnStatement_ter ^ ReturnStatement ^ ^ ; ['root -> modified', 'root -> ReturnStatement_ter', 'root -> ReturnStatement']
copynode -11.081370878964663:  root MemberReference-MemberReference member isZero_ter ^ ^ ^  member par0 ^ ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> member', 'member -> par0']
copynode -11.081370878964663:  root MemberReference-MemberReference member isZero_ter ^ ^ ^  member unknown ^ ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> member', 'start -> unknown']
copynode -9.539406299591064:  root add ^ control ForControl ^ ^ ^ ; ['root -> add', 'root -> control', 'control -> ForControl']
copynode -9.665226936340332:  root add ^ ReturnStatement_ter ^ StatementExpression ^ ^ ; ['root -> add', 'root -> ReturnStatement_ter', 'root -> StatementExpression']
copynode -2.024274781346321:  root modified ^ MemberReference-MemberReference member isZero_ter ^ ^ ^  prefix_operators ^ selectors ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> prefix_operators selectors member']
copynode -3.3032249957323074:  root modified ^ MemberReference-MemberReference member NaN_ter ^ ^ ^  qualifier ^ selectors ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier selectors member']
copynode -11.081370878964663:  root MemberReference-MemberReference member isZero_ter ^ ^ ^  member NaN_ter ^ ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> member', 'copy-member']
copynode -11.081370878964663:  root MemberReference-MemberReference member isZero_ter ^ ^ ^  member isZero_ter ^ ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> member', 'copy-member']
copynode -10.91739934674115:  root IfStatement condition MemberReference ^ ^ ^ ^ ; ['root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference']
copynode -0.8137205988168716:  root modified ^ MemberReference-MemberReference member INF_ter ^ ^ ^  postfix_operators ^ selectors ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> postfix_operators selectors member']
copynode -8.859909534454346:  root add ^ LocalVariableDeclaration modifiers ^ type ^ declarators ^ ^ ^ ; ['root -> add', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators']
copynode -9.982146218419075:  root modified ^ control ForControl_ter ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl_ter']
copynode -9.665226936340332:  root add ^ ReturnStatement_ter ^ IfStatement ^ ^ ; ['root -> add', 'root -> ReturnStatement_ter', 'root -> IfStatement']
copynode -5.959301710128784:  root add ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'copy-ReturnStatement']
copynode -10.336378123611212:  root MemberReference-MemberReference member INF_ter ^ ^ ^  member NaN_ter ^ ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> member', 'copy-member']
copynode -10.336378123611212:  root MemberReference-MemberReference member INF_ter ^ ^ ^  member isZero_ter ^ ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> member', 'copy-member']
copynode -11.129667155444622:  root ReturnStatement expression BinaryOperation ^ ^ ^ ^ ; ['root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation']
copynode -11.081370878964663:  root MemberReference-MemberReference member isZero_ter ^ ^ ^  member INF_ter ^ ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> member', 'copy-member']
copynode -10.336378123611212:  root MemberReference-MemberReference member INF_ter ^ ^ ^  member INF_ter ^ ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> member', 'copy-member']
copynode -10.336378123611212:  root MemberReference-MemberReference member INF_ter ^ ^ ^  member NaN_ter ^ ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> member', 'copy-member']
copynode -8.859909534454346:  root add ^ LocalVariableDeclaration par0 ^ ^ ^ ; ['root -> add', 'root -> LocalVariableDeclaration', 'copy-FormalParameter']
copynode -12.828386783599854:  root return_type BasicType name ^ ^ ^ ^ ; ['root -> return_type', 'return_type -> BasicType', 'BasicType -> name']
copynode -11.129667155444622:  root ReturnStatement expression MethodInvocation ^ ^ ^ ^ ; ['root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation']
copynode -12.828386783599854:  root return_type BasicType name double_ter ^ ^ ^ ^ ^ ; ['root -> return_type', 'return_type -> BasicType', 'copy-BasicType']
copynode -3.3032249957323074:  root modified ^ MemberReference-MemberReference member NaN_ter ^ ^ ^  prefix_operators ^ qualifier ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> prefix_operators qualifier member']
copynode -10.341639041900635:  root add ^ BreakStatement_ter ^ StatementExpression ^ ^ ; ['root -> add', 'root -> BreakStatement_ter', 'root -> StatementExpression']
copynode -10.336378123611212:  root MemberReference-MemberReference member INF_ter ^ ^ ^  member NaN_ter ^ ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> member', 'copy-member']
copynode -12.58190980553627:  root MemberReference-MemberReference member NaN_ter ^ ^ ^  member par0 ^ ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> member', 'member -> par0']
copynode -8.990042641758919:  root modified ^ ReturnStatement_ter ^ StatementExpression ^ ^ ; ['root -> modified', 'root -> ReturnStatement_ter', 'root -> StatementExpression']
copynode -11.169889986515045:  root return_type ReferenceType name ^ ^ ^ ^ ; ['root -> return_type', 'return_type -> ReferenceType', 'ReferenceType -> name']
copynode -11.169889986515045:  root return_type ReferenceType name ^ arguments ^ ^ ^ ^ ; ['root -> return_type', 'return_type -> ReferenceType', 'ReferenceType -> name arguments']
copynode -0.8137205988168716:  root modified ^ MemberReference-MemberReference member INF_ter ^ ^ ^  prefix_operators ^ qualifier ^ selectors ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> prefix_operators qualifier selectors member']
copynode -10.336378123611212:  root MemberReference-MemberReference member INF_ter ^ ^ ^  member ZERO_ter ^ ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> member', 'copy-member']
copynode -8.990042641758919:  root modified ^ ReturnStatement_ter ^ MemberReference-MemberReference member INF_ter ^ ^ ^  ^ ^ ; ['root -> modified', 'root -> ReturnStatement_ter', 'copy-MemberReference']
copynode -11.973296016454697:  root StatementExpression expression Assignment ^ ^ ^ ^ ; ['root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment']
copynode -9.539406299591064:  root add ^ control ForControl_ter ^ ^ ^ ; ['root -> add', 'root -> control', 'control -> ForControl_ter']
copynode -10.336378123611212:  root MemberReference-MemberReference member INF_ter ^ ^ ^  member isNaN_ter ^ ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> member', 'copy-member']
copynode -3.3032249957323074:  root modified ^ MemberReference-MemberReference member NaN_ter ^ ^ ^  prefix_operators ^ selectors ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> prefix_operators selectors member']
copynode -13.957836389541626:  root MemberReference-MemberReference member INF_ter ^ ^ ^  qualifier unknown ^ ^ member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> qualifier member', 'start -> unknown']
copynode -10.341639041900635:  root add ^ BreakStatement_ter ^ IfStatement ^ ^ ; ['root -> add', 'root -> BreakStatement_ter', 'root -> IfStatement']
copynode -11.129667155444622:  root ReturnStatement expression MemberReference ^ ^ ^ ^ ; ['root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MemberReference']
copynode -10.520172119140625:  root add ^ MemberReference-MemberReference member INF_ter ^ ^ ^  qualifier ^ member ^ ^ ^ ; ['root -> add', 'copy-MemberReference', 'MemberReference -> qualifier member']
copynode -11.081370878964663:  root MemberReference-MemberReference member isZero_ter ^ ^ ^  member NaN_ter ^ ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> member', 'copy-member']
copynode -3.748133361339569:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value 0d_ter ^ ^ ^ ^ ^ ^ then_statement BlockStatement statements ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'copy-IfStatement']
copynode -4.226237058639526:  root add ^ StatementExpression par0 ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'copy-FormalParameter']
before@3 batch0 x: -13.449766471982002: root StatementExpression expression This ^ ^ ^ ^  ; ['root -> StatementExpression', 'StatementExpression -> expression', 'expression -> This']
after@3 batch0 x: -13.449766471982002: root StatementExpression expression This ^ ^ ^ ^  ; ['root -> StatementExpression', 'StatementExpression -> expression', 'expression -> This']
before@3 batch1 x: -14.372586011886597: root add ^ StatementExpression par0 ^ ^ ^  ; ['root -> add', 'root -> StatementExpression', 'copy-FormalParameter']
after@3 batch1 x: -14.372586011886597: root add ^ StatementExpression par0 ^ ^ ^  ; ['root -> add', 'root -> StatementExpression', 'copy-FormalParameter']
copynode -1.1495457831770182:  root modified ^ ReturnStatement expression TernaryExpression ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression']
copynode -1.3374757543206215:  root modified ^ MemberReference-MemberReference member INF_ter ^ ^ ^  member unknown ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'start -> unknown']
copynode -1.7360105738043785:  root modified ^ MemberReference-MemberReference member isZero_ter ^ ^ ^  member unknown ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'start -> unknown']
copynode -1.1495457831770182:  root modified ^ ReturnStatement expression BinaryOperation ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation']
copynode -2.5247623008908704:  root add ^ IfStatement condition BinaryOperation ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation']
copynode -2.9600837379693985:  root add ^ StatementExpression expression MethodInvocation ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation']
copynode -2.831471987068653:  root modified ^ MemberReference-MemberReference member NaN_ter ^ ^ ^  member unknown ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'start -> unknown']
copynode -1.3374757543206215:  root modified ^ MemberReference-MemberReference member INF_ter ^ ^ ^  member par0 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> par0']
copynode -2.5247623008908704:  root add ^ IfStatement condition MemberReference ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference']
copynode -1.7360105738043785:  root modified ^ MemberReference-MemberReference member isZero_ter ^ ^ ^  member par0 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> par0']
copynode -2.5247623008908704:  root add ^ IfStatement condition MethodInvocation ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation']
copynode -1.1495457831770182:  root modified ^ ReturnStatement expression MethodInvocation ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation']
copynode -2.9600837379693985:  root add ^ StatementExpression expression Assignment ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment']
copynode -1.3374757543206215:  root modified ^ MemberReference-MemberReference member INF_ter ^ ^ ^  member isNaN_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'copy-member']
copynode -2.831471987068653:  root modified ^ MemberReference-MemberReference member NaN_ter ^ ^ ^  member par0 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> par0']
copynode -1.3374757543206215:  root modified ^ MemberReference-MemberReference member INF_ter ^ ^ ^  member NaN_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'copy-member']
copynode -1.1495457831770182:  root modified ^ ReturnStatement expression Cast ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> Cast']
copynode -1.7360105738043785:  root modified ^ MemberReference-MemberReference member isZero_ter ^ ^ ^  member NaN_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'copy-member']
copynode -1.7360105738043785:  root modified ^ MemberReference-MemberReference member isZero_ter ^ ^ ^  member isNaN_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'copy-member']
copynode -4.866434633731842:  root add ^ StatementExpression expression MethodInvocation qualifier MathUtils_ter ^ ^ arguments MemberReference member par0 ^ ^ ^ ^ member checkNotNull_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'copy-StatementExpression', 'root -> End']
copynode -1.3374757543206215:  root modified ^ MemberReference-MemberReference member INF_ter ^ ^ ^  member isZero_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'copy-member']
copynode -1.7360105738043785:  root modified ^ MemberReference-MemberReference member isZero_ter ^ ^ ^  member NaN_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'copy-member']
copynode -1.7360105738043785:  root modified ^ MemberReference-MemberReference member isZero_ter ^ ^ ^  member loc0 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> loc0']
copynode -4.699984639883041:  root modified ^ MemberReference-MemberReference member isZero_ter ^ ^ ^  qualifier unknown ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'start -> unknown']
copynode -1.3374757543206215:  root modified ^ MemberReference-MemberReference member INF_ter ^ ^ ^  member ZERO_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'copy-member']
copynode -1.3374757543206215:  root modified ^ MemberReference-MemberReference member INF_ter ^ ^ ^  member loc0 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> loc0']
copynode -1.7360105738043785:  root modified ^ MemberReference-MemberReference member isZero_ter ^ ^ ^  member isZero_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'copy-member']
copynode -1.3374757543206215:  root modified ^ MemberReference-MemberReference member INF_ter ^ ^ ^  member NaN_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'copy-member']
copynode -5.0239419639110565:  root modified ^ MemberReference-MemberReference member INF_ter ^ ^ ^  qualifier unknown ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'start -> unknown']
copynode -1.7360105738043785:  root modified ^ MemberReference-MemberReference member isZero_ter ^ ^ ^  member ZERO_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'copy-member']
copynode -1.7360105738043785:  root modified ^ MemberReference-MemberReference member isZero_ter ^ ^ ^  member INF_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'copy-member']
copynode -1.3374757543206215:  root modified ^ MemberReference-MemberReference member INF_ter ^ ^ ^  member par1 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> par1']
copynode -4.699984639883041:  root modified ^ MemberReference-MemberReference member isZero_ter ^ ^ ^  qualifier par0 ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0']
copynode -1.3374757543206215:  root modified ^ MemberReference-MemberReference member INF_ter ^ ^ ^  member isZero_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'copy-member']
copynode -5.721497267484665:  root modified ^ ReturnStatement expression MemberReference member NaN_ter ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'copy-ReturnStatement', 'root -> End']
copynode -2.831471987068653:  root modified ^ MemberReference-MemberReference member NaN_ter ^ ^ ^  member loc0 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> loc0']
copynode -5.800034254789352:  root modified ^ ReturnStatement expression MemberReference member ZERO_ter ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'copy-ReturnStatement', 'root -> End']
copynode -2.9600837379693985:  root add ^ StatementExpression expression MemberReference ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MemberReference']
copynode -1.1495457831770182:  root modified ^ ReturnStatement expression MemberReference ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MemberReference']
copynode -2.831471987068653:  root modified ^ MemberReference-MemberReference member NaN_ter ^ ^ ^  member NaN_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'copy-member']
copynode -2.831471987068653:  root modified ^ MemberReference-MemberReference member NaN_ter ^ ^ ^  member isNaN_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'copy-member']
copynode -1.7360105738043785:  root modified ^ MemberReference-MemberReference member isZero_ter ^ ^ ^  member par1 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> par1']
copynode -5.0239419639110565:  root modified ^ MemberReference-MemberReference member INF_ter ^ ^ ^  qualifier par0 ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0']
copynode -2.831471987068653:  root modified ^ MemberReference-MemberReference member NaN_ter ^ ^ ^  member NaN_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'copy-member']
copynode -2.831471987068653:  root modified ^ MemberReference-MemberReference member NaN_ter ^ ^ ^  member ZERO_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'copy-member']
copynode -2.831471987068653:  root modified ^ MemberReference-MemberReference member NaN_ter ^ ^ ^  member par1 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> par1']
copynode -6.063616961240768:  root modified ^ MemberReference-MemberReference member INF_ter ^ ^ ^  prefix_operators -_ter ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> prefix_operators member', 'prefix_operators -> -_ter']
copynode -2.9600837379693985:  root add ^ StatementExpression expression SuperMethodInvocation ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> SuperMethodInvocation']
copynode -2.831471987068653:  root modified ^ MemberReference-MemberReference member NaN_ter ^ ^ ^  member isZero_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'copy-member']
copynode -2.5247623008908704:  root add ^ IfStatement condition MemberReference qualifier par0 ^ ^ member isZero_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'copy-condition']
copynode -2.831471987068653:  root modified ^ MemberReference-MemberReference member NaN_ter ^ ^ ^  member INF_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'copy-member']
copynode -5.9706123769283295:  root modified ^ MemberReference-MemberReference member isZero_ter ^ ^ ^  prefix_operators -_ter ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> prefix_operators member', 'prefix_operators -> -_ter']
copynode -1.1495457831770182:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'copy-expression']
copynode -2.9600837379693985:  root add ^ StatementExpression expression This ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> This']
copynode -1.1495457831770182:  root modified ^ ReturnStatement expression This ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> This']
copynode -6.959341734647751:  root modified ^ ReturnStatement expression MethodInvocation arguments BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member real_ter ^ ^ ^ ^ operandr MemberReference member loc4 ^ ^ ^ ^ ^ ^ operandr MemberReference member imaginary_ter ^ ^ ^ ^ ^ ^ operandr MemberReference member loc5 ^ ^ ^ ^ ^ BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member imaginary_ter ^ ^ ^ ^ operandr MemberReference member loc4 ^ ^ ^ ^ ^ ^ operandr MemberReference member real_ter ^ ^ ^ ^ ^ ^ operandr MemberReference member loc5 ^ ^ ^ ^ ^ ^ member createComplex_ter ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'copy-ReturnStatement', 'root -> End']
copynode -1.1495457831770182:  root modified ^ ReturnStatement expression Literal ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> Literal']
copynode -5.9927778244018555:  root add ^ ReturnStatement expression TernaryExpression ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression']
copynode -5.9927778244018555:  root add ^ ReturnStatement expression BinaryOperation ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation']
copynode -5.9706123769283295:  root modified ^ MemberReference-MemberReference member isZero_ter ^ ^ ^  prefix_operators !_ter ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> prefix_operators member', 'prefix_operators -> !_ter']
copynode -7.11029839515686:  root add ^ ReturnStatement expression MemberReference member NaN_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'copy-ReturnStatement', 'root -> End']
copynode -6.4750857055187225:  root modified ^ MemberReference-MemberReference member NaN_ter ^ ^ ^  qualifier par0 ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0']
copynode -6.4750857055187225:  root modified ^ MemberReference-MemberReference member NaN_ter ^ ^ ^  qualifier unknown ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'start -> unknown']
copynode -7.324892282485962:  root add ^ ReturnStatement expression MemberReference member ZERO_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'copy-ReturnStatement', 'root -> End']
copynode -4.866434633731842:  root add ^ StatementExpression expression MethodInvocation qualifier MathUtils_ter ^ ^ arguments MemberReference member par0 ^ ^ ^ ^ member checkNotNull_ter ^ ^ ^ ^ ^ IfStatement ^ ^ ; ['root -> add', 'root -> StatementExpression', 'copy-StatementExpression', 'root -> IfStatement']
copynode -7.140698164701462:  root modified ^ MemberReference-MemberReference member INF_ter ^ ^ ^  selectors ArraySelector ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> selectors member', 'selectors -> ArraySelector']
copynode -4.866434633731842:  root add ^ StatementExpression expression MethodInvocation qualifier MathUtils_ter ^ ^ arguments MemberReference member par0 ^ ^ ^ ^ member checkNotNull_ter ^ ^ ^ ^ ^ StatementExpression ^ ^ ; ['root -> add', 'root -> StatementExpression', 'copy-StatementExpression', 'root -> StatementExpression']
copynode -4.866434633731842:  root add ^ StatementExpression expression MethodInvocation qualifier MathUtils_ter ^ ^ arguments MemberReference member par0 ^ ^ ^ ^ member checkNotNull_ter ^ ^ ^ ^ ^ ReturnStatement ^ ^ ; ['root -> add', 'root -> StatementExpression', 'copy-StatementExpression', 'root -> ReturnStatement']
copynode -5.9927778244018555:  root add ^ ReturnStatement expression Literal ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> Literal']
copynode -6.063616961240768:  root modified ^ MemberReference-MemberReference member INF_ter ^ ^ ^  prefix_operators !_ter ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> prefix_operators member', 'prefix_operators -> !_ter']
copynode -7.151578396558762:  root modified ^ MemberReference-MemberReference member NaN_ter ^ ^ ^  prefix_operators -_ter ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> prefix_operators member', 'prefix_operators -> -_ter']
copynode -1.1495457831770182:  root modified ^ ReturnStatement expression ClassCreator ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> ClassCreator']
copynode -7.835276335477829:  root modified ^ ReturnStatement expression MethodInvocation arguments BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member imaginary_ter ^ ^ ^ ^ operandr MemberReference member loc4 ^ ^ ^ ^ ^ ^ operandr MemberReference member real_ter ^ ^ ^ ^ ^ ^ operandr MemberReference member loc5 ^ ^ ^ ^ ^ BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator -_ter ^ ^ operandl MemberReference member imaginary_ter ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MemberReference member real_ter ^ ^ ^ ^ operandr MemberReference member loc4 ^ ^ ^ ^ ^ ^ ^ ^ operandr MemberReference member loc5 ^ ^ ^ ^ ^ ^ member createComplex_ter ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'copy-ReturnStatement', 'root -> End']
copynode -6.974377363920212:  root modified ^ MemberReference-MemberReference member INF_ter ^ ^ ^  postfix_operators ++_ter ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> postfix_operators member', 'postfix_operators -> ++_ter']
copynode -7.677735656499863:  root modified ^ MemberReference-MemberReference member isZero_ter ^ ^ ^  selectors ArraySelector ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> selectors member', 'selectors -> ArraySelector']
copynode -2.5247623008908704:  root add ^ IfStatement condition Literal ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> Literal']
copynode -6.974377363920212:  root modified ^ MemberReference-MemberReference member INF_ter ^ ^ ^  postfix_operators --_ter ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> postfix_operators member', 'postfix_operators -> --_ter']
copynode -7.920692991639953:  root modified ^ IfStatement condition BinaryOperation ^ ^ ^ ^ ; ['root -> modified', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation']
copynode -2.9600837379693985:  root add ^ StatementExpression expression Cast ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Cast']
copynode -7.487584441900253:  root modified ^ MemberReference-MemberReference member isZero_ter ^ ^ ^  postfix_operators ++_ter ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> postfix_operators member', 'postfix_operators -> ++_ter']
copynode -5.9927778244018555:  root add ^ ReturnStatement expression MemberReference ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MemberReference']
copynode -5.9706123769283295:  root modified ^ MemberReference-MemberReference member isZero_ter ^ ^ ^  prefix_operators ~_ter ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> prefix_operators member', 'prefix_operators -> ~_ter']
copynode -6.063616961240768:  root modified ^ MemberReference-MemberReference member INF_ter ^ ^ ^  prefix_operators ~_ter ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> prefix_operators member', 'prefix_operators -> ~_ter']
copynode -2.5247623008908704:  root add ^ IfStatement condition BinaryOperation operator <_ter ^ ^ operandl MethodInvocation qualifier FastMath_ter ^ ^ arguments MemberReference member loc0 ^ ^ ^ ^ member abs_ter ^ ^ ^ ^ operandr MethodInvocation qualifier FastMath_ter ^ ^ arguments MemberReference member loc1 ^ ^ ^ ^ member abs_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'copy-condition']
copynode -2.5247623008908704:  root add ^ IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MemberReference member isNaN_ter ^ ^ ^ ^ operandr MemberReference qualifier par0 ^ ^ member isNaN_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'copy-condition']
copynode -8.185727715492249:  root add ^ LocalVariableDeclaration type BasicType ^ ^ declarators ^ ^ ^ ; ['root -> add', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType']
copynode -5.9706123769283295:  root modified ^ MemberReference-MemberReference member isZero_ter ^ ^ ^  prefix_operators ++_ter ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> prefix_operators member', 'prefix_operators -> ++_ter']
copynode -8.098017070442438:  root modified ^ StatementExpression expression MethodInvocation ^ ^ ^ ^ ; ['root -> modified', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation']
copynode -8.472207307815552:  root add ^ control EnhancedForControl var ^ iterable ^ ^ ^ ^ ; ['root -> add', 'root -> control', 'control -> EnhancedForControl', 'EnhancedForControl -> var iterable']
copynode -4.699984639883041:  root modified ^ MemberReference-MemberReference member isZero_ter ^ ^ ^  qualifier MathUtils_ter ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'copy-qualifier']
copynode -6.063616961240768:  root modified ^ MemberReference-MemberReference member INF_ter ^ ^ ^  prefix_operators ++_ter ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> prefix_operators member', 'prefix_operators -> ++_ter']
copynode -1.1495457831770182:  root modified ^ ReturnStatement expression SuperMethodInvocation ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> SuperMethodInvocation']
copynode -8.705528497695923:  root add ^ ReturnStatement expression MethodInvocation arguments BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member real_ter ^ ^ ^ ^ operandr MemberReference member loc4 ^ ^ ^ ^ ^ ^ operandr MemberReference member imaginary_ter ^ ^ ^ ^ ^ ^ operandr MemberReference member loc5 ^ ^ ^ ^ ^ BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member imaginary_ter ^ ^ ^ ^ operandr MemberReference member loc4 ^ ^ ^ ^ ^ ^ operandr MemberReference member real_ter ^ ^ ^ ^ ^ ^ operandr MemberReference member loc5 ^ ^ ^ ^ ^ ^ member createComplex_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'copy-ReturnStatement', 'root -> End']
copynode -7.835969418287277:  root modified ^ MemberReference-MemberReference member NaN_ter ^ ^ ^  postfix_operators ++_ter ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> postfix_operators member', 'postfix_operators -> ++_ter']
copynode -7.487584441900253:  root modified ^ MemberReference-MemberReference member isZero_ter ^ ^ ^  postfix_operators --_ter ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> postfix_operators member', 'postfix_operators -> --_ter']
copynode -2.5247623008908704:  root add ^ IfStatement condition This ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> This']
copynode -0.8595583625137806:  root modified ^ MemberReference-MemberReference member INF_ter ^ ^ ^  member unknown ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'start -> unknown']
copynode -1.0946438759565353:  root modified ^ ReturnStatement expression TernaryExpression ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression']
copynode -2.088516056537628:  root modified ^ MemberReference-MemberReference member isZero_ter ^ ^ ^  member unknown ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'start -> unknown']
copynode -0.8595583625137806:  root modified ^ MemberReference-MemberReference member INF_ter ^ ^ ^  member par0 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> par0']
copynode -1.0946438759565353:  root modified ^ ReturnStatement expression BinaryOperation ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation']
copynode -2.088516056537628:  root modified ^ MemberReference-MemberReference member isZero_ter ^ ^ ^  member par0 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> par0']
copynode -1.0946438759565353:  root modified ^ ReturnStatement expression MethodInvocation ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation']
copynode -0.8595583625137806:  root modified ^ MemberReference-MemberReference member INF_ter ^ ^ ^  member NaN_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'copy-member']
copynode -0.8595583625137806:  root modified ^ MemberReference-MemberReference member INF_ter ^ ^ ^  member isNaN_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'copy-member']
copynode -0.8595583625137806:  root modified ^ MemberReference-MemberReference member INF_ter ^ ^ ^  member NaN_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'copy-member']
copynode -4.313200131058693:  root modified ^ MemberReference-MemberReference member INF_ter ^ ^ ^  qualifier unknown ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'start -> unknown']
copynode -3.35068067535758:  root modified ^ MemberReference-MemberReference member NaN_ter ^ ^ ^  member unknown ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'start -> unknown']
copynode -3.7485689873283263:  root add ^ IfStatement condition BinaryOperation ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation']
copynode -1.0946438759565353:  root modified ^ ReturnStatement expression Cast ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> Cast']
copynode -3.35068067535758:  root modified ^ MemberReference-MemberReference member NaN_ter ^ ^ ^  member par0 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> par0']
copynode -0.8595583625137806:  root modified ^ MemberReference-MemberReference member INF_ter ^ ^ ^  member ZERO_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'copy-member']
copynode -4.4164943397045135:  root add ^ StatementExpression expression MethodInvocation ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation']
copynode -2.088516056537628:  root modified ^ MemberReference-MemberReference member isZero_ter ^ ^ ^  member NaN_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'copy-member']
copynode -0.8595583625137806:  root modified ^ MemberReference-MemberReference member INF_ter ^ ^ ^  member imaginary_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'copy-member']
copynode -3.7485689873283263:  root add ^ IfStatement condition MethodInvocation ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation']
copynode -2.088516056537628:  root modified ^ MemberReference-MemberReference member isZero_ter ^ ^ ^  member NaN_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'copy-member']
copynode -2.088516056537628:  root modified ^ MemberReference-MemberReference member isZero_ter ^ ^ ^  member isNaN_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'copy-member']
copynode -1.0946438759565353:  root modified ^ ReturnStatement expression MemberReference ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MemberReference']
copynode -0.8595583625137806:  root modified ^ MemberReference-MemberReference member INF_ter ^ ^ ^  member real_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'copy-member']
copynode -0.8595583625137806:  root modified ^ MemberReference-MemberReference member INF_ter ^ ^ ^  member INF_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'copy-member']
copynode -5.097227051854134:  root modified ^ MemberReference-MemberReference member isZero_ter ^ ^ ^  qualifier unknown ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'start -> unknown']
copynode -2.088516056537628:  root modified ^ MemberReference-MemberReference member isZero_ter ^ ^ ^  member NaN_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'copy-member']
copynode -0.8595583625137806:  root modified ^ MemberReference-MemberReference member INF_ter ^ ^ ^  member NaN_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'copy-member']
copynode -5.478027060627937:  root modified ^ ReturnStatement expression MemberReference member NaN_ter ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'copy-ReturnStatement', 'root -> End']
copynode -2.088516056537628:  root modified ^ MemberReference-MemberReference member isZero_ter ^ ^ ^  member ZERO_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'copy-member']
copynode -3.7485689873283263:  root add ^ IfStatement condition MemberReference ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference']
copynode -2.088516056537628:  root modified ^ MemberReference-MemberReference member isZero_ter ^ ^ ^  member isZero_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'copy-member']
copynode -2.088516056537628:  root modified ^ MemberReference-MemberReference member isZero_ter ^ ^ ^  member INF_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'copy-member']
copynode -3.35068067535758:  root modified ^ MemberReference-MemberReference member NaN_ter ^ ^ ^  member NaN_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'copy-member']
copynode -1.0946438759565353:  root modified ^ ReturnStatement expression Literal ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> Literal']
copynode -5.638458624482155:  root modified ^ MemberReference-MemberReference member INF_ter ^ ^ ^  prefix_operators -_ter ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> prefix_operators member', 'prefix_operators -> -_ter']
copynode -2.088516056537628:  root modified ^ MemberReference-MemberReference member isZero_ter ^ ^ ^  member imaginary_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'copy-member']
copynode -4.4164943397045135:  root add ^ StatementExpression expression Assignment ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment']
copynode -3.35068067535758:  root modified ^ MemberReference-MemberReference member NaN_ter ^ ^ ^  member NaN_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'copy-member']
copynode -3.35068067535758:  root modified ^ MemberReference-MemberReference member NaN_ter ^ ^ ^  member isNaN_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'copy-member']
copynode -6.270917609333992:  root modified ^ ReturnStatement expression TernaryExpression condition MethodInvocation prefix_operators !_ter ^ ^ member isInfinite_ter ^ ^ ^ ^ if_true MemberReference member ZERO_ter ^ ^ ^ ^ if_false MemberReference member NaN_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'copy-ReturnStatement', 'root -> End']
copynode -6.231573477387428:  root modified ^ MemberReference-MemberReference member INF_ter ^ ^ ^  selectors ArraySelector ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> selectors member', 'selectors -> ArraySelector']
copynode -1.0946438759565353:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'copy-expression']
copynode -1.0946438759565353:  root modified ^ ReturnStatement expression This ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> This']
copynode -3.35068067535758:  root modified ^ MemberReference-MemberReference member NaN_ter ^ ^ ^  member NaN_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'copy-member']
copynode -3.35068067535758:  root modified ^ MemberReference-MemberReference member NaN_ter ^ ^ ^  member ZERO_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'copy-member']
copynode -6.780389502644539:  root modified ^ ReturnStatement expression MethodInvocation arguments BinaryOperation operator /_ter ^ ^ operandl MemberReference member real_ter ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ BinaryOperation operator /_ter ^ ^ operandl MemberReference member imaginary_ter ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ member createComplex_ter ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'copy-ReturnStatement', 'root -> End']
copynode -3.35068067535758:  root modified ^ MemberReference-MemberReference member NaN_ter ^ ^ ^  member isZero_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'copy-member']
copynode -1.0946438759565353:  root modified ^ ReturnStatement expression ClassCreator ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> ClassCreator']
copynode -3.35068067535758:  root modified ^ MemberReference-MemberReference member NaN_ter ^ ^ ^  member INF_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'copy-member']
copynode -6.560880616307259:  root modified ^ MemberReference-MemberReference member isZero_ter ^ ^ ^  prefix_operators -_ter ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> prefix_operators member', 'prefix_operators -> -_ter']
copynode -3.35068067535758:  root modified ^ MemberReference-MemberReference member NaN_ter ^ ^ ^  member imaginary_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'copy-member']
copynode -6.8274607211351395:  root modified ^ MemberReference-MemberReference member NaN_ter ^ ^ ^  qualifier unknown ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'start -> unknown']
copynode -4.313200131058693:  root modified ^ MemberReference-MemberReference member INF_ter ^ ^ ^  qualifier Double_ter ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'copy-qualifier']
copynode -4.313200131058693:  root modified ^ MemberReference-MemberReference member INF_ter ^ ^ ^  qualifier par0 ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0']
copynode -4.4164943397045135:  root add ^ StatementExpression expression MemberReference ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MemberReference']
copynode -3.7485689873283263:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value 0d_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'copy-condition']
copynode -6.307778596878052:  root add ^ ReturnStatement expression TernaryExpression ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression']
copynode -3.7485689873283263:  root add ^ IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ member isInfinite_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'copy-condition']
copynode -5.097227051854134:  root modified ^ MemberReference-MemberReference member isZero_ter ^ ^ ^  qualifier Double_ter ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'copy-qualifier']
copynode -4.313200131058693:  root modified ^ MemberReference-MemberReference member INF_ter ^ ^ ^  qualifier Double_ter ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'copy-qualifier']
copynode -5.638458624482155:  root modified ^ MemberReference-MemberReference member INF_ter ^ ^ ^  prefix_operators !_ter ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> prefix_operators member', 'prefix_operators -> !_ter']
copynode -7.749874114990234:  root add ^ ReturnStatement expression MemberReference member NaN_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'copy-ReturnStatement', 'root -> End']
copynode -5.097227051854134:  root modified ^ MemberReference-MemberReference member isZero_ter ^ ^ ^  qualifier par0 ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0']
copynode -6.307778596878052:  root add ^ ReturnStatement expression MemberReference ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MemberReference']
copynode -7.7898444682359695:  root modified ^ MemberReference-MemberReference member isZero_ter ^ ^ ^  selectors ArraySelector ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> selectors member', 'selectors -> ArraySelector']
copynode -3.7485689873283263:  root add ^ IfStatement condition MethodInvocation qualifier Double_ter ^ ^ arguments MemberReference member par0 ^ ^ ^ ^ member isInfinite_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'copy-condition']
copynode -5.097227051854134:  root modified ^ MemberReference-MemberReference member isZero_ter ^ ^ ^  qualifier Double_ter ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'copy-qualifier']
copynode -6.307778596878052:  root add ^ ReturnStatement expression Literal ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> Literal']
copynode -5.638458624482155:  root modified ^ MemberReference-MemberReference member INF_ter ^ ^ ^  prefix_operators ~_ter ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> prefix_operators member', 'prefix_operators -> ~_ter']
copynode -3.7485689873283263:  root add ^ IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MemberReference member isNaN_ter ^ ^ ^ ^ operandr MethodInvocation qualifier Double_ter ^ ^ arguments MemberReference member par0 ^ ^ ^ ^ member isNaN_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'copy-condition']
copynode -6.560880616307259:  root modified ^ MemberReference-MemberReference member isZero_ter ^ ^ ^  prefix_operators !_ter ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> prefix_operators member', 'prefix_operators -> !_ter']
copynode -7.411016836762428:  root modified ^ MemberReference-MemberReference member INF_ter ^ ^ ^  postfix_operators ++_ter ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> postfix_operators member', 'postfix_operators -> ++_ter']
copynode -7.7973967380821705:  root modified ^ StatementExpression expression MethodInvocation ^ ^ ^ ^ ; ['root -> modified', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation']
copynode -6.307778596878052:  root add ^ ReturnStatement expression BinaryOperation ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation']
copynode -4.4164943397045135:  root add ^ StatementExpression expression SuperMethodInvocation ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> SuperMethodInvocation']
copynode -1.0946438759565353:  root modified ^ ReturnStatement expression SuperMethodInvocation ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> SuperMethodInvocation']
copynode -7.938540890812874:  root modified ^ MemberReference-MemberReference member NaN_ter ^ ^ ^  prefix_operators -_ter ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> prefix_operators member', 'prefix_operators -> -_ter']
copynode -4.4164943397045135:  root add ^ StatementExpression expression This ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> This']
copynode -6.307778596878052:  root add ^ ReturnStatement expression MethodInvocation ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation']
copynode -7.411016836762428:  root modified ^ MemberReference-MemberReference member INF_ter ^ ^ ^  postfix_operators --_ter ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> postfix_operators member', 'postfix_operators -> --_ter']
copynode -8.690467834472656:  root add ^ ReturnStatement expression MethodInvocation arguments BinaryOperation operator /_ter ^ ^ operandl MemberReference member real_ter ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ BinaryOperation operator /_ter ^ ^ operandl MemberReference member imaginary_ter ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ member createComplex_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'copy-ReturnStatement', 'root -> End']
copynode -8.76241683959961:  root add ^ ReturnStatement expression TernaryExpression condition MethodInvocation prefix_operators !_ter ^ ^ member isInfinite_ter ^ ^ ^ ^ if_true MemberReference member ZERO_ter ^ ^ ^ ^ if_false MemberReference member NaN_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'copy-ReturnStatement', 'root -> End']
copynode -5.638458624482155:  root modified ^ MemberReference-MemberReference member INF_ter ^ ^ ^  prefix_operators ++_ter ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> prefix_operators member', 'prefix_operators -> ++_ter']
copynode -3.7485689873283263:  root add ^ IfStatement condition MemberReference member isZero_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'copy-condition']
copynode -6.8274607211351395:  root modified ^ MemberReference-MemberReference member NaN_ter ^ ^ ^  qualifier par0 ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0']
copynode -6.560880616307259:  root modified ^ MemberReference-MemberReference member isZero_ter ^ ^ ^  prefix_operators ~_ter ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> prefix_operators member', 'prefix_operators -> ~_ter']
copynode -8.56590665935073:  root modified ^ IfStatement condition BinaryOperation ^ ^ ^ ^ ; ['root -> modified', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation']
copynode -9.04285378754139:  root modified ^ MemberReference-MemberReference member NaN_ter ^ ^ ^  selectors ArraySelector ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> selectors member', 'selectors -> ArraySelector']
copynode -6.8274607211351395:  root modified ^ MemberReference-MemberReference member NaN_ter ^ ^ ^  qualifier Double_ter ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'copy-qualifier']
copynode -9.034620985388756:  root add ^ LocalVariableDeclaration type ReferenceType ^ ^ declarators ^ ^ ^ ; ['root -> add', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType']
copynode -8.720394089818:  root modified ^ MemberReference-MemberReference member isZero_ter ^ ^ ^  postfix_operators ++_ter ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> postfix_operators member', 'postfix_operators -> ++_ter']
copynode -3.7485689873283263:  root add ^ IfStatement condition Literal ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> Literal']
copynode -5.638458624482155:  root modified ^ MemberReference-MemberReference member INF_ter ^ ^ ^  prefix_operators --_ter ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> prefix_operators member', 'prefix_operators -> --_ter']
copynode -6.8274607211351395:  root modified ^ MemberReference-MemberReference member NaN_ter ^ ^ ^  qualifier Double_ter ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'copy-qualifier']
copynode -3.7485689873283263:  root add ^ IfStatement condition This ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> This']
copynode -6.560880616307259:  root modified ^ MemberReference-MemberReference member isZero_ter ^ ^ ^  prefix_operators ++_ter ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> prefix_operators member', 'prefix_operators -> ++_ter']
before@4 batch0 x: -8.895042089861818: root add ^ IfStatement condition This ^ ^ ^ ^  ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> This']
after@4 batch0 x: -8.895042089861818: root add ^ IfStatement condition This ^ ^ ^ ^  ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> This']
before@4 batch1 x: -9.616483795456588: root modified ^ ContinueStatement_ter ^ ^  ; ['root -> modified', 'root -> ContinueStatement_ter', 'root -> End']
after@4 batch1 x: -9.616483795456588: root modified ^ ContinueStatement_ter ^ ^  ; ['root -> modified', 'root -> ContinueStatement_ter', 'root -> End']
copynode -1.4765606168657541:  root modified ^ ReturnStatement expression TernaryExpression condition ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false']
copynode -1.7077427878975868:  root modified ^ MemberReference-MemberReference member INF_ter ^ ^ ^  member unknown ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'start -> unknown', 'root -> End']
copynode -2.2521389946341515:  root modified ^ MemberReference-MemberReference member isZero_ter ^ ^ ^  member unknown ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'start -> unknown', 'root -> End']
copynode -2.777376288548112:  root modified ^ ReturnStatement expression BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
copynode -3.1116129440488294:  root add ^ IfStatement condition BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
copynode -3.5394515469670296:  root modified ^ MemberReference-MemberReference member NaN_ter ^ ^ ^  member unknown ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'start -> unknown', 'root -> End']
copynode -3.8843271508812904:  root modified ^ MemberReference-MemberReference member INF_ter ^ ^ ^  member par0 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> par0', 'root -> End']
copynode -3.9897566065192223:  root modified ^ MemberReference-MemberReference member isZero_ter ^ ^ ^  member par0 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> par0', 'root -> End']
copynode -3.3449900299310684:  root add ^ StatementExpression expression MethodInvocation arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> arguments member']
copynode -3.9089477342786267:  root add ^ IfStatement condition MemberReference member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference', 'MemberReference -> member']
copynode -3.3449900299310684:  root add ^ StatementExpression expression MethodInvocation member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> member']
copynode -4.550510659813881:  root add ^ StatementExpression expression Assignment expressionl ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type']
copynode -4.793822504580021:  root modified ^ MemberReference-MemberReference member INF_ter ^ ^ ^  member isNaN_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'copy-member', 'root -> End']
copynode -4.862111873924732:  root modified ^ MemberReference-MemberReference member NaN_ter ^ ^ ^  member par0 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> par0', 'root -> End']
copynode -4.9463836923241615:  root modified ^ MemberReference-MemberReference member INF_ter ^ ^ ^  member NaN_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'copy-member', 'root -> End']
copynode -4.995443457737565:  root modified ^ ReturnStatement expression Cast type ^ expression ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> Cast', 'Cast -> type expression']
copynode -5.036414168775082:  root modified ^ MemberReference-MemberReference member isZero_ter ^ ^ ^  member NaN_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'copy-member', 'root -> End']
copynode -5.0756194815039635:  root modified ^ MemberReference-MemberReference member isZero_ter ^ ^ ^  member isNaN_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'copy-member', 'root -> End']
copynode -3.3449900299310684:  root add ^ StatementExpression expression MethodInvocation qualifier ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member']
copynode -5.160031534731388:  root modified ^ MemberReference-MemberReference member INF_ter ^ ^ ^  member isZero_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'copy-member', 'root -> End']
copynode -5.170275472104549:  root modified ^ MemberReference-MemberReference member isZero_ter ^ ^ ^  member NaN_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'copy-member', 'root -> End']
copynode -3.9089477342786267:  root add ^ IfStatement condition MemberReference prefix_operators ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference', 'MemberReference -> prefix_operators member']
copynode -5.2592344507575035:  root modified ^ MemberReference-MemberReference member isZero_ter ^ ^ ^  member loc0 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> loc0', 'root -> End']
copynode -5.369258381426334:  root modified ^ MemberReference-MemberReference member INF_ter ^ ^ ^  member ZERO_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'copy-member', 'root -> End']
copynode -5.4203262105584145:  root modified ^ MemberReference-MemberReference member INF_ter ^ ^ ^  member loc0 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> loc0', 'root -> End']
copynode -5.445154927670956:  root modified ^ MemberReference-MemberReference member isZero_ter ^ ^ ^  member isZero_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'copy-member', 'root -> End']
copynode -5.45679185539484:  root modified ^ MemberReference-MemberReference member INF_ter ^ ^ ^  member NaN_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'copy-member', 'root -> End']
copynode -5.501219533383846:  root modified ^ MemberReference-MemberReference member isZero_ter ^ ^ ^  member ZERO_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'copy-member', 'root -> End']
copynode -5.528519414365292:  root modified ^ MemberReference-MemberReference member isZero_ter ^ ^ ^  member INF_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'copy-member', 'root -> End']
copynode -5.555923439562321:  root modified ^ MemberReference-MemberReference member INF_ter ^ ^ ^  member par1 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> par1', 'root -> End']
copynode -4.345471052569337:  root add ^ IfStatement condition MethodInvocation member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> member']
copynode -5.648220993578434:  root modified ^ MemberReference-MemberReference member INF_ter ^ ^ ^  member isZero_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'copy-member', 'root -> End']
copynode -3.3449900299310684:  root add ^ StatementExpression expression MethodInvocation qualifier ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier member']
copynode -5.783439464867115:  root modified ^ MemberReference-MemberReference member NaN_ter ^ ^ ^  member loc0 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> loc0', 'root -> End']
copynode -4.5173913184553385:  root modified ^ ReturnStatement expression MethodInvocation member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> member']
copynode -4.345471052569337:  root add ^ IfStatement condition MethodInvocation prefix_operators ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> prefix_operators member']
copynode -4.5173913184553385:  root modified ^ ReturnStatement expression MethodInvocation arguments ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> arguments member']
copynode -5.89959342032671:  root modified ^ MemberReference-MemberReference member NaN_ter ^ ^ ^  member NaN_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'copy-member', 'root -> End']
copynode -5.811006799340248:  root add ^ StatementExpression expression MemberReference postfix_operators ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MemberReference', 'MemberReference -> postfix_operators member']
copynode -5.919603414833546:  root modified ^ MemberReference-MemberReference member NaN_ter ^ ^ ^  member isNaN_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'copy-member', 'root -> End']
copynode -5.926371596753597:  root modified ^ MemberReference-MemberReference member isZero_ter ^ ^ ^  member par1 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> par1', 'root -> End']
copynode -5.859464759007096:  root modified ^ ReturnStatement expression MemberReference member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MemberReference', 'MemberReference -> member']
copynode -4.345471052569337:  root add ^ IfStatement condition MethodInvocation qualifier ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier member']
copynode -4.5173913184553385:  root modified ^ ReturnStatement expression MethodInvocation qualifier ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member']
copynode -6.216152258217335:  root modified ^ MemberReference-MemberReference member NaN_ter ^ ^ ^  member NaN_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'copy-member', 'root -> End']
copynode -6.289367742836475:  root modified ^ MemberReference-MemberReference member NaN_ter ^ ^ ^  member ZERO_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'copy-member', 'root -> End']
copynode -6.320636577904224:  root modified ^ MemberReference-MemberReference member NaN_ter ^ ^ ^  member par1 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> par1', 'root -> End']
copynode -4.5173913184553385:  root modified ^ ReturnStatement expression MethodInvocation qualifier ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier member']
copynode -5.336717039346695:  root modified ^ MemberReference-MemberReference member isZero_ter ^ ^ ^  qualifier unknown ^ ^ member isZero_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'start -> unknown', 'copy-member']
copynode -6.635107107460499:  root modified ^ MemberReference-MemberReference member NaN_ter ^ ^ ^  member isZero_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'copy-member', 'root -> End']
copynode -5.336717039346695:  root modified ^ MemberReference-MemberReference member isZero_ter ^ ^ ^  qualifier unknown ^ ^ member INF_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'start -> unknown', 'copy-member']
copynode -6.679628439247608:  root modified ^ MemberReference-MemberReference member NaN_ter ^ ^ ^  member INF_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'copy-member', 'root -> End']
copynode -4.345471052569337:  root add ^ IfStatement condition MethodInvocation qualifier ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier arguments member']
copynode -6.723752612248063:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'copy-expression', 'root -> End']
copynode -5.478753954172134:  root modified ^ MemberReference-MemberReference member INF_ter ^ ^ ^  qualifier unknown ^ ^ member isZero_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'start -> unknown', 'copy-member']
copynode -6.7435991913080215:  root add ^ StatementExpression expression This selectors ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> This', 'This -> selectors']
copynode -3.9089477342786267:  root add ^ IfStatement condition MemberReference qualifier ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference', 'MemberReference -> qualifier member']
copynode -5.591141909360886:  root modified ^ MemberReference-MemberReference member isZero_ter ^ ^ ^  qualifier par0 ^ ^ member unknown ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'start -> unknown']
copynode -6.626415506005287:  root add ^ StatementExpression expression SuperMethodInvocation member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> SuperMethodInvocation', 'SuperMethodInvocation -> member']
copynode -5.478753954172134:  root modified ^ MemberReference-MemberReference member INF_ter ^ ^ ^  qualifier unknown ^ ^ member INF_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'start -> unknown', 'copy-member']
copynode -6.901542777195573:  root modified ^ ReturnStatement expression This selectors ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> This', 'This -> selectors']
copynode -5.591141909360886:  root modified ^ MemberReference-MemberReference member isZero_ter ^ ^ ^  qualifier par0 ^ ^ member isZero_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member']
copynode -6.976707572117448:  root modified ^ ReturnStatement expression Literal value ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> Literal', 'Literal -> value']
copynode -5.591141909360886:  root modified ^ MemberReference-MemberReference member isZero_ter ^ ^ ^  qualifier par0 ^ ^ member INF_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member']
copynode -7.109575629234314:  root add ^ ReturnStatement expression TernaryExpression condition ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false']
copynode -5.336717039346695:  root modified ^ MemberReference-MemberReference member isZero_ter ^ ^ ^  qualifier unknown ^ ^ member NaN_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'start -> unknown', 'copy-member']
copynode -6.207035034894943:  root modified ^ MemberReference-MemberReference member INF_ter ^ ^ ^  qualifier par0 ^ ^ member unknown ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'start -> unknown']
copynode -5.591141909360886:  root modified ^ MemberReference-MemberReference member isZero_ter ^ ^ ^  qualifier par0 ^ ^ member NaN_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member']
copynode -5.478753954172134:  root modified ^ MemberReference-MemberReference member INF_ter ^ ^ ^  qualifier unknown ^ ^ member NaN_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'start -> unknown', 'copy-member']
copynode -6.641223577898927:  root add ^ IfStatement condition MemberReference qualifier par0 ^ ^ member isZero_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'copy-condition', 'root -> End']
copynode -7.127380728721619:  root add ^ ReturnStatement expression BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
copynode -7.46254950761795:  root add ^ StatementExpression expression MethodInvocation qualifier MathUtils_ter ^ ^ arguments MemberReference member par0 ^ ^ ^ ^ member checkNotNull_ter ^ ^ ^ ^ ^ IfStatement condition ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'copy-StatementExpression', 'root -> IfStatement', 'IfStatement -> condition']
copynode -1.4765606168657541:  root modified ^ ReturnStatement expression TernaryExpression condition ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition']
copynode -4.345471052569337:  root add ^ IfStatement condition MethodInvocation arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> arguments member']
copynode -7.540440618991852:  root modified ^ MemberReference-MemberReference member INF_ter ^ ^ ^  selectors ArraySelector index ^ ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> selectors member', 'selectors -> ArraySelector', 'ArraySelector -> index']
copynode -4.345471052569337:  root add ^ IfStatement condition MethodInvocation prefix_operators ^ qualifier ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> prefix_operators qualifier member']
copynode -7.744827628135681:  root add ^ ReturnStatement expression Literal value ^ ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> Literal', 'Literal -> value']
copynode -4.345471052569337:  root add ^ IfStatement condition MethodInvocation prefix_operators ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> prefix_operators arguments member']
copynode -6.207035034894943:  root modified ^ MemberReference-MemberReference member INF_ter ^ ^ ^  qualifier par0 ^ ^ member isZero_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member']
copynode -7.543764650821686:  root add ^ StatementExpression expression MethodInvocation qualifier MathUtils_ter ^ ^ arguments MemberReference member par0 ^ ^ ^ ^ member checkNotNull_ter ^ ^ ^ ^ ^ StatementExpression expression MethodInvocation qualifier MathUtils_ter ^ ^ arguments MemberReference member par0 ^ ^ ^ ^ member checkNotNull_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'copy-StatementExpression', 'root -> StatementExpression', 'copy-StatementExpression']
copynode -6.207035034894943:  root modified ^ MemberReference-MemberReference member INF_ter ^ ^ ^  qualifier par0 ^ ^ member INF_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member']
copynode -6.696769863367081:  root modified ^ MemberReference-MemberReference member isZero_ter ^ ^ ^  prefix_operators -_ter ^ ^ member isZero_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> prefix_operators member', 'prefix_operators -> -_ter', 'copy-member']
copynode -6.207035034894943:  root modified ^ MemberReference-MemberReference member INF_ter ^ ^ ^  qualifier par0 ^ ^ member NaN_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member']
copynode -2.777376288548112:  root modified ^ ReturnStatement expression BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member real_ter ^ ^ ^ ^ operandr MemberReference member loc4 ^ ^ ^ ^ ^ ^ operandr MemberReference member imaginary_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'copy-BinaryOperation']
copynode -6.696769863367081:  root modified ^ MemberReference-MemberReference member isZero_ter ^ ^ ^  prefix_operators -_ter ^ ^ member INF_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> prefix_operators member', 'prefix_operators -> -_ter', 'copy-member']
copynode -6.641223577898927:  root add ^ IfStatement condition MemberReference qualifier par0 ^ ^ member isZero_ter ^ ^ ^ ^ ^ ReturnStatement ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'copy-condition', 'root -> ReturnStatement']
copynode -3.1116129440488294:  root add ^ IfStatement condition BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member real_ter ^ ^ ^ ^ operandr MemberReference member loc4 ^ ^ ^ ^ ^ ^ operandr MemberReference member imaginary_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'copy-BinaryOperation']
copynode -3.1116129440488294:  root add ^ IfStatement condition BinaryOperation operator *_ter ^ ^ operandl MemberReference member loc0 ^ ^ ^ ^ operandr MemberReference member loc4 ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'copy-BinaryOperation']
copynode -4.5173913184553385:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ member isInfinite_ter ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'copy-MethodInvocation']
copynode -4.5173913184553385:  root modified ^ ReturnStatement expression MethodInvocation prefix_operators !_ter ^ ^ member isInfinite_ter ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'copy-MethodInvocation']
copynode -7.807053679600358:  root modified ^ ReturnStatement expression ClassCreator type ^ arguments ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> ClassCreator', 'ClassCreator -> type arguments']
copynode -1.2228591330349445:  root modified ^ MemberReference-MemberReference member INF_ter ^ ^ ^  member unknown ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'start -> unknown', 'root -> End']
copynode -1.3371664434671402:  root modified ^ ReturnStatement expression TernaryExpression condition ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false']
copynode -2.828185737133026:  root modified ^ MemberReference-MemberReference member isZero_ter ^ ^ ^  member unknown ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'start -> unknown', 'root -> End']
copynode -3.103380937129259:  root modified ^ MemberReference-MemberReference member INF_ter ^ ^ ^  member par0 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> par0', 'root -> End']
copynode -3.6303868740797043:  root modified ^ ReturnStatement expression BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
copynode -3.750476658344269:  root modified ^ MemberReference-MemberReference member isZero_ter ^ ^ ^  member par0 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> par0', 'root -> End']
copynode -4.069887895137072:  root modified ^ MemberReference-MemberReference member INF_ter ^ ^ ^  member NaN_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'copy-member', 'root -> End']
copynode -4.343420762568712:  root modified ^ MemberReference-MemberReference member INF_ter ^ ^ ^  member isNaN_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'copy-member', 'root -> End']
copynode -4.433926362544298:  root modified ^ MemberReference-MemberReference member INF_ter ^ ^ ^  member NaN_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'copy-member', 'root -> End']
copynode -4.459282364696264:  root modified ^ MemberReference-MemberReference member NaN_ter ^ ^ ^  member unknown ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'start -> unknown', 'root -> End']
copynode -4.5629214996879455:  root add ^ IfStatement condition BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
copynode -4.6730104349553585:  root modified ^ MemberReference-MemberReference member NaN_ter ^ ^ ^  member par0 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> par0', 'root -> End']
copynode -4.696293611079454:  root modified ^ MemberReference-MemberReference member INF_ter ^ ^ ^  member ZERO_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'copy-member', 'root -> End']
copynode -3.8371017426252365:  root modified ^ ReturnStatement expression MethodInvocation arguments ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> arguments member']
copynode -4.811561644077301:  root modified ^ MemberReference-MemberReference member isZero_ter ^ ^ ^  member NaN_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'copy-member', 'root -> End']
copynode -4.898499269038439:  root modified ^ MemberReference-MemberReference member INF_ter ^ ^ ^  member imaginary_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'copy-member', 'root -> End']
copynode -4.650799319148064:  root modified ^ ReturnStatement expression Cast type ^ expression ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> Cast', 'Cast -> type expression']
copynode -5.155752241611481:  root modified ^ MemberReference-MemberReference member isZero_ter ^ ^ ^  member NaN_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'copy-member', 'root -> End']
copynode -5.173776686191559:  root modified ^ MemberReference-MemberReference member isZero_ter ^ ^ ^  member isNaN_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'copy-member', 'root -> End']
copynode -3.8371017426252365:  root modified ^ ReturnStatement expression MethodInvocation qualifier ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member']
copynode -5.211788937449455:  root modified ^ ReturnStatement expression MemberReference member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MemberReference', 'MemberReference -> member']
copynode -5.321001786738634:  root modified ^ MemberReference-MemberReference member INF_ter ^ ^ ^  member real_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'copy-member', 'root -> End']
copynode -5.329458970576525:  root modified ^ MemberReference-MemberReference member INF_ter ^ ^ ^  member INF_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'copy-member', 'root -> End']
copynode -5.391378462314606:  root modified ^ MemberReference-MemberReference member isZero_ter ^ ^ ^  member NaN_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'copy-member', 'root -> End']
copynode -5.40545155480504:  root modified ^ MemberReference-MemberReference member INF_ter ^ ^ ^  member NaN_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'copy-member', 'root -> End']
copynode -4.7446370124816895:  root add ^ StatementExpression expression MethodInvocation arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> arguments member']
copynode -1.3371664434671402:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'copy-TernaryExpression']
copynode -5.4964123368263245:  root modified ^ MemberReference-MemberReference member isZero_ter ^ ^ ^  member ZERO_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'copy-member', 'root -> End']
copynode -3.8371017426252365:  root modified ^ ReturnStatement expression MethodInvocation member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> member']
copynode -5.728706419467926:  root modified ^ MemberReference-MemberReference member isZero_ter ^ ^ ^  member isZero_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'copy-member', 'root -> End']
copynode -4.459259748458862:  root modified ^ MemberReference-MemberReference member INF_ter ^ ^ ^  qualifier unknown ^ ^ member INF_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'start -> unknown', 'copy-member']
copynode -5.833776533603668:  root modified ^ MemberReference-MemberReference member isZero_ter ^ ^ ^  member INF_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'copy-member', 'root -> End']
copynode -5.637826895195758:  root add ^ IfStatement condition MemberReference member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference', 'MemberReference -> member']
copynode -4.459259748458862:  root modified ^ MemberReference-MemberReference member INF_ter ^ ^ ^  qualifier unknown ^ ^ member isZero_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'start -> unknown', 'copy-member']
copynode -5.914970722049475:  root modified ^ MemberReference-MemberReference member NaN_ter ^ ^ ^  member NaN_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'copy-member', 'root -> End']
copynode -5.9423568695783615:  root modified ^ ReturnStatement expression Literal value ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> Literal', 'Literal -> value']
copynode -4.459259748458862:  root modified ^ MemberReference-MemberReference member INF_ter ^ ^ ^  qualifier unknown ^ ^ member NaN_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'start -> unknown', 'copy-member']
copynode -6.067600309848785:  root modified ^ MemberReference-MemberReference member isZero_ter ^ ^ ^  member imaginary_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'copy-member', 'root -> End']
copynode -3.8371017426252365:  root modified ^ ReturnStatement expression MethodInvocation qualifier ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier member']
copynode -6.09704253077507:  root add ^ StatementExpression expression Assignment expressionl ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type']
copynode -6.155630435794592:  root modified ^ MemberReference-MemberReference member NaN_ter ^ ^ ^  member NaN_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'copy-member', 'root -> End']
copynode -4.7446370124816895:  root add ^ StatementExpression expression MethodInvocation member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> member']
copynode -6.263563718646765:  root modified ^ MemberReference-MemberReference member NaN_ter ^ ^ ^  member isNaN_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'copy-member', 'root -> End']
copynode -4.908250784355914:  root add ^ IfStatement condition MethodInvocation member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> member']
copynode -6.309200242161751:  root modified ^ MemberReference-MemberReference member INF_ter ^ ^ ^  selectors ArraySelector index ^ ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> selectors member', 'selectors -> ArraySelector', 'ArraySelector -> index']
copynode -4.7446370124816895:  root add ^ StatementExpression expression MethodInvocation qualifier ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member']
copynode -6.417903706431389:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'copy-expression', 'root -> End']
copynode -6.466282453387976:  root modified ^ MemberReference-MemberReference member NaN_ter ^ ^ ^  member NaN_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'copy-member', 'root -> End']
copynode -6.514629688113928:  root modified ^ MemberReference-MemberReference member NaN_ter ^ ^ ^  member ZERO_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'copy-member', 'root -> End']
copynode -6.4237668961286545:  root modified ^ ReturnStatement expression This selectors ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> This', 'This -> selectors']
copynode -5.331443324685097:  root modified ^ MemberReference-MemberReference member isZero_ter ^ ^ ^  qualifier unknown ^ ^ member INF_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'start -> unknown', 'copy-member']
copynode -4.908250784355914:  root add ^ IfStatement condition MethodInvocation qualifier ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier member']
copynode -4.908250784355914:  root add ^ IfStatement condition MethodInvocation qualifier ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier arguments member']
copynode -5.331443324685097:  root modified ^ MemberReference-MemberReference member isZero_ter ^ ^ ^  qualifier unknown ^ ^ member isZero_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'start -> unknown', 'copy-member']
copynode -5.331443324685097:  root modified ^ MemberReference-MemberReference member isZero_ter ^ ^ ^  qualifier unknown ^ ^ member NaN_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'start -> unknown', 'copy-member']
copynode -6.8725226782262325:  root modified ^ MemberReference-MemberReference member NaN_ter ^ ^ ^  member isZero_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'copy-member', 'root -> End']
copynode -4.908250784355914:  root add ^ IfStatement condition MethodInvocation prefix_operators ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> prefix_operators member']
copynode -7.028528776019812:  root modified ^ MemberReference-MemberReference member NaN_ter ^ ^ ^  member INF_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'copy-member', 'root -> End']
copynode -7.133558597415686:  root modified ^ MemberReference-MemberReference member NaN_ter ^ ^ ^  member imaginary_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'copy-member', 'root -> End']
copynode -7.0032957047224045:  root modified ^ ReturnStatement expression ClassCreator type ^ arguments ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> ClassCreator', 'ClassCreator -> type arguments']
copynode -5.98178394138813:  root modified ^ MemberReference-MemberReference member INF_ter ^ ^ ^  prefix_operators -_ter ^ ^ member isZero_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> prefix_operators member', 'prefix_operators -> -_ter', 'copy-member']
copynode -5.637826895195758:  root add ^ IfStatement condition MemberReference prefix_operators ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference', 'MemberReference -> prefix_operators member']
copynode -4.7446370124816895:  root add ^ StatementExpression expression MethodInvocation qualifier ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier member']
copynode -5.98178394138813:  root modified ^ MemberReference-MemberReference member INF_ter ^ ^ ^  prefix_operators -_ter ^ ^ member INF_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> prefix_operators member', 'prefix_operators -> -_ter', 'copy-member']
copynode -4.908250784355914:  root add ^ IfStatement condition MethodInvocation arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> arguments member']
copynode -3.6303868740797043:  root modified ^ ReturnStatement expression BinaryOperation operator /_ter ^ ^ operandl MemberReference member real_ter ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'copy-BinaryOperation']
copynode -5.98178394138813:  root modified ^ MemberReference-MemberReference member INF_ter ^ ^ ^  prefix_operators -_ter ^ ^ member NaN_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> prefix_operators member', 'prefix_operators -> -_ter', 'copy-member']
copynode -7.475653141736984:  root add ^ StatementExpression expression MemberReference postfix_operators ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MemberReference', 'MemberReference -> postfix_operators member']
copynode -7.603299975395203:  root add ^ ReturnStatement expression TernaryExpression condition ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false']
copynode -3.6303868740797043:  root modified ^ ReturnStatement expression BinaryOperation operator /_ter ^ ^ operandl MemberReference member imaginary_ter ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'copy-BinaryOperation']
copynode -3.8371017426252365:  root modified ^ ReturnStatement expression MethodInvocation prefix_operators !_ter ^ ^ member isInfinite_ter ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'copy-MethodInvocation']
copynode -5.98178394138813:  root modified ^ MemberReference-MemberReference member INF_ter ^ ^ ^  prefix_operators -_ter ^ ^ member unknown ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> prefix_operators member', 'prefix_operators -> -_ter', 'start -> unknown']
copynode -7.902198672294617:  root add ^ ReturnStatement expression MemberReference member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MemberReference', 'MemberReference -> member']
copynode -7.906375348567963:  root modified ^ MemberReference-MemberReference member isZero_ter ^ ^ ^  selectors ArraySelector index ^ ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> selectors member', 'selectors -> ArraySelector', 'ArraySelector -> index']
copynode -1.3371664434671402:  root modified ^ ReturnStatement expression TernaryExpression condition MethodInvocation prefix_operators !_ter ^ ^ member isInfinite_ter ^ ^ ^ ^ if_true MemberReference member ZERO_ter ^ ^ ^ ^ if_false MemberReference member NaN_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'copy-TernaryExpression']
copynode -7.946020007133484:  root add ^ ReturnStatement expression Literal value ^ ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> Literal', 'Literal -> value']
copynode -7.612758135277545:  root add ^ IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ member isInfinite_ter ^ ^ ^ ^ ^ ReturnStatement ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'copy-condition', 'root -> ReturnStatement']
copynode -1.2228591330349445:  root modified ^ MemberReference-MemberReference member INF_ter ^ ^ ^  member unknown ^ ^ ^ StatementExpression ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'start -> unknown', 'root -> StatementExpression']
copynode -3.8371017426252365:  root modified ^ ReturnStatement expression MethodInvocation selectors ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> selectors member']
copynode -3.8371017426252365:  root modified ^ ReturnStatement expression MethodInvocation qualifier Double_ter ^ ^ arguments MemberReference member par0 ^ ^ ^ ^ member isNaN_ter ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'copy-MethodInvocation']
copynode -7.3222557455301285:  root modified ^ MemberReference-MemberReference member INF_ter ^ ^ ^  qualifier Double_ter ^ ^ member unknown ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'copy-qualifier', 'start -> unknown']
copynode -7.064383640885353:  root modified ^ MemberReference-MemberReference member isZero_ter ^ ^ ^  prefix_operators -_ter ^ ^ member isZero_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> prefix_operators member', 'prefix_operators -> -_ter', 'copy-member']
copynode -4.908250784355914:  root add ^ IfStatement condition MethodInvocation prefix_operators ^ qualifier ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> prefix_operators qualifier member']
copynode -4.908250784355914:  root add ^ IfStatement condition MethodInvocation prefix_operators ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> prefix_operators arguments member']
copynode -5.211788937449455:  root modified ^ ReturnStatement expression MemberReference qualifier ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MemberReference', 'MemberReference -> qualifier member']
copynode -7.47973201223067:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value 0d_ter ^ ^ ^ ^ ^ ^ ^ ReturnStatement ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'copy-condition', 'root -> ReturnStatement']
copynode -7.910712694603717:  root add ^ IfStatement condition MethodInvocation qualifier Double_ter ^ ^ arguments MemberReference member par0 ^ ^ ^ ^ member isInfinite_ter ^ ^ ^ ^ ^ ReturnStatement ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'copy-condition', 'root -> ReturnStatement']
copynode -4.908250784355914:  root add ^ IfStatement condition MethodInvocation qualifier Double_ter ^ ^ arguments MemberReference member par0 ^ ^ ^ ^ member isNaN_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'copy-MethodInvocation']
copynode -3.8371017426252365:  root modified ^ ReturnStatement expression MethodInvocation qualifier Double_ter ^ ^ arguments MemberReference member par0 ^ ^ ^ ^ member isInfinite_ter ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'copy-MethodInvocation']
copynode -8.198932409286499:  root add ^ ReturnStatement expression BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
copynode -8.011950945336139:  root add ^ IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MemberReference member isNaN_ter ^ ^ ^ ^ operandr MethodInvocation qualifier Double_ter ^ ^ arguments MemberReference member par0 ^ ^ ^ ^ member isNaN_ter ^ ^ ^ ^ ^ ^ ^ ReturnStatement ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'copy-condition', 'root -> ReturnStatement']
copynode -7.383597269654274:  root modified ^ MemberReference-MemberReference member INF_ter ^ ^ ^  qualifier par0 ^ ^ member unknown ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'start -> unknown']
copynode -7.659368172287941:  root modified ^ MemberReference-MemberReference member INF_ter ^ ^ ^  qualifier Double_ter ^ ^ member unknown ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'copy-qualifier', 'start -> unknown']
copynode -7.064383640885353:  root modified ^ MemberReference-MemberReference member isZero_ter ^ ^ ^  prefix_operators -_ter ^ ^ member NaN_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> prefix_operators member', 'prefix_operators -> -_ter', 'copy-member']
copynode -7.169698134064674:  root modified ^ MemberReference-MemberReference member NaN_ter ^ ^ ^  qualifier unknown ^ ^ member NaN_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'start -> unknown', 'copy-member']
before@5 batch0 x: -8.064503544941545: root modified ^ ReturnStatement expression ClassCreator type ^ arguments ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> ClassCreator', 'ClassCreator -> type arguments']
after@5 batch0 x: -8.064503544941545: root modified ^ ReturnStatement expression ClassCreator type ^ arguments ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> ClassCreator', 'ClassCreator -> type arguments']
before@5 batch1 x: -8.519792929291725: root modified ^ MemberReference-MemberReference member NaN_ter ^ ^ ^  qualifier unknown ^ ^ member NaN_ter ^ ^ ^ ^  ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'start -> unknown', 'copy-member']
after@5 batch1 x: -8.519792929291725: root modified ^ MemberReference-MemberReference member NaN_ter ^ ^ ^  qualifier unknown ^ ^ member NaN_ter ^ ^ ^ ^  ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'start -> unknown', 'copy-member']
copynode -1.4813697999343276:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition']
copynode -1.4813697999343276:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation']
copynode -2.8345600347965956:  root modified ^ ReturnStatement expression BinaryOperation operator |_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> |_ter']
copynode -2.8345600347965956:  root modified ^ ReturnStatement expression BinaryOperation operator +_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter']
copynode -4.4370992332696915:  root add ^ StatementExpression expression MethodInvocation member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown']
copynode -3.176500385743566:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter']
copynode -1.4813697999343276:  root modified ^ ReturnStatement expression TernaryExpression condition MethodInvocation ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> MethodInvocation']
copynode -3.176500385743566:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter']
copynode -1.4813697999343276:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> MemberReference']
copynode -4.550997629150515:  root add ^ StatementExpression expression Assignment expressionl MemberReference ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference']
copynode -3.176500385743566:  root add ^ IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter']
copynode -5.034966254606843:  root modified ^ ReturnStatement expression Cast type ReferenceType ^ ^ expression ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> Cast', 'Cast -> type expression', 'type -> ReferenceType']
copynode -4.281400337815285:  root add ^ StatementExpression expression MethodInvocation arguments MemberReference ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference']
copynode -4.320325194043107:  root add ^ IfStatement condition MemberReference member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference', 'MemberReference -> member', 'start -> unknown']
copynode -2.8345600347965956:  root modified ^ ReturnStatement expression BinaryOperation operator &_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &_ter']
copynode -5.22587325994391:  root add ^ IfStatement condition MemberReference prefix_operators !_ter ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference', 'MemberReference -> prefix_operators member', 'prefix_operators -> !_ter']
copynode -3.176500385743566:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter']
copynode -2.8345600347965956:  root modified ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter']
copynode -5.627934960764833:  root add ^ IfStatement condition MethodInvocation member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown']
copynode -4.281400337815285:  root add ^ StatementExpression expression MethodInvocation arguments MemberReference member par0 ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> arguments member', 'copy-arguments']
copynode -3.176500385743566:  root add ^ IfStatement condition BinaryOperation operator >_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >_ter']
copynode -5.808210043353029:  root add ^ IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> prefix_operators member', 'prefix_operators -> !_ter']
copynode -5.800469154492021:  root modified ^ ReturnStatement expression MethodInvocation member unknown ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown']
copynode -3.176500385743566:  root add ^ IfStatement condition BinaryOperation operator <_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter']
copynode -5.09056068956852:  root add ^ StatementExpression expression MethodInvocation qualifier MathUtils_ter ^ ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'copy-qualifier']
copynode -4.320325194043107:  root add ^ IfStatement condition MemberReference member isZero_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -5.09056068956852:  root add ^ StatementExpression expression MethodInvocation qualifier unknown ^ ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown']
copynode -4.320325194043107:  root add ^ IfStatement condition MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -6.422713190317154:  root modified ^ MemberReference-MemberReference member isZero_ter ^ ^ ^  qualifier unknown ^ ^ member isZero_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'start -> unknown', 'copy-member', 'root -> End']
copynode -5.826311821117997:  root modified ^ ReturnStatement expression MethodInvocation arguments MemberReference ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference']
copynode -4.320325194043107:  root add ^ IfStatement condition MemberReference member NaN_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -2.8345600347965956:  root modified ^ ReturnStatement expression BinaryOperation operator -_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter']
copynode -2.8345600347965956:  root modified ^ ReturnStatement expression BinaryOperation operator *_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter']
copynode -5.904737360775471:  root add ^ StatementExpression expression MemberReference postfix_operators ++_ter ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MemberReference', 'MemberReference -> postfix_operators member', 'postfix_operators -> ++_ter']
copynode -4.281400337815285:  root add ^ StatementExpression expression MethodInvocation arguments Literal ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> Literal']
copynode -6.66608539223671:  root modified ^ MemberReference-MemberReference member isZero_ter ^ ^ ^  qualifier unknown ^ ^ member INF_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'start -> unknown', 'copy-member', 'root -> End']
copynode -6.105702156201005:  root modified ^ ReturnStatement expression MethodInvocation qualifier unknown ^ ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown']
copynode -5.758619084954262:  root add ^ StatementExpression expression MethodInvocation qualifier unknown ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier member', 'start -> unknown']
copynode -2.8345600347965956:  root modified ^ ReturnStatement expression BinaryOperation operator ||_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter']
copynode -6.742086440324783:  root modified ^ MemberReference-MemberReference member INF_ter ^ ^ ^  qualifier unknown ^ ^ member isZero_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'start -> unknown', 'copy-member', 'root -> End']
copynode -4.281400337815285:  root add ^ StatementExpression expression MethodInvocation arguments BinaryOperation ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> BinaryOperation']
copynode -6.812949627637863:  root modified ^ MemberReference-MemberReference member isZero_ter ^ ^ ^  qualifier par0 ^ ^ member unknown ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'start -> unknown', 'root -> End']
copynode -5.945603558793664:  root modified ^ ReturnStatement expression MemberReference member isZero_ter ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -5.945603558793664:  root modified ^ ReturnStatement expression MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -6.908647567033768:  root modified ^ MemberReference-MemberReference member INF_ter ^ ^ ^  qualifier unknown ^ ^ member INF_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'start -> unknown', 'copy-member', 'root -> End']
copynode -5.758619084954262:  root add ^ StatementExpression expression MethodInvocation qualifier MathUtils_ter ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier member', 'copy-qualifier']
copynode -6.960777372121811:  root modified ^ MemberReference-MemberReference member isZero_ter ^ ^ ^  qualifier par0 ^ ^ member isZero_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'root -> End']
copynode -5.904737360775471:  root add ^ StatementExpression expression MemberReference postfix_operators --_ter ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MemberReference', 'MemberReference -> postfix_operators member', 'postfix_operators -> --_ter']
copynode -6.353209251537919:  root modified ^ ReturnStatement expression MethodInvocation qualifier unknown ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier member', 'start -> unknown']
copynode -6.930020987987518:  root modified ^ ReturnStatement expression This selectors MemberReference ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> This', 'This -> selectors', 'selectors -> MemberReference']
copynode -7.066566675901413:  root modified ^ MemberReference-MemberReference member isZero_ter ^ ^ ^  qualifier par0 ^ ^ member INF_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'root -> End']
copynode -2.8345600347965956:  root modified ^ ReturnStatement expression BinaryOperation operator /_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter']
copynode -6.078742532175966:  root add ^ IfStatement condition MethodInvocation qualifier unknown ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier member', 'start -> unknown']
copynode -6.829063192009926:  root add ^ StatementExpression expression SuperMethodInvocation member meth0 ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> SuperMethodInvocation', 'SuperMethodInvocation -> member', 'member -> meth0']
copynode -7.215390115976334:  root modified ^ MemberReference-MemberReference member isZero_ter ^ ^ ^  qualifier unknown ^ ^ member NaN_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'start -> unknown', 'copy-member', 'root -> End']
copynode -7.238567560911179:  root modified ^ MemberReference-MemberReference member INF_ter ^ ^ ^  qualifier par0 ^ ^ member unknown ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'start -> unknown', 'root -> End']
copynode -7.256010264158249:  root modified ^ MemberReference-MemberReference member isZero_ter ^ ^ ^  qualifier par0 ^ ^ member NaN_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'root -> End']
copynode -6.7693269569426775:  root add ^ StatementExpression expression This selectors MemberReference ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> This', 'This -> selectors', 'selectors -> MemberReference']
copynode -7.300398021936417:  root modified ^ MemberReference-MemberReference member INF_ter ^ ^ ^  qualifier unknown ^ ^ member NaN_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'start -> unknown', 'copy-member', 'root -> End']
copynode -6.98105886625126:  root modified ^ ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> Literal', 'Literal -> value', 'value -> null_ter']
copynode -3.176500385743566:  root add ^ IfStatement condition BinaryOperation operator >=_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >=_ter']
copynode -6.688155798357911:  root add ^ IfStatement condition MethodInvocation qualifier unknown ^ ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown']
copynode -1.3563205190002918:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition']
copynode -1.3563205190002918:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation']
copynode -3.6720268055796623:  root modified ^ ReturnStatement expression BinaryOperation operator +_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter']
copynode -1.3563205190002918:  root modified ^ ReturnStatement expression TernaryExpression condition MethodInvocation ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> MethodInvocation']
copynode -1.3563205190002918:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> MemberReference']
copynode -5.046654179692268:  root modified ^ ReturnStatement expression Cast type ReferenceType ^ ^ expression ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> Cast', 'Cast -> type expression', 'type -> ReferenceType']
copynode -4.767890736460686:  root modified ^ ReturnStatement expression MethodInvocation arguments MemberReference ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference']
copynode -5.4892150312662125:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'copy-TernaryExpression', 'root -> End']
copynode -5.597461506724358:  root modified ^ ReturnStatement expression MethodInvocation member unknown ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown']
copynode -4.598488235700643:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter']
copynode -5.190587803721428:  root modified ^ ReturnStatement expression MethodInvocation qualifier unknown ^ ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown']
copynode -5.8151466846466064:  root modified ^ MemberReference-MemberReference member INF_ter ^ ^ ^  qualifier unknown ^ ^ member INF_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'start -> unknown', 'copy-member', 'root -> End']
copynode -3.6720268055796623:  root modified ^ ReturnStatement expression BinaryOperation operator |_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> |_ter']
copynode -5.915459752082825:  root modified ^ MemberReference-MemberReference member INF_ter ^ ^ ^  qualifier unknown ^ ^ member isZero_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'start -> unknown', 'copy-member', 'root -> End']
copynode -5.973786473274231:  root modified ^ MemberReference-MemberReference member INF_ter ^ ^ ^  qualifier unknown ^ ^ member NaN_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'start -> unknown', 'copy-member', 'root -> End']
copynode -3.6720268055796623:  root modified ^ ReturnStatement expression BinaryOperation operator -_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter']
copynode -6.102497198153287:  root add ^ StatementExpression expression Assignment expressionl MemberReference ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference']
copynode -6.166372179985046:  root add ^ StatementExpression expression MethodInvocation member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown']
copynode -5.263556245714426:  root modified ^ ReturnStatement expression MemberReference member isZero_ter ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -3.6720268055796623:  root modified ^ ReturnStatement expression BinaryOperation operator *_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter']
copynode -5.955221178941429:  root modified ^ ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> Literal', 'Literal -> value', 'value -> null_ter']
copynode -4.598488235700643:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter']
copynode -6.2888080830161925:  root add ^ IfStatement condition MethodInvocation member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown']
copynode -4.598488235700643:  root add ^ IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter']
copynode -5.457757771015167:  root add ^ StatementExpression expression MethodInvocation arguments MemberReference ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference']
copynode -5.190587803721428:  root modified ^ ReturnStatement expression MethodInvocation qualifier Double_ter ^ ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'copy-qualifier']
copynode -5.263556245714426:  root modified ^ ReturnStatement expression MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -6.59254564344883:  root modified ^ MemberReference-MemberReference member isZero_ter ^ ^ ^  qualifier unknown ^ ^ member INF_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'start -> unknown', 'copy-member', 'root -> End']
copynode -4.598488235700643:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter']
copynode -6.530140243470669:  root modified ^ ReturnStatement expression This selectors MemberReference ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> This', 'This -> selectors', 'selectors -> MemberReference']
copynode -6.088590428233147:  root modified ^ ReturnStatement expression MethodInvocation qualifier unknown ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier member', 'start -> unknown']
copynode -6.717570319771767:  root modified ^ MemberReference-MemberReference member isZero_ter ^ ^ ^  qualifier unknown ^ ^ member isZero_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'start -> unknown', 'copy-member', 'root -> End']
copynode -3.6720268055796623:  root modified ^ ReturnStatement expression BinaryOperation operator &_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &_ter']
copynode -6.826390281319618:  root modified ^ MemberReference-MemberReference member isZero_ter ^ ^ ^  qualifier unknown ^ ^ member NaN_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'start -> unknown', 'copy-member', 'root -> End']
copynode -5.894806360680377:  root add ^ IfStatement condition MemberReference member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference', 'MemberReference -> member', 'start -> unknown']
copynode -5.263556245714426:  root modified ^ ReturnStatement expression MemberReference member NaN_ter ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -6.9729816670005675:  root add ^ IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> prefix_operators member', 'prefix_operators -> !_ter']
copynode -5.457757771015167:  root add ^ StatementExpression expression MethodInvocation arguments MemberReference member par0 ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> arguments member', 'copy-arguments']
copynode -5.457757771015167:  root add ^ StatementExpression expression MethodInvocation arguments MemberReference member par0 ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> arguments member', 'copy-arguments']
copynode -6.393453478813171:  root add ^ StatementExpression expression MethodInvocation qualifier unknown ^ ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown']
copynode -6.3428421430289745:  root modified ^ MemberReference-MemberReference member INF_ter ^ ^ ^  selectors ArraySelector index Literal ^ ^ ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> selectors member', 'selectors -> ArraySelector', 'ArraySelector -> index', 'index -> Literal']
copynode -4.767890736460686:  root modified ^ ReturnStatement expression MethodInvocation arguments Cast ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> Cast']
copynode -7.223778605461121:  root modified ^ ReturnStatement expression ClassCreator type ReferenceType ^ ^ arguments ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> ClassCreator', 'ClassCreator -> type arguments', 'type -> ReferenceType']
copynode -4.767890736460686:  root modified ^ ReturnStatement expression MethodInvocation arguments MethodInvocation ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MethodInvocation']
copynode -1.3563205190002918:  root modified ^ ReturnStatement expression TernaryExpression condition MethodInvocation prefix_operators !_ter ^ ^ member isInfinite_ter ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition']
copynode -4.767890736460686:  root modified ^ ReturnStatement expression MethodInvocation arguments MemberReference member par0 ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> arguments member', 'copy-arguments']
copynode -4.598488235700643:  root add ^ IfStatement condition BinaryOperation operator <_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter']
copynode -4.767890736460686:  root modified ^ ReturnStatement expression MethodInvocation arguments TernaryExpression ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> TernaryExpression']
copynode -7.3372969180345535:  root modified ^ MemberReference-MemberReference member INF_ter ^ ^ ^  prefix_operators -_ter ^ ^ member isZero_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> prefix_operators member', 'prefix_operators -> -_ter', 'copy-member', 'root -> End']
copynode -6.661494469124591:  root add ^ IfStatement condition MethodInvocation qualifier unknown ^ ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown']
copynode -4.767890736460686:  root modified ^ ReturnStatement expression MethodInvocation arguments MemberReference member par0 ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> arguments member', 'copy-arguments']
copynode -6.393453478813171:  root add ^ StatementExpression expression MethodInvocation qualifier Double_ter ^ ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'copy-qualifier']
copynode -7.402971720177447:  root add ^ IfStatement condition MemberReference prefix_operators !_ter ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference', 'MemberReference -> prefix_operators member', 'prefix_operators -> !_ter']
copynode -3.6720268055796623:  root modified ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter']
copynode -7.462695553898811:  root modified ^ MemberReference-MemberReference member INF_ter ^ ^ ^  prefix_operators -_ter ^ ^ member INF_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> prefix_operators member', 'prefix_operators -> -_ter', 'copy-member', 'root -> End']
copynode -4.598488235700643:  root add ^ IfStatement condition BinaryOperation operator >_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >_ter']
copynode -6.088590428233147:  root modified ^ ReturnStatement expression MethodInvocation qualifier Double_ter ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier member', 'copy-qualifier']
copynode -7.5712561160326:  root modified ^ MemberReference-MemberReference member INF_ter ^ ^ ^  prefix_operators -_ter ^ ^ member NaN_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> prefix_operators member', 'prefix_operators -> -_ter', 'copy-member', 'root -> End']
copynode -7.567873999476433:  root modified ^ ReturnStatement expression BinaryOperation operator /_ter ^ ^ operandl MemberReference member real_ter ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'copy-BinaryOperation', 'root -> End']
copynode -1.3563205190002918:  root modified ^ ReturnStatement expression TernaryExpression condition Cast ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> Cast']
copynode -7.675665900111198:  root modified ^ ReturnStatement expression BinaryOperation operator /_ter ^ ^ operandl MemberReference member imaginary_ter ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'copy-BinaryOperation', 'root -> End']
copynode -5.190587803721428:  root modified ^ ReturnStatement expression MethodInvocation qualifier Double_ter ^ ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'copy-qualifier']
copynode -5.894806360680377:  root add ^ IfStatement condition MemberReference member NaN_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -5.263556245714426:  root modified ^ ReturnStatement expression MemberReference member unknown ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MemberReference', 'MemberReference -> member', 'start -> unknown']
copynode -6.641543602425372:  root add ^ IfStatement condition MethodInvocation qualifier unknown ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier member', 'start -> unknown']
before@6 batch0 x: -7.450781135004945: root add ^ IfStatement condition MethodInvocation qualifier unknown ^ ^ arguments ^ member ^ ^ ^ ^ ^  ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown']
after@6 batch0 x: -7.450781135004945: root add ^ IfStatement condition MethodInvocation qualifier unknown ^ ^ arguments ^ member ^ ^ ^ ^ ^  ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown']
before@6 batch1 x: -7.744623994309222: root add ^ IfStatement condition MethodInvocation qualifier unknown ^ ^ member ^ ^ ^ ^ ^  ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier member', 'start -> unknown']
after@6 batch1 x: -7.744623994309222: root add ^ IfStatement condition MethodInvocation qualifier unknown ^ ^ member ^ ^ ^ ^ ^  ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier member', 'start -> unknown']
copynode -1.9104939168319106:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true']
copynode -2.8789177602156997:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
copynode -1.9104939168319106:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MemberReference']
copynode -1.9104939168319106:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MethodInvocation ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MethodInvocation']
copynode -3.590351341292262:  root modified ^ ReturnStatement expression BinaryOperation operator |_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> |_ter', 'operandl -> MemberReference']
copynode -4.465414209291339:  root add ^ StatementExpression expression MethodInvocation member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown', 'root -> End']
copynode -4.564399785362184:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> MemberReference', 'MemberReference -> member']
copynode -4.514864510041662:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference']
copynode -1.9104939168319106:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true BinaryOperation ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> BinaryOperation']
copynode -4.201111076399684:  root modified ^ ReturnStatement expression BinaryOperation operator +_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> MemberReference']
copynode -4.605682033434277:  root add ^ StatementExpression expression Assignment expressionl MemberReference member ^ ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member']
copynode -4.4766774830641225:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation']
copynode -1.9104939168319106:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true Cast ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> Cast']
copynode -5.073505416512489:  root add ^ StatementExpression expression MethodInvocation arguments MemberReference member ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> member']
copynode -3.590351341292262:  root modified ^ ReturnStatement expression BinaryOperation operator |_ter ^ ^ operandl BinaryOperation ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> |_ter', 'operandl -> BinaryOperation']
copynode -5.322632378083654:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference']
copynode -5.174191890400834:  root add ^ IfStatement condition MemberReference member unknown ^ ^ ^ ^ ^ ReturnStatement ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'root -> ReturnStatement']
copynode -5.0475685046985745:  root modified ^ ReturnStatement expression Cast type ReferenceType name Complex_ter ^ ^ ^ ^ expression ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> Cast', 'Cast -> type expression', 'type -> ReferenceType', 'copy-ReferenceType']
copynode -4.492370671592653:  root modified ^ ReturnStatement expression TernaryExpression condition MethodInvocation member ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> MethodInvocation', 'MethodInvocation -> member']
copynode -1.9104939168319106:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true This ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> This']
copynode -4.9748618063749745:  root add ^ IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> BinaryOperation']
copynode -4.492370671592653:  root modified ^ ReturnStatement expression TernaryExpression condition MethodInvocation qualifier ^ member ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier member']
copynode -1.9104939168319106:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true Literal ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> Literal']
copynode -5.23243367485702:  root modified ^ ReturnStatement expression BinaryOperation operator &_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &_ter', 'operandl -> MemberReference']
copynode -5.855725040659308:  root modified ^ ReturnStatement expression MethodInvocation member unknown ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown', 'root -> End']
copynode -5.7107585817575455:  root add ^ StatementExpression expression MethodInvocation arguments MemberReference member par0 ^ ^ ^ ^ member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> arguments member', 'copy-arguments', 'start -> unknown']
copynode -5.810811710427515:  root add ^ IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> prefix_operators member', 'prefix_operators -> !_ter', 'start -> unknown']
copynode -5.668298745644279:  root add ^ IfStatement condition MethodInvocation member unknown ^ ^ ^ ^ ^ ReturnStatement ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown', 'root -> ReturnStatement']
copynode -4.4766774830641225:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> MemberReference']
copynode -5.732380455476232:  root add ^ IfStatement condition BinaryOperation operator >_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >_ter', 'operandl -> MemberReference']
copynode -4.605682033434277:  root add ^ StatementExpression expression Assignment expressionl MemberReference qualifier ^ member ^ ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> qualifier member']
copynode -5.238052411121316:  root add ^ IfStatement condition MemberReference prefix_operators !_ter ^ ^ member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference', 'MemberReference -> prefix_operators member', 'prefix_operators -> !_ter', 'start -> unknown']
copynode -4.201111076399684:  root modified ^ ReturnStatement expression BinaryOperation operator +_ter ^ ^ operandl BinaryOperation ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> BinaryOperation']
copynode -5.0475685046985745:  root modified ^ ReturnStatement expression Cast type ReferenceType name Complex_ter ^ ^ ^ ^ expression ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> Cast', 'Cast -> type expression', 'type -> ReferenceType', 'copy-ReferenceType']
copynode -3.590351341292262:  root modified ^ ReturnStatement expression BinaryOperation operator |_ter ^ ^ operandl MethodInvocation ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> |_ter', 'operandl -> MethodInvocation']
copynode -4.9748618063749745:  root add ^ IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> MemberReference']
copynode -5.932684486848302:  root add ^ IfStatement condition BinaryOperation operator <_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference']
copynode -5.422670720145106:  root modified ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation']
copynode -3.590351341292262:  root modified ^ ReturnStatement expression BinaryOperation operator |_ter ^ ^ operandl MethodInvocation qualifier par0 ^ ^ member isInfinite_ter ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> |_ter', 'copy-operandl']
copynode -5.997492728871293:  root add ^ IfStatement condition MemberReference member isZero_ter ^ ^ ^ ^ ^ ReturnStatement ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference', 'MemberReference -> member', 'copy-member', 'root -> ReturnStatement']
copynode -4.492370671592653:  root modified ^ ReturnStatement expression TernaryExpression condition MethodInvocation qualifier ^ arguments ^ member ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier arguments member']
copynode -6.460188025608659:  root modified ^ ReturnStatement expression MethodInvocation arguments MemberReference member ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> member']
copynode -6.212342320126481:  root add ^ IfStatement condition MemberReference member INF_ter ^ ^ ^ ^ ^ ReturnStatement ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference', 'MemberReference -> member', 'copy-member', 'root -> ReturnStatement']
copynode -5.422670720145106:  root modified ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> MemberReference']
copynode -6.650464907288551:  root add ^ StatementExpression expression MethodInvocation arguments Literal value ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> Literal', 'Literal -> value']
copynode -4.201111076399684:  root modified ^ ReturnStatement expression BinaryOperation operator +_ter ^ ^ operandl MethodInvocation ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> MethodInvocation']
copynode -6.129467740654945:  root add ^ StatementExpression expression MethodInvocation qualifier unknown ^ ^ arguments MemberReference ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown', 'arguments -> MemberReference']
copynode -6.488568363827653:  root add ^ IfStatement condition MemberReference member NaN_ter ^ ^ ^ ^ ^ ReturnStatement ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference', 'MemberReference -> member', 'copy-member', 'root -> ReturnStatement']
copynode -6.87473494745791:  root modified ^ ReturnStatement expression MemberReference member isZero_ter ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MemberReference', 'MemberReference -> member', 'copy-member', 'root -> End']
copynode -4.201111076399684:  root modified ^ ReturnStatement expression BinaryOperation operator +_ter ^ ^ operandl MethodInvocation qualifier par0 ^ ^ member isInfinite_ter ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'copy-operandl']
copynode -6.906120369210839:  root modified ^ ReturnStatement expression MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MemberReference', 'MemberReference -> member', 'copy-member', 'root -> End']
copynode -3.590351341292262:  root modified ^ ReturnStatement expression BinaryOperation operator |_ter ^ ^ operandl Cast ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> |_ter', 'operandl -> Cast']
copynode -4.4766774830641225:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> MethodInvocation']
copynode -5.238052411121316:  root add ^ IfStatement condition MemberReference prefix_operators !_ter ^ ^ member isZero_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference', 'MemberReference -> prefix_operators member', 'prefix_operators -> !_ter', 'copy-member']
copynode -7.05683171749115:  root modified ^ ReturnStatement expression This selectors MemberReference member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> This', 'This -> selectors', 'selectors -> MemberReference', 'MemberReference -> member']
copynode -6.523104069754481:  root modified ^ ReturnStatement expression BinaryOperation operator -_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference']
copynode -6.933356419205666:  root add ^ StatementExpression expression MethodInvocation qualifier MathUtils_ter ^ ^ member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier member', 'copy-qualifier', 'start -> unknown']
copynode -1.9104939168319106:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true ClassCreator ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> ClassCreator']
copynode -1.6605919487774372:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true']
copynode -1.6605919487774372:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MethodInvocation ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MethodInvocation']
copynode -1.6605919487774372:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MemberReference']
copynode -3.1268820948898792:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
copynode -1.6605919487774372:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true Cast ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> Cast']
copynode -4.707353014498949:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> MemberReference', 'MemberReference -> member']
copynode -4.229576401412487:  root modified ^ ReturnStatement expression BinaryOperation operator +_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> MemberReference']
copynode -5.0555093344300985:  root modified ^ ReturnStatement expression Cast type ReferenceType name Complex_ter ^ ^ ^ ^ expression ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> Cast', 'Cast -> type expression', 'type -> ReferenceType', 'copy-ReferenceType']
copynode -1.6605919487774372:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true BinaryOperation ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> BinaryOperation']
copynode -1.6605919487774372:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true This ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> This']
copynode -5.485007390379906:  root modified ^ ReturnStatement expression MethodInvocation arguments MemberReference member ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> member']
copynode -4.407792467623949:  root modified ^ ReturnStatement expression TernaryExpression condition MethodInvocation member ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> MethodInvocation', 'MethodInvocation -> member']
copynode -1.6605919487774372:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true Literal ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> Literal']
copynode -5.648149035871029:  root modified ^ ReturnStatement expression MethodInvocation member unknown ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown', 'root -> End']
copynode -4.407792467623949:  root modified ^ ReturnStatement expression TernaryExpression condition MethodInvocation qualifier ^ member ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier member']
copynode -5.676402831304586:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference']
copynode -4.407792467623949:  root modified ^ ReturnStatement expression TernaryExpression condition MethodInvocation qualifier ^ arguments ^ member ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier arguments member']
copynode -6.1529595223255455:  root add ^ StatementExpression expression Assignment expressionl MemberReference member ^ ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member']
copynode -6.2022826708853245:  root modified ^ ReturnStatement expression MemberReference member isZero_ter ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MemberReference', 'MemberReference -> member', 'copy-member', 'root -> End']
copynode -1.6605919487774372:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true This_ter ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> This_ter']
copynode -6.190532406792045:  root add ^ StatementExpression expression MethodInvocation member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown', 'root -> End']
copynode -6.246620806865394:  root modified ^ ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> End']
copynode -4.229576401412487:  root modified ^ ReturnStatement expression BinaryOperation operator +_ter ^ ^ operandl MethodInvocation ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> MethodInvocation']
copynode -4.229576401412487:  root modified ^ ReturnStatement expression BinaryOperation operator +_ter ^ ^ operandl BinaryOperation ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> BinaryOperation']
copynode -6.379504144191742:  root add ^ StatementExpression expression MethodInvocation arguments MemberReference member ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> member']
copynode -5.820554904639721:  root modified ^ ReturnStatement expression BinaryOperation operator |_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> |_ter', 'operandl -> MemberReference']
copynode -6.342797143239295:  root add ^ IfStatement condition MethodInvocation member unknown ^ ^ ^ ^ ^ ReturnStatement ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown', 'root -> ReturnStatement']
copynode -6.0201741978526115:  root modified ^ ReturnStatement expression BinaryOperation operator -_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference']
copynode -6.585341218858957:  root modified ^ ReturnStatement expression MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MemberReference', 'MemberReference -> member', 'copy-member', 'root -> End']
copynode -4.407792467623949:  root modified ^ ReturnStatement expression TernaryExpression condition MethodInvocation arguments ^ member ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> MethodInvocation', 'MethodInvocation -> arguments member']
copynode -6.674385376274586:  root modified ^ ReturnStatement expression This selectors MemberReference member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> This', 'This -> selectors', 'selectors -> MemberReference', 'MemberReference -> member']
copynode -5.751846298575401:  root modified ^ ReturnStatement expression MethodInvocation qualifier unknown ^ ^ arguments MemberReference ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown', 'arguments -> MemberReference']
copynode -6.2068807408213615:  root modified ^ ReturnStatement expression BinaryOperation operator *_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> MemberReference']
copynode -1.6605919487774372:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member ZERO_ter ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true']
copynode -6.626466655958211:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference']
copynode -6.270761156309163:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation']
copynode -1.6605919487774372:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true ClassCreator ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> ClassCreator']
copynode -6.876251939684153:  root modified ^ ReturnStatement expression MemberReference member NaN_ter ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MemberReference', 'MemberReference -> member', 'copy-member', 'root -> End']
copynode -3.1268820948898792:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator /_ter ^ ^ operandl MemberReference member real_ter ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'copy-BinaryOperation']
copynode -6.980209996312624:  root add ^ IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> prefix_operators member', 'prefix_operators -> !_ter', 'start -> unknown']
copynode -6.345933699834859:  root add ^ IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> BinaryOperation']
copynode -4.229576401412487:  root modified ^ ReturnStatement expression BinaryOperation operator +_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'copy-operandl']
copynode -6.847401773411548:  root add ^ IfStatement condition MemberReference member unknown ^ ^ ^ ^ ^ ReturnStatement ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'root -> ReturnStatement']
copynode -7.022435247898102:  root add ^ StatementExpression expression MethodInvocation arguments MemberReference member par0 ^ ^ ^ ^ member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> arguments member', 'copy-arguments', 'start -> unknown']
copynode -7.178682964295149:  root modified ^ MemberReference-MemberReference member INF_ter ^ ^ ^  selectors ArraySelector index Literal value ^ ^ ^ ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> selectors member', 'selectors -> ArraySelector', 'ArraySelector -> index', 'index -> Literal', 'Literal -> value']
copynode -3.1268820948898792:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator /_ter ^ ^ operandl MemberReference member imaginary_ter ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'copy-BinaryOperation']
copynode -7.092293679714203:  root add ^ StatementExpression expression MethodInvocation arguments MemberReference member par0 ^ ^ ^ ^ member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> arguments member', 'copy-arguments', 'start -> unknown']
copynode -7.224782792036422:  root modified ^ ReturnStatement expression ClassCreator type ReferenceType name Complex_ter ^ ^ ^ ^ arguments ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> ClassCreator', 'ClassCreator -> type arguments', 'type -> ReferenceType', 'copy-ReferenceType']
copynode -6.728666476905346:  root modified ^ ReturnStatement expression BinaryOperation operator &_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &_ter', 'operandl -> MemberReference']
copynode -6.429598614573479:  root modified ^ ReturnStatement expression MethodInvocation qualifier Double_ter ^ ^ arguments MemberReference ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'copy-qualifier', 'arguments -> MemberReference']
copynode -7.300046011805534:  root modified ^ ReturnStatement expression MethodInvocation arguments TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> TernaryExpression', 'copy-TernaryExpression']
copynode -7.276744648814201:  root modified ^ ReturnStatement expression MethodInvocation arguments MemberReference member par0 ^ ^ ^ ^ member unknown ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> arguments member', 'copy-arguments', 'start -> unknown']
copynode -6.345933699834859:  root add ^ IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> MemberReference']
copynode -7.298787975538289:  root add ^ IfStatement condition BinaryOperation operator <_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference']
copynode -7.389319941401482:  root modified ^ ReturnStatement expression MethodInvocation arguments MemberReference member par0 ^ ^ ^ ^ member unknown ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> arguments member', 'copy-arguments', 'start -> unknown']
before@7 batch0 x: -7.12297064717859: root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true ClassCreator ^ ^ if_false ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> ClassCreator']
after@7 batch0 x: -7.12297064717859: root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true ClassCreator ^ ^ if_false ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> ClassCreator']
before@7 batch1 x: -7.579927541315556: root modified ^ ReturnStatement expression BinaryOperation operator /_ter ^ ^ operandl MemberReference member real_ter ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'copy-BinaryOperation', 'root -> End']
after@7 batch1 x: -7.579927541315556: root modified ^ ReturnStatement expression BinaryOperation operator /_ter ^ ^ operandl MemberReference member real_ter ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'copy-BinaryOperation', 'root -> End']
copynode -3.3738290732726455:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MemberReference', 'MemberReference -> member']
copynode -2.966223648749292:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator &&_ter ^ ^ operandl ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter']
copynode -4.190123138949275:  root modified ^ ReturnStatement expression BinaryOperation operator |_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> |_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -2.878558105789125:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression']
copynode -2.966223648749292:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter']
copynode -2.878558105789125:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false BinaryOperation ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> BinaryOperation']
copynode -2.878558105789125:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MethodInvocation ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> MethodInvocation']
copynode -3.4566232627257705:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MethodInvocation member ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MethodInvocation', 'MethodInvocation -> member']
copynode -4.680873071891256:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -2.966223648749292:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ||_ter ^ ^ operandl ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter']
copynode -4.769924229942262:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
copynode -4.797793565317988:  root modified ^ ReturnStatement expression BinaryOperation operator +_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -3.4566232627257705:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MethodInvocation qualifier ^ member ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MethodInvocation', 'MethodInvocation -> qualifier member']
copynode -3.4566232627257705:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MethodInvocation arguments ^ member ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MethodInvocation', 'MethodInvocation -> arguments member']
copynode -4.999877279740758:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
copynode -5.070282286964357:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true Cast type ^ expression ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> Cast', 'Cast -> type expression']
copynode -2.966223648749292:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator !=_ter ^ ^ operandl ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter']
copynode -3.4566232627257705:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MethodInvocation qualifier ^ arguments ^ member ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MethodInvocation', 'MethodInvocation -> qualifier arguments member']
copynode -2.878558105789125:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'copy-if_false']
copynode -5.460714003187604:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -5.548542088828981:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true This selectors ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> This', 'This -> selectors']
copynode -2.878558105789125:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false This ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> This']
copynode -2.878558105789125:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> MemberReference']
copynode -5.5375582640990615:  root modified ^ ReturnStatement expression TernaryExpression condition MethodInvocation member unknown ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown']
copynode -5.690921849571168:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true Literal value ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> Literal', 'Literal -> value']
copynode -2.966223648749292:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator >_ter ^ ^ operandl ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >_ter']
copynode -5.629219418508001:  root add ^ IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
copynode -5.780283210799098:  root modified ^ ReturnStatement expression BinaryOperation operator &_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -5.416405318304896:  root modified ^ ReturnStatement expression BinaryOperation operator |_ter ^ ^ operandl BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> |_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
copynode -2.878558105789125:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false Cast ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> Cast']
copynode -4.611183675937355:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -5.859540835022926:  root add ^ StatementExpression expression MethodInvocation arguments MemberReference member par0 ^ ^ ^ ^ member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> arguments member', 'copy-arguments', 'start -> unknown', 'root -> End']
copynode -4.611183675937355:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member INF_ter ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -5.971201932174154:  root add ^ IfStatement condition BinaryOperation operator >_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -5.486833838862367:  root add ^ IfStatement condition MemberReference member unknown ^ ^ ^ ^ ^ ReturnStatement expression ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'root -> ReturnStatement', 'ReturnStatement -> expression']
copynode -6.0448841036704835:  root add ^ StatementExpression expression Assignment expressionl MemberReference qualifier par0 ^ ^ member ^ ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0']
copynode -3.3738290732726455:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference qualifier ^ member ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MemberReference', 'MemberReference -> qualifier member']
copynode -4.611183675937355:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member unknown ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> MemberReference', 'MemberReference -> member', 'start -> unknown']
copynode -5.88642184890341:  root add ^ IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ member unknown ^ ^ ^ ^ ^ ReturnStatement ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> prefix_operators member', 'prefix_operators -> !_ter', 'start -> unknown', 'root -> ReturnStatement']
copynode -6.189441477996297:  root add ^ IfStatement condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -4.611183675937355:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member NaN_ter ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -5.507345442660153:  root modified ^ ReturnStatement expression Cast type ReferenceType name Complex_ter ^ ^ ^ ^ expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> Cast', 'Cast -> type expression', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-expression']
copynode -2.966223648749292:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator <_ter ^ ^ operandl ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter']
copynode -6.118066189810634:  root modified ^ ReturnStatement expression BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
copynode -4.894417274132138:  root add ^ StatementExpression expression Assignment expressionl MemberReference member unknown ^ ^ ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'start -> unknown']
copynode -5.1578777730464935:  root add ^ StatementExpression expression MethodInvocation arguments MemberReference member par0 ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par0']
copynode -5.911647146684118:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -5.686970419250429:  root modified ^ ReturnStatement expression TernaryExpression condition MethodInvocation qualifier unknown ^ ^ member ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier member', 'start -> unknown']
copynode -4.894417274132138:  root add ^ StatementExpression expression Assignment expressionl MemberReference member isZero_ter ^ ^ ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -4.894417274132138:  root add ^ StatementExpression expression Assignment expressionl MemberReference member INF_ter ^ ^ ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -6.16432411049027:  root add ^ IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -5.893645474803634:  root add ^ IfStatement condition MethodInvocation member unknown ^ ^ ^ ^ ^ ReturnStatement expression ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown', 'root -> ReturnStatement', 'ReturnStatement -> expression']
copynode -5.1578777730464935:  root add ^ StatementExpression expression MethodInvocation arguments MemberReference member isZero_ter ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -6.087219638866372:  root add ^ IfStatement condition MemberReference prefix_operators !_ter ^ ^ member unknown ^ ^ ^ ^ ^ ReturnStatement ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference', 'MemberReference -> prefix_operators member', 'prefix_operators -> !_ter', 'start -> unknown', 'root -> ReturnStatement']
copynode -4.894417274132138:  root add ^ StatementExpression expression Assignment expressionl MemberReference member NaN_ter ^ ^ ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -6.259282110258937:  root modified ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
copynode -6.644469378516078:  root modified ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -5.1578777730464935:  root add ^ StatementExpression expression MethodInvocation arguments MemberReference member INF_ter ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -6.304474113509059:  root modified ^ ReturnStatement expression BinaryOperation operator |_ter ^ ^ operandl MethodInvocation qualifier par0 ^ ^ member isInfinite_ter ^ ^ ^ ^ operandr TernaryExpression ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> |_ter', 'copy-operandl', 'operandr -> TernaryExpression']
copynode -6.130888168700039:  root modified ^ ReturnStatement expression Cast type ReferenceType name Complex_ter ^ ^ ^ ^ expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> Cast', 'Cast -> type expression', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-expression']
copynode -3.083370316773653:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MemberReference', 'MemberReference -> member']
copynode -2.9800835736095905:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MethodInvocation member ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MethodInvocation', 'MethodInvocation -> member']
copynode -2.8047890551388264:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MethodInvocation ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> MethodInvocation']
copynode -2.8047890551388264:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression']
copynode -3.176203493028879:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter']
copynode -2.9800835736095905:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MethodInvocation qualifier ^ arguments ^ member ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MethodInvocation', 'MethodInvocation -> qualifier arguments member']
copynode -2.9800835736095905:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MethodInvocation qualifier ^ member ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MethodInvocation', 'MethodInvocation -> qualifier member']
copynode -2.9800835736095905:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MethodInvocation arguments ^ member ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MethodInvocation', 'MethodInvocation -> arguments member']
copynode -3.176203493028879:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator &&_ter ^ ^ operandl ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter']
copynode -2.8047890551388264:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false BinaryOperation ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> BinaryOperation']
copynode -4.822524957358837:  root modified ^ ReturnStatement expression BinaryOperation operator +_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -4.530929673463106:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true Cast type ^ expression ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> Cast', 'Cast -> type expression']
copynode -2.8047890551388264:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> MemberReference']
copynode -3.176203493028879:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ||_ter ^ ^ operandl ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter']
copynode -2.8047890551388264:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'copy-if_false']
copynode -5.265516389161348:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
copynode -3.176203493028879:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator !=_ter ^ ^ operandl ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter']
copynode -5.355958808213472:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true This selectors ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> This', 'This -> selectors']
copynode -2.8047890551388264:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false This ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> This']
copynode -5.505898971110582:  root modified ^ ReturnStatement expression TernaryExpression condition MethodInvocation member unknown ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown']
copynode -5.631025422364473:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true Literal value ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> Literal', 'Literal -> value']
copynode -2.8047890551388264:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false Cast ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> Cast']
copynode -5.86654275082401:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -5.071467703208327:  root modified ^ ReturnStatement expression Cast type ReferenceType name Complex_ter ^ ^ ^ ^ expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> Cast', 'Cast -> type expression', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-expression']
copynode -3.176203493028879:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator >_ter ^ ^ operandl ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >_ter']
copynode -4.740249734371901:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -3.083370316773653:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference qualifier ^ member ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MemberReference', 'MemberReference -> qualifier member']
copynode -3.176203493028879:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator <_ter ^ ^ operandl ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter']
copynode -4.740249734371901:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member NaN_ter ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -4.740249734371901:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member INF_ter ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -5.49620465002954:  root modified ^ ReturnStatement expression MethodInvocation arguments MemberReference member isZero_ter ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -5.870612878352404:  root modified ^ ReturnStatement expression TernaryExpression condition MethodInvocation qualifier unknown ^ ^ arguments ^ member ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown']
copynode -6.411098890006542:  root modified ^ ReturnStatement expression BinaryOperation operator |_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> |_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -4.740249734371901:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member unknown ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> MemberReference', 'MemberReference -> member', 'start -> unknown']
copynode -5.071467703208327:  root modified ^ ReturnStatement expression Cast type ReferenceType name Complex_ter ^ ^ ^ ^ expression MemberReference ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> Cast', 'Cast -> type expression', 'type -> ReferenceType', 'copy-ReferenceType', 'expression -> MemberReference']
copynode -2.8047890551388264:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false Literal ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> Literal']
copynode -6.567529611289501:  root modified ^ ReturnStatement expression BinaryOperation operator -_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -6.332479529082775:  root modified ^ ReturnStatement expression BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
copynode -5.49620465002954:  root modified ^ ReturnStatement expression MethodInvocation arguments MemberReference member INF_ter ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -6.750187084078789:  root modified ^ ReturnStatement expression MethodInvocation qualifier unknown ^ ^ arguments MemberReference member ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown', 'arguments -> MemberReference', 'MemberReference -> member']
copynode -6.763304941356182:  root modified ^ ReturnStatement expression BinaryOperation operator *_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -6.7888082953577396:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -5.842187542468309:  root modified ^ ReturnStatement expression TernaryExpression condition MethodInvocation qualifier unknown ^ ^ member ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier member', 'start -> unknown']
copynode -2.8047890551388264:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false ClassCreator ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> ClassCreator']
copynode -5.071467703208327:  root modified ^ ReturnStatement expression Cast type ReferenceType name Complex_ter ^ ^ ^ ^ expression MethodInvocation ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> Cast', 'Cast -> type expression', 'type -> ReferenceType', 'copy-ReferenceType', 'expression -> MethodInvocation']
copynode -5.842187542468309:  root modified ^ ReturnStatement expression TernaryExpression condition MethodInvocation qualifier Double_ter ^ ^ member ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier member', 'copy-qualifier']
copynode -5.49620465002954:  root modified ^ ReturnStatement expression MethodInvocation arguments MemberReference member NaN_ter ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -2.9800835736095905:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MethodInvocation selectors ^ member ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MethodInvocation', 'MethodInvocation -> selectors member']
copynode -6.811233961809194:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
copynode -3.176203493028879:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator >=_ter ^ ^ operandl ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >=_ter']
copynode -5.870612878352404:  root modified ^ ReturnStatement expression TernaryExpression condition MethodInvocation qualifier Double_ter ^ ^ arguments ^ member ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'copy-qualifier']
copynode -6.515414086956298:  root add ^ IfStatement condition MethodInvocation member unknown ^ ^ ^ ^ ^ ReturnStatement expression ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown', 'root -> ReturnStatement', 'ReturnStatement -> expression']
copynode -7.149049028754234:  root add ^ StatementExpression expression MethodInvocation arguments MemberReference member par0 ^ ^ ^ ^ member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> arguments member', 'copy-arguments', 'start -> unknown', 'root -> End']
before@8 batch0 x: -6.8729456113651395: root modified ^ ReturnStatement expression Cast type ReferenceType name Complex_ter ^ ^ ^ ^ expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> Cast', 'Cast -> type expression', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-expression']
after@8 batch0 x: -6.8729456113651395: root modified ^ ReturnStatement expression Cast type ReferenceType name Complex_ter ^ ^ ^ ^ expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> Cast', 'Cast -> type expression', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-expression']
before@8 batch1 x: -7.218186303973198: root add ^ StatementExpression expression MethodInvocation arguments MemberReference member par0 ^ ^ ^ ^ member unknown ^ ^ ^ ^ ^ ^  ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> arguments member', 'copy-arguments', 'start -> unknown', 'root -> End']
after@8 batch1 x: -7.218186303973198: root add ^ StatementExpression expression MethodInvocation arguments MemberReference member par0 ^ ^ ^ ^ member unknown ^ ^ ^ ^ ^ ^  ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> arguments member', 'copy-arguments', 'start -> unknown', 'root -> End']
copynode -4.277636951766908:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false']
copynode -4.347392505966127:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
copynode -4.339966944418848:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference']
copynode -4.038969925604761:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> MemberReference']
copynode -3.460668004117906:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member isZero_ter ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -4.505399531684816:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MethodInvocation member unknown ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown']
copynode -3.460668004117906:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member INF_ter ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -3.460668004117906:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -5.172477803193033:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true Cast type ReferenceType ^ ^ expression ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> Cast', 'Cast -> type expression', 'type -> ReferenceType']
copynode -4.7743902718648314:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ||_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> MemberReference']
copynode -4.211251404136419:  root modified ^ ReturnStatement expression BinaryOperation operator |_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> |_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -4.211251404136419:  root modified ^ ReturnStatement expression BinaryOperation operator |_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> |_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -5.232339075766504:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference']
copynode -4.038969925604761:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation ^ ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation']
copynode -5.474956220947206:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'copy-if_false', 'root -> End']
copynode -4.396216697059572:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MethodInvocation member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> MethodInvocation', 'MethodInvocation -> member']
copynode -3.460668004117906:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member unknown ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MemberReference', 'MemberReference -> member', 'start -> unknown']
copynode -5.113355583511293:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MethodInvocation arguments MemberReference ^ ^ member ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference']
copynode -5.578854984603822:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false This selectors ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> This', 'This -> selectors']
copynode -4.80642222892493:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true BinaryOperation operator +_ter ^ ^ operandl ^ operandr ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter']
copynode -4.211251404136419:  root modified ^ ReturnStatement expression BinaryOperation operator |_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> |_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -5.57745158020407:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true This selectors MemberReference ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> This', 'This -> selectors', 'selectors -> MemberReference']
copynode -5.607737964950502:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> MemberReference', 'MemberReference -> member']
copynode -4.968810982070863:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MethodInvocation qualifier unknown ^ ^ member ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MethodInvocation', 'MethodInvocation -> qualifier member', 'start -> unknown']
copynode -5.708434757776558:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true Literal value null_ter ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> Literal', 'Literal -> value', 'value -> null_ter']
copynode -4.720183583092876:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -5.64012850727886:  root modified ^ ReturnStatement expression TernaryExpression condition MethodInvocation member unknown ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown', 'copy-if_true']
copynode -4.816557168960571:  root modified ^ ReturnStatement expression BinaryOperation operator +_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -4.396216697059572:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MethodInvocation qualifier ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> MethodInvocation', 'MethodInvocation -> qualifier member']
copynode -4.816557168960571:  root modified ^ ReturnStatement expression BinaryOperation operator +_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -4.396216697059572:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MethodInvocation arguments ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> MethodInvocation', 'MethodInvocation -> arguments member']
copynode -5.7545174872502685:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator >_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >_ter', 'operandl -> MemberReference']
copynode -5.451452082954347:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MethodInvocation qualifier unknown ^ ^ arguments ^ member ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown']
copynode -4.720183583092876:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -5.884301609359682:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false Cast type ^ expression ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> Cast', 'Cast -> type expression']
copynode -5.164325287682004:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter']
copynode -4.816557168960571:  root modified ^ ReturnStatement expression BinaryOperation operator +_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -6.336368505842984:  root modified ^ ReturnStatement expression Cast type ReferenceType name Complex_ter ^ ^ ^ ^ expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> Cast', 'Cast -> type expression', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-expression', 'root -> End']
copynode -4.396216697059572:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MethodInvocation qualifier ^ arguments ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> MethodInvocation', 'MethodInvocation -> qualifier arguments member']
copynode -4.720183583092876:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -4.7743902718648314:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation ^ ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> BinaryOperation']
copynode -6.150947603397071:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member unknown ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'copy-if_true']
copynode -5.927503260783851:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member INF_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-if_true']
copynode -5.895289930514991:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-if_true']
copynode -6.358163050375879:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator <_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference']
copynode -5.490519710001536:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -4.038969925604761:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation ^ ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> MethodInvocation']
copynode -6.131941098108655:  root add ^ StatementExpression expression Assignment expressionl MemberReference qualifier par0 ^ ^ member unknown ^ ^ ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'start -> unknown']
copynode -5.8055897038429976:  root modified ^ ReturnStatement expression BinaryOperation operator |_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> |_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter']
copynode -6.450272649526596:  root add ^ StatementExpression expression MethodInvocation arguments MemberReference member par0 ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par0', 'arguments -> End']
copynode -4.80642222892493:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true BinaryOperation operator -_ter ^ ^ operandl ^ operandr ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter']
copynode -5.490519710001536:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -6.284351143054664:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member NaN_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-if_true']
copynode -5.778349360567518:  root add ^ IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter']
copynode -5.164325287682004:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter']
copynode -6.142514652572572:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference qualifier unknown ^ ^ member ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MemberReference', 'MemberReference -> qualifier member', 'start -> unknown']
copynode -4.968810982070863:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MethodInvocation qualifier FastMath_ter ^ ^ member ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MethodInvocation', 'MethodInvocation -> qualifier member', 'copy-qualifier']
copynode -6.201821316848509:  root add ^ IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ member unknown ^ ^ ^ ^ ^ ReturnStatement expression ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> prefix_operators member', 'prefix_operators -> !_ter', 'start -> unknown', 'root -> ReturnStatement', 'ReturnStatement -> expression']
copynode -5.801282789558172:  root modified ^ ReturnStatement expression BinaryOperation operator &_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -4.292453873902559:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false']
copynode -4.203839290887117:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MethodInvocation member unknown ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown']
copynode -3.136222843080759:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member isZero_ter ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -3.136222843080759:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -4.305577520281076:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference']
copynode -3.136222843080759:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member INF_ter ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -4.8616981990635395:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true Cast type ReferenceType ^ ^ expression ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> Cast', 'Cast -> type expression', 'type -> ReferenceType']
copynode -4.8224754221737385:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
copynode -4.946842182427645:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> MemberReference', 'MemberReference -> member']
copynode -4.524949062615633:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MethodInvocation qualifier unknown ^ ^ arguments ^ member ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown']
copynode -5.080105770379305:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'copy-if_false', 'root -> End']
copynode -4.550177562981844:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MethodInvocation arguments MemberReference ^ ^ member ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference']
copynode -3.136222843080759:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member unknown ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MemberReference', 'MemberReference -> member', 'start -> unknown']
copynode -4.541266430169344:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MethodInvocation qualifier unknown ^ ^ member ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MethodInvocation', 'MethodInvocation -> qualifier member', 'start -> unknown']
copynode -4.599826220422983:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> MemberReference']
copynode -5.320159200578928:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference']
copynode -4.599826220422983:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation ^ ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation']
copynode -5.427911330014467:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true This selectors MemberReference ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> This', 'This -> selectors', 'selectors -> MemberReference']
copynode -4.225141514092684:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MethodInvocation member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> MethodInvocation', 'MethodInvocation -> member']
copynode -4.541266430169344:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MethodInvocation qualifier Double_ter ^ ^ member ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MethodInvocation', 'MethodInvocation -> qualifier member', 'copy-qualifier']
copynode -5.499929416924715:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false This selectors ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> This', 'This -> selectors']
copynode -5.075089816004038:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ||_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> MemberReference']
copynode -4.225141514092684:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MethodInvocation arguments ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> MethodInvocation', 'MethodInvocation -> arguments member']
copynode -4.225141514092684:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MethodInvocation qualifier ^ arguments ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> MethodInvocation', 'MethodInvocation -> qualifier arguments member']
copynode -4.524949062615633:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MethodInvocation qualifier Double_ter ^ ^ arguments ^ member ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'copy-qualifier']
copynode -5.670404434204102:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true Literal value null_ter ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> Literal', 'Literal -> value', 'value -> null_ter']
copynode -4.225141514092684:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MethodInvocation qualifier ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> MethodInvocation', 'MethodInvocation -> qualifier member']
copynode -5.610721427947283:  root modified ^ ReturnStatement expression TernaryExpression condition MethodInvocation member unknown ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown', 'copy-if_true']
copynode -4.835710219107568:  root modified ^ ReturnStatement expression BinaryOperation operator +_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -3.136222843080759:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member par0 ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MemberReference', 'MemberReference -> member', 'member -> par0']
copynode -5.881953304633498:  root modified ^ ReturnStatement expression Cast type ReferenceType name Complex_ter ^ ^ ^ ^ expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> Cast', 'Cast -> type expression', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-expression', 'root -> End']
copynode -4.550177562981844:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MethodInvocation arguments MemberReference member par0 ^ ^ ^ ^ member ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MethodInvocation', 'MethodInvocation -> arguments member', 'copy-arguments']
copynode -4.835710219107568:  root modified ^ ReturnStatement expression BinaryOperation operator +_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -5.885413412004709:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator >_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >_ter', 'operandl -> MemberReference']
copynode -5.750497806817293:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false Cast type ^ expression ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> Cast', 'Cast -> type expression']
copynode -4.835710219107568:  root modified ^ ReturnStatement expression BinaryOperation operator +_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -5.307591073215008:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true BinaryOperation operator +_ter ^ ^ operandl ^ operandr ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter']
copynode -5.075089816004038:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation ^ ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> BinaryOperation']
copynode -6.176644567400217:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator <_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference']
copynode -5.974275570362806:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-if_true']
copynode -6.518441146239638:  root modified ^ ReturnStatement expression Cast type ReferenceType name Complex_ter ^ ^ ^ ^ expression MemberReference member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> Cast', 'Cast -> type expression', 'type -> ReferenceType', 'copy-ReferenceType', 'expression -> MemberReference', 'MemberReference -> member']
copynode -6.53169821575284:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false Literal value ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> Literal', 'Literal -> value']
copynode -4.550177562981844:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MethodInvocation arguments MemberReference member par0 ^ ^ ^ ^ member ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MethodInvocation', 'MethodInvocation -> arguments member', 'copy-arguments']
copynode -6.218055706471205:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member NaN_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-if_true']
copynode -6.261161666363478:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member INF_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-if_true']
copynode -6.4960173182189465:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member unknown ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'copy-if_true']
copynode -6.161878693848848:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference qualifier unknown ^ ^ member ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MemberReference', 'MemberReference -> qualifier member', 'start -> unknown']
copynode -6.404359478503466:  root modified ^ ReturnStatement expression TernaryExpression condition MethodInvocation qualifier unknown ^ ^ arguments MemberReference ^ ^ member ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown', 'arguments -> MemberReference']
copynode -6.366257822141051:  root modified ^ ReturnStatement expression MethodInvocation arguments MemberReference member isZero_ter ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> member', 'copy-member', 'arguments -> End']
copynode -4.541266430169344:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MethodInvocation qualifier par0 ^ ^ member ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> par0']
copynode -4.305577520281076:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation ^ ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MethodInvocation']
copynode -4.541266430169344:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MethodInvocation qualifier Double_ter ^ ^ member ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MethodInvocation', 'MethodInvocation -> qualifier member', 'copy-qualifier']
copynode -5.880431083816802:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member']
before@9 batch0 x: -6.853917386382818: root modified ^ ReturnStatement expression BinaryOperation operator &_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member']
after@9 batch0 x: -6.853917386382818: root modified ^ ReturnStatement expression BinaryOperation operator &_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member']
before@9 batch1 x: -7.16599133409909: root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr ^ ^ ^ ^ ^  ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member']
after@9 batch1 x: -7.16599133409909: root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr ^ ^ ^ ^ ^  ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -4.5149155324324965:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -4.570963553152978:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -4.282637627795339:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation']
copynode -5.223594537936151:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ||_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -4.649729228578508:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MethodInvocation member unknown ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown', 'copy-if_false']
copynode -5.348031564615667:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -4.282637627795339:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition']
copynode -4.406796614639461:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false BinaryOperation operator +_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter']
copynode -5.575110859237611:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MethodInvocation arguments MemberReference member ^ ^ ^ member ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> member']
copynode -4.406796614639461:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false BinaryOperation operator -_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter']
copynode -5.672485009767115:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true This selectors MemberReference member ^ ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> This', 'This -> selectors', 'selectors -> MemberReference', 'MemberReference -> member']
copynode -5.5231141513213515:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MethodInvocation member unknown ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown']
copynode -5.627910601906478:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false This selectors MemberReference ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> This', 'This -> selectors', 'selectors -> MemberReference']
copynode -5.183139595203102:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true Cast type ReferenceType name Complex_ter ^ ^ ^ ^ expression ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> Cast', 'Cast -> type expression', 'type -> ReferenceType', 'copy-ReferenceType']
copynode -5.432173422537744:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
copynode -5.9669395899400115:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator >_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -5.183139595203102:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true Cast type ReferenceType name Complex_ter ^ ^ ^ ^ expression ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> Cast', 'Cast -> type expression', 'type -> ReferenceType', 'copy-ReferenceType']
copynode -6.023967972956598:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false Cast type ReferenceType ^ ^ expression ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> Cast', 'Cast -> type expression', 'type -> ReferenceType']
copynode -5.64056586753577:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true BinaryOperation operator +_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> MemberReference']
copynode -4.616750753484666:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member isZero_ter ^ ^ ^ ^ if_false TernaryExpression ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MemberReference', 'MemberReference -> member', 'copy-member', 'if_false -> TernaryExpression']
copynode -4.616750753484666:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member isZero_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-if_false']
copynode -6.044034889084287:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference']
copynode -4.711975014768541:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member INF_ter ^ ^ ^ ^ if_false TernaryExpression ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MemberReference', 'MemberReference -> member', 'copy-member', 'if_false -> TernaryExpression']
copynode -4.711975014768541:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member INF_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-if_false']
copynode -4.616750753484666:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member isZero_ter ^ ^ ^ ^ if_false MethodInvocation ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MemberReference', 'MemberReference -> member', 'copy-member', 'if_false -> MethodInvocation']
copynode -5.552751458249986:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member unknown ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'copy-if_false']
copynode -4.922399437986314:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-if_false']
copynode -4.711975014768541:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member INF_ter ^ ^ ^ ^ if_false MethodInvocation ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MemberReference', 'MemberReference -> member', 'copy-member', 'if_false -> MethodInvocation']
copynode -5.948922104202211:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MethodInvocation arguments MemberReference ^ ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference']
copynode -4.922399437986314:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MemberReference', 'MemberReference -> member', 'copy-member', 'if_false -> TernaryExpression']
copynode -4.616750753484666:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member isZero_ter ^ ^ ^ ^ if_false BinaryOperation ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MemberReference', 'MemberReference -> member', 'copy-member', 'if_false -> BinaryOperation']
copynode -5.980105048976839:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MethodInvocation qualifier unknown ^ ^ arguments MemberReference ^ ^ member ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown', 'arguments -> MemberReference']
copynode -5.864749522996135:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference']
copynode -5.263712789863348:  root modified ^ ReturnStatement expression BinaryOperation operator |_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr TernaryExpression ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> |_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> TernaryExpression']
copynode -5.325116064399481:  root modified ^ ReturnStatement expression BinaryOperation operator |_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr TernaryExpression ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> |_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> TernaryExpression']
copynode -5.866708501242101:  root modified ^ ReturnStatement expression TernaryExpression condition MethodInvocation member unknown ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown', 'copy-if_true', 'copy-if_false']
copynode -6.586756086908281:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -4.711975014768541:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member INF_ter ^ ^ ^ ^ if_false BinaryOperation ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MemberReference', 'MemberReference -> member', 'copy-member', 'if_false -> BinaryOperation']
copynode -4.406796614639461:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false BinaryOperation operator *_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter']
copynode -6.002086253953166:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference']
copynode -4.922399437986314:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MethodInvocation ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MemberReference', 'MemberReference -> member', 'copy-member', 'if_false -> MethodInvocation']
copynode -4.649729228578508:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MethodInvocation member unknown ^ ^ ^ ^ if_false TernaryExpression ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown', 'if_false -> TernaryExpression']
copynode -4.282637627795339:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition MethodInvocation ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> MethodInvocation']
copynode -4.282637627795339:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition MemberReference ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> MemberReference']
copynode -5.263712789863348:  root modified ^ ReturnStatement expression BinaryOperation operator |_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr Cast ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> |_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> Cast']
copynode -5.325116064399481:  root modified ^ ReturnStatement expression BinaryOperation operator |_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr Cast ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> |_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> Cast']
copynode -5.655611898750067:  root modified ^ ReturnStatement expression BinaryOperation operator |_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr TernaryExpression ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> |_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> TernaryExpression']
copynode -4.649729228578508:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MethodInvocation member unknown ^ ^ ^ ^ if_false MethodInvocation ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown', 'if_false -> MethodInvocation']
copynode -5.682329683564603:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member isZero_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -6.773769915103912:  root add ^ StatementExpression expression MethodInvocation arguments MemberReference member par0 ^ ^ ^ ^ member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par0', 'arguments -> End', 'start -> unknown']
copynode -4.922399437986314:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false BinaryOperation ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MemberReference', 'MemberReference -> member', 'copy-member', 'if_false -> BinaryOperation']
copynode -5.864749522996135:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr Literal ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> Literal']
copynode -6.40065377112478:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
copynode -5.912550992332399:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MethodInvocation qualifier unknown ^ ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> MethodInvocation', 'MethodInvocation -> qualifier member', 'start -> unknown']
copynode -5.864203792996705:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true Literal value null_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> Literal', 'Literal -> value', 'value -> null_ter', 'copy-if_false']
copynode -5.682329683564603:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -4.406796614639461:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false BinaryOperation operator /_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter']
copynode -4.510532755404711:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -4.869110499043018:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true Cast type ReferenceType name Complex_ter ^ ^ ^ ^ expression ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> Cast', 'Cast -> type expression', 'type -> ReferenceType', 'copy-ReferenceType']
copynode -4.34504484012723:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MethodInvocation member unknown ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown', 'copy-if_false']
copynode -4.333808749914169:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition']
copynode -5.183477032929659:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MethodInvocation arguments MemberReference member ^ ^ ^ member ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> member']
copynode -4.333808749914169:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation']
copynode -5.463304940611124:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -5.425901535898447:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -5.547477271407843:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true This selectors MemberReference member ^ ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> This', 'This -> selectors', 'selectors -> MemberReference', 'MemberReference -> member']
copynode -4.454989198595285:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-if_false']
copynode -4.3775182999670506:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member isZero_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-if_false']
copynode -5.026734638959169:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MethodInvocation qualifier unknown ^ ^ arguments MemberReference ^ ^ member ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown', 'arguments -> MemberReference']
copynode -5.559674847871065:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MethodInvocation member unknown ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown']
copynode -5.69691813364625:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ||_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -5.613461542874575:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false This selectors MemberReference ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> This', 'This -> selectors', 'selectors -> MemberReference']
copynode -4.600929860025644:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member INF_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-if_false']
copynode -5.220206264406443:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member unknown ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'copy-if_false']
copynode -5.588254202157259:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MethodInvocation qualifier Double_ter ^ ^ member unknown ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MethodInvocation', 'MethodInvocation -> qualifier member', 'copy-qualifier', 'start -> unknown']
copynode -4.894969906657934:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false BinaryOperation operator +_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter']
copynode -4.3775182999670506:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member isZero_ter ^ ^ ^ ^ if_false MethodInvocation ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MemberReference', 'MemberReference -> member', 'copy-member', 'if_false -> MethodInvocation']
copynode -5.532177094370127:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
copynode -6.100568909198046:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator >_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -4.894969906657934:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false BinaryOperation operator -_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter']
copynode -5.987283576279879:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MethodInvocation arguments MemberReference member par0 ^ ^ ^ ^ member unknown ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MethodInvocation', 'MethodInvocation -> arguments member', 'copy-arguments', 'start -> unknown']
copynode -6.176847029477358:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false Cast type ReferenceType ^ ^ expression ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> Cast', 'Cast -> type expression', 'type -> ReferenceType']
copynode -4.454989198595285:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MethodInvocation ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MemberReference', 'MemberReference -> member', 'copy-member', 'if_false -> MethodInvocation']
copynode -4.3775182999670506:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member isZero_ter ^ ^ ^ ^ if_false TernaryExpression ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MemberReference', 'MemberReference -> member', 'copy-member', 'if_false -> TernaryExpression']
copynode -5.00514604523778:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member isZero_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -4.600929860025644:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member INF_ter ^ ^ ^ ^ if_false MethodInvocation ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MemberReference', 'MemberReference -> member', 'copy-member', 'if_false -> MethodInvocation']
copynode -5.700259793549776:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MethodInvocation arguments MemberReference ^ ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference']
copynode -5.00514604523778:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member NaN_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -5.753310788422823:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MethodInvocation qualifier unknown ^ ^ arguments ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown']
copynode -4.454989198595285:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MemberReference', 'MemberReference -> member', 'copy-member', 'if_false -> TernaryExpression']
copynode -5.855959448963404:  root modified ^ ReturnStatement expression TernaryExpression condition MethodInvocation member unknown ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown', 'copy-if_true', 'copy-if_false']
copynode -6.408028934150934:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -4.34504484012723:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MethodInvocation member unknown ^ ^ ^ ^ if_false MethodInvocation ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown', 'if_false -> MethodInvocation']
copynode -4.600929860025644:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member INF_ter ^ ^ ^ ^ if_false TernaryExpression ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MemberReference', 'MemberReference -> member', 'copy-member', 'if_false -> TernaryExpression']
copynode -5.00514604523778:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -5.79724632576108:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MethodInvocation qualifier Double_ter ^ ^ arguments MemberReference ^ ^ member ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'copy-qualifier', 'arguments -> MemberReference']
copynode -4.3775182999670506:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member isZero_ter ^ ^ ^ ^ if_false MemberReference ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MemberReference', 'MemberReference -> member', 'copy-member', 'if_false -> MemberReference']
copynode -5.7985329031944275:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true Literal value null_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> Literal', 'Literal -> value', 'value -> null_ter', 'copy-if_false']
copynode -4.333808749914169:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition MethodInvocation ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> MethodInvocation']
copynode -5.828452695161104:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MethodInvocation qualifier unknown ^ ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> MethodInvocation', 'MethodInvocation -> qualifier member', 'start -> unknown']
copynode -4.454989198595285:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MemberReference', 'MemberReference -> member', 'copy-member', 'if_false -> MemberReference']
copynode -5.866086009889841:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member par0 ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MemberReference', 'MemberReference -> member', 'member -> par0', 'copy-if_false']
copynode -5.026734638959169:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MethodInvocation qualifier unknown ^ ^ arguments MemberReference member par0 ^ ^ ^ ^ member ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown', 'copy-arguments']
copynode -4.34504484012723:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MethodInvocation member unknown ^ ^ ^ ^ if_false TernaryExpression ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown', 'if_false -> TernaryExpression']
copynode -6.590029250830412:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> Literal', 'Literal -> value', 'value -> null_ter']
copynode -5.828452695161104:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MethodInvocation qualifier Double_ter ^ ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> MethodInvocation', 'MethodInvocation -> qualifier member', 'copy-qualifier']
copynode -6.297668926417828:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true BinaryOperation operator +_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> MemberReference']
copynode -4.600929860025644:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member INF_ter ^ ^ ^ ^ if_false MemberReference ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MemberReference', 'MemberReference -> member', 'copy-member', 'if_false -> MemberReference']
copynode -6.598434437066317:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MethodInvocation arguments MemberReference member par0 ^ ^ ^ ^ member unknown ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MethodInvocation', 'MethodInvocation -> arguments member', 'copy-arguments', 'start -> unknown']
copynode -6.318429592996836:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
before@10 batch0 x: -6.929574410431087: root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false BinaryOperation operator /_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter']
after@10 batch0 x: -6.929574410431087: root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false BinaryOperation operator /_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter']
before@10 batch1 x: -6.87743585195858: root modified ^ ReturnStatement expression MemberReference member NaN_ter ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MemberReference', 'MemberReference -> member', 'copy-member', 'root -> End']
after@10 batch1 x: -6.87743585195858: root modified ^ ReturnStatement expression MemberReference member NaN_ter ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MemberReference', 'MemberReference -> member', 'copy-member', 'root -> End']
copynode -5.0052095372229815:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
copynode -5.353516376577318:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MethodInvocation member unknown ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown', 'copy-if_false', 'root -> End']
copynode -4.529506889171898:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -4.529506889171898:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -5.715798160992563:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MethodInvocation member unknown ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown', 'root -> End']
copynode -4.65111945476383:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -5.770775648765266:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false This selectors MemberReference member ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> This', 'This -> selectors', 'selectors -> MemberReference', 'MemberReference -> member']
copynode -4.65111945476383:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -4.529506889171898:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -6.090491767041385:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true BinaryOperation operator +_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -5.535069863311946:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false BinaryOperation operator +_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> MemberReference']
copynode -6.127229488454759:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member isZero_ter ^ ^ ^ ^ if_false TernaryExpression condition ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MemberReference', 'MemberReference -> member', 'copy-member', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false']
copynode -5.660046975128353:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false BinaryOperation operator -_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference']
copynode -6.199775374494493:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member isZero_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-if_false', 'root -> End']
copynode -4.65111945476383:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -6.236618316732347:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member INF_ter ^ ^ ^ ^ if_false TernaryExpression condition ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MemberReference', 'MemberReference -> member', 'copy-member', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false']
copynode -6.252195990644395:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member INF_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-if_false', 'root -> End']
copynode -6.229920705896802:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -6.337089098058641:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member unknown ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'copy-if_false', 'root -> End']
copynode -5.447780998423696:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true']
copynode -6.3871860867366195:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-if_false', 'root -> End']
copynode -5.282072803936899:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ||_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -5.362897420302033:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -5.282072803936899:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ||_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -6.423792428337038:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MethodInvocation arguments MemberReference member ^ ^ ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> member']
copynode -5.362897420302033:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -6.445882714353502:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MemberReference', 'MemberReference -> member', 'copy-member', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false']
copynode -6.499429530464113:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MethodInvocation qualifier unknown ^ ^ arguments MemberReference member ^ ^ ^ member ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown', 'arguments -> MemberReference', 'MemberReference -> member']
copynode -5.854489776305854:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true Cast type ReferenceType name Complex_ter ^ ^ ^ ^ expression MemberReference ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> Cast', 'Cast -> type expression', 'type -> ReferenceType', 'copy-ReferenceType', 'expression -> MemberReference']
copynode -6.493295467458665:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member isZero_ter ^ ^ ^ ^ if_false BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MemberReference', 'MemberReference -> member', 'copy-member', 'if_false -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
copynode -6.528678800910711:  root modified ^ ReturnStatement expression BinaryOperation operator |_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr TernaryExpression condition ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> |_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> TernaryExpression', 'TernaryExpression -> condition if_true if_false']
copynode -5.591274620033801:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MethodInvocation arguments MemberReference member isZero_ter ^ ^ ^ ^ member ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -6.584851666353643:  root modified ^ ReturnStatement expression TernaryExpression condition MethodInvocation member unknown ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown', 'copy-if_true', 'copy-if_false', 'root -> End']
copynode -6.555239465087652:  root modified ^ ReturnStatement expression BinaryOperation operator |_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr TernaryExpression condition ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> |_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> TernaryExpression', 'TernaryExpression -> condition if_true if_false']
copynode -5.447780998423696:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference ^ ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MemberReference']
copynode -5.591274620033801:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MethodInvocation arguments MemberReference member INF_ter ^ ^ ^ ^ member ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -6.046349209733307:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false Cast type ReferenceType name Complex_ter ^ ^ ^ ^ expression ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> Cast', 'Cast -> type expression', 'type -> ReferenceType', 'copy-ReferenceType']
copynode -6.6243899231776595:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member INF_ter ^ ^ ^ ^ if_false BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MemberReference', 'MemberReference -> member', 'copy-member', 'if_false -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
copynode -6.692157722078264:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MethodInvocation member unknown ^ ^ ^ ^ if_false TernaryExpression condition ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false']
copynode -6.500942619633861:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr MemberReference member ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member']
copynode -6.025590333156288:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true Cast type ReferenceType name Complex_ter ^ ^ ^ ^ expression MemberReference ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> Cast', 'Cast -> type expression', 'type -> ReferenceType', 'copy-ReferenceType', 'expression -> MemberReference']
copynode -6.704937489703298:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition MemberReference member ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> MemberReference', 'MemberReference -> member']
copynode -6.83201804663986:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member isZero_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> MemberReference', 'MemberReference -> member', 'copy-member', 'root -> End']
copynode -6.797029044479132:  root modified ^ ReturnStatement expression BinaryOperation operator |_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr TernaryExpression condition ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> |_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> TernaryExpression', 'TernaryExpression -> condition if_true if_false']
copynode -5.282072803936899:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ||_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -5.677995713893324:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true This selectors MemberReference member INF_ter ^ ^ ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> This', 'This -> selectors', 'selectors -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -6.644774409127422:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr MemberReference member ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member']
copynode -6.876289935898967:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr Literal value ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> Literal', 'Literal -> value']
copynode -6.894620639272034:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true Literal value null_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> Literal', 'Literal -> value', 'value -> null_ter', 'copy-if_false', 'root -> End']
copynode -6.902517466805875:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> MemberReference', 'MemberReference -> member', 'copy-member', 'root -> End']
copynode -5.362897420302033:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -6.866017818450928:  root add ^ StatementExpression expression MethodInvocation arguments MemberReference member par0 ^ ^ ^ ^ member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par0', 'arguments -> End', 'start -> unknown', 'root -> End']
copynode -5.677995713893324:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true This selectors MemberReference member isZero_ter ^ ^ ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> This', 'This -> selectors', 'selectors -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -6.8675669794902205:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MemberReference', 'MemberReference -> member', 'copy-member', 'if_false -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
copynode -5.983338958583772:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator >_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -5.925611964426935:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl ^ operandr ^ ^ ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter']
copynode -5.591274620033801:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MethodInvocation arguments MemberReference member NaN_ter ^ ^ ^ ^ member ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -4.942873347550631:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MethodInvocation member unknown ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown', 'copy-if_false', 'root -> End']
copynode -5.306508094072342:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
copynode -5.561016086488962:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-if_false', 'root -> End']
copynode -5.562739137560129:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member isZero_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-if_false', 'root -> End']
copynode -4.523565709590912:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -5.680817950516939:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MethodInvocation qualifier unknown ^ ^ arguments MemberReference member ^ ^ ^ member ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown', 'arguments -> MemberReference', 'MemberReference -> member']
copynode -4.931742150802165:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true Cast type ReferenceType name Complex_ter ^ ^ ^ ^ expression MethodInvocation ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> Cast', 'Cast -> type expression', 'type -> ReferenceType', 'copy-ReferenceType', 'expression -> MethodInvocation']
copynode -5.735907215625048:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MethodInvocation member unknown ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown', 'root -> End']
copynode -5.775072056800127:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false This selectors MemberReference member ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> This', 'This -> selectors', 'selectors -> MemberReference', 'MemberReference -> member']
copynode -5.780520800501108:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member INF_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-if_false', 'root -> End']
copynode -4.931742150802165:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true Cast type ReferenceType name Complex_ter ^ ^ ^ ^ expression MemberReference ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> Cast', 'Cast -> type expression', 'type -> ReferenceType', 'copy-ReferenceType', 'expression -> MemberReference']
copynode -5.839124087244272:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member unknown ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'copy-if_false', 'root -> End']
copynode -4.523565709590912:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -4.523565709590912:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -5.187750190496445:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true']
copynode -5.199269291013479:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MethodInvocation arguments MemberReference member isZero_ter ^ ^ ^ ^ member ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -6.2373928017914295:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member isZero_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> MemberReference', 'MemberReference -> member', 'copy-member', 'root -> End']
copynode -6.299110788851976:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member NaN_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> MemberReference', 'MemberReference -> member', 'copy-member', 'root -> End']
copynode -6.286589432507753:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MethodInvocation arguments MemberReference member ^ ^ ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> member']
copynode -6.192016265355051:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false Cast type ReferenceType name Complex_ter ^ ^ ^ ^ expression ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> Cast', 'Cast -> type expression', 'type -> ReferenceType', 'copy-ReferenceType']
copynode -6.23619020357728:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member isZero_ter ^ ^ ^ ^ if_false TernaryExpression condition ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MemberReference', 'MemberReference -> member', 'copy-member', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false']
copynode -5.849093157798052:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MethodInvocation qualifier Double_ter ^ ^ member unknown ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MethodInvocation', 'MethodInvocation -> qualifier member', 'copy-qualifier', 'start -> unknown', 'copy-if_false']
copynode -6.409321818500757:  root modified ^ ReturnStatement expression TernaryExpression condition MethodInvocation member unknown ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown', 'copy-if_true', 'copy-if_false', 'root -> End']
copynode -6.321332219988108:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MemberReference', 'MemberReference -> member', 'copy-member', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false']
copynode -5.199269291013479:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MethodInvocation arguments MemberReference member INF_ter ^ ^ ^ ^ member ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -6.179786030203104:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MethodInvocation arguments MemberReference member par0 ^ ^ ^ ^ member unknown ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MethodInvocation', 'MethodInvocation -> arguments member', 'copy-arguments', 'start -> unknown', 'copy-if_false']
copynode -6.489471692591906:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> MemberReference', 'MemberReference -> member', 'copy-member', 'root -> End']
copynode -5.476593483239412:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -6.511447835713625:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MethodInvocation qualifier Double_ter ^ ^ arguments MemberReference member ^ ^ ^ member ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'copy-qualifier', 'arguments -> MemberReference', 'MemberReference -> member']
copynode -5.199269291013479:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MethodInvocation arguments MemberReference member NaN_ter ^ ^ ^ ^ member ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -6.030079331248999:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false BinaryOperation operator +_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> MemberReference']
copynode -6.474318865686655:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member INF_ter ^ ^ ^ ^ if_false TernaryExpression condition ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MemberReference', 'MemberReference -> member', 'copy-member', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false']
copynode -6.618295609951019:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true Literal value null_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> Literal', 'Literal -> value', 'value -> null_ter', 'copy-if_false', 'root -> End']
copynode -5.187750190496445:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference ^ ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MemberReference']
copynode -6.133781876415014:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false BinaryOperation operator -_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference']
copynode -6.594275835901499:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member isZero_ter ^ ^ ^ ^ if_false MemberReference member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MemberReference', 'MemberReference -> member', 'copy-member', 'if_false -> MemberReference', 'MemberReference -> member']
copynode -5.485413119196892:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -5.187750190496445:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MethodInvocation ^ ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MethodInvocation']
copynode -6.753793600946665:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member par0 ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MemberReference', 'MemberReference -> member', 'member -> par0', 'copy-if_false', 'root -> End']
copynode -5.552763008978218:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true This selectors MemberReference member isZero_ter ^ ^ ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> This', 'This -> selectors', 'selectors -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -6.728081945329905:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MemberReference', 'MemberReference -> member', 'copy-member', 'if_false -> MemberReference', 'MemberReference -> member']
copynode -6.7839908711612225:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> End']
copynode -6.797376208007336:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true BinaryOperation operator +_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -5.476593483239412:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -6.82597291842103:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member INF_ter ^ ^ ^ ^ if_false MemberReference member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MemberReference', 'MemberReference -> member', 'copy-member', 'if_false -> MemberReference', 'MemberReference -> member']
copynode -5.476593483239412:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -5.736895177513361:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ||_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -5.485413119196892:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -6.781770695000887:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MethodInvocation member unknown ^ ^ ^ ^ if_false TernaryExpression condition ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false']
copynode -5.485413119196892:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -5.552763008978218:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true This selectors MemberReference member INF_ter ^ ^ ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> This', 'This -> selectors', 'selectors -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -5.552763008978218:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true This selectors MemberReference member NaN_ter ^ ^ ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> This', 'This -> selectors', 'selectors -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -6.305582869797945:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MethodInvocation qualifier unknown ^ ^ arguments MemberReference ^ ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown', 'arguments -> MemberReference']
before@11 batch0 x: -7.061437607742846: root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MethodInvocation arguments MemberReference member NaN_ter ^ ^ ^ ^ member ^ ^ ^ if_false ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> member', 'copy-member']
after@11 batch0 x: -7.061437607742846: root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MethodInvocation arguments MemberReference member NaN_ter ^ ^ ^ ^ member ^ ^ ^ if_false ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> member', 'copy-member']
before@11 batch1 x: -6.9877827651798725: root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MethodInvocation qualifier unknown ^ ^ arguments MemberReference ^ ^ member ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown', 'arguments -> MemberReference']
after@11 batch1 x: -6.9877827651798725: root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MethodInvocation qualifier unknown ^ ^ arguments MemberReference ^ ^ member ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown', 'arguments -> MemberReference']
copynode -6.1172170443460345:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false BinaryOperation operator +_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -5.573789563961327:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference']
copynode -6.154939870350063:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false BinaryOperation operator -_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -5.0804279912263155:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter']
copynode -5.62868317682296:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference']
copynode -5.573789563961327:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr Literal ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> Literal']
copynode -6.537659618072212:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true Cast type ReferenceType name Complex_ter ^ ^ ^ ^ expression MemberReference member ^ ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> Cast', 'Cast -> type expression', 'type -> ReferenceType', 'copy-ReferenceType', 'expression -> MemberReference', 'MemberReference -> member']
copynode -5.62868317682296:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr Literal ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> Literal']
copynode -6.07783314306289:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference']
copynode -5.793705685995519:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr BinaryOperation ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> BinaryOperation']
copynode -5.774929746054113:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr BinaryOperation ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> BinaryOperation']
copynode -6.599809559062123:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member ^ ^ ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MemberReference', 'MemberReference -> member']
copynode -5.0804279912263155:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator &&_ter ^ ^ operandl ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter']
copynode -6.725675317458808:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true Cast type ReferenceType name Complex_ter ^ ^ ^ ^ expression MemberReference member ^ ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> Cast', 'Cast -> type expression', 'type -> ReferenceType', 'copy-ReferenceType', 'expression -> MemberReference', 'MemberReference -> member']
copynode -6.138996938243508:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member isZero_ter ^ ^ ^ ^ if_false TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MemberReference', 'MemberReference -> member', 'copy-member', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition']
copynode -5.774929746054113:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference']
copynode -6.410126471891999:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr Literal ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> Literal']
copynode -6.2485644817352295:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member INF_ter ^ ^ ^ ^ if_false TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MemberReference', 'MemberReference -> member', 'copy-member', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition']
copynode -5.776644343044609:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false This selectors MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> This', 'This -> selectors', 'selectors -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -6.45326497592032:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr Literal ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> Literal']
copynode -5.776644343044609:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false This selectors MemberReference member isZero_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> This', 'This -> selectors', 'selectors -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -5.793705685995519:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference']
copynode -6.575258196331561:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MethodInvocation arguments MemberReference member isZero_ter ^ ^ ^ ^ member ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> member', 'copy-member', 'arguments -> End']
copynode -6.07783314306289:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr Literal ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> Literal']
copynode -6.649824024178088:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MethodInvocation arguments MemberReference member INF_ter ^ ^ ^ ^ member ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> member', 'copy-member', 'arguments -> End']
copynode -5.0804279912263155:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator !=_ter ^ ^ operandl ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter']
copynode -6.8720531784929335:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true This selectors MemberReference member INF_ter ^ ^ ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> This', 'This -> selectors', 'selectors -> MemberReference', 'MemberReference -> member', 'copy-member', 'selectors -> End']
copynode -5.0804279912263155:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ||_ter ^ ^ operandl ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter']
copynode -6.216271026991308:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr BinaryOperation ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> BinaryOperation']
copynode -6.138996938243508:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member isZero_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MemberReference', 'MemberReference -> member', 'copy-member', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation']
copynode -5.776644343044609:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false This selectors MemberReference member NaN_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> This', 'This -> selectors', 'selectors -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -5.793705685995519:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr MethodInvocation ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MethodInvocation']
copynode -6.45815490745008:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MemberReference', 'MemberReference -> member', 'copy-member', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition']
copynode -5.774929746054113:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr MethodInvocation ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MethodInvocation']
copynode -7.041514745913446:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference']
copynode -6.112845757044852:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true BinaryOperation operator +_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -6.891444950480945:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter']
copynode -6.926939042750746:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true This selectors MemberReference member isZero_ter ^ ^ ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> This', 'This -> selectors', 'selectors -> MemberReference', 'MemberReference -> member', 'copy-member', 'selectors -> End']
copynode -6.2485644817352295:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member INF_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MemberReference', 'MemberReference -> member', 'copy-member', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation']
copynode -6.112845757044852:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true BinaryOperation operator +_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -6.572254054248333:  root modified ^ ReturnStatement expression BinaryOperation operator |_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> |_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition']
copynode -6.216271026991308:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference']
copynode -6.597386326640844:  root modified ^ ReturnStatement expression BinaryOperation operator |_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> |_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition']
copynode -6.415024301968515:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ||_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr BinaryOperation ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> BinaryOperation']
copynode -6.410126471891999:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference']
copynode -6.713356484659016:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MethodInvocation member unknown ^ ^ ^ ^ if_false TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition']
copynode -5.79322548629716:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true Cast type ReferenceType name Complex_ter ^ ^ ^ ^ expression MemberReference member ^ ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> Cast', 'Cast -> type expression', 'type -> ReferenceType', 'copy-ReferenceType', 'expression -> MemberReference', 'MemberReference -> member']
copynode -5.569805443286896:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference']
copynode -5.382786452770233:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter']
copynode -6.4074362106621265:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MethodInvocation qualifier Double_ter ^ ^ member unknown ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MethodInvocation', 'MethodInvocation -> qualifier member', 'copy-qualifier', 'start -> unknown', 'copy-if_false', 'root -> End']
copynode -5.909059941768646:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference']
copynode -5.938276588916779:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference']
copynode -6.4867538549005985:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MethodInvocation arguments MemberReference member par0 ^ ^ ^ ^ member unknown ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MethodInvocation', 'MethodInvocation -> arguments member', 'copy-arguments', 'start -> unknown', 'copy-if_false', 'root -> End']
copynode -6.590935971587896:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false BinaryOperation operator +_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -6.622780170291662:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false BinaryOperation operator -_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -6.622253626585007:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member ^ ^ ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MemberReference', 'MemberReference -> member']
copynode -6.234978076070547:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MethodInvocation arguments MemberReference member isZero_ter ^ ^ ^ ^ member ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> member', 'copy-member', 'arguments -> End']
copynode -5.720072944182903:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true Cast type ReferenceType name Complex_ter ^ ^ ^ ^ expression MethodInvocation arguments ^ member ^ ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> Cast', 'Cast -> type expression', 'type -> ReferenceType', 'copy-ReferenceType', 'expression -> MethodInvocation', 'MethodInvocation -> arguments member']
copynode -6.360137198120356:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member isZero_ter ^ ^ ^ ^ if_false TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MemberReference', 'MemberReference -> member', 'copy-member', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition']
copynode -6.445053454488516:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MethodInvocation arguments MemberReference member INF_ter ^ ^ ^ ^ member ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> member', 'copy-member', 'arguments -> End']
copynode -5.708928149193525:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MethodInvocation qualifier unknown ^ ^ arguments MemberReference member isZero_ter ^ ^ ^ ^ member ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown', 'arguments -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -5.781233556568623:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false This selectors MemberReference member isZero_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> This', 'This -> selectors', 'selectors -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -6.444826599210501:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MemberReference', 'MemberReference -> member', 'copy-member', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition']
copynode -6.9877827651798725:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MethodInvocation qualifier unknown ^ ^ arguments MemberReference member ^ ^ ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown', 'arguments -> MemberReference', 'MemberReference -> member']
copynode -6.758560681249946:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true This selectors MemberReference member isZero_ter ^ ^ ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> This', 'This -> selectors', 'selectors -> MemberReference', 'MemberReference -> member', 'copy-member', 'selectors -> End']
copynode -5.720072944182903:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true Cast type ReferenceType name Complex_ter ^ ^ ^ ^ expression MethodInvocation qualifier ^ arguments ^ member ^ ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> Cast', 'Cast -> type expression', 'type -> ReferenceType', 'copy-ReferenceType', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member']
copynode -6.584667559713125:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MethodInvocation arguments MemberReference member NaN_ter ^ ^ ^ ^ member ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> member', 'copy-member', 'arguments -> End']
copynode -5.708928149193525:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MethodInvocation qualifier unknown ^ ^ arguments MemberReference member NaN_ter ^ ^ ^ ^ member ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown', 'arguments -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -6.043376237154007:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> MemberReference']
copynode -5.708928149193525:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MethodInvocation qualifier unknown ^ ^ arguments MemberReference member INF_ter ^ ^ ^ ^ member ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown', 'arguments -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -6.604198578745127:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member INF_ter ^ ^ ^ ^ if_false TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MemberReference', 'MemberReference -> member', 'copy-member', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition']
copynode -5.781233556568623:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false This selectors MemberReference member NaN_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> This', 'This -> selectors', 'selectors -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -5.781233556568623:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false This selectors MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> This', 'This -> selectors', 'selectors -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -6.304365842603147:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false Cast type ReferenceType name Complex_ter ^ ^ ^ ^ expression MethodInvocation ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> Cast', 'Cast -> type expression', 'type -> ReferenceType', 'copy-ReferenceType', 'expression -> MethodInvocation']
copynode -6.527519453316927:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference']
copynode -5.569805443286896:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr Literal ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> Literal']
copynode -6.955633783247322:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true This selectors MemberReference member NaN_ter ^ ^ ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> This', 'This -> selectors', 'selectors -> MemberReference', 'MemberReference -> member', 'copy-member', 'selectors -> End']
copynode -6.943039560224861:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true This selectors MemberReference member INF_ter ^ ^ ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> This', 'This -> selectors', 'selectors -> MemberReference', 'MemberReference -> member', 'copy-member', 'selectors -> End']
copynode -6.304365842603147:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false Cast type ReferenceType name Complex_ter ^ ^ ^ ^ expression MemberReference ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> Cast', 'Cast -> type expression', 'type -> ReferenceType', 'copy-ReferenceType', 'expression -> MemberReference']
copynode -6.043376237154007:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'copy-if_false']
copynode -6.928137112408876:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MethodInvocation member unknown ^ ^ ^ ^ if_false TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition']
copynode -6.303340468555689:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MethodInvocation arguments MemberReference member isZero_ter ^ ^ ^ ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -5.382786452770233:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator !=_ter ^ ^ operandl ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter']
copynode -6.859491694718599:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference']
copynode -5.382786452770233:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator &&_ter ^ ^ operandl ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter']
copynode -6.655869171023369:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr BinaryOperation ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> BinaryOperation']
before@12 batch0 x: -7.348849167115986: root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MethodInvocation member unknown ^ ^ ^ ^ if_false TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition']
after@12 batch0 x: -7.348849167115986: root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MethodInvocation member unknown ^ ^ ^ ^ if_false TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition']
before@12 batch1 x: -7.5176485031843185: root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr BinaryOperation ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> BinaryOperation']
after@12 batch1 x: -7.5176485031843185: root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr BinaryOperation ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> BinaryOperation']
copynode -6.180784908123314:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr MemberReference member ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member']
copynode -6.236787525005639:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr MemberReference member ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member']
copynode -6.200634585693479:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference']
copynode -6.549433437176049:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr Literal value ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> Literal', 'Literal -> value']
copynode -6.601440218277276:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr Literal value ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> Literal', 'Literal -> value']
copynode -6.670582261867821:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr MemberReference member ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member']
copynode -6.67121200170368:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
copynode -6.689583166502416:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
copynode -6.987858856096864:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr Literal value ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> Literal', 'Literal -> value']
copynode -7.0243802312761545:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr Literal value ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> Literal', 'Literal -> value']
copynode -7.085976091213524:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr Literal value ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> Literal', 'Literal -> value']
copynode -7.065704525448382:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MethodInvocation arguments MemberReference member isZero_ter ^ ^ ^ ^ member unknown ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> member', 'copy-member', 'arguments -> End', 'start -> unknown']
copynode -7.089038432575762:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MethodInvocation arguments MemberReference member INF_ter ^ ^ ^ ^ member unknown ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> member', 'copy-member', 'arguments -> End', 'start -> unknown']
copynode -6.967630728147924:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr MemberReference member ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member']
copynode -7.100351916626096:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference']
copynode -7.1832383666187525:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member isZero_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MemberReference', 'MemberReference -> member', 'copy-member', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
copynode -7.2190100168809295:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -6.141734552569687:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false BinaryOperation operator +_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -7.06191514339298:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr MemberReference member ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member']
copynode -6.180926063098013:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false BinaryOperation operator -_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -6.141734552569687:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false BinaryOperation operator +_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -7.273749828338623:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member INF_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MemberReference', 'MemberReference -> member', 'copy-member', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
copynode -7.000286453869194:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false This selectors MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> This', 'This -> selectors', 'selectors -> MemberReference', 'MemberReference -> member', 'copy-member', 'selectors -> End']
copynode -6.180926063098013:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false BinaryOperation operator -_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -7.3425798658281565:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr MemberReference member ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member']
copynode -7.182724162004888:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
copynode -6.141734552569687:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false BinaryOperation operator +_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -6.713003860786557:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> MemberReference']
copynode -6.180926063098013:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false BinaryOperation operator -_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -7.043422931339592:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false This selectors MemberReference member isZero_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> This', 'This -> selectors', 'selectors -> MemberReference', 'MemberReference -> member', 'copy-member', 'selectors -> End']
copynode -7.246067463536747:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ReturnStatement ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> ReturnStatement']
copynode -7.245373108424246:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true BinaryOperation operator +_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference']
copynode -7.337355217896402:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ||_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
copynode -7.318931802175939:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr MemberReference member ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member']
copynode -7.293747522868216:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true BinaryOperation operator +_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference']
copynode -7.184795731212944:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false This selectors MemberReference member NaN_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> This', 'This -> selectors', 'selectors -> MemberReference', 'MemberReference -> member', 'copy-member', 'selectors -> End']
copynode -7.144824179355055:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true This selectors MemberReference member INF_ter ^ ^ ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> This', 'This -> selectors', 'selectors -> MemberReference', 'MemberReference -> member', 'copy-member', 'selectors -> End', 'copy-if_false']
copynode -6.855310836806893:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member isZero_ter ^ ^ ^ ^ if_false TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MemberReference', 'MemberReference -> member', 'copy-member', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true']
copynode -7.348849167115986:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MethodInvocation member unknown ^ ^ ^ ^ if_false TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true']
copynode -7.157940493896604:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ||_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> MemberReference']
copynode -7.252564104739577:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true This selectors MemberReference member isZero_ter ^ ^ ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> This', 'This -> selectors', 'selectors -> MemberReference', 'MemberReference -> member', 'copy-member', 'selectors -> End', 'copy-if_false']
copynode -6.9886422753334045:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member INF_ter ^ ^ ^ ^ if_false TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MemberReference', 'MemberReference -> member', 'copy-member', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true']
copynode -6.713003860786557:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation ^ ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation']
copynode -6.576014812104404:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true Cast type ReferenceType name Complex_ter ^ ^ ^ ^ expression MemberReference member INF_ter ^ ^ ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> Cast', 'Cast -> type expression', 'type -> ReferenceType', 'copy-ReferenceType', 'expression -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -6.693668292835355:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member isZero_ter ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -6.576014812104404:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true Cast type ReferenceType name Complex_ter ^ ^ ^ ^ expression MemberReference member isZero_ter ^ ^ ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> Cast', 'Cast -> type expression', 'type -> ReferenceType', 'copy-ReferenceType', 'expression -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -6.085077464580536:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr MemberReference member ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member']
copynode -6.254947364330292:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference']
copynode -6.44111043214798:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr MemberReference member ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member']
copynode -6.4309632778167725:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr MemberReference member ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member']
copynode -6.7439268194139:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MethodInvocation arguments MemberReference member isZero_ter ^ ^ ^ ^ member unknown ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> member', 'copy-member', 'arguments -> End', 'start -> unknown']
copynode -5.827811848837882:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true Cast type ReferenceType name Complex_ter ^ ^ ^ ^ expression MemberReference member par0 ^ ^ ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> Cast', 'Cast -> type expression', 'type -> ReferenceType', 'copy-ReferenceType', 'expression -> MemberReference', 'MemberReference -> member', 'member -> par0']
copynode -6.967073198407888:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MethodInvocation arguments MemberReference member INF_ter ^ ^ ^ ^ member unknown ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> member', 'copy-member', 'arguments -> End', 'start -> unknown']
copynode -7.131507307291031:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> MemberReference', 'MemberReference -> member']
copynode -7.192002106457949:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr MemberReference member ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member']
copynode -7.2680409252643585:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'copy-if_false', 'root -> End']
copynode -7.056362982839346:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MethodInvocation arguments MemberReference member NaN_ter ^ ^ ^ ^ member unknown ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> member', 'copy-member', 'arguments -> End', 'start -> unknown']
copynode -5.827811848837882:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true Cast type ReferenceType name Complex_ter ^ ^ ^ ^ expression MemberReference member isZero_ter ^ ^ ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> Cast', 'Cast -> type expression', 'type -> ReferenceType', 'copy-ReferenceType', 'expression -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -7.258673935197294:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false Cast type ReferenceType name Complex_ter ^ ^ ^ ^ expression MemberReference member ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> Cast', 'Cast -> type expression', 'type -> ReferenceType', 'copy-ReferenceType', 'expression -> MemberReference', 'MemberReference -> member']
copynode -6.986443679779768:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MethodInvocation qualifier unknown ^ ^ arguments MemberReference member isZero_ter ^ ^ ^ ^ member ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown', 'arguments -> MemberReference', 'MemberReference -> member', 'copy-member', 'arguments -> End']
copynode -7.20253199338913:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr Literal value ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> Literal', 'Literal -> value']
copynode -6.991286523640156:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false This selectors MemberReference member isZero_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> This', 'This -> selectors', 'selectors -> MemberReference', 'MemberReference -> member', 'copy-member', 'selectors -> End']
copynode -7.028789812233299:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true This selectors MemberReference member isZero_ter ^ ^ ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> This', 'This -> selectors', 'selectors -> MemberReference', 'MemberReference -> member', 'copy-member', 'selectors -> End', 'copy-if_false']
copynode -7.112843792885542:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MethodInvocation qualifier unknown ^ ^ arguments MemberReference member NaN_ter ^ ^ ^ ^ member ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown', 'arguments -> MemberReference', 'MemberReference -> member', 'copy-member', 'arguments -> End']
copynode -5.827811848837882:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true Cast type ReferenceType name Complex_ter ^ ^ ^ ^ expression MemberReference member NaN_ter ^ ^ ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> Cast', 'Cast -> type expression', 'type -> ReferenceType', 'copy-ReferenceType', 'expression -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -7.146395843476057:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MethodInvocation qualifier unknown ^ ^ arguments MemberReference member INF_ter ^ ^ ^ ^ member ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown', 'arguments -> MemberReference', 'MemberReference -> member', 'copy-member', 'arguments -> End']
copynode -5.827811848837882:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true Cast type ReferenceType name Complex_ter ^ ^ ^ ^ expression MemberReference member INF_ter ^ ^ ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> Cast', 'Cast -> type expression', 'type -> ReferenceType', 'copy-ReferenceType', 'expression -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -7.161536581814289:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false This selectors MemberReference member NaN_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> This', 'This -> selectors', 'selectors -> MemberReference', 'MemberReference -> member', 'copy-member', 'selectors -> End']
copynode -7.505138982087374:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr MemberReference member ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member']
copynode -6.818831403274089:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true Cast type ReferenceType name Complex_ter ^ ^ ^ ^ expression MethodInvocation arguments MemberReference ^ ^ member ^ ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> Cast', 'Cast -> type expression', 'type -> ReferenceType', 'copy-ReferenceType', 'expression -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference']
copynode -7.173142798244953:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false This selectors MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> This', 'This -> selectors', 'selectors -> MemberReference', 'MemberReference -> member', 'copy-member', 'selectors -> End']
copynode -7.046450693625957:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true Cast type ReferenceType name Complex_ter ^ ^ ^ ^ expression MethodInvocation qualifier Double_ter ^ ^ arguments ^ member ^ ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> Cast', 'Cast -> type expression', 'type -> ReferenceType', 'copy-ReferenceType', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'copy-qualifier']
copynode -7.235490345861763:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true This selectors MemberReference member NaN_ter ^ ^ ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> This', 'This -> selectors', 'selectors -> MemberReference', 'MemberReference -> member', 'copy-member', 'selectors -> End', 'copy-if_false']
copynode -7.250709199812263:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true This selectors MemberReference member INF_ter ^ ^ ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> This', 'This -> selectors', 'selectors -> MemberReference', 'MemberReference -> member', 'copy-member', 'selectors -> End', 'copy-if_false']
copynode -7.4833123087883:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference']
copynode -7.5176485031843185:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
copynode -6.89195666089654:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member isZero_ter ^ ^ ^ ^ if_false TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MemberReference', 'MemberReference -> member', 'copy-member', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true']
copynode -6.608925400301814:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false BinaryOperation operator +_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -6.6402972638607025:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false BinaryOperation operator -_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -7.362192738801241:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MethodInvocation member unknown ^ ^ ^ ^ if_false TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true']
copynode -6.998975928872824:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MemberReference', 'MemberReference -> member', 'copy-member', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true']
copynode -6.608925400301814:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false BinaryOperation operator +_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -6.6402972638607025:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false BinaryOperation operator -_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -7.1471174992620945:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member INF_ter ^ ^ ^ ^ if_false TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MemberReference', 'MemberReference -> member', 'copy-member', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true']
before@13 batch0 x: -7.962227518670261: root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true Cast type ReferenceType name Complex_ter ^ ^ ^ ^ expression MemberReference member isZero_ter ^ ^ ^ ^ ^ ^ if_false ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> Cast', 'Cast -> type expression', 'type -> ReferenceType', 'copy-ReferenceType', 'expression -> MemberReference', 'MemberReference -> member', 'copy-member']
after@13 batch0 x: -7.962227518670261: root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true Cast type ReferenceType name Complex_ter ^ ^ ^ ^ expression MemberReference member isZero_ter ^ ^ ^ ^ ^ ^ if_false ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> Cast', 'Cast -> type expression', 'type -> ReferenceType', 'copy-ReferenceType', 'expression -> MemberReference', 'MemberReference -> member', 'copy-member']
before@13 batch1 x: -7.985963884741068: root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member INF_ter ^ ^ ^ ^ if_false TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MemberReference', 'MemberReference -> member', 'copy-member', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true']
after@13 batch1 x: -7.985963884741068: root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member INF_ter ^ ^ ^ ^ if_false TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MemberReference', 'MemberReference -> member', 'copy-member', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true']
copynode -6.363304140046239:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -6.557843152433634:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter']
copynode -6.609731228090823:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter']
copynode -6.995388256385922:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter']
copynode -7.031844533514231:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter']
copynode -7.231887834146619:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -7.094064340926707:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter']
copynode -6.250429448671639:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr MemberReference member unknown ^ ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'start -> unknown']
copynode -7.384192401077598:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false This selectors MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> This', 'This -> selectors', 'selectors -> MemberReference', 'MemberReference -> member', 'copy-member', 'selectors -> End', 'root -> End']
copynode -7.162856386043131:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MethodInvocation arguments MemberReference member isZero_ter ^ ^ ^ ^ member unknown ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> member', 'copy-member', 'arguments -> End', 'start -> unknown', 'copy-if_false']
copynode -7.194219903089106:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MethodInvocation arguments MemberReference member INF_ter ^ ^ ^ ^ member unknown ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> member', 'copy-member', 'arguments -> End', 'start -> unknown', 'copy-if_false']
copynode -7.491760218050331:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false This selectors MemberReference member isZero_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> This', 'This -> selectors', 'selectors -> MemberReference', 'MemberReference -> member', 'copy-member', 'selectors -> End', 'root -> End']
copynode -6.308791291899979:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr MemberReference member unknown ^ ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'start -> unknown']
copynode -7.292528343386948:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false BinaryOperation operator +_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference']
copynode -7.601871395017952:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false This selectors MemberReference member NaN_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> This', 'This -> selectors', 'selectors -> MemberReference', 'MemberReference -> member', 'copy-member', 'selectors -> End', 'root -> End']
copynode -7.538226404227316:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true BinaryOperation operator +_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr MemberReference member ^ ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member']
copynode -7.474357770755887:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -7.3397849323228:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false BinaryOperation operator +_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference']
copynode -7.330541708506644:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false BinaryOperation operator -_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference']
copynode -7.59357846621424:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true BinaryOperation operator +_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr MemberReference member ^ ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member']
copynode -7.685445579234511:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true This selectors MemberReference member INF_ter ^ ^ ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> This', 'This -> selectors', 'selectors -> MemberReference', 'MemberReference -> member', 'copy-member', 'selectors -> End', 'copy-if_false', 'root -> End']
copynode -7.389167883433402:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false BinaryOperation operator -_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference']
copynode -6.250429448671639:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr MemberReference member isZero_ter ^ ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -6.894143073819578:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter']
copynode -6.308791291899979:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr MemberReference member isZero_ter ^ ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -7.472930979914963:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false BinaryOperation operator +_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference']
copynode -7.803203972522169:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true This selectors MemberReference member isZero_ter ^ ^ ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> This', 'This -> selectors', 'selectors -> MemberReference', 'MemberReference -> member', 'copy-member', 'selectors -> End', 'copy-if_false', 'root -> End']
copynode -6.916223241947591:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter']
copynode -7.488500692881644:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false BinaryOperation operator -_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference']
copynode -7.794322537258267:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ||_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -6.250429448671639:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr MemberReference member INF_ter ^ ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -6.308791291899979:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr MemberReference member INF_ter ^ ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -7.227991028688848:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr MemberReference member unknown ^ ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'start -> unknown']
copynode -6.308791291899979:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr MemberReference member NaN_ter ^ ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -6.250429448671639:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr MemberReference member NaN_ter ^ ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -7.510977327008732:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ReturnStatement expression ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> ReturnStatement', 'ReturnStatement -> expression']
copynode -7.328222974203527:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr MemberReference member unknown ^ ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'start -> unknown']
copynode -6.750038501806557:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr MemberReference member isZero_ter ^ ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -7.267352582886815:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member isZero_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MemberReference', 'MemberReference -> member', 'copy-member', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter']
copynode -6.750038501806557:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr MemberReference member unknown ^ ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'start -> unknown']
copynode -7.8593809474259615:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
copynode -6.750038501806557:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr MemberReference member INF_ter ^ ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -7.359766758978367:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member INF_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MemberReference', 'MemberReference -> member', 'copy-member', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter']
copynode -6.750038501806557:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr MemberReference member NaN_ter ^ ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -7.739291866309941:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MethodInvocation member unknown ^ ^ ^ ^ if_false TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'copy-if_false']
copynode -7.4215138694271445:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter']
copynode -6.437096506357193:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -6.933647494763136:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MethodInvocation arguments MemberReference member isZero_ter ^ ^ ^ ^ member unknown ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> member', 'copy-member', 'arguments -> End', 'start -> unknown', 'copy-if_false']
copynode -7.35057283192873:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false This selectors MemberReference member isZero_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> This', 'This -> selectors', 'selectors -> MemberReference', 'MemberReference -> member', 'copy-member', 'selectors -> End', 'root -> End']
copynode -7.1581493280828:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MethodInvocation arguments MemberReference member INF_ter ^ ^ ^ ^ member unknown ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> member', 'copy-member', 'arguments -> End', 'start -> unknown', 'copy-if_false']
copynode -6.144022274762392:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr MemberReference member unknown ^ ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'start -> unknown']
copynode -7.421471470501274:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true This selectors MemberReference member isZero_ter ^ ^ ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> This', 'This -> selectors', 'selectors -> MemberReference', 'MemberReference -> member', 'copy-member', 'selectors -> End', 'copy-if_false', 'root -> End']
copynode -7.083235513884574:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true Cast type ReferenceType name Complex_ter ^ ^ ^ ^ expression MemberReference member par0 ^ ^ ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> Cast', 'Cast -> type expression', 'type -> ReferenceType', 'copy-ReferenceType', 'expression -> MemberReference', 'MemberReference -> member', 'member -> par0', 'copy-if_false']
copynode -7.284369166940451:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MethodInvocation arguments MemberReference member NaN_ter ^ ^ ^ ^ member unknown ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> member', 'copy-member', 'arguments -> End', 'start -> unknown', 'copy-if_false']
copynode -7.306984648108482:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter']
copynode -7.548117972910404:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false This selectors MemberReference member NaN_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> This', 'This -> selectors', 'selectors -> MemberReference', 'MemberReference -> member', 'copy-member', 'selectors -> End', 'root -> End']
copynode -7.575171984732151:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false This selectors MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> This', 'This -> selectors', 'selectors -> MemberReference', 'MemberReference -> member', 'copy-member', 'selectors -> End', 'root -> End']
copynode -7.574046690482646:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true Cast type ReferenceType name Complex_ter ^ ^ ^ ^ expression MethodInvocation arguments MemberReference member ^ ^ ^ member ^ ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> Cast', 'Cast -> type expression', 'type -> ReferenceType', 'copy-ReferenceType', 'expression -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> member']
copynode -7.610300862696022:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true This selectors MemberReference member NaN_ter ^ ^ ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> This', 'This -> selectors', 'selectors -> MemberReference', 'MemberReference -> member', 'copy-member', 'selectors -> End', 'copy-if_false', 'root -> End']
copynode -7.637310349848121:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true This selectors MemberReference member INF_ter ^ ^ ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> This', 'This -> selectors', 'selectors -> MemberReference', 'MemberReference -> member', 'copy-member', 'selectors -> End', 'copy-if_false', 'root -> End']
copynode -7.63783960044384:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -6.144022274762392:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr MemberReference member NaN_ter ^ ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -6.4973911345005035:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr MemberReference member unknown ^ ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'start -> unknown']
copynode -7.289671432692558:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true Cast type ReferenceType name Complex_ter ^ ^ ^ ^ expression MemberReference member isZero_ter ^ ^ ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> Cast', 'Cast -> type expression', 'type -> ReferenceType', 'copy-ReferenceType', 'expression -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-if_false']
copynode -6.497736528515816:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr MemberReference member NaN_ter ^ ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -6.144022274762392:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr MemberReference member isZero_ter ^ ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -7.443407547194511:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true Cast type ReferenceType name Complex_ter ^ ^ ^ ^ expression MemberReference member NaN_ter ^ ^ ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> Cast', 'Cast -> type expression', 'type -> ReferenceType', 'copy-ReferenceType', 'expression -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-if_false']
copynode -6.144022274762392:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr MemberReference member INF_ter ^ ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -7.511099350173026:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true Cast type ReferenceType name Complex_ter ^ ^ ^ ^ expression MemberReference member INF_ter ^ ^ ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> Cast', 'Cast -> type expression', 'type -> ReferenceType', 'copy-ReferenceType', 'expression -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-if_false']
copynode -6.497736528515816:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr MemberReference member isZero_ter ^ ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -6.4973911345005035:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr MemberReference member NaN_ter ^ ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -6.497736528515816:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr MemberReference member unknown ^ ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'start -> unknown']
copynode -6.4973911345005035:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr MemberReference member isZero_ter ^ ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -6.497736528515816:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr MemberReference member INF_ter ^ ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -6.4973911345005035:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr MemberReference member INF_ter ^ ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -7.757850823923945:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false BinaryOperation operator +_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference']
copynode -6.144022274762392:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'member -> par0']
copynode -7.786588162183762:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false BinaryOperation operator -_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference']
copynode -7.600702602881938:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true Cast type ReferenceType name Complex_ter ^ ^ ^ ^ expression MethodInvocation qualifier Double_ter ^ ^ arguments MemberReference ^ ^ member ^ ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> Cast', 'Cast -> type expression', 'type -> ReferenceType', 'copy-ReferenceType', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'copy-qualifier', 'arguments -> MemberReference']
copynode -7.803080786019564:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MethodInvocation member unknown ^ ^ ^ ^ if_false TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'copy-if_false']
copynode -7.89612597040832:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false BinaryOperation operator +_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference']
copynode -7.249403048306704:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr MemberReference member unknown ^ ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'start -> unknown']
copynode -7.921002835035324:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false BinaryOperation operator -_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference']
before@14 batch0 x: -8.316849543713033: root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter']
after@14 batch0 x: -8.316849543713033: root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter']
before@14 batch1 x: -8.475083261728287: root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false BinaryOperation operator -_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference']
after@14 batch1 x: -8.475083261728287: root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false BinaryOperation operator -_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference']
copynode -6.823109868913889:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'copy-if_true']
copynode -6.857132748700678:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'copy-if_true']
copynode -7.428823337890208:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MethodInvocation arguments MemberReference member isZero_ter ^ ^ ^ ^ member unknown ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> member', 'copy-member', 'arguments -> End', 'start -> unknown', 'copy-if_false', 'root -> End']
copynode -7.456779197789729:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MethodInvocation arguments MemberReference member INF_ter ^ ^ ^ ^ member unknown ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> member', 'copy-member', 'arguments -> End', 'start -> unknown', 'copy-if_false', 'root -> End']
copynode -7.061356598511338:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'copy-if_true']
copynode -7.093731734436005:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'copy-if_true']
copynode -6.39185655862093:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -6.39185655862093:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -7.591271978802979:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false BinaryOperation operator +_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr MemberReference member ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member']
copynode -7.332292125560343:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'copy-if_true']
copynode -7.643281740136445:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false BinaryOperation operator +_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr MemberReference member ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member']
copynode -7.648627229966223:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false BinaryOperation operator -_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr MemberReference member ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member']
copynode -7.38131767231971:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr MemberReference member unknown ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'copy-if_true']
copynode -7.714354493655264:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false BinaryOperation operator -_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr MemberReference member ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member']
copynode -7.497549784369767:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr MemberReference member unknown ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'copy-if_true']
copynode -7.796009940095246:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false BinaryOperation operator +_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr MemberReference member ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member']
copynode -6.39185655862093:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -7.83716503623873:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false BinaryOperation operator -_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr MemberReference member ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member']
copynode -7.778484492562711:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference']
copynode -7.809663786552846:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference']
copynode -7.742424902506173:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr MemberReference member isZero_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-if_true']
copynode -7.791782748885453:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr MemberReference member isZero_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-if_true']
copynode -7.986188872717321:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr MemberReference member unknown ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'copy-if_true']
copynode -7.905453738756478:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr MemberReference member INF_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-if_true']
copynode -8.301950414665043:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MethodInvocation member unknown ^ ^ ^ ^ if_false TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'copy-if_false', 'root -> End']
copynode -7.611779064871371:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true BinaryOperation operator +_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr MemberReference member unknown ^ ^ ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'start -> unknown']
copynode -7.938017261214554:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr MemberReference member INF_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-if_true']
copynode -8.188252331689:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member isZero_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MemberReference', 'MemberReference -> member', 'copy-member', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference']
copynode -8.069819196127355:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr MemberReference member unknown ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'copy-if_true']
copynode -8.00622404832393:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr MemberReference member NaN_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-if_true']
copynode -7.259826395660639:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -8.010756549425423:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr MemberReference member NaN_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-if_true']
copynode -7.259826395660639:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -8.275592483580112:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member INF_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MemberReference', 'MemberReference -> member', 'copy-member', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference']
copynode -8.038197218556888:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ReturnStatement expression Literal ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> Literal']
copynode -8.136994478292763:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr MemberReference member isZero_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-if_true']
copynode -8.205860015936196:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr MemberReference member unknown ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'copy-if_true']
copynode -7.670601644553244:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true BinaryOperation operator +_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr MemberReference member unknown ^ ^ ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'start -> unknown']
copynode -8.316849543713033:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference']
copynode -8.236342546530068:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr MemberReference member INF_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-if_true']
copynode -8.281277772970498:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr MemberReference member NaN_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-if_true']
copynode -7.141361679881811:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MethodInvocation arguments MemberReference member isZero_ter ^ ^ ^ ^ member unknown ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> member', 'copy-member', 'arguments -> End', 'start -> unknown', 'copy-if_false', 'root -> End']
copynode -7.364172648638487:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MethodInvocation arguments MemberReference member INF_ter ^ ^ ^ ^ member unknown ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> member', 'copy-member', 'arguments -> End', 'start -> unknown', 'copy-if_false', 'root -> End']
copynode -7.468997937161475:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true Cast type ReferenceType name Complex_ter ^ ^ ^ ^ expression MemberReference member par0 ^ ^ ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> Cast', 'Cast -> type expression', 'type -> ReferenceType', 'copy-ReferenceType', 'expression -> MemberReference', 'MemberReference -> member', 'member -> par0', 'copy-if_false', 'root -> End']
copynode -7.482515584677458:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MethodInvocation arguments MemberReference member NaN_ter ^ ^ ^ ^ member unknown ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> member', 'copy-member', 'arguments -> End', 'start -> unknown', 'copy-if_false', 'root -> End']
copynode -6.45796187594533:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -7.404475379735231:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr MemberReference member unknown ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'copy-if_true']
copynode -7.796687018591911:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true Cast type ReferenceType name Complex_ter ^ ^ ^ ^ expression MemberReference member isZero_ter ^ ^ ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> Cast', 'Cast -> type expression', 'type -> ReferenceType', 'copy-ReferenceType', 'expression -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-if_false', 'root -> End']
copynode -7.4906917065382:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'copy-if_true']
copynode -6.45796187594533:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -6.45796187594533:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -7.923023652750999:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true Cast type ReferenceType name Complex_ter ^ ^ ^ ^ expression MemberReference member NaN_ter ^ ^ ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> Cast', 'Cast -> type expression', 'type -> ReferenceType', 'copy-ReferenceType', 'expression -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-if_false', 'root -> End']
copynode -8.017146837431937:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true Cast type ReferenceType name Complex_ter ^ ^ ^ ^ expression MemberReference member INF_ter ^ ^ ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> Cast', 'Cast -> type expression', 'type -> ReferenceType', 'copy-ReferenceType', 'expression -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-if_false', 'root -> End']
copynode -7.6855823285877705:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr MemberReference member NaN_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-if_true']
copynode -7.7413614094257355:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr MemberReference member unknown ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'copy-if_true']
copynode -7.803876116871834:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr MemberReference member NaN_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-if_true']
copynode -7.83807473257184:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr MemberReference member isZero_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-if_true']
copynode -8.283438263460994:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false BinaryOperation operator +_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr MemberReference member ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member']
copynode -7.954692054539919:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr MemberReference member INF_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-if_true']
copynode -8.320049375295639:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false BinaryOperation operator -_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr MemberReference member ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member']
copynode -8.419131148606539:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MethodInvocation member unknown ^ ^ ^ ^ if_false TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'copy-if_false', 'root -> End']
copynode -8.389360744971782:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true Cast type ReferenceType name Complex_ter ^ ^ ^ ^ expression MethodInvocation qualifier Double_ter ^ ^ arguments MemberReference member ^ ^ ^ member ^ ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> Cast', 'Cast -> type expression', 'type -> ReferenceType', 'copy-ReferenceType', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'copy-qualifier', 'arguments -> MemberReference', 'MemberReference -> member']
copynode -8.140497282147408:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr MemberReference member unknown ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'copy-if_true']
copynode -8.103585556149483:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr MemberReference member isZero_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-if_true']
copynode -8.44315236620605:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false BinaryOperation operator +_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr MemberReference member ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member']
copynode -8.12578895688057:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr MemberReference member NaN_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-if_true']
copynode -8.475083261728287:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false BinaryOperation operator -_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr MemberReference member ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member']
copynode -8.21216133236885:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr MemberReference member isZero_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-if_true']
copynode -8.286328602582216:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'member -> par0', 'copy-if_true']
copynode -8.263263061642647:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr MemberReference member INF_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-if_true']
copynode -8.265090256929398:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr MemberReference member INF_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-if_true']
copynode -6.45796187594533:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0']
before@15 batch0 x: -8.642829117365181: root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr MemberReference member NaN_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-if_true']
after@15 batch0 x: -8.642829117365181: root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr MemberReference member NaN_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-if_true']
before@15 batch1 x: -8.67406328395009: root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0']
after@15 batch1 x: -8.67406328395009: root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0']
copynode -7.175318006426096:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'copy-if_true', 'copy-if_false']
copynode -7.204075560905039:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'copy-if_true', 'copy-if_false']
copynode -7.475371623411775:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'copy-if_true', 'copy-if_false']
copynode -7.501156750600785:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'copy-if_true', 'copy-if_false']
copynode -7.668835208751261:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'copy-if_true', 'copy-if_false']
copynode -7.716951307840645:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr MemberReference member unknown ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'copy-if_true', 'copy-if_false']
copynode -8.003575189970434:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -8.034793957136571:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -7.8284307243302464:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr MemberReference member unknown ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'copy-if_true', 'copy-if_false']
copynode -7.514780648052692:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr Literal ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> Literal']
copynode -7.538097985088825:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr Literal ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> Literal']
copynode -8.341636495664716:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member isZero_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MemberReference', 'MemberReference -> member', 'copy-member', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -7.514780648052692:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference']
copynode -8.433507322450168:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ReturnStatement expression Literal value ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> Literal', 'Literal -> value']
copynode -8.428985960781574:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member INF_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MemberReference', 'MemberReference -> member', 'copy-member', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -7.538097985088825:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference']
copynode -8.255248649977148:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr MemberReference member unknown ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'copy-if_true', 'copy-if_false']
copynode -7.895723827183247:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr Literal ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> Literal']
copynode -8.343065693043172:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr MemberReference member unknown ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'copy-if_true', 'copy-if_false']
copynode -7.6500201197341084:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false BinaryOperation operator +_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr MemberReference member unknown ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'start -> unknown']
copynode -8.132697370834649:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr MemberReference member isZero_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-if_true', 'copy-if_false']
copynode -8.3087876746431:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true BinaryOperation operator +_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr MemberReference member unknown ^ ^ ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'copy-if_false']
copynode -8.176229697652161:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr MemberReference member isZero_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-if_true', 'copy-if_false']
copynode -8.54779791738838:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -7.710904163308442:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false BinaryOperation operator -_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr MemberReference member unknown ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'start -> unknown']
copynode -8.292812612839043:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr MemberReference member INF_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-if_true', 'copy-if_false']
copynode -8.31965793389827:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr MemberReference member INF_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-if_true', 'copy-if_false']
copynode -7.7049333387985826:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false BinaryOperation operator +_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr MemberReference member unknown ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'start -> unknown']
copynode -8.526167658157647:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr MemberReference member unknown ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'copy-if_true', 'copy-if_false']
copynode -7.895723827183247:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference']
copynode -8.379864198155701:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr MemberReference member NaN_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-if_true', 'copy-if_false']
copynode -8.533524313010275:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true BinaryOperation operator +_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr MemberReference member unknown ^ ^ ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'copy-if_false']
copynode -8.389832940883934:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr MemberReference member NaN_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-if_true', 'copy-if_false']
copynode -8.380937073379755:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr Literal ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> Literal']
copynode -8.408439133316278:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr Literal ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> Literal']
copynode -7.77995699737221:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false BinaryOperation operator -_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr MemberReference member unknown ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'start -> unknown']
copynode -8.508739379234612:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr MemberReference member isZero_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-if_true', 'copy-if_false']
copynode -8.605498698540032:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr MemberReference member INF_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-if_true', 'copy-if_false']
copynode -7.740644562989473:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr MemberReference member unknown ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'copy-if_true', 'copy-if_false']
copynode -7.835820510983467:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'copy-if_true', 'copy-if_false']
copynode -7.612268526107073:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference']
copynode -8.076018065214157:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr MemberReference member unknown ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'copy-if_true', 'copy-if_false']
copynode -8.066738415509462:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr MemberReference member NaN_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-if_true', 'copy-if_false']
copynode -8.170335218310356:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr MemberReference member NaN_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-if_true', 'copy-if_false']
copynode -7.874078828841448:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference']
copynode -7.887695390731096:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference']
copynode -8.233263153582811:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr MemberReference member isZero_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-if_true', 'copy-if_false']
copynode -8.463559791445732:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr MemberReference member unknown ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'copy-if_true', 'copy-if_false']
copynode -8.3482372649014:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr MemberReference member INF_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-if_true', 'copy-if_false']
copynode -8.483355179429054:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr MemberReference member isZero_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-if_true', 'copy-if_false']
copynode -8.506264418363571:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr MemberReference member NaN_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-if_true', 'copy-if_false']
copynode -8.63517539575696:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'member -> par0', 'copy-if_true', 'copy-if_false']
copynode -8.606763243675232:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr MemberReference member isZero_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-if_true', 'copy-if_false']
copynode -8.641452088952065:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr MemberReference member INF_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-if_true', 'copy-if_false']
copynode -7.612268526107073:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr Literal ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> Literal']
copynode -8.657512694597244:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr MemberReference member INF_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-if_true', 'copy-if_false']
copynode -7.874078828841448:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr Literal ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> Literal']
copynode -7.887695390731096:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr Literal ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> Literal']
copynode -8.67406328395009:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> MemberReference']
copynode -8.319661384448409:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false BinaryOperation operator +_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr MemberReference member unknown ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'start -> unknown']
copynode -7.612268526107073:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr Literal value 0d_ter ^ ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-operandr']
before@16 batch0 x: -9.055068221874535: root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr MemberReference member INF_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-if_true', 'copy-if_false']
after@16 batch0 x: -9.055068221874535: root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr MemberReference member INF_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-if_true', 'copy-if_false']
before@16 batch1 x: -9.567774135619402: root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr Literal value 0d_ter ^ ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-operandr']
after@16 batch1 x: -9.567774135619402: root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr Literal value 0d_ter ^ ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-operandr']
copynode -7.454968873411417:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'copy-if_true', 'copy-if_false', 'root -> End']
copynode -7.482275233604014:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'copy-if_true', 'copy-if_false', 'root -> End']
copynode -7.777849340811372:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'copy-if_true', 'copy-if_false', 'root -> End']
copynode -7.8022178444080055:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'copy-if_true', 'copy-if_false', 'root -> End']
copynode -7.939735517837107:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'copy-if_true', 'copy-if_false', 'root -> End']
copynode -8.007348594255745:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr MemberReference member unknown ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'copy-if_true', 'copy-if_false', 'root -> End']
copynode -8.118077320046723:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr MemberReference member unknown ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'copy-if_true', 'copy-if_false', 'root -> End']
copynode -8.17044336348772:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr Literal value ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> Literal', 'Literal -> value']
copynode -8.177644319832325:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr Literal value ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> Literal', 'Literal -> value']
copynode -8.478685944341123:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr MemberReference member unknown ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'copy-if_true', 'copy-if_false', 'root -> End']
copynode -8.42361719161272:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr MemberReference member ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member']
copynode -8.461263246834278:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr MemberReference member ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member']
copynode -8.551809914410114:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr Literal value ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> Literal', 'Literal -> value']
copynode -8.565514563582838:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr MemberReference member unknown ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'copy-if_true', 'copy-if_false', 'root -> End']
copynode -8.575368043966591:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false BinaryOperation operator +_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr MemberReference member unknown ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'root -> End']
copynode -8.590362218208611:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr MemberReference member isZero_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-if_true', 'copy-if_false', 'root -> End']
copynode -8.613160134293139:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true BinaryOperation operator +_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr MemberReference member unknown ^ ^ ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'copy-if_false', 'root -> End']
copynode -8.63236187119037:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr MemberReference member isZero_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-if_true', 'copy-if_false', 'root -> End']
copynode -8.673735898919404:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false BinaryOperation operator -_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr MemberReference member unknown ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'root -> End']
copynode -8.753164854831994:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr MemberReference member INF_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-if_true', 'copy-if_false', 'root -> End']
copynode -8.778588962741196:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr MemberReference member INF_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-if_true', 'copy-if_false', 'root -> End']
copynode -8.797015839256346:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false BinaryOperation operator +_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr MemberReference member unknown ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'root -> End']
copynode -8.435929068713449:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> Literal', 'Literal -> value', 'value -> null_ter']
copynode -8.809373286552727:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr MemberReference member unknown ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'copy-if_true', 'copy-if_false', 'root -> End']
copynode -8.832181078381836:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr MemberReference member NaN_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-if_true', 'copy-if_false', 'root -> End']
copynode -8.836570360697806:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true BinaryOperation operator +_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr MemberReference member unknown ^ ^ ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'copy-if_false', 'root -> End']
copynode -8.84355863649398:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr MemberReference member NaN_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-if_true', 'copy-if_false', 'root -> End']
copynode -8.849673215299845:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr Literal value ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> Literal', 'Literal -> value']
copynode -8.86540350690484:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr Literal value ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> Literal', 'Literal -> value']
copynode -8.812010534107685:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr MemberReference member ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member']
copynode -8.909803212620318:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false BinaryOperation operator -_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr MemberReference member unknown ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'root -> End']
copynode -8.955446031875908:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr MemberReference member isZero_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-if_true', 'copy-if_false', 'root -> End']
copynode -9.055068221874535:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr MemberReference member INF_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-if_true', 'copy-if_false', 'root -> End']
copynode -8.368241956457496:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member isZero_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member unknown ^ ^ ^ ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MemberReference', 'MemberReference -> member', 'copy-member', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'start -> unknown']
copynode -8.08028110023588:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -8.115281074307859:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -8.456541081890464:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member INF_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member unknown ^ ^ ^ ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MemberReference', 'MemberReference -> member', 'copy-member', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'start -> unknown']
copynode -8.08028110023588:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -7.914068449288607:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr MemberReference member unknown ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'copy-if_true', 'copy-if_false', 'root -> End']
copynode -8.004165783524513:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'copy-if_true', 'copy-if_false', 'root -> End']
copynode -8.252651527523994:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr MemberReference member unknown ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'copy-if_true', 'copy-if_false', 'root -> End']
copynode -8.230440873652697:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr MemberReference member ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member']
copynode -8.365278977900743:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr MemberReference member NaN_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-if_true', 'copy-if_false', 'root -> End']
copynode -8.459991678595543:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr MemberReference member NaN_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-if_true', 'copy-if_false', 'root -> End']
copynode -8.47570951655507:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr MemberReference member ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member']
copynode -8.533542204648256:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr MemberReference member isZero_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-if_true', 'copy-if_false', 'root -> End']
copynode -8.493165034800768:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr MemberReference member ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member']
copynode -8.631362095475197:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr MemberReference member unknown ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'copy-if_true', 'copy-if_false', 'root -> End']
copynode -8.654998619109392:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr MemberReference member INF_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-if_true', 'copy-if_false', 'root -> End']
copynode -8.774474635720253:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr MemberReference member isZero_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-if_true', 'copy-if_false', 'root -> End']
copynode -8.808510959148407:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr MemberReference member NaN_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-if_true', 'copy-if_false', 'root -> End']
copynode -8.88565193489194:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'member -> par0', 'copy-if_true', 'copy-if_false', 'root -> End']
copynode -8.910741776227951:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr MemberReference member isZero_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-if_true', 'copy-if_false', 'root -> End']
copynode -8.939029231667519:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr MemberReference member INF_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-if_true', 'copy-if_false', 'root -> End']
copynode -8.967982530593872:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr MemberReference member INF_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-if_true', 'copy-if_false', 'root -> End']
copynode -8.948118884116411:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr Literal value ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> Literal', 'Literal -> value']
copynode -9.225349146872759:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr Literal value ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> Literal', 'Literal -> value']
copynode -9.267500836402178:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr Literal value ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> Literal', 'Literal -> value']
copynode -9.410867888480425:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr MemberReference member ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> MemberReference', 'MemberReference -> member']
copynode -9.552903419360518:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false BinaryOperation operator +_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr MemberReference member unknown ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'root -> End']
copynode -9.567774135619402:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr Literal value 0d_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-operandr', 'copy-if_true']
before@17 batch0 x: -9.488511047326028: root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member']
after@17 batch0 x: -9.488511047326028: root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member']
before@17 batch1 x: -9.827548194676638: root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr Literal value 0d_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-operandr', 'copy-if_true']
after@17 batch1 x: -9.827548194676638: root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr Literal value 0d_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-operandr', 'copy-if_true']
copynode -8.17599758086726:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter']
copynode -8.18317761970684:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter']
copynode -8.557442352175713:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter']
copynode -8.800928392796777:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> End']
copynode -8.856593902222812:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter']
copynode -8.872301626484841:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter']
copynode -8.491842992603779:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr MemberReference member unknown ^ ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'start -> unknown']
copynode -8.534036606550217:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr MemberReference member unknown ^ ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'start -> unknown']
copynode -9.213143279775977:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member isZero_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member unknown ^ ^ ^ ^ operandr Literal ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MemberReference', 'MemberReference -> member', 'copy-member', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'operandr -> Literal']
copynode -8.898207485675812:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr MemberReference member unknown ^ ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'start -> unknown']
copynode -9.277644000016153:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference']
copynode -9.317424266599119:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference']
copynode -9.472316285595298:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member INF_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member unknown ^ ^ ^ ^ operandr Literal ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MemberReference', 'MemberReference -> member', 'copy-member', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'operandr -> Literal']
copynode -9.488511047326028:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference']
copynode -8.291978172957897:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr MemberReference member unknown ^ ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'start -> unknown']
copynode -9.030668627470732:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter']
copynode -8.536725461483002:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr MemberReference member unknown ^ ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'start -> unknown']
copynode -9.309846546500921:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter']
copynode -9.353410851210356:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter']
copynode -8.567224379628897:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr MemberReference member unknown ^ ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'start -> unknown']
copynode -8.291978172957897:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'member -> par0']
copynode -8.567224379628897:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr MemberReference member NaN_ter ^ ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'copy-member']
before@18 batch0 x: -10.140982053242624: root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference']
after@18 batch0 x: -10.140982053242624: root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference']
before@18 batch1 x: -10.153369780629873: root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr MemberReference member NaN_ter ^ ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'copy-member']
after@18 batch1 x: -10.153369780629873: root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr MemberReference member NaN_ter ^ ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -8.2334846961312:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'copy-if_true']
copynode -8.237250230740756:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'copy-if_true']
copynode -8.615316540002823:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'copy-if_true']
copynode -8.88646329101175:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'copy-if_true']
copynode -8.90057692816481:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'copy-if_true']
copynode -8.992216594517231:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr MemberReference member unknown ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'copy-if_true']
copynode -9.122840374708176:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr MemberReference member unknown ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'copy-if_true']
copynode -9.821087231859565:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member isZero_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member unknown ^ ^ ^ ^ operandr Literal value ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MemberReference', 'MemberReference -> member', 'copy-member', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'operandr -> Literal', 'Literal -> value']
copynode -9.909837088547647:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr MemberReference member ^ ^ ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member']
copynode -10.074601968750358:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member INF_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member unknown ^ ^ ^ ^ operandr Literal value ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MemberReference', 'MemberReference -> member', 'copy-member', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'operandr -> Literal', 'Literal -> value']
copynode -9.857535302639008:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr MemberReference member unknown ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'copy-if_true']
copynode -9.96024355199188:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr MemberReference member ^ ^ ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member']
copynode -8.2334846961312:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ if_true MemberReference ^ ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'if_true -> MemberReference']
copynode -8.856835655868053:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr MemberReference member unknown ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'copy-if_true']
copynode -9.058461137115955:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'copy-if_true']
copynode -9.099256575107574:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr MemberReference member unknown ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'copy-if_true']
copynode -9.338466370478272:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'copy-if_true']
copynode -9.385611448436975:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'copy-if_true']
copynode -9.773390885442495:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr MemberReference member unknown ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'copy-if_true']
copynode -9.995191030204296:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'member -> par0', 'copy-if_true']
copynode -10.153369780629873:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr MemberReference member NaN_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-if_true']
before@19 batch0 x: -10.24438590882346: root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ if_true MemberReference ^ ^ if_false ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'if_true -> MemberReference']
after@19 batch0 x: -10.24438590882346: root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ if_true MemberReference ^ ^ if_false ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'if_true -> MemberReference']
before@19 batch1 x: -10.408714469522238: root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr MemberReference member NaN_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-if_true']
after@19 batch1 x: -10.408714469522238: root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr MemberReference member NaN_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-if_true']
copynode -8.529182087164372:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'copy-if_true', 'copy-if_false']
copynode -8.532025061082095:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'copy-if_true', 'copy-if_false']
copynode -8.898391276597977:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'copy-if_true', 'copy-if_false']
copynode -9.253351666033268:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr MemberReference member unknown ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'copy-if_true', 'copy-if_false']
copynode -9.199800438247621:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'copy-if_true', 'copy-if_false']
copynode -9.212715873029083:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'copy-if_true', 'copy-if_false']
copynode -9.384258598089218:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr MemberReference member unknown ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'copy-if_true', 'copy-if_false']
copynode -9.829589458182454:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member isZero_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member unknown ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MemberReference', 'MemberReference -> member', 'copy-member', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter']
copynode -10.083170742727816:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member INF_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member unknown ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MemberReference', 'MemberReference -> member', 'copy-member', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter']
copynode -10.110219955444336:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr MemberReference member unknown ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'copy-if_true', 'copy-if_false']
copynode -10.24438590882346:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member ^ ^ ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'if_true -> MemberReference', 'MemberReference -> member']
copynode -8.529182087164372:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'copy-if_true', 'if_false -> MemberReference']
copynode -8.532025061082095:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'copy-if_true', 'if_false -> MemberReference']
copynode -9.102744109928608:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr MemberReference member unknown ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'copy-if_true', 'copy-if_false']
copynode -9.347276225686073:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr MemberReference member unknown ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'copy-if_true', 'copy-if_false']
copynode -9.320507116615772:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'copy-if_true', 'copy-if_false']
copynode -9.602773601189256:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'copy-if_true', 'copy-if_false']
copynode -9.636257532984018:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'copy-if_true', 'copy-if_false']
copynode -10.011036362498999:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr MemberReference member unknown ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'copy-if_true', 'copy-if_false']
copynode -10.246309541165829:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'member -> par0', 'copy-if_true', 'copy-if_false']
copynode -10.408714469522238:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr MemberReference member NaN_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-if_true', 'copy-if_false']
before@20 batch0 x: -10.524681292008609: root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference ^ ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'copy-if_true', 'if_false -> MemberReference']
after@20 batch0 x: -10.524681292008609: root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference ^ ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'copy-if_true', 'if_false -> MemberReference']
before@20 batch1 x: -10.746491100639105: root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr MemberReference member NaN_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-if_true', 'copy-if_false']
after@20 batch1 x: -10.746491100639105: root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr MemberReference member NaN_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-if_true', 'copy-if_false']
copynode -8.888911496382207:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'copy-if_true', 'copy-if_false', 'root -> End']
copynode -8.892951182555407:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'copy-if_true', 'copy-if_false', 'root -> End']
copynode -9.246288001537323:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'copy-if_true', 'copy-if_false', 'root -> End']
copynode -9.48876427859068:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr MemberReference member unknown ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'copy-if_true', 'copy-if_false', 'root -> End']
copynode -9.575984663330019:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'copy-if_true', 'copy-if_false', 'root -> End']
copynode -9.590034404303879:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'copy-if_true', 'copy-if_false', 'root -> End']
copynode -9.62107202410698:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr MemberReference member unknown ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'copy-if_true', 'copy-if_false', 'root -> End']
copynode -10.340047910809517:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr MemberReference member unknown ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'copy-if_true', 'copy-if_false', 'root -> End']
copynode -9.935031266883016:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member isZero_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member unknown ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MemberReference', 'MemberReference -> member', 'copy-member', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'copy-if_true']
copynode -10.52215815661475:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'copy-if_true', 'if_false -> MemberReference', 'MemberReference -> member']
copynode -10.524681292008609:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'copy-if_true', 'if_false -> MemberReference', 'MemberReference -> member']
copynode -10.188471616245806:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member INF_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member unknown ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MemberReference', 'MemberReference -> member', 'copy-member', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'copy-if_true']
copynode -10.351145687978715:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member isZero_ter ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'if_true -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -9.315870307385921:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr MemberReference member unknown ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'copy-if_true', 'copy-if_false', 'root -> End']
copynode -9.563817664980888:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr MemberReference member unknown ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'copy-if_true', 'copy-if_false', 'root -> End']
copynode -9.625536926090717:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'copy-if_true', 'copy-if_false', 'root -> End']
copynode -9.912889743223786:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'copy-if_true', 'copy-if_false', 'root -> End']
copynode -9.931537929922342:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'copy-if_true', 'copy-if_false', 'root -> End']
copynode -10.217594545334578:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr MemberReference member unknown ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'copy-if_true', 'copy-if_false', 'root -> End']
copynode -10.556387983262539:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'member -> par0', 'copy-if_true', 'copy-if_false', 'root -> End']
copynode -10.746491100639105:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member NaN_ter ^ ^ ^ ^ operandr MemberReference member NaN_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> MemberReference', 'MemberReference -> member', 'copy-member', 'copy-if_true', 'copy-if_false', 'root -> End']
before@21 batch0 x: -11.314790311735123: root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member isZero_ter ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'if_true -> MemberReference', 'MemberReference -> member', 'copy-member']
after@21 batch0 x: -11.314790311735123: root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member isZero_ter ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'if_true -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -10.368912668898702:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member isZero_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member unknown ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MemberReference', 'MemberReference -> member', 'copy-member', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'copy-if_true', 'copy-if_false']
copynode -10.63174116704613:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member INF_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member unknown ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MemberReference', 'MemberReference -> member', 'copy-member', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'copy-if_true', 'copy-if_false']
copynode -10.614261026959866:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member isZero_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'copy-if_true', 'if_false -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -10.61830861819908:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member isZero_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'copy-if_true', 'if_false -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -10.614261026959866:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'copy-if_true', 'if_false -> MemberReference', 'MemberReference -> member', 'copy-member']
before@22 batch0 x: -11.65000283299014: root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'copy-if_true', 'if_false -> MemberReference', 'MemberReference -> member', 'copy-member']
after@22 batch0 x: -11.65000283299014: root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'copy-if_true', 'if_false -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -10.647080602124333:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member isZero_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member unknown ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MemberReference', 'MemberReference -> member', 'copy-member', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'copy-if_true', 'copy-if_false', 'root -> End']
copynode -10.912990153767169:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member INF_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member unknown ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'if_true -> MemberReference', 'MemberReference -> member', 'copy-member', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'copy-if_true', 'copy-if_false', 'root -> End']
copynode -11.564786370377988:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member isZero_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'copy-if_true', 'if_false -> MemberReference', 'MemberReference -> member', 'copy-member', 'root -> End']
copynode -11.57755561126396:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member INF_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member isZero_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'copy-if_true', 'if_false -> MemberReference', 'MemberReference -> member', 'copy-member', 'root -> End']
copynode -11.65000283299014:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isZero_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'copy-condition', 'copy-if_true', 'if_false -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'copy-if_true', 'if_false -> MemberReference', 'MemberReference -> member', 'copy-member', 'root -> End']
6 INF_ter
6 isZero_ter
6 NaN_ter
6 INF_ter
6 isZero_ter
method
7 
double  abs 
Complex  add 
Complex  add 
Complex  conjugate 
Complex  divide 
Complex  divide 
boolean  equals 
int  hashCode 
double  getImaginary 
double  getReal 
boolean  isNaN 
boolean  isInfinite 
Complex  multiply 
Complex  multiply 
Complex  negate 
Complex  subtract 
Complex  subtract 
Complex  acos 
Complex  asin 
Complex  atan 
Complex  cos 
Complex  cosh 
Complex  exp 
Complex  log 
Complex  pow 
Complex  pow 
Complex  sin 
Complex  sinh 
Complex  sqrt 
Complex  sqrt1z 
Complex  tan 
Complex  tanh 
double  getArgument 
List  nthRoot 
Complex  createComplex 
Complex  valueOf 
Complex  valueOf 
Object  readResolve 
ComplexField  getField 
String  toString 
6 INF_ter
6 NaN_ter
6 INF_ter
6 isZero_ter
6 isZero_ter
6 INF_ter
6 isZero_ter
method
7 
6 INF_ter
6 INF_ter
6 isZero_ter
6 isZero_ter
6 isZero_ter
6 INF_ter
method
7 
6 NaN_ter
method
7 
6 NaN_ter
method
7 
double  abs 
Complex  add 
Complex  add 
Complex  conjugate 
Complex  divide 
Complex  divide 
boolean  equals 
int  hashCode 
double  getImaginary 
double  getReal 
boolean  isNaN 
boolean  isInfinite 
Complex  multiply 
Complex  multiply 
Complex  negate 
Complex  subtract 
Complex  subtract 
Complex  acos 
Complex  asin 
Complex  atan 
Complex  cos 
Complex  cosh 
Complex  exp 
Complex  log 
Complex  pow 
Complex  pow 
Complex  sin 
Complex  sinh 
Complex  sqrt 
Complex  sqrt1z 
Complex  tan 
Complex  tanh 
double  getArgument 
List  nthRoot 
Complex  createComplex 
Complex  valueOf 
Complex  valueOf 
Object  readResolve 
ComplexField  getField 
String  toString 
6 NaN_ter
6 isZero_ter
6 NaN_ter
6 NaN_ter
6 isZero_ter
method
7 
6 NaN_ter
6 isZero_ter
6 NaN_ter
6 INF_ter
6 isZero_ter
6 INF_ter
6 isZero_ter
6 isZero_ter
6 isZero_ter
6 INF_ter
6 isZero_ter
6 INF_ter
method
7 
double  abs 
Complex  add 
Complex  add 
Complex  conjugate 
Complex  divide 
Complex  divide 
boolean  equals 
int  hashCode 
double  getImaginary 
double  getReal 
boolean  isNaN 
boolean  isInfinite 
Complex  multiply 
Complex  multiply 
Complex  negate 
Complex  subtract 
Complex  subtract 
Complex  acos 
Complex  asin 
Complex  atan 
Complex  cos 
Complex  cosh 
Complex  exp 
Complex  log 
Complex  pow 
Complex  pow 
Complex  sin 
Complex  sinh 
Complex  sqrt 
Complex  sqrt1z 
Complex  tan 
Complex  tanh 
double  getArgument 
List  nthRoot 
Complex  createComplex 
Complex  valueOf 
Complex  valueOf 
Object  readResolve 
ComplexField  getField 
String  toString 
6 INF_ter
6 isZero_ter
6 INF_ter
6 isZero_ter
6 INF_ter
6 INF_ter
6 NaN_ter
6 NaN_ter
6 INF_ter
6 isZero_ter
6 INF_ter
method
7 
6 isZero_ter
6 INF_ter
6 INF_ter
6 isZero_ter
method
7 
6 isZero_ter
method
7 
6 INF_ter
6 isZero_ter
6 NaN_ter
6 INF_ter
6 INF_ter
6 isZero_ter
method
7 
double  abs 
Complex  add 
Complex  add 
Complex  conjugate 
Complex  divide 
Complex  divide 
boolean  equals 
int  hashCode 
double  getImaginary 
double  getReal 
boolean  isNaN 
boolean  isInfinite 
Complex  multiply 
Complex  multiply 
Complex  negate 
Complex  subtract 
Complex  subtract 
Complex  acos 
Complex  asin 
Complex  atan 
Complex  cos 
Complex  cosh 
Complex  exp 
Complex  log 
Complex  pow 
Complex  pow 
Complex  sin 
Complex  sinh 
Complex  sqrt 
Complex  sqrt1z 
Complex  tan 
Complex  tanh 
double  getArgument 
List  nthRoot 
Complex  createComplex 
Complex  valueOf 
Complex  valueOf 
Object  readResolve 
ComplexField  getField 
String  toString 
6 NaN_ter
method
Double_ter {'divisor_ter': 'double'}
Double_ter I
Double_ter NaN
Double_ter INF
Double_ter ONE
Double_ter ZERO
Double_ter serialVersionUID
Double_ter imaginary
Double_ter real
Double_ter isNaN
Double_ter isInfinite
Double_ter isZero
7 
method
7 
method
7 
double  abs 
Complex  add 
Complex  add 
Complex  conjugate 
Complex  divide 
Complex  divide 
boolean  equals 
int  hashCode 
double  getImaginary 
double  getReal 
boolean  isNaN 
boolean  isInfinite 
Complex  multiply 
Complex  multiply 
Complex  negate 
Complex  subtract 
Complex  subtract 
Complex  acos 
Complex  asin 
Complex  atan 
Complex  cos 
Complex  cosh 
Complex  exp 
Complex  log 
Complex  pow 
Complex  pow 
Complex  sin 
Complex  sinh 
Complex  sqrt 
Complex  sqrt1z 
Complex  tan 
Complex  tanh 
double  getArgument 
List  nthRoot 
Complex  createComplex 
Complex  valueOf 
Complex  valueOf 
Object  readResolve 
ComplexField  getField 
String  toString 
6 NaN_ter
6 isZero_ter
6 isZero_ter
6 isZero_ter
6 NaN_ter
6 NaN_ter
6 NaN_ter
method
7 
double  abs 
Complex  add 
Complex  add 
Complex  conjugate 
Complex  divide 
Complex  divide 
boolean  equals 
int  hashCode 
double  getImaginary 
double  getReal 
boolean  isNaN 
boolean  isInfinite 
Complex  multiply 
Complex  multiply 
Complex  negate 
Complex  subtract 
Complex  subtract 
Complex  acos 
Complex  asin 
Complex  atan 
Complex  cos 
Complex  cosh 
Complex  exp 
Complex  log 
Complex  pow 
Complex  pow 
Complex  sin 
Complex  sinh 
Complex  sqrt 
Complex  sqrt1z 
Complex  tan 
Complex  tanh 
double  getArgument 
List  nthRoot 
Complex  createComplex 
Complex  valueOf 
Complex  valueOf 
Object  readResolve 
ComplexField  getField 
String  toString 
method
7 
double  abs 
Complex  add 
Complex  add 
Complex  conjugate 
Complex  divide 
Complex  divide 
boolean  equals 
int  hashCode 
double  getImaginary 
double  getReal 
boolean  isNaN 
boolean  isInfinite 
Complex  multiply 
Complex  multiply 
Complex  negate 
Complex  subtract 
Complex  subtract 
Complex  acos 
Complex  asin 
Complex  atan 
Complex  cos 
Complex  cosh 
Complex  exp 
Complex  log 
Complex  pow 
Complex  pow 
Complex  sin 
Complex  sinh 
Complex  sqrt 
Complex  sqrt1z 
Complex  tan 
Complex  tanh 
double  getArgument 
List  nthRoot 
Complex  createComplex 
Complex  valueOf 
Complex  valueOf 
Object  readResolve 
ComplexField  getField 
String  toString 
6 INF_ter
method
7 
double  abs 
Complex  add 
Complex  add 
Complex  conjugate 
Complex  divide 
Complex  divide 
boolean  equals 
int  hashCode 
double  getImaginary 
double  getReal 
boolean  isNaN 
boolean  isInfinite 
Complex  multiply 
Complex  multiply 
Complex  negate 
Complex  subtract 
Complex  subtract 
Complex  acos 
Complex  asin 
Complex  atan 
Complex  cos 
Complex  cosh 
Complex  exp 
Complex  log 
Complex  pow 
Complex  pow 
Complex  sin 
Complex  sinh 
Complex  sqrt 
Complex  sqrt1z 
Complex  tan 
Complex  tanh 
double  getArgument 
List  nthRoot 
Complex  createComplex 
Complex  valueOf 
Complex  valueOf 
Object  readResolve 
ComplexField  getField 
String  toString 
6 INF_ter
stderr: Check out e6f27ebc to /root/projects/Recoder-bwk/buggy/Math-46............. OK
Init local repository...................................................... OK
Tag post-fix revision...................................................... OK
Initialize fixed program version........................................... OK
Apply patch................................................................ OK
Initialize buggy program version........................................... OK
Diff e6f27ebc:330f3fe1..................................................... OK
Apply patch................................................................ OK
Tag pre-fix revision....................................................... OK
Check out program version: Math-46b........................................ OK
OpenJDK 64-Bit Server VM warning: ignoring option MaxPermSize=1G; support was removed in 8.0
Running ant (export.dir.src.classes)....................................... OK

  0%|          | 0/1 [00:00<?, ?it/s]/root/projects/Recoder-bwk/run.py:527: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  tmpdepth = np.array(tmpdepth)
/root/envs/recoder/lib/python3.7/site-packages/torch/nn/functional.py:1340: UserWarning: nn.functional.tanh is deprecated. Use torch.tanh instead.
  warnings.warn("nn.functional.tanh is deprecated. Use torch.tanh instead.")
100%|██████████| 1/1 [00:30<00:00, 30.00s/it]100%|██████████| 1/1 [00:30<00:00, 30.00s/it]
