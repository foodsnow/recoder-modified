stdout: else_statement -> BlockStatement
using GPU
p
path org.apache.commons.math.linear.EigenDecompositionImpl
flipIfWarranted
Position(line=1132, column=13)
FOUND IT!
[{'bugid': 'Math-80', 'treeroot': <Searchnode.Node object at 0x7f0afe8778d0>, 'troot': <Searchnode.Node object at 0x7f0afe8778d0>, 'oldcode': '            int j = 4 * n - 1;', 'filepath': 'buggy/Math-80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java', 'subroot': <Searchnode.Node object at 0x7f0afe87ef90>, 'vardic': {'flipIfWarranted_ter': 'meth0', 'n_ter': 'par0', 'step_ter': 'par1', 'j_ter': 'loc0', 'i_ter': 'loc1', 'k_ter': 'loc2', 'tmp_ter': 'loc3'}, 'typedic': {'n_ter': 'int', 'step_ter': 'int', 'j_ter': 'int', 'i_ter': 'int', 'k_ter': 'int', 'tmp_ter': 'double'}, 'idss': 'Math-80', 'classname': 'org.apache.commons.math.linear.EigenDecompositionImpl', 'precode': '/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the "License"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.commons.math.linear;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\nimport org.apache.commons.math.MathRuntimeException;\nimport org.apache.commons.math.MaxIterationsExceededException;\nimport org.apache.commons.math.util.MathUtils;\n\n/**\n * Calculates the eigen decomposition of a <strong>symmetric</strong> matrix.\n * <p>The eigen decomposition of matrix A is a set of two matrices:\n * V and D such that A = V D V<sup>T</sup>. A, V and D are all m &times; m\n * matrices.</p>\n * <p>As of 2.0, this class supports only <strong>symmetric</strong> matrices,\n * and hence computes only real realEigenvalues. This implies the D matrix returned by\n * {@link #getD()} is always diagonal and the imaginary values returned {@link\n * #getImagEigenvalue(int)} and {@link #getImagEigenvalues()} are always null.</p>\n * <p>When called with a {@link RealMatrix} argument, this implementation only uses\n * the upper part of the matrix, the part below the diagonal is not accessed at all.</p>\n * <p>Eigenvalues are computed as soon as the matrix is decomposed, but eigenvectors\n * are computed only when required, i.e. only when one of the {@link #getEigenvector(int)},\n * {@link #getV()}, {@link #getVT()}, {@link #getSolver()} methods is called.</p>\n * <p>This implementation is based on Inderjit Singh Dhillon thesis\n * <a href="http://www.cs.utexas.edu/users/inderjit/public_papers/thesis.pdf">A\n * New O(n<sup>2</sup>) Algorithm for the Symmetric Tridiagonal Eigenvalue/Eigenvector\n * Problem</a>, on Beresford N. Parlett and Osni A. Marques paper <a\n * href="http://www.netlib.org/lapack/lawnspdf/lawn155.pdf">An Implementation of the\n * dqds Algorithm (Positive Case)</a> and on the corresponding LAPACK routines (DLARRE,\n * DLASQ2, DLAZQ3, DLAZQ4, DLASQ5 and DLASQ6).</p>\n * <p>The authors of the original fortran version are:\n *   <ul>\n *     <li>Beresford Parlett, University of California, Berkeley, USA</li>\n *     <li>Jim Demmel, University of California, Berkeley, USA</li>\n *     <li>Inderjit Dhillon, University of Texas, Austin, USA</li>\n *     <li>Osni Marques, LBNL/NERSC, USA</li>\n *     <li>Christof Voemel, University of California, Berkeley, USA</li>\n *   </ul>\n * </p>\n * @version $Revision$ $Date$\n * @since 2.0\n */\npublic class EigenDecompositionImpl implements EigenDecomposition {\n\n    /** Tolerance. */\n    private static final double TOLERANCE = 100 * MathUtils.EPSILON;\n\n    /** Squared tolerance. */\n    private static final double TOLERANCE_2 = TOLERANCE * TOLERANCE;\n\n    /** Split tolerance. */\n    private double splitTolerance;\n\n    /** Main diagonal of the tridiagonal matrix. */\n    private double[] main;\n\n    /** Secondary diagonal of the tridiagonal matrix. */\n    private double[] secondary;\n\n    /** Squared secondary diagonal of the tridiagonal matrix. */\n    private double[] squaredSecondary;\n\n    /** Transformer to tridiagonal (may be null if matrix is already tridiagonal). */\n    private TriDiagonalTransformer transformer;\n\n    /** Lower bound of spectra. */\n    private double lowerSpectra;\n\n    /** Upper bound of spectra. */\n    private double upperSpectra;\n\n    /** Minimum pivot in the Sturm sequence. */\n    private double minPivot;\n\n    /** Current shift. */\n    private double sigma;\n\n    /** Low part of the current shift. */\n    private double sigmaLow;\n\n    /** Shift increment to apply. */\n    private double tau;\n\n    /** Work array for all decomposition algorithms. */\n    private double[] work;\n\n    /** Shift within qd array for ping-pong implementation. */\n    private int pingPong;\n\n    /** Max value of diagonal elements in current segment. */\n    private double qMax;\n\n    /** Min value of off-diagonal elements in current segment. */\n    private double eMin;\n\n    /** Type of the last dqds shift. */\n    private int    tType;\n\n    /** Minimal value on current state of the diagonal. */\n    private double dMin;\n\n    /** Minimal value on current state of the diagonal, excluding last element. */\n    private double dMin1;\n\n    /** Minimal value on current state of the diagonal, excluding last two elements. */\n    private double dMin2;\n\n    /** Last value on current state of the diagonal. */\n    private double dN;\n\n    /** Last but one value on current state of the diagonal. */\n    private double dN1;\n\n    /** Last but two on current state of the diagonal. */\n    private double dN2;\n\n    /** Shift ratio with respect to dMin used when tType == 6. */\n    private double g;\n\n    /** Real part of the realEigenvalues. */\n    private double[] realEigenvalues;\n\n    /** Imaginary part of the realEigenvalues. */\n    private double[] imagEigenvalues;\n\n    /** Eigenvectors. */\n    private ArrayRealVector[] eigenvectors;\n\n    /** Cached value of V. */\n    private RealMatrix cachedV;\n\n    /** Cached value of D. */\n    private RealMatrix cachedD;\n\n    /** Cached value of Vt. */\n    private RealMatrix cachedVt;\n\n    /**\n     * Calculates the eigen decomposition of the given symmetric matrix.\n     * @param matrix The <strong>symmetric</strong> matrix to decompose.\n     * @param splitTolerance tolerance on the off-diagonal elements relative to the\n     * geometric mean to split the tridiagonal matrix (a suggested value is\n     * {@link MathUtils#SAFE_MIN})\n     * @exception InvalidMatrixException (wrapping a {@link\n     * org.apache.commons.math.ConvergenceException} if algorithm fails to converge\n     */\n    public EigenDecompositionImpl(final RealMatrix matrix,\n                                  final double splitTolerance)\n        throws InvalidMatrixException {\n        if (isSymmetric(matrix)) {\n            this.splitTolerance = splitTolerance;\n            transformToTridiagonal(matrix);\n            decompose();\n        } else {\n            // as of 2.0, non-symmetric matrices (i.e. complex eigenvalues) are NOT supported\n            // see issue https://issues.apache.org/jira/browse/MATH-235\n            throw new InvalidMatrixException("eigen decomposition of assymetric matrices not supported yet");\n        }\n    }\n\n    /**\n     * Calculates the eigen decomposition of the given tridiagonal symmetric matrix.\n     * @param main the main diagonal of the matrix (will be copied)\n     * @param secondary the secondary diagonal of the matrix (will be copied)\n     * @param splitTolerance tolerance on the off-diagonal elements relative to the\n     * geometric mean to split the tridiagonal matrix (a suggested value is\n     * {@link MathUtils#SAFE_MIN})\n     * @exception InvalidMatrixException (wrapping a {@link\n     * org.apache.commons.math.ConvergenceException} if algorithm fails to converge\n     */\n    public EigenDecompositionImpl(final double[] main, double[] secondary,\n            final double splitTolerance)\n        throws InvalidMatrixException {\n\n        this.main      = main.clone();\n        this.secondary = secondary.clone();\n        transformer    = null;\n\n        // pre-compute some elements\n        squaredSecondary = new double[secondary.length];\n        for (int i = 0; i < squaredSecondary.length; ++i) {\n            final double s = secondary[i];\n            squaredSecondary[i] = s * s;\n        }\n\n        this.splitTolerance = splitTolerance;\n        decompose();\n\n    }\n\n    /**\n     * Check if a matrix is symmetric.\n     * @param matrix matrix to check\n     * @return true if matrix is symmetric\n     */\n    private boolean isSymmetric(final RealMatrix matrix) {\n        final int rows    = matrix.getRowDimension();\n        final int columns = matrix.getColumnDimension();\n        final double eps  = 10 * rows * columns * MathUtils.EPSILON;\n        for (int i = 0; i < rows; ++i) {\n            for (int j = i + 1; j < columns; ++j) {\n                final double mij = matrix.getEntry(i, j);\n                final double mji = matrix.getEntry(j, i);\n                if (Math.abs(mij - mji) > (Math.max(Math.abs(mij), Math.abs(mji)) * eps)) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Decompose a tridiagonal symmetric matrix.\n     * @exception InvalidMatrixException (wrapping a {@link\n     * org.apache.commons.math.ConvergenceException} if algorithm fails to converge\n     */\n    private void decompose() {\n\n        cachedV  = null;\n        cachedD  = null;\n        cachedVt = null;\n        work     = new double[6 * main.length];\n\n        // compute the Gershgorin circles\n        computeGershgorinCircles();\n\n        // find all the realEigenvalues\n        findEigenvalues();\n\n        // we will search for eigenvectors only if required\n        eigenvectors = null;\n\n    }\n\n    /** {@inheritDoc} */\n    public RealMatrix getV()\n        throws InvalidMatrixException {\n\n        if (cachedV == null) {\n\n            if (eigenvectors == null) {\n                findEigenVectors();\n            }\n\n            final int m = eigenvectors.length;\n            cachedV = MatrixUtils.createRealMatrix(m, m);\n            for (int k = 0; k < m; ++k) {\n                cachedV.setColumnVector(k, eigenvectors[k]);\n            }\n\n        }\n\n        // return the cached matrix\n        return cachedV;\n\n    }\n\n    /** {@inheritDoc} */\n    public RealMatrix getD()\n        throws InvalidMatrixException {\n        if (cachedD == null) {\n            // cache the matrix for subsequent calls\n            cachedD = MatrixUtils.createRealDiagonalMatrix(realEigenvalues);\n        }\n        return cachedD;\n    }\n\n    /** {@inheritDoc} */\n    public RealMatrix getVT()\n        throws InvalidMatrixException {\n\n        if (cachedVt == null) {\n\n            if (eigenvectors == null) {\n                findEigenVectors();\n            }\n\n            final int m = eigenvectors.length;\n            cachedVt = MatrixUtils.createRealMatrix(m, m);\n            for (int k = 0; k < m; ++k) {\n                cachedVt.setRowVector(k, eigenvectors[k]);\n            }\n\n        }\n\n        // return the cached matrix\n        return cachedVt;\n\n    }\n\n    /** {@inheritDoc} */\n    public double[] getRealEigenvalues()\n        throws InvalidMatrixException {\n        return realEigenvalues.clone();\n    }\n\n    /** {@inheritDoc} */\n    public double getRealEigenvalue(final int i)\n        throws InvalidMatrixException, ArrayIndexOutOfBoundsException {\n        return realEigenvalues[i];\n    }\n\n    /** {@inheritDoc} */\n    public double[] getImagEigenvalues()\n        throws InvalidMatrixException {\n        return imagEigenvalues.clone();\n    }\n\n    /** {@inheritDoc} */\n    public double getImagEigenvalue(final int i)\n        throws InvalidMatrixException, ArrayIndexOutOfBoundsException {\n        return imagEigenvalues[i];\n    }\n\n    /** {@inheritDoc} */\n    public RealVector getEigenvector(final int i)\n        throws InvalidMatrixException, ArrayIndexOutOfBoundsException {\n        if (eigenvectors == null) {\n            findEigenVectors();\n        }\n        return eigenvectors[i].copy();\n    }\n\n    /**\n     * Return the determinant of the matrix\n     * @return determinant of the matrix\n     */\n    public double getDeterminant() {\n        double determinant = 1;\n        for (double lambda : realEigenvalues) {\n            determinant *= lambda;\n        }\n        return determinant;\n    }\n\n    /** {@inheritDoc} */\n    public DecompositionSolver getSolver() {\n        if (eigenvectors == null) {\n            findEigenVectors();\n        }\n        return new Solver(realEigenvalues, imagEigenvalues, eigenvectors);\n    }\n\n    /** Specialized solver. */\n    private static class Solver implements DecompositionSolver {\n\n        /** Real part of the realEigenvalues. */\n        private double[] realEigenvalues;\n\n        /** Imaginary part of the realEigenvalues. */\n        private double[] imagEigenvalues;\n\n        /** Eigenvectors. */\n        private final ArrayRealVector[] eigenvectors;\n\n        /**\n         * Build a solver from decomposed matrix.\n         * @param realEigenvalues real parts of the eigenvalues\n         * @param imagEigenvalues imaginary parts of the eigenvalues\n         * @param eigenvectors eigenvectors\n         */\n        private Solver(final double[] realEigenvalues, final double[] imagEigenvalues,\n                       final ArrayRealVector[] eigenvectors) {\n            this.realEigenvalues = realEigenvalues;\n            this.imagEigenvalues = imagEigenvalues;\n            this.eigenvectors    = eigenvectors;\n        }\n\n        /** Solve the linear equation A &times; X = B for symmetric matrices A.\n         * <p>This method only find exact linear solutions, i.e. solutions for\n         * which ||A &times; X - B|| is exactly 0.</p>\n         * @param b right-hand side of the equation A &times; X = B\n         * @return a vector X that minimizes the two norm of A &times; X - B\n         * @exception IllegalArgumentException if matrices dimensions don\'t match\n         * @exception InvalidMatrixException if decomposed matrix is singular\n         */\n        public double[] solve(final double[] b)\n            throws IllegalArgumentException, InvalidMatrixException {\n\n            if (!isNonSingular()) {\n                throw new SingularMatrixException();\n            }\n\n            final int m = realEigenvalues.length;\n            if (b.length != m) {\n                throw MathRuntimeException.createIllegalArgumentException(\n                        "vector length mismatch: got {0} but expected {1}",\n                        b.length, m);\n            }\n\n            final double[] bp = new double[m];\n            for (int i = 0; i < m; ++i) {\n                final ArrayRealVector v = eigenvectors[i];\n                final double[] vData = v.getDataRef();\n                final double s = v.dotProduct(b) / realEigenvalues[i];\n                for (int j = 0; j < m; ++j) {\n                    bp[j] += s * vData[j];\n                }\n            }\n\n            return bp;\n\n        }\n\n        /** Solve the linear equation A &times; X = B for symmetric matrices A.\n         * <p>This method only find exact linear solutions, i.e. solutions for\n         * which ||A &times; X - B|| is exactly 0.</p>\n         * @param b right-hand side of the equation A &times; X = B\n         * @return a vector X that minimizes the two norm of A &times; X - B\n         * @exception IllegalArgumentException if matrices dimensions don\'t match\n         * @exception InvalidMatrixException if decomposed matrix is singular\n         */\n        public RealVector solve(final RealVector b)\n            throws IllegalArgumentException, InvalidMatrixException {\n\n            if (!isNonSingular()) {\n                throw new SingularMatrixException();\n            }\n\n            final int m = realEigenvalues.length;\n            if (b.getDimension() != m) {\n                throw MathRuntimeException.createIllegalArgumentException(\n                        "vector length mismatch: got {0} but expected {1}",\n                        b.getDimension(), m);\n            }\n\n            final double[] bp = new double[m];\n            for (int i = 0; i < m; ++i) {\n                final ArrayRealVector v = eigenvectors[i];\n                final double[] vData = v.getDataRef();\n                final double s = v.dotProduct(b) / realEigenvalues[i];\n                for (int j = 0; j < m; ++j) {\n                    bp[j] += s * vData[j];\n                }\n            }\n\n            return new ArrayRealVector(bp, false);\n\n        }\n\n        /** Solve the linear equation A &times; X = B for symmetric matrices A.\n         * <p>This method only find exact linear solutions, i.e. solutions for\n         * which ||A &times; X - B|| is exactly 0.</p>\n         * @param b right-hand side of the equation A &times; X = B\n         * @return a matrix X that minimizes the two norm of A &times; X - B\n         * @exception IllegalArgumentException if matrices dimensions don\'t match\n         * @exception InvalidMatrixException if decomposed matrix is singular\n         */\n        public RealMatrix solve(final RealMatrix b)\n            throws IllegalArgumentException, InvalidMatrixException {\n\n            if (!isNonSingular()) {\n                throw new SingularMatrixException();\n            }\n\n            final int m = realEigenvalues.length;\n            if (b.getRowDimension() != m) {\n                throw MathRuntimeException.createIllegalArgumentException(\n                        "dimensions mismatch: got {0}x{1} but expected {2}x{3}",\n                        b.getRowDimension(), b.getColumnDimension(), m, "n");\n            }\n\n            final int nColB = b.getColumnDimension();\n            final double[][] bp = new double[m][nColB];\n            for (int k = 0; k < nColB; ++k) {\n                for (int i = 0; i < m; ++i) {\n                    final ArrayRealVector v = eigenvectors[i];\n                    final double[] vData = v.getDataRef();\n                    double s = 0;\n                    for (int j = 0; j < m; ++j) {\n                        s += v.getEntry(j) * b.getEntry(j, k);\n                    }\n                    s /= realEigenvalues[i];\n                    for (int j = 0; j < m; ++j) {\n                        bp[j][k] += s * vData[j];\n                    }\n                }\n            }\n\n            return MatrixUtils.createRealMatrix(bp);\n\n        }\n\n        /**\n         * Check if the decomposed matrix is non-singular.\n         * @return true if the decomposed matrix is non-singular\n         */\n        public boolean isNonSingular() {\n            for (int i = 0; i < realEigenvalues.length; ++i) {\n                if ((realEigenvalues[i] == 0) && (imagEigenvalues[i] == 0)) {\n                    return false;\n                }\n            }\n            return true;\n        }\n\n        /** Get the inverse of the decomposed matrix.\n         * @return inverse matrix\n         * @throws InvalidMatrixException if decomposed matrix is singular\n         */\n        public RealMatrix getInverse()\n            throws InvalidMatrixException {\n\n            if (!isNonSingular()) {\n                throw new SingularMatrixException();\n            }\n\n            final int m = realEigenvalues.length;\n            final double[][] invData = new double[m][m];\n\n            for (int i = 0; i < m; ++i) {\n                final double[] invI = invData[i];\n                for (int j = 0; j < m; ++j) {\n                    double invIJ = 0;\n                    for (int k = 0; k < m; ++k) {\n                        final double[] vK = eigenvectors[k].getDataRef();\n                        invIJ += vK[i] * vK[j] / realEigenvalues[k];\n                    }\n                    invI[j] = invIJ;\n                }\n            }\n            return MatrixUtils.createRealMatrix(invData);\n\n        }\n\n    }\n\n    /**\n     * Transform matrix to tridiagonal.\n     * @param matrix matrix to transform\n     */\n    private void transformToTridiagonal(final RealMatrix matrix) {\n\n        // transform the matrix to tridiagonal\n        transformer = new TriDiagonalTransformer(matrix);\n        main      = transformer.getMainDiagonalRef();\n        secondary = transformer.getSecondaryDiagonalRef();\n\n        // pre-compute some elements\n        squaredSecondary = new double[secondary.length];\n        for (int i = 0; i < squaredSecondary.length; ++i) {\n            final double s = secondary[i];\n            squaredSecondary[i] = s * s;\n        }\n\n    }\n\n    /**\n     * Compute the Gershgorin circles for all rows.\n     */\n    private void computeGershgorinCircles() {\n\n        final int m     = main.length;\n        final int lowerStart = 4 * m;\n        final int upperStart = 5 * m;\n        lowerSpectra = Double.POSITIVE_INFINITY;\n        upperSpectra = Double.NEGATIVE_INFINITY;\n        double eMax = 0;\n\n        double eCurrent = 0;\n        for (int i = 0; i < m - 1; ++i) {\n\n            final double dCurrent = main[i];\n            final double ePrevious = eCurrent;\n            eCurrent = Math.abs(secondary[i]);\n            eMax = Math.max(eMax, eCurrent);\n            final double radius = ePrevious + eCurrent;\n\n            final double lower = dCurrent - radius;\n            work[lowerStart + i] = lower;\n            lowerSpectra = Math.min(lowerSpectra, lower);\n\n            final double upper = dCurrent + radius;\n            work[upperStart + i] = upper;\n            upperSpectra = Math.max(upperSpectra, upper);\n\n        }\n\n        final double dCurrent = main[m - 1];\n        final double lower = dCurrent - eCurrent;\n        work[lowerStart + m - 1] = lower;\n        lowerSpectra = Math.min(lowerSpectra, lower);\n        final double upper = dCurrent + eCurrent;\n        work[upperStart + m - 1] = upper;\n        upperSpectra = Math.max(upperSpectra, upper);\n        minPivot = MathUtils.SAFE_MIN * Math.max(1.0, eMax * eMax);\n\n    }\n\n    /**\n     * Find the realEigenvalues.\n     * @exception InvalidMatrixException if a block cannot be diagonalized\n     */\n    private void findEigenvalues()\n        throws InvalidMatrixException {\n\n        // compute splitting points\n        List<Integer> splitIndices = computeSplits();\n\n        // find realEigenvalues in each block\n        realEigenvalues = new double[main.length];\n        imagEigenvalues = new double[main.length];\n        int begin = 0;\n        for (final int end : splitIndices) {\n            final int n = end - begin;\n            switch (n) {\n\n            case 1:\n                // apply dedicated method for dimension 1\n                process1RowBlock(begin);\n                break;\n\n            case 2:\n                // apply dedicated method for dimension 2\n                process2RowsBlock(begin);\n                break;\n\n            case 3:\n                // apply dedicated method for dimension 3\n                process3RowsBlock(begin);\n                break;\n\n            default:\n\n                // choose an initial shift for LDL<sup>T</sup> decomposition\n                final double[] range       = eigenvaluesRange(begin, n);\n                final double oneFourth     = 0.25 * (3 * range[0] + range[1]);\n                final int oneFourthCount   = countEigenValues(oneFourth, begin, n);\n                final double threeFourth   = 0.25 * (range[0] + 3 * range[1]);\n                final int threeFourthCount = countEigenValues(threeFourth, begin, n);\n                final boolean chooseLeft   = (oneFourthCount - 1) >= (n - threeFourthCount);\n                final double lambda        = chooseLeft ? range[0] : range[1];\n\n                tau = (range[1] - range[0]) * MathUtils.EPSILON * n + 2 * minPivot;\n\n                // decompose T-&lambda;I as LDL<sup>T</sup>\n                ldlTDecomposition(lambda, begin, n);\n\n                // apply general dqd/dqds method\n                processGeneralBlock(n);\n\n                // extract realEigenvalues\n                if (chooseLeft) {\n                    for (int i = 0; i < n; ++i) {\n                        realEigenvalues[begin + i] = lambda + work[4 * i];\n                    }\n                } else {\n                    for (int i = 0; i < n; ++i) {\n                        realEigenvalues[begin + i] = lambda - work[4 * i];\n                    }\n                }\n\n            }\n            begin = end;\n        }\n\n        // sort the realEigenvalues in decreasing order\n        Arrays.sort(realEigenvalues);\n        int j = realEigenvalues.length - 1;\n        for (int i = 0; i < j; ++i) {\n            final double tmp = realEigenvalues[i];\n            realEigenvalues[i] = realEigenvalues[j];\n            realEigenvalues[j] = tmp;\n            --j;\n        }\n\n    }\n\n    /**\n     * Compute splitting points.\n     * @return list of indices after matrix can be split\n     */\n    private List<Integer> computeSplits() {\n\n        final List<Integer> list = new ArrayList<Integer>();\n\n        // splitting preserving relative accuracy\n        double absDCurrent = Math.abs(main[0]);\n        for (int i = 0; i < secondary.length; ++i) {\n            final double absDPrevious = absDCurrent;\n            absDCurrent = Math.abs(main[i + 1]);\n            final double max = splitTolerance * Math.sqrt(absDPrevious * absDCurrent);\n            if (Math.abs(secondary[i]) <= max) {\n                list.add(i + 1);\n                secondary[i] = 0;\n                squaredSecondary[i] = 0;\n            }\n        }\n\n        list.add(secondary.length + 1);\n        return list;\n\n    }\n\n    /**\n     * Find eigenvalue in a block with 1 row.\n     * <p>In low dimensions, we simply solve the characteristic polynomial.</p>\n     * @param index index of the first row of the block\n     */\n    private void process1RowBlock(final int index) {\n        realEigenvalues[index] = main[index];\n    }\n\n    /**\n     * Find realEigenvalues in a block with 2 rows.\n     * <p>In low dimensions, we simply solve the characteristic polynomial.</p>\n     * @param index index of the first row of the block\n     * @exception InvalidMatrixException if characteristic polynomial cannot be solved\n     */\n    private void process2RowsBlock(final int index)\n        throws InvalidMatrixException {\n\n        // the characteristic polynomial is\n        // X^2 - (q0 + q1) X + q0 q1 - e1^2\n        final double q0   = main[index];\n        final double q1   = main[index + 1];\n        final double e12  = squaredSecondary[index];\n\n        final double s     = q0 + q1;\n        final double p     = q0 * q1 - e12;\n        final double delta = s * s - 4 * p;\n        if (delta < 0) {\n            throw new InvalidMatrixException("cannot solve degree {0} equation", 2);\n        }\n\n        final double largestRoot = 0.5 * (s + Math.sqrt(delta));\n        realEigenvalues[index]     = largestRoot;\n        realEigenvalues[index + 1] = p / largestRoot;\n\n    }\n\n    /**\n     * Find realEigenvalues in a block with 3 rows.\n     * <p>In low dimensions, we simply solve the characteristic polynomial.</p>\n     * @param index index of the first row of the block\n     * @exception InvalidMatrixException if diagonal elements are not positive\n     */\n    private void process3RowsBlock(final int index)\n        throws InvalidMatrixException {\n\n        // the characteristic polynomial is\n        // X^3 - (q0 + q1 + q2) X^2 + (q0 q1 + q0 q2 + q1 q2 - e1^2 - e2^2) X + q0 e2^2 + q2 e1^2 - q0 q1 q2\n        final double q0       = main[index];\n        final double q1       = main[index + 1];\n        final double q2       = main[index + 2];\n        final double e12      = squaredSecondary[index];\n        final double q1q2Me22 = q1 * q2 - squaredSecondary[index + 1];\n\n        // compute coefficients of the cubic equation as: x^3 + b x^2 + c x + d = 0\n        final double b        = -(q0 + q1 + q2);\n        final double c        = q0 * q1 + q0 * q2 + q1q2Me22 - e12;\n        final double d        = q2 * e12 - q0 * q1q2Me22;\n\n        // solve cubic equation\n        final double b2       = b * b;\n        final double q        = (3 * c - b2) / 9;\n        final double r        = ((9 * c - 2 * b2) * b - 27 * d) / 54;\n        final double delta    = q * q * q + r * r;\n        if (delta >= 0) {\n            // in fact, there are solutions to the equation, but in the context\n            // of symmetric realEigenvalues problem, there should be three distinct\n            // real roots, so we throw an error if this condition is not met\n            throw new InvalidMatrixException("cannot solve degree {0} equation", 3);\n        }\n        final double sqrtMq = Math.sqrt(-q);\n        final double theta  = Math.acos(r / (-q * sqrtMq));\n        final double alpha  = 2 * sqrtMq;\n        final double beta   = b / 3;\n\n        double z0 = alpha * Math.cos(theta / 3) - beta;\n        double z1 = alpha * Math.cos((theta + 2 * Math.PI) / 3) - beta;\n        double z2 = alpha * Math.cos((theta + 4 * Math.PI) / 3) - beta;\n        if (z0 < z1) {\n            final double t = z0;\n            z0 = z1;\n            z1 = t;\n        }\n        if (z1 < z2) {\n            final double t = z1;\n            z1 = z2;\n            z2 = t;\n        }\n        if (z0 < z1) {\n            final double t = z0;\n            z0 = z1;\n            z1 = t;\n        }\n        realEigenvalues[index]     = z0;\n        realEigenvalues[index + 1] = z1;\n        realEigenvalues[index + 2] = z2;\n\n    }\n\n    /**\n     * Find realEigenvalues using dqd/dqds algorithms.\n     * <p>This implementation is based on Beresford N. Parlett\n     * and Osni A. Marques paper <a\n     * href="http://www.netlib.org/lapack/lawnspdf/lawn155.pdf">An\n     * Implementation of the dqds Algorithm (Positive Case)</a> and on the\n     * corresponding LAPACK routine DLASQ2.</p>\n     * @param n number of rows of the block\n     * @exception InvalidMatrixException if block cannot be diagonalized\n     * after 30 * n iterations\n     */\n    private void processGeneralBlock(final int n)\n        throws InvalidMatrixException {\n\n        // check decomposed matrix data range\n        double sumOffDiag = 0;\n        for (int i = 0; i < n - 1; ++i) {\n            final int fourI = 4 * i;\n            final double ei = work[fourI + 2];\n            sumOffDiag += ei;\n        }\n\n        if (sumOffDiag == 0) {\n            // matrix is already diagonal\n            return;\n        }\n\n        // initial checks for splits (see Parlett & Marques section 3.3)\n        flipIfWarranted(n, 2);\n\n        // two iterations with Li\'s test for initial splits\n        initialSplits(n);\n\n        // initialize parameters used by goodStep\n        tType = 0;\n        dMin1 = 0;\n        dMin2 = 0;\n        dN    = 0;\n        dN1   = 0;\n        dN2   = 0;\n        tau   = 0;\n\n        // process split segments\n        int i0 = 0;\n        int n0 = n;\n        while (n0 > 0) {\n\n            // retrieve shift that was temporarily stored as a negative off-diagonal element\n            sigma    = (n0 == n) ? 0 : -work[4 * n0 - 2];\n            sigmaLow = 0;\n\n            // find start of a new split segment to process\n            double offDiagMin = (i0 == n0) ? 0 : work[4 * n0 - 6];\n            double offDiagMax = 0;\n            double diagMax    = work[4 * n0 - 4];\n            double diagMin    = diagMax;\n            i0 = 0;\n            for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {\n                if (work[i + 2] <= 0) {\n                    i0 = 1 + i / 4;\n                    break;\n                }\n                if (diagMin >= 4 * offDiagMax) {\n                    diagMin    = Math.min(diagMin, work[i + 4]);\n                    offDiagMax = Math.max(offDiagMax, work[i + 2]);\n                }\n                diagMax    = Math.max(diagMax, work[i] + work[i + 2]);\n                offDiagMin = Math.min(offDiagMin, work[i + 2]);\n            }\n            work[4 * n0 - 2] = offDiagMin;\n\n            // lower bound of Gershgorin disk\n            dMin = -Math.max(0, diagMin - 2 * Math.sqrt(diagMin * offDiagMax));\n\n            pingPong = 0;\n            int maxIter = 30 * (n0 - i0);\n            for (int k = 0; i0 < n0; ++k) {\n                if (k >= maxIter) {\n                    throw new InvalidMatrixException(new MaxIterationsExceededException(maxIter));\n                }\n\n                // perform one step\n                n0 = goodStep(i0, n0);\n                pingPong = 1 - pingPong;\n\n                // check for new splits after "ping" steps\n                // when the last elements of qd array are very small\n                if ((pingPong == 0) && (n0 - i0 > 3) &&\n                    (work[4 * n0 - 1] <= TOLERANCE_2 * diagMax) &&\n                    (work[4 * n0 - 2] <= TOLERANCE_2 * sigma)) {\n                    int split  = i0 - 1;\n                    diagMax    = work[4 * i0];\n                    offDiagMin = work[4 * i0 + 2];\n                    double previousEMin = work[4 * i0 + 3];\n                    for (int i = 4 * i0; i < 4 * n0 - 16; i += 4) {\n                        if ((work[i + 3] <= TOLERANCE_2 * work[i]) ||\n                            (work[i + 2] <= TOLERANCE_2 * sigma)) {\n                            // insert a split\n                            work[i + 2]  = -sigma;\n                            split        = i / 4;\n                            diagMax      = 0;\n                            offDiagMin   = work[i + 6];\n                            previousEMin = work[i + 7];\n                        } else {\n                            diagMax      = Math.max(diagMax, work[i + 4]);\n                            offDiagMin   = Math.min(offDiagMin, work[i + 2]);\n                            previousEMin = Math.min(previousEMin, work[i + 3]);\n                        }\n                    }\n                    work[4 * n0 - 2] = offDiagMin;\n                    work[4 * n0 - 1] = previousEMin;\n                    i0 = split + 1;\n                }\n            }\n\n        }\n\n    }\n\n    /**\n     * Perform two iterations with Li\'s tests for initial splits.\n     * @param n number of rows of the matrix to process\n     */\n    private void initialSplits(final int n) {\n\n        pingPong = 0;\n        for (int k = 0; k < 2; ++k) {\n\n            // apply Li\'s reverse test\n            double d = work[4 * (n - 1) + pingPong];\n            for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {\n                if (work[i + 2] <= TOLERANCE_2 * d) {\n                    work[i + 2] = -0.0;\n                    d = work[i];\n                } else {\n                    d *= work[i] / (d + work[i + 2]);\n                }\n            }\n\n            // apply dqd plus Li\'s forward test.\n            d = work[pingPong];\n            for (int i = 2 + pingPong; i < 4 * n - 2; i += 4) {\n                final int j = i - 2 * pingPong - 1;\n                work[j] = d + work[i];\n                if (work[i] <= TOLERANCE_2 * d) {\n                    work[i]     = -0.0;\n                    work[j]     = d;\n                    work[j + 2] = 0.0;\n                    d = work[i + 2];\n                } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&\n                           (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {\n                    final double tmp = work[i + 2] / work[j];\n                    work[j + 2] = work[i] * tmp;\n                    d *= tmp;\n                } else {\n                    work[j + 2] = work[i + 2] * (work[i] / work[j]);\n                    d *= work[i + 2] / work[j];\n               }\n            }\n            work[4 * n - 3 - pingPong] = d;\n\n            // from ping to pong\n            pingPong = 1 - pingPong;\n\n        }\n\n    }\n\n    /**\n     * Perform one "good" dqd/dqds step.\n     * <p>This implementation is based on Beresford N. Parlett\n     * and Osni A. Marques paper <a\n     * href="http://www.netlib.org/lapack/lawnspdf/lawn155.pdf">An\n     * Implementation of the dqds Algorithm (Positive Case)</a> and on the\n     * corresponding LAPACK routine DLAZQ3.</p>\n     * @param start start index\n     * @param end end index\n     * @return new end (maybe deflated)\n     */\n    private int goodStep(final int start, final int end) {\n\n        g = 0.0;\n\n        // step 1: accepting realEigenvalues\n        int deflatedEnd = end;\n        for (boolean deflating = true; deflating;) {\n\n            if (start >= deflatedEnd) {\n                // the array has been completely deflated\n                return deflatedEnd;\n            }\n\n            final int k = 4 * deflatedEnd + pingPong - 1;\n\n            if ((start == deflatedEnd - 1) ||\n                ((start != deflatedEnd - 2) &&\n                 ((work[k - 5] <= TOLERANCE_2 * (sigma + work[k - 3])) ||\n                  (work[k - 2 * pingPong - 4] <= TOLERANCE_2 * work[k - 7])))) {\n\n                // one eigenvalue found, deflate array\n                work[4 * deflatedEnd - 4] = sigma + work[4 * deflatedEnd - 4 + pingPong];\n                deflatedEnd -= 1;\n\n            } else if ((start == deflatedEnd - 2) ||\n                (work[k - 9] <= TOLERANCE_2 * sigma) ||\n                (work[k - 2 * pingPong - 8] <= TOLERANCE_2 * work[k - 11])) {\n\n                // two realEigenvalues found, deflate array\n                if (work[k - 3] > work[k - 7]) {\n                    final double tmp = work[k - 3];\n                    work[k - 3] = work[k - 7];\n                    work[k - 7] = tmp;\n                }\n\n                if (work[k - 5] > TOLERANCE_2 * work[k - 3]) {\n                    double t = 0.5 * ((work[k - 7] - work[k - 3]) + work[k - 5]);\n                    double s = work[k - 3] * (work[k - 5] / t);\n                    if (s <= t) {\n                        s = work[k - 3] * work[k - 5] / (t * (1 + Math.sqrt(1 + s / t)));\n                    } else {\n                        s = work[k - 3] * work[k - 5] / (t + Math.sqrt(t * (t + s)));\n                    }\n                    t = work[k - 7] + (s + work[k - 5]);\n                    work[k - 3] *= work[k - 7] / t;\n                    work[k - 7]  = t;\n                }\n                work[4 * deflatedEnd - 8] = sigma + work[k - 7];\n                work[4 * deflatedEnd - 4] = sigma + work[k - 3];\n                deflatedEnd -= 2;\n            } else {\n\n                // no more realEigenvalues found, we need to iterate\n                deflating = false;\n\n            }\n\n        }\n\n        final int l = 4 * deflatedEnd + pingPong - 1;\n\n        // step 2: flip array if needed\n        if ((dMin <= 0) || (deflatedEnd < end)) {\n            if (flipIfWarranted(deflatedEnd, 1)) {\n                dMin2 = Math.min(dMin2, work[l - 1]);\n                work[l - 1] =\n                    Math.min(work[l - 1],\n                             Math.min(work[3 + pingPong], work[7 + pingPong]));\n                work[l - 2 * pingPong] =\n                    Math.min(work[l - 2 * pingPong],\n                             Math.min(work[6 + pingPong], work[6 + pingPong]));\n                qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));\n                dMin  = -0.0;\n            }\n        }\n\n        if ((dMin < 0) ||\n            (MathUtils.SAFE_MIN * qMax < Math.min(work[l - 1],\n                                                  Math.min(work[l - 9],\n                                                           dMin2 + work[l - 2 * pingPong])))) {\n            // step 3: choose a shift\n            computeShiftIncrement(start, deflatedEnd, end - deflatedEnd);\n\n            // step 4a: dqds\n            for (boolean loop = true; loop;) {\n\n                // perform one dqds step with the chosen shift\n                dqds(start, deflatedEnd);\n\n                // check result of the dqds step\n                if ((dMin >= 0) && (dMin1 > 0)) {\n                    // the shift was good\n                    updateSigma(tau);\n                    return deflatedEnd;\n                } else if ((dMin < 0.0) &&\n                           (dMin1 > 0.0) &&\n                           (work[4 * deflatedEnd - 5 - pingPong] < TOLERANCE * (sigma + dN1)) &&\n                           (Math.abs(dN) < TOLERANCE * sigma)) {\n                   // convergence hidden by negative DN.\n                    work[4 * deflatedEnd - 3 - pingPong] = 0.0;\n                    dMin = 0.0;\n                    updateSigma(tau);\n                    return deflatedEnd;\n                } else if (dMin < 0.0) {\n                    // tau too big. Select new tau and try again.\n                    if (tType < -22) {\n                        // failed twice. Play it safe.\n                        tau = 0.0;\n                    } else if (dMin1 > 0.0) {\n                        // late failure. Gives excellent shift.\n                        tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);\n                        tType -= 11;\n                    } else {\n                        // early failure. Divide by 4.\n                        tau *= 0.25;\n                        tType -= 12;\n                    }\n                } else if (Double.isNaN(dMin)) {\n                    tau = 0.0;\n                } else {\n                    // possible underflow. Play it safe.\n                    loop = false;\n                }\n            }\n\n        }\n\n        // perform a dqd step (i.e. no shift)\n        dqd(start, deflatedEnd);\n\n        return deflatedEnd;\n\n    }\n\n    /**\n     * Flip qd array if warranted.\n     * @param n number of rows in the block\n     * @param step within the array (1 for flipping all elements, 2 for flipping\n     * only every other element)\n     * @return true if qd array was flipped\n     */\n    private boolean flipIfWarranted(final int n, final int step) {\n        if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n            // flip array', 'aftercode': "            for (int i = 0; i < j; i += 4) {\n                for (int k = 0; k < 4; k += step) {\n                    final double tmp = work[i + k];\n                    work[i + k] = work[j - k];\n                    work[j - k] = tmp;\n                }\n                j -= 4;\n            }\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Compute an interval containing all realEigenvalues of a block.\n     * @param index index of the first row of the block\n     * @param n number of rows of the block\n     * @return an interval containing the realEigenvalues\n     */\n    private double[] eigenvaluesRange(final int index, final int n) {\n\n        // find the bounds of the spectra of the local block\n        final int lowerStart = 4 * main.length;\n        final int upperStart = 5 * main.length;\n        double lower = Double.POSITIVE_INFINITY;\n        double upper = Double.NEGATIVE_INFINITY;\n        for (int i = 0; i < n; ++i) {\n            lower = Math.min(lower, work[lowerStart + index +i]);\n            upper = Math.max(upper, work[upperStart + index +i]);\n        }\n\n        // set thresholds\n        final double tNorm = Math.max(Math.abs(lower), Math.abs(upper));\n        final double relativeTolerance = Math.sqrt(MathUtils.EPSILON);\n        final double absoluteTolerance = 4 * minPivot;\n        final int maxIter =\n            2 + (int) ((Math.log(tNorm + minPivot) - Math.log(minPivot)) / Math.log(2.0));\n        final double margin = 2 * (tNorm * MathUtils.EPSILON * n + 2 * minPivot);\n\n        // search lower eigenvalue\n        double left  = lower - margin;\n        double right = upper + margin;\n        for (int i = 0; i < maxIter; ++i) {\n\n            final double range = right - left;\n            if ((range < absoluteTolerance) ||\n                (range < relativeTolerance * Math.max(Math.abs(left), Math.abs(right)))) {\n                // search has converged\n                break;\n            }\n\n            final double middle = 0.5 * (left + right);\n            if (countEigenValues(middle, index, n) >= 1) {\n                right = middle;\n            } else {\n                left = middle;\n            }\n\n        }\n        lower = Math.max(lower, left - 100 * MathUtils.EPSILON * Math.abs(left));\n\n        // search upper eigenvalue\n        left  = lower - margin;\n        right = upper + margin;\n        for (int i = 0; i < maxIter; ++i) {\n\n            final double range = right - left;\n            if ((range < absoluteTolerance) ||\n                (range < relativeTolerance * Math.max(Math.abs(left), Math.abs(right)))) {\n                // search has converged\n                break;\n            }\n\n            final double middle = 0.5 * (left + right);\n            if (countEigenValues(middle, index, n) >= n) {\n                right = middle;\n            } else {\n                left = middle;\n            }\n\n        }\n        upper = Math.min(upper, right + 100 * MathUtils.EPSILON * Math.abs(right));\n\n        return new double[] { lower, upper };\n\n    }\n\n    /**\n     * Count the number of realEigenvalues below a point.\n     * @param t value below which we must count the number of realEigenvalues\n     * @param index index of the first row of the block\n     * @param n number of rows of the block\n     * @return number of realEigenvalues smaller than t\n     */\n    private int countEigenValues(final double t, final int index, final int n) {\n        double ratio = main[index] - t;\n        int count = (ratio > 0) ? 0 : 1;\n        for (int i = 1; i < n; ++i) {\n            ratio = main[index + i] - squaredSecondary[index + i - 1] / ratio - t;\n            if (ratio <= 0) {\n                ++count;\n            }\n        }\n        return count;\n    }\n\n    /**\n     * Decompose the shifted tridiagonal matrix T-&lambda;I as LDL<sup>T</sup>.\n     * <p>A shifted symmetric tridiagonal matrix T can be decomposed as\n     * LDL<sup>T</sup> where L is a lower bidiagonal matrix with unit diagonal\n     * and D is a diagonal matrix. This method is an implementation of\n     * algorithm 4.4.7 from Dhillon's thesis.</p>\n     * @param lambda shift to add to the matrix before decomposing it\n     * to ensure it is positive definite\n     * @param index index of the first row of the block\n     * @param n number of rows of the block\n     */\n    private void ldlTDecomposition(final double lambda, final int index, final int n) {\n        double di = main[index] - lambda;\n        work[0] = Math.abs(di);\n        for (int i = 1; i < n; ++i) {\n            final int    fourI = 4 * i;\n            final double eiM1  = secondary[index + i - 1];\n            final double ratio = eiM1 / di;\n            work[fourI - 2] = ratio * ratio * Math.abs(di);\n            di = (main[index + i] - lambda) - eiM1 * ratio;\n            work[fourI] = Math.abs(di);\n        }\n    }\n\n    /**\n     * Perform a dqds step, using current shift increment.\n     * <p>This implementation is a translation of the LAPACK routine DLASQ5.</p>\n     * @param start start index\n     * @param end end index\n     */\n    private void dqds(final int start, final int end) {\n\n        eMin = work[4 * start + pingPong + 4];\n        double d = work[4 * start + pingPong] - tau;\n        dMin = d;\n        dMin1 = -work[4 * start + pingPong];\n\n        if (pingPong == 0) {\n            for (int j4 = 4 * start + 3; j4 <= 4 * (end - 3); j4 += 4) {\n                work[j4 - 2] = d + work[j4 - 1];\n                final double tmp = work[j4 + 1] / work[j4 - 2];\n                d = d * tmp - tau;\n                dMin = Math.min(dMin, d);\n                work[j4] = work[j4 - 1] * tmp;\n                eMin = Math.min(work[j4], eMin);\n            }\n        } else {\n            for (int j4 = 4 * start + 3; j4 <= 4 * (end - 3); j4 += 4) {\n                work[j4 - 3] = d + work[j4];\n                final double tmp = work[j4 + 2] / work[j4 - 3];\n                d = d * tmp - tau;\n                dMin = Math.min(dMin, d);\n                work[j4 - 1] = work[j4] * tmp;\n                eMin = Math.min(work[j4 - 1], eMin);\n            }\n        }\n\n        // unroll last two steps.\n        dN2 = d;\n        dMin2 = dMin;\n        int j4 = 4 * (end - 2) - pingPong - 1;\n        int j4p2 = j4 + 2 * pingPong - 1;\n        work[j4 - 2] = dN2 + work[j4p2];\n        work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);\n        dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]) - tau;\n        dMin = Math.min(dMin, dN1);\n\n        dMin1 = dMin;\n        j4 = j4 + 4;\n        j4p2 = j4 + 2 * pingPong - 1;\n        work[j4 - 2] = dN1 + work[j4p2];\n        work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);\n        dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]) - tau;\n        dMin = Math.min(dMin, dN);\n\n        work[j4 + 2] = dN;\n        work[4 * end - pingPong - 1] = eMin;\n\n    }\n\n\n    /**\n     * Perform a dqd step.\n     * <p>This implementation is a translation of the LAPACK routine DLASQ6.</p>\n     * @param start start index\n     * @param end end index\n     */\n    private void dqd(final int start, final int end) {\n\n        eMin = work[4 * start + pingPong + 4];\n        double d = work[4 * start + pingPong];\n        dMin = d;\n\n        if (pingPong == 0) {\n            for (int j4 = 4 * start + 3; j4 < 4 * (end - 3); j4 += 4) {\n                work[j4 - 2] = d + work[j4 - 1];\n                if (work[j4 - 2] == 0.0) {\n                    work[j4] = 0.0;\n                    d = work[j4 + 1];\n                    dMin = d;\n                    eMin = 0.0;\n                } else if ((MathUtils.SAFE_MIN * work[j4 + 1] < work[j4 - 2]) &&\n                           (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4 + 1])) {\n                    final double tmp = work[j4 + 1] / work[j4 - 2];\n                    work[j4] = work[j4 - 1] * tmp;\n                    d *= tmp;\n                } else {\n                    work[j4] = work[j4 + 1] * (work[j4 - 1] / work[j4 - 2]);\n                    d *= work[j4 + 1] / work[j4 - 2];\n                }\n                dMin = Math.min(dMin, d);\n                eMin = Math.min(eMin, work[j4]);\n            }\n        } else {\n            for (int j4 = 4 * start + 3; j4 < 4 * (end - 3); j4 += 4) {\n                work[j4 - 3] = d + work[j4];\n                if (work[j4 - 3] == 0.0) {\n                    work[j4 - 1] = 0.0;\n                    d = work[j4 + 2];\n                    dMin = d;\n                    eMin = 0.0;\n                } else if ((MathUtils.SAFE_MIN * work[j4 + 2] < work[j4 - 3]) &&\n                           (MathUtils.SAFE_MIN * work[j4 - 3] < work[j4 + 2])) {\n                    final double tmp = work[j4 + 2] / work[j4 - 3];\n                    work[j4 - 1] = work[j4] * tmp;\n                    d *= tmp;\n                } else {\n                    work[j4 - 1] = work[j4 + 2] * (work[j4] / work[j4 - 3]);\n                    d *= work[j4 + 2] / work[j4 - 3];\n                }\n                dMin = Math.min(dMin, d);\n                eMin = Math.min(eMin, work[j4 - 1]);\n            }\n        }\n\n        // Unroll last two steps\n        dN2   = d;\n        dMin2 = dMin;\n        int j4 = 4 * (end - 2) - pingPong - 1;\n        int j4p2 = j4 + 2 * pingPong - 1;\n        work[j4 - 2] = dN2 + work[j4p2];\n        if (work[j4 - 2] == 0.0) {\n            work[j4] = 0.0;\n            dN1  = work[j4p2 + 2];\n            dMin = dN1;\n            eMin = 0.0;\n        } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n                   (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n            final double tmp = work[j4p2 + 2] / work[j4 - 2];\n            work[j4] = work[j4p2] * tmp;\n            dN1 = dN2 * tmp;\n        } else {\n            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);\n            dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]);\n        }\n        dMin = Math.min(dMin, dN1);\n\n        dMin1 = dMin;\n        j4 = j4 + 4;\n        j4p2 = j4 + 2 * pingPong - 1;\n        work[j4 - 2] = dN1 + work[j4p2];\n        if (work[j4 - 2] == 0.0) {\n            work[j4] = 0.0;\n            dN   = work[j4p2 + 2];\n            dMin = dN;\n            eMin = 0.0;\n        } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&\n                   (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {\n            final double tmp = work[j4p2 + 2] / work[j4 - 2];\n            work[j4] = work[j4p2] * tmp;\n            dN = dN1 * tmp;\n        } else {\n            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);\n            dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);\n        }\n        dMin = Math.min(dMin, dN);\n\n        work[j4 + 2] = dN;\n        work[4 * end - pingPong - 1] = eMin;\n\n    }\n\n    /**\n     * Compute the shift increment as an estimate of the smallest eigenvalue.\n     * <p>This implementation is a translation of the LAPACK routine DLAZQ4.</p>\n     * @param start start index\n     * @param end end index\n     * @param deflated number of realEigenvalues just deflated\n     */\n    private void computeShiftIncrement(final int start, final int end, final int deflated) {\n\n        final double cnst1 = 0.563;\n        final double cnst2 = 1.010;\n        final double cnst3 = 1.05;\n\n        // a negative dMin forces the shift to take that absolute value\n        // tType records the type of shift.\n        if (dMin <= 0.0) {\n            tau = -dMin;\n            tType = -1;\n            return;\n        }\n\n        int nn = 4 * end + pingPong - 1;\n        switch (deflated) {\n\n        case 0 : // no realEigenvalues deflated.\n            if (dMin == dN || dMin == dN1) {\n\n                double b1 = Math.sqrt(work[nn - 3]) * Math.sqrt(work[nn - 5]);\n                double b2 = Math.sqrt(work[nn - 7]) * Math.sqrt(work[nn - 9]);\n                double a2 = work[nn - 7] + work[nn - 5];\n\n                if (dMin == dN && dMin1 == dN1) {\n                    // cases 2 and 3.\n                    final double gap2 = dMin2 - a2 - dMin2 * 0.25;\n                    final double gap1 = a2 - dN - ((gap2 > 0.0 && gap2 > b2) ? (b2 / gap2) * b2 : (b1 + b2));\n                    if (gap1 > 0.0 && gap1 > b1) {\n                        tau   = Math.max(dN - (b1 / gap1) * b1, 0.5 * dMin);\n                        tType = -2;\n                    } else {\n                        double s = 0.0;\n                        if (dN > b1) {\n                            s = dN - b1;\n                        }\n                        if (a2 > (b1 + b2)) {\n                            s = Math.min(s, a2 - (b1 + b2));\n                        }\n                        tau   = Math.max(s, 0.333 * dMin);\n                        tType = -3;\n                    }\n                } else {\n                    // case 4.\n                    tType = -4;\n                    double s = 0.25 * dMin;\n                    double gam;\n                    int np;\n                    if (dMin == dN) {\n                        gam = dN;\n                        a2 = 0.0;\n                        if (work[nn - 5]  >  work[nn - 7]) {\n                            return;\n                        }\n                        b2 = work[nn - 5] / work[nn - 7];\n                        np = nn - 9;\n                    } else {\n                        np = nn - 2 * pingPong;\n                        b2 = work[np - 2];\n                        gam = dN1;\n                        if (work[np - 4]  >  work[np - 2]) {\n                            return;\n                        }\n                        a2 = work[np - 4] / work[np - 2];\n                        if (work[nn - 9]  >  work[nn - 11]) {\n                            return;\n                        }\n                        b2 = work[nn - 9] / work[nn - 11];\n                        np = nn - 13;\n                    }\n\n                    // approximate contribution to norm squared from i < nn-1.\n                    a2 = a2 + b2;\n                    for (int i4 = np; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n                        if(b2 == 0.0) {\n                            break;\n                        }\n                        b1 = b2;\n                        if (work[i4]  >  work[i4 - 2]) {\n                            return;\n                        }\n                        b2 = b2 * (work[i4] / work[i4 - 2]);\n                        a2 = a2 + b2;\n                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {\n                            break;\n                        }\n                    }\n                    a2 = cnst3 * a2;\n\n                    // rayleigh quotient residual bound.\n                    if (a2 < cnst1) {\n                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                    }\n                    tau = s;\n\n                }\n            } else if (dMin == dN2) {\n\n                // case 5.\n                tType = -5;\n                double s = 0.25 * dMin;\n\n                // compute contribution to norm squared from i > nn-2.\n                final int np = nn - 2 * pingPong;\n                double b1 = work[np - 2];\n                double b2 = work[np - 6];\n                final double gam = dN2;\n                if (work[np - 8] > b2 || work[np - 4] > b1) {\n                    return;\n                }\n                double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n\n                // approximate contribution to norm squared from i < nn-2.\n                if (end - start > 3) {\n                    b2 = work[nn - 13] / work[nn - 15];\n                    a2 = a2 + b2;\n                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n                        if (b2 == 0.0) {\n                            break;\n                        }\n                        b1 = b2;\n                        if (work[i4]  >  work[i4 - 2]) {\n                            return;\n                        }\n                        b2 = b2 * (work[i4] / work[i4 - 2]);\n                        a2 = a2 + b2;\n                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {\n                            break;\n                        }\n                    }\n                    a2 = cnst3 * a2;\n                }\n\n                if (a2 < cnst1) {\n                    tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);\n                } else {\n                    tau = s;\n                }\n\n            } else {\n\n                // case 6, no information to guide us.\n                if (tType == -6) {\n                    g += 0.333 * (1 - g);\n                } else if (tType == -18) {\n                    g = 0.25 * 0.333;\n                } else {\n                    g = 0.25;\n                }\n                tau   = g * dMin;\n                tType = -6;\n\n            }\n            break;\n\n        case 1 : // one eigenvalue just deflated. use dMin1, dN1 for dMin and dN.\n            if (dMin1 == dN1 && dMin2 == dN2) {\n\n                // cases 7 and 8.\n                tType = -7;\n                double s = 0.333 * dMin1;\n                if (work[nn - 5] > work[nn - 7]) {\n                    return;\n                }\n                double b1 = work[nn - 5] / work[nn - 7];\n                double b2 = b1;\n                if (b2 != 0.0) {\n                    for (int i4 = 4 * end - 10 + pingPong; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n                        final double oldB1 = b1;\n                        if (work[i4] > work[i4 - 2]) {\n                            return;\n                        }\n                        b1 = b1 * (work[i4] / work[i4 - 2]);\n                        b2 = b2 + b1;\n                        if (100 * Math.max(b1, oldB1) < b2) {\n                            break;\n                        }\n                    }\n                }\n                b2 = Math.sqrt(cnst3 * b2);\n                final double a2 = dMin1 / (1 + b2 * b2);\n                final double gap2 = 0.5 * dMin2 - a2;\n                if (gap2 > 0.0 && gap2 > b2 * a2) {\n                    tau = Math.max(s, a2 * (1 - cnst2 * a2 * (b2 / gap2) * b2));\n                } else {\n                    tau = Math.max(s, a2 * (1 - cnst2 * b2));\n                    tType = -8;\n                }\n            } else {\n\n                // case 9.\n                tau = 0.25 * dMin1;\n                if (dMin1 == dN1) {\n                    tau = 0.5 * dMin1;\n                }\n                tType = -9;\n            }\n            break;\n\n        case 2 : // two realEigenvalues deflated. use dMin2, dN2 for dMin and dN.\n\n            // cases 10 and 11.\n            if (dMin2 == dN2 && 2 * work[nn - 5] < work[nn - 7]) {\n                tType = -10;\n                final double s = 0.333 * dMin2;\n                if (work[nn - 5] > work[nn - 7]) {\n                    return;\n                }\n                double b1 = work[nn - 5] / work[nn - 7];\n                double b2 = b1;\n                if (b2 != 0.0){\n                    for (int i4 = 4 * end - 9 + pingPong; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n                        if (work[i4] > work[i4 - 2]) {\n                            return;\n                        }\n                        b1 *= work[i4] / work[i4 - 2];\n                        b2 += b1;\n                        if (100 * b1 < b2) {\n                            break;\n                        }\n                    }\n                }\n                b2 = Math.sqrt(cnst3 * b2);\n                final double a2 = dMin2 / (1 + b2 * b2);\n                final double gap2 = work[nn - 7] + work[nn - 9] -\n                Math.sqrt(work[nn - 11]) * Math.sqrt(work[nn - 9]) - a2;\n                if (gap2 > 0.0 && gap2 > b2 * a2) {\n                    tau = Math.max(s, a2 * (1 - cnst2 * a2 * (b2 / gap2) * b2));\n                } else {\n                    tau = Math.max(s, a2 * (1 - cnst2 * b2));\n                }\n            } else {\n                tau   = 0.25 * dMin2;\n                tType = -11;\n            }\n            break;\n\n        default : // case 12, more than two realEigenvalues deflated. no information.\n            tau   = 0.0;\n            tType = -12;\n        }\n\n    }\n\n    /**\n     * Update sigma.\n     * @param shift shift to apply to sigma\n     */\n    private void updateSigma(final double shift) {\n        // BEWARE: do NOT attempt to simplify the following statements\n        // the expressions below take care to accumulate the part of sigma\n        // that does not fit within a double variable into sigmaLow\n        if (shift < sigma) {\n            sigmaLow += shift;\n            final double t = sigma + sigmaLow;\n            sigmaLow -= t - sigma;\n            sigma = t;\n        } else {\n            final double t = sigma + shift;\n            sigmaLow += sigma - (t - shift);\n            sigma = t;\n        }\n    }\n\n    /**\n     * Find eigenvectors.\n     */\n    private void findEigenVectors() {\n\n        final int m = main.length;\n        eigenvectors = new ArrayRealVector[m];\n\n        // perform an initial non-shifted LDLt decomposition\n        final double[] d = new double[m];\n        final double[] l = new double[m - 1];\n        // avoid zero divide on indefinite matrix\n        final double mu = realEigenvalues[m-1] <= 0 && realEigenvalues[0] > 0 ? 0.5-realEigenvalues[m-1] : 0;\n        double di = main[0]+mu;\n        d[0] = di;\n        for (int i = 1; i < m; ++i) {\n            final double eiM1  = secondary[i - 1];\n            final double ratio = eiM1 / di;\n            di       = main[i] - eiM1 * ratio + mu;\n            l[i - 1] = ratio;\n            d[i]     = di;\n        }\n\n        // compute eigenvectors\n        for (int i = 0; i < m; ++i) {\n            eigenvectors[i] = findEigenvector(realEigenvalues[i]+mu, d, l);\n        }\n\n    }\n\n    /**\n     * Find an eigenvector corresponding to an eigenvalue, using bidiagonals.\n     * <p>This method corresponds to algorithm X from Dhillon's thesis.</p>\n     *\n     * @param eigenvalue eigenvalue for which eigenvector is desired\n     * @param d diagonal elements of the initial non-shifted D matrix\n     * @param l off-diagonal elements of the initial non-shifted L matrix\n     * @return an eigenvector\n     */\n    private ArrayRealVector findEigenvector(final double eigenvalue,\n                                           final double[] d, final double[] l) {\n\n        // compute the LDLt and UDUt decompositions of the\n        // perfectly shifted tridiagonal matrix\n        final int m = main.length;\n        stationaryQuotientDifferenceWithShift(d, l, eigenvalue);\n        progressiveQuotientDifferenceWithShift(d, l, eigenvalue);\n\n        // select the twist index leading to\n        // the least diagonal element in the twisted factorization\n        int r = m - 1;\n        double minG = Math.abs(work[6 * r] + work[6 * r + 3] + eigenvalue);\n        int sixI = 0;\n        for (int i = 0; i < m - 1; ++i) {\n            final double absG = Math.abs(work[sixI] + d[i] * work[sixI + 9] / work[sixI + 10]);\n            if (absG < minG) {\n                r = i;\n                minG = absG;\n            }\n            sixI += 6;\n        }\n\n        // solve the singular system by ignoring the equation\n        // at twist index and propagating upwards and downwards\n        double[] eigenvector = new double[m];\n        double n2 = 1;\n        eigenvector[r] = 1;\n        double z = 1;\n        for (int i = r - 1; i >= 0; --i) {\n            z *= -work[6 * i + 2];\n            eigenvector[i] = z;\n            n2 += z * z;\n        }\n        z = 1;\n        for (int i = r + 1; i < m; ++i) {\n            z *= -work[6 * i - 1];\n            eigenvector[i] = z;\n            n2 += z * z;\n        }\n\n        // normalize vector\n        final double inv = 1.0 / Math.sqrt(n2);\n        for (int i = 0; i < m; ++i) {\n            eigenvector[i] *= inv;\n        }\n\n        return (transformer == null) ?\n               new ArrayRealVector(eigenvector, false) :\n               new ArrayRealVector(transformer.getQ().operate(eigenvector), false);\n\n    }\n\n    /**\n     * Decompose matrix LDL<sup>T</sup> - &lambda; I as\n     * L<sub>+</sub>D<sub>+</sub>L<sub>+</sub><sup>T</sup>.\n     * <p>This method corresponds to algorithm 4.4.3 (dstqds) from Dhillon's thesis.</p>\n     * @param d diagonal elements of D,\n     * @param l off-diagonal elements of L\n     * @param lambda shift to apply\n     */\n    private void stationaryQuotientDifferenceWithShift(final double[] d, final double[] l,\n                                                       final double lambda) {\n        final int nM1 = d.length - 1;\n        double si = -lambda;\n        int sixI = 0;\n        for (int i = 0; i < nM1; ++i) {\n            final double di   = d[i];\n            final double li   = l[i];\n            final double diP1 = di + si;\n            final double liP1 = li * di / diP1;\n            work[sixI]        = si;\n            work[sixI + 1]    = diP1;\n            work[sixI + 2]    = liP1;\n            si = li * liP1 * si - lambda;\n            sixI += 6;\n        }\n        work[6 * nM1 + 1] = d[nM1] + si;\n        work[6 * nM1]     = si;\n    }\n\n    /**\n     * Decompose matrix LDL<sup>T</sup> - &lambda; I as\n     * U<sub>-</sub>D<sub>-</sub>U<sub>-</sub><sup>T</sup>.\n     * <p>This method corresponds to algorithm 4.4.5 (dqds) from Dhillon's thesis.</p>\n     * @param d diagonal elements of D\n     * @param l off-diagonal elements of L\n     * @param lambda shift to apply\n     */\n    private void progressiveQuotientDifferenceWithShift(final double[] d, final double[] l,\n                                                        final double lambda) {\n        final int nM1 = d.length - 1;\n        double pi = d[nM1] - lambda;\n        int sixI = 6 * (nM1 - 1);\n        for (int i = nM1 - 1; i >= 0; --i) {\n            final double di   = d[i];\n            final double li   = l[i];\n            final double diP1 = di * li * li + pi;\n            final double t    = di / diP1;\n            work[sixI +  9]   = pi;\n            work[sixI + 10]   = diP1;\n            work[sixI +  5]   = li * t;\n            pi = pi * t - lambda;\n            sixI -= 6;\n        }\n        work[3] = pi;\n        work[4] = pi;\n    }\n\n}", 'tree': 'MethodDeclaration modifiers private_ter ^ ^ return_type BasicType name boolean_ter ^ ^ ^ ^ name meth0 ^ ^ parameters FormalParameter modifiers final_ter ^ ^ type BasicType name int_ter ^ ^ ^ ^ name par0 ^ ^ ^ FormalParameter modifiers final_ter ^ ^ type BasicType name int_ter ^ ^ ^ ^ name par1 ^ ^ ^ ^ body IfStatement condition BinaryOperation operator <_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl Literal value 1.5_ter ^ ^ ^ ^ operandr MemberReference selectors ArraySelector index MemberReference member pingPong_ter ^ ^ ^ ^ ^ ^ member work_ter ^ ^ ^ ^ ^ ^ operandr MemberReference selectors ArraySelector index BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl Literal value 4_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MemberReference member pingPong_ter ^ ^ ^ ^ ^ ^ ^ ^ member work_ter ^ ^ ^ ^ ^ ^ then_statement BlockStatement statements LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl Literal value 4_ter ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ForStatement control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc1 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr MemberReference member loc0 ^ ^ ^ ^ ^ ^ update Assignment expressionl MemberReference member loc1 ^ ^ ^ ^ value Literal value 4_ter ^ ^ ^ ^ type +=_ter ^ ^ ^ ^ ^ ^ body BlockStatement statements ForStatement control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc2 ^ ^ ^ ^ operandr Literal value 4_ter ^ ^ ^ ^ ^ ^ update Assignment expressionl MemberReference member loc2 ^ ^ ^ ^ value MemberReference member par1 ^ ^ ^ ^ type +=_ter ^ ^ ^ ^ ^ ^ body BlockStatement statements LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name loc3 ^ ^ initializer MemberReference selectors ArraySelector index BinaryOperation operator +_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr MemberReference member loc2 ^ ^ ^ ^ ^ ^ ^ ^ member work_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference selectors ArraySelector index BinaryOperation operator +_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr MemberReference member loc2 ^ ^ ^ ^ ^ ^ ^ ^ member work_ter ^ ^ ^ ^ value MemberReference selectors ArraySelector index BinaryOperation operator -_ter ^ ^ operandl MemberReference member loc0 ^ ^ ^ ^ operandr MemberReference member loc2 ^ ^ ^ ^ ^ ^ ^ ^ member work_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference selectors ArraySelector index BinaryOperation operator -_ter ^ ^ operandl MemberReference member loc0 ^ ^ ^ ^ operandr MemberReference member loc2 ^ ^ ^ ^ ^ ^ ^ ^ member work_ter ^ ^ ^ ^ value MemberReference member loc3 ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member loc0 ^ ^ ^ ^ value Literal value 4_ter ^ ^ ^ ^ type -=_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ ^ ^ ', 'prob': [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], 'mode': 0, 'line': 1135, 'isa': False, 'fl_score': 1}]
before@0 batch0 x: 0: root ^  ; []
after@0 batch0 x: 0: root ^  ; []
copynode 0:  root modified ^ ^ ; ['root -> modified']
copynode 0:  root add ^ ^ ; ['root -> add']
copynode 0:  root ^ ; ['root -> End']
copynode 0:  root return_type ^ ^ ; ['root -> return_type']
copynode 0:  root ReturnStatement ^ ^ ; ['root -> ReturnStatement']
copynode 0:  root StatementExpression ^ ^ ; ['root -> StatementExpression']
copynode 0:  root IfStatement ^ ^ ; ['root -> IfStatement']
copynode 0:  root Literal-Literal value 4_ter ^ ^ ^  ^ ^ ; ['copy-Literal']
copynode 0:  root parameters ^ ^ ; ['root -> parameters']
copynode 0:  root operator-operator -_ter ^ ^  ^ ^ ; ['copy-operator']
before@1 batch0 x: -12.00745677947998: root operator-operator -_ter ^ ^  ^ ^  ; ['copy-operator']
after@1 batch0 x: -12.00745677947998: root operator-operator -_ter ^ ^  ^ ^  ; ['copy-operator']
copynode -0.18274322152137756:  root modified ^ LocalVariableDeclaration ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration']
copynode -0.18274322152137756:  root modified ^ Literal-Literal value 4_ter ^ ^ ^  ^ ^ ; ['root -> modified', 'copy-Literal']
copynode -0.18274322152137756:  root modified ^ BasicType-BasicType name int_ter ^ ^ ^  ^ ^ ; ['root -> modified', 'copy-BasicType']
copynode -1.7929441928863525:  root add ^ IfStatement ^ ^ ; ['root -> add', 'root -> IfStatement']
copynode -1.7929441928863525:  root add ^ StatementExpression ^ ^ ; ['root -> add', 'root -> StatementExpression']
copynode -0.18274322152137756:  root modified ^ operator-operator -_ter ^ ^  ^ ^ ; ['root -> modified', 'copy-operator']
copynode -0.18274322152137756:  root modified ^ Literal-Literal value 1_ter ^ ^ ^  ^ ^ ; ['root -> modified', 'copy-Literal']
copynode -0.18274322152137756:  root modified ^ MemberReference-MemberReference member par0 ^ ^ ^  ^ ^ ; ['root -> modified', 'copy-MemberReference']
copynode -1.7929441928863525:  root add ^ ReturnStatement ^ ^ ; ['root -> add', 'root -> ReturnStatement']
copynode -0.18274322152137756:  root modified ^ operator-operator *_ter ^ ^  ^ ^ ; ['root -> modified', 'copy-operator']
copynode -1.7929441928863525:  root add ^ BreakStatement_ter ^ ^ ; ['root -> add', 'root -> BreakStatement_ter']
copynode -1.7929441928863525:  root add ^ control ^ ^ ; ['root -> add', 'root -> control']
copynode -1.7929441928863525:  root add ^ LocalVariableDeclaration ^ ^ ; ['root -> add', 'root -> LocalVariableDeclaration']
copynode -0.18274322152137756:  root modified ^ StatementExpression ^ ^ ; ['root -> modified', 'root -> StatementExpression']
copynode -0.18274322152137756:  root modified ^ control ^ ^ ; ['root -> modified', 'root -> control']
copynode -1.7929441928863525:  root add ^ WhileStatement ^ ^ ; ['root -> add', 'root -> WhileStatement']
copynode -1.7929441928863525:  root add ^ ReturnStatement_ter ^ ^ ; ['root -> add', 'root -> ReturnStatement_ter']
copynode -1.7929441928863525:  root add ^ ContinueStatement_ter ^ ^ ; ['root -> add', 'root -> ContinueStatement_ter']
copynode -1.7929441928863525:  root add ^ AssertStatement ^ ^ ; ['root -> add', 'root -> AssertStatement']
copynode -0.18274322152137756:  root modified ^ ReturnStatement ^ ^ ; ['root -> modified', 'root -> ReturnStatement']
copynode -9.282392501831055:  root return_type ReferenceType ^ ^ ^ ; ['root -> return_type', 'return_type -> ReferenceType']
copynode -10.550607681274414:  root IfStatement condition ^ ^ ^ ; ['root -> IfStatement', 'IfStatement -> condition']
copynode -10.47998046875:  root StatementExpression expression ^ ^ ^ ; ['root -> StatementExpression', 'StatementExpression -> expression']
copynode -10.117055892944336:  root ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ ^ ; ['root -> ReturnStatement', 'copy-ReturnStatement']
copynode -10.117055892944336:  root ReturnStatement expression ^ ^ ^ ; ['root -> ReturnStatement', 'ReturnStatement -> expression']
copynode -11.312389373779297:  root Literal-Literal value 4_ter ^ ^ ^  value ^ ^ ^ ; ['copy-Literal', 'Literal -> value']
copynode -10.117055892944336:  root ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ ^ ; ['root -> ReturnStatement', 'copy-ReturnStatement']
copynode -11.315549850463867:  root parameters FormalParameter ^ ^ ^ ; ['root -> parameters', 'parameters -> FormalParameter']
copynode -9.282392501831055:  root return_type BasicType ^ ^ ^ ; ['root -> return_type', 'return_type -> BasicType']
copynode -12.00745677947998:  root operator-operator -_ter ^ ^  -_ter ^ ^ ^ ; ['copy-operator', 'operator -> -_ter']
copynode -10.47998046875:  root StatementExpression expression Assignment expressionl MemberReference selectors ArraySelector index BinaryOperation operator -_ter ^ ^ operandl MemberReference member loc0 ^ ^ ^ ^ operandr MemberReference member loc2 ^ ^ ^ ^ ^ ^ ^ ^ member work_ter ^ ^ ^ ^ value MemberReference member loc3 ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ; ['root -> StatementExpression', 'copy-StatementExpression']
copynode -10.47998046875:  root StatementExpression expression Assignment expressionl MemberReference member loc0 ^ ^ ^ ^ value Literal value 4_ter ^ ^ ^ ^ type -=_ter ^ ^ ^ ^ ^ ^ ; ['root -> StatementExpression', 'copy-StatementExpression']
copynode -10.47998046875:  root StatementExpression expression Assignment expressionl MemberReference selectors ArraySelector index BinaryOperation operator +_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr MemberReference member loc2 ^ ^ ^ ^ ^ ^ ^ ^ member work_ter ^ ^ ^ ^ value MemberReference selectors ArraySelector index BinaryOperation operator -_ter ^ ^ operandl MemberReference member loc0 ^ ^ ^ ^ operandr MemberReference member loc2 ^ ^ ^ ^ ^ ^ ^ ^ member work_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ; ['root -> StatementExpression', 'copy-StatementExpression']
copynode -11.315549850463867:  root parameters ^ ^ ; ['root -> parameters', 'parameters -> End']
copynode -12.00745677947998:  root operator-operator -_ter ^ ^  +_ter ^ ^ ^ ; ['copy-operator', 'operator -> +_ter']
copynode -11.315549850463867:  root parameters MemberReference ^ ^ ^ ; ['root -> parameters', 'parameters -> MemberReference']
copynode -12.00745677947998:  root operator-operator -_ter ^ ^  /_ter ^ ^ ^ ; ['copy-operator', 'operator -> /_ter']
copynode -11.315549850463867:  root parameters FormalParameter modifiers final_ter ^ ^ type BasicType name int_ter ^ ^ ^ ^ name par0 ^ ^ ^ FormalParameter modifiers final_ter ^ ^ type BasicType name int_ter ^ ^ ^ ^ name par1 ^ ^ ^ ^ ^ ; ['root -> parameters', 'copy-parameters']
copynode -9.282392501831055:  root return_type BasicType name boolean_ter ^ ^ ^ ^ ^ ; ['root -> return_type', 'copy-return_type']
copynode -11.312389373779297:  root Literal-Literal value 4_ter ^ ^ ^  value 4_ter ^ ^ ^ ^ ; ['copy-Literal', 'copy-Literal']
copynode -12.00745677947998:  root operator-operator -_ter ^ ^  *_ter ^ ^ ^ ; ['copy-operator', 'operator -> *_ter']
copynode -12.00745677947998:  root operator-operator -_ter ^ ^  %_ter ^ ^ ^ ; ['copy-operator', 'operator -> %_ter']
copynode -11.315549850463867:  root parameters InferredFormalParameter ^ ^ ^ ; ['root -> parameters', 'parameters -> InferredFormalParameter']
copynode -11.312389373779297:  root Literal-Literal value 4_ter ^ ^ ^  prefix_operators ^ value ^ ^ ^ ; ['copy-Literal', 'Literal -> prefix_operators value']
copynode -11.312389373779297:  root Literal-Literal value 4_ter ^ ^ ^  value 4_ter ^ ^ ^ ^ ; ['copy-Literal', 'copy-Literal']
copynode -11.312389373779297:  root Literal-Literal value 4_ter ^ ^ ^  value false_ter ^ ^ ^ ^ ; ['copy-Literal', 'copy-Literal']
copynode -11.312389373779297:  root Literal-Literal value 4_ter ^ ^ ^  value true_ter ^ ^ ^ ^ ; ['copy-Literal', 'copy-Literal']
copynode -11.312389373779297:  root Literal-Literal value 4_ter ^ ^ ^  value 4_ter ^ ^ ^ ^ ; ['copy-Literal', 'copy-Literal']
copynode -12.00745677947998:  root operator-operator -_ter ^ ^  >>_ter ^ ^ ^ ; ['copy-operator', 'operator -> >>_ter']
copynode -12.00745677947998:  root operator-operator -_ter ^ ^  <<_ter ^ ^ ^ ; ['copy-operator', 'operator -> <<_ter']
copynode -11.312389373779297:  root Literal-Literal value 4_ter ^ ^ ^  value 4_ter ^ ^ ^ ^ ; ['copy-Literal', 'copy-Literal']
copynode -12.00745677947998:  root operator-operator -_ter ^ ^  ==_ter ^ ^ ^ ; ['copy-operator', 'operator -> ==_ter']
copynode -12.00745677947998:  root operator-operator -_ter ^ ^  <=_ter ^ ^ ^ ; ['copy-operator', 'operator -> <=_ter']
copynode -11.312389373779297:  root Literal-Literal value 4_ter ^ ^ ^  value 1_ter ^ ^ ^ ^ ; ['copy-Literal', 'copy-Literal']
copynode -12.00745677947998:  root operator-operator -_ter ^ ^  &_ter ^ ^ ^ ; ['copy-operator', 'operator -> &_ter']
copynode -9.282392501831055:  root return_type par0 ^ ^ ^ ; ['root -> return_type', 'copy-FormalParameter']
copynode -11.312389373779297:  root Literal-Literal value 4_ter ^ ^ ^  value 1_ter ^ ^ ^ ^ ; ['copy-Literal', 'copy-Literal']
copynode -10.550607681274414:  root IfStatement condition BinaryOperation operator <_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl Literal value 1.5_ter ^ ^ ^ ^ operandr MemberReference selectors ArraySelector index MemberReference member pingPong_ter ^ ^ ^ ^ ^ ^ member work_ter ^ ^ ^ ^ ^ ^ operandr MemberReference selectors ArraySelector index BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl Literal value 4_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MemberReference member pingPong_ter ^ ^ ^ ^ ^ ^ ^ ^ member work_ter ^ ^ ^ ^ ^ ^ then_statement BlockStatement statements LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl Literal value 4_ter ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ForStatement control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc1 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr MemberReference member loc0 ^ ^ ^ ^ ^ ^ update Assignment expressionl MemberReference member loc1 ^ ^ ^ ^ value Literal value 4_ter ^ ^ ^ ^ type +=_ter ^ ^ ^ ^ ^ ^ body BlockStatement statements ForStatement control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc2 ^ ^ ^ ^ operandr Literal value 4_ter ^ ^ ^ ^ ^ ^ update Assignment expressionl MemberReference member loc2 ^ ^ ^ ^ value MemberReference member par1 ^ ^ ^ ^ type +=_ter ^ ^ ^ ^ ^ ^ body BlockStatement statements LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name loc3 ^ ^ initializer MemberReference selectors ArraySelector index BinaryOperation operator +_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr MemberReference member loc2 ^ ^ ^ ^ ^ ^ ^ ^ member work_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference selectors ArraySelector index BinaryOperation operator +_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr MemberReference member loc2 ^ ^ ^ ^ ^ ^ ^ ^ member work_ter ^ ^ ^ ^ value MemberReference selectors ArraySelector index BinaryOperation operator -_ter ^ ^ operandl MemberReference member loc0 ^ ^ ^ ^ operandr MemberReference member loc2 ^ ^ ^ ^ ^ ^ ^ ^ member work_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference selectors ArraySelector index BinaryOperation operator -_ter ^ ^ operandl MemberReference member loc0 ^ ^ ^ ^ operandr MemberReference member loc2 ^ ^ ^ ^ ^ ^ ^ ^ member work_ter ^ ^ ^ ^ value MemberReference member loc3 ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member loc0 ^ ^ ^ ^ value Literal value 4_ter ^ ^ ^ ^ type -=_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> IfStatement', 'copy-IfStatement']
copynode -9.282392501831055:  root return_type par1 ^ ^ ^ ; ['root -> return_type', 'copy-FormalParameter']
copynode -9.282392501831055:  root return_type unknown ^ ^ ^ ; ['root -> return_type', 'start -> unknown']
copynode -10.117055892944336:  root ReturnStatement par1 ^ ^ ^ ; ['root -> ReturnStatement', 'copy-FormalParameter']
copynode -10.117055892944336:  root ReturnStatement par0 ^ ^ ^ ; ['root -> ReturnStatement', 'copy-FormalParameter']
copynode -11.315549850463867:  root parameters Cast ^ ^ ^ ; ['root -> parameters', 'parameters -> Cast']
copynode -11.315549850463867:  root parameters loc3 ^ ^ ^ ; ['root -> parameters', 'copy-VariableDeclarator']
copynode -11.315549850463867:  root parameters loc2 ^ ^ ^ ; ['root -> parameters', 'copy-VariableDeclarator']
copynode -11.315549850463867:  root parameters loc0 ^ ^ ^ ; ['root -> parameters', 'copy-VariableDeclarator']
copynode -11.315549850463867:  root parameters loc1 ^ ^ ^ ; ['root -> parameters', 'copy-VariableDeclarator']
copynode -10.550607681274414:  root IfStatement condition ^ then_statement ^ ^ ^ ; ['root -> IfStatement', 'IfStatement -> condition then_statement']
copynode -10.47998046875:  root StatementExpression par1 ^ ^ ^ ; ['root -> StatementExpression', 'copy-FormalParameter']
copynode -10.47998046875:  root StatementExpression par0 ^ ^ ^ ; ['root -> StatementExpression', 'copy-FormalParameter']
copynode -10.550607681274414:  root IfStatement unknown ^ ^ ^ ; ['root -> IfStatement', 'start -> unknown']
copynode -10.550607681274414:  root IfStatement par1 ^ ^ ^ ; ['root -> IfStatement', 'copy-FormalParameter']
copynode -10.550607681274414:  root IfStatement par0 ^ ^ ^ ; ['root -> IfStatement', 'copy-FormalParameter']
copynode -10.47998046875:  root StatementExpression unknown ^ ^ ^ ; ['root -> StatementExpression', 'start -> unknown']
copynode -9.282392501831055:  root return_type loc3 ^ ^ ^ ; ['root -> return_type', 'copy-VariableDeclarator']
copynode -9.282392501831055:  root return_type loc2 ^ ^ ^ ; ['root -> return_type', 'copy-VariableDeclarator']
copynode -9.282392501831055:  root return_type loc1 ^ ^ ^ ; ['root -> return_type', 'copy-VariableDeclarator']
copynode -9.282392501831055:  root return_type loc0 ^ ^ ^ ; ['root -> return_type', 'copy-VariableDeclarator']
copynode -10.550607681274414:  root IfStatement condition ^ then_statement ^ else_statement ^ ^ ^ ; ['root -> IfStatement', 'IfStatement -> condition then_statement else_statement']
copynode -10.117055892944336:  root ReturnStatement unknown ^ ^ ^ ; ['root -> ReturnStatement', 'start -> unknown']
copynode -10.117055892944336:  root ReturnStatement loc3 ^ ^ ^ ; ['root -> ReturnStatement', 'copy-VariableDeclarator']
copynode -10.117055892944336:  root ReturnStatement loc1 ^ ^ ^ ; ['root -> ReturnStatement', 'copy-VariableDeclarator']
copynode -10.117055892944336:  root ReturnStatement loc2 ^ ^ ^ ; ['root -> ReturnStatement', 'copy-VariableDeclarator']
copynode -10.47998046875:  root StatementExpression loc1 ^ ^ ^ ; ['root -> StatementExpression', 'copy-VariableDeclarator']
copynode -10.47998046875:  root StatementExpression label ^ expression ^ ^ ^ ; ['root -> StatementExpression', 'StatementExpression -> label expression']
copynode -10.47998046875:  root StatementExpression loc3 ^ ^ ^ ; ['root -> StatementExpression', 'copy-VariableDeclarator']
copynode -10.117055892944336:  root ReturnStatement loc0 ^ ^ ^ ; ['root -> ReturnStatement', 'copy-VariableDeclarator']
copynode -10.550607681274414:  root IfStatement loc2 ^ ^ ^ ; ['root -> IfStatement', 'copy-VariableDeclarator']
copynode -10.550607681274414:  root IfStatement loc3 ^ ^ ^ ; ['root -> IfStatement', 'copy-VariableDeclarator']
copynode -10.550607681274414:  root IfStatement loc1 ^ ^ ^ ; ['root -> IfStatement', 'copy-VariableDeclarator']
before@2 batch0 x: -31.560714721679688: root IfStatement loc1 ^ ^ ^  ; ['root -> IfStatement', 'copy-VariableDeclarator']
after@2 batch0 x: -31.560714721679688: root IfStatement loc1 ^ ^ ^  ; ['root -> IfStatement', 'copy-VariableDeclarator']
copynode -1.220932513475418:  root modified ^ Literal-Literal value 4_ter ^ ^ ^  value ^ ^ ^ ; ['root -> modified', 'copy-Literal', 'Literal -> value']
copynode -1.1971741020679474:  root modified ^ LocalVariableDeclaration type ^ declarators ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators']
copynode -2.5520554780960083:  root add ^ IfStatement condition ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition']
copynode -1.1971741020679474:  root modified ^ LocalVariableDeclaration modifiers ^ type ^ declarators ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators']
copynode -2.7528687715530396:  root add ^ StatementExpression expression ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression']
copynode -3.265022426843643:  root modified ^ MemberReference-MemberReference member par0 ^ ^ ^  member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member']
copynode -2.8585552275180817:  root modified ^ operator-operator -_ter ^ ^  -_ter ^ ^ ^ ; ['root -> modified', 'copy-operator', 'operator -> -_ter']
copynode -3.202570825815201:  root modified ^ Literal-Literal value 1_ter ^ ^ ^  value ^ ^ ^ ; ['root -> modified', 'copy-Literal', 'Literal -> value']
copynode -2.535458952188492:  root modified ^ BasicType-BasicType name int_ter ^ ^ ^  name ^ ^ ^ ; ['root -> modified', 'copy-BasicType', 'BasicType -> name']
copynode -2.535458952188492:  root modified ^ BasicType-BasicType name int_ter ^ ^ ^  name double_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-BasicType', 'copy-BasicType']
copynode -2.535458952188492:  root modified ^ BasicType-BasicType name int_ter ^ ^ ^  name int_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-BasicType', 'copy-BasicType']
copynode -4.084859848022461:  root add ^ ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'copy-ReturnStatement']
copynode -4.115951210260391:  root modified ^ operator-operator *_ter ^ ^  -_ter ^ ^ ^ ; ['root -> modified', 'copy-operator', 'operator -> -_ter']
copynode -2.7528687715530396:  root add ^ StatementExpression expression Assignment expressionl MemberReference selectors ArraySelector index BinaryOperation operator -_ter ^ ^ operandl MemberReference member loc0 ^ ^ ^ ^ operandr MemberReference member loc2 ^ ^ ^ ^ ^ ^ ^ ^ member work_ter ^ ^ ^ ^ value MemberReference member loc3 ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'copy-StatementExpression']
copynode -1.220932513475418:  root modified ^ Literal-Literal value 4_ter ^ ^ ^  value 4_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-Literal', 'copy-Literal']
copynode -1.220932513475418:  root modified ^ Literal-Literal value 4_ter ^ ^ ^  value 4_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-Literal', 'copy-Literal']
copynode -2.7528687715530396:  root add ^ StatementExpression expression Assignment expressionl MemberReference member loc0 ^ ^ ^ ^ value Literal value 4_ter ^ ^ ^ ^ type -=_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'copy-StatementExpression']
copynode -2.535458952188492:  root modified ^ BasicType-BasicType name int_ter ^ ^ ^  name int_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-BasicType', 'copy-BasicType']
copynode -1.220932513475418:  root modified ^ Literal-Literal value 4_ter ^ ^ ^  prefix_operators ^ value ^ ^ ^ ; ['root -> modified', 'copy-Literal', 'Literal -> prefix_operators value']
copynode -1.220932513475418:  root modified ^ Literal-Literal value 4_ter ^ ^ ^  value 4_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-Literal', 'copy-Literal']
copynode -1.220932513475418:  root modified ^ Literal-Literal value 4_ter ^ ^ ^  value false_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-Literal', 'copy-Literal']
copynode -2.7528687715530396:  root add ^ StatementExpression expression Assignment expressionl MemberReference selectors ArraySelector index BinaryOperation operator +_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr MemberReference member loc2 ^ ^ ^ ^ ^ ^ ^ ^ member work_ter ^ ^ ^ ^ value MemberReference selectors ArraySelector index BinaryOperation operator -_ter ^ ^ operandl MemberReference member loc0 ^ ^ ^ ^ operandr MemberReference member loc2 ^ ^ ^ ^ ^ ^ ^ ^ member work_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'copy-StatementExpression']
copynode -2.8585552275180817:  root modified ^ operator-operator -_ter ^ ^  +_ter ^ ^ ^ ; ['root -> modified', 'copy-operator', 'operator -> +_ter']
copynode -1.220932513475418:  root modified ^ Literal-Literal value 4_ter ^ ^ ^  value true_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-Literal', 'copy-Literal']
copynode -4.084859848022461:  root add ^ ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'copy-ReturnStatement']
copynode -2.535458952188492:  root modified ^ BasicType-BasicType name int_ter ^ ^ ^  name int_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-BasicType', 'copy-BasicType']
copynode -2.8585552275180817:  root modified ^ operator-operator -_ter ^ ^  /_ter ^ ^ ^ ; ['root -> modified', 'copy-operator', 'operator -> /_ter']
copynode -5.910301446914673:  root add ^ BreakStatement_ter ^ ^ ; ['root -> add', 'root -> BreakStatement_ter', 'root -> End']
copynode -2.535458952188492:  root modified ^ BasicType-BasicType name int_ter ^ ^ ^  name int_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-BasicType', 'copy-BasicType']
copynode -2.8585552275180817:  root modified ^ operator-operator -_ter ^ ^  *_ter ^ ^ ^ ; ['root -> modified', 'copy-operator', 'operator -> *_ter']
copynode -2.8585552275180817:  root modified ^ operator-operator -_ter ^ ^  %_ter ^ ^ ^ ; ['root -> modified', 'copy-operator', 'operator -> %_ter']
copynode -1.220932513475418:  root modified ^ Literal-Literal value 4_ter ^ ^ ^  value 4_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-Literal', 'copy-Literal']
copynode -4.084859848022461:  root add ^ ReturnStatement expression ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'ReturnStatement -> expression']
copynode -2.535458952188492:  root modified ^ BasicType-BasicType name int_ter ^ ^ ^  name int_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-BasicType', 'copy-BasicType']
copynode -4.115951210260391:  root modified ^ operator-operator *_ter ^ ^  +_ter ^ ^ ^ ; ['root -> modified', 'copy-operator', 'operator -> +_ter']
copynode -2.535458952188492:  root modified ^ BasicType-BasicType name int_ter ^ ^ ^  name boolean_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-BasicType', 'copy-BasicType']
copynode -2.8585552275180817:  root modified ^ operator-operator -_ter ^ ^  <=_ter ^ ^ ^ ; ['root -> modified', 'copy-operator', 'operator -> <=_ter']
copynode -2.8585552275180817:  root modified ^ operator-operator -_ter ^ ^  >=_ter ^ ^ ^ ; ['root -> modified', 'copy-operator', 'operator -> >=_ter']
copynode -2.8585552275180817:  root modified ^ operator-operator -_ter ^ ^  >>_ter ^ ^ ^ ; ['root -> modified', 'copy-operator', 'operator -> >>_ter']
copynode -3.202570825815201:  root modified ^ Literal-Literal value 1_ter ^ ^ ^  prefix_operators ^ value ^ ^ ^ ; ['root -> modified', 'copy-Literal', 'Literal -> prefix_operators value']
copynode -3.202570825815201:  root modified ^ Literal-Literal value 1_ter ^ ^ ^  value 4_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-Literal', 'copy-Literal']
copynode -3.202570825815201:  root modified ^ Literal-Literal value 1_ter ^ ^ ^  value 4_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-Literal', 'copy-Literal']
copynode -6.236650705337524:  root add ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc1 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr MemberReference member loc0 ^ ^ ^ ^ ^ ^ update Assignment expressionl MemberReference member loc1 ^ ^ ^ ^ value Literal value 4_ter ^ ^ ^ ^ type +=_ter ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> control', 'copy-control']
copynode -1.220932513475418:  root modified ^ Literal-Literal value 4_ter ^ ^ ^  value 1.5_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-Literal', 'copy-Literal']
copynode -6.969362407922745:  root modified ^ StatementExpression expression ^ ^ ^ ; ['root -> modified', 'root -> StatementExpression', 'StatementExpression -> expression']
copynode -3.265022426843643:  root modified ^ MemberReference-MemberReference member par0 ^ ^ ^  qualifier ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member']
copynode -1.220932513475418:  root modified ^ Literal-Literal value 4_ter ^ ^ ^  value 1_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-Literal', 'copy-Literal']
copynode -4.115951210260391:  root modified ^ operator-operator *_ter ^ ^  /_ter ^ ^ ^ ; ['root -> modified', 'copy-operator', 'operator -> /_ter']
copynode -1.1971741020679474:  root modified ^ LocalVariableDeclaration annotations ^ type ^ declarators ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> annotations type declarators']
copynode -3.202570825815201:  root modified ^ Literal-Literal value 1_ter ^ ^ ^  value 4_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-Literal', 'copy-Literal']
copynode -2.8585552275180817:  root modified ^ operator-operator -_ter ^ ^  ==_ter ^ ^ ^ ; ['root -> modified', 'copy-operator', 'operator -> ==_ter']
copynode -6.890615701675415:  root add ^ LocalVariableDeclaration type ^ declarators ^ ^ ^ ; ['root -> add', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators']
copynode -6.236650705337524:  root add ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc2 ^ ^ ^ ^ operandr Literal value 4_ter ^ ^ ^ ^ ^ ^ update Assignment expressionl MemberReference member loc2 ^ ^ ^ ^ value MemberReference member par1 ^ ^ ^ ^ type +=_ter ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> control', 'copy-control']
copynode -2.8585552275180817:  root modified ^ operator-operator -_ter ^ ^  <<_ter ^ ^ ^ ; ['root -> modified', 'copy-operator', 'operator -> <<_ter']
copynode -7.217060327529907:  root add ^ WhileStatement condition ^ ^ ^ ; ['root -> add', 'root -> WhileStatement', 'WhileStatement -> condition']
copynode -3.202570825815201:  root modified ^ Literal-Literal value 1_ter ^ ^ ^  value false_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-Literal', 'copy-Literal']
copynode -3.202570825815201:  root modified ^ Literal-Literal value 1_ter ^ ^ ^  value true_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-Literal', 'copy-Literal']
copynode -4.115951210260391:  root modified ^ operator-operator *_ter ^ ^  %_ter ^ ^ ^ ; ['root -> modified', 'copy-operator', 'operator -> %_ter']
copynode -3.265022426843643:  root modified ^ MemberReference-MemberReference member par0 ^ ^ ^  selectors ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> selectors member']
copynode -6.979427486658096:  root modified ^ control EnhancedForControl ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> EnhancedForControl']
copynode -4.115951210260391:  root modified ^ operator-operator *_ter ^ ^  >>_ter ^ ^ ^ ; ['root -> modified', 'copy-operator', 'operator -> >>_ter']
copynode -4.115951210260391:  root modified ^ operator-operator *_ter ^ ^  <=_ter ^ ^ ^ ; ['root -> modified', 'copy-operator', 'operator -> <=_ter']
copynode -4.115951210260391:  root modified ^ operator-operator *_ter ^ ^  *_ter ^ ^ ^ ; ['root -> modified', 'copy-operator', 'operator -> *_ter']
copynode -4.115951210260391:  root modified ^ operator-operator *_ter ^ ^  >=_ter ^ ^ ^ ; ['root -> modified', 'copy-operator', 'operator -> >=_ter']
copynode -7.829056024551392:  root add ^ ReturnStatement_ter ^ ^ ; ['root -> add', 'root -> ReturnStatement_ter', 'root -> End']
copynode -6.979427486658096:  root modified ^ control ForControl ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl']
copynode -7.861015558242798:  root add ^ ContinueStatement_ter ^ ^ ; ['root -> add', 'root -> ContinueStatement_ter', 'root -> End']
copynode -3.202570825815201:  root modified ^ Literal-Literal value 1_ter ^ ^ ^  value 4_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-Literal', 'copy-Literal']
copynode -4.115951210260391:  root modified ^ operator-operator *_ter ^ ^  ==_ter ^ ^ ^ ; ['root -> modified', 'copy-operator', 'operator -> ==_ter']
copynode -3.265022426843643:  root modified ^ MemberReference-MemberReference member par0 ^ ^ ^  prefix_operators ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> prefix_operators member']
copynode -6.890615701675415:  root add ^ LocalVariableDeclaration modifiers ^ type ^ declarators ^ ^ ^ ; ['root -> add', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators']
copynode -4.115951210260391:  root modified ^ operator-operator *_ter ^ ^  <<_ter ^ ^ ^ ; ['root -> modified', 'copy-operator', 'operator -> <<_ter']
copynode -1.1971741020679474:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name loc3 ^ ^ initializer MemberReference selectors ArraySelector index BinaryOperation operator +_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr MemberReference member loc2 ^ ^ ^ ^ ^ ^ ^ ^ member work_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'copy-LocalVariableDeclaration']
copynode -3.202570825815201:  root modified ^ Literal-Literal value 1_ter ^ ^ ^  value 1.5_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-Literal', 'copy-Literal']
copynode -3.202570825815201:  root modified ^ Literal-Literal value 1_ter ^ ^ ^  value 1_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-Literal', 'copy-Literal']
copynode -3.265022426843643:  root modified ^ MemberReference-MemberReference member par0 ^ ^ ^  postfix_operators ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> postfix_operators member']
copynode -8.243772745132446:  root add ^ AssertStatement condition ^ ^ ^ ; ['root -> add', 'root -> AssertStatement', 'AssertStatement -> condition']
copynode -6.236650705337524:  root add ^ control ForControl ^ ^ ^ ; ['root -> add', 'root -> control', 'control -> ForControl']
copynode -6.236650705337524:  root add ^ control EnhancedForControl ^ ^ ^ ; ['root -> add', 'root -> control', 'control -> EnhancedForControl']
copynode -9.19544044137001:  root modified ^ ReturnStatement expression ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression']
copynode -6.890615701675415:  root add ^ LocalVariableDeclaration annotations ^ type ^ declarators ^ ^ ^ ; ['root -> add', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> annotations type declarators']
copynode -2.535458952188492:  root modified ^ BasicType-BasicType name int_ter ^ ^ ^  name ^ dimensions ^ ^ ^ ; ['root -> modified', 'copy-BasicType', 'BasicType -> name dimensions']
copynode -5.910301446914673:  root add ^ BreakStatement_ter ^ StatementExpression ^ ^ ; ['root -> add', 'root -> BreakStatement_ter', 'root -> StatementExpression']
copynode -2.5520554780960083:  root add ^ IfStatement condition BinaryOperation operator <_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl Literal value 1.5_ter ^ ^ ^ ^ operandr MemberReference selectors ArraySelector index MemberReference member pingPong_ter ^ ^ ^ ^ ^ ^ member work_ter ^ ^ ^ ^ ^ ^ operandr MemberReference selectors ArraySelector index BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl Literal value 4_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MemberReference member pingPong_ter ^ ^ ^ ^ ^ ^ ^ ^ member work_ter ^ ^ ^ ^ ^ ^ then_statement BlockStatement statements LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl Literal value 4_ter ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ForStatement control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc1 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr MemberReference member loc0 ^ ^ ^ ^ ^ ^ update Assignment expressionl MemberReference member loc1 ^ ^ ^ ^ value Literal value 4_ter ^ ^ ^ ^ type +=_ter ^ ^ ^ ^ ^ ^ body BlockStatement statements ForStatement control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc2 ^ ^ ^ ^ operandr Literal value 4_ter ^ ^ ^ ^ ^ ^ update Assignment expressionl MemberReference member loc2 ^ ^ ^ ^ value MemberReference member par1 ^ ^ ^ ^ type +=_ter ^ ^ ^ ^ ^ ^ body BlockStatement statements LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name loc3 ^ ^ initializer MemberReference selectors ArraySelector index BinaryOperation operator +_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr MemberReference member loc2 ^ ^ ^ ^ ^ ^ ^ ^ member work_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference selectors ArraySelector index BinaryOperation operator +_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr MemberReference member loc2 ^ ^ ^ ^ ^ ^ ^ ^ member work_ter ^ ^ ^ ^ value MemberReference selectors ArraySelector index BinaryOperation operator -_ter ^ ^ operandl MemberReference member loc0 ^ ^ ^ ^ operandr MemberReference member loc2 ^ ^ ^ ^ ^ ^ ^ ^ member work_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference selectors ArraySelector index BinaryOperation operator -_ter ^ ^ operandl MemberReference member loc0 ^ ^ ^ ^ operandr MemberReference member loc2 ^ ^ ^ ^ ^ ^ ^ ^ member work_ter ^ ^ ^ ^ value MemberReference member loc3 ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member loc0 ^ ^ ^ ^ value Literal value 4_ter ^ ^ ^ ^ type -=_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'copy-IfStatement']
copynode -5.910301446914673:  root add ^ BreakStatement_ter ^ IfStatement ^ ^ ; ['root -> add', 'root -> BreakStatement_ter', 'root -> IfStatement']
copynode -6.890615701675415:  root add ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name loc3 ^ ^ initializer MemberReference selectors ArraySelector index BinaryOperation operator +_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr MemberReference member loc2 ^ ^ ^ ^ ^ ^ ^ ^ member work_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> LocalVariableDeclaration', 'copy-LocalVariableDeclaration']
copynode -10.551614373805933:  root IfStatement condition BinaryOperation ^ ^ ^ ^ ; ['root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation']
copynode -11.021216213703156:  root ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ ^ ; ['root -> ReturnStatement', 'copy-ReturnStatement', 'root -> End']
copynode -1.1971741020679474:  root modified ^ LocalVariableDeclaration modifiers ^ annotations ^ type ^ declarators ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers annotations type declarators']
copynode -5.910301446914673:  root add ^ BreakStatement_ter ^ BreakStatement_ter ^ ^ ; ['root -> add', 'root -> BreakStatement_ter', 'root -> BreakStatement_ter']
copynode -6.969362407922745:  root modified ^ StatementExpression expression Assignment expressionl MemberReference selectors ArraySelector index BinaryOperation operator -_ter ^ ^ operandl MemberReference member loc0 ^ ^ ^ ^ operandr MemberReference member loc2 ^ ^ ^ ^ ^ ^ ^ ^ member work_ter ^ ^ ^ ^ value MemberReference member loc3 ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> StatementExpression', 'copy-StatementExpression']
copynode -6.969362407922745:  root modified ^ StatementExpression expression Assignment expressionl MemberReference selectors ArraySelector index BinaryOperation operator +_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr MemberReference member loc2 ^ ^ ^ ^ ^ ^ ^ ^ member work_ter ^ ^ ^ ^ value MemberReference selectors ArraySelector index BinaryOperation operator -_ter ^ ^ operandl MemberReference member loc0 ^ ^ ^ ^ operandr MemberReference member loc2 ^ ^ ^ ^ ^ ^ ^ ^ member work_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> StatementExpression', 'copy-StatementExpression']
copynode -6.969362407922745:  root modified ^ StatementExpression expression Assignment expressionl MemberReference member loc0 ^ ^ ^ ^ value Literal value 4_ter ^ ^ ^ ^ type -=_ter ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> StatementExpression', 'copy-StatementExpression']
copynode -6.979427486658096:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc2 ^ ^ ^ ^ operandr Literal value 4_ter ^ ^ ^ ^ ^ ^ update Assignment expressionl MemberReference member loc2 ^ ^ ^ ^ value MemberReference member par1 ^ ^ ^ ^ type +=_ter ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'copy-control']
copynode -11.580673933029175:  root ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ ^ ; ['root -> ReturnStatement', 'copy-ReturnStatement', 'root -> End']
copynode -10.873108953237534:  root StatementExpression expression MethodInvocation ^ ^ ^ ^ ; ['root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation']
copynode -5.910301446914673:  root add ^ BreakStatement_ter ^ ReturnStatement ^ ^ ; ['root -> add', 'root -> BreakStatement_ter', 'root -> ReturnStatement']
copynode -10.873108953237534:  root StatementExpression expression Assignment ^ ^ ^ ^ ; ['root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment']
copynode -11.407616846263409:  root Literal-Literal value 4_ter ^ ^ ^  value 0_ter ^ ^ ^ ^ ; ['copy-Literal', 'Literal -> value', 'value -> 0_ter']
before@3 batch0 x: -11.788828365504742: root Literal-Literal value 4_ter ^ ^ ^  value 0_ter ^ ^ ^ ^  ; ['copy-Literal', 'Literal -> value', 'value -> 0_ter']
after@3 batch0 x: -11.788828365504742: root Literal-Literal value 4_ter ^ ^ ^  value 0_ter ^ ^ ^ ^  ; ['copy-Literal', 'Literal -> value', 'value -> 0_ter']
copynode -1.3934598118066788:  root modified ^ LocalVariableDeclaration type BasicType ^ ^ declarators ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType']
copynode -1.39140123128891:  root modified ^ Literal-Literal value 4_ter ^ ^ ^  value 0_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-Literal', 'Literal -> value', 'value -> 0_ter']
copynode -1.39140123128891:  root modified ^ Literal-Literal value 4_ter ^ ^ ^  value 1_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-Literal', 'Literal -> value', 'value -> 1_ter']
copynode -2.552964683389291:  root add ^ IfStatement condition BinaryOperation ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation']
copynode -1.39140123128891:  root modified ^ Literal-Literal value 4_ter ^ ^ ^  value 2_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-Literal', 'Literal -> value', 'value -> 2_ter']
copynode -3.340061694383621:  root modified ^ operator-operator -_ter ^ ^  -_ter ^ ^ ^ ; ['root -> modified', 'copy-operator', 'operator -> -_ter', 'root -> End']
copynode -2.9426179230213165:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ^ declarators ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers']
copynode -3.654336601495743:  root modified ^ BasicType-BasicType name int_ter ^ ^ ^  name long_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-BasicType', 'BasicType -> name', 'name -> long_ter']
copynode -3.932421952486038:  root modified ^ BasicType-BasicType name int_ter ^ ^ ^  name double_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-BasicType', 'copy-BasicType', 'root -> End']
copynode -3.1348244845867157:  root add ^ StatementExpression expression Assignment ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment']
copynode -3.1348244845867157:  root add ^ StatementExpression expression MethodInvocation ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation']
copynode -3.3911169469356537:  root modified ^ Literal-Literal value 1_ter ^ ^ ^  value 0_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-Literal', 'Literal -> value', 'value -> 0_ter']
copynode -4.1442369520664215:  root modified ^ BasicType-BasicType name int_ter ^ ^ ^  name int_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-BasicType', 'copy-BasicType', 'root -> End']
copynode -2.552964683389291:  root add ^ IfStatement condition MethodInvocation ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation']
copynode -2.9426179230213165:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ^ declarators ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers']
copynode -3.3911169469356537:  root modified ^ Literal-Literal value 1_ter ^ ^ ^  value 1_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-Literal', 'Literal -> value', 'value -> 1_ter']
copynode -4.5707762241363525:  root add ^ ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'copy-ReturnStatement', 'root -> End']
copynode -2.552964683389291:  root add ^ IfStatement condition MemberReference ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference']
copynode -4.629352957010269:  root modified ^ operator-operator *_ter ^ ^  -_ter ^ ^ ^ ; ['root -> modified', 'copy-operator', 'operator -> -_ter', 'root -> End']
copynode -2.9426179230213165:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ^ declarators ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers']
copynode -4.935335665941238:  root modified ^ Literal-Literal value 4_ter ^ ^ ^  value 4_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-Literal', 'copy-Literal', 'root -> End']
copynode -4.962456256151199:  root modified ^ Literal-Literal value 4_ter ^ ^ ^  value 4_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-Literal', 'copy-Literal', 'root -> End']
copynode -3.3158489167690277:  root modified ^ MemberReference-MemberReference member par0 ^ ^ ^  member loc1 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> loc1']
copynode -4.9028743505477905:  root add ^ StatementExpression expression Assignment expressionl MemberReference selectors ArraySelector index BinaryOperation operator -_ter ^ ^ operandl MemberReference member loc0 ^ ^ ^ ^ operandr MemberReference member loc2 ^ ^ ^ ^ ^ ^ ^ ^ member work_ter ^ ^ ^ ^ value MemberReference member loc3 ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'copy-StatementExpression', 'root -> End']
copynode -3.3911169469356537:  root modified ^ Literal-Literal value 1_ter ^ ^ ^  value 2_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-Literal', 'Literal -> value', 'value -> 2_ter']
copynode -5.041800647974014:  root modified ^ BasicType-BasicType name int_ter ^ ^ ^  name int_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-BasicType', 'copy-BasicType', 'root -> End']
copynode -5.046758681535721:  root modified ^ Literal-Literal value 4_ter ^ ^ ^  prefix_operators -_ter ^ ^ value ^ ^ ^ ; ['root -> modified', 'copy-Literal', 'Literal -> prefix_operators value', 'prefix_operators -> -_ter']
copynode -5.077465325593948:  root modified ^ Literal-Literal value 4_ter ^ ^ ^  value 4_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-Literal', 'copy-Literal', 'root -> End']
copynode -5.077988177537918:  root modified ^ Literal-Literal value 4_ter ^ ^ ^  value false_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-Literal', 'copy-Literal', 'root -> End']
copynode -5.096836715936661:  root modified ^ operator-operator -_ter ^ ^  +_ter ^ ^ ^ ; ['root -> modified', 'copy-operator', 'operator -> +_ter', 'root -> End']
copynode -5.115044146776199:  root modified ^ Literal-Literal value 4_ter ^ ^ ^  value true_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-Literal', 'copy-Literal', 'root -> End']
copynode -5.02944028377533:  root add ^ StatementExpression expression Assignment expressionl MemberReference member loc0 ^ ^ ^ ^ value Literal value 4_ter ^ ^ ^ ^ type -=_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'copy-StatementExpression', 'root -> End']
copynode -5.08898389339447:  root add ^ StatementExpression expression Assignment expressionl MemberReference selectors ArraySelector index BinaryOperation operator +_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr MemberReference member loc2 ^ ^ ^ ^ ^ ^ ^ ^ member work_ter ^ ^ ^ ^ value MemberReference selectors ArraySelector index BinaryOperation operator -_ter ^ ^ operandl MemberReference member loc0 ^ ^ ^ ^ operandr MemberReference member loc2 ^ ^ ^ ^ ^ ^ ^ ^ member work_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'copy-StatementExpression', 'root -> End']
copynode -3.3158489167690277:  root modified ^ MemberReference-MemberReference member par0 ^ ^ ^  member loc0 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> loc0']
copynode -3.1348244845867157:  root add ^ StatementExpression expression MemberReference ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MemberReference']
copynode -3.654336601495743:  root modified ^ BasicType-BasicType name int_ter ^ ^ ^  name int_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-BasicType', 'BasicType -> name', 'name -> int_ter']
copynode -3.3158489167690277:  root modified ^ MemberReference-MemberReference member par0 ^ ^ ^  member par1 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> par1']
copynode -2.9426179230213165:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ^ declarators ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'modifiers -> final_ter']
copynode -5.441528677940369:  root add ^ ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'copy-ReturnStatement', 'root -> End']
copynode -5.483506351709366:  root modified ^ BasicType-BasicType name int_ter ^ ^ ^  name int_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-BasicType', 'copy-BasicType', 'root -> End']
copynode -5.600166946649551:  root modified ^ operator-operator -_ter ^ ^  /_ter ^ ^ ^ ; ['root -> modified', 'copy-operator', 'operator -> /_ter', 'root -> End']
copynode -3.3158489167690277:  root modified ^ MemberReference-MemberReference member par0 ^ ^ ^  member pingPong_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'copy-member']
copynode -3.3158489167690277:  root modified ^ MemberReference-MemberReference member par0 ^ ^ ^  member par0 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> par0']
copynode -3.3158489167690277:  root modified ^ MemberReference-MemberReference member par0 ^ ^ ^  member unknown ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'start -> unknown']
copynode -5.991404682397842:  root modified ^ BasicType-BasicType name int_ter ^ ^ ^  name int_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-BasicType', 'copy-BasicType', 'root -> End']
copynode -6.019350677728653:  root modified ^ operator-operator -_ter ^ ^  *_ter ^ ^ ^ ; ['root -> modified', 'copy-operator', 'operator -> *_ter', 'root -> End']
copynode -3.3158489167690277:  root modified ^ MemberReference-MemberReference member par0 ^ ^ ^  member work_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'copy-member']
copynode -3.3158489167690277:  root modified ^ MemberReference-MemberReference member par0 ^ ^ ^  member pingPong_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'copy-member']
copynode -6.109312444925308:  root modified ^ operator-operator -_ter ^ ^  %_ter ^ ^ ^ ; ['root -> modified', 'copy-operator', 'operator -> %_ter', 'root -> End']
copynode -6.147261172533035:  root modified ^ Literal-Literal value 4_ter ^ ^ ^  value 4_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-Literal', 'copy-Literal', 'root -> End']
copynode -6.179898649454117:  root modified ^ BasicType-BasicType name int_ter ^ ^ ^  name int_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-BasicType', 'copy-BasicType', 'root -> End']
copynode -3.3158489167690277:  root modified ^ MemberReference-MemberReference member par0 ^ ^ ^  member loc2 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> loc2']
copynode -6.290958791971207:  root modified ^ operator-operator *_ter ^ ^  +_ter ^ ^ ^ ; ['root -> modified', 'copy-operator', 'operator -> +_ter', 'root -> End']
copynode -3.3158489167690277:  root modified ^ MemberReference-MemberReference member par0 ^ ^ ^  member work_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'copy-member']
copynode -6.429866224527359:  root modified ^ BasicType-BasicType name int_ter ^ ^ ^  name boolean_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-BasicType', 'copy-BasicType', 'root -> End']
copynode -6.551237732172012:  root modified ^ operator-operator -_ter ^ ^  <=_ter ^ ^ ^ ; ['root -> modified', 'copy-operator', 'operator -> <=_ter', 'root -> End']
copynode -6.1586387157440186:  root add ^ ReturnStatement expression Literal ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> Literal']
copynode -6.590933471918106:  root modified ^ operator-operator -_ter ^ ^  >=_ter ^ ^ ^ ; ['root -> modified', 'copy-operator', 'operator -> >=_ter', 'root -> End']
copynode -6.5911432802677155:  root modified ^ operator-operator -_ter ^ ^  >>_ter ^ ^ ^ ; ['root -> modified', 'copy-operator', 'operator -> >>_ter', 'root -> End']
copynode -6.699941545724869:  root modified ^ Literal-Literal value 1_ter ^ ^ ^  value 4_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-Literal', 'copy-Literal', 'root -> End']
copynode -6.709585100412369:  root modified ^ Literal-Literal value 1_ter ^ ^ ^  value 4_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-Literal', 'copy-Literal', 'root -> End']
copynode -6.676509767770767:  root modified ^ Literal-Literal value 1_ter ^ ^ ^  prefix_operators -_ter ^ ^ value ^ ^ ^ ; ['root -> modified', 'copy-Literal', 'Literal -> prefix_operators value', 'prefix_operators -> -_ter']
copynode -6.9118771851062775:  root modified ^ Literal-Literal value 4_ter ^ ^ ^  value 1.5_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-Literal', 'copy-Literal', 'root -> End']
copynode -1.3934598118066788:  root modified ^ LocalVariableDeclaration type ReferenceType ^ ^ declarators ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType']
copynode -7.141670733690262:  root modified ^ Literal-Literal value 4_ter ^ ^ ^  value 1_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-Literal', 'copy-Literal', 'root -> End']
copynode -7.151405721902847:  root modified ^ operator-operator *_ter ^ ^  /_ter ^ ^ ^ ; ['root -> modified', 'copy-operator', 'operator -> /_ter', 'root -> End']
copynode -7.239587694406509:  root modified ^ Literal-Literal value 1_ter ^ ^ ^  value 4_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-Literal', 'copy-Literal', 'root -> End']
copynode -7.244652181863785:  root modified ^ operator-operator -_ter ^ ^  ==_ter ^ ^ ^ ; ['root -> modified', 'copy-operator', 'operator -> ==_ter', 'root -> End']
copynode -7.299981534481049:  root add ^ LocalVariableDeclaration type BasicType ^ ^ declarators ^ ^ ^ ; ['root -> add', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType']
copynode -7.342243582010269:  root modified ^ operator-operator -_ter ^ ^  <<_ter ^ ^ ^ ; ['root -> modified', 'copy-operator', 'operator -> <<_ter', 'root -> End']
copynode -7.364530473947525:  root modified ^ Literal-Literal value 1_ter ^ ^ ^  value false_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-Literal', 'copy-Literal', 'root -> End']
copynode -1.39140123128891:  root modified ^ Literal-Literal value 4_ter ^ ^ ^  value false_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-Literal', 'Literal -> value', 'value -> false_ter']
copynode -7.388589769601822:  root modified ^ Literal-Literal value 1_ter ^ ^ ^  value true_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-Literal', 'copy-Literal', 'root -> End']
copynode -6.883430659770966:  root add ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc1 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr MemberReference member loc0 ^ ^ ^ ^ ^ ^ update Assignment expressionl MemberReference member loc1 ^ ^ ^ ^ value Literal value 4_ter ^ ^ ^ ^ type +=_ter ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> control', 'copy-control', 'root -> End']
copynode -2.552964683389291:  root add ^ IfStatement condition BinaryOperation operator <_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl Literal value 1.5_ter ^ ^ ^ ^ operandr MemberReference selectors ArraySelector index MemberReference member pingPong_ter ^ ^ ^ ^ ^ ^ member work_ter ^ ^ ^ ^ ^ ^ operandr MemberReference selectors ArraySelector index BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl Literal value 4_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MemberReference member pingPong_ter ^ ^ ^ ^ ^ ^ ^ ^ member work_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'copy-condition']
copynode -7.42148819565773:  root modified ^ operator-operator *_ter ^ ^  %_ter ^ ^ ^ ; ['root -> modified', 'copy-operator', 'operator -> %_ter', 'root -> End']
copynode -2.552964683389291:  root add ^ IfStatement condition Literal ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> Literal']
copynode -7.5671127140522:  root modified ^ control EnhancedForControl var ^ iterable ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> EnhancedForControl', 'EnhancedForControl -> var iterable']
copynode -7.590729147195816:  root modified ^ operator-operator *_ter ^ ^  >>_ter ^ ^ ^ ; ['root -> modified', 'copy-operator', 'operator -> >>_ter', 'root -> End']
copynode -7.617428213357925:  root modified ^ operator-operator *_ter ^ ^  <=_ter ^ ^ ^ ; ['root -> modified', 'copy-operator', 'operator -> <=_ter', 'root -> End']
copynode -7.619985967874527:  root modified ^ operator-operator *_ter ^ ^  *_ter ^ ^ ^ ; ['root -> modified', 'copy-operator', 'operator -> *_ter', 'root -> End']
copynode -7.001616805791855:  root modified ^ StatementExpression expression MethodInvocation ^ ^ ^ ^ ; ['root -> modified', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation']
copynode -7.347200155258179:  root add ^ WhileStatement condition BinaryOperation ^ ^ ^ ^ ; ['root -> add', 'root -> WhileStatement', 'WhileStatement -> condition', 'condition -> BinaryOperation']
copynode -7.837797552347183:  root modified ^ operator-operator *_ter ^ ^  >=_ter ^ ^ ^ ; ['root -> modified', 'copy-operator', 'operator -> >=_ter', 'root -> End']
copynode -7.329431772232056:  root add ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc2 ^ ^ ^ ^ operandr Literal value 4_ter ^ ^ ^ ^ ^ ^ update Assignment expressionl MemberReference member loc2 ^ ^ ^ ^ value MemberReference member par1 ^ ^ ^ ^ type +=_ter ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> control', 'copy-control', 'root -> End']
copynode -6.1586387157440186:  root add ^ ReturnStatement expression BinaryOperation ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation']
copynode -1.39140123128891:  root modified ^ Literal-Literal value 4_ter ^ ^ ^  value null_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-Literal', 'Literal -> value', 'value -> null_ter']
copynode -7.892665773630142:  root modified ^ Literal-Literal value 1_ter ^ ^ ^  value 4_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-Literal', 'copy-Literal', 'root -> End']
copynode -7.866613119840622:  root modified ^ control ForControl init ^ condition ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update']
copynode -4.9028743505477905:  root add ^ StatementExpression expression Assignment expressionl MemberReference selectors ArraySelector index BinaryOperation operator -_ter ^ ^ operandl MemberReference member loc0 ^ ^ ^ ^ operandr MemberReference member loc2 ^ ^ ^ ^ ^ ^ ^ ^ member work_ter ^ ^ ^ ^ value MemberReference member loc3 ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ StatementExpression ^ ^ ; ['root -> add', 'root -> StatementExpression', 'copy-StatementExpression', 'root -> StatementExpression']
copynode -1.39140123128891:  root modified ^ Literal-Literal value 4_ter ^ ^ ^  value true_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-Literal', 'Literal -> value', 'value -> true_ter']
copynode -7.001616805791855:  root modified ^ StatementExpression expression MemberReference ^ ^ ^ ^ ; ['root -> modified', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MemberReference']
copynode -7.010142952203751:  root modified ^ MemberReference-MemberReference member par0 ^ ^ ^  qualifier par0 ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0']
copynode -8.262137085199356:  root modified ^ operator-operator *_ter ^ ^  ==_ter ^ ^ ^ ; ['root -> modified', 'copy-operator', 'operator -> ==_ter', 'root -> End']
copynode -7.010142952203751:  root modified ^ MemberReference-MemberReference member par0 ^ ^ ^  qualifier unknown ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'start -> unknown']
copynode -3.1348244845867157:  root add ^ StatementExpression expression This ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> This']
copynode -1.39140123128891:  root modified ^ Literal-Literal value 4_ter ^ ^ ^  value <string>_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-Literal', 'Literal -> value', 'value -> <string>_ter']
before@4 batch0 x: -8.302755773067474: root modified ^ Literal-Literal value 4_ter ^ ^ ^  value <string>_ter ^ ^ ^ ^  ; ['root -> modified', 'copy-Literal', 'Literal -> value', 'value -> <string>_ter']
after@4 batch0 x: -8.302755773067474: root modified ^ Literal-Literal value 4_ter ^ ^ ^  value <string>_ter ^ ^ ^ ^  ; ['root -> modified', 'copy-Literal', 'Literal -> value', 'value -> <string>_ter']
copynode -1.3992949319072068:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType']
copynode -2.1110041737556458:  root modified ^ Literal-Literal value 4_ter ^ ^ ^  value 0_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-Literal', 'Literal -> value', 'value -> 0_ter', 'root -> End']
copynode -2.5468236804008484:  root modified ^ Literal-Literal value 4_ter ^ ^ ^  value 1_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-Literal', 'Literal -> value', 'value -> 1_ter', 'root -> End']
copynode -2.918772663688287:  root add ^ IfStatement condition BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
copynode -3.04595023393631:  root modified ^ Literal-Literal value 4_ter ^ ^ ^  value 2_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-Literal', 'Literal -> value', 'value -> 2_ter', 'root -> End']
copynode -3.594516485929489:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType ^ ^ declarators ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType']
copynode -3.8608201891183853:  root modified ^ BasicType-BasicType name int_ter ^ ^ ^  name long_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-BasicType', 'BasicType -> name', 'name -> long_ter', 'root -> End']
copynode -3.942133218050003:  root add ^ StatementExpression expression Assignment expressionl ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type']
copynode -4.117006868124008:  root modified ^ Literal-Literal value 1_ter ^ ^ ^  value 0_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-Literal', 'Literal -> value', 'value -> 0_ter', 'root -> End']
copynode -4.4930093586444855:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType ^ ^ declarators ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType']
copynode -4.561928480863571:  root modified ^ Literal-Literal value 1_ter ^ ^ ^  value 1_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-Literal', 'Literal -> value', 'value -> 1_ter', 'root -> End']
copynode -4.708747535943985:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType ^ ^ declarators ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType']
copynode -4.605637546395883:  root add ^ IfStatement condition MemberReference member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference', 'MemberReference -> member']
copynode -4.976838678121567:  root modified ^ MemberReference-MemberReference member par0 ^ ^ ^  member loc1 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> loc1', 'root -> End']
copynode -3.9881994426250458:  root add ^ StatementExpression expression MethodInvocation qualifier ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member']
copynode -5.009472459554672:  root modified ^ Literal-Literal value 1_ter ^ ^ ^  value 2_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-Literal', 'Literal -> value', 'value -> 2_ter', 'root -> End']
copynode -3.9881994426250458:  root add ^ StatementExpression expression MethodInvocation arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> arguments member']
copynode -5.074140852317214:  root modified ^ Literal-Literal value 4_ter ^ ^ ^  prefix_operators -_ter ^ ^ value 1_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-Literal', 'Literal -> prefix_operators value', 'prefix_operators -> -_ter', 'value -> 1_ter']
copynode -5.299749106168747:  root modified ^ MemberReference-MemberReference member par0 ^ ^ ^  member loc0 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> loc0', 'root -> End']
copynode -5.399835020303726:  root modified ^ BasicType-BasicType name int_ter ^ ^ ^  name int_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-BasicType', 'BasicType -> name', 'name -> int_ter', 'root -> End']
copynode -4.420506473397836:  root add ^ IfStatement condition MethodInvocation qualifier ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier arguments member']
copynode -5.449847787618637:  root modified ^ MemberReference-MemberReference member par0 ^ ^ ^  member par1 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> par1', 'root -> End']
copynode -5.4504490196704865:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType ^ ^ declarators ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'modifiers -> final_ter', 'type -> BasicType']
copynode -3.9881994426250458:  root add ^ StatementExpression expression MethodInvocation member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> member']
copynode -5.841918796300888:  root modified ^ MemberReference-MemberReference member par0 ^ ^ ^  member pingPong_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'copy-member', 'root -> End']
copynode -5.8450561463832855:  root modified ^ MemberReference-MemberReference member par0 ^ ^ ^  member par0 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> par0', 'root -> End']
copynode -5.957820504903793:  root modified ^ MemberReference-MemberReference member par0 ^ ^ ^  member unknown ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'start -> unknown', 'root -> End']
copynode -5.374080866575241:  root add ^ StatementExpression expression MemberReference selectors ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MemberReference', 'MemberReference -> selectors member']
copynode -3.9881994426250458:  root add ^ StatementExpression expression MethodInvocation qualifier ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier member']
copynode -6.067888110876083:  root modified ^ MemberReference-MemberReference member par0 ^ ^ ^  member work_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'copy-member', 'root -> End']
copynode -6.10919913649559:  root modified ^ MemberReference-MemberReference member par0 ^ ^ ^  member pingPong_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'copy-member', 'root -> End']
copynode -4.420506473397836:  root add ^ IfStatement condition MethodInvocation qualifier ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier member']
copynode -6.191815942525864:  root modified ^ MemberReference-MemberReference member par0 ^ ^ ^  member loc2 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> loc2', 'root -> End']
copynode -6.30978736281395:  root modified ^ MemberReference-MemberReference member par0 ^ ^ ^  member work_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'copy-member', 'root -> End']
copynode -4.605637546395883:  root add ^ IfStatement condition MemberReference prefix_operators ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference', 'MemberReference -> prefix_operators member']
copynode -1.3992949319072068:  root modified ^ LocalVariableDeclaration type BasicType name ^ ^ ^ declarators ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'BasicType -> name']
copynode -5.374080866575241:  root add ^ StatementExpression expression MemberReference postfix_operators ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MemberReference', 'MemberReference -> postfix_operators member']
copynode -4.420506473397836:  root add ^ IfStatement condition MethodInvocation member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> member']
copynode -4.420506473397836:  root add ^ IfStatement condition MethodInvocation arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> arguments member']
copynode -2.918772663688287:  root add ^ IfStatement condition BinaryOperation operator *_ter ^ ^ operandl Literal value 4_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'copy-BinaryOperation']
copynode -6.571689605712891:  root add ^ ReturnStatement expression Literal value ^ ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> Literal', 'Literal -> value']
copynode -6.72169703245163:  root modified ^ Literal-Literal value 1_ter ^ ^ ^  prefix_operators -_ter ^ ^ value 1_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-Literal', 'Literal -> prefix_operators value', 'prefix_operators -> -_ter', 'value -> 1_ter']
copynode -2.918772663688287:  root add ^ IfStatement condition BinaryOperation operator -_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'copy-BinaryOperation']
copynode -2.918772663688287:  root add ^ IfStatement condition BinaryOperation operator *_ter ^ ^ operandl Literal value 1.5_ter ^ ^ ^ ^ operandr MemberReference selectors ArraySelector index MemberReference member pingPong_ter ^ ^ ^ ^ ^ ^ member work_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'copy-BinaryOperation']
copynode -2.918772663688287:  root add ^ IfStatement condition BinaryOperation operator *_ter ^ ^ operandl Literal value 4_ter ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'copy-BinaryOperation']
copynode -2.918772663688287:  root add ^ IfStatement condition BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl Literal value 4_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MemberReference member pingPong_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'copy-BinaryOperation']
copynode -1.3992949319072068:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType']
copynode -4.420506473397836:  root add ^ IfStatement condition MethodInvocation prefix_operators ^ qualifier ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> prefix_operators qualifier arguments member']
copynode -1.3992949319072068:  root modified ^ LocalVariableDeclaration type BasicType name double_ter ^ ^ ^ ^ declarators ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType']
copynode -7.375908315181732:  root modified ^ Literal-Literal value 4_ter ^ ^ ^  value false_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-Literal', 'Literal -> value', 'value -> false_ter', 'root -> End']
copynode -4.420506473397836:  root add ^ IfStatement condition MethodInvocation prefix_operators ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> prefix_operators member']
copynode -7.418476100778207:  root add ^ IfStatement condition BinaryOperation operator <_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl Literal value 1.5_ter ^ ^ ^ ^ operandr MemberReference selectors ArraySelector index MemberReference member pingPong_ter ^ ^ ^ ^ ^ ^ member work_ter ^ ^ ^ ^ ^ ^ operandr MemberReference selectors ArraySelector index BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl Literal value 4_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MemberReference member pingPong_ter ^ ^ ^ ^ ^ ^ ^ ^ member work_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'copy-condition', 'root -> End']
copynode -5.074140852317214:  root modified ^ Literal-Literal value 4_ter ^ ^ ^  prefix_operators -_ter ^ ^ value 2_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-Literal', 'Literal -> prefix_operators value', 'prefix_operators -> -_ter', 'value -> 2_ter']
copynode -7.329999428242445:  root add ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators ^ ^ ^ ; ['root -> add', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType']
copynode -4.420506473397836:  root add ^ IfStatement condition MethodInvocation prefix_operators ^ qualifier ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> prefix_operators qualifier member']
copynode -4.605637546395883:  root add ^ IfStatement condition MemberReference selectors ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference', 'MemberReference -> selectors member']
before@5 batch0 x: -7.751391168450937: root add ^ IfStatement condition MemberReference selectors ^ member ^ ^ ^ ^ ^  ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference', 'MemberReference -> selectors member']
after@5 batch0 x: -7.751391168450937: root add ^ IfStatement condition MemberReference selectors ^ member ^ ^ ^ ^ ^  ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference', 'MemberReference -> selectors member']
copynode -1.4155637980438769:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator']
copynode -3.608123761601746:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name int_ter ^ ^ ^ ^ declarators ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType']
copynode -3.9450211762450635:  root add ^ StatementExpression expression Assignment expressionl MemberReference ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference']
copynode -3.0255023350473493:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter']
copynode -4.511707309633493:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name int_ter ^ ^ ^ ^ declarators ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType']
copynode -3.0255023350473493:  root add ^ IfStatement condition BinaryOperation operator >_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >_ter']
copynode -4.729603594169021:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name int_ter ^ ^ ^ ^ declarators ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType']
copynode -3.0255023350473493:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter']
copynode -3.0255023350473493:  root add ^ IfStatement condition BinaryOperation operator >=_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >=_ter']
copynode -3.0255023350473493:  root add ^ IfStatement condition BinaryOperation operator <_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter']
copynode -5.201447417959571:  root modified ^ Literal-Literal value 4_ter ^ ^ ^  prefix_operators -_ter ^ ^ value 1_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-Literal', 'Literal -> prefix_operators value', 'prefix_operators -> -_ter', 'value -> 1_ter', 'root -> End']
copynode -4.913345988607034:  root add ^ IfStatement condition MemberReference member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference', 'MemberReference -> member', 'start -> unknown']
copynode -5.46838079765439:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name int_ter ^ ^ ^ ^ declarators ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'modifiers -> final_ter', 'type -> BasicType', 'copy-BasicType']
copynode -5.194644421339035:  root add ^ StatementExpression expression MethodInvocation arguments MemberReference ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference']
copynode -3.0255023350473493:  root add ^ IfStatement condition BinaryOperation operator <=_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <=_ter']
copynode -4.985631436109543:  root add ^ StatementExpression expression MethodInvocation qualifier unknown ^ ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown']
copynode -5.661937326192856:  root add ^ StatementExpression expression MethodInvocation member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown']
copynode -5.408471103524789:  root add ^ IfStatement condition MethodInvocation qualifier unknown ^ ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown']
copynode -3.9450211762450635:  root add ^ StatementExpression expression Assignment expressionl MemberReference member loc1 ^ ^ ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'copy-expressionl']
copynode -6.3381640871521086:  root add ^ IfStatement condition MemberReference prefix_operators !_ter ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference', 'MemberReference -> prefix_operators member', 'prefix_operators -> !_ter']
copynode -3.0255023350473493:  root add ^ IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter']
copynode -6.066123694181442:  root add ^ StatementExpression expression MethodInvocation qualifier unknown ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier member', 'start -> unknown']
copynode -6.669053073739633:  root add ^ IfStatement condition MethodInvocation member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown']
copynode -3.0255023350473493:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter']
copynode -6.019715398550034:  root add ^ StatementExpression expression MemberReference selectors ArraySelector ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MemberReference', 'MemberReference -> selectors member', 'selectors -> ArraySelector']
copynode -6.842340357601643:  root modified ^ Literal-Literal value 1_ter ^ ^ ^  prefix_operators -_ter ^ ^ value 1_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-Literal', 'Literal -> prefix_operators value', 'prefix_operators -> -_ter', 'value -> 1_ter', 'root -> End']
copynode -6.672671314096078:  root add ^ IfStatement condition MethodInvocation arguments MemberReference ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference']
copynode -3.9450211762450635:  root add ^ StatementExpression expression Assignment expressionl MemberReference member loc2 ^ ^ ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'copy-expressionl']
copynode -6.695318426704034:  root add ^ IfStatement condition BinaryOperation operator *_ter ^ ^ operandl Literal value 4_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'copy-BinaryOperation', 'root -> End']
copynode -1.4155637980438769:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl Literal value 4_ter ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'copy-declarators']
copynode -4.985631436109543:  root add ^ StatementExpression expression MethodInvocation qualifier par0 ^ ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0']
copynode -6.161301608895883:  root add ^ IfStatement condition MethodInvocation qualifier unknown ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier member', 'start -> unknown']
copynode -6.364782412070781:  root modified ^ LocalVariableDeclaration type BasicType name long_ter ^ ^ ^ ^ declarators ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'BasicType -> name', 'name -> long_ter']
copynode -6.161301608895883:  root add ^ IfStatement condition MethodInvocation qualifier par0 ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> par0']
copynode -5.194644421339035:  root add ^ StatementExpression expression MethodInvocation arguments BinaryOperation ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> BinaryOperation']
copynode -6.792217001318932:  root add ^ ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> Literal', 'Literal -> value', 'value -> false_ter']
copynode -7.2849836309906095:  root add ^ IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> prefix_operators qualifier arguments member', 'prefix_operators -> !_ter']
copynode -7.275465090293437:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator']
copynode -6.364782412070781:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'BasicType -> name', 'name -> int_ter']
copynode -7.294452745933086:  root modified ^ LocalVariableDeclaration type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator']
copynode -7.0591168066021055:  root add ^ IfStatement condition BinaryOperation operator *_ter ^ ^ operandl Literal value 1.5_ter ^ ^ ^ ^ operandr MemberReference selectors ArraySelector index MemberReference member pingPong_ter ^ ^ ^ ^ ^ ^ member work_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'copy-BinaryOperation', 'root -> End']
copynode -3.9450211762450635:  root add ^ StatementExpression expression Assignment expressionl MemberReference selectors ArraySelector index BinaryOperation operator -_ter ^ ^ operandl MemberReference member loc0 ^ ^ ^ ^ operandr MemberReference member loc2 ^ ^ ^ ^ ^ ^ ^ ^ member work_ter ^ ^ ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'copy-expressionl']
before@6 batch0 x: -7.38991525163874: root add ^ StatementExpression expression Assignment expressionl MemberReference selectors ArraySelector index BinaryOperation operator -_ter ^ ^ operandl MemberReference member loc0 ^ ^ ^ ^ operandr MemberReference member loc2 ^ ^ ^ ^ ^ ^ ^ ^ member work_ter ^ ^ ^ ^ value ^ type ^ ^ ^ ^ ^  ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'copy-expressionl']
after@6 batch0 x: -7.38991525163874: root add ^ StatementExpression expression Assignment expressionl MemberReference selectors ArraySelector index BinaryOperation operator -_ter ^ ^ operandl MemberReference member loc0 ^ ^ ^ ^ operandr MemberReference member loc2 ^ ^ ^ ^ ^ ^ ^ ^ member work_ter ^ ^ ^ ^ value ^ type ^ ^ ^ ^ ^  ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'copy-expressionl']
copynode -1.420838929247111:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name ^ initializer ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer']
copynode -3.6133677950128913:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl Literal value 4_ter ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'copy-declarators']
copynode -4.243122512008995:  root add ^ StatementExpression expression Assignment expressionl MemberReference member ^ ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member']
copynode -4.515349998371676:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl Literal value 4_ter ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'copy-declarators']
copynode -4.487231623148546:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference']
copynode -4.537879358744249:  root add ^ IfStatement condition BinaryOperation operator >_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >_ter', 'operandl -> MemberReference']
copynode -4.732982561457902:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl Literal value 4_ter ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'copy-declarators']
copynode -5.001349936937913:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference']
copynode -5.061631809687242:  root add ^ IfStatement condition BinaryOperation operator >=_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >=_ter', 'operandl -> MemberReference']
copynode -5.1296075691934675:  root add ^ IfStatement condition BinaryOperation operator <_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference']
copynode -5.4756235354579985:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl Literal value 4_ter ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'modifiers -> final_ter', 'type -> BasicType', 'copy-BasicType', 'copy-declarators']
copynode -5.5098956525325775:  root add ^ StatementExpression expression MethodInvocation arguments MemberReference member ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> member']
copynode -5.68704941868782:  root add ^ StatementExpression expression MethodInvocation member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown', 'root -> End']
copynode -5.519130121683702:  root add ^ IfStatement condition BinaryOperation operator <=_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <=_ter', 'operandl -> MemberReference']
copynode -5.56830033659935:  root add ^ StatementExpression expression MethodInvocation qualifier unknown ^ ^ arguments MemberReference ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown', 'arguments -> MemberReference']
copynode -5.8620882590767:  root add ^ IfStatement condition MethodInvocation qualifier unknown ^ ^ arguments MemberReference ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown', 'arguments -> MemberReference']
copynode -4.243122512008995:  root add ^ StatementExpression expression Assignment expressionl MemberReference selectors ^ member ^ ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> selectors member']
copynode -5.404434855794534:  root add ^ IfStatement condition MemberReference member unknown ^ ^ ^ ^ ^ ReturnStatement ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'root -> ReturnStatement']
copynode -5.404434855794534:  root add ^ IfStatement condition MemberReference member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'root -> End']
copynode -6.63628901145421:  root add ^ IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> BinaryOperation']
copynode -5.404434855794534:  root add ^ IfStatement condition MemberReference member unknown ^ ^ ^ ^ ^ StatementExpression ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'root -> StatementExpression']
copynode -6.714490305399522:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation']
copynode -3.6133677950128913:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator']
copynode -6.845899548148736:  root add ^ IfStatement condition MethodInvocation arguments MemberReference member ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> member']
copynode -6.376113381003961:  root add ^ IfStatement condition MemberReference prefix_operators !_ter ^ ^ member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference', 'MemberReference -> prefix_operators member', 'prefix_operators -> !_ter', 'start -> unknown']
copynode -7.067680573556572:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl Literal value 4_ter ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'copy-declarators', 'root -> End']
copynode -1.420838929247111:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name']
copynode -6.144296431448311:  root add ^ StatementExpression expression Assignment expressionl MemberReference member loc1 ^ ^ ^ ^ value MemberReference ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'copy-expressionl', 'value -> MemberReference']
copynode -7.144605715293437:  root modified ^ LocalVariableDeclaration type BasicType name long_ter ^ ^ ^ ^ declarators VariableDeclarator ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'BasicType -> name', 'name -> long_ter', 'declarators -> VariableDeclarator']
copynode -7.298498195130378:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name ^ initializer ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer']
copynode -7.284078821539879:  root add ^ ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> Literal', 'Literal -> value', 'value -> false_ter', 'root -> End']
copynode -7.3178045325912535:  root modified ^ LocalVariableDeclaration type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name ^ initializer ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer']
copynode -5.56830033659935:  root add ^ StatementExpression expression MethodInvocation qualifier unknown ^ ^ arguments BinaryOperation ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown', 'arguments -> BinaryOperation']
copynode -7.208194013452157:  root add ^ IfStatement condition MethodInvocation qualifier par0 ^ ^ member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> par0', 'start -> unknown']
copynode -6.693756172200665:  root add ^ IfStatement condition MethodInvocation member unknown ^ ^ ^ ^ ^ ReturnStatement ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown', 'root -> ReturnStatement']
copynode -7.315725524444133:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'BasicType -> name', 'name -> int_ter', 'declarators -> VariableDeclarator']
copynode -5.56830033659935:  root add ^ StatementExpression expression MethodInvocation qualifier unknown ^ ^ arguments Literal ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown', 'arguments -> Literal']
copynode -6.144296431448311:  root add ^ StatementExpression expression Assignment expressionl MemberReference member loc1 ^ ^ ^ ^ value Literal ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'copy-expressionl', 'value -> Literal']
before@7 batch0 x: -7.518067502882332: root add ^ StatementExpression expression Assignment expressionl MemberReference member loc1 ^ ^ ^ ^ value Literal ^ ^ type ^ ^ ^ ^ ^  ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'copy-expressionl', 'value -> Literal']
after@7 batch0 x: -7.518067502882332: root add ^ StatementExpression expression Assignment expressionl MemberReference member loc1 ^ ^ ^ ^ value Literal ^ ^ type ^ ^ ^ ^ ^  ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'copy-expressionl', 'value -> Literal']
copynode -1.4301279303617775:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0']
copynode -3.6562862461432815:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl Literal value 4_ter ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'copy-declarators', 'root -> End']
copynode -4.541397915454581:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl Literal value 4_ter ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'copy-declarators', 'root -> End']
copynode -4.678630228852853:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -4.758050648961216:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl Literal value 4_ter ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'copy-declarators', 'root -> End']
copynode -4.752905796980485:  root add ^ IfStatement condition BinaryOperation operator >_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -5.129558827495202:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -5.27170805237256:  root add ^ IfStatement condition BinaryOperation operator >=_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >=_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -4.41399143030867:  root add ^ StatementExpression expression Assignment expressionl MemberReference member unknown ^ ^ ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'start -> unknown']
copynode -5.354396518087015:  root add ^ IfStatement condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -5.506164012942463:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl Literal value 4_ter ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'modifiers -> final_ter', 'type -> BasicType', 'copy-BasicType', 'copy-declarators', 'root -> End']
copynode -5.738173614954576:  root add ^ IfStatement condition BinaryOperation operator <=_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <=_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -6.0917589366436005:  root add ^ StatementExpression expression MethodInvocation qualifier unknown ^ ^ arguments MemberReference member ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown', 'arguments -> MemberReference', 'MemberReference -> member']
copynode -6.188770320033655:  root add ^ IfStatement condition MethodInvocation qualifier unknown ^ ^ arguments MemberReference member ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown', 'arguments -> MemberReference', 'MemberReference -> member']
copynode -4.41399143030867:  root add ^ StatementExpression expression Assignment expressionl MemberReference member par0 ^ ^ ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> par0']
copynode -5.619487062096596:  root add ^ StatementExpression expression MethodInvocation arguments MemberReference member par0 ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par0']
copynode -4.41399143030867:  root add ^ StatementExpression expression Assignment expressionl MemberReference member par1 ^ ^ ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> par1']
copynode -6.870972394011915:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name ^ initializer ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer']
copynode -6.440745290135965:  root add ^ IfStatement condition MemberReference member unknown ^ ^ ^ ^ ^ ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'root -> ReturnStatement', 'copy-ReturnStatement']
copynode -4.41399143030867:  root add ^ StatementExpression expression Assignment expressionl MemberReference member pingPong_ter ^ ^ ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -7.145366765093058:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name', 'name -> loc0']
copynode -6.785238813376054:  root add ^ IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
copynode -4.41399143030867:  root add ^ StatementExpression expression Assignment expressionl MemberReference member work_ter ^ ^ ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -6.864140685414895:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
copynode -6.829369600629434:  root add ^ IfStatement condition MemberReference member unknown ^ ^ ^ ^ ^ StatementExpression expression ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'root -> StatementExpression', 'StatementExpression -> expression']
copynode -7.285294373054057:  root modified ^ LocalVariableDeclaration type BasicType name long_ter ^ ^ ^ ^ declarators VariableDeclarator name ^ initializer ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'BasicType -> name', 'name -> long_ter', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer']
copynode -7.311650480609387:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0']
copynode -4.41399143030867:  root add ^ StatementExpression expression Assignment expressionl MemberReference member pingPong_ter ^ ^ ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -7.3312099003233016:  root modified ^ LocalVariableDeclaration type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0']
copynode -6.295979910995811:  root add ^ StatementExpression expression Assignment expressionl MemberReference selectors ArraySelector ^ ^ member ^ ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> selectors member', 'selectors -> ArraySelector']
copynode -4.41399143030867:  root add ^ StatementExpression expression Assignment expressionl MemberReference member work_ter ^ ^ ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -7.479346726555377:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name ^ initializer ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'BasicType -> name', 'name -> int_ter', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer']
copynode -7.238701844122261:  root add ^ StatementExpression expression Assignment expressionl MemberReference member loc1 ^ ^ ^ ^ value MemberReference member ^ ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'copy-expressionl', 'value -> MemberReference', 'MemberReference -> member']
copynode -6.440745290135965:  root add ^ IfStatement condition MemberReference member unknown ^ ^ ^ ^ ^ ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'root -> ReturnStatement', 'copy-ReturnStatement']
before@8 batch0 x: -7.676980431890115: root add ^ IfStatement condition MemberReference member unknown ^ ^ ^ ^ ^ ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ ^  ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'root -> ReturnStatement', 'copy-ReturnStatement']
after@8 batch0 x: -7.676980431890115: root add ^ IfStatement condition MemberReference member unknown ^ ^ ^ ^ ^ ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ ^  ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'root -> ReturnStatement', 'copy-ReturnStatement']
copynode -1.432088399771601:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation']
copynode -1.432088399771601:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer MethodInvocation ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> MethodInvocation']
copynode -1.432088399771601:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer MemberReference ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> MemberReference']
copynode -4.78351842216216:  root add ^ IfStatement condition BinaryOperation operator >_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0']
copynode -4.73168084374629:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0']
copynode -1.432088399771601:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer TernaryExpression ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> TernaryExpression']
copynode -5.302688937401399:  root add ^ IfStatement condition BinaryOperation operator >=_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0']
copynode -5.181637782370672:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0']
copynode -5.3842909631785005:  root add ^ IfStatement condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0']
copynode -5.313045003917068:  root add ^ StatementExpression expression Assignment expressionl MemberReference member unknown ^ ^ ^ ^ value Literal ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'value -> Literal']
copynode -5.765230798861012:  root add ^ IfStatement condition BinaryOperation operator <=_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0']
copynode -5.313045003917068:  root add ^ StatementExpression expression Assignment expressionl MemberReference member unknown ^ ^ ^ ^ value MemberReference ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'value -> MemberReference']
copynode -1.432088399771601:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer Literal ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> Literal']
copynode -4.73168084374629:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1']
copynode -6.889759195037186:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0']
copynode -6.9138827284332365:  root add ^ IfStatement condition MemberReference member unknown ^ ^ ^ ^ ^ ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'root -> ReturnStatement', 'copy-ReturnStatement', 'root -> End']
copynode -7.147354049840942:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name', 'name -> loc0', 'root -> End']
copynode -5.181637782370672:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1']
copynode -4.78351842216216:  root add ^ IfStatement condition BinaryOperation operator >_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1']
copynode -6.739584699273109:  root add ^ StatementExpression expression MethodInvocation arguments MemberReference member par0 ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par0', 'arguments -> End']
copynode -5.313045003917068:  root add ^ StatementExpression expression Assignment expressionl MemberReference member unknown ^ ^ ^ ^ value BinaryOperation ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'value -> BinaryOperation']
copynode -7.300580047536641:  root modified ^ LocalVariableDeclaration type BasicType name long_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'BasicType -> name', 'name -> long_ter', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0']
copynode -4.73168084374629:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member unknown ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'start -> unknown']
copynode -6.282660480355844:  root add ^ IfStatement condition MethodInvocation qualifier unknown ^ ^ arguments MemberReference member par0 ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par0']
copynode -4.73168084374629:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member pingPong_ter ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -5.313045003917068:  root add ^ StatementExpression expression Assignment expressionl MemberReference member unknown ^ ^ ^ ^ value MethodInvocation ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'value -> MethodInvocation']
copynode -4.78351842216216:  root add ^ IfStatement condition BinaryOperation operator >_ter ^ ^ operandl MemberReference member work_ter ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -7.495536353904754:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'BasicType -> name', 'name -> int_ter', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0']
copynode -4.78351842216216:  root add ^ IfStatement condition BinaryOperation operator >_ter ^ ^ operandl MemberReference member pingPong_ter ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -5.302688937401399:  root add ^ IfStatement condition BinaryOperation operator >=_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1']
before@9 batch0 x: -7.549513678764924: root add ^ IfStatement condition BinaryOperation operator >=_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr ^ ^ ^ ^ ^  ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1']
after@9 batch0 x: -7.549513678764924: root add ^ IfStatement condition BinaryOperation operator >=_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr ^ ^ ^ ^ ^  ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1']
copynode -1.6858259388245642:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
copynode -1.6858259388245642:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl Literal value 4_ter ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'copy-BinaryOperation']
copynode -1.6858259388245642:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator *_ter ^ ^ operandl Literal value 4_ter ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'copy-BinaryOperation']
copynode -3.3933550366200507:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer MethodInvocation qualifier ^ arguments ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> MethodInvocation', 'MethodInvocation -> qualifier arguments member']
copynode -3.3933550366200507:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer MethodInvocation arguments ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> MethodInvocation', 'MethodInvocation -> arguments member']
copynode -5.036756301764399:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer MemberReference member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> MemberReference', 'MemberReference -> member']
copynode -5.915509725455195:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer TernaryExpression condition ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> TernaryExpression', 'TernaryExpression -> condition if_true if_false']
copynode -5.486833069240674:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> Literal']
copynode -5.373695838963613:  root add ^ IfStatement condition BinaryOperation operator >_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> MemberReference']
copynode -5.9640071575995535:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> Literal']
copynode -3.3933550366200507:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer MethodInvocation qualifier ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> MethodInvocation', 'MethodInvocation -> qualifier member']
copynode -5.373695838963613:  root add ^ IfStatement condition BinaryOperation operator >_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> Literal']
copynode -6.176754513289779:  root add ^ StatementExpression expression Assignment expressionl MemberReference member unknown ^ ^ ^ ^ value Literal value ^ ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'value -> Literal', 'Literal -> value']
copynode -6.497889020945877:  root add ^ StatementExpression expression Assignment expressionl MemberReference member unknown ^ ^ ^ ^ value MemberReference member ^ ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'value -> MemberReference', 'MemberReference -> member']
copynode -5.486833069240674:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> MemberReference']
copynode -5.917689185356721:  root add ^ IfStatement condition BinaryOperation operator >=_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> MemberReference']
copynode -1.6858259388245642:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator *_ter ^ ^ operandl Literal value 4_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'copy-BinaryOperation']
copynode -6.056130558019504:  root add ^ IfStatement condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> MemberReference']
copynode -5.917689185356721:  root add ^ IfStatement condition BinaryOperation operator >=_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> Literal']
copynode -6.643326307181269:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer Literal value ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> Literal', 'Literal -> value']
copynode -1.6858259388245642:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator *_ter ^ ^ operandl Literal value 1.5_ter ^ ^ ^ ^ operandr MemberReference selectors ArraySelector index MemberReference member pingPong_ter ^ ^ ^ ^ ^ ^ member work_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'copy-BinaryOperation']
copynode -6.892751828068867:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation']
copynode -3.3933550366200507:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer MethodInvocation member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> MethodInvocation', 'MethodInvocation -> member']
copynode -6.056130558019504:  root add ^ IfStatement condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> Literal']
copynode -7.193098500370979:  root add ^ StatementExpression expression MethodInvocation arguments MemberReference member par0 ^ ^ ^ ^ member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par0', 'arguments -> End', 'start -> unknown']
copynode -6.690175506984815:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr Literal ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'operandr -> Literal']
copynode -6.4127741099800915:  root add ^ IfStatement condition BinaryOperation operator <=_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> MemberReference']
copynode -1.6858259388245642:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl Literal value 4_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MemberReference member pingPong_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'copy-BinaryOperation']
copynode -1.6858259388245642:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'copy-BinaryOperation']
before@10 batch0 x: -7.387718882178888: root add ^ IfStatement condition BinaryOperation operator *_ter ^ ^ operandl Literal value 1.5_ter ^ ^ ^ ^ operandr MemberReference selectors ArraySelector index MemberReference member pingPong_ter ^ ^ ^ ^ ^ ^ member work_ter ^ ^ ^ ^ ^ ^ ^ ^  ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'copy-BinaryOperation', 'root -> End']
after@10 batch0 x: -7.387718882178888: root add ^ IfStatement condition BinaryOperation operator *_ter ^ ^ operandl Literal value 1.5_ter ^ ^ ^ ^ operandr MemberReference selectors ArraySelector index MemberReference member pingPong_ter ^ ^ ^ ^ ^ ^ member work_ter ^ ^ ^ ^ ^ ^ ^ ^  ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'copy-BinaryOperation', 'root -> End']
copynode -2.1312521644867957:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter']
copynode -3.2524069496430457:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl Literal value 4_ter ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'copy-BinaryOperation', 'root -> End']
copynode -3.8164957710541785:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator *_ter ^ ^ operandl Literal value 4_ter ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'copy-BinaryOperation', 'root -> End']
copynode -2.1312521644867957:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator +_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter']
copynode -2.1312521644867957:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator *_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter']
copynode -2.1312521644867957:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator /_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter']
copynode -4.008224392775446:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer MethodInvocation qualifier unknown ^ ^ arguments ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown']
copynode -4.602597976569086:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer MethodInvocation arguments MemberReference ^ ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference']
copynode -5.071978895459324:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer MemberReference member par0 ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> MemberReference', 'MemberReference -> member', 'member -> par0']
copynode -2.1312521644867957:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator %_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> %_ter']
copynode -5.921192814595997:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer TernaryExpression condition BinaryOperation ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation']
copynode -6.085231814300641:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> Literal', 'Literal -> value']
copynode -4.602597976569086:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer MethodInvocation arguments BinaryOperation ^ ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> BinaryOperation']
copynode -6.176171649014577:  root add ^ IfStatement condition BinaryOperation operator >_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr MemberReference member ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> MemberReference', 'MemberReference -> member']
copynode -6.224687415873632:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> Literal', 'Literal -> value']
copynode -4.008224392775446:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer MethodInvocation qualifier par0 ^ ^ arguments ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0']
copynode -6.49236224940978:  root add ^ IfStatement condition BinaryOperation operator >_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> Literal', 'Literal -> value']
copynode -6.62079057446681:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr MemberReference member ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> MemberReference', 'MemberReference -> member']
copynode -6.825674171093851:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator *_ter ^ ^ operandl Literal value 4_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'copy-BinaryOperation', 'root -> End']
copynode -6.770399492001161:  root add ^ IfStatement condition BinaryOperation operator >=_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr MemberReference member ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> MemberReference', 'MemberReference -> member']
copynode -6.32265272224322:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer MethodInvocation qualifier par0 ^ ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> par0']
copynode -6.866775005823001:  root add ^ IfStatement condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr MemberReference member ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> MemberReference', 'MemberReference -> member']
copynode -2.1312521644867957:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator <<_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <<_ter']
copynode -6.913715820526704:  root add ^ IfStatement condition BinaryOperation operator >=_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> Literal', 'Literal -> value']
copynode -2.1312521644867957:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator >>_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >>_ter']
copynode -7.124126548413187:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator *_ter ^ ^ operandl Literal value 1.5_ter ^ ^ ^ ^ operandr MemberReference selectors ArraySelector index MemberReference member pingPong_ter ^ ^ ^ ^ ^ ^ member work_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'copy-BinaryOperation', 'root -> End']
copynode -2.1312521644867957:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator &_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &_ter']
copynode -7.14406385505572:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer MethodInvocation member unknown ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown']
copynode -7.242435569409281:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl Literal value 4_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MemberReference member pingPong_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'copy-BinaryOperation', 'root -> End']
copynode -7.226377386599779:  root add ^ StatementExpression expression MethodInvocation arguments MemberReference member par0 ^ ^ ^ ^ member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par0', 'arguments -> End', 'start -> unknown', 'root -> End']
copynode -7.264825458172709:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'copy-BinaryOperation', 'root -> End']
copynode -4.008224392775446:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer MethodInvocation qualifier Math_ter ^ ^ arguments ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> Math_ter']
copynode -6.32265272224322:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer MethodInvocation qualifier unknown ^ ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> MethodInvocation', 'MethodInvocation -> qualifier member', 'start -> unknown']
before@11 batch0 x: -7.32445427402854: root add ^ ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ ^  ; ['root -> add', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> Literal', 'Literal -> value', 'value -> false_ter', 'root -> End']
after@11 batch0 x: -7.32445427402854: root add ^ ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ ^  ; ['root -> add', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> Literal', 'Literal -> value', 'value -> false_ter', 'root -> End']
copynode -2.825863952282816:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation']
copynode -4.01748954737559:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator +_ter ^ ^ operandl BinaryOperation ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> BinaryOperation']
copynode -4.085627669934183:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator *_ter ^ ^ operandl BinaryOperation ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> BinaryOperation']
copynode -4.19107353175059:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator /_ter ^ ^ operandl BinaryOperation ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> BinaryOperation']
copynode -4.251318747643381:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer MethodInvocation qualifier unknown ^ ^ arguments BinaryOperation ^ ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown', 'arguments -> BinaryOperation']
copynode -4.923577333334833:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer MethodInvocation arguments MemberReference member ^ ^ ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> member']
copynode -2.825863952282816:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference']
copynode -5.216107262764126:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer MemberReference member par0 ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> MemberReference', 'MemberReference -> member', 'member -> par0', 'root -> End']
copynode -2.825863952282816:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl Literal value 4_ter ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'copy-operandl']
copynode -4.251318747643381:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer MethodInvocation qualifier unknown ^ ^ arguments MemberReference ^ ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown', 'arguments -> MemberReference']
copynode -5.33754455531016:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator %_ter ^ ^ operandl BinaryOperation ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> %_ter', 'operandl -> BinaryOperation']
copynode -2.825863952282816:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl Literal value 4_ter ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'copy-operandl']
copynode -6.0421069310978055:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer TernaryExpression condition BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
copynode -6.345898147439584:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter']
copynode -2.825863952282816:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl MethodInvocation ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MethodInvocation']
copynode -4.01748954737559:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl Literal value 4_ter ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'copy-operandl']
copynode -6.235556844389066:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter']
copynode -6.2625856646336615:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer MethodInvocation arguments BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl Literal value 4_ter ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> BinaryOperation', 'copy-BinaryOperation']
copynode -4.085627669934183:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator *_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl Literal value 4_ter ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'copy-operandl']
copynode -4.19107353175059:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator /_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> MemberReference']
copynode -6.356863880995661:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer MethodInvocation qualifier par0 ^ ^ arguments BinaryOperation ^ ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> BinaryOperation']
copynode -4.19107353175059:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl Literal value 4_ter ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'copy-operandl']
copynode -6.6521430348511785:  root add ^ IfStatement condition BinaryOperation operator >_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> Literal', 'Literal -> value', 'value -> 0_ter']
copynode -4.085627669934183:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator *_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> MemberReference']
copynode -4.19107353175059:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator /_ter ^ ^ operandl Literal value 4_ter ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'copy-operandl']
copynode -4.085627669934183:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator *_ter ^ ^ operandl Literal value 4_ter ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'copy-operandl']
copynode -4.01748954737559:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator +_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> MemberReference']
copynode -7.071559604024515:  root add ^ IfStatement condition BinaryOperation operator >=_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> Literal', 'Literal -> value', 'value -> 0_ter']
copynode -7.225445645395666:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer MethodInvocation member unknown ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown', 'root -> End']
before@12 batch0 x: -7.244845856112079: root modified ^ operator-operator -_ter ^ ^  ==_ter ^ ^ ^  ; ['root -> modified', 'copy-operator', 'operator -> ==_ter', 'root -> End']
after@12 batch0 x: -7.244845856112079: root modified ^ operator-operator -_ter ^ ^  ==_ter ^ ^ ^  ; ['root -> modified', 'copy-operator', 'operator -> ==_ter', 'root -> End']
copynode -3.1622655638493598:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
copynode -4.2317948886193335:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
copynode -3.1622655638493598:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl Literal value 4_ter ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'copy-BinaryOperation']
copynode -4.347827190998942:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator *_ter ^ ^ operandl BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
copynode -4.507289911154658:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
copynode -4.939505421090871:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer MethodInvocation arguments MemberReference member par0 ^ ^ ^ ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par0']
copynode -5.069694394711405:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -4.748676175717264:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer MethodInvocation qualifier unknown ^ ^ arguments BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl Literal value 4_ter ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown', 'arguments -> BinaryOperation', 'copy-BinaryOperation']
copynode -5.530713970307261:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer MethodInvocation qualifier unknown ^ ^ arguments MemberReference member ^ ^ ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown', 'arguments -> MemberReference', 'MemberReference -> member']
copynode -4.2317948886193335:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl Literal value 4_ter ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> BinaryOperation', 'copy-BinaryOperation']
copynode -4.347827190998942:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator *_ter ^ ^ operandl BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl Literal value 4_ter ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> BinaryOperation', 'copy-BinaryOperation']
copynode -4.507289911154658:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl Literal value 4_ter ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> BinaryOperation', 'copy-BinaryOperation']
copynode -5.757812345866114:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator %_ter ^ ^ operandl BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> %_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
copynode -4.748676175717264:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer MethodInvocation qualifier unknown ^ ^ arguments BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown', 'arguments -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
copynode -5.444250220898539:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl Literal value 4_ter ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ operandr BinaryOperation ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'copy-operandl', 'operandr -> BinaryOperation']
copynode -5.763511771801859:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl Literal value 4_ter ^ ^ ^ ^ operandr BinaryOperation ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'copy-operandl', 'operandr -> BinaryOperation']
copynode -5.444250220898539:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl Literal value 4_ter ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'copy-operandl', 'operandr -> MemberReference']
copynode -6.6341532417573035:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator /_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -6.619778955820948:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer MethodInvocation arguments BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl Literal value 4_ter ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> BinaryOperation', 'copy-BinaryOperation', 'arguments -> End']
copynode -6.877002114895731:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator *_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -5.763511771801859:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl Literal value 4_ter ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'copy-operandl', 'operandr -> MemberReference']
copynode -6.5491734691895545:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl Literal value 4_ter ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ operandr BinaryOperation ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'copy-operandl', 'operandr -> BinaryOperation']
copynode -6.599047008669004:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ReturnStatement ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> ReturnStatement']
copynode -6.446125495946035:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> End']
copynode -7.154930705670267:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator +_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -5.757812345866114:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator %_ter ^ ^ operandl BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl Literal value 4_ter ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> %_ter', 'operandl -> BinaryOperation', 'copy-BinaryOperation']
copynode -6.531062955502421:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl MethodInvocation qualifier ^ arguments ^ member ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MethodInvocation', 'MethodInvocation -> qualifier arguments member']
before@13 batch0 x: -7.277749175671488: root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl MethodInvocation qualifier ^ arguments ^ member ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MethodInvocation', 'MethodInvocation -> qualifier arguments member']
after@13 batch0 x: -7.277749175671488: root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl MethodInvocation qualifier ^ arguments ^ member ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MethodInvocation', 'MethodInvocation -> qualifier arguments member']
copynode -3.436199361924082:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter']
copynode -3.436199361924082:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator /_ter ^ ^ operandl ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter']
copynode -3.436199361924082:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator -_ter ^ ^ operandl ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter']
copynode -5.08838706323877:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0']
copynode -5.154537404421717:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer MethodInvocation qualifier unknown ^ ^ arguments BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl Literal value 4_ter ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown', 'arguments -> BinaryOperation', 'copy-BinaryOperation', 'arguments -> End']
copynode -4.624525333289057:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl Literal value 4_ter ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'copy-BinaryOperation', 'operandr -> MemberReference']
copynode -5.011472747195512:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer MethodInvocation arguments MemberReference member par0 ^ ^ ^ ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par0', 'arguments -> End']
copynode -5.544926245231181:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer MethodInvocation qualifier unknown ^ ^ arguments MemberReference member par0 ^ ^ ^ ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par0']
copynode -3.436199361924082:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter']
copynode -4.651255364064127:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator *_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter']
copynode -4.535917485598475:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator -_ter ^ ^ operandl ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter']
copynode -4.651255364064127:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator *_ter ^ ^ operandl BinaryOperation operator /_ter ^ ^ operandl ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter']
copynode -4.535917485598475:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter']
copynode -4.79306902969256:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter']
copynode -4.535917485598475:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator /_ter ^ ^ operandl ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter']
copynode -4.79306902969256:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator /_ter ^ ^ operandl ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter']
copynode -4.624525333289057:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl Literal value 4_ter ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'copy-BinaryOperation', 'copy-operandr']
copynode -5.599815303925425:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl Literal value 4_ter ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> BinaryOperation', 'copy-BinaryOperation', 'operandr -> MemberReference']
copynode -4.651255364064127:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator *_ter ^ ^ operandl BinaryOperation operator -_ter ^ ^ operandl ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter']
copynode -6.238758678082377:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl Literal value 4_ter ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'copy-operandl', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
copynode -5.7192680784501135:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator *_ter ^ ^ operandl BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl Literal value 4_ter ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> BinaryOperation', 'copy-BinaryOperation', 'operandr -> MemberReference']
copynode -4.79306902969256:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator -_ter ^ ^ operandl ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter']
copynode -4.535917485598475:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter']
copynode -6.480449373368174:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl Literal value 4_ter ^ ^ ^ ^ operandr BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'copy-operandl', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
copynode -5.933203841093928:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl Literal value 4_ter ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> BinaryOperation', 'copy-BinaryOperation', 'operandr -> MemberReference']
copynode -6.653368587139994:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl Literal value 4_ter ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ operandr MemberReference member ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'copy-operandl', 'operandr -> MemberReference', 'MemberReference -> member']
copynode -6.654041473288089:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator /_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0']
copynode -6.0865588136948645:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer MethodInvocation qualifier unknown ^ ^ arguments BinaryOperation operator -_ter ^ ^ operandl ^ operandr ^ ^ ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown', 'arguments -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter']
copynode -4.624525333289057:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl Literal value 4_ter ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'copy-BinaryOperation', 'operandr -> BinaryOperation']
copynode -6.725052545312792:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer MethodInvocation arguments BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl Literal value 4_ter ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ member unknown ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> BinaryOperation', 'copy-BinaryOperation', 'arguments -> End', 'start -> unknown']
copynode -6.024280542973429:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator %_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> %_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter']
copynode -6.896916613448411:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator *_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0']
copynode -4.651255364064127:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator *_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter']
copynode -7.041351074818522:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl Literal value 4_ter ^ ^ ^ ^ operandr MemberReference member ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'copy-operandl', 'operandr -> MemberReference', 'MemberReference -> member']
before@14 batch0 x: -7.124340015434427: root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator *_ter ^ ^ operandl Literal value 1.5_ter ^ ^ ^ ^ operandr MemberReference selectors ArraySelector index MemberReference member pingPong_ter ^ ^ ^ ^ ^ ^ member work_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'copy-BinaryOperation', 'root -> End']
after@14 batch0 x: -7.124340015434427: root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator *_ter ^ ^ operandl Literal value 1.5_ter ^ ^ ^ ^ operandr MemberReference selectors ArraySelector index MemberReference member pingPong_ter ^ ^ ^ ^ ^ ^ member work_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'copy-BinaryOperation', 'root -> End']
copynode -5.286447788123041:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl Literal value 4_ter ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ operandr MemberReference member ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'copy-BinaryOperation', 'operandr -> MemberReference', 'MemberReference -> member']
copynode -5.296453878749162:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer MethodInvocation arguments MemberReference member par0 ^ ^ ^ ^ member unknown ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par0', 'arguments -> End', 'start -> unknown']
copynode -4.565149957779795:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl BinaryOperation ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> BinaryOperation']
copynode -4.565149957779795:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> MemberReference']
copynode -4.67241924488917:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator /_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> MemberReference']
copynode -4.67241924488917:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator /_ter ^ ^ operandl BinaryOperation ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> BinaryOperation']
copynode -4.895639950875193:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator -_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference']
copynode -5.63592639984563:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer MethodInvocation qualifier unknown ^ ^ arguments MemberReference member par0 ^ ^ ^ ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par0', 'arguments -> End']
copynode -4.895639950875193:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator -_ter ^ ^ operandl BinaryOperation ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation']
copynode -6.130914831999689:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl Literal value 4_ter ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'copy-BinaryOperation', 'copy-operandr', 'root -> End']
copynode -5.199859893415123:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'copy-operandr']
copynode -5.199859893415123:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> MemberReference']
copynode -6.260925943497568:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl Literal value 4_ter ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ operandr MemberReference member ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> BinaryOperation', 'copy-BinaryOperation', 'operandr -> MemberReference', 'MemberReference -> member']
copynode -4.565149957779795:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl Literal value 4_ter ^ ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'copy-operandl']
copynode -6.444359833840281:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator *_ter ^ ^ operandl BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl Literal value 4_ter ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ operandr MemberReference member ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> BinaryOperation', 'copy-BinaryOperation', 'operandr -> MemberReference', 'MemberReference -> member']
copynode -4.67241924488917:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator /_ter ^ ^ operandl Literal value 4_ter ^ ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'copy-operandl']
copynode -5.660324747208506:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl BinaryOperation ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> BinaryOperation']
copynode -5.718220467213541:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator *_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl BinaryOperation ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> BinaryOperation']
copynode -6.663152480963618:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl Literal value 4_ter ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ operandr MemberReference member ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> BinaryOperation', 'copy-BinaryOperation', 'operandr -> MemberReference', 'MemberReference -> member']
copynode -5.803836191538721:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl BinaryOperation ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> BinaryOperation']
copynode -5.808065558318049:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl BinaryOperation ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> BinaryOperation']
copynode -4.895639950875193:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator -_ter ^ ^ operandl Literal value 4_ter ^ ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'copy-operandl']
copynode -6.686945578549057:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl Literal value 4_ter ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'copy-operandl', 'operandr -> MemberReference', 'MemberReference -> member', 'member -> par0']
copynode -5.783879602793604:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator -_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference']
copynode -5.660324747208506:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> MemberReference']
copynode -5.797774071339518:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator *_ter ^ ^ operandl BinaryOperation operator /_ter ^ ^ operandl BinaryOperation ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> BinaryOperation']
copynode -5.783879602793604:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator -_ter ^ ^ operandl BinaryOperation ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation']
copynode -5.797774071339518:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator *_ter ^ ^ operandl BinaryOperation operator /_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> MemberReference']
copynode -5.869540537241846:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator /_ter ^ ^ operandl BinaryOperation ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> BinaryOperation']
copynode -5.718220467213541:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator *_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> MemberReference']
copynode -6.950673709157854:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer MethodInvocation arguments BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl Literal value 4_ter ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ member unknown ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> BinaryOperation', 'copy-BinaryOperation', 'arguments -> End', 'start -> unknown', 'root -> End']
copynode -5.900367999915034:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator /_ter ^ ^ operandl BinaryOperation ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> BinaryOperation']
copynode -5.869540537241846:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator /_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> MemberReference']
copynode -5.900367999915034:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator /_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> MemberReference']
copynode -5.803836191538721:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> MemberReference']
copynode -5.808065558318049:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> MemberReference']
before@15 batch0 x: -7.059810545062646: root add ^ IfStatement condition BinaryOperation operator *_ter ^ ^ operandl Literal value 4_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^  ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'copy-BinaryOperation', 'root -> End']
after@15 batch0 x: -7.059810545062646: root add ^ IfStatement condition BinaryOperation operator *_ter ^ ^ operandl Literal value 4_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^  ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'copy-BinaryOperation', 'root -> End']
copynode -5.409379780758172:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer MethodInvocation arguments MemberReference member par0 ^ ^ ^ ^ member unknown ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par0', 'arguments -> End', 'start -> unknown', 'root -> End']
copynode -5.665881449822336:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -5.6975610801018775:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator /_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -5.566437894944102:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
copynode -5.8716476508416235:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator -_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -5.781873638276011:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
copynode -6.172782933805138:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'copy-operandr', 'root -> End']
copynode -6.031325275544077:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
copynode -6.301711237523705:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr MemberReference member ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> MemberReference', 'MemberReference -> member']
copynode -5.336259546224028:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl Literal value 4_ter ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ operandr MemberReference member par1 ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'copy-BinaryOperation', 'operandr -> MemberReference', 'MemberReference -> member', 'member -> par1']
copynode -5.336259546224028:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl Literal value 4_ter ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'copy-BinaryOperation', 'operandr -> MemberReference', 'MemberReference -> member', 'member -> par0']
copynode -6.762631124351174:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl Literal value 4_ter ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'copy-operandl', 'operandr -> MemberReference', 'MemberReference -> member', 'member -> par0', 'root -> End']
copynode -5.336259546224028:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl Literal value 4_ter ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ operandr MemberReference member unknown ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'copy-BinaryOperation', 'operandr -> MemberReference', 'MemberReference -> member', 'start -> unknown']
copynode -6.811378563288599:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator -_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -6.822161252144724:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -6.5565324374474585:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
copynode -6.890434379223734:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator *_ter ^ ^ operandl BinaryOperation operator /_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -6.925282473210245:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator *_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -5.566437894944102:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl Literal value 4_ter ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> BinaryOperation', 'copy-BinaryOperation']
copynode -6.637602920178324:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator *_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
copynode -6.9555605300702155:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator /_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -6.990355277899653:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator /_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -6.9994729408062994:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -7.005914474371821:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -6.736739958170801:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
copynode -6.724877739790827:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
copynode -6.848404163960367:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator *_ter ^ ^ operandl BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
copynode -6.858432854060084:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
copynode -5.781873638276011:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl Literal value 4_ter ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> BinaryOperation', 'copy-BinaryOperation']
copynode -6.91910549486056:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
copynode -6.954710746649653:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
copynode -6.444666320923716:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl Literal value 4_ter ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'copy-operandl', 'operandr -> MemberReference']
copynode -6.318091201130301:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl Literal value 4_ter ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ operandr MemberReference member par1 ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> BinaryOperation', 'copy-BinaryOperation', 'operandr -> MemberReference', 'MemberReference -> member', 'member -> par1']
copynode -6.538134152535349:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator /_ter ^ ^ operandl Literal value 4_ter ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'copy-operandl', 'operandr -> MemberReference']
before@16 batch0 x: -7.397392923478037: root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator /_ter ^ ^ operandl Literal value 4_ter ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'copy-operandl', 'operandr -> MemberReference']
after@16 batch0 x: -7.397392923478037: root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator /_ter ^ ^ operandl Literal value 4_ter ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'copy-operandl', 'operandr -> MemberReference']
copynode -5.6808326109312475:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0']
copynode -5.712299173232168:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator /_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0']
copynode -5.885269185062498:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator -_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0']
copynode -6.422397556249052:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl Literal value 4_ter ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ operandr MemberReference member par1 ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'copy-BinaryOperation', 'operandr -> MemberReference', 'MemberReference -> member', 'member -> par1', 'root -> End']
copynode -6.552230896893889:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl Literal value 4_ter ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'copy-BinaryOperation', 'operandr -> MemberReference', 'MemberReference -> member', 'member -> par0', 'root -> End']
copynode -6.764657916966826:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl Literal value 4_ter ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ operandr MemberReference member unknown ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'copy-BinaryOperation', 'operandr -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'root -> End']
copynode -5.874817008618265:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl BinaryOperation operator /_ter ^ ^ operandl ^ operandr ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter']
copynode -5.874817008618265:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl ^ operandr ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter']
copynode -6.824714524205774:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator -_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0']
copynode -6.836794703733176:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0']
copynode -6.090174014214426:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator /_ter ^ ^ operandl ^ operandr ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter']
copynode -6.905240949708968:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator *_ter ^ ^ operandl BinaryOperation operator /_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0']
copynode -6.940153652336448:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator *_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0']
copynode -6.090174014214426:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl ^ operandr ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter']
copynode -6.969799045007676:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator /_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0']
copynode -7.005526511464268:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator /_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0']
copynode -7.013749362435192:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0']
copynode -7.021303102839738:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0']
copynode -6.33461873838678:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> MemberReference', 'MemberReference -> member', 'member -> par0']
copynode -7.363170909229666:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl Literal value 4_ter ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ operandr MemberReference member par1 ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> BinaryOperation', 'copy-BinaryOperation', 'operandr -> MemberReference', 'MemberReference -> member', 'member -> par1', 'root -> End']
copynode -7.34644907200709:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl Literal value 4_ter ^ ^ ^ ^ operandr MemberReference member ^ ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'copy-operandl', 'operandr -> MemberReference', 'MemberReference -> member']
copynode -6.322011823300272:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl ^ operandr ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter']
copynode -7.397392923478037:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator /_ter ^ ^ operandl Literal value 4_ter ^ ^ ^ ^ operandr MemberReference member ^ ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'copy-operandl', 'operandr -> MemberReference', 'MemberReference -> member']
copynode -6.322011823300272:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator /_ter ^ ^ operandl ^ operandr ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter']
copynode -5.874817008618265:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl BinaryOperation operator -_ter ^ ^ operandl ^ operandr ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter']
copynode -6.33461873838678:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr MemberReference member par1 ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> MemberReference', 'MemberReference -> member', 'member -> par1']
copynode -6.956511194352061:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl Literal value 4_ter ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> BinaryOperation', 'copy-BinaryOperation', 'operandr -> MemberReference']
copynode -6.322011823300272:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator -_ter ^ ^ operandl ^ operandr ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter']
copynode -6.090174014214426:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator -_ter ^ ^ operandl ^ operandr ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter']
copynode -6.33461873838678:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr MemberReference member unknown ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> MemberReference', 'MemberReference -> member', 'start -> unknown']
copynode -6.961159611586481:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator *_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl BinaryOperation operator /_ter ^ ^ operandl ^ operandr ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter']
before@17 batch0 x: -8.020991946104914: root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator *_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl BinaryOperation operator /_ter ^ ^ operandl ^ operandr ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter']
after@17 batch0 x: -8.020991946104914: root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator *_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl BinaryOperation operator /_ter ^ ^ operandl ^ operandr ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter']
copynode -5.9145136079750955:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator /_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'copy-operandr']
copynode -5.886040346231312:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'copy-operandr']
copynode -5.886040346231312:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> MemberReference']
copynode -6.096418862696737:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator -_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'copy-operandr']
copynode -5.9145136079750955:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator /_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> MemberReference']
copynode -6.096418862696737:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator -_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> MemberReference']
copynode -7.235552361700684:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> MemberReference', 'MemberReference -> member', 'member -> par0', 'root -> End']
copynode -7.3764249556697905:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl Literal value 4_ter ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'copy-operandl', 'operandr -> MemberReference', 'MemberReference -> member', 'member -> par0']
copynode -7.426067399326712:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator /_ter ^ ^ operandl Literal value 4_ter ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'copy-operandl', 'operandr -> MemberReference', 'MemberReference -> member', 'member -> par0']
copynode -7.757298043463379:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr MemberReference member par1 ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> MemberReference', 'MemberReference -> member', 'member -> par1', 'root -> End']
copynode -7.834517831448466:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl Literal value 4_ter ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ operandr MemberReference member ^ ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> BinaryOperation', 'copy-BinaryOperation', 'operandr -> MemberReference', 'MemberReference -> member']
copynode -7.035794866736978:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator -_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'copy-operandr']
copynode -6.988676304463297:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl BinaryOperation ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> BinaryOperation']
copynode -8.003742864821106:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr MemberReference member unknown ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'root -> End']
copynode -6.917984361294657:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl BinaryOperation operator /_ter ^ ^ operandl BinaryOperation ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> BinaryOperation']
copynode -7.101826634723693:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator *_ter ^ ^ operandl BinaryOperation operator /_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'copy-operandr']
copynode -7.042273118626326:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'copy-operandr']
copynode -7.170322153251618:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator /_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'copy-operandr']
copynode -6.917984361294657:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl BinaryOperation operator /_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> MemberReference']
copynode -7.139006146695465:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator *_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'copy-operandr']
copynode -7.042273118626326:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> MemberReference']
copynode -7.2026551202870905:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator /_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'copy-operandr']
copynode -7.216707096900791:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'copy-operandr']
copynode -7.035794866736978:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator -_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> MemberReference']
copynode -7.220481634605676:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'copy-operandr']
copynode -7.094452197197825:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator /_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> MemberReference']
copynode -5.886040346231312:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'copy-operandr']
before@18 batch0 x: -8.220230714883655: root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'copy-operandr']
after@18 batch0 x: -8.220230714883655: root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'copy-operandr']
copynode -7.01600326737389:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr MemberReference member ^ ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> MemberReference', 'MemberReference -> member']
copynode -7.054683943744749:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator /_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr MemberReference member ^ ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> MemberReference', 'MemberReference -> member']
copynode -7.225022082682699:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator -_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr MemberReference member ^ ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> MemberReference', 'MemberReference -> member']
copynode -6.8656761846505105:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator /_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'copy-operandr', 'copy-operandr']
copynode -6.869333760347217:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'copy-operandr', 'copy-operandr']
copynode -7.031924312468618:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator -_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'copy-operandr', 'copy-operandr']
copynode -7.511792080942541:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl Literal value 4_ter ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'copy-operandl', 'operandr -> MemberReference', 'MemberReference -> member', 'member -> par0', 'copy-operandr']
copynode -7.556971194688231:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator /_ter ^ ^ operandl Literal value 4_ter ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'copy-operandl', 'operandr -> MemberReference', 'MemberReference -> member', 'member -> par0', 'copy-operandr']
copynode -8.099870319012552:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl BinaryOperation operator /_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -8.128897502552718:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr MemberReference member ^ ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> MemberReference', 'MemberReference -> member']
copynode -6.869333760347217:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'copy-operandr', 'operandr -> BinaryOperation']
copynode -8.19201506441459:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator -_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr MemberReference member ^ ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> MemberReference', 'MemberReference -> member']
copynode -8.21894674981013:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator /_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -6.8656761846505105:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator /_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'copy-operandr', 'operandr -> BinaryOperation']
copynode -6.8656761846505105:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator /_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'copy-operandr', 'operandr -> MemberReference']
copynode -6.869333760347217:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'copy-operandr', 'operandr -> MemberReference']
copynode -7.031924312468618:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator -_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'copy-operandr', 'operandr -> BinaryOperation']
copynode -7.988099867943674:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
copynode -8.013997668866068:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
copynode -7.031924312468618:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator -_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'copy-operandr', 'operandr -> MemberReference']
copynode -7.877959112171084:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl Literal value 4_ter ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> BinaryOperation', 'copy-BinaryOperation', 'operandr -> MemberReference', 'MemberReference -> member', 'member -> par0']
copynode -8.220230714883655:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'copy-operandr', 'copy-operandr']
copynode -7.933435214217752:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator -_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'copy-operandr', 'copy-operandr']
copynode -8.040678468067199:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator *_ter ^ ^ operandl BinaryOperation operator /_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'copy-operandr', 'copy-operandr']
before@19 batch0 x: -8.8418761161156: root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator *_ter ^ ^ operandl BinaryOperation operator /_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'copy-operandr', 'copy-operandr']
after@19 batch0 x: -8.8418761161156: root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator *_ter ^ ^ operandl BinaryOperation operator /_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'copy-operandr', 'copy-operandr']
copynode -7.048899555113167:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> MemberReference', 'MemberReference -> member', 'member -> par0']
copynode -7.087181651499122:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator /_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> MemberReference', 'MemberReference -> member', 'member -> par0']
copynode -7.6618349752388895:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator /_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'copy-operandr', 'copy-operandr', 'root -> End']
copynode -7.697622196283191:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'copy-operandr', 'copy-operandr', 'root -> End']
copynode -7.258325861301273:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator -_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> MemberReference', 'MemberReference -> member', 'member -> par0']
copynode -7.820469920989126:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator -_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'copy-operandr', 'copy-operandr', 'root -> End']
copynode -7.865474926773459:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl Literal value 4_ter ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'copy-operandl', 'operandr -> MemberReference', 'MemberReference -> member', 'member -> par0', 'copy-operandr', 'root -> End']
copynode -7.91454857820645:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator /_ter ^ ^ operandl Literal value 4_ter ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'copy-operandl', 'operandr -> MemberReference', 'MemberReference -> member', 'member -> par0', 'copy-operandr', 'root -> End']
copynode -8.395720501895994:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator /_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ operandr MemberReference member ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'copy-operandr', 'operandr -> MemberReference', 'MemberReference -> member']
copynode -8.447251574601978:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ operandr MemberReference member ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'copy-operandr', 'operandr -> MemberReference', 'MemberReference -> member']
copynode -8.119474342558533:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl BinaryOperation operator /_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0']
copynode -8.564076845999807:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator -_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ operandr MemberReference member ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'copy-operandr', 'operandr -> MemberReference', 'MemberReference -> member']
copynode -8.238143234048039:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator /_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0']
copynode -8.211926714982837:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'copy-operandr', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
copynode -8.678703741636127:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'copy-operandr', 'copy-operandr', 'root -> End']
copynode -8.163279342930764:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> MemberReference', 'MemberReference -> member', 'member -> par0']
copynode -8.334307690616697:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator /_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'copy-operandr', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
copynode -8.762712431605905:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator -_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'copy-operandr', 'copy-operandr', 'root -> End']
copynode -8.225465332623571:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator -_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> MemberReference', 'MemberReference -> member', 'member -> par0']
copynode -8.8418761161156:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator *_ter ^ ^ operandl BinaryOperation operator /_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'copy-operandr', 'copy-operandr', 'root -> End']
copynode -8.469735567923635:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator -_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'copy-operandr', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
copynode -8.612923482898623:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl Literal value 4_ter ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> BinaryOperation', 'copy-BinaryOperation', 'operandr -> MemberReference', 'MemberReference -> member', 'member -> par0', 'copy-operandr']
copynode -8.211926714982837:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl Literal value 4_ter ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'copy-operandr', 'operandr -> BinaryOperation', 'copy-BinaryOperation']
copynode -7.048899555113167:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr MemberReference member par1 ^ ^ ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> MemberReference', 'MemberReference -> member', 'member -> par1']
before@20 batch0 x: -9.47217192640528: root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr MemberReference member par1 ^ ^ ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> MemberReference', 'MemberReference -> member', 'member -> par1']
after@20 batch0 x: -9.47217192640528: root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr MemberReference member par1 ^ ^ ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> MemberReference', 'MemberReference -> member', 'member -> par1']
copynode -7.575649404432625:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> MemberReference', 'MemberReference -> member', 'member -> par0', 'copy-operandr']
copynode -7.606402420904487:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator /_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> MemberReference', 'MemberReference -> member', 'member -> par0', 'copy-operandr']
copynode -7.817258523311466:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator -_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> MemberReference', 'MemberReference -> member', 'member -> par0', 'copy-operandr']
copynode -8.41849624691531:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator /_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'copy-operandr', 'operandr -> MemberReference', 'MemberReference -> member', 'member -> par0']
copynode -8.47031383542344:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'copy-operandr', 'operandr -> MemberReference', 'MemberReference -> member', 'member -> par0']
copynode -8.587493918370456:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator -_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'copy-operandr', 'operandr -> MemberReference', 'MemberReference -> member', 'member -> par0']
copynode -8.941060105804354:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl Literal value 4_ter ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> BinaryOperation', 'copy-BinaryOperation', 'operandr -> MemberReference', 'MemberReference -> member', 'member -> par0', 'copy-operandr', 'root -> End']
copynode -8.727799225132912:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> MemberReference', 'MemberReference -> member', 'member -> par0', 'copy-operandr']
copynode -8.814005946274847:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator -_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> MemberReference', 'MemberReference -> member', 'member -> par0', 'copy-operandr']
copynode -9.385543839540333:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl Literal value 4_ter ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'copy-operandr', 'operandr -> BinaryOperation', 'copy-BinaryOperation', 'root -> End']
copynode -7.575649404432625:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> MemberReference']
copynode -8.474296531174332:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl BinaryOperation operator /_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'copy-operandr']
copynode -7.606402420904487:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator /_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> MemberReference']
copynode -8.624591962900013:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'copy-operandr', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter']
copynode -8.594273983035237:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator /_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'copy-operandr']
copynode -7.817258523311466:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator -_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> MemberReference']
before@21 batch0 x: -9.62771670660004: root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator -_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> MemberReference']
after@21 batch0 x: -9.62771670660004: root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator -_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> MemberReference']
copynode -7.943766915705055:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> MemberReference', 'MemberReference -> member', 'member -> par0', 'copy-operandr', 'root -> End']
copynode -7.971161955501884:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator /_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> MemberReference', 'MemberReference -> member', 'member -> par0', 'copy-operandr', 'root -> End']
copynode -8.176810161676258:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator -_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> MemberReference', 'MemberReference -> member', 'member -> par0', 'copy-operandr', 'root -> End']
copynode -8.635461505036801:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator /_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'copy-operandr', 'operandr -> MemberReference', 'MemberReference -> member', 'member -> par0', 'root -> End']
copynode -8.683829966466874:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'copy-operandr', 'operandr -> MemberReference', 'MemberReference -> member', 'member -> par0', 'root -> End']
copynode -8.801797337364405:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator -_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'copy-operandr', 'operandr -> MemberReference', 'MemberReference -> member', 'member -> par0', 'root -> End']
copynode -9.102942306082696:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> MemberReference', 'MemberReference -> member', 'member -> par0', 'copy-operandr', 'root -> End']
copynode -9.168406074400991:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator -_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> MemberReference', 'MemberReference -> member', 'member -> par0', 'copy-operandr', 'root -> End']
copynode -9.401582622434944:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ operandr MemberReference member ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> MemberReference', 'MemberReference -> member']
copynode -9.438993716146797:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator /_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ operandr MemberReference member ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> MemberReference', 'MemberReference -> member']
copynode -9.62771670660004:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator -_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ operandr MemberReference member ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> MemberReference', 'MemberReference -> member']
copynode -9.525639788713306:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'copy-operandr', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> MemberReference']
copynode -9.428673943970352:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl BinaryOperation operator /_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'copy-operandr', 'operandr -> MemberReference']
copynode -9.55139714339748:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator /_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'copy-operandr', 'operandr -> MemberReference']
before@22 batch0 x: -10.75181525805965: root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator /_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'copy-operandr', 'operandr -> MemberReference']
after@22 batch0 x: -10.75181525805965: root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator /_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'copy-operandr', 'operandr -> MemberReference']
copynode -9.430421743076295:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> MemberReference', 'MemberReference -> member', 'member -> par0']
copynode -9.468065622728318:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator /_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> MemberReference', 'MemberReference -> member', 'member -> par0']
copynode -9.657082644756883:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator -_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> MemberReference', 'MemberReference -> member', 'member -> par0']
copynode -10.335029260721058:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'copy-operandr', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -10.658992490265518:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl BinaryOperation operator /_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ operandr MemberReference member ^ ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'copy-operandr', 'operandr -> MemberReference', 'MemberReference -> member']
copynode -10.75181525805965:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator /_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ operandr MemberReference member ^ ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'copy-operandr', 'operandr -> MemberReference', 'MemberReference -> member']
before@23 batch0 x: -10.780781746376306: root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator /_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ operandr MemberReference member ^ ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'copy-operandr', 'operandr -> MemberReference', 'MemberReference -> member']
after@23 batch0 x: -10.780781746376306: root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator /_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ operandr MemberReference member ^ ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'copy-operandr', 'operandr -> MemberReference', 'MemberReference -> member']
copynode -9.695886078756303:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> MemberReference', 'MemberReference -> member', 'member -> par0', 'root -> End']
copynode -9.731954428832978:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator /_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> MemberReference', 'MemberReference -> member', 'member -> par0', 'root -> End']
copynode -9.935053316410631:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator -_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> MemberReference', 'MemberReference -> member', 'member -> par0', 'root -> End']
copynode -10.383425337728113:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'copy-operandr', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0']
copynode -10.688048074487597:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl BinaryOperation operator /_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'copy-operandr', 'operandr -> MemberReference', 'MemberReference -> member', 'member -> par0']
copynode -10.780781746376306:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator /_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'copy-operandr', 'operandr -> MemberReference', 'MemberReference -> member', 'member -> par0']
before@24 batch0 x: -11.0398980085738: root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator /_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'copy-operandr', 'operandr -> MemberReference', 'MemberReference -> member', 'member -> par0']
after@24 batch0 x: -11.0398980085738: root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator /_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'copy-operandr', 'operandr -> MemberReference', 'MemberReference -> member', 'member -> par0']
copynode -10.952452132944018:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl BinaryOperation operator /_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'copy-operandr', 'operandr -> MemberReference', 'MemberReference -> member', 'member -> par0', 'copy-operandr']
copynode -11.0398980085738:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator /_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'copy-operandr', 'operandr -> MemberReference', 'MemberReference -> member', 'member -> par0', 'copy-operandr']
copynode -10.90910075372085:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'copy-operandr', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> MemberReference']
before@25 batch0 x: -11.946920735295862: root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'copy-operandr', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> MemberReference']
after@25 batch0 x: -11.946920735295862: root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'copy-operandr', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> MemberReference']
copynode -11.3396339812316:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl BinaryOperation operator /_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'copy-operandr', 'operandr -> MemberReference', 'MemberReference -> member', 'member -> par0', 'copy-operandr', 'root -> End']
copynode -11.425910890568048:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator /_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'copy-operandr', 'operandr -> MemberReference', 'MemberReference -> member', 'member -> par0', 'copy-operandr', 'root -> End']
copynode -11.946920735295862:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr MemberReference member ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'copy-operandr', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> MemberReference', 'MemberReference -> member']
before@26 batch0 x: -12.072572392877191: root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr MemberReference member ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'copy-operandr', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> MemberReference', 'MemberReference -> member']
after@26 batch0 x: -12.072572392877191: root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr MemberReference member ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'copy-operandr', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> MemberReference', 'MemberReference -> member']
copynode -12.072572392877191:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'copy-operandr', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> MemberReference', 'MemberReference -> member', 'member -> par0']
before@27 batch0 x: -13.025355917867273: root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'copy-operandr', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> MemberReference', 'MemberReference -> member', 'member -> par0']
after@27 batch0 x: -13.025355917867273: root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'copy-operandr', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> MemberReference', 'MemberReference -> member', 'member -> par0']
copynode -13.025355917867273:  root modified ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr MemberReference member par0 ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc0', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'copy-operandr', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> MemberReference', 'MemberReference -> member', 'member -> par0', 'root -> End']
6 n_ter
6 n_ter
method
7 
boolean  isSymmetric 
None  decompose 
RealMatrix  getV 
RealMatrix  getD 
RealMatrix  getVT 
double  getRealEigenvalues 
double  getRealEigenvalue 
double  getImagEigenvalues 
double  getImagEigenvalue 
RealVector  getEigenvector 
double  getDeterminant 
DecompositionSolver  getSolver 
None  transformToTridiagonal 
None  computeGershgorinCircles 
None  findEigenvalues 
List  computeSplits 
None  process1RowBlock 
None  process2RowsBlock 
None  process3RowsBlock 
None  processGeneralBlock 
None  initialSplits 
int  goodStep 
boolean  flipIfWarranted 
double  eigenvaluesRange 
int  countEigenValues 
None  ldlTDecomposition 
None  dqds 
None  dqd 
None  computeShiftIncrement 
None  updateSigma 
None  findEigenVectors 
ArrayRealVector  findEigenvector 
None  stationaryQuotientDifferenceWithShift 
None  progressiveQuotientDifferenceWithShift 
6 n_ter
method
7 
boolean  isSymmetric 
None  decompose 
RealMatrix  getV 
RealMatrix  getD 
RealMatrix  getVT 
double  getRealEigenvalues 
double  getRealEigenvalue 
double  getImagEigenvalues 
double  getImagEigenvalue 
RealVector  getEigenvector 
double  getDeterminant 
DecompositionSolver  getSolver 
None  transformToTridiagonal 
None  computeGershgorinCircles 
None  findEigenvalues 
List  computeSplits 
None  process1RowBlock 
None  process2RowsBlock 
None  process3RowsBlock 
None  processGeneralBlock 
None  initialSplits 
int  goodStep 
boolean  flipIfWarranted 
double  eigenvaluesRange 
int  countEigenValues 
None  ldlTDecomposition 
None  dqds 
None  dqd 
None  computeShiftIncrement 
None  updateSigma 
None  findEigenVectors 
ArrayRealVector  findEigenvector 
None  stationaryQuotientDifferenceWithShift 
None  progressiveQuotientDifferenceWithShift 
6 n_ter
6 n_ter
6 n_ter
6 n_ter
6 n_ter
method
except
stderr: Check out 3ced4f2a to /root/projects/Recoder-bwk/buggy/Math-80............. OK
Init local repository...................................................... OK
Tag post-fix revision...................................................... OK
Initialize fixed program version........................................... OK
Apply patch................................................................ OK
Initialize buggy program version........................................... OK
Diff 3ced4f2a:7d903ca5..................................................... OK
Apply patch................................................................ OK
Tag pre-fix revision....................................................... OK
Check out program version: Math-80b........................................ OK
OpenJDK 64-Bit Server VM warning: ignoring option MaxPermSize=1G; support was removed in 8.0
Running ant (export.dir.src.classes)....................................... OK

  0%|          | 0/1 [00:00<?, ?it/s]/root/projects/Recoder-bwk/run.py:527: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  tmpdepth = np.array(tmpdepth)
/root/envs/recoder/lib/python3.7/site-packages/torch/nn/functional.py:1340: UserWarning: nn.functional.tanh is deprecated. Use torch.tanh instead.
  warnings.warn("nn.functional.tanh is deprecated. Use torch.tanh instead.")
100%|██████████| 1/1 [00:24<00:00, 24.59s/it]100%|██████████| 1/1 [00:24<00:00, 24.59s/it]
