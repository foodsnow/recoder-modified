stdout: condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member ERROR_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.ERROR)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EOF_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.EOF)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EOL_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.EOL)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member FIRST_BYTECODE_TOKEN_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.FIRST_BYTECODE_TOKEN)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member ENTERWITH_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.ENTERWITH)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member LEAVEWITH_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.LEAVEWITH)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member RETURN_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.RETURN)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member GOTO_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.GOTO)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member IFEQ_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.IFEQ)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member IFNE_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.IFNE)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member SETNAME_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.SETNAME)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BITOR_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.BITOR)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BITXOR_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.BITXOR)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BITAND_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.BITAND)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EQ_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.EQ)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member NE_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.NE)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member LT_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.LT)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member LE_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.LE)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member GT_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.GT)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member GE_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.GE)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member LSH_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.LSH)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member RSH_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.RSH)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member URSH_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.URSH)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member ADD_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.ADD)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member SUB_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.SUB)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member MUL_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.MUL)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member DIV_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.DIV)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member MOD_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.MOD)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member NOT_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.NOT)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BITNOT_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.BITNOT)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member POS_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.POS)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member NEG_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.NEG)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member NEW_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.NEW)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member DELPROP_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.DELPROP)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member TYPEOF_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.TYPEOF)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member GETPROP_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.GETPROP)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member SETPROP_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.SETPROP)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member GETELEM_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.GETELEM)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member SETELEM_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.SETELEM)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member CALL_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.CALL)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member NAME_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.NAME)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member NUMBER_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.NUMBER)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member STRING_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.STRING)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member NULL_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.NULL)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member THIS_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.THIS)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member FALSE_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.FALSE)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member TRUE_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.TRUE)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member SHEQ_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.SHEQ)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member SHNE_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.SHNE)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member REGEXP_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.REGEXP)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BINDNAME_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.BINDNAME)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member THROW_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.THROW)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member RETHROW_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.RETHROW)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member IN_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.IN)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member INSTANCEOF_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.INSTANCEOF)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member LOCAL_LOAD_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.LOCAL_LOAD)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member GETVAR_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.GETVAR)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member SETVAR_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.SETVAR)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member CATCH_SCOPE_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.CATCH_SCOPE)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member ENUM_INIT_KEYS_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.ENUM_INIT_KEYS)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member ENUM_INIT_VALUES_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.ENUM_INIT_VALUES)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member ENUM_NEXT_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.ENUM_NEXT)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member ENUM_ID_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.ENUM_ID)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member THISFN_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.THISFN)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member RETURN_RESULT_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.RETURN_RESULT)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member ARRAYLIT_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.ARRAYLIT)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member OBJECTLIT_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.OBJECTLIT)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member GET_REF_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.GET_REF)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member SET_REF_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.SET_REF)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member DEL_REF_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.DEL_REF)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member REF_CALL_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.REF_CALL)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member REF_SPECIAL_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.REF_SPECIAL)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member DEFAULTNAMESPACE_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.DEFAULTNAMESPACE)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member ESCXMLATTR_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.ESCXMLATTR)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member ESCXMLTEXT_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.ESCXMLTEXT)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member REF_MEMBER_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.REF_MEMBER)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member REF_NS_MEMBER_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.REF_NS_MEMBER)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member REF_NAME_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.REF_NAME)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member REF_NS_NAME_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.REF_NS_NAME)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member LAST_BYTECODE_TOKEN_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.LAST_BYTECODE_TOKEN)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member TRY_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.TRY)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member SEMI_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.SEMI)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member LB_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.LB)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member RB_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.RB)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member LC_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.LC)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member RC_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.RC)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member LP_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.LP)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member RP_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.RP)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member COMMA_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.COMMA)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member ASSIGN_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.ASSIGN)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member ASSIGN_BITOR_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.ASSIGN_BITOR)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member ASSIGN_BITXOR_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.ASSIGN_BITXOR)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member ASSIGN_BITAND_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.ASSIGN_BITAND)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member ASSIGN_LSH_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.ASSIGN_LSH)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member ASSIGN_RSH_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.ASSIGN_RSH)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member ASSIGN_URSH_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.ASSIGN_URSH)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member ASSIGN_ADD_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.ASSIGN_ADD)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member ASSIGN_SUB_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.ASSIGN_SUB)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member ASSIGN_MUL_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.ASSIGN_MUL)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member ASSIGN_DIV_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.ASSIGN_DIV)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member ASSIGN_MOD_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.ASSIGN_MOD)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member FIRST_ASSIGN_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.FIRST_ASSIGN)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member LAST_ASSIGN_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.LAST_ASSIGN)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member HOOK_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.HOOK)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member COLON_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.COLON)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member OR_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.OR)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member AND_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.AND)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member INC_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.INC)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member DEC_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.DEC)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member DOT_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.DOT)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member FUNCTION_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.FUNCTION)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPORT_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.EXPORT)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member IMPORT_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.IMPORT)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member IF_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.IF)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member ELSE_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.ELSE)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member SWITCH_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.SWITCH)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member CASE_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.CASE)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member DEFAULT_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.DEFAULT)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member WHILE_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.WHILE)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member DO_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.DO)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member FOR_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.FOR)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BREAK_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.BREAK)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member CONTINUE_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.CONTINUE)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member VAR_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.VAR)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member WITH_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.WITH)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member CATCH_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.CATCH)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member FINALLY_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.FINALLY)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member VOID_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.VOID)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member RESERVED_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.RESERVED)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EMPTY_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.EMPTY)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.BLOCK)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member LABEL_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.LABEL)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member TARGET_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.TARGET)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member LOOP_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.LOOP)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_VOID_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.EXPR_VOID)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.EXPR_RESULT)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member JSR_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.JSR)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member SCRIPT_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.SCRIPT)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member TYPEOFNAME_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.TYPEOFNAME)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member USE_STACK_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.USE_STACK)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member SETPROP_OP_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.SETPROP_OP)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member SETELEM_OP_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.SETELEM_OP)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member LOCAL_BLOCK_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.LOCAL_BLOCK)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member SET_REF_OP_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.SET_REF_OP)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member DOTDOT_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.DOTDOT)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member COLONCOLON_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.COLONCOLON)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member XML_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.XML)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member DOTQUERY_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.DOTQUERY)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member XMLATTR_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.XMLATTR)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member XMLEND_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.XMLEND)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member TO_OBJECT_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.TO_OBJECT)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member TO_DOUBLE_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.TO_DOUBLE)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member GET_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.GET)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member SET_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.SET)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member CONST_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.CONST)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member SETCONST_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.SETCONST)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member SETCONSTVAR_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.SETCONSTVAR)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member DEBUGGER_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.DEBUGGER)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member LABEL_NAME_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.LABEL_NAME)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member LAST_TOKEN_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.LAST_TOKEN)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member ANNOTATION_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.ANNOTATION)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member PIPE_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.PIPE)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member STAR_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.STAR)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EOC_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.EOC)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member QMARK_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.QMARK)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member ELLIPSIS_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.ELLIPSIS)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BANG_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.BANG)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EQUALS_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == Token.EQUALS)){
condition BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member NAME_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() != Token.NAME)){
IfStatement condition MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ ^ 
if(nameNode.getType()){

IfStatement condition MethodInvocation qualifier nameNode_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
if(nameNode.hasChildren()){

IfStatement condition MethodInvocation qualifier nameNode_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ ^ 
if(nameNode.hasOneChild()){

IfStatement condition MethodInvocation qualifier nameNode_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ ^ 
if(nameNode.hasMoreThanOneChild()){

IfStatement condition MethodInvocation qualifier nameNode_ter ^ ^ member hasSideEffects_ter ^ ^ ^ ^ ^ 
if(nameNode.hasSideEffects()){

IfStatement condition MethodInvocation qualifier nameNode_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ ^ 
if(nameNode.isQualifiedName()){

IfStatement condition MethodInvocation qualifier nameNode_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ ^ 
if(nameNode.isUnscopedQualifiedName()){

IfStatement condition MethodInvocation qualifier nameNode_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ ^ 
if(nameNode.isVarArgs()){

IfStatement condition MethodInvocation qualifier nameNode_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ ^ 
if(nameNode.isOptionalArg()){

IfStatement condition MethodInvocation qualifier nameNode_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ ^ 
if(nameNode.isSyntheticBlock()){

IfStatement condition MethodInvocation qualifier nameNode_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ ^ 
if(nameNode.wasEmptyNode()){

IfStatement condition MethodInvocation qualifier nameNode_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ ^ 
if(nameNode.isOnlyModifiesThisCall()){

IfStatement condition MethodInvocation qualifier nameNode_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ ^ 
if(nameNode.isNoSideEffectsCall()){

IfStatement condition MethodInvocation qualifier nameNode_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ ^ 
if(nameNode.isLocalResultCall()){

IfStatement condition MethodInvocation qualifier nameNode_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ ^ 
if(nameNode.isQuotedString()){

condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getSortedPropTypes_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member NAME_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getSortedPropTypes() == Token.NAME)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getLineno_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member NAME_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getLineno() == Token.NAME)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getCharno_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member NAME_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getCharno() == Token.NAME)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getSourcePosition_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member NAME_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getSourcePosition() == Token.NAME)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getChildCount_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member NAME_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getChildCount() == Token.NAME)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getSideEffectFlags_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member NAME_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getSideEffectFlags() == Token.NAME)){
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier nameNode_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
if(!nameNode.hasChildren()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier nameNode_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ ^ 
if(!nameNode.hasOneChild()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier nameNode_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ ^ 
if(!nameNode.hasMoreThanOneChild()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier nameNode_ter ^ ^ member hasSideEffects_ter ^ ^ ^ ^ ^ 
if(!nameNode.hasSideEffects()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier nameNode_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ ^ 
if(!nameNode.isQualifiedName()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier nameNode_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ ^ 
if(!nameNode.isUnscopedQualifiedName()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier nameNode_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ ^ 
if(!nameNode.isVarArgs()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier nameNode_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ ^ 
if(!nameNode.isOptionalArg()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier nameNode_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ ^ 
if(!nameNode.isSyntheticBlock()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier nameNode_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ ^ 
if(!nameNode.wasEmptyNode()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier nameNode_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ ^ 
if(!nameNode.isOnlyModifiesThisCall()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier nameNode_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ ^ 
if(!nameNode.isNoSideEffectsCall()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier nameNode_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ ^ 
if(!nameNode.isLocalResultCall()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier nameNode_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ ^ 
if(!nameNode.isQuotedString()){

condition BinaryOperation operator >=_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member NAME_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() >= Token.NAME)){
condition BinaryOperation operator >_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member NAME_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() > Token.NAME)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getName_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member NAME_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getName() == Token.NAME)){
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ ^ 
if(!nameNode.getType()){

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member compiler_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((compiler != null)){

condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getLastChild_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member NAME_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getLastChild() == Token.NAME)){
StatementExpression expression MethodInvocation qualifier nameNode_ter ^ ^ member detachChildren_ter ^ ^ ^ ^ ^ 
nameNode.detachChildren();

StatementExpression expression MethodInvocation qualifier nameNode_ter ^ ^ member setQuotedString_ter ^ ^ ^ ^ ^ 
nameNode.setQuotedString();

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ selectors MethodInvocation member getType_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member REGEXP_ter ^ ^ ^ ^ ^ ^ ^ 
if((nameNode.getFirstChild().getType() == Token.REGEXP)){

condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member NAME_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getFirstChild() == Token.NAME)){
IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member param_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((param != null)){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier param_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member STRING_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier param_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member REGEXP_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((param.getType() == Token.STRING) || (param.getType() == Token.REGEXP))){

StatementExpression expression MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ ^ 
nameNode.getType();


IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member NAME_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier nameNode_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if(((nameNode.getType() == Token.NAME) || nameNode.hasChildren())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member NAME_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier nameNode_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ ^ ^ ^ 
if(((nameNode.getType() == Token.NAME) || nameNode.hasOneChild())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member NAME_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier nameNode_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ ^ ^ ^ 
if(((nameNode.getType() == Token.NAME) || nameNode.hasMoreThanOneChild())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member NAME_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier nameNode_ter ^ ^ member hasSideEffects_ter ^ ^ ^ ^ ^ ^ ^ 
if(((nameNode.getType() == Token.NAME) || nameNode.hasSideEffects())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member NAME_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier nameNode_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ ^ ^ ^ 
if(((nameNode.getType() == Token.NAME) || nameNode.isQualifiedName())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member NAME_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier nameNode_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ ^ ^ ^ 
if(((nameNode.getType() == Token.NAME) || nameNode.isUnscopedQualifiedName())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member NAME_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier nameNode_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ ^ ^ ^ 
if(((nameNode.getType() == Token.NAME) || nameNode.isVarArgs())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member NAME_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier nameNode_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ ^ ^ ^ 
if(((nameNode.getType() == Token.NAME) || nameNode.isOptionalArg())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member NAME_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier nameNode_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ ^ ^ ^ 
if(((nameNode.getType() == Token.NAME) || nameNode.isSyntheticBlock())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member NAME_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier nameNode_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ ^ ^ ^ 
if(((nameNode.getType() == Token.NAME) || nameNode.wasEmptyNode())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member NAME_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier nameNode_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ ^ ^ ^ 
if(((nameNode.getType() == Token.NAME) || nameNode.isOnlyModifiesThisCall())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member NAME_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier nameNode_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ ^ ^ ^ 
if(((nameNode.getType() == Token.NAME) || nameNode.isNoSideEffectsCall())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member NAME_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier nameNode_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ ^ ^ ^ 
if(((nameNode.getType() == Token.NAME) || nameNode.isLocalResultCall())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member NAME_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier nameNode_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ ^ ^ ^ 
if(((nameNode.getType() == Token.NAME) || nameNode.isQuotedString())){

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier param_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member STRING_ter ^ ^ ^ ^ ^ ^ ^ 
if((param.getType() == Token.STRING)){

condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getString_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member NAME_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getString() == Token.NAME)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member hasRegExpGlobalReferences_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member NAME_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.hasRegExpGlobalReferences() == Token.NAME)){
IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ selectors MethodInvocation member getType_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member STRING_ter ^ ^ ^ ^ ^ ^ ^ 
if((nameNode.getFirstChild().getType() == Token.STRING)){

IfStatement condition MemberReference member NAME_ter ^ ^ ^ ^ ^ 
if(NAME){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member NAME_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier nameNode_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if(((nameNode.getType() == Token.NAME) && nameNode.hasChildren())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member NAME_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier nameNode_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ ^ ^ ^ 
if(((nameNode.getType() == Token.NAME) && nameNode.hasOneChild())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member NAME_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier nameNode_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ ^ ^ ^ 
if(((nameNode.getType() == Token.NAME) && nameNode.hasMoreThanOneChild())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member NAME_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier nameNode_ter ^ ^ member hasSideEffects_ter ^ ^ ^ ^ ^ ^ ^ 
if(((nameNode.getType() == Token.NAME) && nameNode.hasSideEffects())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member NAME_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier nameNode_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ ^ ^ ^ 
if(((nameNode.getType() == Token.NAME) && nameNode.isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member NAME_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier nameNode_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ ^ ^ ^ 
if(((nameNode.getType() == Token.NAME) && nameNode.isUnscopedQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member NAME_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier nameNode_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ ^ ^ ^ 
if(((nameNode.getType() == Token.NAME) && nameNode.isVarArgs())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member NAME_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier nameNode_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ ^ ^ ^ 
if(((nameNode.getType() == Token.NAME) && nameNode.isOptionalArg())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member NAME_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier nameNode_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ ^ ^ ^ 
if(((nameNode.getType() == Token.NAME) && nameNode.isSyntheticBlock())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member NAME_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier nameNode_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ ^ ^ ^ 
if(((nameNode.getType() == Token.NAME) && nameNode.wasEmptyNode())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member NAME_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier nameNode_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ ^ ^ ^ 
if(((nameNode.getType() == Token.NAME) && nameNode.isOnlyModifiesThisCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member NAME_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier nameNode_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ ^ ^ ^ 
if(((nameNode.getType() == Token.NAME) && nameNode.isNoSideEffectsCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member NAME_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier nameNode_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ ^ ^ ^ 
if(((nameNode.getType() == Token.NAME) && nameNode.isLocalResultCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member NAME_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier nameNode_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ ^ ^ ^ 
if(((nameNode.getType() == Token.NAME) && nameNode.isQuotedString())){

condition BinaryOperation operator <=_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member NAME_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() <= Token.NAME)){
IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member NAME_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier nameNode_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if(((nameNode.getType() == Token.NAME) || !nameNode.hasChildren())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member NAME_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier nameNode_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ ^ ^ ^ 
if(((nameNode.getType() == Token.NAME) || !nameNode.hasOneChild())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member NAME_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier nameNode_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ ^ ^ ^ 
if(((nameNode.getType() == Token.NAME) || !nameNode.hasMoreThanOneChild())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member NAME_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier nameNode_ter ^ ^ member hasSideEffects_ter ^ ^ ^ ^ ^ ^ ^ 
if(((nameNode.getType() == Token.NAME) || !nameNode.hasSideEffects())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member NAME_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier nameNode_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ ^ ^ ^ 
if(((nameNode.getType() == Token.NAME) || !nameNode.isQualifiedName())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member NAME_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier nameNode_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ ^ ^ ^ 
if(((nameNode.getType() == Token.NAME) || !nameNode.isUnscopedQualifiedName())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member NAME_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier nameNode_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ ^ ^ ^ 
if(((nameNode.getType() == Token.NAME) || !nameNode.isVarArgs())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member NAME_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier nameNode_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ ^ ^ ^ 
if(((nameNode.getType() == Token.NAME) || !nameNode.isOptionalArg())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member NAME_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier nameNode_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ ^ ^ ^ 
if(((nameNode.getType() == Token.NAME) || !nameNode.isSyntheticBlock())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member NAME_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier nameNode_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ ^ ^ ^ 
if(((nameNode.getType() == Token.NAME) || !nameNode.wasEmptyNode())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member NAME_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier nameNode_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ ^ ^ ^ 
if(((nameNode.getType() == Token.NAME) || !nameNode.isOnlyModifiesThisCall())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member NAME_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier nameNode_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ ^ ^ ^ 
if(((nameNode.getType() == Token.NAME) || !nameNode.isNoSideEffectsCall())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member NAME_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier nameNode_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ ^ ^ ^ 
if(((nameNode.getType() == Token.NAME) || !nameNode.isLocalResultCall())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member NAME_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier nameNode_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ ^ ^ ^ 
if(((nameNode.getType() == Token.NAME) || !nameNode.isQuotedString())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member NAME_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier nameNode_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if(((nameNode.getType() == Token.NAME) && !nameNode.hasChildren())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member NAME_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier nameNode_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ ^ ^ ^ 
if(((nameNode.getType() == Token.NAME) && !nameNode.hasOneChild())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member NAME_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier nameNode_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ ^ ^ ^ 
if(((nameNode.getType() == Token.NAME) && !nameNode.hasMoreThanOneChild())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member NAME_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier nameNode_ter ^ ^ member hasSideEffects_ter ^ ^ ^ ^ ^ ^ ^ 
if(((nameNode.getType() == Token.NAME) && !nameNode.hasSideEffects())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member NAME_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier nameNode_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ ^ ^ ^ 
if(((nameNode.getType() == Token.NAME) && !nameNode.isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member NAME_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier nameNode_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ ^ ^ ^ 
if(((nameNode.getType() == Token.NAME) && !nameNode.isUnscopedQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member NAME_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier nameNode_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ ^ ^ ^ 
if(((nameNode.getType() == Token.NAME) && !nameNode.isVarArgs())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member NAME_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier nameNode_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ ^ ^ ^ 
if(((nameNode.getType() == Token.NAME) && !nameNode.isOptionalArg())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member NAME_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier nameNode_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ ^ ^ ^ 
if(((nameNode.getType() == Token.NAME) && !nameNode.isSyntheticBlock())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member NAME_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier nameNode_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ ^ ^ ^ 
if(((nameNode.getType() == Token.NAME) && !nameNode.wasEmptyNode())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member NAME_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier nameNode_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ ^ ^ ^ 
if(((nameNode.getType() == Token.NAME) && !nameNode.isOnlyModifiesThisCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member NAME_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier nameNode_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ ^ ^ ^ 
if(((nameNode.getType() == Token.NAME) && !nameNode.isNoSideEffectsCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member NAME_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier nameNode_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ ^ ^ ^ 
if(((nameNode.getType() == Token.NAME) && !nameNode.isLocalResultCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member NAME_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier nameNode_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ ^ ^ ^ 
if(((nameNode.getType() == Token.NAME) && !nameNode.isQuotedString())){

IfStatement condition MethodInvocation qualifier nameNode_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ ^ 
if(nameNode.isEmpty()){

condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference member NAME_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() == NAME)){
IfStatement condition BinaryOperation operator +_ter ^ ^ operandl Literal value <string>_ter ^ ^ ^ ^ operandr MethodInvocation qualifier Token_ter ^ ^ arguments MethodInvocation qualifier callNode_ter ^ ^ member getType_ter ^ ^ ^ ^ member name_ter ^ ^ ^ ^ ^ ^ ^ 
if(("null" + Token.name(callNode.getType()))){

condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier compiler_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member NAME_ter ^ ^ ^ ^ ^ ^ 
if((compiler.getType() == Token.NAME)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier callNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member NAME_ter ^ ^ ^ ^ ^ ^ 
if((callNode.getType() == Token.NAME)){
IfStatement condition MethodInvocation qualifier nameNode_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(nameNode.hasChildren()){
return false;}
IfStatement condition MethodInvocation qualifier nameNode_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(nameNode.hasOneChild()){
return false;}
IfStatement condition MethodInvocation qualifier nameNode_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(nameNode.hasMoreThanOneChild()){
return false;}
IfStatement condition MethodInvocation qualifier nameNode_ter ^ ^ member hasSideEffects_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(nameNode.hasSideEffects()){
return false;}
IfStatement condition MethodInvocation qualifier nameNode_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(nameNode.isQualifiedName()){
return false;}
IfStatement condition MethodInvocation qualifier nameNode_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(nameNode.isUnscopedQualifiedName()){
return false;}
IfStatement condition MethodInvocation qualifier nameNode_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(nameNode.isVarArgs()){
return false;}
IfStatement condition MethodInvocation qualifier nameNode_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(nameNode.isOptionalArg()){
return false;}
IfStatement condition MethodInvocation qualifier nameNode_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(nameNode.isSyntheticBlock()){
return false;}
IfStatement condition MethodInvocation qualifier nameNode_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(nameNode.wasEmptyNode()){
return false;}
IfStatement condition MethodInvocation qualifier nameNode_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(nameNode.isOnlyModifiesThisCall()){
return false;}
IfStatement condition MethodInvocation qualifier nameNode_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(nameNode.isNoSideEffectsCall()){
return false;}
IfStatement condition MethodInvocation qualifier nameNode_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(nameNode.isLocalResultCall()){
return false;}
IfStatement condition MethodInvocation qualifier nameNode_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(nameNode.isQuotedString()){
return false;}
IfStatement condition MemberReference prefix_operators !_ter ^ ^ qualifier Token_ter ^ ^ member NAME_ter ^ ^ ^ ^ ^ 
if(!Token.NAME){

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier param_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member REGEXP_ter ^ ^ ^ ^ ^ ^ ^ 
if((param.getType() == Token.REGEXP)){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier nameNode_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ ^ 
if(!nameNode.isEmpty()){

condition BinaryOperation operator <_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member NAME_ter ^ ^ ^ ^ ^ ^ 
if((nameNode.getType() < Token.NAME)){
IfStatement condition MethodInvocation qualifier nameNode_ter ^ ^ selectors MethodInvocation arguments MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ member equals_ter ^ ^ ^ ^ member getType_ter ^ ^ ^ ^ ^ 
if(nameNode.getType().equals(nameNode.getType())){

IfStatement condition MethodInvocation qualifier nameNode_ter ^ ^ selectors MethodInvocation arguments MemberReference qualifier Token_ter ^ ^ member NAME_ter ^ ^ ^ ^ member equals_ter ^ ^ ^ ^ member getType_ter ^ ^ ^ ^ ^ 
if(nameNode.getType().equals(Token.NAME)){

condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier Token_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member NAME_ter ^ ^ ^ ^ ^ ^ 
if((Token.getType() == Token.NAME)){
IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member nameNode_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member NAME_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier nameNode_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member NAME_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((nameNode != Token.NAME) || (nameNode.getType() == Token.NAME))){

stderr: 