stdout: StatementExpression expression MethodInvocation member finishPropertyContinuations_ter ^ ^ ^ ^ ^ 
finishPropertyContinuations();

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ member detectImplicitPrototypeCycle_ter ^ ^ ^ ^ ^ 
if(!detectImplicitPrototypeCycle()){

IfStatement condition MemberReference member detectImplicitPrototypeCycle_ter ^ ^ ^ ^ ^ 
if(detectImplicitPrototypeCycle){

IfStatement condition MethodInvocation member hasReferenceName_ter ^ ^ ^ ^ ^ 
if(hasReferenceName()){

IfStatement condition MethodInvocation member isNamedType_ter ^ ^ ^ ^ ^ 
if(isNamedType()){

IfStatement condition MethodInvocation member isNominalType_ter ^ ^ ^ ^ ^ 
if(isNominalType()){

IfStatement condition MethodInvocation qualifier registry_ter ^ ^ member detectImplicitPrototypeCycle_ter ^ ^ ^ ^ ^ 
if(registry.detectImplicitPrototypeCycle()){

IfStatement condition MethodInvocation member getReferencedType_ter ^ ^ ^ ^ ^ 
if(getReferencedType()){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation member detectImplicitPrototypeCycle_ter ^ ^ ^ ^ operandr MethodInvocation member hasReferenceName_ter ^ ^ ^ ^ ^ ^ ^ 
if((detectImplicitPrototypeCycle() && hasReferenceName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation member detectImplicitPrototypeCycle_ter ^ ^ ^ ^ operandr MethodInvocation member isNamedType_ter ^ ^ ^ ^ ^ ^ ^ 
if((detectImplicitPrototypeCycle() && isNamedType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation member detectImplicitPrototypeCycle_ter ^ ^ ^ ^ operandr MethodInvocation member isNominalType_ter ^ ^ ^ ^ ^ ^ ^ 
if((detectImplicitPrototypeCycle() && isNominalType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation member detectImplicitPrototypeCycle_ter ^ ^ ^ ^ operandr MethodInvocation member hasReferenceName_ter ^ ^ ^ ^ ^ ^ ^ 
if((detectImplicitPrototypeCycle() || hasReferenceName())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation member detectImplicitPrototypeCycle_ter ^ ^ ^ ^ operandr MethodInvocation member isNamedType_ter ^ ^ ^ ^ ^ ^ ^ 
if((detectImplicitPrototypeCycle() || isNamedType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation member detectImplicitPrototypeCycle_ter ^ ^ ^ ^ operandr MethodInvocation member isNominalType_ter ^ ^ ^ ^ ^ ^ ^ 
if((detectImplicitPrototypeCycle() || isNominalType())){

IfStatement condition MemberReference prefix_operators !_ter ^ ^ member detectImplicitPrototypeCycle_ter ^ ^ ^ ^ ^ 
if(!detectImplicitPrototypeCycle){

IfStatement condition MethodInvocation arguments MemberReference member t_ter ^ ^ ^ MemberReference member enclosing_ter ^ ^ ^ ^ member detectImplicitPrototypeCycle_ter ^ ^ ^ ^ ^ 
if(detectImplicitPrototypeCycle(t, enclosing)){

IfStatement condition MemberReference member t_ter ^ ^ ^ ^ ^ 
if(t){

IfStatement condition MemberReference member resolved_ter ^ ^ ^ ^ ^ 
if(resolved){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation member detectImplicitPrototypeCycle_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member hasReferenceName_ter ^ ^ ^ ^ ^ ^ ^ 
if((detectImplicitPrototypeCycle() && !hasReferenceName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation member detectImplicitPrototypeCycle_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member isNamedType_ter ^ ^ ^ ^ ^ ^ ^ 
if((detectImplicitPrototypeCycle() && !isNamedType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation member detectImplicitPrototypeCycle_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member isNominalType_ter ^ ^ ^ ^ ^ ^ ^ 
if((detectImplicitPrototypeCycle() && !isNominalType())){

IfStatement condition This selectors MethodInvocation member detectImplicitPrototypeCycle_ter ^ ^ ^ ^ ^ ^ ^ 
if(this.detectImplicitPrototypeCycle()){

IfStatement condition This selectors MethodInvocation member hasReferenceName_ter ^ ^ ^ ^ ^ ^ ^ 
if(this.hasReferenceName()){

IfStatement condition This selectors MethodInvocation member isNamedType_ter ^ ^ ^ ^ ^ ^ ^ 
if(this.isNamedType()){

IfStatement condition This selectors MethodInvocation member isNominalType_ter ^ ^ ^ ^ ^ ^ ^ 
if(this.isNominalType()){

IfStatement condition MethodInvocation qualifier t_ter ^ ^ member detectImplicitPrototypeCycle_ter ^ ^ ^ ^ ^ 
if(t.detectImplicitPrototypeCycle()){

IfStatement condition MethodInvocation arguments MemberReference member t_ter ^ ^ ^ ^ member detectImplicitPrototypeCycle_ter ^ ^ ^ ^ ^ 
if(detectImplicitPrototypeCycle(t)){

IfStatement condition MethodInvocation member isResolved_ter ^ ^ ^ ^ ^ 
if(isResolved()){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation member detectImplicitPrototypeCycle_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member hasReferenceName_ter ^ ^ ^ ^ ^ ^ ^ 
if((detectImplicitPrototypeCycle() || !hasReferenceName())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation member detectImplicitPrototypeCycle_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member isNamedType_ter ^ ^ ^ ^ ^ ^ ^ 
if((detectImplicitPrototypeCycle() || !isNamedType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation member detectImplicitPrototypeCycle_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member isNominalType_ter ^ ^ ^ ^ ^ ^ ^ 
if((detectImplicitPrototypeCycle() || !isNominalType())){

IfStatement condition MethodInvocation member detectImplicitPrototypeCycle_ter ^ ^ ^ ^ ^ 
if(detectImplicitPrototypeCycle()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ member hasReferenceName_ter ^ ^ ^ ^ ^ 
if(!hasReferenceName()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ member isNamedType_ter ^ ^ ^ ^ ^ 
if(!isNamedType()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ member isNominalType_ter ^ ^ ^ ^ ^ 
if(!isNominalType()){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation member detectImplicitPrototypeCycle_ter ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member enclosing_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((detectImplicitPrototypeCycle() && (enclosing != null))){

IfStatement condition This selectors MethodInvocation member getReferencedType_ter ^ ^ ^ ^ ^ ^ ^ 
if(this.getReferencedType()){

IfStatement condition MethodInvocation qualifier registry_ter ^ ^ member isLastGeneration_ter ^ ^ ^ ^ ^ 
if(registry.isLastGeneration()){

condition MethodInvocation member finishPropertyContinuations_ter ^ ^ ^ ^ 
if(finishPropertyContinuations()){
StatementExpression expression MethodInvocation qualifier registry_ter ^ ^ member finishPropertyContinuations_ter ^ ^ ^ ^ ^ 
registry.finishPropertyContinuations();

IfStatement condition This selectors MemberReference member detectImplicitPrototypeCycle_ter ^ ^ ^ ^ ^ ^ ^ 
if(this.detectImplicitPrototypeCycle){

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member enclosing_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((enclosing != null)){

condition MethodInvocation member isResolved_ter ^ ^ ^ ^ 
if(isResolved()){
IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member resolved_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((resolved != null)){

IfStatement condition MethodInvocation qualifier registry_ter ^ ^ member hasReferenceName_ter ^ ^ ^ ^ ^ 
if(registry.hasReferenceName()){

IfStatement condition MethodInvocation qualifier registry_ter ^ ^ member isNamedType_ter ^ ^ ^ ^ ^ 
if(registry.isNamedType()){

IfStatement condition MethodInvocation qualifier registry_ter ^ ^ member isNominalType_ter ^ ^ ^ ^ ^ 
if(registry.isNominalType()){

StatementExpression expression MethodInvocation member detectImplicitPrototypeCycle_ter ^ ^ ^ ^ ^ 
detectImplicitPrototypeCycle();


IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MemberReference member enclosing_ter ^ ^ ^ ^ operandr MethodInvocation member detectImplicitPrototypeCycle_ter ^ ^ ^ ^ ^ ^ ^ 
if((enclosing || detectImplicitPrototypeCycle())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member enclosing_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation member detectImplicitPrototypeCycle_ter ^ ^ ^ ^ ^ ^ ^ 
if(((enclosing != null) && detectImplicitPrototypeCycle())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation member detectImplicitPrototypeCycle_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member enclosing_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((detectImplicitPrototypeCycle() && (enclosing == null))){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation member detectImplicitPrototypeCycle_ter ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member enclosing_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((detectImplicitPrototypeCycle() || (enclosing != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member enclosing_ter ^ ^ ^ ^ operandr MethodInvocation member detectImplicitPrototypeCycle_ter ^ ^ ^ ^ ^ ^ ^ 
if((enclosing && detectImplicitPrototypeCycle())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation member detectImplicitPrototypeCycle_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member enclosing_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((detectImplicitPrototypeCycle() || (enclosing == null))){

StatementExpression expression MethodInvocation member finishPropertyContinuations_ter ^ ^ ^ ^ ^ 
finishPropertyContinuations();

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ member detectImplicitPrototypeCycle_ter ^ ^ ^ ^ ^ 
if(!detectImplicitPrototypeCycle()){

IfStatement condition MemberReference member detectImplicitPrototypeCycle_ter ^ ^ ^ ^ ^ 
if(detectImplicitPrototypeCycle){

IfStatement condition MethodInvocation member hasReferenceName_ter ^ ^ ^ ^ ^ 
if(hasReferenceName()){

IfStatement condition MethodInvocation member isNamedType_ter ^ ^ ^ ^ ^ 
if(isNamedType()){

IfStatement condition MethodInvocation member isNominalType_ter ^ ^ ^ ^ ^ 
if(isNominalType()){

IfStatement condition MethodInvocation qualifier registry_ter ^ ^ member detectImplicitPrototypeCycle_ter ^ ^ ^ ^ ^ 
if(registry.detectImplicitPrototypeCycle()){

IfStatement condition MethodInvocation member getReferencedType_ter ^ ^ ^ ^ ^ 
if(getReferencedType()){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation member detectImplicitPrototypeCycle_ter ^ ^ ^ ^ operandr MethodInvocation member hasReferenceName_ter ^ ^ ^ ^ ^ ^ ^ 
if((detectImplicitPrototypeCycle() && hasReferenceName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation member detectImplicitPrototypeCycle_ter ^ ^ ^ ^ operandr MethodInvocation member isNamedType_ter ^ ^ ^ ^ ^ ^ ^ 
if((detectImplicitPrototypeCycle() && isNamedType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation member detectImplicitPrototypeCycle_ter ^ ^ ^ ^ operandr MethodInvocation member isNominalType_ter ^ ^ ^ ^ ^ ^ ^ 
if((detectImplicitPrototypeCycle() && isNominalType())){

IfStatement condition MemberReference prefix_operators !_ter ^ ^ member detectImplicitPrototypeCycle_ter ^ ^ ^ ^ ^ 
if(!detectImplicitPrototypeCycle){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation member detectImplicitPrototypeCycle_ter ^ ^ ^ ^ operandr MethodInvocation member hasReferenceName_ter ^ ^ ^ ^ ^ ^ ^ 
if((detectImplicitPrototypeCycle() || hasReferenceName())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation member detectImplicitPrototypeCycle_ter ^ ^ ^ ^ operandr MethodInvocation member isNamedType_ter ^ ^ ^ ^ ^ ^ ^ 
if((detectImplicitPrototypeCycle() || isNamedType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation member detectImplicitPrototypeCycle_ter ^ ^ ^ ^ operandr MethodInvocation member isNominalType_ter ^ ^ ^ ^ ^ ^ ^ 
if((detectImplicitPrototypeCycle() || isNominalType())){

IfStatement condition MemberReference member resolved_ter ^ ^ ^ ^ ^ 
if(resolved){

IfStatement condition MethodInvocation member isResolved_ter ^ ^ ^ ^ ^ 
if(isResolved()){

IfStatement condition MemberReference member t_ter ^ ^ ^ ^ ^ 
if(t){

IfStatement condition MethodInvocation qualifier t_ter ^ ^ member detectImplicitPrototypeCycle_ter ^ ^ ^ ^ ^ 
if(t.detectImplicitPrototypeCycle()){

IfStatement condition MethodInvocation arguments MemberReference member t_ter ^ ^ ^ MemberReference member enclosing_ter ^ ^ ^ ^ member detectImplicitPrototypeCycle_ter ^ ^ ^ ^ ^ 
if(detectImplicitPrototypeCycle(t, enclosing)){

IfStatement condition MethodInvocation member detectImplicitPrototypeCycle_ter ^ ^ ^ ^ ^ 
if(detectImplicitPrototypeCycle()){

IfStatement condition This selectors MethodInvocation member hasReferenceName_ter ^ ^ ^ ^ ^ ^ ^ 
if(this.hasReferenceName()){

IfStatement condition This selectors MethodInvocation member isNamedType_ter ^ ^ ^ ^ ^ ^ ^ 
if(this.isNamedType()){

IfStatement condition This selectors MethodInvocation member isNominalType_ter ^ ^ ^ ^ ^ ^ ^ 
if(this.isNominalType()){

IfStatement condition MethodInvocation arguments MemberReference member t_ter ^ ^ ^ ^ member detectImplicitPrototypeCycle_ter ^ ^ ^ ^ ^ 
if(detectImplicitPrototypeCycle(t)){

StatementExpression expression MethodInvocation qualifier registry_ter ^ ^ member finishPropertyContinuations_ter ^ ^ ^ ^ ^ 
registry.finishPropertyContinuations();

IfStatement condition MethodInvocation qualifier registry_ter ^ ^ member isLastGeneration_ter ^ ^ ^ ^ ^ 
if(registry.isLastGeneration()){

condition MethodInvocation member finishPropertyContinuations_ter ^ ^ ^ ^ 
if(finishPropertyContinuations()){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation member detectImplicitPrototypeCycle_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member hasReferenceName_ter ^ ^ ^ ^ ^ ^ ^ 
if((detectImplicitPrototypeCycle() && !hasReferenceName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation member detectImplicitPrototypeCycle_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member isNamedType_ter ^ ^ ^ ^ ^ ^ ^ 
if((detectImplicitPrototypeCycle() && !isNamedType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation member detectImplicitPrototypeCycle_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member isNominalType_ter ^ ^ ^ ^ ^ ^ ^ 
if((detectImplicitPrototypeCycle() && !isNominalType())){

condition MethodInvocation member detectImplicitPrototypeCycle_ter ^ ^ ^ ^ 
if(detectImplicitPrototypeCycle()){


IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation member detectImplicitPrototypeCycle_ter ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member enclosing_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((detectImplicitPrototypeCycle() && (enclosing != null))){

IfStatement condition This selectors MethodInvocation member detectImplicitPrototypeCycle_ter ^ ^ ^ ^ ^ ^ ^ 
if(this.detectImplicitPrototypeCycle()){

condition MethodInvocation member isResolved_ter ^ ^ ^ ^ 
if(isResolved()){
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ member hasReferenceName_ter ^ ^ ^ ^ ^ 
if(!hasReferenceName()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ member isNamedType_ter ^ ^ ^ ^ ^ 
if(!isNamedType()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ member isNominalType_ter ^ ^ ^ ^ ^ 
if(!isNominalType()){

StatementExpression expression MethodInvocation member detectImplicitPrototypeCycle_ter ^ ^ ^ ^ ^ 
detectImplicitPrototypeCycle();


IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member resolved_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((resolved != null)){

IfStatement condition This selectors MethodInvocation member getReferencedType_ter ^ ^ ^ ^ ^ ^ ^ 
if(this.getReferencedType()){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation member detectImplicitPrototypeCycle_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member hasReferenceName_ter ^ ^ ^ ^ ^ ^ ^ 
if((detectImplicitPrototypeCycle() || !hasReferenceName())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation member detectImplicitPrototypeCycle_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member isNamedType_ter ^ ^ ^ ^ ^ ^ ^ 
if((detectImplicitPrototypeCycle() || !isNamedType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation member detectImplicitPrototypeCycle_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member isNominalType_ter ^ ^ ^ ^ ^ ^ ^ 
if((detectImplicitPrototypeCycle() || !isNominalType())){

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member enclosing_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((enclosing != null)){

IfStatement condition MethodInvocation qualifier registry_ter ^ ^ member hasReferenceName_ter ^ ^ ^ ^ ^ 
if(registry.hasReferenceName()){

IfStatement condition MethodInvocation qualifier registry_ter ^ ^ member isNamedType_ter ^ ^ ^ ^ ^ 
if(registry.isNamedType()){

IfStatement condition MethodInvocation qualifier registry_ter ^ ^ member isNominalType_ter ^ ^ ^ ^ ^ 
if(registry.isNominalType()){

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member t_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((t != null)){

IfStatement condition MethodInvocation qualifier enclosing_ter ^ ^ member detectImplicitPrototypeCycle_ter ^ ^ ^ ^ ^ 
if(enclosing.detectImplicitPrototypeCycle()){

IfStatement condition This selectors MemberReference member detectImplicitPrototypeCycle_ter ^ ^ ^ ^ ^ ^ ^ 
if(this.detectImplicitPrototypeCycle){

condition MethodInvocation member resolveInternal_ter ^ ^ ^ ^ 
if(resolveInternal()){
stderr: 