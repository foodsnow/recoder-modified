stdout: ReturnStatement expression MemberReference member j_ter ^ ^ ^ ^ ^ 
return j;
ReturnStatement expression MemberReference member i_ter ^ ^ ^ ^ ^ 
return i;
ReturnStatement expression MemberReference member ch_ter ^ ^ ^ ^ ^ 
return ch;
ReturnStatement expression MemberReference member searchLen_ter ^ ^ ^ ^ ^ 
return searchLen;
ReturnStatement expression MemberReference member loc5 ^ ^ ^ ^ ^ 
return ;
BreakStatement_ter ^ 
break;

ReturnStatement expression MemberReference member INDEX_NOT_FOUND_ter ^ ^ ^ ^ ^ 
return INDEX_NOT_FOUND;
ReturnStatement expression MemberReference member csLen_ter ^ ^ ^ ^ ^ 
return csLen;
ReturnStatement expression MemberReference member INDEX_NOT_FOUND_ter ^ ^ ^ ^ ^ 
if (true) { return INDEX_NOT_FOUND; }

ReturnStatement expression Literal value 0_ter ^ ^ ^ ^ ^ 
return 0;
ReturnStatement expression MemberReference member searchChars_ter ^ ^ ^ ^ ^ 
return searchChars;
ReturnStatement expression MemberReference member cs_ter ^ ^ ^ ^ ^ 
return cs;

ReturnStatement expression Literal value 0_ter ^ ^ ^ ^ ^ 
if (true) { return 0; }

ReturnStatement expression MemberReference selectors ArraySelector index MemberReference member j_ter ^ ^ ^ ^ ^ ^ member i_ter ^ ^ ^ ^ ^ 
return i[j];
ReturnStatement expression Literal value 1_ter ^ ^ ^ ^ ^ 
return 1;
ReturnStatement expression MethodInvocation qualifier cs_ter ^ ^ member length_ter ^ ^ ^ ^ ^ 
return cs.length();
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
return false;
ContinueStatement_ter ^ 
continue;

ReturnStatement expression MethodInvocation qualifier i_ter ^ ^ member length_ter ^ ^ ^ ^ ^ 
return i.length();
IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member i_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((i != null)){

ReturnStatement expression MethodInvocation qualifier ArrayUtils_ter ^ ^ arguments MemberReference member searchChars_ter ^ ^ ^ ^ member isEmpty_ter ^ ^ ^ ^ ^ 
return ArrayUtils.isEmpty(searchChars);
ReturnStatement expression MemberReference member j_ter ^ ^ ^ ^ ^ 
if (true) { return j; }

ReturnStatement expression Literal value 2_ter ^ ^ ^ ^ ^ 
return 2;
IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference selectors ArraySelector index MemberReference member j_ter ^ ^ ^ ^ ^ ^ member searchChars_ter ^ ^ ^ ^ operandr MemberReference member ch_ter ^ ^ ^ ^ ^ ^ ^ 
if((searchChars[j] == ch)){

ContinueStatement_ter ^ 
continue;

control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name j_ter ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member j_ter ^ ^ ^ ^ operandr MemberReference member searchLen_ter ^ ^ ^ ^ ^ ^ update MemberReference postfix_operators ++_ter ^ ^ member j_ter ^ ^ ^ ^ ^ ^ 
for(int j = 0;(j < searchLen);j++) {

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ch_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((ch != null)){

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member i_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((i == null)){

ReturnStatement_ter ^ 
if (true) { return;
 }

ReturnStatement expression MemberReference selectors ArraySelector index Literal value 0_ter ^ ^ ^ ^ ^ ^ member i_ter ^ ^ ^ ^ ^ 
return i[0];
ReturnStatement expression BinaryOperation operator +_ter ^ ^ operandl MemberReference member i_ter ^ ^ ^ ^ operandr MemberReference member i_ter ^ ^ ^ ^ ^ ^ ^ 
return (i + i);
IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ch_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((ch == null)){

control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name i_ter ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member i_ter ^ ^ ^ ^ operandr MemberReference member csLen_ter ^ ^ ^ ^ ^ ^ update MemberReference postfix_operators ++_ter ^ ^ member i_ter ^ ^ ^ ^ ^ ^ 
for(int i = 0;(i < csLen);i++) {

ReturnStatement expression BinaryOperation operator +_ter ^ ^ operandl MemberReference member i_ter ^ ^ ^ ^ operandr MemberReference member searchLen_ter ^ ^ ^ ^ ^ ^ ^ 
return (i + searchLen);
ReturnStatement expression BinaryOperation operator +_ter ^ ^ operandl MemberReference member i_ter ^ ^ ^ ^ operandr MethodInvocation qualifier ArrayUtils_ter ^ ^ arguments MemberReference member searchChars_ter ^ ^ ^ ^ member isEmpty_ter ^ ^ ^ ^ ^ ^ ^ 
return (i + ArrayUtils.isEmpty(searchChars));
ReturnStatement_ter ^ 
return;

ReturnStatement expression BinaryOperation operator +_ter ^ ^ operandl MemberReference member i_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ 
return (i + 0);
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator <_ter ^ ^ operandl MemberReference member i_ter ^ ^ ^ ^ operandr MemberReference member csLast_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member j_ter ^ ^ ^ ^ operandr MemberReference member searchLast_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator >=_ter ^ ^ operandl MemberReference member ch_ter ^ ^ ^ ^ operandr MemberReference qualifier Character_ter ^ ^ member MIN_HIGH_SURROGATE_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member ch_ter ^ ^ ^ ^ operandr MemberReference qualifier Character_ter ^ ^ member MAX_HIGH_SURROGATE_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((((i < csLast) && (j < searchLast)) && (ch >= Character.MIN_HIGH_SURROGATE)) && (ch < Character.MAX_HIGH_SURROGATE))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator <_ter ^ ^ operandl MemberReference member i_ter ^ ^ ^ ^ operandr MemberReference member csLast_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member j_ter ^ ^ ^ ^ operandr MemberReference member searchLast_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator >=_ter ^ ^ operandl MemberReference member ch_ter ^ ^ ^ ^ operandr MemberReference qualifier Character_ter ^ ^ member MIN_HIGH_SURROGATE_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl MemberReference member ch_ter ^ ^ ^ ^ operandr MemberReference qualifier Character_ter ^ ^ member MAX_HIGH_SURROGATE_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((((i < csLast) && (j < searchLast)) && (ch >= Character.MIN_HIGH_SURROGATE)) && (ch <= Character.MAX_HIGH_SURROGATE))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator <_ter ^ ^ operandl MemberReference member i_ter ^ ^ ^ ^ operandr MemberReference member csLast_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member j_ter ^ ^ ^ ^ operandr MemberReference member searchLast_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator >=_ter ^ ^ operandl MemberReference member ch_ter ^ ^ ^ ^ operandr MemberReference qualifier Character_ter ^ ^ member MIN_HIGH_SURROGATE_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator >_ter ^ ^ operandl MemberReference member ch_ter ^ ^ ^ ^ operandr MemberReference qualifier Character_ter ^ ^ member MAX_HIGH_SURROGATE_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((((i < csLast) && (j < searchLast)) && (ch >= Character.MIN_HIGH_SURROGATE)) && (ch > Character.MAX_HIGH_SURROGATE))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator <_ter ^ ^ operandl MemberReference member i_ter ^ ^ ^ ^ operandr MemberReference member csLast_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member j_ter ^ ^ ^ ^ operandr MemberReference member searchLast_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl MemberReference member ch_ter ^ ^ ^ ^ operandr MemberReference qualifier Character_ter ^ ^ member MIN_HIGH_SURROGATE_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl MemberReference member ch_ter ^ ^ ^ ^ operandr MemberReference qualifier Character_ter ^ ^ member MAX_HIGH_SURROGATE_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((((i < csLast) && (j < searchLast)) && (ch <= Character.MIN_HIGH_SURROGATE)) && (ch <= Character.MAX_HIGH_SURROGATE))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator >=_ter ^ ^ operandl MemberReference member i_ter ^ ^ ^ ^ operandr MemberReference member csLast_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member j_ter ^ ^ ^ ^ operandr MemberReference member searchLast_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator >=_ter ^ ^ operandl MemberReference member ch_ter ^ ^ ^ ^ operandr MemberReference qualifier Character_ter ^ ^ member MIN_HIGH_SURROGATE_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl MemberReference member ch_ter ^ ^ ^ ^ operandr MemberReference qualifier Character_ter ^ ^ member MAX_HIGH_SURROGATE_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((((i >= csLast) && (j < searchLast)) && (ch >= Character.MIN_HIGH_SURROGATE)) && (ch <= Character.MAX_HIGH_SURROGATE))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator <=_ter ^ ^ operandl MemberReference member i_ter ^ ^ ^ ^ operandr MemberReference member csLast_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member j_ter ^ ^ ^ ^ operandr MemberReference member searchLast_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator >=_ter ^ ^ operandl MemberReference member ch_ter ^ ^ ^ ^ operandr MemberReference qualifier Character_ter ^ ^ member MIN_HIGH_SURROGATE_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl MemberReference member ch_ter ^ ^ ^ ^ operandr MemberReference qualifier Character_ter ^ ^ member MAX_HIGH_SURROGATE_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((((i <= csLast) && (j < searchLast)) && (ch >= Character.MIN_HIGH_SURROGATE)) && (ch <= Character.MAX_HIGH_SURROGATE))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator <_ter ^ ^ operandl MemberReference member i_ter ^ ^ ^ ^ operandr MemberReference member csLast_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member j_ter ^ ^ ^ ^ operandr MemberReference member searchLast_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator >=_ter ^ ^ operandl MemberReference member ch_ter ^ ^ ^ ^ operandr MemberReference qualifier Character_ter ^ ^ member MIN_HIGH_SURROGATE_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator >=_ter ^ ^ operandl MemberReference member ch_ter ^ ^ ^ ^ operandr MemberReference qualifier Character_ter ^ ^ member MAX_HIGH_SURROGATE_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((((i < csLast) && (j < searchLast)) && (ch >= Character.MIN_HIGH_SURROGATE)) && (ch >= Character.MAX_HIGH_SURROGATE))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator <_ter ^ ^ operandl MemberReference member i_ter ^ ^ ^ ^ operandr MemberReference member csLast_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member j_ter ^ ^ ^ ^ operandr MemberReference member searchLast_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator >_ter ^ ^ operandl MemberReference member ch_ter ^ ^ ^ ^ operandr MemberReference qualifier Character_ter ^ ^ member MIN_HIGH_SURROGATE_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl MemberReference member ch_ter ^ ^ ^ ^ operandr MemberReference qualifier Character_ter ^ ^ member MAX_HIGH_SURROGATE_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((((i < csLast) && (j < searchLast)) && (ch > Character.MIN_HIGH_SURROGATE)) && (ch <= Character.MAX_HIGH_SURROGATE))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator <_ter ^ ^ operandl MemberReference member i_ter ^ ^ ^ ^ operandr MemberReference member csLast_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member j_ter ^ ^ ^ ^ operandr MemberReference member searchLast_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator >=_ter ^ ^ operandl MemberReference member ch_ter ^ ^ ^ ^ operandr MemberReference qualifier Character_ter ^ ^ member MIN_HIGH_SURROGATE_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl MemberReference member ch_ter ^ ^ ^ ^ operandr MemberReference member searchLast_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((((i < csLast) && (j < searchLast)) && (ch >= Character.MIN_HIGH_SURROGATE)) && (ch <= searchLast))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator >_ter ^ ^ operandl MemberReference member i_ter ^ ^ ^ ^ operandr MemberReference member csLast_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member j_ter ^ ^ ^ ^ operandr MemberReference member searchLast_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator >=_ter ^ ^ operandl MemberReference member ch_ter ^ ^ ^ ^ operandr MemberReference qualifier Character_ter ^ ^ member MIN_HIGH_SURROGATE_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl MemberReference member ch_ter ^ ^ ^ ^ operandr MemberReference qualifier Character_ter ^ ^ member MAX_HIGH_SURROGATE_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((((i > csLast) && (j < searchLast)) && (ch >= Character.MIN_HIGH_SURROGATE)) && (ch <= Character.MAX_HIGH_SURROGATE))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator <_ter ^ ^ operandl MemberReference member i_ter ^ ^ ^ ^ operandr MemberReference member csLast_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member j_ter ^ ^ ^ ^ operandr MemberReference member searchLast_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator >=_ter ^ ^ operandl MemberReference member ch_ter ^ ^ ^ ^ operandr MemberReference qualifier Character_ter ^ ^ member MIN_HIGH_SURROGATE_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl MemberReference member ch_ter ^ ^ ^ ^ operandr MemberReference member ch_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((((i < csLast) && (j < searchLast)) && (ch >= Character.MIN_HIGH_SURROGATE)) && (ch <= ch))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator <_ter ^ ^ operandl MemberReference member i_ter ^ ^ ^ ^ operandr MemberReference member csLast_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member j_ter ^ ^ ^ ^ operandr MemberReference member searchLast_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator >=_ter ^ ^ operandl MemberReference member ch_ter ^ ^ ^ ^ operandr MemberReference member searchLast_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl MemberReference member ch_ter ^ ^ ^ ^ operandr MemberReference qualifier Character_ter ^ ^ member MAX_HIGH_SURROGATE_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((((i < csLast) && (j < searchLast)) && (ch >= searchLast)) && (ch <= Character.MAX_HIGH_SURROGATE))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator <_ter ^ ^ operandl MemberReference member i_ter ^ ^ ^ ^ operandr MemberReference member csLast_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member j_ter ^ ^ ^ ^ operandr MemberReference member searchLast_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator >=_ter ^ ^ operandl MemberReference member ch_ter ^ ^ ^ ^ operandr MemberReference member ch_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl MemberReference member ch_ter ^ ^ ^ ^ operandr MemberReference qualifier Character_ter ^ ^ member MAX_HIGH_SURROGATE_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((((i < csLast) && (j < searchLast)) && (ch >= ch)) && (ch <= Character.MAX_HIGH_SURROGATE))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator <_ter ^ ^ operandl MemberReference member i_ter ^ ^ ^ ^ operandr MemberReference member csLast_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member j_ter ^ ^ ^ ^ operandr MemberReference member searchLast_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member ch_ter ^ ^ ^ ^ operandr MemberReference qualifier Character_ter ^ ^ member MIN_HIGH_SURROGATE_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl MemberReference member ch_ter ^ ^ ^ ^ operandr MemberReference qualifier Character_ter ^ ^ member MAX_HIGH_SURROGATE_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((((i < csLast) && (j < searchLast)) && (ch < Character.MIN_HIGH_SURROGATE)) && (ch <= Character.MAX_HIGH_SURROGATE))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator <_ter ^ ^ operandl MemberReference member i_ter ^ ^ ^ ^ operandr MemberReference member csLast_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member j_ter ^ ^ ^ ^ operandr MemberReference member searchLast_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator >=_ter ^ ^ operandl MemberReference member ch_ter ^ ^ ^ ^ operandr MemberReference qualifier Character_ter ^ ^ member MIN_HIGH_SURROGATE_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl MemberReference member ch_ter ^ ^ ^ ^ operandr MemberReference member i_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((((i < csLast) && (j < searchLast)) && (ch >= Character.MIN_HIGH_SURROGATE)) && (ch <= i))){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator <_ter ^ ^ operandl MemberReference member i_ter ^ ^ ^ ^ operandr MemberReference member csLast_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member j_ter ^ ^ ^ ^ operandr MemberReference member searchLast_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator >=_ter ^ ^ operandl MemberReference member ch_ter ^ ^ ^ ^ operandr MemberReference qualifier Character_ter ^ ^ member MIN_HIGH_SURROGATE_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((i < csLast) && (j < searchLast)) && (ch >= Character.MIN_HIGH_SURROGATE))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator <_ter ^ ^ operandl MemberReference member i_ter ^ ^ ^ ^ operandr MemberReference member csLast_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member j_ter ^ ^ ^ ^ operandr MemberReference member searchLast_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator >=_ter ^ ^ operandl MemberReference member ch_ter ^ ^ ^ ^ operandr MemberReference member i_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl MemberReference member ch_ter ^ ^ ^ ^ operandr MemberReference qualifier Character_ter ^ ^ member MAX_HIGH_SURROGATE_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((((i < csLast) && (j < searchLast)) && (ch >= i)) && (ch <= Character.MAX_HIGH_SURROGATE))){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator <_ter ^ ^ operandl MemberReference member i_ter ^ ^ ^ ^ operandr MemberReference member csLast_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member j_ter ^ ^ ^ ^ operandr MemberReference member searchLast_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((i < csLast) && (j < searchLast))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator <_ter ^ ^ operandl MemberReference member i_ter ^ ^ ^ ^ operandr MemberReference member csLast_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member j_ter ^ ^ ^ ^ operandr MemberReference member searchLast_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator >=_ter ^ ^ operandl MemberReference member ch_ter ^ ^ ^ ^ operandr MemberReference qualifier Character_ter ^ ^ member MIN_HIGH_SURROGATE_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl MemberReference member ch_ter ^ ^ ^ ^ operandr MemberReference member MAX_HIGH_SURROGATE_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((((i < csLast) && (j < searchLast)) && (ch >= Character.MIN_HIGH_SURROGATE)) && (ch <= MAX_HIGH_SURROGATE))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator <_ter ^ ^ operandl MemberReference member i_ter ^ ^ ^ ^ operandr MemberReference member csLast_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member j_ter ^ ^ ^ ^ operandr MemberReference member searchLast_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator >=_ter ^ ^ operandl MemberReference member ch_ter ^ ^ ^ ^ operandr MemberReference qualifier Character_ter ^ ^ member MIN_HIGH_SURROGATE_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl MemberReference member ch_ter ^ ^ ^ ^ operandr MemberReference member csLength_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((((i < csLast) && (j < searchLast)) && (ch >= Character.MIN_HIGH_SURROGATE)) && (ch <= csLength))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator <_ter ^ ^ operandl MemberReference member i_ter ^ ^ ^ ^ operandr MemberReference member csLast_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member j_ter ^ ^ ^ ^ operandr MemberReference member searchLast_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator >=_ter ^ ^ operandl MemberReference member ch_ter ^ ^ ^ ^ operandr MemberReference qualifier Character_ter ^ ^ member MIN_HIGH_SURROGATE_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl MemberReference member ch_ter ^ ^ ^ ^ operandr MemberReference member j_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((((i < csLast) && (j < searchLast)) && (ch >= Character.MIN_HIGH_SURROGATE)) && (ch <= j))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator <_ter ^ ^ operandl MemberReference member i_ter ^ ^ ^ ^ operandr MemberReference member csLast_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member j_ter ^ ^ ^ ^ operandr MemberReference member searchLast_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator >=_ter ^ ^ operandl MemberReference member ch_ter ^ ^ ^ ^ operandr MemberReference member MAX_HIGH_SURROGATE_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl MemberReference member ch_ter ^ ^ ^ ^ operandr MemberReference qualifier Character_ter ^ ^ member MAX_HIGH_SURROGATE_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((((i < csLast) && (j < searchLast)) && (ch >= MAX_HIGH_SURROGATE)) && (ch <= Character.MAX_HIGH_SURROGATE))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator <_ter ^ ^ operandl MemberReference member i_ter ^ ^ ^ ^ operandr MemberReference member csLast_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member j_ter ^ ^ ^ ^ operandr MemberReference member searchLast_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator >=_ter ^ ^ operandl MemberReference member ch_ter ^ ^ ^ ^ operandr MemberReference qualifier Character_ter ^ ^ member MIN_HIGH_SURROGATE_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl MemberReference member searchLast_ter ^ ^ ^ ^ operandr MemberReference qualifier Character_ter ^ ^ member MAX_HIGH_SURROGATE_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((((i < csLast) && (j < searchLast)) && (ch >= Character.MIN_HIGH_SURROGATE)) && (searchLast <= Character.MAX_HIGH_SURROGATE))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator <_ter ^ ^ operandl MemberReference member searchLast_ter ^ ^ ^ ^ operandr MemberReference member csLast_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member j_ter ^ ^ ^ ^ operandr MemberReference member searchLast_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator >=_ter ^ ^ operandl MemberReference member ch_ter ^ ^ ^ ^ operandr MemberReference qualifier Character_ter ^ ^ member MIN_HIGH_SURROGATE_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl MemberReference member ch_ter ^ ^ ^ ^ operandr MemberReference qualifier Character_ter ^ ^ member MAX_HIGH_SURROGATE_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((((searchLast < csLast) && (j < searchLast)) && (ch >= Character.MIN_HIGH_SURROGATE)) && (ch <= Character.MAX_HIGH_SURROGATE))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator <_ter ^ ^ operandl MemberReference member i_ter ^ ^ ^ ^ operandr MemberReference member csLast_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member j_ter ^ ^ ^ ^ operandr MemberReference member searchLast_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator >=_ter ^ ^ operandl MemberReference member ch_ter ^ ^ ^ ^ operandr MemberReference member j_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl MemberReference member ch_ter ^ ^ ^ ^ operandr MemberReference qualifier Character_ter ^ ^ member MAX_HIGH_SURROGATE_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((((i < csLast) && (j < searchLast)) && (ch >= j)) && (ch <= Character.MAX_HIGH_SURROGATE))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator <_ter ^ ^ operandl MemberReference member i_ter ^ ^ ^ ^ operandr MemberReference member csLast_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member searchLast_ter ^ ^ ^ ^ operandr MemberReference member searchLast_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator >=_ter ^ ^ operandl MemberReference member ch_ter ^ ^ ^ ^ operandr MemberReference qualifier Character_ter ^ ^ member MIN_HIGH_SURROGATE_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl MemberReference member ch_ter ^ ^ ^ ^ operandr MemberReference qualifier Character_ter ^ ^ member MAX_HIGH_SURROGATE_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((((i < csLast) && (searchLast < searchLast)) && (ch >= Character.MIN_HIGH_SURROGATE)) && (ch <= Character.MAX_HIGH_SURROGATE))){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator <_ter ^ ^ operandl MemberReference member i_ter ^ ^ ^ ^ operandr MemberReference member csLast_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member j_ter ^ ^ ^ ^ operandr MemberReference member searchLast_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl MemberReference member ch_ter ^ ^ ^ ^ operandr MemberReference qualifier Character_ter ^ ^ member MAX_HIGH_SURROGATE_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((i < csLast) && (j < searchLast)) && (ch <= Character.MAX_HIGH_SURROGATE))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator <_ter ^ ^ operandl MemberReference member i_ter ^ ^ ^ ^ operandr MemberReference member csLast_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member j_ter ^ ^ ^ ^ operandr MemberReference member searchLast_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator >=_ter ^ ^ operandl MemberReference member ch_ter ^ ^ ^ ^ operandr MemberReference qualifier Character_ter ^ ^ member MIN_HIGH_SURROGATE_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl MemberReference member ch_ter ^ ^ ^ ^ operandr MemberReference member csLast_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((((i < csLast) && (j < searchLast)) && (ch >= Character.MIN_HIGH_SURROGATE)) && (ch <= csLast))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator <_ter ^ ^ operandl MemberReference member i_ter ^ ^ ^ ^ operandr MemberReference member csLast_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member j_ter ^ ^ ^ ^ operandr MemberReference member searchLast_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator >=_ter ^ ^ operandl MemberReference member ch_ter ^ ^ ^ ^ operandr MemberReference qualifier Character_ter ^ ^ member MIN_HIGH_SURROGATE_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MemberReference member ch_ter ^ ^ ^ ^ operandr MemberReference qualifier Character_ter ^ ^ member MAX_HIGH_SURROGATE_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((((i < csLast) && (j < searchLast)) && (ch >= Character.MIN_HIGH_SURROGATE)) && (ch || Character.MAX_HIGH_SURROGATE))){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator <_ter ^ ^ operandl MemberReference member i_ter ^ ^ ^ ^ operandr MemberReference member csLast_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member j_ter ^ ^ ^ ^ operandr MemberReference member searchLast_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator >=_ter ^ ^ operandl MemberReference member ch_ter ^ ^ ^ ^ operandr MemberReference qualifier Character_ter ^ ^ member MIN_HIGH_SURROGATE_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl MemberReference member ch_ter ^ ^ ^ ^ operandr MemberReference qualifier Character_ter ^ ^ member MAX_HIGH_SURROGATE_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((((i < csLast) && (j < searchLast)) && (ch >= Character.MIN_HIGH_SURROGATE)) && (ch <= Character.MAX_HIGH_SURROGATE))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator <_ter ^ ^ operandl MemberReference member i_ter ^ ^ ^ ^ operandr MemberReference member csLast_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member ch_ter ^ ^ ^ ^ operandr MemberReference member searchLast_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator >=_ter ^ ^ operandl MemberReference member ch_ter ^ ^ ^ ^ operandr MemberReference qualifier Character_ter ^ ^ member MIN_HIGH_SURROGATE_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl MemberReference member ch_ter ^ ^ ^ ^ operandr MemberReference qualifier Character_ter ^ ^ member MAX_HIGH_SURROGATE_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((((i < csLast) && (ch < searchLast)) && (ch >= Character.MIN_HIGH_SURROGATE)) && (ch <= Character.MAX_HIGH_SURROGATE))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator <_ter ^ ^ operandl MemberReference member i_ter ^ ^ ^ ^ operandr MemberReference member csLast_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member j_ter ^ ^ ^ ^ operandr MemberReference member searchLast_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator >=_ter ^ ^ operandl MemberReference member ch_ter ^ ^ ^ ^ operandr MemberReference member csLength_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl MemberReference member ch_ter ^ ^ ^ ^ operandr MemberReference qualifier Character_ter ^ ^ member MAX_HIGH_SURROGATE_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((((i < csLast) && (j < searchLast)) && (ch >= csLength)) && (ch <= Character.MAX_HIGH_SURROGATE))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator <_ter ^ ^ operandl MemberReference member ch_ter ^ ^ ^ ^ operandr MemberReference member csLast_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member j_ter ^ ^ ^ ^ operandr MemberReference member searchLast_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator >=_ter ^ ^ operandl MemberReference member ch_ter ^ ^ ^ ^ operandr MemberReference qualifier Character_ter ^ ^ member MIN_HIGH_SURROGATE_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl MemberReference member ch_ter ^ ^ ^ ^ operandr MemberReference qualifier Character_ter ^ ^ member MAX_HIGH_SURROGATE_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((((ch < csLast) && (j < searchLast)) && (ch >= Character.MIN_HIGH_SURROGATE)) && (ch <= Character.MAX_HIGH_SURROGATE))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator <_ter ^ ^ operandl MemberReference member i_ter ^ ^ ^ ^ operandr MemberReference member csLast_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member j_ter ^ ^ ^ ^ operandr MemberReference member searchLast_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator >=_ter ^ ^ operandl MemberReference member ch_ter ^ ^ ^ ^ operandr MemberReference qualifier Character_ter ^ ^ member MIN_HIGH_SURROGATE_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl MemberReference member ch_ter ^ ^ ^ ^ operandr MemberReference member MIN_HIGH_SURROGATE_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((((i < csLast) && (j < searchLast)) && (ch >= Character.MIN_HIGH_SURROGATE)) && (ch <= MIN_HIGH_SURROGATE))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator <_ter ^ ^ operandl MemberReference member i_ter ^ ^ ^ ^ operandr MemberReference member csLast_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member j_ter ^ ^ ^ ^ operandr MemberReference member searchLast_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator >=_ter ^ ^ operandl MemberReference member ch_ter ^ ^ ^ ^ operandr MemberReference qualifier Character_ter ^ ^ member MIN_HIGH_SURROGATE_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl MemberReference member i_ter ^ ^ ^ ^ operandr MemberReference qualifier Character_ter ^ ^ member MAX_HIGH_SURROGATE_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((((i < csLast) && (j < searchLast)) && (ch >= Character.MIN_HIGH_SURROGATE)) && (i <= Character.MAX_HIGH_SURROGATE))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator <_ter ^ ^ operandl MemberReference member i_ter ^ ^ ^ ^ operandr MemberReference member csLast_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member i_ter ^ ^ ^ ^ operandr MemberReference member searchLast_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator >=_ter ^ ^ operandl MemberReference member ch_ter ^ ^ ^ ^ operandr MemberReference qualifier Character_ter ^ ^ member MIN_HIGH_SURROGATE_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl MemberReference member ch_ter ^ ^ ^ ^ operandr MemberReference qualifier Character_ter ^ ^ member MAX_HIGH_SURROGATE_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((((i < csLast) && (i < searchLast)) && (ch >= Character.MIN_HIGH_SURROGATE)) && (ch <= Character.MAX_HIGH_SURROGATE))){
IfStatement condition BinaryOperation operator <=_ter ^ ^ operandl MemberReference member ch_ter ^ ^ ^ ^ operandr MemberReference qualifier Character_ter ^ ^ member MAX_HIGH_SURROGATE_ter ^ ^ ^ ^ ^ ^ ^ 
if((ch <= Character.MAX_HIGH_SURROGATE)){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator <_ter ^ ^ operandl MemberReference member i_ter ^ ^ ^ ^ operandr MemberReference member csLast_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl MemberReference member ch_ter ^ ^ ^ ^ operandr MemberReference qualifier Character_ter ^ ^ member MAX_HIGH_SURROGATE_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((i < csLast) && (ch <= Character.MAX_HIGH_SURROGATE))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator <_ter ^ ^ operandl MemberReference member i_ter ^ ^ ^ ^ operandr MemberReference member csLast_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member j_ter ^ ^ ^ ^ operandr MemberReference member searchLast_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ch_ter ^ ^ ^ ^ operandr MemberReference qualifier Character_ter ^ ^ member MIN_HIGH_SURROGATE_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl MemberReference member ch_ter ^ ^ ^ ^ operandr MemberReference qualifier Character_ter ^ ^ member MAX_HIGH_SURROGATE_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((((i < csLast) && (j < searchLast)) && (ch == Character.MIN_HIGH_SURROGATE)) && (ch <= Character.MAX_HIGH_SURROGATE))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator <_ter ^ ^ operandl MemberReference member i_ter ^ ^ ^ ^ operandr MemberReference member csLast_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member j_ter ^ ^ ^ ^ operandr MemberReference member searchLast_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator >=_ter ^ ^ operandl MemberReference member ch_ter ^ ^ ^ ^ operandr MemberReference qualifier Character_ter ^ ^ member MIN_HIGH_SURROGATE_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl MemberReference member ch_ter ^ ^ ^ ^ operandr MemberReference member searchLength_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((((i < csLast) && (j < searchLast)) && (ch >= Character.MIN_HIGH_SURROGATE)) && (ch <= searchLength))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator <_ter ^ ^ operandl MemberReference member i_ter ^ ^ ^ ^ operandr MemberReference member csLast_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member j_ter ^ ^ ^ ^ operandr MemberReference member searchLast_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator >=_ter ^ ^ operandl MemberReference member ch_ter ^ ^ ^ ^ operandr MemberReference member MIN_HIGH_SURROGATE_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl MemberReference member ch_ter ^ ^ ^ ^ operandr MemberReference qualifier Character_ter ^ ^ member MAX_HIGH_SURROGATE_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((((i < csLast) && (j < searchLast)) && (ch >= MIN_HIGH_SURROGATE)) && (ch <= Character.MAX_HIGH_SURROGATE))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator <_ter ^ ^ operandl MemberReference member i_ter ^ ^ ^ ^ operandr MemberReference member csLast_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member j_ter ^ ^ ^ ^ operandr MemberReference member searchLast_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator >=_ter ^ ^ operandl MemberReference member ch_ter ^ ^ ^ ^ operandr MemberReference member csLast_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl MemberReference member ch_ter ^ ^ ^ ^ operandr MemberReference qualifier Character_ter ^ ^ member MAX_HIGH_SURROGATE_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((((i < csLast) && (j < searchLast)) && (ch >= csLast)) && (ch <= Character.MAX_HIGH_SURROGATE))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator <_ter ^ ^ operandl MemberReference member i_ter ^ ^ ^ ^ operandr MemberReference member csLast_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member j_ter ^ ^ ^ ^ operandr MemberReference member searchLast_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator >=_ter ^ ^ operandl MemberReference member ch_ter ^ ^ ^ ^ operandr MemberReference member searchLength_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl MemberReference member ch_ter ^ ^ ^ ^ operandr MemberReference qualifier Character_ter ^ ^ member MAX_HIGH_SURROGATE_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((((i < csLast) && (j < searchLast)) && (ch >= searchLength)) && (ch <= Character.MAX_HIGH_SURROGATE))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator <_ter ^ ^ operandl MemberReference member i_ter ^ ^ ^ ^ operandr MemberReference member csLast_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member j_ter ^ ^ ^ ^ operandr MemberReference member searchLast_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator >=_ter ^ ^ operandl MemberReference member ch_ter ^ ^ ^ ^ operandr MemberReference qualifier Character_ter ^ ^ member MIN_HIGH_SURROGATE_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl MemberReference member ch_ter ^ ^ ^ ^ operandr MemberReference qualifier Character_ter ^ ^ member MAX_HIGH_SURROGATE_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((((i < csLast) && (j < searchLast)) && (ch >= Character.MIN_HIGH_SURROGATE)) && (ch && Character.MAX_HIGH_SURROGATE))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator <_ter ^ ^ operandl MemberReference member i_ter ^ ^ ^ ^ operandr MemberReference member csLast_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member j_ter ^ ^ ^ ^ operandr MemberReference member searchLast_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator >=_ter ^ ^ operandl MemberReference member ch_ter ^ ^ ^ ^ operandr MemberReference qualifier Character_ter ^ ^ member MIN_HIGH_SURROGATE_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ch_ter ^ ^ ^ ^ operandr MemberReference qualifier Character_ter ^ ^ member MAX_HIGH_SURROGATE_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((((i < csLast) && (j < searchLast)) && (ch >= Character.MIN_HIGH_SURROGATE)) && (ch == Character.MAX_HIGH_SURROGATE))){
IfStatement condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member i_ter ^ ^ ^ ^ operandr MemberReference member csLast_ter ^ ^ ^ ^ ^ ^ ^ 
if((i < csLast)){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator <_ter ^ ^ operandl MemberReference member i_ter ^ ^ ^ ^ operandr MemberReference member csLast_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member j_ter ^ ^ ^ ^ operandr MemberReference member searchLast_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator >=_ter ^ ^ operandl MemberReference member ch_ter ^ ^ ^ ^ operandr MemberReference qualifier Character_ter ^ ^ member MAX_HIGH_SURROGATE_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl MemberReference member ch_ter ^ ^ ^ ^ operandr MemberReference qualifier Character_ter ^ ^ member MAX_HIGH_SURROGATE_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((((i < csLast) && (j < searchLast)) && (ch >= Character.MAX_HIGH_SURROGATE)) && (ch <= Character.MAX_HIGH_SURROGATE))){
condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference selectors ArraySelector index MemberReference member j_ter ^ ^ ^ ^ ^ ^ member searchLen_ter ^ ^ ^ ^ operandr MemberReference member ch_ter ^ ^ ^ ^ ^ ^ 
if((searchLen[j] == ch)){
condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference selectors ArraySelector index MemberReference member j_ter ^ ^ ^ ^ ^ ^ member i_ter ^ ^ ^ ^ operandr MemberReference member ch_ter ^ ^ ^ ^ ^ ^ 
if((i[j] == ch)){
condition BinaryOperation operator >=_ter ^ ^ operandl MemberReference selectors ArraySelector index MemberReference member j_ter ^ ^ ^ ^ ^ ^ member searchChars_ter ^ ^ ^ ^ operandr MemberReference member ch_ter ^ ^ ^ ^ ^ ^ 
if((searchChars[j] >= ch)){
condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference selectors ArraySelector index MemberReference member j_ter ^ ^ ^ ^ ^ ^ member ch_ter ^ ^ ^ ^ operandr MemberReference member ch_ter ^ ^ ^ ^ ^ ^ 
if((ch[j] == ch)){
condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member j_ter ^ ^ ^ ^ operandr MemberReference member ch_ter ^ ^ ^ ^ ^ ^ 
if((j == ch)){
condition BinaryOperation operator <=_ter ^ ^ operandl MemberReference selectors ArraySelector index MemberReference member j_ter ^ ^ ^ ^ ^ ^ member searchChars_ter ^ ^ ^ ^ operandr MemberReference member ch_ter ^ ^ ^ ^ ^ ^ 
if((searchChars[j] <= ch)){
condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference selectors ArraySelector index MemberReference member j_ter ^ ^ ^ ^ ^ ^ member csLen_ter ^ ^ ^ ^ operandr MemberReference member ch_ter ^ ^ ^ ^ ^ ^ 
if((csLen[j] == ch)){
condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference selectors ArraySelector index MemberReference member j_ter ^ ^ ^ ^ ^ ^ member searchChars_ter ^ ^ ^ ^ operandr MemberReference member ch_ter ^ ^ ^ ^ ^ ^ 
if((searchChars[j] == ch)){
condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference selectors ArraySelector index MemberReference member j_ter ^ ^ ^ ^ ^ ^ member j_ter ^ ^ ^ ^ operandr MemberReference member ch_ter ^ ^ ^ ^ ^ ^ 
if((j[j] == ch)){
condition BinaryOperation operator >_ter ^ ^ operandl MemberReference selectors ArraySelector index MemberReference member j_ter ^ ^ ^ ^ ^ ^ member searchChars_ter ^ ^ ^ ^ operandr MemberReference member ch_ter ^ ^ ^ ^ ^ ^ 
if((searchChars[j] > ch)){
IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference selectors ArraySelector index MemberReference member j_ter ^ ^ ^ ^ ^ ^ member searchChars_ter ^ ^ ^ ^ operandr MemberReference member ch_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference selectors ArraySelector index MemberReference member j_ter ^ ^ ^ ^ ^ ^ member searchChars_ter ^ ^ ^ ^ operandr MemberReference member ch_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((searchChars[j] == ch) || (searchChars[j] == ch))){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ch_ter ^ ^ ^ ^ operandr MemberReference member ch_ter ^ ^ ^ ^ ^ ^ 
if((ch == ch)){
condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference selectors ArraySelector index MemberReference member j_ter ^ ^ ^ ^ ^ ^ member searchChars_ter ^ ^ ^ ^ operandr MemberReference selectors ArraySelector index MemberReference member j_ter ^ ^ ^ ^ ^ ^ member searchLen_ter ^ ^ ^ ^ ^ ^ 
if((searchChars[j] == searchLen[j])){
condition BinaryOperation operator <_ter ^ ^ operandl MemberReference selectors ArraySelector index MemberReference member j_ter ^ ^ ^ ^ ^ ^ member searchChars_ter ^ ^ ^ ^ operandr MemberReference member ch_ter ^ ^ ^ ^ ^ ^ 
if((searchChars[j] < ch)){
condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference selectors ArraySelector index MemberReference member j_ter ^ ^ ^ ^ ^ ^ member searchChars_ter ^ ^ ^ ^ operandr MemberReference selectors ArraySelector index MemberReference member j_ter ^ ^ ^ ^ ^ ^ member i_ter ^ ^ ^ ^ ^ ^ 
if((searchChars[j] == i[j])){
condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member i_ter ^ ^ ^ ^ operandr MemberReference member ch_ter ^ ^ ^ ^ ^ ^ 
if((i == ch)){
condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference selectors ArraySelector index MemberReference member j_ter ^ ^ ^ ^ ^ ^ member cs_ter ^ ^ ^ ^ operandr MemberReference member ch_ter ^ ^ ^ ^ ^ ^ 
if((cs[j] == ch)){
condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member searchLen_ter ^ ^ ^ ^ operandr MemberReference member ch_ter ^ ^ ^ ^ ^ ^ 
if((searchLen == ch)){
condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference selectors ArraySelector index MemberReference member j_ter ^ ^ ^ ^ ^ ^ member searchChars_ter ^ ^ ^ ^ operandr MemberReference selectors ArraySelector index MemberReference member j_ter ^ ^ ^ ^ ^ ^ member ch_ter ^ ^ ^ ^ ^ ^ 
if((searchChars[j] == ch[j])){
condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference selectors ArraySelector index MemberReference member j_ter ^ ^ ^ ^ ^ ^ member INDEX_NOT_FOUND_ter ^ ^ ^ ^ operandr MemberReference member ch_ter ^ ^ ^ ^ ^ ^ 
if((INDEX_NOT_FOUND[j] == ch)){
condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference selectors ArraySelector index MemberReference member j_ter ^ ^ ^ ^ ^ ^ member searchChars_ter ^ ^ ^ ^ operandr MemberReference member j_ter ^ ^ ^ ^ ^ ^ 
if((searchChars[j] == j)){
condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference selectors ArraySelector index MemberReference member j_ter ^ ^ ^ ^ ^ ^ member searchChars_ter ^ ^ ^ ^ operandr MemberReference selectors ArraySelector index MemberReference member j_ter ^ ^ ^ ^ ^ ^ member j_ter ^ ^ ^ ^ ^ ^ 
if((searchChars[j] == j[j])){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference selectors ArraySelector index MemberReference member j_ter ^ ^ ^ ^ ^ ^ member searchChars_ter ^ ^ ^ ^ operandr MemberReference member ch_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference selectors ArraySelector index MemberReference member j_ter ^ ^ ^ ^ ^ ^ member searchChars_ter ^ ^ ^ ^ operandr MemberReference member ch_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((searchChars[j] == ch) && (searchChars[j] == ch))){

condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference selectors ArraySelector index MemberReference member j_ter ^ ^ ^ ^ ^ ^ member searchChars_ter ^ ^ ^ ^ operandr MemberReference member ch_ter ^ ^ ^ ^ ^ ^ 
if((searchChars[j] != ch)){
IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference selectors ArraySelector index MemberReference member j_ter ^ ^ ^ ^ ^ ^ member searchChars_ter ^ ^ ^ ^ operandr MemberReference member ch_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier ArrayUtils_ter ^ ^ arguments MemberReference member searchChars_ter ^ ^ ^ ^ member isEmpty_ter ^ ^ ^ ^ ^ ^ ^ 
if(((searchChars[j] == ch) || ArrayUtils.isEmpty(searchChars))){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference selectors ArraySelector index MemberReference member j_ter ^ ^ ^ ^ ^ ^ member searchChars_ter ^ ^ ^ ^ operandr MemberReference member ch_ter ^ ^ ^ ^ ^ ^ operandr MemberReference selectors ArraySelector index MemberReference member j_ter ^ ^ ^ ^ ^ ^ member searchLen_ter ^ ^ ^ ^ ^ ^ ^ 
if(((searchChars[j] == ch) || searchLen[j])){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MemberReference selectors ArraySelector index MemberReference member j_ter ^ ^ ^ ^ ^ ^ member i_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference selectors ArraySelector index MemberReference member j_ter ^ ^ ^ ^ ^ ^ member searchChars_ter ^ ^ ^ ^ operandr MemberReference member ch_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((i[j] || (searchChars[j] == ch))){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ch_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference selectors ArraySelector index MemberReference member j_ter ^ ^ ^ ^ ^ ^ member searchChars_ter ^ ^ ^ ^ operandr MemberReference member ch_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ch == null) || (searchChars[j] == ch))){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference selectors ArraySelector index MemberReference member j_ter ^ ^ ^ ^ ^ ^ member searchChars_ter ^ ^ ^ ^ operandr MemberReference member ch_ter ^ ^ ^ ^ ^ ^ operandr MemberReference selectors ArraySelector index MemberReference member j_ter ^ ^ ^ ^ ^ ^ member i_ter ^ ^ ^ ^ ^ ^ ^ 
if(((searchChars[j] == ch) || i[j])){

ReturnStatement expression MemberReference member i_ter ^ ^ ^ ^ ^ 
if (true) { return i; }

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ch_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference selectors ArraySelector index MemberReference member j_ter ^ ^ ^ ^ ^ ^ member searchChars_ter ^ ^ ^ ^ operandr MemberReference member ch_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ch != null) || (searchChars[j] == ch))){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference selectors ArraySelector index MemberReference member j_ter ^ ^ ^ ^ ^ ^ member searchChars_ter ^ ^ ^ ^ operandr MemberReference selectors ArraySelector index MemberReference member j_ter ^ ^ ^ ^ ^ ^ member csLen_ter ^ ^ ^ ^ ^ ^ 
if((searchChars[j] == csLen[j])){
condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member csLen_ter ^ ^ ^ ^ operandr MemberReference member ch_ter ^ ^ ^ ^ ^ ^ 
if((csLen == ch)){
IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference selectors ArraySelector index MemberReference member j_ter ^ ^ ^ ^ ^ ^ member searchChars_ter ^ ^ ^ ^ operandr MemberReference member ch_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member j_ter ^ ^ ^ ^ operandr MemberReference member searchLen_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((searchChars[j] == ch) || (j < searchLen))){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference selectors ArraySelector index MemberReference member j_ter ^ ^ ^ ^ ^ ^ member searchChars_ter ^ ^ ^ ^ operandr MemberReference member i_ter ^ ^ ^ ^ ^ ^ 
if((searchChars[j] == i)){
condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference selectors ArraySelector index MemberReference member j_ter ^ ^ ^ ^ ^ ^ member searchChars_ter ^ ^ ^ ^ operandr MemberReference member searchLen_ter ^ ^ ^ ^ ^ ^ 
if((searchChars[j] == searchLen)){
IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MemberReference selectors ArraySelector index MemberReference member j_ter ^ ^ ^ ^ ^ ^ member searchLen_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference selectors ArraySelector index MemberReference member j_ter ^ ^ ^ ^ ^ ^ member searchChars_ter ^ ^ ^ ^ operandr MemberReference member ch_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((searchLen[j] || (searchChars[j] == ch))){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr MemberReference member ch_ter ^ ^ ^ ^ ^ ^ 
if(( == ch)){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference selectors ArraySelector index MemberReference member j_ter ^ ^ ^ ^ ^ ^ member searchChars_ter ^ ^ ^ ^ operandr MemberReference member ch_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member i_ter ^ ^ ^ ^ operandr MemberReference member csLen_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((searchChars[j] == ch) || (i < csLen))){

IfStatement condition MemberReference selectors ArraySelector index MemberReference member j_ter ^ ^ ^ ^ ^ ^ member i_ter ^ ^ ^ ^ ^ 
if(i[j]){

IfStatement condition MemberReference selectors ArraySelector index MemberReference member j_ter ^ ^ ^ ^ ^ ^ member searchLen_ter ^ ^ ^ ^ ^ 
if(searchLen[j]){

control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name j_ter ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member j_ter ^ ^ ^ ^ operandr MemberReference member searchLen_ter ^ ^ ^ ^ ^ ^ update MemberReference postfix_operators ++_ter ^ ^ member j_ter ^ ^ ^ ^ ^ ^ 
for(int j = 0;(j < searchLen);j++) {

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member i_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference selectors ArraySelector index MemberReference member j_ter ^ ^ ^ ^ ^ ^ member searchChars_ter ^ ^ ^ ^ operandr MemberReference member ch_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((i != null) || (searchChars[j] == ch))){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member i_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference selectors ArraySelector index MemberReference member j_ter ^ ^ ^ ^ ^ ^ member searchChars_ter ^ ^ ^ ^ operandr MemberReference member ch_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((i == null) || (searchChars[j] == ch))){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference selectors ArraySelector index MemberReference member j_ter ^ ^ ^ ^ ^ ^ member searchChars_ter ^ ^ ^ ^ operandr MemberReference member ch_ter ^ ^ ^ ^ ^ ^ operandr MemberReference selectors ArraySelector index MemberReference member j_ter ^ ^ ^ ^ ^ ^ member ch_ter ^ ^ ^ ^ ^ ^ ^ 
if(((searchChars[j] == ch) || ch[j])){

BreakStatement_ter ^ 
break;

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MemberReference selectors ArraySelector index MemberReference member j_ter ^ ^ ^ ^ ^ ^ member ch_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference selectors ArraySelector index MemberReference member j_ter ^ ^ ^ ^ ^ ^ member searchChars_ter ^ ^ ^ ^ operandr MemberReference member ch_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((ch[j] || (searchChars[j] == ch))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ch_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference selectors ArraySelector index MemberReference member j_ter ^ ^ ^ ^ ^ ^ member searchChars_ter ^ ^ ^ ^ operandr MemberReference member ch_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ch == null) && (searchChars[j] == ch))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ch_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference selectors ArraySelector index MemberReference member j_ter ^ ^ ^ ^ ^ ^ member searchChars_ter ^ ^ ^ ^ operandr MemberReference member ch_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ch != null) && (searchChars[j] == ch))){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference selectors ArraySelector index MemberReference member j_ter ^ ^ ^ ^ ^ ^ member searchChars_ter ^ ^ ^ ^ operandr MemberReference member ch_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ch_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((searchChars[j] == ch) || (ch == 0))){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member cs_ter ^ ^ ^ ^ operandr MemberReference member ch_ter ^ ^ ^ ^ ^ ^ 
if((cs == ch)){
condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference selectors ArraySelector index MemberReference member j_ter ^ ^ ^ ^ ^ ^ member searchChars_ter ^ ^ ^ ^ operandr MemberReference selectors ArraySelector index MemberReference member j_ter ^ ^ ^ ^ ^ ^ member INDEX_NOT_FOUND_ter ^ ^ ^ ^ ^ ^ 
if((searchChars[j] == INDEX_NOT_FOUND[j])){
IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member j_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((j != null)){
continue;
}

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ch_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((ch != null)){
continue;
}

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member searchLen_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference selectors ArraySelector index MemberReference member j_ter ^ ^ ^ ^ ^ ^ member searchChars_ter ^ ^ ^ ^ operandr MemberReference member ch_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((searchLen != null) || (searchChars[j] == ch))){

condition BinaryOperation operator >=_ter ^ ^ operandl MethodInvocation qualifier searchChars_ter ^ ^ arguments MemberReference member ch_ter ^ ^ ^ ^ member indexOf_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ 
if((searchChars.indexOf(ch) >= 0)){
condition BinaryOperation operator <=_ter ^ ^ operandl MethodInvocation qualifier searchChars_ter ^ ^ arguments MemberReference member ch_ter ^ ^ ^ ^ member indexOf_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ 
if((searchChars.indexOf(ch) <= 0)){
condition BinaryOperation operator <_ter ^ ^ operandl MethodInvocation qualifier searchChars_ter ^ ^ arguments MemberReference member ch_ter ^ ^ ^ ^ member indexOf_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ 
if((searchChars.indexOf(ch) < 0)){
condition BinaryOperation operator >_ter ^ ^ operandl MethodInvocation qualifier searchChars_ter ^ ^ arguments MemberReference member ch_ter ^ ^ ^ ^ member indexOf_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ 
if((searchChars.indexOf(ch) > 0)){
condition BinaryOperation operator <_ter ^ ^ operandl MethodInvocation qualifier str_ter ^ ^ arguments MemberReference member ch_ter ^ ^ ^ ^ member indexOf_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ 
if((str.indexOf(ch) < 0)){
condition BinaryOperation operator <_ter ^ ^ operandl MethodInvocation qualifier searchChars_ter ^ ^ arguments MemberReference member ch_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ 
if((searchChars.charAt(ch) < 0)){
condition BinaryOperation operator <_ter ^ ^ operandl MethodInvocation qualifier i_ter ^ ^ arguments MemberReference member ch_ter ^ ^ ^ ^ member indexOf_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ 
if((i.indexOf(ch) < 0)){
condition BinaryOperation operator <_ter ^ ^ operandl MethodInvocation qualifier searchChars_ter ^ ^ arguments MemberReference member i_ter ^ ^ ^ ^ member indexOf_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ 
if((searchChars.indexOf(i) < 0)){
condition BinaryOperation operator <_ter ^ ^ operandl MethodInvocation qualifier ch_ter ^ ^ arguments MemberReference member ch_ter ^ ^ ^ ^ member indexOf_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ 
if((ch.indexOf(ch) < 0)){
condition BinaryOperation operator <_ter ^ ^ operandl MethodInvocation qualifier searchChars_ter ^ ^ arguments MemberReference member ch_ter ^ ^ ^ ^ member isEmpty_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ 
if((searchChars.isEmpty(ch) < 0)){
condition BinaryOperation operator <_ter ^ ^ operandl MethodInvocation qualifier searchChars_ter ^ ^ arguments MemberReference member ch_ter ^ ^ ^ ^ member length_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ 
if((searchChars.length(ch) < 0)){
IfStatement condition MethodInvocation qualifier searchChars_ter ^ ^ arguments MemberReference member ch_ter ^ ^ ^ ^ member indexOf_ter ^ ^ ^ ^ ^ 
if(searchChars.indexOf(ch)){

condition BinaryOperation operator <_ter ^ ^ operandl MethodInvocation qualifier strLen_ter ^ ^ arguments MemberReference member ch_ter ^ ^ ^ ^ member indexOf_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ 
if((strLen.indexOf(ch) < 0)){
condition BinaryOperation operator <_ter ^ ^ operandl MethodInvocation qualifier searchChars_ter ^ ^ arguments MemberReference member ch_ter ^ ^ ^ ^ member indexOfAnyBut_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ 
if((searchChars.indexOfAnyBut(ch) < 0)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier searchChars_ter ^ ^ arguments MemberReference member ch_ter ^ ^ ^ ^ member indexOf_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ 
if((searchChars.indexOf(ch) == 0)){
condition BinaryOperation operator <_ter ^ ^ operandl MethodInvocation qualifier searchChars_ter ^ ^ arguments MemberReference member searchChars_ter ^ ^ ^ ^ member indexOf_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ 
if((searchChars.indexOf(searchChars) < 0)){
condition BinaryOperation operator <_ter ^ ^ operandl MethodInvocation qualifier loc3 ^ ^ arguments MemberReference member ch_ter ^ ^ ^ ^ member indexOf_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ 
if((.indexOf(ch) < 0)){

condition BinaryOperation operator <_ter ^ ^ operandl MethodInvocation qualifier searchChars_ter ^ ^ arguments MemberReference member loc3 ^ ^ ^ ^ member indexOf_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ 
if((searchChars.indexOf() < 0)){
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier searchChars_ter ^ ^ arguments MemberReference member ch_ter ^ ^ ^ ^ member indexOf_ter ^ ^ ^ ^ ^ 
if(!searchChars.indexOf(ch)){

condition BinaryOperation operator <_ter ^ ^ operandl MethodInvocation qualifier searchChars_ter ^ ^ arguments MemberReference member str_ter ^ ^ ^ ^ member indexOf_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ 
if((searchChars.indexOf(str) < 0)){
condition BinaryOperation operator <_ter ^ ^ operandl MethodInvocation qualifier searchChars_ter ^ ^ arguments MemberReference member ch_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ 
if((searchChars.get(ch) < 0)){
IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ch_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((ch != null)){

IfStatement condition MethodInvocation qualifier searchChars_ter ^ ^ arguments MemberReference member ch_ter ^ ^ ^ MemberReference member ch_ter ^ ^ ^ ^ member indexOf_ter ^ ^ ^ ^ ^ 
if(searchChars.indexOf(ch, ch)){

IfStatement condition MemberReference member ch_ter ^ ^ ^ ^ ^ 
if(ch){

condition BinaryOperation operator <_ter ^ ^ operandl MethodInvocation qualifier searchChars_ter ^ ^ arguments MemberReference member ch_ter ^ ^ ^ ^ member indexOf_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ 
if((searchChars.indexOf(ch) < 1)){
condition BinaryOperation operator <_ter ^ ^ operandl MethodInvocation qualifier par2 ^ ^ arguments MemberReference member ch_ter ^ ^ ^ ^ member indexOf_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ 
if((.indexOf(ch) < 0)){

condition BinaryOperation operator <_ter ^ ^ operandl MethodInvocation qualifier searchChars_ter ^ ^ arguments MemberReference member strLen_ter ^ ^ ^ ^ member indexOf_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ 
if((searchChars.indexOf(strLen) < 0)){
condition BinaryOperation operator <_ter ^ ^ operandl MethodInvocation qualifier searchChars_ter ^ ^ arguments MemberReference member ch_ter ^ ^ ^ ^ member getName_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ 
if((searchChars.getName(ch) < 0)){
IfStatement condition MethodInvocation qualifier searchChars_ter ^ ^ arguments MemberReference member i_ter ^ ^ ^ ^ member indexOf_ter ^ ^ ^ ^ ^ 
if(searchChars.indexOf(i)){

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ch_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference member i_ter ^ ^ ^ ^ ^ 
if((ch == null)){
return i;}
IfStatement condition MethodInvocation qualifier searchChars_ter ^ ^ arguments MemberReference member ch_ter ^ ^ ^ MemberReference member searchChars_ter ^ ^ ^ ^ member indexOf_ter ^ ^ ^ ^ ^ 
if(searchChars.indexOf(ch, searchChars)){

condition BinaryOperation operator <_ter ^ ^ operandl MethodInvocation qualifier searchChars_ter ^ ^ arguments MemberReference member ch_ter ^ ^ ^ ^ member toString_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ 
if((searchChars.toString(ch) < 0)){
condition BinaryOperation operator <_ter ^ ^ operandl MethodInvocation qualifier searchChars_ter ^ ^ arguments MemberReference member INDEX_NOT_FOUND_ter ^ ^ ^ ^ member indexOf_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ 
if((searchChars.indexOf(INDEX_NOT_FOUND) < 0)){
condition BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier searchChars_ter ^ ^ arguments MemberReference member ch_ter ^ ^ ^ ^ member indexOf_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ 
if((searchChars.indexOf(ch) != 0)){
condition BinaryOperation operator <_ter ^ ^ operandl MethodInvocation qualifier searchChars_ter ^ ^ arguments MemberReference member ch_ter ^ ^ ^ ^ member indexOf_ter ^ ^ ^ ^ operandr Literal value 2_ter ^ ^ ^ ^ ^ ^ 
if((searchChars.indexOf(ch) < 2)){
condition BinaryOperation operator -_ter ^ ^ operandl MethodInvocation qualifier searchChars_ter ^ ^ arguments MemberReference member ch_ter ^ ^ ^ ^ member indexOf_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ 
if((searchChars.indexOf(ch) - 0)){
IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ch_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((ch == null)){

IfStatement condition MethodInvocation qualifier searchChars_ter ^ ^ arguments MemberReference member searchChars_ter ^ ^ ^ ^ member indexOf_ter ^ ^ ^ ^ ^ 
if(searchChars.indexOf(searchChars)){

IfStatement condition MethodInvocation qualifier searchChars_ter ^ ^ arguments MemberReference member ch_ter ^ ^ ^ MemberReference member i_ter ^ ^ ^ ^ member indexOf_ter ^ ^ ^ ^ ^ 
if(searchChars.indexOf(ch, i)){

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ch_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference member INDEX_NOT_FOUND_ter ^ ^ ^ ^ ^ 
if((ch == null)){
return INDEX_NOT_FOUND;}
IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ch_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ 
if((ch != 0)){

IfStatement condition MethodInvocation qualifier searchChars_ter ^ ^ arguments MemberReference member ch_ter ^ ^ ^ MemberReference member str_ter ^ ^ ^ ^ member indexOf_ter ^ ^ ^ ^ ^ 
if(searchChars.indexOf(ch, str)){

StatementExpression expression MemberReference postfix_operators ++_ter ^ ^ member ch_ter ^ ^ ^ ^ ^ 
ch++;

condition BinaryOperation operator <_ter ^ ^ operandl MethodInvocation qualifier searchChars_ter ^ ^ arguments MemberReference member par2 ^ ^ ^ ^ member indexOf_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ 
if((searchChars.indexOf() < 0)){

ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ 
return true;
ContinueStatement_ter ^ 
continue;

ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ 
if (true) { return true; }

BreakStatement_ter ^ 
break;

BreakStatement_ter ^ 
break;

ReturnStatement_ter ^ 
return;

ReturnStatement expression MemberReference member i_ter ^ ^ ^ ^ ^ 
return i;
IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member cs_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((cs == null)){

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member searchChars_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((searchChars == null)){

ReturnStatement expression MemberReference member searchLen_ter ^ ^ ^ ^ ^ 
return searchLen;
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
return "null";
ReturnStatement expression BinaryOperation operator ==_ter ^ ^ operandl MemberReference member searchChars_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
return (searchChars == null);
ReturnStatement expression MemberReference member j_ter ^ ^ ^ ^ ^ 
return j;
IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference selectors ArraySelector index MemberReference member j_ter ^ ^ ^ ^ ^ ^ member searchChars_ter ^ ^ ^ ^ operandr MemberReference member ch_ter ^ ^ ^ ^ ^ ^ ^ 
if((searchChars[j] == ch)){

ReturnStatement expression MemberReference member ch_ter ^ ^ ^ ^ ^ 
return ch;
ReturnStatement expression BinaryOperation operator ==_ter ^ ^ operandl MemberReference member cs_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
return (cs == null);
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
return null;
ReturnStatement expression MemberReference member csLen_ter ^ ^ ^ ^ ^ 
return csLen;
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if (true) { return false; }

ContinueStatement_ter ^ 
continue;

ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
return false;
StatementExpression expression MemberReference postfix_operators ++_ter ^ ^ member j_ter ^ ^ ^ ^ ^ 
j++;

control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name j_ter ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member j_ter ^ ^ ^ ^ operandr MemberReference member searchLen_ter ^ ^ ^ ^ ^ ^ update MemberReference postfix_operators ++_ter ^ ^ member j_ter ^ ^ ^ ^ ^ ^ 
for(int j = 0;(j < searchLen);j++) {

ReturnStatement expression Literal prefix_operators -_ter ^ ^ value 1_ter ^ ^ ^ ^ ^ 
return -1;
Statement_ter ^ 
1 Statement_ter
ReturnStatement_ter ^ 
if (true) { return;
 }

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member cs_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member searchChars_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((cs == null) || (searchChars == null))){

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member searchLen_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ 
if((searchLen == null)){
return true;}
control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name i_ter ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member i_ter ^ ^ ^ ^ operandr MemberReference member csLen_ter ^ ^ ^ ^ ^ ^ update MemberReference postfix_operators ++_ter ^ ^ member i_ter ^ ^ ^ ^ ^ ^ 
for(int i = 0;(i < csLen);i++) {

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member searchLen_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((searchLen == null)){

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member searchLen_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((searchLen != null)){

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ch_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((ch == null)){

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member i_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((i == null)){

StatementExpression expression Assignment expressionl MemberReference member ch_ter ^ ^ ^ ^ value Literal value false_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
ch = false;

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ch_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((ch != null)){

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member i_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((i != null)){

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member i_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ 
if((i == null)){
return true;}
IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ch_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ 
if((ch == null)){
return true;}
stderr: 