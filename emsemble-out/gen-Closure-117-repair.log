stdout: condition MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ 
if(n.hasChildren()){
condition MethodInvocation qualifier n_ter ^ ^ member isFromExterns_ter ^ ^ ^ ^ 
if(n.isFromExterns()){
condition MethodInvocation qualifier n_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ 
if(n.hasOneChild()){
condition MethodInvocation qualifier n_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ 
if(n.hasMoreThanOneChild()){
condition MethodInvocation qualifier n_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ 
if(n.isQualifiedName()){
condition MethodInvocation qualifier n_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ 
if(n.isUnscopedQualifiedName()){
condition MethodInvocation qualifier n_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ 
if(n.isVarArgs()){
condition MethodInvocation qualifier n_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ 
if(n.isOptionalArg()){
condition MethodInvocation qualifier n_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ 
if(n.isSyntheticBlock()){
condition MethodInvocation qualifier n_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ 
if(n.wasEmptyNode()){
condition MethodInvocation qualifier n_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ 
if(n.isOnlyModifiesThisCall()){
condition MethodInvocation qualifier n_ter ^ ^ member isOnlyModifiesArgumentsCall_ter ^ ^ ^ ^ 
if(n.isOnlyModifiesArgumentsCall()){
condition MethodInvocation qualifier n_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ 
if(n.isNoSideEffectsCall()){
condition MethodInvocation qualifier n_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ 
if(n.isLocalResultCall()){
condition MethodInvocation qualifier n_ter ^ ^ member mayMutateArguments_ter ^ ^ ^ ^ 
if(n.mayMutateArguments()){
condition MethodInvocation qualifier n_ter ^ ^ member mayMutateGlobalStateOrThrow_ter ^ ^ ^ ^ 
if(n.mayMutateGlobalStateOrThrow()){
condition MethodInvocation qualifier n_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ 
if(n.isQuotedString()){
condition MethodInvocation qualifier n_ter ^ ^ member isAdd_ter ^ ^ ^ ^ 
if(n.isAdd()){
condition MethodInvocation qualifier n_ter ^ ^ member isAnd_ter ^ ^ ^ ^ 
if(n.isAnd()){
condition MethodInvocation qualifier n_ter ^ ^ member isArrayLit_ter ^ ^ ^ ^ 
if(n.isArrayLit()){
condition MethodInvocation qualifier n_ter ^ ^ member isAssign_ter ^ ^ ^ ^ 
if(n.isAssign()){
condition MethodInvocation qualifier n_ter ^ ^ member isAssignAdd_ter ^ ^ ^ ^ 
if(n.isAssignAdd()){
condition MethodInvocation qualifier n_ter ^ ^ member isBlock_ter ^ ^ ^ ^ 
if(n.isBlock()){
condition MethodInvocation qualifier n_ter ^ ^ member isBreak_ter ^ ^ ^ ^ 
if(n.isBreak()){
condition MethodInvocation qualifier n_ter ^ ^ member isCall_ter ^ ^ ^ ^ 
if(n.isCall()){
condition MethodInvocation qualifier n_ter ^ ^ member isCase_ter ^ ^ ^ ^ 
if(n.isCase()){
condition MethodInvocation qualifier n_ter ^ ^ member isCast_ter ^ ^ ^ ^ 
if(n.isCast()){
condition MethodInvocation qualifier n_ter ^ ^ member isCatch_ter ^ ^ ^ ^ 
if(n.isCatch()){
condition MethodInvocation qualifier n_ter ^ ^ member isComma_ter ^ ^ ^ ^ 
if(n.isComma()){
condition MethodInvocation qualifier n_ter ^ ^ member isContinue_ter ^ ^ ^ ^ 
if(n.isContinue()){
condition MethodInvocation qualifier n_ter ^ ^ member isDebugger_ter ^ ^ ^ ^ 
if(n.isDebugger()){
condition MethodInvocation qualifier n_ter ^ ^ member isDec_ter ^ ^ ^ ^ 
if(n.isDec()){
condition MethodInvocation qualifier n_ter ^ ^ member isDefaultCase_ter ^ ^ ^ ^ 
if(n.isDefaultCase()){
condition MethodInvocation qualifier n_ter ^ ^ member isDelProp_ter ^ ^ ^ ^ 
if(n.isDelProp()){
condition MethodInvocation qualifier n_ter ^ ^ member isDo_ter ^ ^ ^ ^ 
if(n.isDo()){
condition MethodInvocation qualifier n_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ 
if(n.isEmpty()){
condition MethodInvocation qualifier n_ter ^ ^ member isExprResult_ter ^ ^ ^ ^ 
if(n.isExprResult()){
condition MethodInvocation qualifier n_ter ^ ^ member isFalse_ter ^ ^ ^ ^ 
if(n.isFalse()){
condition MethodInvocation qualifier n_ter ^ ^ member isFor_ter ^ ^ ^ ^ 
if(n.isFor()){
condition MethodInvocation qualifier n_ter ^ ^ member isFunction_ter ^ ^ ^ ^ 
if(n.isFunction()){
condition MethodInvocation qualifier n_ter ^ ^ member isGetterDef_ter ^ ^ ^ ^ 
if(n.isGetterDef()){
condition MethodInvocation qualifier n_ter ^ ^ member isGetElem_ter ^ ^ ^ ^ 
if(n.isGetElem()){
condition MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ 
if(n.isGetProp()){
condition MethodInvocation qualifier n_ter ^ ^ member isHook_ter ^ ^ ^ ^ 
if(n.isHook()){
condition MethodInvocation qualifier n_ter ^ ^ member isIf_ter ^ ^ ^ ^ 
if(n.isIf()){
condition MethodInvocation qualifier n_ter ^ ^ member isIn_ter ^ ^ ^ ^ 
if(n.isIn()){
condition MethodInvocation qualifier n_ter ^ ^ member isInc_ter ^ ^ ^ ^ 
if(n.isInc()){
condition MethodInvocation qualifier n_ter ^ ^ member isInstanceOf_ter ^ ^ ^ ^ 
if(n.isInstanceOf()){
condition MethodInvocation qualifier n_ter ^ ^ member isLabel_ter ^ ^ ^ ^ 
if(n.isLabel()){
condition MethodInvocation qualifier n_ter ^ ^ member isLabelName_ter ^ ^ ^ ^ 
if(n.isLabelName()){
condition MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ 
if(n.isName()){
condition MethodInvocation qualifier n_ter ^ ^ member isNE_ter ^ ^ ^ ^ 
if(n.isNE()){
condition MethodInvocation qualifier n_ter ^ ^ member isNew_ter ^ ^ ^ ^ 
if(n.isNew()){
condition MethodInvocation qualifier n_ter ^ ^ member isNot_ter ^ ^ ^ ^ 
if(n.isNot()){
condition MethodInvocation qualifier n_ter ^ ^ member isNull_ter ^ ^ ^ ^ 
if(n.isNull()){
condition MethodInvocation qualifier n_ter ^ ^ member isNumber_ter ^ ^ ^ ^ 
if(n.isNumber()){
condition MethodInvocation qualifier n_ter ^ ^ member isObjectLit_ter ^ ^ ^ ^ 
if(n.isObjectLit()){
condition MethodInvocation qualifier n_ter ^ ^ member isOr_ter ^ ^ ^ ^ 
if(n.isOr()){
condition MethodInvocation qualifier n_ter ^ ^ member isParamList_ter ^ ^ ^ ^ 
if(n.isParamList()){
condition MethodInvocation qualifier n_ter ^ ^ member isRegExp_ter ^ ^ ^ ^ 
if(n.isRegExp()){
condition MethodInvocation qualifier n_ter ^ ^ member isReturn_ter ^ ^ ^ ^ 
if(n.isReturn()){
condition MethodInvocation qualifier n_ter ^ ^ member isScript_ter ^ ^ ^ ^ 
if(n.isScript()){
condition MethodInvocation qualifier n_ter ^ ^ member isSetterDef_ter ^ ^ ^ ^ 
if(n.isSetterDef()){
condition MethodInvocation qualifier n_ter ^ ^ member isString_ter ^ ^ ^ ^ 
if(n.isString()){
condition MethodInvocation qualifier n_ter ^ ^ member isStringKey_ter ^ ^ ^ ^ 
if(n.isStringKey()){
condition MethodInvocation qualifier n_ter ^ ^ member isSwitch_ter ^ ^ ^ ^ 
if(n.isSwitch()){
condition MethodInvocation qualifier n_ter ^ ^ member isThis_ter ^ ^ ^ ^ 
if(n.isThis()){
condition MethodInvocation qualifier n_ter ^ ^ member isThrow_ter ^ ^ ^ ^ 
if(n.isThrow()){
condition MethodInvocation qualifier n_ter ^ ^ member isTrue_ter ^ ^ ^ ^ 
if(n.isTrue()){
condition MethodInvocation qualifier n_ter ^ ^ member isTry_ter ^ ^ ^ ^ 
if(n.isTry()){
condition MethodInvocation qualifier n_ter ^ ^ member isTypeOf_ter ^ ^ ^ ^ 
if(n.isTypeOf()){
condition MethodInvocation qualifier n_ter ^ ^ member isVar_ter ^ ^ ^ ^ 
if(n.isVar()){
condition MethodInvocation qualifier n_ter ^ ^ member isVoid_ter ^ ^ ^ ^ 
if(n.isVoid()){
condition MethodInvocation qualifier n_ter ^ ^ member isWhile_ter ^ ^ ^ ^ 
if(n.isWhile()){
condition MethodInvocation qualifier n_ter ^ ^ member isWith_ter ^ ^ ^ ^ 
if(n.isWith()){
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ ^ 
if(n.isGetProp()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ ^ 
if(!n.isGetProp()){

condition MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ ^ 
if(n.getString()){
condition MethodInvocation qualifier dereference_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ 
if(dereference.isGetProp()){
condition MethodInvocation qualifier n_ter ^ ^ member isInterface_ter ^ ^ ^ ^ 
if(n.isInterface()){
condition MethodInvocation qualifier n_ter ^ ^ member getConstructor_ter ^ ^ ^ ^ 
if(n.getConstructor()){
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
if(n.hasChildren()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isFromExterns_ter ^ ^ ^ ^ ^ 
if(n.isFromExterns()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ ^ 
if(n.hasOneChild()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ ^ 
if(n.hasMoreThanOneChild()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ ^ 
if(n.isQualifiedName()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ ^ 
if(n.isUnscopedQualifiedName()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ ^ 
if(n.isVarArgs()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ ^ 
if(n.isOptionalArg()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ ^ 
if(n.isSyntheticBlock()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ ^ 
if(n.wasEmptyNode()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ ^ 
if(n.isOnlyModifiesThisCall()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isOnlyModifiesArgumentsCall_ter ^ ^ ^ ^ ^ 
if(n.isOnlyModifiesArgumentsCall()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ ^ 
if(n.isNoSideEffectsCall()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ ^ 
if(n.isLocalResultCall()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member mayMutateArguments_ter ^ ^ ^ ^ ^ 
if(n.mayMutateArguments()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member mayMutateGlobalStateOrThrow_ter ^ ^ ^ ^ ^ 
if(n.mayMutateGlobalStateOrThrow()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ ^ 
if(n.isQuotedString()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isAdd_ter ^ ^ ^ ^ ^ 
if(n.isAdd()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isAnd_ter ^ ^ ^ ^ ^ 
if(n.isAnd()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isArrayLit_ter ^ ^ ^ ^ ^ 
if(n.isArrayLit()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isAssign_ter ^ ^ ^ ^ ^ 
if(n.isAssign()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isAssignAdd_ter ^ ^ ^ ^ ^ 
if(n.isAssignAdd()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isBlock_ter ^ ^ ^ ^ ^ 
if(n.isBlock()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isBreak_ter ^ ^ ^ ^ ^ 
if(n.isBreak()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isCall_ter ^ ^ ^ ^ ^ 
if(n.isCall()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isCase_ter ^ ^ ^ ^ ^ 
if(n.isCase()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isCast_ter ^ ^ ^ ^ ^ 
if(n.isCast()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isCatch_ter ^ ^ ^ ^ ^ 
if(n.isCatch()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isComma_ter ^ ^ ^ ^ ^ 
if(n.isComma()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isContinue_ter ^ ^ ^ ^ ^ 
if(n.isContinue()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isDebugger_ter ^ ^ ^ ^ ^ 
if(n.isDebugger()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isDec_ter ^ ^ ^ ^ ^ 
if(n.isDec()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isDefaultCase_ter ^ ^ ^ ^ ^ 
if(n.isDefaultCase()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isDelProp_ter ^ ^ ^ ^ ^ 
if(n.isDelProp()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isDo_ter ^ ^ ^ ^ ^ 
if(n.isDo()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ ^ 
if(n.isEmpty()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isExprResult_ter ^ ^ ^ ^ ^ 
if(n.isExprResult()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isFalse_ter ^ ^ ^ ^ ^ 
if(n.isFalse()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isFor_ter ^ ^ ^ ^ ^ 
if(n.isFor()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isFunction_ter ^ ^ ^ ^ ^ 
if(n.isFunction()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isGetterDef_ter ^ ^ ^ ^ ^ 
if(n.isGetterDef()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isGetElem_ter ^ ^ ^ ^ ^ 
if(n.isGetElem()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isHook_ter ^ ^ ^ ^ ^ 
if(n.isHook()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isIf_ter ^ ^ ^ ^ ^ 
if(n.isIf()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isIn_ter ^ ^ ^ ^ ^ 
if(n.isIn()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isInc_ter ^ ^ ^ ^ ^ 
if(n.isInc()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isInstanceOf_ter ^ ^ ^ ^ ^ 
if(n.isInstanceOf()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isLabel_ter ^ ^ ^ ^ ^ 
if(n.isLabel()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isLabelName_ter ^ ^ ^ ^ ^ 
if(n.isLabelName()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ ^ 
if(n.isName()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isNE_ter ^ ^ ^ ^ ^ 
if(n.isNE()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isNew_ter ^ ^ ^ ^ ^ 
if(n.isNew()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isNot_ter ^ ^ ^ ^ ^ 
if(n.isNot()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isNull_ter ^ ^ ^ ^ ^ 
if(n.isNull()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ 
if(n.isNumber()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isObjectLit_ter ^ ^ ^ ^ ^ 
if(n.isObjectLit()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isOr_ter ^ ^ ^ ^ ^ 
if(n.isOr()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isParamList_ter ^ ^ ^ ^ ^ 
if(n.isParamList()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isRegExp_ter ^ ^ ^ ^ ^ 
if(n.isRegExp()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ 
if(n.isReturn()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isScript_ter ^ ^ ^ ^ ^ 
if(n.isScript()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isSetterDef_ter ^ ^ ^ ^ ^ 
if(n.isSetterDef()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ 
if(n.isString()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isStringKey_ter ^ ^ ^ ^ ^ 
if(n.isStringKey()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isSwitch_ter ^ ^ ^ ^ ^ 
if(n.isSwitch()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isThis_ter ^ ^ ^ ^ ^ 
if(n.isThis()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isThrow_ter ^ ^ ^ ^ ^ 
if(n.isThrow()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isTrue_ter ^ ^ ^ ^ ^ 
if(n.isTrue()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isTry_ter ^ ^ ^ ^ ^ 
if(n.isTry()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isTypeOf_ter ^ ^ ^ ^ ^ 
if(n.isTypeOf()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isVar_ter ^ ^ ^ ^ ^ 
if(n.isVar()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isVoid_ter ^ ^ ^ ^ ^ 
if(n.isVoid()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isWhile_ter ^ ^ ^ ^ ^ 
if(n.isWhile()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isWith_ter ^ ^ ^ ^ ^ 
if(n.isWith()){

IfStatement condition MemberReference member n_ter ^ ^ ^ ^ ^ 
if(n){

condition MethodInvocation qualifier n_ter ^ ^ member getLastChild_ter ^ ^ ^ ^ 
if(n.getLastChild()){
condition MethodInvocation qualifier n_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ 
if(n.isFunctionPrototypeType()){
condition MethodInvocation qualifier n_ter ^ ^ member getImplicitPrototype_ter ^ ^ ^ ^ 
if(n.getImplicitPrototype()){
condition MethodInvocation qualifier n_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ 
if(n.getFirstChild()){
IfStatement condition MemberReference prefix_operators !_ter ^ ^ member n_ter ^ ^ ^ ^ ^ 
if(!n){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && n.hasChildren())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isFromExterns_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && n.isFromExterns())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && n.hasOneChild())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && n.hasMoreThanOneChild())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && n.isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && n.isUnscopedQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && n.isVarArgs())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && n.isOptionalArg())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && n.isSyntheticBlock())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && n.wasEmptyNode())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && n.isOnlyModifiesThisCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isOnlyModifiesArgumentsCall_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && n.isOnlyModifiesArgumentsCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && n.isNoSideEffectsCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && n.isLocalResultCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member mayMutateArguments_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && n.mayMutateArguments())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member mayMutateGlobalStateOrThrow_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && n.mayMutateGlobalStateOrThrow())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && n.isQuotedString())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isAdd_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && n.isAdd())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isAnd_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && n.isAnd())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isArrayLit_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && n.isArrayLit())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isAssign_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && n.isAssign())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isAssignAdd_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && n.isAssignAdd())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isBlock_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && n.isBlock())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isBreak_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && n.isBreak())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isCall_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && n.isCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isCase_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && n.isCase())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isCast_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && n.isCast())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isCatch_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && n.isCatch())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isComma_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && n.isComma())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isContinue_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && n.isContinue())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isDebugger_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && n.isDebugger())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isDec_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && n.isDec())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isDefaultCase_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && n.isDefaultCase())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isDelProp_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && n.isDelProp())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isDo_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && n.isDo())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && n.isEmpty())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isExprResult_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && n.isExprResult())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isFalse_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && n.isFalse())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isFor_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && n.isFor())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isFunction_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && n.isFunction())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isGetterDef_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && n.isGetterDef())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isGetElem_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && n.isGetElem())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && n.isGetProp())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isHook_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && n.isHook())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isIf_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && n.isIf())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isIn_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && n.isIn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isInc_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && n.isInc())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isInstanceOf_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && n.isInstanceOf())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isLabel_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && n.isLabel())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isLabelName_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && n.isLabelName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && n.isName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isNE_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && n.isNE())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isNew_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && n.isNew())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isNot_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && n.isNot())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isNull_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && n.isNull())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && n.isNumber())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isObjectLit_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && n.isObjectLit())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isOr_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && n.isOr())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isParamList_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && n.isParamList())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isRegExp_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && n.isRegExp())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && n.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isScript_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && n.isScript())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isSetterDef_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && n.isSetterDef())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && n.isString())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isStringKey_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && n.isStringKey())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isSwitch_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && n.isSwitch())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isThis_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && n.isThis())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isThrow_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && n.isThrow())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isTrue_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && n.isTrue())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isTry_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && n.isTry())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isTypeOf_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && n.isTypeOf())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isVar_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && n.isVar())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isVoid_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && n.isVoid())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isWhile_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && n.isWhile())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isWith_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && n.isWith())){

condition MethodInvocation qualifier objectType_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ 
if(objectType.isGetProp()){
condition MethodInvocation qualifier FunctionType_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ 
if(FunctionType.isGetProp()){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && !n.hasChildren())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isFromExterns_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && !n.isFromExterns())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && !n.hasOneChild())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && !n.hasMoreThanOneChild())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && !n.isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && !n.isUnscopedQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && !n.isVarArgs())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && !n.isOptionalArg())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && !n.isSyntheticBlock())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && !n.wasEmptyNode())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && !n.isOnlyModifiesThisCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isOnlyModifiesArgumentsCall_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && !n.isOnlyModifiesArgumentsCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && !n.isNoSideEffectsCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && !n.isLocalResultCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member mayMutateArguments_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && !n.mayMutateArguments())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member mayMutateGlobalStateOrThrow_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && !n.mayMutateGlobalStateOrThrow())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && !n.isQuotedString())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isAdd_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && !n.isAdd())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isAnd_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && !n.isAnd())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isArrayLit_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && !n.isArrayLit())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isAssign_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && !n.isAssign())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isAssignAdd_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && !n.isAssignAdd())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isBlock_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && !n.isBlock())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isBreak_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && !n.isBreak())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isCall_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && !n.isCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isCase_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && !n.isCase())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isCast_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && !n.isCast())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isCatch_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && !n.isCatch())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isComma_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && !n.isComma())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isContinue_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && !n.isContinue())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isDebugger_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && !n.isDebugger())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isDec_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && !n.isDec())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isDefaultCase_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && !n.isDefaultCase())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isDelProp_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && !n.isDelProp())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isDo_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && !n.isDo())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && !n.isEmpty())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isExprResult_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && !n.isExprResult())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isFalse_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && !n.isFalse())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isFor_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && !n.isFor())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isFunction_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && !n.isFunction())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isGetterDef_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && !n.isGetterDef())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isGetElem_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && !n.isGetElem())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && !n.isGetProp())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isHook_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && !n.isHook())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isIf_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && !n.isIf())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isIn_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && !n.isIn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isInc_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && !n.isInc())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isInstanceOf_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && !n.isInstanceOf())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isLabel_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && !n.isLabel())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isLabelName_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && !n.isLabelName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && !n.isName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isNE_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && !n.isNE())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isNew_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && !n.isNew())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isNot_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && !n.isNot())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isNull_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && !n.isNull())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && !n.isNumber())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isObjectLit_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && !n.isObjectLit())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isOr_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && !n.isOr())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isParamList_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && !n.isParamList())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isRegExp_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && !n.isRegExp())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && !n.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isScript_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && !n.isScript())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isSetterDef_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && !n.isSetterDef())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && !n.isString())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isStringKey_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && !n.isStringKey())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isSwitch_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && !n.isSwitch())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isThis_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && !n.isThis())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isThrow_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && !n.isThrow())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isTrue_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && !n.isTrue())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isTry_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && !n.isTry())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isTypeOf_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && !n.isTypeOf())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isVar_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && !n.isVar())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isVoid_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && !n.isVoid())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isWhile_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && !n.isWhile())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isWith_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && !n.isWith())){

IfStatement condition MethodInvocation member isGetProp_ter ^ ^ ^ ^ ^ 
if(isGetProp()){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n != null) && n.isGetProp())){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ selectors MethodInvocation member dereference_ter ^ ^ ^ ^ member isGetProp_ter ^ ^ ^ ^ ^ 
if(!n.isGetProp().dereference()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ member isGetProp_ter ^ ^ ^ ^ ^ 
if(!n.isGetProp(n.getFirstChild())){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ ^ 
if(!isGetProp()){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || n.hasChildren())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isFromExterns_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || n.isFromExterns())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || n.hasOneChild())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || n.hasMoreThanOneChild())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || n.isQualifiedName())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || n.isUnscopedQualifiedName())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || n.isVarArgs())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || n.isOptionalArg())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || n.isSyntheticBlock())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || n.wasEmptyNode())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || n.isOnlyModifiesThisCall())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isOnlyModifiesArgumentsCall_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || n.isOnlyModifiesArgumentsCall())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || n.isNoSideEffectsCall())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || n.isLocalResultCall())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member mayMutateArguments_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || n.mayMutateArguments())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member mayMutateGlobalStateOrThrow_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || n.mayMutateGlobalStateOrThrow())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || n.isQuotedString())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isAdd_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || n.isAdd())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isAnd_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || n.isAnd())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isArrayLit_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || n.isArrayLit())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isAssign_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || n.isAssign())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isAssignAdd_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || n.isAssignAdd())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isBlock_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || n.isBlock())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isBreak_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || n.isBreak())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isCall_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || n.isCall())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isCase_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || n.isCase())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isCast_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || n.isCast())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isCatch_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || n.isCatch())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isComma_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || n.isComma())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isContinue_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || n.isContinue())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isDebugger_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || n.isDebugger())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isDec_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || n.isDec())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isDefaultCase_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || n.isDefaultCase())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isDelProp_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || n.isDelProp())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isDo_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || n.isDo())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || n.isEmpty())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isExprResult_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || n.isExprResult())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isFalse_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || n.isFalse())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isFor_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || n.isFor())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isFunction_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || n.isFunction())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isGetterDef_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || n.isGetterDef())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isGetElem_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || n.isGetElem())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || n.isGetProp())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isHook_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || n.isHook())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isIf_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || n.isIf())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isIn_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || n.isIn())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isInc_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || n.isInc())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isInstanceOf_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || n.isInstanceOf())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isLabel_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || n.isLabel())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isLabelName_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || n.isLabelName())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || n.isName())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isNE_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || n.isNE())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isNew_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || n.isNew())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isNot_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || n.isNot())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isNull_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || n.isNull())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || n.isNumber())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isObjectLit_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || n.isObjectLit())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isOr_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || n.isOr())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isParamList_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || n.isParamList())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isRegExp_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || n.isRegExp())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || n.isReturn())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isScript_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || n.isScript())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isSetterDef_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || n.isSetterDef())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || n.isString())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isStringKey_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || n.isStringKey())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isSwitch_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || n.isSwitch())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isThis_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || n.isThis())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isThrow_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || n.isThrow())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isTrue_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || n.isTrue())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isTry_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || n.isTry())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isTypeOf_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || n.isTypeOf())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isVar_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || n.isVar())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isVoid_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || n.isVoid())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isWhile_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || n.isWhile())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isWith_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || n.isWith())){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ arguments MemberReference member dereference_ter ^ ^ ^ ^ member isGetProp_ter ^ ^ ^ ^ ^ 
if(n.isGetProp(dereference)){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ arguments MemberReference member propName_ter ^ ^ ^ ^ member isGetProp_ter ^ ^ ^ ^ ^ 
if(!n.isGetProp(propName)){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(n.hasChildren()){
return "null";}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isFromExterns_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(n.isFromExterns()){
return "null";}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(n.hasOneChild()){
return "null";}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(n.hasMoreThanOneChild()){
return "null";}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(n.isQualifiedName()){
return "null";}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(n.isUnscopedQualifiedName()){
return "null";}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(n.isVarArgs()){
return "null";}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(n.isOptionalArg()){
return "null";}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(n.isSyntheticBlock()){
return "null";}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(n.wasEmptyNode()){
return "null";}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(n.isOnlyModifiesThisCall()){
return "null";}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isOnlyModifiesArgumentsCall_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(n.isOnlyModifiesArgumentsCall()){
return "null";}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(n.isNoSideEffectsCall()){
return "null";}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(n.isLocalResultCall()){
return "null";}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member mayMutateArguments_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(n.mayMutateArguments()){
return "null";}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member mayMutateGlobalStateOrThrow_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(n.mayMutateGlobalStateOrThrow()){
return "null";}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(n.isQuotedString()){
return "null";}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isAdd_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(n.isAdd()){
return "null";}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isAnd_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(n.isAnd()){
return "null";}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isArrayLit_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(n.isArrayLit()){
return "null";}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isAssign_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(n.isAssign()){
return "null";}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isAssignAdd_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(n.isAssignAdd()){
return "null";}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isBlock_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(n.isBlock()){
return "null";}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isBreak_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(n.isBreak()){
return "null";}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isCall_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(n.isCall()){
return "null";}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isCase_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(n.isCase()){
return "null";}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isCast_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(n.isCast()){
return "null";}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isCatch_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(n.isCatch()){
return "null";}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isComma_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(n.isComma()){
return "null";}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isContinue_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(n.isContinue()){
return "null";}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isDebugger_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(n.isDebugger()){
return "null";}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isDec_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(n.isDec()){
return "null";}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isDefaultCase_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(n.isDefaultCase()){
return "null";}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isDelProp_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(n.isDelProp()){
return "null";}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isDo_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(n.isDo()){
return "null";}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(n.isEmpty()){
return "null";}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isExprResult_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(n.isExprResult()){
return "null";}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isFalse_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(n.isFalse()){
return "null";}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isFor_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(n.isFor()){
return "null";}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isFunction_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(n.isFunction()){
return "null";}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isGetterDef_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(n.isGetterDef()){
return "null";}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isGetElem_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(n.isGetElem()){
return "null";}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(n.isGetProp()){
return "null";}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isHook_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(n.isHook()){
return "null";}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isIf_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(n.isIf()){
return "null";}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isIn_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(n.isIn()){
return "null";}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isInc_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(n.isInc()){
return "null";}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isInstanceOf_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(n.isInstanceOf()){
return "null";}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isLabel_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(n.isLabel()){
return "null";}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isLabelName_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(n.isLabelName()){
return "null";}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(n.isName()){
return "null";}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isNE_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(n.isNE()){
return "null";}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isNew_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(n.isNew()){
return "null";}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isNot_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(n.isNot()){
return "null";}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isNull_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(n.isNull()){
return "null";}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(n.isNumber()){
return "null";}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isObjectLit_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(n.isObjectLit()){
return "null";}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isOr_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(n.isOr()){
return "null";}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isParamList_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(n.isParamList()){
return "null";}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isRegExp_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(n.isRegExp()){
return "null";}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(n.isReturn()){
return "null";}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isScript_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(n.isScript()){
return "null";}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isSetterDef_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(n.isSetterDef()){
return "null";}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(n.isString()){
return "null";}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isStringKey_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(n.isStringKey()){
return "null";}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isSwitch_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(n.isSwitch()){
return "null";}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isThis_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(n.isThis()){
return "null";}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isThrow_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(n.isThrow()){
return "null";}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isTrue_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(n.isTrue()){
return "null";}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isTry_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(n.isTry()){
return "null";}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isTypeOf_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(n.isTypeOf()){
return "null";}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isVar_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(n.isVar()){
return "null";}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isVoid_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(n.isVoid()){
return "null";}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isWhile_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(n.isWhile()){
return "null";}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isWith_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(n.isWith()){
return "null";}
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier objectType_ter ^ ^ member getConstructor_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ ^ ^ ^ 
if(((objectType.getConstructor() != null) && n.isGetProp())){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
if(!n.hasChildren()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isFromExterns_ter ^ ^ ^ ^ ^ 
if(!n.isFromExterns()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ ^ 
if(!n.hasOneChild()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ ^ 
if(!n.hasMoreThanOneChild()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ ^ 
if(!n.isQualifiedName()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ ^ 
if(!n.isUnscopedQualifiedName()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ ^ 
if(!n.isVarArgs()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ ^ 
if(!n.isOptionalArg()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ ^ 
if(!n.isSyntheticBlock()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ ^ 
if(!n.wasEmptyNode()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ ^ 
if(!n.isOnlyModifiesThisCall()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isOnlyModifiesArgumentsCall_ter ^ ^ ^ ^ ^ 
if(!n.isOnlyModifiesArgumentsCall()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ ^ 
if(!n.isNoSideEffectsCall()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ ^ 
if(!n.isLocalResultCall()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member mayMutateArguments_ter ^ ^ ^ ^ ^ 
if(!n.mayMutateArguments()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member mayMutateGlobalStateOrThrow_ter ^ ^ ^ ^ ^ 
if(!n.mayMutateGlobalStateOrThrow()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ ^ 
if(!n.isQuotedString()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isAdd_ter ^ ^ ^ ^ ^ 
if(!n.isAdd()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isAnd_ter ^ ^ ^ ^ ^ 
if(!n.isAnd()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isArrayLit_ter ^ ^ ^ ^ ^ 
if(!n.isArrayLit()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isAssign_ter ^ ^ ^ ^ ^ 
if(!n.isAssign()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isAssignAdd_ter ^ ^ ^ ^ ^ 
if(!n.isAssignAdd()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isBlock_ter ^ ^ ^ ^ ^ 
if(!n.isBlock()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isBreak_ter ^ ^ ^ ^ ^ 
if(!n.isBreak()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isCall_ter ^ ^ ^ ^ ^ 
if(!n.isCall()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isCase_ter ^ ^ ^ ^ ^ 
if(!n.isCase()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isCast_ter ^ ^ ^ ^ ^ 
if(!n.isCast()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isCatch_ter ^ ^ ^ ^ ^ 
if(!n.isCatch()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isComma_ter ^ ^ ^ ^ ^ 
if(!n.isComma()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isContinue_ter ^ ^ ^ ^ ^ 
if(!n.isContinue()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isDebugger_ter ^ ^ ^ ^ ^ 
if(!n.isDebugger()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isDec_ter ^ ^ ^ ^ ^ 
if(!n.isDec()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isDefaultCase_ter ^ ^ ^ ^ ^ 
if(!n.isDefaultCase()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isDelProp_ter ^ ^ ^ ^ ^ 
if(!n.isDelProp()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isDo_ter ^ ^ ^ ^ ^ 
if(!n.isDo()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ ^ 
if(!n.isEmpty()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isExprResult_ter ^ ^ ^ ^ ^ 
if(!n.isExprResult()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isFalse_ter ^ ^ ^ ^ ^ 
if(!n.isFalse()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isFor_ter ^ ^ ^ ^ ^ 
if(!n.isFor()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isFunction_ter ^ ^ ^ ^ ^ 
if(!n.isFunction()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isGetterDef_ter ^ ^ ^ ^ ^ 
if(!n.isGetterDef()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isGetElem_ter ^ ^ ^ ^ ^ 
if(!n.isGetElem()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isHook_ter ^ ^ ^ ^ ^ 
if(!n.isHook()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isIf_ter ^ ^ ^ ^ ^ 
if(!n.isIf()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isIn_ter ^ ^ ^ ^ ^ 
if(!n.isIn()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isInc_ter ^ ^ ^ ^ ^ 
if(!n.isInc()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isInstanceOf_ter ^ ^ ^ ^ ^ 
if(!n.isInstanceOf()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isLabel_ter ^ ^ ^ ^ ^ 
if(!n.isLabel()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isLabelName_ter ^ ^ ^ ^ ^ 
if(!n.isLabelName()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ ^ 
if(!n.isName()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isNE_ter ^ ^ ^ ^ ^ 
if(!n.isNE()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isNew_ter ^ ^ ^ ^ ^ 
if(!n.isNew()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isNot_ter ^ ^ ^ ^ ^ 
if(!n.isNot()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isNull_ter ^ ^ ^ ^ ^ 
if(!n.isNull()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ 
if(!n.isNumber()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isObjectLit_ter ^ ^ ^ ^ ^ 
if(!n.isObjectLit()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isOr_ter ^ ^ ^ ^ ^ 
if(!n.isOr()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isParamList_ter ^ ^ ^ ^ ^ 
if(!n.isParamList()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isRegExp_ter ^ ^ ^ ^ ^ 
if(!n.isRegExp()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ 
if(!n.isReturn()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isScript_ter ^ ^ ^ ^ ^ 
if(!n.isScript()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isSetterDef_ter ^ ^ ^ ^ ^ 
if(!n.isSetterDef()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ 
if(!n.isString()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isStringKey_ter ^ ^ ^ ^ ^ 
if(!n.isStringKey()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isSwitch_ter ^ ^ ^ ^ ^ 
if(!n.isSwitch()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isThis_ter ^ ^ ^ ^ ^ 
if(!n.isThis()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isThrow_ter ^ ^ ^ ^ ^ 
if(!n.isThrow()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isTrue_ter ^ ^ ^ ^ ^ 
if(!n.isTrue()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isTry_ter ^ ^ ^ ^ ^ 
if(!n.isTry()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isTypeOf_ter ^ ^ ^ ^ ^ 
if(!n.isTypeOf()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isVar_ter ^ ^ ^ ^ ^ 
if(!n.isVar()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isVoid_ter ^ ^ ^ ^ ^ 
if(!n.isVoid()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isWhile_ter ^ ^ ^ ^ ^ 
if(!n.isWhile()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isWith_ter ^ ^ ^ ^ ^ 
if(!n.isWith()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ arguments MemberReference member propName_ter ^ ^ ^ ^ member isGetProp_ter ^ ^ ^ ^ ^ 
if(n.isGetProp(propName)){

StatementExpression expression MethodInvocation qualifier n_ter ^ ^ member detachChildren_ter ^ ^ ^ ^ ^ 
n.detachChildren();

StatementExpression expression MethodInvocation qualifier n_ter ^ ^ member setQuotedString_ter ^ ^ ^ ^ ^ 
n.setQuotedString();

StatementExpression expression Assignment expressionl MemberReference member objectType_ter ^ ^ ^ ^ value MethodInvocation qualifier FunctionType_ter ^ ^ arguments MemberReference member objectType_ter ^ ^ ^ MemberReference member propName_ter ^ ^ ^ ^ member getTopDefiningInterface_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
objectType = FunctionType.getTopDefiningInterface(objectType, propName);

StatementExpression expression Assignment expressionl MemberReference member objectType_ter ^ ^ ^ ^ value MethodInvocation qualifier objectType_ter ^ ^ member getImplicitPrototype_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
objectType = objectType.getImplicitPrototype();

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || !n.hasChildren())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isFromExterns_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || !n.isFromExterns())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || !n.hasOneChild())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || !n.hasMoreThanOneChild())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || !n.isQualifiedName())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || !n.isUnscopedQualifiedName())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || !n.isVarArgs())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || !n.isOptionalArg())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || !n.isSyntheticBlock())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || !n.wasEmptyNode())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || !n.isOnlyModifiesThisCall())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isOnlyModifiesArgumentsCall_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || !n.isOnlyModifiesArgumentsCall())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || !n.isNoSideEffectsCall())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || !n.isLocalResultCall())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member mayMutateArguments_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || !n.mayMutateArguments())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member mayMutateGlobalStateOrThrow_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || !n.mayMutateGlobalStateOrThrow())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || !n.isQuotedString())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isAdd_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || !n.isAdd())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isAnd_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || !n.isAnd())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isArrayLit_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || !n.isArrayLit())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isAssign_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || !n.isAssign())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isAssignAdd_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || !n.isAssignAdd())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isBlock_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || !n.isBlock())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isBreak_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || !n.isBreak())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isCall_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || !n.isCall())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isCase_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || !n.isCase())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isCast_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || !n.isCast())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isCatch_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || !n.isCatch())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isComma_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || !n.isComma())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isContinue_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || !n.isContinue())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isDebugger_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || !n.isDebugger())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isDec_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || !n.isDec())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isDefaultCase_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || !n.isDefaultCase())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isDelProp_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || !n.isDelProp())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isDo_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || !n.isDo())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || !n.isEmpty())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isExprResult_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || !n.isExprResult())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isFalse_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || !n.isFalse())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isFor_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || !n.isFor())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isFunction_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || !n.isFunction())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isGetterDef_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || !n.isGetterDef())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isGetElem_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || !n.isGetElem())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || !n.isGetProp())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isHook_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || !n.isHook())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isIf_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || !n.isIf())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isIn_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || !n.isIn())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isInc_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || !n.isInc())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isInstanceOf_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || !n.isInstanceOf())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isLabel_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || !n.isLabel())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isLabelName_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || !n.isLabelName())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || !n.isName())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isNE_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || !n.isNE())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isNew_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || !n.isNew())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isNot_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || !n.isNot())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isNull_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || !n.isNull())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || !n.isNumber())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isObjectLit_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || !n.isObjectLit())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isOr_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || !n.isOr())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isParamList_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || !n.isParamList())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isRegExp_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || !n.isRegExp())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || !n.isReturn())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isScript_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || !n.isScript())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isSetterDef_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || !n.isSetterDef())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || !n.isString())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isStringKey_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || !n.isStringKey())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isSwitch_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || !n.isSwitch())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isThis_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || !n.isThis())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isThrow_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || !n.isThrow())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isTrue_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || !n.isTrue())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isTry_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || !n.isTry())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isTypeOf_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || !n.isTypeOf())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isVar_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || !n.isVar())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isVoid_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || !n.isVoid())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isWhile_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || !n.isWhile())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isWith_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() || !n.isWith())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ ^ ^ ^ 
if((n && n.isGetProp())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member objectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier objectType_ter ^ ^ arguments MemberReference member propName_ter ^ ^ ^ ^ member hasOwnProperty_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ ^ ^ ^ 
if((((objectType != null) && !objectType.hasOwnProperty(propName)) && n.isGetProp())){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ arguments MemberReference member n_ter ^ ^ ^ ^ member isGetProp_ter ^ ^ ^ ^ ^ 
if(n.isGetProp(n)){

ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if (true) { return "null"; }

condition MethodInvocation qualifier propName_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ 
if(propName.isGetProp()){
IfStatement condition MethodInvocation qualifier dereference_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ ^ 
if(dereference.isGetProp()){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member objectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ ^ ^ ^ 
if(((objectType != null) && n.isGetProp())){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ arguments MemberReference member n_ter ^ ^ ^ ^ member isGetProp_ter ^ ^ ^ ^ ^ 
if(!n.isGetProp(n)){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier objectType_ter ^ ^ member getConstructor_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier objectType_ter ^ ^ selectors MethodInvocation member isInterface_ter ^ ^ ^ ^ member getConstructor_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ ^ ^ ^ 
if((((objectType.getConstructor() != null) && objectType.getConstructor().isInterface()) && n.isGetProp())){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member dereference_ter ^ ^ ^ ^ member isGetProp_ter ^ ^ ^ ^ ^ 
if(n.isGetProp().dereference()){

condition MethodInvocation qualifier par2 ^ ^ member isGetProp_ter ^ ^ ^ ^ 
if(.isGetProp()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ member isGetProp_ter ^ ^ ^ ^ ^ 
if(n.isGetProp(n.getFirstChild())){

LocalVariableDeclaration type ReferenceType name JSType_ter ^ ^ ^ ^ declarators VariableDeclarator name type_ter ^ ^ initializer MethodInvocation arguments MemberReference member n_ter ^ ^ ^ ^ member getJSType_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
JSType type = getJSType(n);

LocalVariableDeclaration type ReferenceType name JSType_ter ^ ^ ^ ^ declarators VariableDeclarator name type_ter ^ ^ initializer MethodInvocation arguments MemberReference member propName_ter ^ ^ ^ ^ member getJSType_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
JSType type = getJSType(propName);

ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if (true) { return "null"; }

LocalVariableDeclaration type ReferenceType name JSType_ter ^ ^ ^ ^ declarators VariableDeclarator name type_ter ^ ^ initializer MethodInvocation arguments MemberReference member objectType_ter ^ ^ ^ ^ member getJSType_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
JSType type = getJSType(objectType);

LocalVariableDeclaration type ReferenceType name JSType_ter ^ ^ ^ ^ declarators VariableDeclarator name type_ter ^ ^ initializer MethodInvocation arguments MemberReference member type_ter ^ ^ ^ ^ member getJSType_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
JSType type = getJSType(type);

ReturnStatement expression BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl MethodInvocation qualifier objectType_ter ^ ^ member toString_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr MemberReference member propName_ter ^ ^ ^ ^ ^ ^ ^ 
if (true) { return ((objectType.toString() + "null") + propName); }

ReturnStatement expression MemberReference member qualifiedName_ter ^ ^ ^ ^ ^ 
if (true) { return qualifiedName; }

LocalVariableDeclaration type ReferenceType name JSType_ter ^ ^ ^ ^ declarators VariableDeclarator name type_ter ^ ^ initializer MethodInvocation arguments MemberReference member dereference_ter ^ ^ ^ ^ member getJSType_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
JSType type = getJSType(dereference);

LocalVariableDeclaration type ReferenceType name JSType_ter ^ ^ ^ ^ declarators VariableDeclarator name type_ter ^ ^ initializer MethodInvocation arguments MemberReference member dereferenced_ter ^ ^ ^ ^ member getJSType_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
JSType type = getJSType(dereferenced);

BreakStatement_ter ^ 
break;

LocalVariableDeclaration type ReferenceType name JSType_ter ^ ^ ^ ^ declarators VariableDeclarator name type_ter ^ ^ initializer MethodInvocation arguments MemberReference member n_ter ^ ^ ^ Literal value false_ter ^ ^ ^ ^ member getJSType_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
JSType type = getJSType(n, false);

LocalVariableDeclaration type ReferenceType name JSType_ter ^ ^ ^ ^ declarators VariableDeclarator name type_ter ^ ^ initializer MethodInvocation arguments MemberReference member n_ter ^ ^ ^ ^ member getReadableJSTypeName_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
JSType type = getReadableJSTypeName(n);

ReturnStatement expression MethodInvocation qualifier type_ter ^ ^ member toString_ter ^ ^ ^ ^ ^ 
if (true) { return type.toString(); }

StatementExpression expression Assignment expressionl MemberReference member objectType_ter ^ ^ ^ ^ value MethodInvocation qualifier objectType_ter ^ ^ member getImplicitPrototype_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
objectType = objectType.getImplicitPrototype();

LocalVariableDeclaration type ReferenceType name JSType_ter ^ ^ ^ ^ declarators VariableDeclarator name type_ter ^ ^ initializer MethodInvocation arguments MemberReference member n_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member getJSType_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
JSType type = getJSType(n, true);

StatementExpression expression Assignment expressionl MemberReference member objectType_ter ^ ^ ^ ^ value MethodInvocation qualifier FunctionType_ter ^ ^ arguments MemberReference member objectType_ter ^ ^ ^ MemberReference member propName_ter ^ ^ ^ ^ member getTopDefiningInterface_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
objectType = FunctionType.getTopDefiningInterface(objectType, propName);

StatementExpression expression Assignment expressionl MemberReference member type_ter ^ ^ ^ ^ value MemberReference member dereferenced_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
type = dereferenced;

ReturnStatement_ter ^ 
if (true) { return;
 }

LocalVariableDeclaration type ReferenceType name String_ter ^ ^ ^ ^ declarators VariableDeclarator name propName_ter ^ ^ initializer MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member getString_ter ^ ^ ^ ^ member getLastChild_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
String propName = n.getLastChild().getString();

LocalVariableDeclaration type ReferenceType name JSType_ter ^ ^ ^ ^ declarators VariableDeclarator name type_ter ^ ^ initializer MethodInvocation arguments MemberReference member n_ter ^ ^ ^ ^ member hasOwnProperty_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
JSType type = hasOwnProperty(n);

LocalVariableDeclaration type ReferenceType name JSType_ter ^ ^ ^ ^ declarators VariableDeclarator name type_ter ^ ^ initializer MethodInvocation arguments MemberReference member n_ter ^ ^ ^ MemberReference member objectType_ter ^ ^ ^ ^ member getJSType_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
JSType type = getJSType(n, objectType);

LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name JSType_ter ^ ^ ^ ^ declarators VariableDeclarator name type_ter ^ ^ initializer MethodInvocation arguments MemberReference member n_ter ^ ^ ^ ^ member getJSType_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
final JSType type = getJSType(n);

LocalVariableDeclaration type ReferenceType name JSType_ter ^ ^ ^ ^ declarators VariableDeclarator name type_ter ^ ^ initializer MethodInvocation arguments MemberReference member qualifiedName_ter ^ ^ ^ ^ member getJSType_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
JSType type = getJSType(qualifiedName);

LocalVariableDeclaration type ReferenceType name JSType_ter ^ ^ ^ ^ declarators VariableDeclarator name type_ter ^ ^ initializer MethodInvocation arguments MemberReference member n_ter ^ ^ ^ MemberReference member dereference_ter ^ ^ ^ ^ member getJSType_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
JSType type = getJSType(n, dereference);

LocalVariableDeclaration type ReferenceType name JSType_ter ^ ^ ^ ^ declarators VariableDeclarator name type_ter ^ ^ initializer MethodInvocation arguments MemberReference member n_ter ^ ^ ^ MemberReference member type_ter ^ ^ ^ ^ member getJSType_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
JSType type = getJSType(n, type);

LocalVariableDeclaration type ReferenceType name JSType_ter ^ ^ ^ ^ declarators VariableDeclarator name type_ter ^ ^ initializer MethodInvocation member getJSType_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
JSType type = getJSType();

LocalVariableDeclaration type ReferenceType name JSType_ter ^ ^ ^ ^ declarators VariableDeclarator name type_ter ^ ^ initializer MethodInvocation arguments MemberReference member n_ter ^ ^ ^ MemberReference member propName_ter ^ ^ ^ ^ member getJSType_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
JSType type = getJSType(n, propName);

LocalVariableDeclaration type ReferenceType name JSType_ter ^ ^ ^ ^ declarators VariableDeclarator name type_ter ^ ^ initializer MethodInvocation arguments MemberReference member n_ter ^ ^ ^ ^ member isFunctionType_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
JSType type = isFunctionType(n);

LocalVariableDeclaration type ReferenceType name JSType_ter ^ ^ ^ ^ declarators VariableDeclarator name type_ter ^ ^ initializer MethodInvocation arguments MemberReference member n_ter ^ ^ ^ Literal value null_ter ^ ^ ^ ^ member getJSType_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
JSType type = getJSType(n, null);

LocalVariableDeclaration type ReferenceType name ObjectType_ter ^ ^ ^ ^ declarators VariableDeclarator name objectType_ter ^ ^ initializer MethodInvocation selectors MethodInvocation member dereference_ter ^ ^ ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ member getJSType_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
ObjectType objectType = getJSType(n.getFirstChild()).dereference();

ContinueStatement_ter ^ 
continue;

LocalVariableDeclaration type ReferenceType name JSType_ter ^ ^ ^ ^ declarators VariableDeclarator name type_ter ^ ^ initializer MethodInvocation arguments MemberReference member n_ter ^ ^ ^ ^ member getTopDefiningInterface_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
JSType type = getTopDefiningInterface(n);

LocalVariableDeclaration type ReferenceType name ObjectType_ter ^ ^ ^ ^ declarators VariableDeclarator name dereferenced_ter ^ ^ initializer MethodInvocation qualifier type_ter ^ ^ member dereference_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
ObjectType dereferenced = type.dereference();

LocalVariableDeclaration type ReferenceType name JSType_ter ^ ^ ^ ^ declarators VariableDeclarator name type_ter ^ ^ initializer MethodInvocation arguments MemberReference member par2 ^ ^ ^ ^ member getJSType_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
JSType type = getJSType();

LocalVariableDeclaration type ReferenceType name JSType_ter ^ ^ ^ ^ declarators VariableDeclarator name type_ter ^ ^ initializer MethodInvocation arguments MemberReference member objectType_ter ^ ^ ^ MemberReference member propName_ter ^ ^ ^ ^ member getJSType_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
JSType type = getJSType(objectType, propName);

LocalVariableDeclaration type ReferenceType name JSType_ter ^ ^ ^ ^ declarators VariableDeclarator name type_ter ^ ^ initializer MethodInvocation arguments MemberReference member n_ter ^ ^ ^ MemberReference member n_ter ^ ^ ^ ^ member getJSType_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
JSType type = getJSType(n, n);

ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if (true) { return false; }

ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if (true) { return null; }

LocalVariableDeclaration type ReferenceType name JSType_ter ^ ^ ^ ^ declarators VariableDeclarator name type_ter ^ ^ initializer MethodInvocation arguments MemberReference member n_ter ^ ^ ^ This_ter ^ ^ member getJSType_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
JSType type = getJSType(n, this);

IfStatement condition MemberReference member dereference_ter ^ ^ ^ ^ ^ 
if(dereference){

LocalVariableDeclaration type ReferenceType name JSType_ter ^ ^ ^ ^ declarators VariableDeclarator name type_ter ^ ^ initializer MethodInvocation arguments MemberReference member n_ter ^ ^ ^ ^ member toString_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
JSType type = toString(n);

LocalVariableDeclaration type ReferenceType name JSType_ter ^ ^ ^ ^ declarators VariableDeclarator name type_ter ^ ^ initializer MethodInvocation arguments MethodInvocation qualifier objectType_ter ^ ^ member toString_ter ^ ^ ^ ^ member getJSType_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
JSType type = getJSType(objectType.toString());

LocalVariableDeclaration type ReferenceType name JSType_ter ^ ^ ^ ^ declarators VariableDeclarator name type_ter ^ ^ initializer Cast type ReferenceType name JSType_ter ^ ^ ^ ^ expression MethodInvocation arguments MemberReference member n_ter ^ ^ ^ ^ member getJSType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
arg 
arg 
JSType type = (JSType)getJSType(n);



condition MemberReference member type_ter ^ ^ ^ ^ 
if(type){
condition MemberReference member propName_ter ^ ^ ^ ^ 
if(propName){
condition MemberReference prefix_operators !_ter ^ ^ member dereference_ter ^ ^ ^ ^ 
if(!dereference){
condition MemberReference member dereferenced_ter ^ ^ ^ ^ 
if(dereferenced){
IfStatement condition MemberReference member dereference_ter ^ ^ ^ ^ ^ 
if(dereference){

condition MemberReference member objectType_ter ^ ^ ^ ^ 
if(objectType){
IfStatement condition MemberReference prefix_operators !_ter ^ ^ member dereference_ter ^ ^ ^ ^ ^ 
if(!dereference){

condition MemberReference member n_ter ^ ^ ^ ^ 
if(n){
condition MemberReference member dereference_ter ^ ^ ^ ^ 
if(dereference){
condition MemberReference member qualifiedName_ter ^ ^ ^ ^ 
if(qualifiedName){
StatementExpression expression MethodInvocation qualifier type_ter ^ ^ member clearResolved_ter ^ ^ ^ ^ ^ 
type.clearResolved();

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member dereference_ter ^ ^ ^ ^ operandr MemberReference member type_ter ^ ^ ^ ^ ^ ^ ^ 
if((dereference && type)){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member dereference_ter ^ ^ ^ ^ operandr MemberReference member dereference_ter ^ ^ ^ ^ ^ ^ ^ 
if((dereference && dereference)){

condition MemberReference postfix_operators ++_ter ^ ^ member dereference_ter ^ ^ ^ ^ 
if(dereference++){
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if (true) { return "null"; }

condition MemberReference prefix_operators -_ter ^ ^ member dereference_ter ^ ^ ^ ^ 
if(-dereference){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member dereference_ter ^ ^ ^ ^ operandr MemberReference member propName_ter ^ ^ ^ ^ ^ ^ ^ 
if((dereference && propName)){

StatementExpression expression Assignment expressionl MemberReference member objectType_ter ^ ^ ^ ^ value MethodInvocation qualifier objectType_ter ^ ^ member getImplicitPrototype_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
objectType = objectType.getImplicitPrototype();

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MemberReference member dereference_ter ^ ^ ^ ^ operandr MemberReference member dereference_ter ^ ^ ^ ^ ^ ^ ^ 
if((dereference || dereference)){

condition MemberReference prefix_operators !_ter ^ ^ member par2 ^ ^ ^ ^ 
if(!){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MemberReference member dereference_ter ^ ^ ^ ^ operandr MemberReference member type_ter ^ ^ ^ ^ ^ ^ ^ 
if((dereference || type)){

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier objectType_ter ^ ^ member getConstructor_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((objectType.getConstructor() != null)){

StatementExpression expression Assignment expressionl MemberReference member objectType_ter ^ ^ ^ ^ value MethodInvocation qualifier FunctionType_ter ^ ^ arguments MemberReference member objectType_ter ^ ^ ^ MemberReference member propName_ter ^ ^ ^ ^ member getTopDefiningInterface_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
objectType = FunctionType.getTopDefiningInterface(objectType, propName);

StatementExpression expression Assignment expressionl MemberReference member type_ter ^ ^ ^ ^ value MemberReference member dereferenced_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
type = dereferenced;

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member objectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((objectType != null)){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier objectType_ter ^ ^ member getConstructor_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier objectType_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((objectType.getConstructor() != null) || objectType.isFunctionPrototypeType())){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member hasDisplayName_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.hasDisplayName()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isNoType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isNoType()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isNoResolvedType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isNoResolvedType()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isNoObjectType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isNoObjectType()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isEmptyType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isEmptyType()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isNumberObjectType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isNumberObjectType()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isNumberValueType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isNumberValueType()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isFunctionPrototypeType()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isStringObjectType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isStringObjectType()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isTheObjectType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isTheObjectType()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isStringValueType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isStringValueType()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isString()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isNumber()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isArrayType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isArrayType()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isBooleanObjectType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isBooleanObjectType()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isBooleanValueType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isBooleanValueType()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isRegexpType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isRegexpType()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isDateType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isDateType()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isNullType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isNullType()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isVoidType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isVoidType()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isAllType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isAllType()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isUnknownType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isUnknownType()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isCheckedUnknownType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isCheckedUnknownType()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isUnionType()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isStruct_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isStruct()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isDict_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isDict()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isGlobalThisType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isGlobalThisType()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isFunctionType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isFunctionType()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isEnumElementType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isEnumElementType()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isEnumType()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isNamedType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isNamedType()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isRecordType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isRecordType()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isTemplatizedType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isTemplatizedType()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isTemplateType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isTemplateType()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member hasAnyTemplateTypes_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.hasAnyTemplateTypes()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member hasAnyTemplateTypesInternal_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.hasAnyTemplateTypesInternal()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isObject_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isObject()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isConstructor()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isNominalType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isNominalType()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isNominalConstructor_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isNominalConstructor()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isInstanceType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isInstanceType()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isInterface_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isInterface()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isOrdinaryFunction_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isOrdinaryFunction()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member matchesInt32Context_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.matchesInt32Context()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member matchesUint32Context_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.matchesUint32Context()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member matchesNumberContext_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.matchesNumberContext()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member matchesStringContext_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.matchesStringContext()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member matchesObjectContext_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.matchesObjectContext()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member canBeCalled_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.canBeCalled()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isNullable_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isNullable()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isResolved_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isResolved()){
return "null";}
IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MemberReference member dereference_ter ^ ^ ^ ^ operandr MemberReference member propName_ter ^ ^ ^ ^ ^ ^ ^ 
if((dereference || propName)){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))){

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.toObjectType() != null)){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member dereference_ter ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ member dereference_ter ^ ^ ^ ^ ^ ^ ^ 
if((dereference && !dereference)){

IfStatement condition BinaryOperation operator +_ter ^ ^ operandl MethodInvocation qualifier objectType_ter ^ ^ member toString_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ 
if((objectType.toString() + "null")){

BreakStatement_ter ^ 
break;


IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.toObjectType().getConstructor() != null)){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member dereference_ter ^ ^ ^ ^ operandr MemberReference member objectType_ter ^ ^ ^ ^ ^ ^ ^ 
if((dereference && objectType)){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member dereference_ter ^ ^ ^ ^ operandr MemberReference member n_ter ^ ^ ^ ^ ^ ^ ^ 
if((dereference && n)){

IfStatement condition MethodInvocation member n_ter ^ ^ ^ ^ ^ 
if(n()){

condition MemberReference member loc5 ^ ^ ^ ^ 
if(){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member dereference_ter ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ member type_ter ^ ^ ^ ^ ^ ^ ^ 
if((dereference && !type)){

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier objectType_ter ^ ^ member getConstructor_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((objectType.getConstructor() != null)){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr MemberReference member dereference_ter ^ ^ ^ ^ ^ ^ ^ 
if((n && dereference)){

LocalVariableDeclaration type ReferenceType name ObjectType_ter ^ ^ ^ ^ declarators VariableDeclarator name dereferenced_ter ^ ^ initializer MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
ObjectType dereferenced = type.toObjectType();

LocalVariableDeclaration type ReferenceType name ObjectType_ter ^ ^ ^ ^ declarators VariableDeclarator name dereferenced_ter ^ ^ initializer MethodInvocation qualifier type_ter ^ ^ member dereference_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
ObjectType dereferenced = type.dereference();

LocalVariableDeclaration type ReferenceType name ObjectType_ter ^ ^ ^ ^ declarators VariableDeclarator name dereferenced_ter ^ ^ initializer MethodInvocation qualifier type_ter ^ ^ member getReadableJSTypeName_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
ObjectType dereferenced = type.getReadableJSTypeName();

LocalVariableDeclaration type ReferenceType name ObjectType_ter ^ ^ ^ ^ declarators VariableDeclarator name dereferenced_ter ^ ^ initializer MethodInvocation qualifier objectType_ter ^ ^ member dereference_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
ObjectType dereferenced = objectType.dereference();

ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if (true) { return "null"; }

LocalVariableDeclaration type ReferenceType name ObjectType_ter ^ ^ ^ ^ declarators VariableDeclarator name dereferenced_ter ^ ^ initializer MethodInvocation qualifier propName_ter ^ ^ member dereference_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
ObjectType dereferenced = propName.dereference();

LocalVariableDeclaration type ReferenceType name ObjectType_ter ^ ^ ^ ^ declarators VariableDeclarator name dereferenced_ter ^ ^ initializer MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
ObjectType dereferenced = type.isFunctionPrototypeType();

LocalVariableDeclaration type ReferenceType name ObjectType_ter ^ ^ ^ ^ declarators VariableDeclarator name dereferenced_ter ^ ^ initializer MethodInvocation qualifier type_ter ^ ^ member getConstructor_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
ObjectType dereferenced = type.getConstructor();

LocalVariableDeclaration type ReferenceType name ObjectType_ter ^ ^ ^ ^ declarators VariableDeclarator name dereferenced_ter ^ ^ initializer MethodInvocation qualifier type_ter ^ ^ member getName_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
ObjectType dereferenced = type.getName();

LocalVariableDeclaration type ReferenceType name ObjectType_ter ^ ^ ^ ^ declarators VariableDeclarator name dereferenced_ter ^ ^ initializer MethodInvocation qualifier type_ter ^ ^ member getImplicitPrototype_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
ObjectType dereferenced = type.getImplicitPrototype();

LocalVariableDeclaration type ReferenceType name ObjectType_ter ^ ^ ^ ^ declarators VariableDeclarator name dereferenced_ter ^ ^ initializer MethodInvocation qualifier dereferenced_ter ^ ^ member dereference_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
ObjectType dereferenced = dereferenced.dereference();

LocalVariableDeclaration type ReferenceType name ObjectType_ter ^ ^ ^ ^ declarators VariableDeclarator name dereferenced_ter ^ ^ initializer MethodInvocation qualifier type_ter ^ ^ member toString_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
ObjectType dereferenced = type.toString();

LocalVariableDeclaration type ReferenceType name ObjectType_ter ^ ^ ^ ^ declarators VariableDeclarator name dereferenced_ter ^ ^ initializer MethodInvocation qualifier dereference_ter ^ ^ member dereference_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
ObjectType dereferenced = dereference.dereference();

StatementExpression expression Assignment expressionl MemberReference member objectType_ter ^ ^ ^ ^ value MethodInvocation qualifier objectType_ter ^ ^ member getImplicitPrototype_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
objectType = objectType.getImplicitPrototype();

StatementExpression expression Assignment expressionl MemberReference member objectType_ter ^ ^ ^ ^ value MethodInvocation qualifier FunctionType_ter ^ ^ arguments MemberReference member objectType_ter ^ ^ ^ MemberReference member propName_ter ^ ^ ^ ^ member getTopDefiningInterface_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
objectType = FunctionType.getTopDefiningInterface(objectType, propName);

LocalVariableDeclaration type ReferenceType name String_ter ^ ^ ^ ^ declarators VariableDeclarator name propName_ter ^ ^ initializer MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member getString_ter ^ ^ ^ ^ member getLastChild_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
String propName = n.getLastChild().getString();

StatementExpression expression Assignment expressionl MemberReference member type_ter ^ ^ ^ ^ value MemberReference member dereferenced_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
type = dereferenced;

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member type_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((type != null)){

LocalVariableDeclaration type ReferenceType name ObjectType_ter ^ ^ ^ ^ declarators VariableDeclarator name dereferenced_ter ^ ^ initializer MethodInvocation qualifier n_ter ^ ^ member dereference_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
ObjectType dereferenced = n.dereference();

ReturnStatement expression MemberReference member qualifiedName_ter ^ ^ ^ ^ ^ 
if (true) { return qualifiedName; }

StatementExpression expression MethodInvocation qualifier type_ter ^ ^ member clearResolved_ter ^ ^ ^ ^ ^ 
type.clearResolved();

LocalVariableDeclaration type ReferenceType name ObjectType_ter ^ ^ ^ ^ declarators VariableDeclarator name objectType_ter ^ ^ initializer MethodInvocation selectors MethodInvocation member dereference_ter ^ ^ ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ member getJSType_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
ObjectType objectType = getJSType(n.getFirstChild()).dereference();

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member hasDisplayName_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.hasDisplayName()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isNoType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isNoType()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isNoResolvedType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isNoResolvedType()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isNoObjectType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isNoObjectType()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isEmptyType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isEmptyType()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isNumberObjectType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isNumberObjectType()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isNumberValueType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isNumberValueType()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isFunctionPrototypeType()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isStringObjectType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isStringObjectType()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isTheObjectType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isTheObjectType()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isStringValueType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isStringValueType()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isString()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isNumber()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isArrayType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isArrayType()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isBooleanObjectType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isBooleanObjectType()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isBooleanValueType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isBooleanValueType()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isRegexpType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isRegexpType()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isDateType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isDateType()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isNullType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isNullType()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isVoidType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isVoidType()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isAllType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isAllType()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isUnknownType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isUnknownType()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isCheckedUnknownType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isCheckedUnknownType()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isUnionType()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isStruct_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isStruct()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isDict_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isDict()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isGlobalThisType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isGlobalThisType()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isFunctionType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isFunctionType()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isEnumElementType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isEnumElementType()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isEnumType()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isNamedType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isNamedType()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isRecordType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isRecordType()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isTemplatizedType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isTemplatizedType()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isTemplateType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isTemplateType()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member hasAnyTemplateTypes_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.hasAnyTemplateTypes()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member hasAnyTemplateTypesInternal_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.hasAnyTemplateTypesInternal()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isObject_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isObject()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isConstructor()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isNominalType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isNominalType()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isNominalConstructor_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isNominalConstructor()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isInstanceType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isInstanceType()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isInterface_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isInterface()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isOrdinaryFunction_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isOrdinaryFunction()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member matchesInt32Context_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.matchesInt32Context()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member matchesUint32Context_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.matchesUint32Context()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member matchesNumberContext_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.matchesNumberContext()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member matchesStringContext_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.matchesStringContext()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member matchesObjectContext_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.matchesObjectContext()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member canBeCalled_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.canBeCalled()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isNullable_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isNullable()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isResolved_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isResolved()){
return "null";}
LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name ObjectType_ter ^ ^ ^ ^ declarators VariableDeclarator name dereferenced_ter ^ ^ initializer MethodInvocation qualifier type_ter ^ ^ member dereference_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
final ObjectType dereferenced = type.dereference();

ReturnStatement expression MethodInvocation qualifier type_ter ^ ^ member toString_ter ^ ^ ^ ^ ^ 
if (true) { return type.toString(); }

BreakStatement_ter ^ 
break;

ReturnStatement_ter ^ 
if (true) { return;
 }

LocalVariableDeclaration type ReferenceType name ObjectType_ter ^ ^ ^ ^ declarators VariableDeclarator name dereferenced_ter ^ ^ initializer Cast type ReferenceType name ObjectType_ter ^ ^ ^ ^ expression MethodInvocation qualifier type_ter ^ ^ member dereference_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
arg 
arg 
ObjectType dereferenced = (ObjectType)type.dereference();

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member dereference_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((dereference != null)){

LocalVariableDeclaration type ReferenceType name JSType_ter ^ ^ ^ ^ declarators VariableDeclarator name type_ter ^ ^ initializer MethodInvocation arguments MemberReference member n_ter ^ ^ ^ ^ member getJSType_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
JSType type = getJSType(n);

LocalVariableDeclaration type ReferenceType name ObjectType_ter ^ ^ ^ ^ declarators VariableDeclarator name dereferenced_ter ^ ^ initializer MethodInvocation qualifier FunctionType_ter ^ ^ member dereference_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
ObjectType dereferenced = FunctionType.dereference();

LocalVariableDeclaration type ReferenceType name ObjectType_ter ^ ^ ^ ^ declarators VariableDeclarator name dereferenced_ter ^ ^ initializer MethodInvocation qualifier type_ter ^ ^ arguments MemberReference member dereference_ter ^ ^ ^ ^ member dereference_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
ObjectType dereferenced = type.dereference(dereference);


LocalVariableDeclaration type ReferenceType name ObjectType_ter ^ ^ arguments TypeArgument pattern_type ?_ter ^ ^ ^ ^ ^ ^ declarators VariableDeclarator name dereferenced_ter ^ ^ initializer MethodInvocation qualifier type_ter ^ ^ member dereference_ter ^ ^ ^ ^ ^ ^ ^ 
arg ?
arg ?
ObjectType<?> dereferenced = type.dereference();

LocalVariableDeclaration type ReferenceType name ObjectType_ter ^ ^ ^ ^ declarators VariableDeclarator name dereferenced_ter ^ ^ initializer MethodInvocation qualifier type_ter ^ ^ member n_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
ObjectType dereferenced = type.n();

IfStatement condition MemberReference member dereference_ter ^ ^ ^ ^ ^ 
if(dereference){

LocalVariableDeclaration type ReferenceType name ObjectType_ter ^ ^ ^ ^ declarators VariableDeclarator name dereferenced_ter ^ ^ initializer MemberReference member dereference_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
ObjectType dereferenced = dereference;

LocalVariableDeclaration type ReferenceType name ObjectType_ter ^ ^ ^ ^ declarators VariableDeclarator name dereferenced_ter ^ ^ initializer MethodInvocation arguments MemberReference member dereference_ter ^ ^ ^ ^ member dereference_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
ObjectType dereferenced = dereference(dereference);

LocalVariableDeclaration type ReferenceType name ObjectType_ter ^ ^ ^ ^ declarators VariableDeclarator name dereferenced_ter ^ ^ initializer MethodInvocation qualifier qualifiedName_ter ^ ^ member dereference_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
ObjectType dereferenced = qualifiedName.dereference();

LocalVariableDeclaration type ReferenceType name ObjectType_ter ^ ^ ^ ^ declarators VariableDeclarator name dereferenced_ter ^ ^ ^ ^ ^ 
arg 
arg 
ObjectType dereferenced = ;


IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member hasDisplayName_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(!type.hasDisplayName()){
return "null";}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isNoType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(!type.isNoType()){
return "null";}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isNoResolvedType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(!type.isNoResolvedType()){
return "null";}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isNoObjectType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(!type.isNoObjectType()){
return "null";}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isEmptyType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(!type.isEmptyType()){
return "null";}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isNumberObjectType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(!type.isNumberObjectType()){
return "null";}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isNumberValueType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(!type.isNumberValueType()){
return "null";}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(!type.isFunctionPrototypeType()){
return "null";}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isStringObjectType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(!type.isStringObjectType()){
return "null";}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isTheObjectType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(!type.isTheObjectType()){
return "null";}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isStringValueType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(!type.isStringValueType()){
return "null";}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(!type.isString()){
return "null";}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(!type.isNumber()){
return "null";}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isArrayType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(!type.isArrayType()){
return "null";}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isBooleanObjectType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(!type.isBooleanObjectType()){
return "null";}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isBooleanValueType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(!type.isBooleanValueType()){
return "null";}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isRegexpType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(!type.isRegexpType()){
return "null";}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isDateType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(!type.isDateType()){
return "null";}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isNullType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(!type.isNullType()){
return "null";}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isVoidType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(!type.isVoidType()){
return "null";}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isAllType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(!type.isAllType()){
return "null";}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isUnknownType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(!type.isUnknownType()){
return "null";}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isCheckedUnknownType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(!type.isCheckedUnknownType()){
return "null";}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(!type.isUnionType()){
return "null";}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isStruct_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(!type.isStruct()){
return "null";}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isDict_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(!type.isDict()){
return "null";}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isGlobalThisType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(!type.isGlobalThisType()){
return "null";}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isFunctionType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(!type.isFunctionType()){
return "null";}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isEnumElementType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(!type.isEnumElementType()){
return "null";}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(!type.isEnumType()){
return "null";}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isNamedType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(!type.isNamedType()){
return "null";}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isRecordType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(!type.isRecordType()){
return "null";}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isTemplatizedType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(!type.isTemplatizedType()){
return "null";}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isTemplateType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(!type.isTemplateType()){
return "null";}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member hasAnyTemplateTypes_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(!type.hasAnyTemplateTypes()){
return "null";}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member hasAnyTemplateTypesInternal_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(!type.hasAnyTemplateTypesInternal()){
return "null";}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isObject_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(!type.isObject()){
return "null";}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(!type.isConstructor()){
return "null";}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isNominalType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(!type.isNominalType()){
return "null";}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isNominalConstructor_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(!type.isNominalConstructor()){
return "null";}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isInstanceType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(!type.isInstanceType()){
return "null";}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isInterface_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(!type.isInterface()){
return "null";}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isOrdinaryFunction_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(!type.isOrdinaryFunction()){
return "null";}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member matchesInt32Context_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(!type.matchesInt32Context()){
return "null";}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member matchesUint32Context_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(!type.matchesUint32Context()){
return "null";}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member matchesNumberContext_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(!type.matchesNumberContext()){
return "null";}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member matchesStringContext_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(!type.matchesStringContext()){
return "null";}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member matchesObjectContext_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(!type.matchesObjectContext()){
return "null";}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member canBeCalled_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(!type.canBeCalled()){
return "null";}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isNullable_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(!type.isNullable()){
return "null";}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isResolved_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(!type.isResolved()){
return "null";}
LocalVariableDeclaration type ReferenceType name ObjectType_ter ^ ^ ^ ^ declarators VariableDeclarator name dereferenced_ter ^ ^ initializer MethodInvocation qualifier type_ter ^ ^ arguments MemberReference member dereference_ter ^ ^ ^ ^ member n_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
ObjectType dereferenced = type.n(dereference);

ReturnStatement expression BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl MethodInvocation qualifier objectType_ter ^ ^ member toString_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr MemberReference member propName_ter ^ ^ ^ ^ ^ ^ ^ 
if (true) { return ((objectType.toString() + "null") + propName); }

StatementExpression expression MethodInvocation qualifier dereferenced_ter ^ ^ member clearCachedValues_ter ^ ^ ^ ^ ^ 
dereferenced.clearCachedValues();

ContinueStatement_ter ^ 
continue;

LocalVariableDeclaration type ReferenceType name ObjectType_ter ^ ^ ^ ^ declarators VariableDeclarator name dereferenced_ter ^ ^ initializer MethodInvocation arguments MemberReference member dereference_ter ^ ^ ^ ^ member n_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
ObjectType dereferenced = n(dereference);

LocalVariableDeclaration type ReferenceType name ObjectType_ter ^ ^ ^ ^ declarators VariableDeclarator name dereferenced_ter ^ ^ initializer MethodInvocation qualifier type_ter ^ ^ arguments Literal value <string>_ter ^ ^ ^ ^ member dereference_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
ObjectType dereferenced = type.dereference("null");

condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member dereferenced_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ 
if((dereferenced != null)){
condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member dereferenced_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ 
if((dereferenced == null)){
condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member type_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ 
if((type != null)){
condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member propName_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ 
if((propName != null)){
IfStatement condition MethodInvocation qualifier dereferenced_ter ^ ^ member detectImplicitPrototypeCycle_ter ^ ^ ^ ^ ^ 
if(dereferenced.detectImplicitPrototypeCycle()){

IfStatement condition MethodInvocation qualifier dereferenced_ter ^ ^ member detectInheritanceCycle_ter ^ ^ ^ ^ ^ 
if(dereferenced.detectInheritanceCycle()){

IfStatement condition MethodInvocation qualifier dereferenced_ter ^ ^ member hasReferenceName_ter ^ ^ ^ ^ ^ 
if(dereferenced.hasReferenceName()){

IfStatement condition MethodInvocation qualifier dereferenced_ter ^ ^ member isUnknownType_ter ^ ^ ^ ^ ^ 
if(dereferenced.isUnknownType()){

IfStatement condition MethodInvocation qualifier dereferenced_ter ^ ^ member isObject_ter ^ ^ ^ ^ ^ 
if(dereferenced.isObject()){

IfStatement condition MethodInvocation qualifier dereferenced_ter ^ ^ member hasCachedValues_ter ^ ^ ^ ^ ^ 
if(dereferenced.hasCachedValues()){

IfStatement condition MethodInvocation qualifier dereferenced_ter ^ ^ member isNativeObjectType_ter ^ ^ ^ ^ ^ 
if(dereferenced.isNativeObjectType()){

IfStatement condition MethodInvocation qualifier dereferenced_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ ^ 
if(dereferenced.isFunctionPrototypeType()){

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier objectType_ter ^ ^ member getConstructor_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((objectType.getConstructor() != null)){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member dereferenced_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier dereferenced_ter ^ ^ member detectImplicitPrototypeCycle_ter ^ ^ ^ ^ ^ ^ ^ 
if(((dereferenced != null) && dereferenced.detectImplicitPrototypeCycle())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member dereferenced_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier dereferenced_ter ^ ^ member detectInheritanceCycle_ter ^ ^ ^ ^ ^ ^ ^ 
if(((dereferenced != null) && dereferenced.detectInheritanceCycle())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member dereferenced_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier dereferenced_ter ^ ^ member hasReferenceName_ter ^ ^ ^ ^ ^ ^ ^ 
if(((dereferenced != null) && dereferenced.hasReferenceName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member dereferenced_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier dereferenced_ter ^ ^ member isUnknownType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((dereferenced != null) && dereferenced.isUnknownType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member dereferenced_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier dereferenced_ter ^ ^ member isObject_ter ^ ^ ^ ^ ^ ^ ^ 
if(((dereferenced != null) && dereferenced.isObject())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member dereferenced_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier dereferenced_ter ^ ^ member hasCachedValues_ter ^ ^ ^ ^ ^ ^ ^ 
if(((dereferenced != null) && dereferenced.hasCachedValues())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member dereferenced_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier dereferenced_ter ^ ^ member isNativeObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((dereferenced != null) && dereferenced.isNativeObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member dereferenced_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier dereferenced_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((dereferenced != null) && dereferenced.isFunctionPrototypeType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier objectType_ter ^ ^ member getConstructor_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier objectType_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((objectType.getConstructor() != null) || objectType.isFunctionPrototypeType())){

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.toObjectType() != null)){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member dereferenced_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member dereferenced_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((dereferenced != null) && (dereferenced == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))){

IfStatement condition MemberReference member dereferenced_ter ^ ^ ^ ^ ^ 
if(dereferenced){

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.toObjectType().getConstructor() != null)){

IfStatement condition BinaryOperation operator +_ter ^ ^ operandl MethodInvocation qualifier objectType_ter ^ ^ member toString_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ 
if((objectType.toString() + "null")){

StatementExpression expression MethodInvocation qualifier dereferenced_ter ^ ^ member clearCachedValues_ter ^ ^ ^ ^ ^ 
dereferenced.clearCachedValues();

condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member objectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ 
if((objectType != null)){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member dereferenced_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier dereferenced_ter ^ ^ member detectImplicitPrototypeCycle_ter ^ ^ ^ ^ ^ ^ ^ 
if(((dereferenced != null) && !dereferenced.detectImplicitPrototypeCycle())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member dereferenced_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier dereferenced_ter ^ ^ member detectInheritanceCycle_ter ^ ^ ^ ^ ^ ^ ^ 
if(((dereferenced != null) && !dereferenced.detectInheritanceCycle())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member dereferenced_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier dereferenced_ter ^ ^ member hasReferenceName_ter ^ ^ ^ ^ ^ ^ ^ 
if(((dereferenced != null) && !dereferenced.hasReferenceName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member dereferenced_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier dereferenced_ter ^ ^ member isUnknownType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((dereferenced != null) && !dereferenced.isUnknownType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member dereferenced_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier dereferenced_ter ^ ^ member isObject_ter ^ ^ ^ ^ ^ ^ ^ 
if(((dereferenced != null) && !dereferenced.isObject())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member dereferenced_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier dereferenced_ter ^ ^ member hasCachedValues_ter ^ ^ ^ ^ ^ ^ ^ 
if(((dereferenced != null) && !dereferenced.hasCachedValues())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member dereferenced_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier dereferenced_ter ^ ^ member isNativeObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((dereferenced != null) && !dereferenced.isNativeObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member dereferenced_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier dereferenced_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((dereferenced != null) && !dereferenced.isFunctionPrototypeType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member dereferenced_ter ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member dereferenced_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((dereferenced && (dereferenced != null))){

IfStatement condition MethodInvocation qualifier dereferenced_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ ^ 
if(dereferenced.isEmpty()){

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member dereferenced_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((dereferenced != null)){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member dereferenced_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier dereferenced_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ ^ ^ ^ 
if(((dereferenced != null) && dereferenced.isEmpty())){

IfStatement condition MemberReference prefix_operators !_ter ^ ^ member dereferenced_ter ^ ^ ^ ^ ^ 
if(!dereferenced){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier dereferenced_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ ^ 
if(!dereferenced.isEmpty()){

ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if (true) { return "null"; }

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier dereferenced_ter ^ ^ member detectImplicitPrototypeCycle_ter ^ ^ ^ ^ ^ 
if(!dereferenced.detectImplicitPrototypeCycle()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier dereferenced_ter ^ ^ member detectInheritanceCycle_ter ^ ^ ^ ^ ^ 
if(!dereferenced.detectInheritanceCycle()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier dereferenced_ter ^ ^ member hasReferenceName_ter ^ ^ ^ ^ ^ 
if(!dereferenced.hasReferenceName()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier dereferenced_ter ^ ^ member isUnknownType_ter ^ ^ ^ ^ ^ 
if(!dereferenced.isUnknownType()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier dereferenced_ter ^ ^ member isObject_ter ^ ^ ^ ^ ^ 
if(!dereferenced.isObject()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier dereferenced_ter ^ ^ member hasCachedValues_ter ^ ^ ^ ^ ^ 
if(!dereferenced.hasCachedValues()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier dereferenced_ter ^ ^ member isNativeObjectType_ter ^ ^ ^ ^ ^ 
if(!dereferenced.isNativeObjectType()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier dereferenced_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ ^ 
if(!dereferenced.isFunctionPrototypeType()){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member dereferenced_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier dereferenced_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ ^ ^ ^ 
if(((dereferenced != null) && !dereferenced.isEmpty())){

condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member dereference_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ 
if((dereference != null)){
condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member dereferenced_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ 
if((dereferenced != "null")){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member dereferenced_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier dereferenced_ter ^ ^ member detectImplicitPrototypeCycle_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((dereferenced != null) && (dereferenced.detectImplicitPrototypeCycle() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member dereferenced_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier dereferenced_ter ^ ^ member detectInheritanceCycle_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((dereferenced != null) && (dereferenced.detectInheritanceCycle() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member dereferenced_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier dereferenced_ter ^ ^ member hasReferenceName_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((dereferenced != null) && (dereferenced.hasReferenceName() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member dereferenced_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier dereferenced_ter ^ ^ member isUnknownType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((dereferenced != null) && (dereferenced.isUnknownType() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member dereferenced_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier dereferenced_ter ^ ^ member isObject_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((dereferenced != null) && (dereferenced.isObject() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member dereferenced_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier dereferenced_ter ^ ^ member hasCachedValues_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((dereferenced != null) && (dereferenced.hasCachedValues() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member dereferenced_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier dereferenced_ter ^ ^ member isNativeObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((dereferenced != null) && (dereferenced.isNativeObjectType() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member dereferenced_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier dereferenced_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((dereferenced != null) && (dereferenced.isFunctionPrototypeType() != null))){



IfStatement condition MemberReference member dereference_ter ^ ^ ^ ^ ^ 
if(dereference){

StatementExpression expression Assignment expressionl MemberReference member objectType_ter ^ ^ ^ ^ value MethodInvocation qualifier objectType_ter ^ ^ member getImplicitPrototype_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
objectType = objectType.getImplicitPrototype();

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){

IfStatement condition MethodInvocation qualifier dereferenced_ter ^ ^ arguments MemberReference member dereferenced_ter ^ ^ ^ ^ member detectImplicitPrototypeCycle_ter ^ ^ ^ ^ ^ 
if(dereferenced.detectImplicitPrototypeCycle(dereferenced)){

IfStatement condition MethodInvocation qualifier dereferenced_ter ^ ^ arguments MemberReference member dereferenced_ter ^ ^ ^ ^ member detectInheritanceCycle_ter ^ ^ ^ ^ ^ 
if(dereferenced.detectInheritanceCycle(dereferenced)){

IfStatement condition MethodInvocation qualifier dereferenced_ter ^ ^ arguments MemberReference member dereferenced_ter ^ ^ ^ ^ member hasReferenceName_ter ^ ^ ^ ^ ^ 
if(dereferenced.hasReferenceName(dereferenced)){

IfStatement condition MethodInvocation qualifier dereferenced_ter ^ ^ arguments MemberReference member dereferenced_ter ^ ^ ^ ^ member isUnknownType_ter ^ ^ ^ ^ ^ 
if(dereferenced.isUnknownType(dereferenced)){

IfStatement condition MethodInvocation qualifier dereferenced_ter ^ ^ arguments MemberReference member dereferenced_ter ^ ^ ^ ^ member isObject_ter ^ ^ ^ ^ ^ 
if(dereferenced.isObject(dereferenced)){

IfStatement condition MethodInvocation qualifier dereferenced_ter ^ ^ arguments MemberReference member dereferenced_ter ^ ^ ^ ^ member hasCachedValues_ter ^ ^ ^ ^ ^ 
if(dereferenced.hasCachedValues(dereferenced)){

IfStatement condition MethodInvocation qualifier dereferenced_ter ^ ^ arguments MemberReference member dereferenced_ter ^ ^ ^ ^ member isNativeObjectType_ter ^ ^ ^ ^ ^ 
if(dereferenced.isNativeObjectType(dereferenced)){

IfStatement condition MethodInvocation qualifier dereferenced_ter ^ ^ arguments MemberReference member dereferenced_ter ^ ^ ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ ^ 
if(dereferenced.isFunctionPrototypeType(dereferenced)){

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member dereferenced_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if((dereferenced != null)){
return "null";}
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member dereferenced_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member objectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((dereferenced != null) && (objectType != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member dereferenced_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier objectType_ter ^ ^ arguments MemberReference member propName_ter ^ ^ ^ ^ member hasOwnProperty_ter ^ ^ ^ ^ ^ ^ ^ 
if(((dereferenced != null) && !objectType.hasOwnProperty(propName))){

StatementExpression expression Assignment expressionl MemberReference member objectType_ter ^ ^ ^ ^ value MethodInvocation qualifier FunctionType_ter ^ ^ arguments MemberReference member objectType_ter ^ ^ ^ MemberReference member propName_ter ^ ^ ^ ^ member getTopDefiningInterface_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
objectType = FunctionType.getTopDefiningInterface(objectType, propName);

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member dereferenced_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier objectType_ter ^ ^ selectors MethodInvocation member isInterface_ter ^ ^ ^ ^ member getConstructor_ter ^ ^ ^ ^ ^ ^ ^ 
if(((dereferenced != null) && objectType.getConstructor().isInterface())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member dereferenced_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator +_ter ^ ^ operandl MethodInvocation qualifier objectType_ter ^ ^ member toString_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((dereferenced != null) && (objectType.toString() + "null"))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member dereferenced_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier objectType_ter ^ ^ member getConstructor_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((dereferenced != null) && (objectType.getConstructor() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier objectType_ter ^ ^ member getConstructor_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member dereferenced_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((objectType.getConstructor() != null) && (dereferenced != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member objectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member dereferenced_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((objectType != null) && (dereferenced != null))){

IfStatement condition MethodInvocation qualifier dereferenced_ter ^ ^ member detectImplicitPrototypeCycle_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(dereferenced.detectImplicitPrototypeCycle()){
return "null";}
IfStatement condition MethodInvocation qualifier dereferenced_ter ^ ^ member detectInheritanceCycle_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(dereferenced.detectInheritanceCycle()){
return "null";}
IfStatement condition MethodInvocation qualifier dereferenced_ter ^ ^ member hasReferenceName_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(dereferenced.hasReferenceName()){
return "null";}
IfStatement condition MethodInvocation qualifier dereferenced_ter ^ ^ member isUnknownType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(dereferenced.isUnknownType()){
return "null";}
IfStatement condition MethodInvocation qualifier dereferenced_ter ^ ^ member isObject_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(dereferenced.isObject()){
return "null";}
IfStatement condition MethodInvocation qualifier dereferenced_ter ^ ^ member hasCachedValues_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(dereferenced.hasCachedValues()){
return "null";}
IfStatement condition MethodInvocation qualifier dereferenced_ter ^ ^ member isNativeObjectType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(dereferenced.isNativeObjectType()){
return "null";}
IfStatement condition MethodInvocation qualifier dereferenced_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(dereferenced.isFunctionPrototypeType()){
return "null";}
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member dereferenced_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member type_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((dereferenced != null) && (type != null))){

condition BinaryOperation operator >_ter ^ ^ operandl MemberReference member dereferenced_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ 
if((dereferenced > null)){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member dereferenced_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((dereferenced != null) && (type.toObjectType().getConstructor() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member dereferenced_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MemberReference member dereferenced_ter ^ ^ ^ ^ ^ ^ ^ 
if(((dereferenced != null) && dereferenced)){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member dereferenced_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((dereferenced != null) && (type.toObjectType() != null))){

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member dereferenced_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if((dereferenced == null)){
return "null";}
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member dereferenced_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member dereferenced_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((dereferenced != null) && (dereferenced != null))){

IfStatement condition MethodInvocation qualifier objectType_ter ^ ^ member getConstructor_ter ^ ^ ^ ^ ^ 
if(objectType.getConstructor()){

condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ 
if((n != null)){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member dereferenced_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier dereferenced_ter ^ ^ member detectImplicitPrototypeCycle_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((dereferenced != null) && (dereferenced.detectImplicitPrototypeCycle() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member dereferenced_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier dereferenced_ter ^ ^ member detectInheritanceCycle_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((dereferenced != null) && (dereferenced.detectInheritanceCycle() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member dereferenced_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier dereferenced_ter ^ ^ member hasReferenceName_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((dereferenced != null) && (dereferenced.hasReferenceName() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member dereferenced_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier dereferenced_ter ^ ^ member isUnknownType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((dereferenced != null) && (dereferenced.isUnknownType() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member dereferenced_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier dereferenced_ter ^ ^ member isObject_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((dereferenced != null) && (dereferenced.isObject() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member dereferenced_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier dereferenced_ter ^ ^ member hasCachedValues_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((dereferenced != null) && (dereferenced.hasCachedValues() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member dereferenced_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier dereferenced_ter ^ ^ member isNativeObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((dereferenced != null) && (dereferenced.isNativeObjectType() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member dereferenced_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier dereferenced_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((dereferenced != null) && (dereferenced.isFunctionPrototypeType() == null))){

StatementExpression expression MethodInvocation qualifier type_ter ^ ^ member clearResolved_ter ^ ^ ^ ^ ^ 
type.clearResolved();

StatementExpression expression Assignment expressionl MemberReference member type_ter ^ ^ ^ ^ value MemberReference member dereferenced_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
type = dereferenced;

StatementExpression expression Assignment expressionl MemberReference member objectType_ter ^ ^ ^ ^ value MethodInvocation qualifier objectType_ter ^ ^ member getImplicitPrototype_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
objectType = objectType.getImplicitPrototype();

StatementExpression expression Assignment expressionl MemberReference member objectType_ter ^ ^ ^ ^ value MethodInvocation qualifier FunctionType_ter ^ ^ arguments MemberReference member objectType_ter ^ ^ ^ MemberReference member propName_ter ^ ^ ^ ^ member getTopDefiningInterface_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
objectType = FunctionType.getTopDefiningInterface(objectType, propName);

ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if (true) { return "null"; }

StatementExpression expression Assignment expressionl MemberReference member objectType_ter ^ ^ ^ ^ value MethodInvocation qualifier objectType_ter ^ ^ member getImplicitPrototype_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
objectType = objectType.getImplicitPrototype();


StatementExpression expression Assignment expressionl MemberReference member objectType_ter ^ ^ ^ ^ value MethodInvocation qualifier FunctionType_ter ^ ^ arguments MemberReference member objectType_ter ^ ^ ^ MemberReference member propName_ter ^ ^ ^ ^ member getTopDefiningInterface_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
objectType = FunctionType.getTopDefiningInterface(objectType, propName);

StatementExpression expression Assignment expressionl MemberReference member dereferenced_ter ^ ^ ^ ^ value MemberReference member dereferenced_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
dereferenced = dereferenced;

BreakStatement_ter ^ 
break;

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member dereferenced_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((dereferenced != null)){

StatementExpression expression Assignment expressionl MemberReference member type_ter ^ ^ ^ ^ value Literal value null_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
type = null;

StatementExpression expression Assignment expressionl MemberReference member type_ter ^ ^ ^ ^ value MemberReference member type_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
type = type;

ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
return "null";
StatementExpression expression Assignment expressionl MemberReference member type_ter ^ ^ ^ ^ value MethodInvocation qualifier dereferenced_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
type = dereferenced.toObjectType();

ReturnStatement expression MemberReference member qualifiedName_ter ^ ^ ^ ^ ^ 
if (true) { return qualifiedName; }

StatementExpression expression MethodInvocation qualifier dereferenced_ter ^ ^ member clearCachedValues_ter ^ ^ ^ ^ ^ 
dereferenced.clearCachedValues();

ReturnStatement expression MethodInvocation qualifier type_ter ^ ^ member toString_ter ^ ^ ^ ^ ^ 
if (true) { return type.toString(); }

StatementExpression expression MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ ^ 
type.isFunctionPrototypeType();

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isFunctionType_ter ^ ^ ^ ^ ^ 
if(type.isFunctionType()){

StatementExpression expression Assignment expressionl MemberReference member type_ter ^ ^ ^ ^ value MemberReference member propName_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
type = propName;

ReturnStatement_ter ^ 
return;

StatementExpression expression Assignment expressionl MemberReference member type_ter ^ ^ ^ ^ value MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
type = type.isFunctionPrototypeType();

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member qualifiedName_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((qualifiedName != null)){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){

StatementExpression expression MemberReference postfix_operators ++_ter ^ ^ member dereferenced_ter ^ ^ ^ ^ ^ 
dereferenced++;

StatementExpression expression Assignment expressionl MemberReference member type_ter ^ ^ ^ ^ value Literal value false_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
type = false;

ContinueStatement_ter ^ 
continue;

ReturnStatement_ter ^ 
if (true) { return;
 }

StatementExpression expression Assignment expressionl MemberReference member type_ter ^ ^ ^ ^ value MethodInvocation qualifier dereferenced_ter ^ ^ member clearCachedValues_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
type = dereferenced.clearCachedValues();

IfStatement condition MemberReference member dereference_ter ^ ^ ^ ^ ^ 
if(dereference){

StatementExpression expression Assignment expressionl MemberReference member type_ter ^ ^ ^ ^ value MemberReference member dereference_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
type = dereference;

IfStatement condition MemberReference member dereferenced_ter ^ ^ ^ ^ ^ 
if(dereferenced){


StatementExpression expression Assignment expressionl MemberReference member type_ter ^ ^ ^ ^ value MemberReference member objectType_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
type = objectType;

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier objectType_ter ^ ^ member getConstructor_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((objectType.getConstructor() != null)){

ReturnStatement expression MemberReference member qualifiedName_ter ^ ^ ^ ^ ^ 
return qualifiedName;
StatementExpression expression Assignment expressionl MemberReference member type_ter ^ ^ ^ ^ value Literal value null_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
type = null;

StatementExpression expression Assignment expressionl MemberReference member type_ter ^ ^ ^ ^ value Literal value true_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
type = true;

StatementExpression expression MethodInvocation qualifier type_ter ^ ^ member clearResolved_ter ^ ^ ^ ^ ^ 
type.clearResolved();

StatementExpression expression Assignment expressionl MemberReference member type_ter ^ ^ ^ ^ value MethodInvocation prefix_operators !_ter ^ ^ qualifier objectType_ter ^ ^ arguments MemberReference member propName_ter ^ ^ ^ ^ member hasOwnProperty_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
type = !objectType.hasOwnProperty(propName);

StatementExpression expression MemberReference postfix_operators --_ter ^ ^ member dereferenced_ter ^ ^ ^ ^ ^ 
dereferenced--;

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))){

condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member hasDisplayName_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.hasDisplayName() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isNoType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isNoType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isNoResolvedType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isNoResolvedType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isNoObjectType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isNoObjectType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isEmptyType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isEmptyType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isNumberObjectType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isNumberObjectType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isNumberValueType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isNumberValueType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isStringObjectType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isStringObjectType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isTheObjectType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isTheObjectType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isStringValueType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isStringValueType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isString_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isString() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isNumber_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isNumber() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isArrayType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isArrayType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isBooleanObjectType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isBooleanObjectType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isBooleanValueType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isBooleanValueType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isRegexpType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isRegexpType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isDateType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isDateType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isNullType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isNullType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isVoidType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isVoidType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isAllType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isAllType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isUnknownType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isUnknownType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isCheckedUnknownType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isCheckedUnknownType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isUnionType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isStruct_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isStruct() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isDict_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isDict() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isGlobalThisType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isGlobalThisType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isEnumElementType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isEnumElementType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isEnumType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isNamedType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isNamedType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isRecordType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isRecordType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isTemplatizedType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isTemplatizedType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isTemplateType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isTemplateType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member hasAnyTemplateTypes_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.hasAnyTemplateTypes() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member hasAnyTemplateTypesInternal_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.hasAnyTemplateTypesInternal() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isObject_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isObject() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isConstructor() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isNominalType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isNominalType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isNominalConstructor_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isNominalConstructor() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isInstanceType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isInstanceType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isInterface_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isInterface() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isOrdinaryFunction_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isOrdinaryFunction() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member matchesInt32Context_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.matchesInt32Context() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member matchesUint32Context_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.matchesUint32Context() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member matchesNumberContext_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.matchesNumberContext() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member matchesStringContext_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.matchesStringContext() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member matchesObjectContext_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.matchesObjectContext() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member canBeCalled_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.canBeCalled() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isNullable_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isNullable() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isResolved_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isResolved() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ ^ 
if(type.isFunctionPrototypeType()){

condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.toObjectType().getConstructor() != null)){

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.toObjectType() != null)){

condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member getConstructor_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.getConstructor() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){

condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() == null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member getImplicitPrototype_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.getImplicitPrototype() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member getName_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.getName() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){

condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toString_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.toString() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member getLastChild_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.getLastChild() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier objectType_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((objectType.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){

ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if (true) { return "null"; }

condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member getQualifiedName_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.getQualifiedName() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier propName_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((propName.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier dereference_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((dereference.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
IfStatement condition MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ ^ 
if(type.toObjectType().getConstructor()){

condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((n.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
BreakStatement_ter ^ 
break;

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((type.toObjectType() != null) && ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){

condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier dereferenced_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((dereferenced.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member hasDisplayName_ter ^ ^ ^ ^ ^ 
if(type.hasDisplayName()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isNoType_ter ^ ^ ^ ^ ^ 
if(type.isNoType()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isNoResolvedType_ter ^ ^ ^ ^ ^ 
if(type.isNoResolvedType()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isNoObjectType_ter ^ ^ ^ ^ ^ 
if(type.isNoObjectType()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isEmptyType_ter ^ ^ ^ ^ ^ 
if(type.isEmptyType()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isNumberObjectType_ter ^ ^ ^ ^ ^ 
if(type.isNumberObjectType()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isNumberValueType_ter ^ ^ ^ ^ ^ 
if(type.isNumberValueType()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isStringObjectType_ter ^ ^ ^ ^ ^ 
if(type.isStringObjectType()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isTheObjectType_ter ^ ^ ^ ^ ^ 
if(type.isTheObjectType()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isStringValueType_ter ^ ^ ^ ^ ^ 
if(type.isStringValueType()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ 
if(type.isString()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ 
if(type.isNumber()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isArrayType_ter ^ ^ ^ ^ ^ 
if(type.isArrayType()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isBooleanObjectType_ter ^ ^ ^ ^ ^ 
if(type.isBooleanObjectType()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isBooleanValueType_ter ^ ^ ^ ^ ^ 
if(type.isBooleanValueType()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isRegexpType_ter ^ ^ ^ ^ ^ 
if(type.isRegexpType()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isDateType_ter ^ ^ ^ ^ ^ 
if(type.isDateType()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isNullType_ter ^ ^ ^ ^ ^ 
if(type.isNullType()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isVoidType_ter ^ ^ ^ ^ ^ 
if(type.isVoidType()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isAllType_ter ^ ^ ^ ^ ^ 
if(type.isAllType()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isUnknownType_ter ^ ^ ^ ^ ^ 
if(type.isUnknownType()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isCheckedUnknownType_ter ^ ^ ^ ^ ^ 
if(type.isCheckedUnknownType()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
if(type.isUnionType()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isStruct_ter ^ ^ ^ ^ ^ 
if(type.isStruct()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isDict_ter ^ ^ ^ ^ ^ 
if(type.isDict()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isGlobalThisType_ter ^ ^ ^ ^ ^ 
if(type.isGlobalThisType()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isFunctionType_ter ^ ^ ^ ^ ^ 
if(type.isFunctionType()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isEnumElementType_ter ^ ^ ^ ^ ^ 
if(type.isEnumElementType()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ 
if(type.isEnumType()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isNamedType_ter ^ ^ ^ ^ ^ 
if(type.isNamedType()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isRecordType_ter ^ ^ ^ ^ ^ 
if(type.isRecordType()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isTemplatizedType_ter ^ ^ ^ ^ ^ 
if(type.isTemplatizedType()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isTemplateType_ter ^ ^ ^ ^ ^ 
if(type.isTemplateType()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member hasAnyTemplateTypes_ter ^ ^ ^ ^ ^ 
if(type.hasAnyTemplateTypes()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member hasAnyTemplateTypesInternal_ter ^ ^ ^ ^ ^ 
if(type.hasAnyTemplateTypesInternal()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isObject_ter ^ ^ ^ ^ ^ 
if(type.isObject()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ ^ 
if(type.isConstructor()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isNominalType_ter ^ ^ ^ ^ ^ 
if(type.isNominalType()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isNominalConstructor_ter ^ ^ ^ ^ ^ 
if(type.isNominalConstructor()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isInstanceType_ter ^ ^ ^ ^ ^ 
if(type.isInstanceType()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isInterface_ter ^ ^ ^ ^ ^ 
if(type.isInterface()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isOrdinaryFunction_ter ^ ^ ^ ^ ^ 
if(type.isOrdinaryFunction()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member matchesInt32Context_ter ^ ^ ^ ^ ^ 
if(type.matchesInt32Context()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member matchesUint32Context_ter ^ ^ ^ ^ ^ 
if(type.matchesUint32Context()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member matchesNumberContext_ter ^ ^ ^ ^ ^ 
if(type.matchesNumberContext()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member matchesStringContext_ter ^ ^ ^ ^ ^ 
if(type.matchesStringContext()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member matchesObjectContext_ter ^ ^ ^ ^ ^ 
if(type.matchesObjectContext()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member canBeCalled_ter ^ ^ ^ ^ ^ 
if(type.canBeCalled()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isNullable_ter ^ ^ ^ ^ ^ 
if(type.isNullable()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isResolved_ter ^ ^ ^ ^ ^ 
if(type.isResolved()){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){

condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member dereference_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() || ((type.dereference() != null) && (type.toObjectType().getConstructor() != null)))){
StatementExpression expression Assignment expressionl MemberReference member type_ter ^ ^ ^ ^ value MemberReference member dereferenced_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
type = dereferenced;

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((type.toObjectType() != null) || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){

StatementExpression expression Assignment expressionl MemberReference member objectType_ter ^ ^ ^ ^ value MethodInvocation qualifier objectType_ter ^ ^ member getImplicitPrototype_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
objectType = objectType.getImplicitPrototype();

StatementExpression expression Assignment expressionl MemberReference member objectType_ter ^ ^ ^ ^ value MethodInvocation qualifier FunctionType_ter ^ ^ arguments MemberReference member objectType_ter ^ ^ ^ MemberReference member propName_ter ^ ^ ^ ^ member getTopDefiningInterface_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
objectType = FunctionType.getTopDefiningInterface(objectType, propName);

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member hasDisplayName_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.hasDisplayName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isNoType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isNoType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isNoResolvedType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isNoResolvedType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isNoObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isNoObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isEmptyType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isEmptyType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isNumberObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isNumberObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isNumberValueType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isNumberValueType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isFunctionPrototypeType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isStringObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isStringObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isTheObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isTheObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isStringValueType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isStringValueType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isString())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isNumber())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isArrayType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isArrayType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isBooleanObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isBooleanObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isBooleanValueType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isBooleanValueType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isRegexpType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isRegexpType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isDateType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isDateType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isNullType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isNullType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isVoidType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isVoidType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isAllType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isAllType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isUnknownType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isUnknownType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isCheckedUnknownType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isCheckedUnknownType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isUnionType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isStruct_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isStruct())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isDict_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isDict())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isGlobalThisType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isGlobalThisType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isFunctionType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isFunctionType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isEnumElementType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isEnumElementType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isEnumType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isNamedType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isNamedType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isRecordType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isRecordType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isTemplatizedType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isTemplatizedType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isTemplateType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isTemplateType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member hasAnyTemplateTypes_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.hasAnyTemplateTypes())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member hasAnyTemplateTypesInternal_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.hasAnyTemplateTypesInternal())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isObject_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isObject())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isConstructor())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isNominalType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isNominalType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isNominalConstructor_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isNominalConstructor())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isInstanceType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isInstanceType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isInterface_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isInterface())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isOrdinaryFunction_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isOrdinaryFunction())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member matchesInt32Context_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.matchesInt32Context())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member matchesUint32Context_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.matchesUint32Context())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member matchesNumberContext_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.matchesNumberContext())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member matchesStringContext_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.matchesStringContext())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member matchesObjectContext_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.matchesObjectContext())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member canBeCalled_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.canBeCalled())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isNullable_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isNullable())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isResolved_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isResolved())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member hasDisplayName_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.hasDisplayName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isNoType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isNoType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isNoResolvedType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isNoResolvedType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isNoObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isNoObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isEmptyType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isEmptyType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isNumberObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isNumberObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isNumberValueType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isNumberValueType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isFunctionPrototypeType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isStringObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isStringObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isTheObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isTheObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isStringValueType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isStringValueType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isString())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isNumber())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isArrayType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isArrayType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isBooleanObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isBooleanObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isBooleanValueType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isBooleanValueType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isRegexpType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isRegexpType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isDateType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isDateType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isNullType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isNullType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isVoidType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isVoidType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isAllType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isAllType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isUnknownType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isUnknownType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isCheckedUnknownType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isCheckedUnknownType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isUnionType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isStruct_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isStruct())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isDict_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isDict())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isGlobalThisType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isGlobalThisType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isFunctionType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isFunctionType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isEnumElementType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isEnumElementType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isEnumType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isNamedType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isNamedType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isRecordType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isRecordType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isTemplatizedType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isTemplatizedType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isTemplateType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isTemplateType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member hasAnyTemplateTypes_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.hasAnyTemplateTypes())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member hasAnyTemplateTypesInternal_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.hasAnyTemplateTypesInternal())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isObject_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isObject())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isConstructor())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isNominalType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isNominalType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isNominalConstructor_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isNominalConstructor())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isInstanceType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isInstanceType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isInterface_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isInterface())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isOrdinaryFunction_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isOrdinaryFunction())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member matchesInt32Context_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.matchesInt32Context())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member matchesUint32Context_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.matchesUint32Context())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member matchesNumberContext_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.matchesNumberContext())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member matchesStringContext_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.matchesStringContext())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member matchesObjectContext_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.matchesObjectContext())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member canBeCalled_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.canBeCalled())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isNullable_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isNullable())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isResolved_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isResolved())){

condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier FunctionType_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((FunctionType.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member isFunctionPrototypeType_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().isFunctionPrototypeType() != null)))){
IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member dereferenced_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((dereferenced != null)){

condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getImplicitPrototype_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getImplicitPrototype() != null)))){
ReturnStatement expression MemberReference member qualifiedName_ter ^ ^ ^ ^ ^ 
if (true) { return qualifiedName; }

ReturnStatement expression MethodInvocation qualifier type_ter ^ ^ member toString_ter ^ ^ ^ ^ ^ 
if (true) { return type.toString(); }

condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member toString_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().toString() != null)))){
IfStatement condition MemberReference member dereference_ter ^ ^ ^ ^ ^ 
if(dereference){

StatementExpression expression MethodInvocation qualifier type_ter ^ ^ member clearResolved_ter ^ ^ ^ ^ ^ 
type.clearResolved();

condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getLastChild_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getLastChild() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getQualifiedName_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getQualifiedName() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getName_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getName() != null)))){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member hasDisplayName_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.hasDisplayName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isNoType_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isNoType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isNoResolvedType_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isNoResolvedType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isNoObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isNoObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isEmptyType_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isEmptyType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isNumberObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isNumberObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isNumberValueType_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isNumberValueType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isFunctionPrototypeType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isStringObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isStringObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isTheObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isTheObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isStringValueType_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isStringValueType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isString())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isNumber())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isArrayType_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isArrayType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isBooleanObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isBooleanObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isBooleanValueType_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isBooleanValueType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isRegexpType_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isRegexpType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isDateType_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isDateType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isNullType_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isNullType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isVoidType_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isVoidType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isAllType_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isAllType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isUnknownType_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isUnknownType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isCheckedUnknownType_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isCheckedUnknownType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isUnionType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isStruct_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isStruct())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isDict_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isDict())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isGlobalThisType_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isGlobalThisType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isFunctionType_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isFunctionType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isEnumElementType_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isEnumElementType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isEnumType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isNamedType_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isNamedType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isRecordType_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isRecordType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isTemplatizedType_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isTemplatizedType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isTemplateType_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isTemplateType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member hasAnyTemplateTypes_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.hasAnyTemplateTypes())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member hasAnyTemplateTypesInternal_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.hasAnyTemplateTypesInternal())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isObject_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isObject())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isConstructor())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isNominalType_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isNominalType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isNominalConstructor_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isNominalConstructor())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isInstanceType_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isInstanceType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isInterface_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isInterface())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isOrdinaryFunction_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isOrdinaryFunction())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member matchesInt32Context_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.matchesInt32Context())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member matchesUint32Context_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.matchesUint32Context())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member matchesNumberContext_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.matchesNumberContext())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member matchesStringContext_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.matchesStringContext())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member matchesObjectContext_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.matchesObjectContext())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member canBeCalled_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.canBeCalled())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isNullable_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isNullable())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isResolved_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isResolved())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member objectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier objectType_ter ^ ^ member getConstructor_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier objectType_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((objectType != null) && ((objectType.getConstructor() != null) || objectType.isFunctionPrototypeType()))){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier objectType_ter ^ ^ member getConstructor_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier objectType_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((objectType.getConstructor() != null) || objectType.isFunctionPrototypeType())){

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member qualifiedName_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((qualifiedName != null)){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))){

condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member hasDisplayName_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.hasDisplayName() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isNoType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isNoType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isNoResolvedType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isNoResolvedType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isNoObjectType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isNoObjectType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isEmptyType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isEmptyType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isNumberObjectType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isNumberObjectType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isNumberValueType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isNumberValueType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isStringObjectType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isStringObjectType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isTheObjectType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isTheObjectType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isStringValueType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isStringValueType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isString_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isString() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isNumber_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isNumber() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isArrayType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isArrayType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isBooleanObjectType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isBooleanObjectType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isBooleanValueType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isBooleanValueType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isRegexpType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isRegexpType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isDateType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isDateType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isNullType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isNullType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isVoidType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isVoidType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isAllType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isAllType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isUnknownType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isUnknownType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isCheckedUnknownType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isCheckedUnknownType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isUnionType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isStruct_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isStruct() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isDict_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isDict() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isGlobalThisType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isGlobalThisType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isEnumElementType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isEnumElementType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isEnumType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isNamedType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isNamedType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isRecordType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isRecordType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isTemplatizedType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isTemplatizedType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isTemplateType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isTemplateType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member hasAnyTemplateTypes_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.hasAnyTemplateTypes() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member hasAnyTemplateTypesInternal_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.hasAnyTemplateTypesInternal() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isObject_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isObject() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isConstructor() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isNominalType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isNominalType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isNominalConstructor_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isNominalConstructor() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isInstanceType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isInstanceType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isInterface_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isInterface() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isOrdinaryFunction_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isOrdinaryFunction() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member matchesInt32Context_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.matchesInt32Context() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member matchesUint32Context_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.matchesUint32Context() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member matchesNumberContext_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.matchesNumberContext() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member matchesStringContext_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.matchesStringContext() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member matchesObjectContext_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.matchesObjectContext() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member canBeCalled_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.canBeCalled() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isNullable_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isNullable() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isResolved_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isResolved() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ ^ 
if(type.isFunctionPrototypeType()){

condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.toObjectType().getConstructor() != null)){

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.toObjectType() != null)){

condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member getConstructor_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.getConstructor() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){

condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() == null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member getImplicitPrototype_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.getImplicitPrototype() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member getName_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.getName() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){

condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toString_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.toString() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member getLastChild_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.getLastChild() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier objectType_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((objectType.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){

ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if (true) { return "null"; }

condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member getQualifiedName_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.getQualifiedName() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier propName_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((propName.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier dereference_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((dereference.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
IfStatement condition MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ ^ 
if(type.toObjectType().getConstructor()){

condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((n.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
BreakStatement_ter ^ 
break;

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((type.toObjectType() != null) && ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){

condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier dereferenced_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((dereferenced.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member hasDisplayName_ter ^ ^ ^ ^ ^ 
if(type.hasDisplayName()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isNoType_ter ^ ^ ^ ^ ^ 
if(type.isNoType()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isNoResolvedType_ter ^ ^ ^ ^ ^ 
if(type.isNoResolvedType()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isNoObjectType_ter ^ ^ ^ ^ ^ 
if(type.isNoObjectType()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isEmptyType_ter ^ ^ ^ ^ ^ 
if(type.isEmptyType()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isNumberObjectType_ter ^ ^ ^ ^ ^ 
if(type.isNumberObjectType()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isNumberValueType_ter ^ ^ ^ ^ ^ 
if(type.isNumberValueType()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isStringObjectType_ter ^ ^ ^ ^ ^ 
if(type.isStringObjectType()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isTheObjectType_ter ^ ^ ^ ^ ^ 
if(type.isTheObjectType()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isStringValueType_ter ^ ^ ^ ^ ^ 
if(type.isStringValueType()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ 
if(type.isString()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ 
if(type.isNumber()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isArrayType_ter ^ ^ ^ ^ ^ 
if(type.isArrayType()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isBooleanObjectType_ter ^ ^ ^ ^ ^ 
if(type.isBooleanObjectType()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isBooleanValueType_ter ^ ^ ^ ^ ^ 
if(type.isBooleanValueType()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isRegexpType_ter ^ ^ ^ ^ ^ 
if(type.isRegexpType()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isDateType_ter ^ ^ ^ ^ ^ 
if(type.isDateType()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isNullType_ter ^ ^ ^ ^ ^ 
if(type.isNullType()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isVoidType_ter ^ ^ ^ ^ ^ 
if(type.isVoidType()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isAllType_ter ^ ^ ^ ^ ^ 
if(type.isAllType()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isUnknownType_ter ^ ^ ^ ^ ^ 
if(type.isUnknownType()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isCheckedUnknownType_ter ^ ^ ^ ^ ^ 
if(type.isCheckedUnknownType()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
if(type.isUnionType()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isStruct_ter ^ ^ ^ ^ ^ 
if(type.isStruct()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isDict_ter ^ ^ ^ ^ ^ 
if(type.isDict()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isGlobalThisType_ter ^ ^ ^ ^ ^ 
if(type.isGlobalThisType()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isFunctionType_ter ^ ^ ^ ^ ^ 
if(type.isFunctionType()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isEnumElementType_ter ^ ^ ^ ^ ^ 
if(type.isEnumElementType()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ 
if(type.isEnumType()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isNamedType_ter ^ ^ ^ ^ ^ 
if(type.isNamedType()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isRecordType_ter ^ ^ ^ ^ ^ 
if(type.isRecordType()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isTemplatizedType_ter ^ ^ ^ ^ ^ 
if(type.isTemplatizedType()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isTemplateType_ter ^ ^ ^ ^ ^ 
if(type.isTemplateType()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member hasAnyTemplateTypes_ter ^ ^ ^ ^ ^ 
if(type.hasAnyTemplateTypes()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member hasAnyTemplateTypesInternal_ter ^ ^ ^ ^ ^ 
if(type.hasAnyTemplateTypesInternal()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isObject_ter ^ ^ ^ ^ ^ 
if(type.isObject()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ ^ 
if(type.isConstructor()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isNominalType_ter ^ ^ ^ ^ ^ 
if(type.isNominalType()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isNominalConstructor_ter ^ ^ ^ ^ ^ 
if(type.isNominalConstructor()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isInstanceType_ter ^ ^ ^ ^ ^ 
if(type.isInstanceType()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isInterface_ter ^ ^ ^ ^ ^ 
if(type.isInterface()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isOrdinaryFunction_ter ^ ^ ^ ^ ^ 
if(type.isOrdinaryFunction()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member matchesInt32Context_ter ^ ^ ^ ^ ^ 
if(type.matchesInt32Context()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member matchesUint32Context_ter ^ ^ ^ ^ ^ 
if(type.matchesUint32Context()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member matchesNumberContext_ter ^ ^ ^ ^ ^ 
if(type.matchesNumberContext()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member matchesStringContext_ter ^ ^ ^ ^ ^ 
if(type.matchesStringContext()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member matchesObjectContext_ter ^ ^ ^ ^ ^ 
if(type.matchesObjectContext()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member canBeCalled_ter ^ ^ ^ ^ ^ 
if(type.canBeCalled()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isNullable_ter ^ ^ ^ ^ ^ 
if(type.isNullable()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isResolved_ter ^ ^ ^ ^ ^ 
if(type.isResolved()){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){

condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member dereference_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() || ((type.dereference() != null) && (type.toObjectType().getConstructor() != null)))){
StatementExpression expression Assignment expressionl MemberReference member type_ter ^ ^ ^ ^ value MemberReference member dereferenced_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
type = dereferenced;

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((type.toObjectType() != null) || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){

StatementExpression expression Assignment expressionl MemberReference member objectType_ter ^ ^ ^ ^ value MethodInvocation qualifier objectType_ter ^ ^ member getImplicitPrototype_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
objectType = objectType.getImplicitPrototype();

StatementExpression expression Assignment expressionl MemberReference member objectType_ter ^ ^ ^ ^ value MethodInvocation qualifier FunctionType_ter ^ ^ arguments MemberReference member objectType_ter ^ ^ ^ MemberReference member propName_ter ^ ^ ^ ^ member getTopDefiningInterface_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
objectType = FunctionType.getTopDefiningInterface(objectType, propName);

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member hasDisplayName_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.hasDisplayName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isNoType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isNoType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isNoResolvedType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isNoResolvedType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isNoObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isNoObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isEmptyType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isEmptyType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isNumberObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isNumberObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isNumberValueType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isNumberValueType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isFunctionPrototypeType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isStringObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isStringObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isTheObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isTheObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isStringValueType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isStringValueType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isString())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isNumber())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isArrayType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isArrayType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isBooleanObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isBooleanObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isBooleanValueType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isBooleanValueType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isRegexpType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isRegexpType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isDateType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isDateType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isNullType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isNullType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isVoidType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isVoidType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isAllType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isAllType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isUnknownType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isUnknownType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isCheckedUnknownType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isCheckedUnknownType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isUnionType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isStruct_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isStruct())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isDict_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isDict())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isGlobalThisType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isGlobalThisType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isFunctionType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isFunctionType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isEnumElementType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isEnumElementType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isEnumType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isNamedType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isNamedType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isRecordType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isRecordType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isTemplatizedType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isTemplatizedType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isTemplateType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isTemplateType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member hasAnyTemplateTypes_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.hasAnyTemplateTypes())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member hasAnyTemplateTypesInternal_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.hasAnyTemplateTypesInternal())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isObject_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isObject())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isConstructor())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isNominalType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isNominalType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isNominalConstructor_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isNominalConstructor())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isInstanceType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isInstanceType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isInterface_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isInterface())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isOrdinaryFunction_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isOrdinaryFunction())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member matchesInt32Context_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.matchesInt32Context())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member matchesUint32Context_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.matchesUint32Context())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member matchesNumberContext_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.matchesNumberContext())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member matchesStringContext_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.matchesStringContext())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member matchesObjectContext_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.matchesObjectContext())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member canBeCalled_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.canBeCalled())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isNullable_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isNullable())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isResolved_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isResolved())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member hasDisplayName_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.hasDisplayName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isNoType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isNoType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isNoResolvedType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isNoResolvedType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isNoObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isNoObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isEmptyType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isEmptyType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isNumberObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isNumberObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isNumberValueType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isNumberValueType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isFunctionPrototypeType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isStringObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isStringObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isTheObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isTheObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isStringValueType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isStringValueType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isString())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isNumber())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isArrayType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isArrayType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isBooleanObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isBooleanObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isBooleanValueType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isBooleanValueType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isRegexpType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isRegexpType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isDateType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isDateType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isNullType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isNullType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isVoidType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isVoidType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isAllType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isAllType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isUnknownType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isUnknownType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isCheckedUnknownType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isCheckedUnknownType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isUnionType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isStruct_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isStruct())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isDict_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isDict())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isGlobalThisType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isGlobalThisType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isFunctionType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isFunctionType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isEnumElementType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isEnumElementType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isEnumType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isNamedType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isNamedType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isRecordType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isRecordType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isTemplatizedType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isTemplatizedType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isTemplateType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isTemplateType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member hasAnyTemplateTypes_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.hasAnyTemplateTypes())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member hasAnyTemplateTypesInternal_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.hasAnyTemplateTypesInternal())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isObject_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isObject())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isConstructor())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isNominalType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isNominalType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isNominalConstructor_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isNominalConstructor())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isInstanceType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isInstanceType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isInterface_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isInterface())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isOrdinaryFunction_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isOrdinaryFunction())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member matchesInt32Context_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.matchesInt32Context())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member matchesUint32Context_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.matchesUint32Context())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member matchesNumberContext_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.matchesNumberContext())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member matchesStringContext_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.matchesStringContext())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member matchesObjectContext_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.matchesObjectContext())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member canBeCalled_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.canBeCalled())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isNullable_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isNullable())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isResolved_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isResolved())){

condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier FunctionType_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((FunctionType.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member isFunctionPrototypeType_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().isFunctionPrototypeType() != null)))){
IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member dereferenced_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((dereferenced != null)){

condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getImplicitPrototype_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getImplicitPrototype() != null)))){
ReturnStatement expression MemberReference member qualifiedName_ter ^ ^ ^ ^ ^ 
if (true) { return qualifiedName; }

ReturnStatement expression MethodInvocation qualifier type_ter ^ ^ member toString_ter ^ ^ ^ ^ ^ 
if (true) { return type.toString(); }

condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member toString_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().toString() != null)))){
IfStatement condition MemberReference member dereference_ter ^ ^ ^ ^ ^ 
if(dereference){

StatementExpression expression MethodInvocation qualifier type_ter ^ ^ member clearResolved_ter ^ ^ ^ ^ ^ 
type.clearResolved();

condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getLastChild_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getLastChild() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getQualifiedName_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getQualifiedName() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getName_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getName() != null)))){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member hasDisplayName_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.hasDisplayName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isNoType_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isNoType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isNoResolvedType_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isNoResolvedType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isNoObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isNoObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isEmptyType_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isEmptyType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isNumberObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isNumberObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isNumberValueType_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isNumberValueType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isFunctionPrototypeType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isStringObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isStringObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isTheObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isTheObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isStringValueType_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isStringValueType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isString())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isNumber())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isArrayType_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isArrayType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isBooleanObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isBooleanObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isBooleanValueType_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isBooleanValueType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isRegexpType_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isRegexpType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isDateType_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isDateType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isNullType_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isNullType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isVoidType_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isVoidType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isAllType_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isAllType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isUnknownType_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isUnknownType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isCheckedUnknownType_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isCheckedUnknownType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isUnionType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isStruct_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isStruct())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isDict_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isDict())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isGlobalThisType_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isGlobalThisType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isFunctionType_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isFunctionType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isEnumElementType_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isEnumElementType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isEnumType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isNamedType_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isNamedType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isRecordType_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isRecordType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isTemplatizedType_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isTemplatizedType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isTemplateType_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isTemplateType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member hasAnyTemplateTypes_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.hasAnyTemplateTypes())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member hasAnyTemplateTypesInternal_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.hasAnyTemplateTypesInternal())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isObject_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isObject())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isConstructor())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isNominalType_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isNominalType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isNominalConstructor_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isNominalConstructor())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isInstanceType_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isInstanceType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isInterface_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isInterface())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isOrdinaryFunction_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isOrdinaryFunction())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member matchesInt32Context_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.matchesInt32Context())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member matchesUint32Context_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.matchesUint32Context())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member matchesNumberContext_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.matchesNumberContext())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member matchesStringContext_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.matchesStringContext())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member matchesObjectContext_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.matchesObjectContext())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member canBeCalled_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.canBeCalled())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isNullable_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isNullable())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isResolved_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isResolved())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member objectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier objectType_ter ^ ^ member getConstructor_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier objectType_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((objectType != null) && ((objectType.getConstructor() != null) || objectType.isFunctionPrototypeType()))){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier objectType_ter ^ ^ member getConstructor_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier objectType_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((objectType.getConstructor() != null) || objectType.isFunctionPrototypeType())){

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member qualifiedName_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((qualifiedName != null)){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))){

condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member hasDisplayName_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.hasDisplayName() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isNoType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isNoType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isNoResolvedType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isNoResolvedType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isNoObjectType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isNoObjectType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isEmptyType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isEmptyType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isNumberObjectType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isNumberObjectType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isNumberValueType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isNumberValueType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isStringObjectType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isStringObjectType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isTheObjectType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isTheObjectType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isStringValueType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isStringValueType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isString_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isString() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isNumber_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isNumber() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isArrayType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isArrayType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isBooleanObjectType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isBooleanObjectType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isBooleanValueType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isBooleanValueType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isRegexpType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isRegexpType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isDateType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isDateType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isNullType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isNullType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isVoidType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isVoidType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isAllType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isAllType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isUnknownType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isUnknownType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isCheckedUnknownType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isCheckedUnknownType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isUnionType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isStruct_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isStruct() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isDict_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isDict() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isGlobalThisType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isGlobalThisType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isEnumElementType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isEnumElementType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isEnumType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isNamedType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isNamedType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isRecordType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isRecordType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isTemplatizedType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isTemplatizedType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isTemplateType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isTemplateType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member hasAnyTemplateTypes_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.hasAnyTemplateTypes() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member hasAnyTemplateTypesInternal_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.hasAnyTemplateTypesInternal() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isObject_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isObject() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isConstructor() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isNominalType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isNominalType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isNominalConstructor_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isNominalConstructor() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isInstanceType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isInstanceType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isInterface_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isInterface() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isOrdinaryFunction_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isOrdinaryFunction() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member matchesInt32Context_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.matchesInt32Context() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member matchesUint32Context_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.matchesUint32Context() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member matchesNumberContext_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.matchesNumberContext() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member matchesStringContext_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.matchesStringContext() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member matchesObjectContext_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.matchesObjectContext() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member canBeCalled_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.canBeCalled() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isNullable_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isNullable() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isResolved_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isResolved() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ ^ 
if(type.isFunctionPrototypeType()){

condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.toObjectType().getConstructor() != null)){

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.toObjectType() != null)){

condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member getConstructor_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.getConstructor() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){

condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() == null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member getImplicitPrototype_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.getImplicitPrototype() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member getName_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.getName() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){

condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toString_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.toString() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member getLastChild_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.getLastChild() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier objectType_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((objectType.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){

ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if (true) { return "null"; }

condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member getQualifiedName_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.getQualifiedName() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier propName_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((propName.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier dereference_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((dereference.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
IfStatement condition MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ ^ 
if(type.toObjectType().getConstructor()){

condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((n.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
BreakStatement_ter ^ 
break;

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((type.toObjectType() != null) && ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){

condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier dereferenced_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((dereferenced.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member hasDisplayName_ter ^ ^ ^ ^ ^ 
if(type.hasDisplayName()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isNoType_ter ^ ^ ^ ^ ^ 
if(type.isNoType()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isNoResolvedType_ter ^ ^ ^ ^ ^ 
if(type.isNoResolvedType()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isNoObjectType_ter ^ ^ ^ ^ ^ 
if(type.isNoObjectType()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isEmptyType_ter ^ ^ ^ ^ ^ 
if(type.isEmptyType()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isNumberObjectType_ter ^ ^ ^ ^ ^ 
if(type.isNumberObjectType()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isNumberValueType_ter ^ ^ ^ ^ ^ 
if(type.isNumberValueType()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isStringObjectType_ter ^ ^ ^ ^ ^ 
if(type.isStringObjectType()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isTheObjectType_ter ^ ^ ^ ^ ^ 
if(type.isTheObjectType()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isStringValueType_ter ^ ^ ^ ^ ^ 
if(type.isStringValueType()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ 
if(type.isString()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ 
if(type.isNumber()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isArrayType_ter ^ ^ ^ ^ ^ 
if(type.isArrayType()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isBooleanObjectType_ter ^ ^ ^ ^ ^ 
if(type.isBooleanObjectType()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isBooleanValueType_ter ^ ^ ^ ^ ^ 
if(type.isBooleanValueType()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isRegexpType_ter ^ ^ ^ ^ ^ 
if(type.isRegexpType()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isDateType_ter ^ ^ ^ ^ ^ 
if(type.isDateType()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isNullType_ter ^ ^ ^ ^ ^ 
if(type.isNullType()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isVoidType_ter ^ ^ ^ ^ ^ 
if(type.isVoidType()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isAllType_ter ^ ^ ^ ^ ^ 
if(type.isAllType()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isUnknownType_ter ^ ^ ^ ^ ^ 
if(type.isUnknownType()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isCheckedUnknownType_ter ^ ^ ^ ^ ^ 
if(type.isCheckedUnknownType()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
if(type.isUnionType()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isStruct_ter ^ ^ ^ ^ ^ 
if(type.isStruct()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isDict_ter ^ ^ ^ ^ ^ 
if(type.isDict()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isGlobalThisType_ter ^ ^ ^ ^ ^ 
if(type.isGlobalThisType()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isFunctionType_ter ^ ^ ^ ^ ^ 
if(type.isFunctionType()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isEnumElementType_ter ^ ^ ^ ^ ^ 
if(type.isEnumElementType()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ 
if(type.isEnumType()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isNamedType_ter ^ ^ ^ ^ ^ 
if(type.isNamedType()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isRecordType_ter ^ ^ ^ ^ ^ 
if(type.isRecordType()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isTemplatizedType_ter ^ ^ ^ ^ ^ 
if(type.isTemplatizedType()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isTemplateType_ter ^ ^ ^ ^ ^ 
if(type.isTemplateType()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member hasAnyTemplateTypes_ter ^ ^ ^ ^ ^ 
if(type.hasAnyTemplateTypes()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member hasAnyTemplateTypesInternal_ter ^ ^ ^ ^ ^ 
if(type.hasAnyTemplateTypesInternal()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isObject_ter ^ ^ ^ ^ ^ 
if(type.isObject()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ ^ 
if(type.isConstructor()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isNominalType_ter ^ ^ ^ ^ ^ 
if(type.isNominalType()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isNominalConstructor_ter ^ ^ ^ ^ ^ 
if(type.isNominalConstructor()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isInstanceType_ter ^ ^ ^ ^ ^ 
if(type.isInstanceType()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isInterface_ter ^ ^ ^ ^ ^ 
if(type.isInterface()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isOrdinaryFunction_ter ^ ^ ^ ^ ^ 
if(type.isOrdinaryFunction()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member matchesInt32Context_ter ^ ^ ^ ^ ^ 
if(type.matchesInt32Context()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member matchesUint32Context_ter ^ ^ ^ ^ ^ 
if(type.matchesUint32Context()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member matchesNumberContext_ter ^ ^ ^ ^ ^ 
if(type.matchesNumberContext()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member matchesStringContext_ter ^ ^ ^ ^ ^ 
if(type.matchesStringContext()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member matchesObjectContext_ter ^ ^ ^ ^ ^ 
if(type.matchesObjectContext()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member canBeCalled_ter ^ ^ ^ ^ ^ 
if(type.canBeCalled()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isNullable_ter ^ ^ ^ ^ ^ 
if(type.isNullable()){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isResolved_ter ^ ^ ^ ^ ^ 
if(type.isResolved()){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){

condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member dereference_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() || ((type.dereference() != null) && (type.toObjectType().getConstructor() != null)))){
StatementExpression expression Assignment expressionl MemberReference member type_ter ^ ^ ^ ^ value MemberReference member dereferenced_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
type = dereferenced;

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((type.toObjectType() != null) || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){

StatementExpression expression Assignment expressionl MemberReference member objectType_ter ^ ^ ^ ^ value MethodInvocation qualifier objectType_ter ^ ^ member getImplicitPrototype_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
objectType = objectType.getImplicitPrototype();

StatementExpression expression Assignment expressionl MemberReference member objectType_ter ^ ^ ^ ^ value MethodInvocation qualifier FunctionType_ter ^ ^ arguments MemberReference member objectType_ter ^ ^ ^ MemberReference member propName_ter ^ ^ ^ ^ member getTopDefiningInterface_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
objectType = FunctionType.getTopDefiningInterface(objectType, propName);

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member hasDisplayName_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.hasDisplayName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isNoType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isNoType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isNoResolvedType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isNoResolvedType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isNoObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isNoObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isEmptyType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isEmptyType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isNumberObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isNumberObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isNumberValueType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isNumberValueType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isFunctionPrototypeType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isStringObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isStringObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isTheObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isTheObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isStringValueType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isStringValueType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isString())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isNumber())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isArrayType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isArrayType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isBooleanObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isBooleanObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isBooleanValueType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isBooleanValueType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isRegexpType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isRegexpType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isDateType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isDateType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isNullType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isNullType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isVoidType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isVoidType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isAllType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isAllType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isUnknownType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isUnknownType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isCheckedUnknownType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isCheckedUnknownType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isUnionType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isStruct_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isStruct())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isDict_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isDict())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isGlobalThisType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isGlobalThisType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isFunctionType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isFunctionType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isEnumElementType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isEnumElementType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isEnumType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isNamedType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isNamedType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isRecordType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isRecordType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isTemplatizedType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isTemplatizedType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isTemplateType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isTemplateType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member hasAnyTemplateTypes_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.hasAnyTemplateTypes())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member hasAnyTemplateTypesInternal_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.hasAnyTemplateTypesInternal())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isObject_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isObject())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isConstructor())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isNominalType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isNominalType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isNominalConstructor_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isNominalConstructor())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isInstanceType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isInstanceType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isInterface_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isInterface())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isOrdinaryFunction_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isOrdinaryFunction())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member matchesInt32Context_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.matchesInt32Context())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member matchesUint32Context_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.matchesUint32Context())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member matchesNumberContext_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.matchesNumberContext())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member matchesStringContext_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.matchesStringContext())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member matchesObjectContext_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.matchesObjectContext())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member canBeCalled_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.canBeCalled())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isNullable_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isNullable())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isResolved_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && !type.isResolved())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member hasDisplayName_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.hasDisplayName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isNoType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isNoType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isNoResolvedType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isNoResolvedType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isNoObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isNoObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isEmptyType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isEmptyType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isNumberObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isNumberObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isNumberValueType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isNumberValueType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isFunctionPrototypeType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isStringObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isStringObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isTheObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isTheObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isStringValueType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isStringValueType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isString())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isNumber())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isArrayType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isArrayType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isBooleanObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isBooleanObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isBooleanValueType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isBooleanValueType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isRegexpType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isRegexpType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isDateType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isDateType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isNullType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isNullType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isVoidType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isVoidType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isAllType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isAllType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isUnknownType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isUnknownType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isCheckedUnknownType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isCheckedUnknownType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isUnionType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isStruct_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isStruct())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isDict_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isDict())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isGlobalThisType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isGlobalThisType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isFunctionType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isFunctionType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isEnumElementType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isEnumElementType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isEnumType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isNamedType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isNamedType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isRecordType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isRecordType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isTemplatizedType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isTemplatizedType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isTemplateType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isTemplateType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member hasAnyTemplateTypes_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.hasAnyTemplateTypes())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member hasAnyTemplateTypesInternal_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.hasAnyTemplateTypesInternal())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isObject_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isObject())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isConstructor())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isNominalType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isNominalType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isNominalConstructor_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isNominalConstructor())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isInstanceType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isInstanceType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isInterface_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isInterface())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isOrdinaryFunction_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isOrdinaryFunction())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member matchesInt32Context_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.matchesInt32Context())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member matchesUint32Context_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.matchesUint32Context())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member matchesNumberContext_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.matchesNumberContext())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member matchesStringContext_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.matchesStringContext())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member matchesObjectContext_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.matchesObjectContext())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member canBeCalled_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.canBeCalled())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isNullable_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isNullable())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ member isResolved_ter ^ ^ ^ ^ ^ ^ ^ 
if(((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))) && type.isResolved())){

condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier FunctionType_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((FunctionType.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member isFunctionPrototypeType_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().isFunctionPrototypeType() != null)))){
IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member dereferenced_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((dereferenced != null)){

condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getImplicitPrototype_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getImplicitPrototype() != null)))){
ReturnStatement expression MemberReference member qualifiedName_ter ^ ^ ^ ^ ^ 
if (true) { return qualifiedName; }

ReturnStatement expression MethodInvocation qualifier type_ter ^ ^ member toString_ter ^ ^ ^ ^ ^ 
if (true) { return type.toString(); }

condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member toString_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().toString() != null)))){
IfStatement condition MemberReference member dereference_ter ^ ^ ^ ^ ^ 
if(dereference){

StatementExpression expression MethodInvocation qualifier type_ter ^ ^ member clearResolved_ter ^ ^ ^ ^ ^ 
type.clearResolved();

condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getLastChild_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getLastChild() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getQualifiedName_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getQualifiedName() != null)))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getName_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() || ((type.toObjectType() != null) && (type.toObjectType().getName() != null)))){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member hasDisplayName_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.hasDisplayName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isNoType_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isNoType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isNoResolvedType_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isNoResolvedType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isNoObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isNoObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isEmptyType_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isEmptyType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isNumberObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isNumberObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isNumberValueType_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isNumberValueType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isFunctionPrototypeType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isStringObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isStringObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isTheObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isTheObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isStringValueType_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isStringValueType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isString())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isNumber())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isArrayType_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isArrayType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isBooleanObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isBooleanObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isBooleanValueType_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isBooleanValueType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isRegexpType_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isRegexpType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isDateType_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isDateType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isNullType_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isNullType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isVoidType_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isVoidType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isAllType_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isAllType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isUnknownType_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isUnknownType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isCheckedUnknownType_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isCheckedUnknownType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isUnionType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isStruct_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isStruct())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isDict_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isDict())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isGlobalThisType_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isGlobalThisType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isFunctionType_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isFunctionType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isEnumElementType_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isEnumElementType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isEnumType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isNamedType_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isNamedType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isRecordType_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isRecordType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isTemplatizedType_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isTemplatizedType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isTemplateType_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isTemplateType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member hasAnyTemplateTypes_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.hasAnyTemplateTypes())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member hasAnyTemplateTypesInternal_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.hasAnyTemplateTypesInternal())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isObject_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isObject())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isConstructor())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isNominalType_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isNominalType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isNominalConstructor_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isNominalConstructor())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isInstanceType_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isInstanceType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isInterface_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isInterface())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isOrdinaryFunction_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isOrdinaryFunction())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member matchesInt32Context_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.matchesInt32Context())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member matchesUint32Context_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.matchesUint32Context())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member matchesNumberContext_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.matchesNumberContext())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member matchesStringContext_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.matchesStringContext())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member matchesObjectContext_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.matchesObjectContext())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member canBeCalled_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.canBeCalled())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isNullable_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isNullable())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isResolved_ter ^ ^ ^ ^ ^ ^ ^ 
if((type.isFunctionPrototypeType() && !type.isResolved())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member objectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier objectType_ter ^ ^ member getConstructor_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier objectType_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((objectType != null) && ((objectType.getConstructor() != null) || objectType.isFunctionPrototypeType()))){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier objectType_ter ^ ^ member getConstructor_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier objectType_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((objectType.getConstructor() != null) || objectType.isFunctionPrototypeType())){

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member qualifiedName_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((qualifiedName != null)){

ReturnStatement expression MethodInvocation qualifier type_ter ^ ^ member getDisplayName_ter ^ ^ ^ ^ ^ 
return type.getDisplayName();
ReturnStatement expression MethodInvocation qualifier type_ter ^ ^ member toString_ter ^ ^ ^ ^ ^ 
return type.toString();
ReturnStatement expression MethodInvocation qualifier type_ter ^ ^ member toDebugHashCodeString_ter ^ ^ ^ ^ ^ 
return type.toDebugHashCodeString();
ReturnStatement expression MethodInvocation qualifier type_ter ^ ^ member toAnnotationString_ter ^ ^ ^ ^ ^ 
return type.toAnnotationString();
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
return "null";
ReturnStatement expression MethodInvocation qualifier dereferenced_ter ^ ^ member toString_ter ^ ^ ^ ^ ^ 
return dereferenced.toString();
ReturnStatement expression MethodInvocation qualifier propName_ter ^ ^ member toString_ter ^ ^ ^ ^ ^ 
return propName.toString();
ReturnStatement expression MemberReference member qualifiedName_ter ^ ^ ^ ^ ^ 
return qualifiedName;
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if (true) { return "null"; }

ReturnStatement expression MethodInvocation qualifier dereference_ter ^ ^ member toString_ter ^ ^ ^ ^ ^ 
return dereference.toString();
ReturnStatement expression MethodInvocation qualifier objectType_ter ^ ^ member toString_ter ^ ^ ^ ^ ^ 
return objectType.toString();

ReturnStatement expression MethodInvocation qualifier n_ter ^ ^ member toString_ter ^ ^ ^ ^ ^ 
return n.toString();
ReturnStatement expression MethodInvocation qualifier type_ter ^ ^ member getReadableJSTypeName_ter ^ ^ ^ ^ ^ 
return type.getReadableJSTypeName();
ReturnStatement expression MethodInvocation qualifier type_ter ^ ^ member isFunctionType_ter ^ ^ ^ ^ ^ 
return type.isFunctionType();
ReturnStatement expression MethodInvocation qualifier FunctionType_ter ^ ^ member toString_ter ^ ^ ^ ^ ^ 
return FunctionType.toString();
ReturnStatement expression BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl MethodInvocation qualifier objectType_ter ^ ^ member toString_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr MemberReference member propName_ter ^ ^ ^ ^ ^ ^ ^ 
return ((objectType.toString() + "null") + propName);
ReturnStatement expression MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ ^ 
return type.isFunctionPrototypeType();
ReturnStatement expression MemberReference member qualifiedName_ter ^ ^ ^ ^ ^ 
if (true) { return qualifiedName; }

ReturnStatement expression MethodInvocation qualifier type_ter ^ ^ member hasOwnProperty_ter ^ ^ ^ ^ ^ 
return type.hasOwnProperty();
ReturnStatement expression MemberReference member type_ter ^ ^ ^ ^ ^ 
return type;
StatementExpression expression MethodInvocation qualifier type_ter ^ ^ member clearResolved_ter ^ ^ ^ ^ ^ 
type.clearResolved();

ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
return false;
StatementExpression expression Assignment expressionl MemberReference member objectType_ter ^ ^ ^ ^ value MethodInvocation qualifier objectType_ter ^ ^ member getImplicitPrototype_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
objectType = objectType.getImplicitPrototype();

ReturnStatement expression MethodInvocation qualifier qualifiedName_ter ^ ^ member toString_ter ^ ^ ^ ^ ^ 
return qualifiedName.toString();
StatementExpression expression Assignment expressionl MemberReference member type_ter ^ ^ ^ ^ value MemberReference member dereferenced_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
type = dereferenced;

ReturnStatement expression MethodInvocation qualifier n_ter ^ ^ member getQualifiedName_ter ^ ^ ^ ^ ^ 
return n.getQualifiedName();
ReturnStatement expression MethodInvocation qualifier type_ter ^ ^ member getJSType_ter ^ ^ ^ ^ ^ 
return type.getJSType();
ReturnStatement expression MethodInvocation qualifier type_ter ^ ^ member toString_ter ^ ^ ^ ^ ^ 
if (true) { return type.toString(); }

ReturnStatement expression MethodInvocation qualifier type_ter ^ ^ member add_ter ^ ^ ^ ^ ^ 
return type.add();
ReturnStatement expression MethodInvocation qualifier loc5 ^ ^ member toString_ter ^ ^ ^ ^ ^ 
return .toString();

ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
return null;
ReturnStatement expression MethodInvocation qualifier type_ter ^ ^ member getConstructor_ter ^ ^ ^ ^ ^ 
return type.getConstructor();
StatementExpression expression Assignment expressionl MemberReference member objectType_ter ^ ^ ^ ^ value MethodInvocation qualifier FunctionType_ter ^ ^ arguments MemberReference member objectType_ter ^ ^ ^ MemberReference member propName_ter ^ ^ ^ ^ member getTopDefiningInterface_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
objectType = FunctionType.getTopDefiningInterface(objectType, propName);

ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ 
return true;
ReturnStatement expression MethodInvocation qualifier objectType_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ ^ 
return objectType.isFunctionPrototypeType();
BreakStatement_ter ^ 
break;

ReturnStatement expression MemberReference member dereferenced_ter ^ ^ ^ ^ ^ 
return dereferenced;
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member hasDisplayName_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.hasDisplayName()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isNoType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isNoType()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isNoResolvedType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isNoResolvedType()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isNoObjectType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isNoObjectType()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isEmptyType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isEmptyType()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isNumberObjectType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isNumberObjectType()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isNumberValueType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isNumberValueType()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isFunctionPrototypeType()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isStringObjectType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isStringObjectType()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isTheObjectType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isTheObjectType()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isStringValueType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isStringValueType()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isString()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isNumber()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isArrayType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isArrayType()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isBooleanObjectType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isBooleanObjectType()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isBooleanValueType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isBooleanValueType()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isRegexpType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isRegexpType()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isDateType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isDateType()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isNullType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isNullType()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isVoidType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isVoidType()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isAllType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isAllType()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isUnknownType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isUnknownType()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isCheckedUnknownType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isCheckedUnknownType()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isUnionType()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isStruct_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isStruct()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isDict_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isDict()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isGlobalThisType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isGlobalThisType()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isFunctionType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isFunctionType()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isEnumElementType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isEnumElementType()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isEnumType()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isNamedType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isNamedType()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isRecordType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isRecordType()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isTemplatizedType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isTemplatizedType()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isTemplateType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isTemplateType()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member hasAnyTemplateTypes_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.hasAnyTemplateTypes()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member hasAnyTemplateTypesInternal_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.hasAnyTemplateTypesInternal()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isObject_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isObject()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isConstructor()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isNominalType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isNominalType()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isNominalConstructor_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isNominalConstructor()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isInstanceType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isInstanceType()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isInterface_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isInterface()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isOrdinaryFunction_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isOrdinaryFunction()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member matchesInt32Context_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.matchesInt32Context()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member matchesUint32Context_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.matchesUint32Context()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member matchesNumberContext_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.matchesNumberContext()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member matchesStringContext_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.matchesStringContext()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member matchesObjectContext_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.matchesObjectContext()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member canBeCalled_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.canBeCalled()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isNullable_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isNullable()){
return "null";}
IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isResolved_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if(type.isResolved()){
return "null";}
ContinueStatement_ter ^ 
continue;

ReturnStatement expression MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member toString_ter ^ ^ ^ ^ ^ 
return !type.toString();
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if (true) { return null; }

StatementExpression expression MethodInvocation qualifier dereferenced_ter ^ ^ member clearCachedValues_ter ^ ^ ^ ^ ^ 
dereferenced.clearCachedValues();

ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return ((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null));
ReturnStatement expression MethodInvocation qualifier type_ter ^ ^ arguments MemberReference member n_ter ^ ^ ^ ^ member toString_ter ^ ^ ^ ^ ^ 
return type.toString(n);
ReturnStatement expression MemberReference member propName_ter ^ ^ ^ ^ ^ 
return propName;
ReturnStatement_ter ^ 
return;

ReturnStatement expression BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
return (type.toObjectType().getConstructor() != null);
ReturnStatement expression MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member toString_ter ^ ^ ^ ^ member toString_ter ^ ^ ^ ^ ^ 
return type.toString().toString();
ReturnStatement expression MethodInvocation qualifier type_ter ^ ^ arguments MemberReference member propName_ter ^ ^ ^ ^ member toString_ter ^ ^ ^ ^ ^ 
return type.toString(propName);
ReturnStatement expression BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
return (type.toObjectType() != null);
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if (true) { return false; }

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ selectors MethodInvocation member getConstructor_ter ^ ^ ^ ^ member toObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((type.toObjectType() != null) && (type.toObjectType().getConstructor() != null))){

stderr: 