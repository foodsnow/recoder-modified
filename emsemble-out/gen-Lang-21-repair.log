stdout: ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MILLISECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MILLISECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member SECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member SECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MINUTE_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MINUTE_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member HOUR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member HOUR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return ((((cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND)) && (cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND))) && (cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE))) && (cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR)));
ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MILLISECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MILLISECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member SECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member SECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MINUTE_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MINUTE_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member HOUR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member HOUR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member DAY_OF_YEAR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member DAY_OF_YEAR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member YEAR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member YEAR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member ERA_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member ERA_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return (((((((cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND)) && (cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND))) && (cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE))) && (cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR))) && (cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR))) && (cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR))) && (cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA)));
ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MILLISECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MILLISECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member SECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member SECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MINUTE_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MINUTE_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return (((cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND)) && (cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND))) && (cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE)));
ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MILLISECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MILLISECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member SECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member SECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MINUTE_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MINUTE_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member HOUR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member HOUR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member DAY_OF_YEAR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member DAY_OF_YEAR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return (((((cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND)) && (cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND))) && (cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE))) && (cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR))) && (cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR)));
ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MILLISECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MILLISECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member SECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member SECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MINUTE_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MINUTE_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member HOUR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member HOUR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member DAY_OF_YEAR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member DAY_OF_YEAR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member YEAR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member YEAR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return ((((((cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND)) && (cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND))) && (cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE))) && (cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR))) && (cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR))) && (cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR)));
ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MILLISECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MILLISECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member SECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member SECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MINUTE_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MINUTE_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member HOUR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member HOUR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member DAY_OF_YEAR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member DAY_OF_YEAR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member YEAR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member YEAR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member ERA_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member ERA_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ member getClass_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ member getName_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return ((((((((cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND)) && (cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND))) && (cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE))) && (cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR))) && (cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR))) && (cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR))) && (cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA))) && (cal1.getClass() == cal2.getName()));
ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MILLISECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MILLISECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member SECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member SECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return ((cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND)) && (cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND)));
ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MILLISECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MILLISECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member SECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member SECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MINUTE_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MINUTE_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ member getClass_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ member getClass_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return ((((cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND)) && (cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND))) && (cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE))) && (cal1.getClass() == cal2.getClass()));
ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MILLISECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MILLISECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member SECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member SECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MINUTE_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MINUTE_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member HOUR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member HOUR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member DAY_OF_YEAR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member DAY_OF_YEAR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ member getClass_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ member getClass_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return ((((((cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND)) && (cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND))) && (cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE))) && (cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR))) && (cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR))) && (cal1.getClass() == cal2.getClass()));
ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MILLISECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MILLISECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member SECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member SECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MINUTE_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MINUTE_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member HOUR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member HOUR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ member getClass_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ member getClass_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return (((((cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND)) && (cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND))) && (cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE))) && (cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR))) && (cal1.getClass() == cal2.getClass()));
ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MILLISECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MILLISECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member SECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member SECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ member getClass_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ member getClass_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return (((cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND)) && (cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND))) && (cal1.getClass() == cal2.getClass()));
ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MILLISECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MILLISECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member SECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member SECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MINUTE_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MINUTE_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member HOUR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member HOUR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member DAY_OF_YEAR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member DAY_OF_YEAR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member YEAR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member YEAR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member ERA_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member ERA_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ member getClass_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ member getClass_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return ((((((((cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND)) && (cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND))) && (cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE))) && (cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR))) && (cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR))) && (cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR))) && (cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA))) && (cal1.getClass() == cal2.getClass()));
ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MILLISECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MILLISECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member SECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member SECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MINUTE_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MINUTE_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member HOUR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member HOUR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member DAY_OF_YEAR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member DAY_OF_YEAR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member YEAR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member YEAR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ member getClass_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ member getClass_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return (((((((cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND)) && (cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND))) && (cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE))) && (cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR))) && (cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR))) && (cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR))) && (cal1.getClass() == cal2.getClass()));
ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ 
ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MILLISECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MILLISECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member SECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member SECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MINUTE_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MINUTE_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member HOUR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member HOUR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member DAY_OF_YEAR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member DAY_OF_YEAR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member YEAR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member YEAR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member ERA_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member ERA_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal2_ter ^ ^ member getClass_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ member getClass_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return ((((((((cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND)) && (cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND))) && (cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE))) && (cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR))) && (cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR))) && (cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR))) && (cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA))) && (cal2.getClass() == cal2.getClass()));
ReturnStatement expression BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MILLISECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MILLISECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ 
return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND));
ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MILLISECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MILLISECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ member getClass_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ member getClass_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return ((cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND)) && (cal1.getClass() == cal2.getClass()));
ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MILLISECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MILLISECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member SECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member SECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MINUTE_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MINUTE_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member HOUR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member HOUR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member DAY_OF_YEAR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member DAY_OF_YEAR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member YEAR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member YEAR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member ERA_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member ERA_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ member getClass_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ member getClass_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return ((((((((cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND)) && (cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND))) && (cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE))) && (cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR))) && (cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR))) && (cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR))) && (cal1.get(Calendar.ERA) == cal1.get(Calendar.ERA))) && (cal1.getClass() == cal2.getClass()));
ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MILLISECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MILLISECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member SECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member SECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MINUTE_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MINUTE_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member HOUR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member HOUR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member DAY_OF_YEAR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member DAY_OF_YEAR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member YEAR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member YEAR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member ERA_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member ERA_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ member getClass_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ member getClass_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ member getClass_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ member getClass_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return (((((((((cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND)) && (cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND))) && (cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE))) && (cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR))) && (cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR))) && (cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR))) && (cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA))) && (cal1.getClass() == cal2.getClass())) && (cal1.getClass() == cal2.getClass()));
ReturnStatement expression MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MILLISECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ 
return cal1.get(Calendar.MILLISECOND);
ReturnStatement expression BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member HOUR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member HOUR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ 
return (cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR));
ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MILLISECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MILLISECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member SECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member SECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MINUTE_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MINUTE_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member DAY_OF_YEAR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member DAY_OF_YEAR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return ((((cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND)) && (cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND))) && (cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE))) && (cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR)));
ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MILLISECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MILLISECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member SECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member SECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MINUTE_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MINUTE_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member HOUR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member HOUR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member DAY_OF_YEAR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member DAY_OF_YEAR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member DAY_OF_YEAR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member DAY_OF_YEAR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return ((((((cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND)) && (cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND))) && (cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE))) && (cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR))) && (cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR))) && (cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR)));
ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MILLISECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MILLISECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member SECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member SECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MINUTE_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MINUTE_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member HOUR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member HOUR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member DAY_OF_YEAR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member DAY_OF_YEAR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member HOUR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member HOUR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return ((((((cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND)) && (cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND))) && (cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE))) && (cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR))) && (cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR))) && (cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR)));
ReturnStatement expression BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ member getClass_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ member getClass_ter ^ ^ ^ ^ ^ ^ ^ 
return (cal1.getClass() == cal2.getClass());
ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MILLISECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MILLISECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member SECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member SECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member DAY_OF_YEAR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member DAY_OF_YEAR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return (((cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND)) && (cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND))) && (cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR)));
ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MILLISECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MILLISECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member SECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member SECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MINUTE_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MINUTE_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member HOUR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member HOUR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member DAY_OF_YEAR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member DAY_OF_YEAR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member YEAR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member YEAR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member DAY_OF_YEAR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member DAY_OF_YEAR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return (((((((cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND)) && (cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND))) && (cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE))) && (cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR))) && (cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR))) && (cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR))) && (cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR)));
ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MILLISECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MILLISECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member SECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member SECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member HOUR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member HOUR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return (((cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND)) && (cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND))) && (cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR)));
ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MILLISECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MILLISECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member SECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member SECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MINUTE_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MINUTE_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member HOUR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member HOUR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member DAY_OF_YEAR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member DAY_OF_YEAR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member YEAR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member YEAR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member HOUR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member HOUR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return (((((((cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND)) && (cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND))) && (cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE))) && (cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR))) && (cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR))) && (cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR))) && (cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR)));
ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MILLISECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MILLISECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member SECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member SECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MINUTE_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MINUTE_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member HOUR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member HOUR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member HOUR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member HOUR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return (((((cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND)) && (cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND))) && (cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE))) && (cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR))) && (cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR)));
ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MILLISECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MILLISECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member SECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member SECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MINUTE_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MINUTE_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member HOUR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member HOUR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member DAY_OF_YEAR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member DAY_OF_YEAR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member YEAR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member YEAR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member ERA_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member ERA_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ member getClass_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ member toString_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return ((((((((cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND)) && (cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND))) && (cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE))) && (cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR))) && (cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR))) && (cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR))) && (cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA))) && (cal1.getClass() == cal2.toString()));
ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MILLISECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MILLISECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member SECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member SECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MINUTE_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MINUTE_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member HOUR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member HOUR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member DAY_OF_YEAR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member DAY_OF_YEAR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MINUTE_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MINUTE_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return ((((((cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND)) && (cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND))) && (cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE))) && (cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR))) && (cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR))) && (cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE)));
ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MILLISECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MILLISECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member SECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member SECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MINUTE_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MINUTE_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MINUTE_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MINUTE_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return ((((cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND)) && (cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND))) && (cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE))) && (cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE)));
ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MILLISECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MILLISECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member SECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member SECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MINUTE_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MINUTE_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member HOUR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member HOUR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member DAY_OF_YEAR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member DAY_OF_YEAR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member YEAR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member YEAR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MINUTE_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MINUTE_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return (((((((cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND)) && (cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND))) && (cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE))) && (cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR))) && (cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR))) && (cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR))) && (cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE)));
ReturnStatement expression MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MILLISECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ 
return cal2.get(Calendar.MILLISECOND);
ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MILLISECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MILLISECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member SECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member SECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MINUTE_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MINUTE_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member HOUR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member HOUR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member DAY_OF_YEAR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member DAY_OF_YEAR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member YEAR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member YEAR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member ERA_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member ERA_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ member getClass_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ member isSameLocalTime_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return ((((((((cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND)) && (cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND))) && (cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE))) && (cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR))) && (cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR))) && (cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR))) && (cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA))) && (cal1.getClass() == cal2.isSameLocalTime()));
ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ 
ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MILLISECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MILLISECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member SECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member SECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MINUTE_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MINUTE_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member HOUR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member HOUR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member DAY_OF_YEAR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member DAY_OF_YEAR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member YEAR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member YEAR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member ERA_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member ERA_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ member getClass_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return ((((((((cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND)) && (cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND))) && (cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE))) && (cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR))) && (cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR))) && (cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR))) && (cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA))) && (cal1.getClass() == cal2.get()));
ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MILLISECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MILLISECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member SECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member SECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MINUTE_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MINUTE_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member HOUR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member HOUR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member DAY_OF_YEAR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member DAY_OF_YEAR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member YEAR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member YEAR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member ERA_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier loc0 ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member ERA_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ member getClass_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ member getClass_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return ((((((((cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND)) && (cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND))) && (cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE))) && (cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR))) && (cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR))) && (cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR))) && (cal1.get(Calendar.ERA) == .get(Calendar.ERA))) && (cal1.getClass() == cal2.getClass()));

ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier ^ arguments ^ member ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ 
ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MILLISECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MILLISECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member SECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member SECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MINUTE_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MINUTE_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member HOUR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member HOUR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member DAY_OF_YEAR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member DAY_OF_YEAR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member YEAR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member YEAR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member ERA_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member ERA_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier loc0 ^ ^ member getClass_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ member getClass_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return ((((((((cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND)) && (cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND))) && (cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE))) && (cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR))) && (cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR))) && (cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR))) && (cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA))) && (.getClass() == cal2.getClass()));

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member cal1_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member cal2_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((cal1 == null) || (cal2 == null))){


ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MILLISECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MILLISECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member SECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member SECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MINUTE_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MINUTE_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member HOUR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member HOUR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member DAY_OF_YEAR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member DAY_OF_YEAR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member YEAR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member YEAR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member ERA_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member ERA_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ member getClass_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ member getClass_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ 
ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MILLISECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MILLISECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member SECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member SECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MINUTE_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MINUTE_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member HOUR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member HOUR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member DAY_OF_YEAR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member DAY_OF_YEAR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member YEAR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member YEAR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member ERA_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier par2 ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member ERA_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ member getClass_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ member getClass_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return ((((((((cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND)) && (cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND))) && (cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE))) && (cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR))) && (cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR))) && (cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR))) && (cal1.get(Calendar.ERA) == .get(Calendar.ERA))) && (cal1.getClass() == cal2.getClass()));

ReturnStatement expression BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ 
ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ 
ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MILLISECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MILLISECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member SECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member SECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MINUTE_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MINUTE_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member HOUR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member HOUR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member DAY_OF_YEAR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member DAY_OF_YEAR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member YEAR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member YEAR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member ERA_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member ERA_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ 
ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier ^ member ^ ^ ^ member ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ 
ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MILLISECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MILLISECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member SECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member SECOND_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MINUTE_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member MINUTE_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member HOUR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member HOUR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member DAY_OF_YEAR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member DAY_OF_YEAR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member YEAR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member YEAR_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier cal1_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member ERA_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ arguments MemberReference qualifier Calendar_ter ^ ^ member ERA_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier par2 ^ ^ member getClass_ter ^ ^ ^ ^ operandr MethodInvocation qualifier cal2_ter ^ ^ member getClass_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return ((((((((cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND)) && (cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND))) && (cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE))) && (cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR))) && (cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR))) && (cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR))) && (cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA))) && (.getClass() == cal2.getClass()));

ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ 
stderr: 