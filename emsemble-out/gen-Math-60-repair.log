stdout: ReturnStatement expression BinaryOperation operator *_ter ^ ^ operandl Literal value 0.5_ter ^ ^ ^ ^ operandr BinaryOperation operator +_ter ^ ^ operandl Literal value 1.0_ter ^ ^ ^ ^ operandr MethodInvocation qualifier Erf_ter ^ ^ arguments BinaryOperation operator /_ter ^ ^ operandl MemberReference member dev_ter ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MemberReference member standardDeviation_ter ^ ^ ^ ^ operandr MethodInvocation qualifier FastMath_ter ^ ^ arguments Literal value 2.0_ter ^ ^ ^ ^ member sqrt_ter ^ ^ ^ ^ ^ ^ ^ ^ member cumulativeProbability_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return (0.5 * (1.0 + Erf.cumulativeProbability((dev / (standardDeviation * FastMath.sqrt(2.0))))));
ReturnStatement expression BinaryOperation operator /_ter ^ ^ operandl MemberReference member dev_ter ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MemberReference member standardDeviation_ter ^ ^ ^ ^ operandr MethodInvocation qualifier FastMath_ter ^ ^ arguments Literal value 2.0_ter ^ ^ ^ ^ member sqrt_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return (dev / (standardDeviation * FastMath.sqrt(2.0)));
ReturnStatement expression BinaryOperation operator +_ter ^ ^ operandl Literal value 1.0_ter ^ ^ ^ ^ operandr MethodInvocation qualifier Erf_ter ^ ^ arguments BinaryOperation operator /_ter ^ ^ operandl MemberReference member dev_ter ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MemberReference member standardDeviation_ter ^ ^ ^ ^ operandr MethodInvocation qualifier FastMath_ter ^ ^ arguments Literal value 2.0_ter ^ ^ ^ ^ member sqrt_ter ^ ^ ^ ^ ^ ^ ^ ^ member erf_ter ^ ^ ^ ^ ^ ^ ^ 
return (1.0 + Erf.erf((dev / (standardDeviation * FastMath.sqrt(2.0)))));
ReturnStatement expression BinaryOperation operator *_ter ^ ^ operandl Literal value 0.5_ter ^ ^ ^ ^ operandr BinaryOperation operator +_ter ^ ^ operandl Literal value 1.0_ter ^ ^ ^ ^ operandr MethodInvocation qualifier Erf_ter ^ ^ arguments BinaryOperation operator /_ter ^ ^ operandl MemberReference member dev_ter ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MemberReference member standardDeviation_ter ^ ^ ^ ^ operandr MethodInvocation qualifier FastMath_ter ^ ^ arguments Literal value 2.0_ter ^ ^ ^ ^ member cumulativeProbability_ter ^ ^ ^ ^ ^ ^ ^ ^ member erf_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return (0.5 * (1.0 + Erf.erf((dev / (standardDeviation * FastMath.cumulativeProbability(2.0))))));
ReturnStatement expression BinaryOperation operator *_ter ^ ^ operandl Literal value 0.5_ter ^ ^ ^ ^ operandr BinaryOperation operator +_ter ^ ^ operandl Literal value 1.0_ter ^ ^ ^ ^ operandr MethodInvocation qualifier Erf_ter ^ ^ arguments BinaryOperation operator /_ter ^ ^ operandl MemberReference member dev_ter ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MemberReference member dev_ter ^ ^ ^ ^ operandr MethodInvocation qualifier FastMath_ter ^ ^ arguments Literal value 2.0_ter ^ ^ ^ ^ member sqrt_ter ^ ^ ^ ^ ^ ^ ^ ^ member erf_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return (0.5 * (1.0 + Erf.erf((dev / (dev * FastMath.sqrt(2.0))))));
ReturnStatement expression BinaryOperation operator *_ter ^ ^ operandl Literal value 1_ter ^ ^ ^ ^ operandr BinaryOperation operator +_ter ^ ^ operandl Literal value 1.0_ter ^ ^ ^ ^ operandr MethodInvocation qualifier Erf_ter ^ ^ arguments BinaryOperation operator /_ter ^ ^ operandl MemberReference member dev_ter ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MemberReference member standardDeviation_ter ^ ^ ^ ^ operandr MethodInvocation qualifier FastMath_ter ^ ^ arguments Literal value 2.0_ter ^ ^ ^ ^ member sqrt_ter ^ ^ ^ ^ ^ ^ ^ ^ member erf_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return (1 * (1.0 + Erf.erf((dev / (standardDeviation * FastMath.sqrt(2.0))))));
ReturnStatement expression Literal value 0_ter ^ ^ ^ ^ ^ 
return 0;
ReturnStatement expression Literal value 1_ter ^ ^ ^ ^ ^ 
return 1;
ReturnStatement expression MethodInvocation qualifier Erf_ter ^ ^ arguments BinaryOperation operator /_ter ^ ^ operandl MemberReference member dev_ter ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MemberReference member standardDeviation_ter ^ ^ ^ ^ operandr MethodInvocation qualifier FastMath_ter ^ ^ arguments Literal value 2.0_ter ^ ^ ^ ^ member sqrt_ter ^ ^ ^ ^ ^ ^ ^ ^ member erf_ter ^ ^ ^ ^ ^ 
return Erf.erf((dev / (standardDeviation * FastMath.sqrt(2.0))));
ReturnStatement expression BinaryOperation operator *_ter ^ ^ operandl Literal value 2_ter ^ ^ ^ ^ operandr BinaryOperation operator +_ter ^ ^ operandl Literal value 1.0_ter ^ ^ ^ ^ operandr MethodInvocation qualifier Erf_ter ^ ^ arguments BinaryOperation operator /_ter ^ ^ operandl MemberReference member dev_ter ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MemberReference member standardDeviation_ter ^ ^ ^ ^ operandr MethodInvocation qualifier FastMath_ter ^ ^ arguments Literal value 2.0_ter ^ ^ ^ ^ member sqrt_ter ^ ^ ^ ^ ^ ^ ^ ^ member erf_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return (2 * (1.0 + Erf.erf((dev / (standardDeviation * FastMath.sqrt(2.0))))));
ReturnStatement expression BinaryOperation operator *_ter ^ ^ operandl Literal value 0.5_ter ^ ^ ^ ^ operandr BinaryOperation operator +_ter ^ ^ operandl Literal value 1.0_ter ^ ^ ^ ^ operandr MethodInvocation qualifier Erf_ter ^ ^ arguments BinaryOperation operator -_ter ^ ^ operandl MemberReference member dev_ter ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MemberReference member standardDeviation_ter ^ ^ ^ ^ operandr MethodInvocation qualifier FastMath_ter ^ ^ arguments Literal value 2.0_ter ^ ^ ^ ^ member sqrt_ter ^ ^ ^ ^ ^ ^ ^ ^ member erf_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return (0.5 * (1.0 + Erf.erf((dev - (standardDeviation * FastMath.sqrt(2.0))))));
ReturnStatement expression BinaryOperation operator *_ter ^ ^ operandl MemberReference member standardDeviation_ter ^ ^ ^ ^ operandr MethodInvocation qualifier FastMath_ter ^ ^ arguments Literal value 2.0_ter ^ ^ ^ ^ member sqrt_ter ^ ^ ^ ^ ^ ^ ^ 
return (standardDeviation * FastMath.sqrt(2.0));
ReturnStatement expression BinaryOperation operator *_ter ^ ^ operandl Literal value 0.5_ter ^ ^ ^ ^ operandr BinaryOperation operator +_ter ^ ^ operandl Literal value 1.0_ter ^ ^ ^ ^ operandr MethodInvocation qualifier Erf_ter ^ ^ arguments BinaryOperation operator /_ter ^ ^ operandl MemberReference member dev_ter ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MemberReference member standardDeviation_ter ^ ^ ^ ^ operandr MethodInvocation qualifier FastMath_ter ^ ^ arguments Literal value 2.0_ter ^ ^ ^ ^ member sqrt_ter ^ ^ ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return (0.5 * (1.0 + Erf.add((dev / (standardDeviation * FastMath.sqrt(2.0))))));
ReturnStatement expression BinaryOperation operator *_ter ^ ^ operandl Literal value 0.5_ter ^ ^ ^ ^ operandr BinaryOperation operator +_ter ^ ^ operandl Literal value 1.0_ter ^ ^ ^ ^ operandr MethodInvocation qualifier Erf_ter ^ ^ arguments BinaryOperation operator /_ter ^ ^ operandl MemberReference member dev_ter ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MemberReference member standardDeviation_ter ^ ^ ^ ^ operandr MethodInvocation qualifier FastMath_ter ^ ^ arguments Literal value 2.0_ter ^ ^ ^ ^ member sqrt_ter ^ ^ ^ ^ ^ ^ ^ ^ member debug_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return (0.5 * (1.0 + Erf.debug((dev / (standardDeviation * FastMath.sqrt(2.0))))));
ReturnStatement expression BinaryOperation operator *_ter ^ ^ operandl Literal value 0.5_ter ^ ^ ^ ^ operandr BinaryOperation operator +_ter ^ ^ operandl Literal value 1.0_ter ^ ^ ^ ^ operandr MethodInvocation qualifier Erf_ter ^ ^ arguments BinaryOperation operator /_ter ^ ^ operandl MemberReference member dev_ter ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MemberReference member standardDeviation_ter ^ ^ ^ ^ operandr MethodInvocation qualifier FastMath_ter ^ ^ arguments Literal value 2.0_ter ^ ^ ^ ^ member sqrt_ter ^ ^ ^ ^ ^ ^ ^ ^ member e_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return (0.5 * (1.0 + Erf.e((dev / (standardDeviation * FastMath.sqrt(2.0))))));
ReturnStatement expression BinaryOperation operator *_ter ^ ^ operandl Literal value 0.5_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl Literal value 1.0_ter ^ ^ ^ ^ operandr MethodInvocation qualifier Erf_ter ^ ^ arguments BinaryOperation operator /_ter ^ ^ operandl MemberReference member dev_ter ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MemberReference member standardDeviation_ter ^ ^ ^ ^ operandr MethodInvocation qualifier FastMath_ter ^ ^ arguments Literal value 2.0_ter ^ ^ ^ ^ member sqrt_ter ^ ^ ^ ^ ^ ^ ^ ^ member erf_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return (0.5 * (1.0 - Erf.erf((dev / (standardDeviation * FastMath.sqrt(2.0))))));
ReturnStatement expression BinaryOperation operator *_ter ^ ^ operandl Literal value 0.5_ter ^ ^ ^ ^ operandr BinaryOperation operator +_ter ^ ^ operandl Literal value 1.0_ter ^ ^ ^ ^ operandr MethodInvocation qualifier Erf_ter ^ ^ arguments BinaryOperation operator /_ter ^ ^ operandl MemberReference member dev_ter ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MemberReference member DEFAULT_INVERSE_ABSOLUTE_ACCURACY_ter ^ ^ ^ ^ operandr MethodInvocation qualifier FastMath_ter ^ ^ arguments Literal value 2.0_ter ^ ^ ^ ^ member sqrt_ter ^ ^ ^ ^ ^ ^ ^ ^ member erf_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return (0.5 * (1.0 + Erf.erf((dev / (DEFAULT_INVERSE_ABSOLUTE_ACCURACY * FastMath.sqrt(2.0))))));
ReturnStatement expression BinaryOperation operator *_ter ^ ^ operandl Literal value 0.5_ter ^ ^ ^ ^ operandr BinaryOperation operator +_ter ^ ^ operandl Literal value 1.0_ter ^ ^ ^ ^ operandr MethodInvocation qualifier Erf_ter ^ ^ arguments BinaryOperation operator /_ter ^ ^ operandl MemberReference member dev_ter ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MemberReference member SQRT2PI_ter ^ ^ ^ ^ operandr MethodInvocation qualifier FastMath_ter ^ ^ arguments Literal value 2.0_ter ^ ^ ^ ^ member sqrt_ter ^ ^ ^ ^ ^ ^ ^ ^ member erf_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return (0.5 * (1.0 + Erf.erf((dev / (SQRT2PI * FastMath.sqrt(2.0))))));
ReturnStatement expression BinaryOperation operator *_ter ^ ^ operandl Literal value 0.5_ter ^ ^ ^ ^ operandr BinaryOperation operator +_ter ^ ^ operandl Literal value 1.0_ter ^ ^ ^ ^ operandr MethodInvocation qualifier Erf_ter ^ ^ arguments BinaryOperation operator /_ter ^ ^ operandl MemberReference member dev_ter ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MemberReference member mean_ter ^ ^ ^ ^ operandr MethodInvocation qualifier FastMath_ter ^ ^ arguments Literal value 2.0_ter ^ ^ ^ ^ member sqrt_ter ^ ^ ^ ^ ^ ^ ^ ^ member erf_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return (0.5 * (1.0 + Erf.erf((dev / (mean * FastMath.sqrt(2.0))))));
ReturnStatement expression BinaryOperation operator *_ter ^ ^ operandl Literal value 0.5_ter ^ ^ ^ ^ operandr BinaryOperation operator +_ter ^ ^ operandl Literal value 1.0_ter ^ ^ ^ ^ operandr MethodInvocation qualifier Erf_ter ^ ^ arguments BinaryOperation operator /_ter ^ ^ operandl MemberReference member dev_ter ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MemberReference member standardDeviation_ter ^ ^ ^ ^ operandr MethodInvocation qualifier FastMath_ter ^ ^ arguments Literal value 2.0_ter ^ ^ ^ ^ member sqrt_ter ^ ^ ^ ^ ^ ^ ^ ^ member erf_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return (0.5 * (1.0 + Erf.erf((dev / (standardDeviation * FastMath.sqrt(2.0))))));
ReturnStatement expression BinaryOperation operator *_ter ^ ^ operandl Literal value 0.5_ter ^ ^ ^ ^ operandr BinaryOperation operator +_ter ^ ^ operandl Literal value 1.0_ter ^ ^ ^ ^ operandr MethodInvocation qualifier Erf_ter ^ ^ arguments BinaryOperation operator /_ter ^ ^ operandl MemberReference member dev_ter ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MemberReference member solverAbsoluteAccuracy_ter ^ ^ ^ ^ operandr MethodInvocation qualifier FastMath_ter ^ ^ arguments Literal value 2.0_ter ^ ^ ^ ^ member sqrt_ter ^ ^ ^ ^ ^ ^ ^ ^ member erf_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return (0.5 * (1.0 + Erf.erf((dev / (solverAbsoluteAccuracy * FastMath.sqrt(2.0))))));
ReturnStatement expression BinaryOperation operator *_ter ^ ^ operandl Literal value 0.5_ter ^ ^ ^ ^ operandr BinaryOperation operator +_ter ^ ^ operandl Literal value 1.0_ter ^ ^ ^ ^ operandr MethodInvocation qualifier Erf_ter ^ ^ arguments BinaryOperation operator /_ter ^ ^ operandl MemberReference member dev_ter ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MemberReference member x_ter ^ ^ ^ ^ operandr MethodInvocation qualifier FastMath_ter ^ ^ arguments Literal value 2.0_ter ^ ^ ^ ^ member sqrt_ter ^ ^ ^ ^ ^ ^ ^ ^ member erf_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return (0.5 * (1.0 + Erf.erf((dev / (x * FastMath.sqrt(2.0))))));
ReturnStatement expression BinaryOperation operator *_ter ^ ^ operandl Literal value 0.5_ter ^ ^ ^ ^ operandr BinaryOperation operator +_ter ^ ^ operandl Literal value 1.0_ter ^ ^ ^ ^ operandr MethodInvocation qualifier Erf_ter ^ ^ arguments BinaryOperation operator /_ter ^ ^ operandl MemberReference member dev_ter ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MemberReference member standardDeviation_ter ^ ^ ^ ^ operandr MethodInvocation qualifier FastMath_ter ^ ^ arguments Literal value 2.0_ter ^ ^ ^ ^ member sqrt_ter ^ ^ ^ ^ ^ ^ ^ ^ member max_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return (0.5 * (1.0 + Erf.max((dev / (standardDeviation * FastMath.sqrt(2.0))))));
ReturnStatement expression BinaryOperation operator *_ter ^ ^ operandl Literal value 0.5_ter ^ ^ ^ ^ operandr BinaryOperation operator +_ter ^ ^ operandl Literal value 1.0_ter ^ ^ ^ ^ operandr MethodInvocation qualifier Erf_ter ^ ^ arguments BinaryOperation operator /_ter ^ ^ operandl MemberReference member dev_ter ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member standardDeviation_ter ^ ^ ^ ^ operandr MethodInvocation qualifier FastMath_ter ^ ^ arguments Literal value 2.0_ter ^ ^ ^ ^ member sqrt_ter ^ ^ ^ ^ ^ ^ ^ ^ member erf_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return (0.5 * (1.0 + Erf.erf((dev / (standardDeviation - FastMath.sqrt(2.0))))));
ReturnStatement expression BinaryOperation operator *_ter ^ ^ operandl MemberReference member dev_ter ^ ^ ^ ^ operandr BinaryOperation operator +_ter ^ ^ operandl Literal value 1.0_ter ^ ^ ^ ^ operandr MethodInvocation qualifier Erf_ter ^ ^ arguments BinaryOperation operator /_ter ^ ^ operandl MemberReference member dev_ter ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MemberReference member standardDeviation_ter ^ ^ ^ ^ operandr MethodInvocation qualifier FastMath_ter ^ ^ arguments Literal value 2.0_ter ^ ^ ^ ^ member sqrt_ter ^ ^ ^ ^ ^ ^ ^ ^ member erf_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return (dev * (1.0 + Erf.erf((dev / (standardDeviation * FastMath.sqrt(2.0))))));
ReturnStatement expression BinaryOperation operator *_ter ^ ^ operandl Literal value 0.5_ter ^ ^ ^ ^ operandr BinaryOperation operator +_ter ^ ^ operandl Literal value 1.0_ter ^ ^ ^ ^ operandr MethodInvocation qualifier Erf_ter ^ ^ arguments BinaryOperation operator +_ter ^ ^ operandl MemberReference member dev_ter ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MemberReference member standardDeviation_ter ^ ^ ^ ^ operandr MethodInvocation qualifier FastMath_ter ^ ^ arguments Literal value 2.0_ter ^ ^ ^ ^ member sqrt_ter ^ ^ ^ ^ ^ ^ ^ ^ member erf_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return (0.5 * (1.0 + Erf.erf((dev + (standardDeviation * FastMath.sqrt(2.0))))));
ReturnStatement expression BinaryOperation operator *_ter ^ ^ operandl Literal value 0.5_ter ^ ^ ^ ^ operandr BinaryOperation operator +_ter ^ ^ operandl Literal value 1.0_ter ^ ^ ^ ^ operandr MethodInvocation qualifier Erf_ter ^ ^ arguments BinaryOperation operator /_ter ^ ^ operandl MemberReference member dev_ter ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MemberReference member standardDeviation_ter ^ ^ ^ ^ operandr MethodInvocation qualifier FastMath_ter ^ ^ arguments Literal value 2.0_ter ^ ^ ^ ^ member debug_ter ^ ^ ^ ^ ^ ^ ^ ^ member erf_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return (0.5 * (1.0 + Erf.erf((dev / (standardDeviation * FastMath.debug(2.0))))));
ReturnStatement expression BinaryOperation operator *_ter ^ ^ operandl Literal value 0.5_ter ^ ^ ^ ^ operandr BinaryOperation operator +_ter ^ ^ operandl Literal value 1.0_ter ^ ^ ^ ^ operandr MethodInvocation qualifier Erf_ter ^ ^ arguments BinaryOperation operator /_ter ^ ^ operandl MemberReference member dev_ter ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MemberReference member standardDeviation_ter ^ ^ ^ ^ operandr MethodInvocation qualifier FastMath_ter ^ ^ arguments Literal value 2.0_ter ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ ^ ^ ^ member erf_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return (0.5 * (1.0 + Erf.erf((dev / (standardDeviation * FastMath.add(2.0))))));
ReturnStatement expression BinaryOperation operator *_ter ^ ^ operandl Literal value 0_ter ^ ^ ^ ^ operandr BinaryOperation operator +_ter ^ ^ operandl Literal value 1.0_ter ^ ^ ^ ^ operandr MethodInvocation qualifier Erf_ter ^ ^ arguments BinaryOperation operator /_ter ^ ^ operandl MemberReference member dev_ter ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MemberReference member standardDeviation_ter ^ ^ ^ ^ operandr MethodInvocation qualifier FastMath_ter ^ ^ arguments Literal value 2.0_ter ^ ^ ^ ^ member sqrt_ter ^ ^ ^ ^ ^ ^ ^ ^ member erf_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return (0 * (1.0 + Erf.erf((dev / (standardDeviation * FastMath.sqrt(2.0))))));
ReturnStatement expression BinaryOperation operator *_ter ^ ^ operandl Literal value 0.5_ter ^ ^ ^ ^ operandr BinaryOperation operator +_ter ^ ^ operandl Literal value 1.0_ter ^ ^ ^ ^ operandr MethodInvocation qualifier Erf_ter ^ ^ arguments BinaryOperation operator /_ter ^ ^ operandl MemberReference member dev_ter ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MemberReference member standardDeviation_ter ^ ^ ^ ^ operandr MethodInvocation qualifier FastMath_ter ^ ^ arguments Literal value 2.0_ter ^ ^ ^ ^ member e_ter ^ ^ ^ ^ ^ ^ ^ ^ member erf_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return (0.5 * (1.0 + Erf.erf((dev / (standardDeviation * FastMath.e(2.0))))));
ReturnStatement expression BinaryOperation operator /_ter ^ ^ operandl MemberReference member dev_ter ^ ^ ^ ^ operandr BinaryOperation operator +_ter ^ ^ operandl Literal value 1.0_ter ^ ^ ^ ^ operandr MethodInvocation qualifier Erf_ter ^ ^ arguments BinaryOperation operator /_ter ^ ^ operandl MemberReference member dev_ter ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MemberReference member standardDeviation_ter ^ ^ ^ ^ operandr MethodInvocation qualifier FastMath_ter ^ ^ arguments Literal value 2.0_ter ^ ^ ^ ^ member sqrt_ter ^ ^ ^ ^ ^ ^ ^ ^ member erf_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return (dev / (1.0 + Erf.erf((dev / (standardDeviation * FastMath.sqrt(2.0))))));
ReturnStatement expression MemberReference member dev_ter ^ ^ ^ ^ ^ 
return dev;
ReturnStatement expression BinaryOperation operator *_ter ^ ^ operandl Literal value 1.0_ter ^ ^ ^ ^ operandr BinaryOperation operator +_ter ^ ^ operandl Literal value 1.0_ter ^ ^ ^ ^ operandr MethodInvocation qualifier Erf_ter ^ ^ arguments BinaryOperation operator /_ter ^ ^ operandl MemberReference member dev_ter ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MemberReference member standardDeviation_ter ^ ^ ^ ^ operandr MethodInvocation qualifier FastMath_ter ^ ^ arguments Literal value 2.0_ter ^ ^ ^ ^ member sqrt_ter ^ ^ ^ ^ ^ ^ ^ ^ member erf_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return (1.0 * (1.0 + Erf.erf((dev / (standardDeviation * FastMath.sqrt(2.0))))));
ReturnStatement expression BinaryOperation operator /_ter ^ ^ operandl Literal value 0.5_ter ^ ^ ^ ^ operandr BinaryOperation operator +_ter ^ ^ operandl Literal value 1.0_ter ^ ^ ^ ^ operandr MethodInvocation qualifier Erf_ter ^ ^ arguments BinaryOperation operator /_ter ^ ^ operandl MemberReference member dev_ter ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MemberReference member standardDeviation_ter ^ ^ ^ ^ operandr MethodInvocation qualifier FastMath_ter ^ ^ arguments Literal value 2.0_ter ^ ^ ^ ^ member sqrt_ter ^ ^ ^ ^ ^ ^ ^ ^ member erf_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return (0.5 / (1.0 + Erf.erf((dev / (standardDeviation * FastMath.sqrt(2.0))))));
IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member dev_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value 1_ter ^ ^ ^ ^ ^ 
if((dev == null)){
return 1;}
ReturnStatement expression BinaryOperation operator *_ter ^ ^ operandl Literal value 0.5_ter ^ ^ ^ ^ operandr BinaryOperation operator +_ter ^ ^ operandl Literal value 1.0_ter ^ ^ ^ ^ operandr MethodInvocation qualifier Erf_ter ^ ^ arguments BinaryOperation operator /_ter ^ ^ operandl MemberReference member dev_ter ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MemberReference member standardDeviation_ter ^ ^ ^ ^ operandr MethodInvocation qualifier FastMath_ter ^ ^ arguments Literal value 2.0_ter ^ ^ ^ ^ member sqrt_ter ^ ^ ^ ^ ^ ^ ^ ^ member x_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return (0.5 * (1.0 + Erf.x((dev / (standardDeviation * FastMath.sqrt(2.0))))));
ReturnStatement expression BinaryOperation operator /_ter ^ ^ operandl Literal value 1.0_ter ^ ^ ^ ^ operandr BinaryOperation operator +_ter ^ ^ operandl Literal value 1.0_ter ^ ^ ^ ^ operandr MethodInvocation qualifier Erf_ter ^ ^ arguments BinaryOperation operator /_ter ^ ^ operandl MemberReference member dev_ter ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MemberReference member standardDeviation_ter ^ ^ ^ ^ operandr MethodInvocation qualifier FastMath_ter ^ ^ arguments Literal value 2.0_ter ^ ^ ^ ^ member sqrt_ter ^ ^ ^ ^ ^ ^ ^ ^ member erf_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return (1.0 / (1.0 + Erf.erf((dev / (standardDeviation * FastMath.sqrt(2.0))))));
ReturnStatement expression BinaryOperation operator *_ter ^ ^ operandl Literal value 0.5_ter ^ ^ ^ ^ operandr BinaryOperation operator +_ter ^ ^ operandl Literal value 1.0_ter ^ ^ ^ ^ operandr MethodInvocation qualifier Erf_ter ^ ^ arguments BinaryOperation operator /_ter ^ ^ operandl MemberReference member dev_ter ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MemberReference member standardDeviation_ter ^ ^ ^ ^ operandr MethodInvocation qualifier FastMath_ter ^ ^ arguments Literal value 2.0_ter ^ ^ ^ ^ member sqrt_ter ^ ^ ^ ^ ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return (0.5 * (1.0 + Erf.get((dev / (standardDeviation * FastMath.sqrt(2.0))))));
ReturnStatement expression BinaryOperation operator *_ter ^ ^ operandl MethodInvocation qualifier Erf_ter ^ ^ arguments BinaryOperation operator /_ter ^ ^ operandl MemberReference member dev_ter ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MemberReference member standardDeviation_ter ^ ^ ^ ^ operandr MethodInvocation qualifier FastMath_ter ^ ^ arguments Literal value 2.0_ter ^ ^ ^ ^ member sqrt_ter ^ ^ ^ ^ ^ ^ ^ ^ member erf_ter ^ ^ ^ ^ operandr BinaryOperation operator +_ter ^ ^ operandl Literal value 1.0_ter ^ ^ ^ ^ operandr MethodInvocation qualifier Erf_ter ^ ^ arguments BinaryOperation operator /_ter ^ ^ operandl MemberReference member dev_ter ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MemberReference member standardDeviation_ter ^ ^ ^ ^ operandr MethodInvocation qualifier FastMath_ter ^ ^ arguments Literal value 2.0_ter ^ ^ ^ ^ member sqrt_ter ^ ^ ^ ^ ^ ^ ^ ^ member erf_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return (Erf.erf((dev / (standardDeviation * FastMath.sqrt(2.0)))) * (1.0 + Erf.erf((dev / (standardDeviation * FastMath.sqrt(2.0))))));
ReturnStatement expression BinaryOperation operator *_ter ^ ^ operandl Literal value 0.5_ter ^ ^ ^ ^ operandr BinaryOperation operator +_ter ^ ^ operandl Literal value 1.0_ter ^ ^ ^ ^ operandr MethodInvocation qualifier Erf_ter ^ ^ arguments BinaryOperation operator /_ter ^ ^ operandl MemberReference member dev_ter ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MemberReference member standardDeviation_ter ^ ^ ^ ^ operandr MethodInvocation qualifier x_ter ^ ^ arguments Literal value 2.0_ter ^ ^ ^ ^ member sqrt_ter ^ ^ ^ ^ ^ ^ ^ ^ member erf_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return (0.5 * (1.0 + Erf.erf((dev / (standardDeviation * x.sqrt(2.0))))));
ReturnStatement expression BinaryOperation operator *_ter ^ ^ operandl Literal value 0.5_ter ^ ^ ^ ^ operandr BinaryOperation operator +_ter ^ ^ operandl Literal value 1.0_ter ^ ^ ^ ^ operandr MethodInvocation qualifier Erf_ter ^ ^ arguments BinaryOperation operator /_ter ^ ^ operandl MemberReference member dev_ter ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MemberReference member ex_ter ^ ^ ^ ^ operandr MethodInvocation qualifier FastMath_ter ^ ^ arguments Literal value 2.0_ter ^ ^ ^ ^ member sqrt_ter ^ ^ ^ ^ ^ ^ ^ ^ member erf_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return (0.5 * (1.0 + Erf.erf((dev / (ex * FastMath.sqrt(2.0))))));
IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member dev_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value 0_ter ^ ^ ^ ^ ^ 
if((dev == null)){
return 0;}
ReturnStatement expression BinaryOperation operator *_ter ^ ^ operandl Literal value 0.5_ter ^ ^ ^ ^ operandr BinaryOperation operator +_ter ^ ^ operandl Literal value 1.0_ter ^ ^ ^ ^ operandr MethodInvocation qualifier Erf_ter ^ ^ arguments BinaryOperation operator /_ter ^ ^ operandl MemberReference member dev_ter ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MemberReference member standardDeviation_ter ^ ^ ^ ^ operandr MethodInvocation qualifier FastMath_ter ^ ^ arguments Literal value 2.0_ter ^ ^ ^ ^ member sqrt_ter ^ ^ ^ ^ ^ ^ ^ ^ member put_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return (0.5 * (1.0 + Erf.put((dev / (standardDeviation * FastMath.sqrt(2.0))))));
ReturnStatement expression BinaryOperation operator *_ter ^ ^ operandl Literal value 0.5_ter ^ ^ ^ ^ operandr BinaryOperation operator +_ter ^ ^ operandl Literal value 1.0_ter ^ ^ ^ ^ operandr MethodInvocation qualifier Erf_ter ^ ^ arguments BinaryOperation operator /_ter ^ ^ operandl MemberReference member dev_ter ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MemberReference member standardDeviation_ter ^ ^ ^ ^ operandr MethodInvocation qualifier FastMath_ter ^ ^ arguments Literal value 2.0_ter ^ ^ ^ ^ member max_ter ^ ^ ^ ^ ^ ^ ^ ^ member erf_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return (0.5 * (1.0 + Erf.erf((dev / (standardDeviation * FastMath.max(2.0))))));
ReturnStatement expression BinaryOperation operator -_ter ^ ^ operandl MemberReference member mean_ter ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl Literal value 20_ter ^ ^ ^ ^ operandr MemberReference member standardDeviation_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return (mean - (20 * standardDeviation));
ReturnStatement expression BinaryOperation operator /_ter ^ ^ operandl MethodInvocation qualifier Erf_ter ^ ^ arguments BinaryOperation operator /_ter ^ ^ operandl MemberReference member dev_ter ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MemberReference member standardDeviation_ter ^ ^ ^ ^ operandr MethodInvocation qualifier FastMath_ter ^ ^ arguments Literal value 2.0_ter ^ ^ ^ ^ member sqrt_ter ^ ^ ^ ^ ^ ^ ^ ^ member erf_ter ^ ^ ^ ^ operandr BinaryOperation operator +_ter ^ ^ operandl Literal value 1.0_ter ^ ^ ^ ^ operandr MethodInvocation qualifier Erf_ter ^ ^ arguments BinaryOperation operator /_ter ^ ^ operandl MemberReference member dev_ter ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MemberReference member standardDeviation_ter ^ ^ ^ ^ operandr MethodInvocation qualifier FastMath_ter ^ ^ arguments Literal value 2.0_ter ^ ^ ^ ^ member sqrt_ter ^ ^ ^ ^ ^ ^ ^ ^ member erf_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return (Erf.erf((dev / (standardDeviation * FastMath.sqrt(2.0)))) / (1.0 + Erf.erf((dev / (standardDeviation * FastMath.sqrt(2.0))))));
ReturnStatement expression Literal value 1_ter ^ ^ ^ ^ ^ 
if (true) { return 1; }

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member dev_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((dev != null)){


ReturnStatement expression BinaryOperation operator *_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl Literal value 1.0_ter ^ ^ ^ ^ operandr MemberReference member dev_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator +_ter ^ ^ operandl Literal value 1.0_ter ^ ^ ^ ^ operandr MethodInvocation qualifier Erf_ter ^ ^ arguments BinaryOperation operator /_ter ^ ^ operandl MemberReference member dev_ter ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MemberReference member standardDeviation_ter ^ ^ ^ ^ operandr MethodInvocation qualifier FastMath_ter ^ ^ arguments Literal value 2.0_ter ^ ^ ^ ^ member sqrt_ter ^ ^ ^ ^ ^ ^ ^ ^ member erf_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return ((1.0 * dev) * (1.0 + Erf.erf((dev / (standardDeviation * FastMath.sqrt(2.0))))));
ReturnStatement expression BinaryOperation operator *_ter ^ ^ operandl Literal value 0.5_ter ^ ^ ^ ^ operandr BinaryOperation operator +_ter ^ ^ operandl Literal value 1.0_ter ^ ^ ^ ^ operandr MethodInvocation qualifier Erf_ter ^ ^ arguments BinaryOperation operator <=_ter ^ ^ operandl MemberReference member dev_ter ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MemberReference member standardDeviation_ter ^ ^ ^ ^ operandr MethodInvocation qualifier FastMath_ter ^ ^ arguments Literal value 2.0_ter ^ ^ ^ ^ member sqrt_ter ^ ^ ^ ^ ^ ^ ^ ^ member erf_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return (0.5 * (1.0 + Erf.erf((dev <= (standardDeviation * FastMath.sqrt(2.0))))));
ReturnStatement expression BinaryOperation operator *_ter ^ ^ operandl Literal value 2.0_ter ^ ^ ^ ^ operandr BinaryOperation operator +_ter ^ ^ operandl Literal value 1.0_ter ^ ^ ^ ^ operandr MethodInvocation qualifier Erf_ter ^ ^ arguments BinaryOperation operator /_ter ^ ^ operandl MemberReference member dev_ter ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MemberReference member standardDeviation_ter ^ ^ ^ ^ operandr MethodInvocation qualifier FastMath_ter ^ ^ arguments Literal value 2.0_ter ^ ^ ^ ^ member sqrt_ter ^ ^ ^ ^ ^ ^ ^ ^ member erf_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return (2.0 * (1.0 + Erf.erf((dev / (standardDeviation * FastMath.sqrt(2.0))))));
ReturnStatement expression BinaryOperation operator +_ter ^ ^ operandl MemberReference member mean_ter ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl Literal value 20_ter ^ ^ ^ ^ operandr MemberReference member standardDeviation_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return (mean + (20 * standardDeviation));
stderr: 