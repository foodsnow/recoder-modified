stdout: condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference qualifier categoryKeys_ter ^ ^ member length_ter ^ ^ ^ ^ operandr This selectors MemberReference member startData_ter ^ ^ ^ ArraySelector index Literal value 0_ter ^ ^ ^ ^ ^ MemberReference member length_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((categoryKeys.length == this.startData.[0].length)){

condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference qualifier categoryKeys_ter ^ ^ member length_ter ^ ^ ^ ^ operandr This selectors MemberReference member startData_ter ^ ^ ^ ArraySelector index Literal value 0_ter ^ ^ ^ ^ ^ MemberReference member length_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((categoryKeys.length != this.startData.[0].length)){

condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference qualifier categoryKeys_ter ^ ^ member length_ter ^ ^ ^ ^ operandr This selectors MemberReference member endData_ter ^ ^ ^ ArraySelector index Literal value 0_ter ^ ^ ^ ^ ^ MemberReference member length_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((categoryKeys.length != this.endData.[0].length)){

condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference qualifier categoryKeys_ter ^ ^ member length_ter ^ ^ ^ ^ operandr This selectors MemberReference member startData_ter ^ ^ ^ ArraySelector index Literal value 0_ter ^ ^ ^ ^ ^ MemberReference member length_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((categoryKeys.length && this.startData.[0].length)){

condition BinaryOperation operator >_ter ^ ^ operandl MemberReference qualifier categoryKeys_ter ^ ^ member length_ter ^ ^ ^ ^ operandr This selectors MemberReference member startData_ter ^ ^ ^ ArraySelector index Literal value 0_ter ^ ^ ^ ^ ^ MemberReference member length_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((categoryKeys.length > this.startData.[0].length)){

condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference qualifier categoryKeys_ter ^ ^ member length_ter ^ ^ ^ ^ operandr This selectors MemberReference member categoryKeys_ter ^ ^ ^ ArraySelector index Literal value 0_ter ^ ^ ^ ^ ^ MemberReference member length_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((categoryKeys.length != this.categoryKeys.[0].length)){

condition BinaryOperation operator ||_ter ^ ^ operandl MemberReference qualifier categoryKeys_ter ^ ^ member length_ter ^ ^ ^ ^ operandr This selectors MemberReference member startData_ter ^ ^ ^ ArraySelector index Literal value 0_ter ^ ^ ^ ^ ^ MemberReference member length_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((categoryKeys.length || this.startData.[0].length)){

ReturnStatement_ter ^ 
if (true) { return;
 }


condition BinaryOperation operator <_ter ^ ^ operandl MemberReference qualifier categoryKeys_ter ^ ^ member length_ter ^ ^ ^ ^ operandr This selectors MemberReference member startData_ter ^ ^ ^ ArraySelector index Literal value 0_ter ^ ^ ^ ^ ^ MemberReference member length_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((categoryKeys.length < this.startData.[0].length)){

condition BinaryOperation operator >=_ter ^ ^ operandl MemberReference qualifier categoryKeys_ter ^ ^ member length_ter ^ ^ ^ ^ operandr This selectors MemberReference member startData_ter ^ ^ ^ ArraySelector index Literal value 0_ter ^ ^ ^ ^ ^ MemberReference member length_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((categoryKeys.length >= this.startData.[0].length)){

condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference qualifier categoryKeys_ter ^ ^ member length_ter ^ ^ ^ ^ operandr This selectors MemberReference member i_ter ^ ^ ^ ArraySelector index Literal value 0_ter ^ ^ ^ ^ ^ MemberReference member length_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((categoryKeys.length != this.i.[0].length)){

condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference qualifier categoryKeys_ter ^ ^ member length_ter ^ ^ ^ ^ operandr This selectors MemberReference member startData_ter ^ ^ ^ ArraySelector index Literal value 0_ter ^ ^ ^ ^ ^ MemberReference member categoryKeys_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((categoryKeys.length != this.startData.[0].categoryKeys)){

condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference qualifier categoryKeys_ter ^ ^ member length_ter ^ ^ ^ ^ operandr This selectors MemberReference selectors MemberReference member startData_ter ^ ^ ^ ArraySelector index Literal value 0_ter ^ ^ ^ ^ ^ MemberReference member length_ter ^ ^ ^ ^ member startData_ter ^ ^ ^ ArraySelector index Literal value 0_ter ^ ^ ^ ^ ^ MemberReference member length_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((categoryKeys.length != this.startDatastartData.[0].length.[0].length)){

condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference qualifier categoryKeys_ter ^ ^ member length_ter ^ ^ ^ ^ operandr This selectors MemberReference selectors MemberReference member startData_ter ^ ^ ^ ArraySelector index Literal value 0_ter ^ ^ ^ ^ ^ MemberReference member length_ter ^ ^ ^ ^ member endData_ter ^ ^ ^ ArraySelector index Literal value 0_ter ^ ^ ^ ^ ^ MemberReference member length_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((categoryKeys.length != this.endDatastartData.[0].length.[0].length)){

condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference qualifier categoryKeys_ter ^ ^ member length_ter ^ ^ ^ ^ operandr This selectors MemberReference member par1 ^ ^ ^ ArraySelector index Literal value 0_ter ^ ^ ^ ^ ^ MemberReference member length_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((categoryKeys.length != this..[0].length)){

condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference qualifier categoryKeys_ter ^ ^ member length_ter ^ ^ ^ ^ operandr This selectors MemberReference selectors ArraySelector index MemberReference member i_ter ^ ^ ^ ^ ^ ^ member startData_ter ^ ^ ^ ArraySelector index Literal value 0_ter ^ ^ ^ ^ ^ MemberReference member length_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((categoryKeys.length != this.startData[i].[0].length)){

condition BinaryOperation operator <=_ter ^ ^ operandl MemberReference qualifier categoryKeys_ter ^ ^ member length_ter ^ ^ ^ ^ operandr This selectors MemberReference member startData_ter ^ ^ ^ ArraySelector index Literal value 0_ter ^ ^ ^ ^ ^ MemberReference member length_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((categoryKeys.length <= this.startData.[0].length)){

BreakStatement_ter ^ 
break;


condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member categoryKeys_ter ^ ^ ^ ^ operandr This selectors MemberReference member startData_ter ^ ^ ^ ArraySelector index Literal value 0_ter ^ ^ ^ ^ ^ MemberReference member length_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((categoryKeys != this.startData.[0].length)){

condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference qualifier categoryKeys_ter ^ ^ member length_ter ^ ^ ^ ^ operandr This selectors MemberReference member startData_ter ^ ^ ^ ArraySelector index Literal value 0_ter ^ ^ ^ ^ ^ MemberReference member i_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((categoryKeys.length != this.startData.[0].i)){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference qualifier categoryKeys_ter ^ ^ member length_ter ^ ^ ^ ^ operandr This selectors MemberReference member startData_ter ^ ^ ^ ArraySelector index Literal value 0_ter ^ ^ ^ ^ ^ MemberReference member length_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl This selectors MemberReference member startData_ter ^ ^ ^ ArraySelector index Literal value 0_ter ^ ^ ^ ^ ^ MemberReference member length_ter ^ ^ ^ ^ ^ ^ operandr This selectors MemberReference member startData_ter ^ ^ ^ ArraySelector index Literal value 0_ter ^ ^ ^ ^ ^ MemberReference member length_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((categoryKeys.length != this.startData.[0].length) && (this.startData.[0].length == this.startData.[0].length))){


condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member startData_ter ^ ^ ^ ^ operandr This selectors MemberReference member startData_ter ^ ^ ^ ArraySelector index Literal value 0_ter ^ ^ ^ ^ ^ MemberReference member length_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((startData != this.startData.[0].length)){

condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference qualifier categoryKeys_ter ^ ^ member length_ter ^ ^ ^ ^ operandr This selectors MemberReference selectors MemberReference member startData_ter ^ ^ ^ ArraySelector index Literal value 0_ter ^ ^ ^ ^ ^ MemberReference member length_ter ^ ^ ^ ^ member length_ter ^ ^ ^ ArraySelector index Literal value 0_ter ^ ^ ^ ^ ^ MemberReference member length_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((categoryKeys.length != this.lengthstartData.[0].length.[0].length)){

condition BinaryOperation operator instanceof_ter ^ ^ operandl MemberReference qualifier categoryKeys_ter ^ ^ member length_ter ^ ^ ^ ^ operandr This selectors MemberReference member startData_ter ^ ^ ^ ArraySelector index Literal value 0_ter ^ ^ ^ ^ ^ MemberReference member length_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((categoryKeys.length instanceof this.startData.[0].length)){

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl This selectors MemberReference member startData_ter ^ ^ ^ ArraySelector index Literal value 0_ter ^ ^ ^ ^ ^ MemberReference member length_ter ^ ^ ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((this.startData.[0].length != null)){


IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl This selectors MemberReference member startData_ter ^ ^ ^ ArraySelector index Literal value 0_ter ^ ^ ^ ^ ^ MemberReference member length_ter ^ ^ ^ ^ ^ ^ operandr This selectors MemberReference member startData_ter ^ ^ ^ ArraySelector index Literal value 0_ter ^ ^ ^ ^ ^ MemberReference member length_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((this.startData.[0].length != this.startData.[0].length)){


IfStatement condition BinaryOperation operator +_ter ^ ^ operandl Literal value <string>_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ 
if(("null" + "null")){

condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference qualifier categoryKeys_ter ^ ^ member length_ter ^ ^ ^ ^ operandr This selectors MemberReference member loc1 ^ ^ ^ ArraySelector index Literal value 0_ter ^ ^ ^ ^ ^ MemberReference member length_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((categoryKeys.length != this..[0].length)){

condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference qualifier categoryKeys_ter ^ ^ member length_ter ^ ^ ^ ^ operandr This selectors MemberReference selectors MemberReference member startData_ter ^ ^ ^ ArraySelector index Literal value 0_ter ^ ^ ^ ^ ^ MemberReference member length_ter ^ ^ ^ ^ member categoryKeys_ter ^ ^ ^ ArraySelector index Literal value 0_ter ^ ^ ^ ^ ^ MemberReference member length_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((categoryKeys.length != this.categoryKeysstartData.[0].length.[0].length)){

condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference qualifier categoryKeys_ter ^ ^ member length_ter ^ ^ ^ ^ operandr This selectors MemberReference selectors ArraySelector index MemberReference member i_ter ^ ^ ^ ^ ^ ^ member length_ter ^ ^ ^ ArraySelector index Literal value 0_ter ^ ^ ^ ^ ^ MemberReference member length_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((categoryKeys.length != this.length[i].[0].length)){

IfStatement condition This selectors MemberReference member startData_ter ^ ^ ^ ArraySelector index Literal value 0_ter ^ ^ ^ ^ ^ MemberReference member length_ter ^ ^ ^ ^ ^ ^ ^ 
if(this.startData.[0].length){


condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member length_ter ^ ^ ^ ^ operandr This selectors MemberReference member startData_ter ^ ^ ^ ArraySelector index Literal value 0_ter ^ ^ ^ ^ ^ MemberReference member length_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((length != this.startData.[0].length)){

condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference qualifier categoryKeys_ter ^ ^ member length_ter ^ ^ ^ ^ operandr This selectors MemberReference qualifier startData_ter ^ ^ member startData_ter ^ ^ ^ ArraySelector index Literal value 0_ter ^ ^ ^ ^ ^ MemberReference member length_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((categoryKeys.length != this.startData.startData.[0].length)){

condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference qualifier categoryKeys_ter ^ ^ member length_ter ^ ^ ^ ^ operandr This selectors MemberReference qualifier endData_ter ^ ^ member startData_ter ^ ^ ^ ArraySelector index Literal value 0_ter ^ ^ ^ ^ ^ MemberReference member length_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((categoryKeys.length != this.endData.startData.[0].length)){

condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference qualifier categoryKeys_ter ^ ^ member length_ter ^ ^ ^ ^ operandr This selectors MemberReference selectors ArraySelector index Literal value 0_ter ^ ^ ^ ^ ^ ^ member startData_ter ^ ^ ^ ArraySelector index Literal value 0_ter ^ ^ ^ ^ ^ MemberReference member length_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((categoryKeys.length != this.startData[0].[0].length)){

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member categoryKeys_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if((categoryKeys == null)){
return;
}

IfStatement condition This selectors MemberReference member startData_ter ^ ^ ^ ArraySelector index Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(this.startData.[0]){


IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl This selectors MemberReference member startData_ter ^ ^ ^ ArraySelector index Literal value 0_ter ^ ^ ^ ^ ^ MemberReference member length_ter ^ ^ ^ ^ ^ ^ operandr This selectors MemberReference member startData_ter ^ ^ ^ ArraySelector index Literal value 0_ter ^ ^ ^ ^ ^ MemberReference member length_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((this.startData.[0].length == this.startData.[0].length)){


IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference qualifier categoryKeys_ter ^ ^ member length_ter ^ ^ ^ ^ operandr This selectors MemberReference member startData_ter ^ ^ ^ ArraySelector index Literal value 0_ter ^ ^ ^ ^ ^ MemberReference member length_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl This selectors MemberReference member startData_ter ^ ^ ^ ArraySelector index Literal value 0_ter ^ ^ ^ ^ ^ MemberReference member length_ter ^ ^ ^ ^ ^ ^ operandr This selectors MemberReference member startData_ter ^ ^ ^ ArraySelector index Literal value 0_ter ^ ^ ^ ^ ^ MemberReference member length_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((categoryKeys.length != this.startData.[0].length) && (this.startData.[0].length != this.startData.[0].length))){


IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference qualifier categoryKeys_ter ^ ^ member length_ter ^ ^ ^ ^ operandr This selectors MemberReference member startData_ter ^ ^ ^ ArraySelector index Literal value 0_ter ^ ^ ^ ^ ^ MemberReference member length_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl This selectors MemberReference member startData_ter ^ ^ ^ ArraySelector index Literal value 0_ter ^ ^ ^ ^ ^ MemberReference member length_ter ^ ^ ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((categoryKeys.length != this.startData.[0].length) && (this.startData.[0].length == null))){


ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if (true) { return null; }


IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference qualifier categoryKeys_ter ^ ^ member length_ter ^ ^ ^ ^ operandr This selectors MemberReference member startData_ter ^ ^ ^ ArraySelector index Literal value 0_ter ^ ^ ^ ^ ^ MemberReference member length_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator +_ter ^ ^ operandl Literal value <string>_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((categoryKeys.length != this.startData.[0].length) && ("null" + "null"))){


IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member categoryKeys_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((categoryKeys != null)){


StatementExpression expression SuperMethodInvocation member setCategoryKeys_ter ^ ^ ^ ^ ^ 
super.setCategoryKeys();



ReturnStatement_ter ^ 
if (true) { return;
 }

StatementExpression expression Assignment expressionl This selectors MemberReference member categoryKeys_ter ^ ^ ^ ^ ^ ^ value Literal value null_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
this.categoryKeys = null;

StatementExpression expression Assignment expressionl This selectors MemberReference member categoryKeys_ter ^ ^ ^ ^ ^ ^ value MemberReference member categoryKeys_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
this.categoryKeys = categoryKeys;

StatementExpression expression Assignment expressionl This selectors MemberReference member seriesKeys_ter ^ ^ ^ ^ ^ ^ value MemberReference member seriesKeys_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
this.seriesKeys = seriesKeys;

StatementExpression expression Assignment expressionl This selectors MemberReference member categoryKeys_ter ^ ^ ^ ^ ^ ^ value MethodInvocation arguments MemberReference member categoryCount_ter ^ ^ ^ MemberReference member prefix_ter ^ ^ ^ ^ member generateKeys_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
this.categoryKeys = generateKeys(categoryCount, prefix);

BreakStatement_ter ^ 
break;

StatementExpression expression Assignment expressionl This selectors MemberReference member seriesKeys_ter ^ ^ ^ ^ ^ ^ value MethodInvocation arguments MemberReference member seriesCount_ter ^ ^ ^ MemberReference member prefix_ter ^ ^ ^ ^ member generateKeys_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
this.seriesKeys = generateKeys(seriesCount, prefix);

StatementExpression expression Assignment expressionl This selectors MemberReference member seriesKeys_ter ^ ^ ^ ^ ^ ^ value Literal value null_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
this.seriesKeys = null;

StatementExpression expression Assignment expressionl This selectors MemberReference member categoryKeys_ter ^ ^ ^ ^ ^ ^ value Literal value null_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
this.categoryKeys = null;

StatementExpression expression Assignment expressionl This selectors MemberReference member categoryCount_ter ^ ^ ^ ^ ^ ^ value Literal value null_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
this.categoryCount = null;

StatementExpression expression Assignment expressionl This selectors MemberReference member categoryKeys_ter ^ ^ ^ ^ ^ ^ value MemberReference member categoryKeys_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
this.categoryKeys = categoryKeys;

StatementExpression expression Assignment expressionl This selectors MemberReference member errMsg_ter ^ ^ ^ ^ ^ ^ value Literal value null_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
this.errMsg = null;

StatementExpression expression Assignment expressionl This selectors MemberReference member loc3 ^ ^ ^ ^ ^ ^ value Literal value null_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
this. = null;


StatementExpression expression Assignment expressionl This selectors MemberReference member seriesKeys_ter ^ ^ ^ ^ ^ ^ value MemberReference member seriesKeys_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
this.seriesKeys = seriesKeys;

StatementExpression expression Assignment expressionl This selectors MemberReference member loc4 ^ ^ ^ ^ ^ ^ value Literal value null_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
this. = null;


StatementExpression expression Assignment expressionl This selectors MemberReference member seriesKeys_ter ^ ^ ^ ^ ^ ^ value Literal value <string>_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
this.seriesKeys = "null";

ContinueStatement_ter ^ 
continue;

StatementExpression expression Assignment expressionl This selectors MemberReference member seriesKeys_ter ^ ^ ^ ^ ^ ^ value MethodInvocation arguments MemberReference member seriesCount_ter ^ ^ ^ MemberReference member prefix_ter ^ ^ ^ ^ member generateKeys_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
this.seriesKeys = generateKeys(seriesCount, prefix);

IfStatement condition BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl Literal value <string>_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ 
if((("null" + "null") + "null")){

StatementExpression expression Assignment expressionl This selectors MemberReference member categoryKeys_ter ^ ^ ^ ^ ^ ^ value MethodInvocation arguments MemberReference member categoryCount_ter ^ ^ ^ MemberReference member prefix_ter ^ ^ ^ ^ member generateKeys_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
this.categoryKeys = generateKeys(categoryCount, prefix);

ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if (true) { return null; }

StatementExpression expression Assignment expressionl This selectors MemberReference member prefix_ter ^ ^ ^ ^ ^ ^ value Literal value null_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
this.prefix = null;

StatementExpression expression Assignment expressionl This selectors MemberReference member seriesCount_ter ^ ^ ^ ^ ^ ^ value Literal value null_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
this.seriesCount = null;

IfStatement condition BinaryOperation operator +_ter ^ ^ operandl Literal value <string>_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ 
if(("null" + "null")){

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference qualifier categoryKeys_ter ^ ^ member length_ter ^ ^ ^ ^ operandr MemberReference member categoryCount_ter ^ ^ ^ ^ ^ ^ ^ 
if((categoryKeys.length != categoryCount)){

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member categoryKeys_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((categoryKeys != null)){

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl This selectors MemberReference member seriesKeys_ter ^ ^ ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ 
if((this.seriesKeys != "null")){

ReturnStatement_ter ^ 
return;

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member categoryCount_ter ^ ^ ^ ^ operandr MemberReference selectors ArraySelector index Literal value 0_ter ^ ^ ^ ^ ^ MemberReference member length_ter ^ ^ ^ ^ member ends_ter ^ ^ ^ ^ ^ ^ ^ 
if((categoryCount != ends[0].length)){

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl This selectors MemberReference member seriesKeys_ter ^ ^ ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((this.seriesKeys != null)){

StatementExpression expression Assignment expressionl This selectors MemberReference member seriesKeys_ter ^ ^ ^ ^ ^ ^ value Literal value 0_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
this.seriesKeys = 0;

StatementExpression expression Assignment expressionl This selectors MemberReference member categoryKeys_ter ^ ^ ^ ^ ^ ^ value Literal value null_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
StatementExpression expression Assignment expressionl This selectors MemberReference member categoryKeys_ter ^ ^ ^ ^ ^ ^ value Literal value null_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
this.categoryKeys = null;
this.categoryKeys = null;

stderr: 