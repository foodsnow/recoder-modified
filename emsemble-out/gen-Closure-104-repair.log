stdout: condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ 
if((result != null)){
condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ 
if((result == null)){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier result_ter ^ ^ member isNoType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && result.isNoType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier result_ter ^ ^ member isNoObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && result.isNoObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier result_ter ^ ^ member isEmptyType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && result.isEmptyType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier result_ter ^ ^ member isNumberObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && result.isNumberObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier result_ter ^ ^ member isNumberValueType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && result.isNumberValueType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier result_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && result.isFunctionPrototypeType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier result_ter ^ ^ member isStringObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && result.isStringObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier result_ter ^ ^ member isTheObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && result.isTheObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier result_ter ^ ^ member isStringValueType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && result.isStringValueType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier result_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && result.isString())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier result_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && result.isNumber())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier result_ter ^ ^ member isArrayType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && result.isArrayType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier result_ter ^ ^ member isBooleanObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && result.isBooleanObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier result_ter ^ ^ member isBooleanValueType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && result.isBooleanValueType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier result_ter ^ ^ member isRegexpType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && result.isRegexpType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier result_ter ^ ^ member isDateType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && result.isDateType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier result_ter ^ ^ member isNullType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && result.isNullType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier result_ter ^ ^ member isVoidType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && result.isVoidType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier result_ter ^ ^ member isAllType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && result.isAllType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier result_ter ^ ^ member isUnknownType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && result.isUnknownType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier result_ter ^ ^ member isCheckedUnknownType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && result.isCheckedUnknownType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier result_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && result.isUnionType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier result_ter ^ ^ member isFunctionType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && result.isFunctionType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier result_ter ^ ^ member isEnumElementType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && result.isEnumElementType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier result_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && result.isEnumType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier result_ter ^ ^ member isNamedType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && result.isNamedType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier result_ter ^ ^ member isRecordType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && result.isRecordType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier result_ter ^ ^ member isTemplateType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && result.isTemplateType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier result_ter ^ ^ member isObject_ter ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && result.isObject())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier result_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && result.isConstructor())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier result_ter ^ ^ member isNominalType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && result.isNominalType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier result_ter ^ ^ member isInstanceType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && result.isInstanceType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier result_ter ^ ^ member isInterface_ter ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && result.isInterface())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier result_ter ^ ^ member isOrdinaryFunction_ter ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && result.isOrdinaryFunction())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier result_ter ^ ^ member matchesInt32Context_ter ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && result.matchesInt32Context())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier result_ter ^ ^ member matchesUint32Context_ter ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && result.matchesUint32Context())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier result_ter ^ ^ member matchesNumberContext_ter ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && result.matchesNumberContext())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier result_ter ^ ^ member matchesStringContext_ter ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && result.matchesStringContext())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier result_ter ^ ^ member matchesObjectContext_ter ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && result.matchesObjectContext())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier result_ter ^ ^ member canBeCalled_ter ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && result.canBeCalled())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier result_ter ^ ^ member isNullable_ter ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && result.isNullable())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier result_ter ^ ^ member isResolved_ter ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && result.isResolved())){

condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member otherAlternate_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ 
if((otherAlternate != null)){
IfStatement condition MethodInvocation qualifier result_ter ^ ^ member isNoType_ter ^ ^ ^ ^ ^ 
if(result.isNoType()){

IfStatement condition MethodInvocation qualifier result_ter ^ ^ member isNoObjectType_ter ^ ^ ^ ^ ^ 
if(result.isNoObjectType()){

IfStatement condition MethodInvocation qualifier result_ter ^ ^ member isEmptyType_ter ^ ^ ^ ^ ^ 
if(result.isEmptyType()){

IfStatement condition MethodInvocation qualifier result_ter ^ ^ member isNumberObjectType_ter ^ ^ ^ ^ ^ 
if(result.isNumberObjectType()){

IfStatement condition MethodInvocation qualifier result_ter ^ ^ member isNumberValueType_ter ^ ^ ^ ^ ^ 
if(result.isNumberValueType()){

IfStatement condition MethodInvocation qualifier result_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ ^ 
if(result.isFunctionPrototypeType()){

IfStatement condition MethodInvocation qualifier result_ter ^ ^ member isStringObjectType_ter ^ ^ ^ ^ ^ 
if(result.isStringObjectType()){

IfStatement condition MethodInvocation qualifier result_ter ^ ^ member isTheObjectType_ter ^ ^ ^ ^ ^ 
if(result.isTheObjectType()){

IfStatement condition MethodInvocation qualifier result_ter ^ ^ member isStringValueType_ter ^ ^ ^ ^ ^ 
if(result.isStringValueType()){

IfStatement condition MethodInvocation qualifier result_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ 
if(result.isString()){

IfStatement condition MethodInvocation qualifier result_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ 
if(result.isNumber()){

IfStatement condition MethodInvocation qualifier result_ter ^ ^ member isArrayType_ter ^ ^ ^ ^ ^ 
if(result.isArrayType()){

IfStatement condition MethodInvocation qualifier result_ter ^ ^ member isBooleanObjectType_ter ^ ^ ^ ^ ^ 
if(result.isBooleanObjectType()){

IfStatement condition MethodInvocation qualifier result_ter ^ ^ member isBooleanValueType_ter ^ ^ ^ ^ ^ 
if(result.isBooleanValueType()){

IfStatement condition MethodInvocation qualifier result_ter ^ ^ member isRegexpType_ter ^ ^ ^ ^ ^ 
if(result.isRegexpType()){

IfStatement condition MethodInvocation qualifier result_ter ^ ^ member isDateType_ter ^ ^ ^ ^ ^ 
if(result.isDateType()){

IfStatement condition MethodInvocation qualifier result_ter ^ ^ member isNullType_ter ^ ^ ^ ^ ^ 
if(result.isNullType()){

IfStatement condition MethodInvocation qualifier result_ter ^ ^ member isVoidType_ter ^ ^ ^ ^ ^ 
if(result.isVoidType()){

IfStatement condition MethodInvocation qualifier result_ter ^ ^ member isAllType_ter ^ ^ ^ ^ ^ 
if(result.isAllType()){

IfStatement condition MethodInvocation qualifier result_ter ^ ^ member isUnknownType_ter ^ ^ ^ ^ ^ 
if(result.isUnknownType()){

IfStatement condition MethodInvocation qualifier result_ter ^ ^ member isCheckedUnknownType_ter ^ ^ ^ ^ ^ 
if(result.isCheckedUnknownType()){

IfStatement condition MethodInvocation qualifier result_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
if(result.isUnionType()){

IfStatement condition MethodInvocation qualifier result_ter ^ ^ member isFunctionType_ter ^ ^ ^ ^ ^ 
if(result.isFunctionType()){

IfStatement condition MethodInvocation qualifier result_ter ^ ^ member isEnumElementType_ter ^ ^ ^ ^ ^ 
if(result.isEnumElementType()){

IfStatement condition MethodInvocation qualifier result_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ 
if(result.isEnumType()){

IfStatement condition MethodInvocation qualifier result_ter ^ ^ member isNamedType_ter ^ ^ ^ ^ ^ 
if(result.isNamedType()){

IfStatement condition MethodInvocation qualifier result_ter ^ ^ member isRecordType_ter ^ ^ ^ ^ ^ 
if(result.isRecordType()){

IfStatement condition MethodInvocation qualifier result_ter ^ ^ member isTemplateType_ter ^ ^ ^ ^ ^ 
if(result.isTemplateType()){

IfStatement condition MethodInvocation qualifier result_ter ^ ^ member isObject_ter ^ ^ ^ ^ ^ 
if(result.isObject()){

IfStatement condition MethodInvocation qualifier result_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ ^ 
if(result.isConstructor()){

IfStatement condition MethodInvocation qualifier result_ter ^ ^ member isNominalType_ter ^ ^ ^ ^ ^ 
if(result.isNominalType()){

IfStatement condition MethodInvocation qualifier result_ter ^ ^ member isInstanceType_ter ^ ^ ^ ^ ^ 
if(result.isInstanceType()){

IfStatement condition MethodInvocation qualifier result_ter ^ ^ member isInterface_ter ^ ^ ^ ^ ^ 
if(result.isInterface()){

IfStatement condition MethodInvocation qualifier result_ter ^ ^ member isOrdinaryFunction_ter ^ ^ ^ ^ ^ 
if(result.isOrdinaryFunction()){

IfStatement condition MethodInvocation qualifier result_ter ^ ^ member matchesInt32Context_ter ^ ^ ^ ^ ^ 
if(result.matchesInt32Context()){

IfStatement condition MethodInvocation qualifier result_ter ^ ^ member matchesUint32Context_ter ^ ^ ^ ^ ^ 
if(result.matchesUint32Context()){

IfStatement condition MethodInvocation qualifier result_ter ^ ^ member matchesNumberContext_ter ^ ^ ^ ^ ^ 
if(result.matchesNumberContext()){

IfStatement condition MethodInvocation qualifier result_ter ^ ^ member matchesStringContext_ter ^ ^ ^ ^ ^ 
if(result.matchesStringContext()){

IfStatement condition MethodInvocation qualifier result_ter ^ ^ member matchesObjectContext_ter ^ ^ ^ ^ ^ 
if(result.matchesObjectContext()){

IfStatement condition MethodInvocation qualifier result_ter ^ ^ member canBeCalled_ter ^ ^ ^ ^ ^ 
if(result.canBeCalled()){

IfStatement condition MethodInvocation qualifier result_ter ^ ^ member isNullable_ter ^ ^ ^ ^ ^ 
if(result.isNullable()){

IfStatement condition MethodInvocation qualifier result_ter ^ ^ member isResolved_ter ^ ^ ^ ^ ^ 
if(result.isResolved()){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && (result == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier result_ter ^ ^ member isNoType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && !result.isNoType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier result_ter ^ ^ member isNoObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && !result.isNoObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier result_ter ^ ^ member isEmptyType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && !result.isEmptyType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier result_ter ^ ^ member isNumberObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && !result.isNumberObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier result_ter ^ ^ member isNumberValueType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && !result.isNumberValueType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier result_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && !result.isFunctionPrototypeType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier result_ter ^ ^ member isStringObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && !result.isStringObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier result_ter ^ ^ member isTheObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && !result.isTheObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier result_ter ^ ^ member isStringValueType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && !result.isStringValueType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier result_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && !result.isString())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier result_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && !result.isNumber())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier result_ter ^ ^ member isArrayType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && !result.isArrayType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier result_ter ^ ^ member isBooleanObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && !result.isBooleanObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier result_ter ^ ^ member isBooleanValueType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && !result.isBooleanValueType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier result_ter ^ ^ member isRegexpType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && !result.isRegexpType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier result_ter ^ ^ member isDateType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && !result.isDateType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier result_ter ^ ^ member isNullType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && !result.isNullType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier result_ter ^ ^ member isVoidType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && !result.isVoidType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier result_ter ^ ^ member isAllType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && !result.isAllType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier result_ter ^ ^ member isUnknownType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && !result.isUnknownType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier result_ter ^ ^ member isCheckedUnknownType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && !result.isCheckedUnknownType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier result_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && !result.isUnionType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier result_ter ^ ^ member isFunctionType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && !result.isFunctionType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier result_ter ^ ^ member isEnumElementType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && !result.isEnumElementType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier result_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && !result.isEnumType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier result_ter ^ ^ member isNamedType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && !result.isNamedType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier result_ter ^ ^ member isRecordType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && !result.isRecordType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier result_ter ^ ^ member isTemplateType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && !result.isTemplateType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier result_ter ^ ^ member isObject_ter ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && !result.isObject())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier result_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && !result.isConstructor())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier result_ter ^ ^ member isNominalType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && !result.isNominalType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier result_ter ^ ^ member isInstanceType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && !result.isInstanceType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier result_ter ^ ^ member isInterface_ter ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && !result.isInterface())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier result_ter ^ ^ member isOrdinaryFunction_ter ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && !result.isOrdinaryFunction())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier result_ter ^ ^ member matchesInt32Context_ter ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && !result.matchesInt32Context())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier result_ter ^ ^ member matchesUint32Context_ter ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && !result.matchesUint32Context())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier result_ter ^ ^ member matchesNumberContext_ter ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && !result.matchesNumberContext())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier result_ter ^ ^ member matchesStringContext_ter ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && !result.matchesStringContext())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier result_ter ^ ^ member matchesObjectContext_ter ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && !result.matchesObjectContext())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier result_ter ^ ^ member canBeCalled_ter ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && !result.canBeCalled())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier result_ter ^ ^ member isNullable_ter ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && !result.isNullable())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier result_ter ^ ^ member isResolved_ter ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && !result.isResolved())){

condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member alternate_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ 
if((alternate != null)){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((result && (result != null))){

IfStatement condition MethodInvocation qualifier result_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ ^ 
if(result.isEmpty()){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && (result != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier result_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && result.isEmpty())){

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((result != null)){

condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ 
if((result != "null")){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator instanceof_ter ^ ^ operandl MemberReference member that_ter ^ ^ ^ ^ operandr ReferenceType name UnionType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
if(((result != null) && (that instanceof UnionType))){

StatementExpression expression MethodInvocation qualifier result_ter ^ ^ member forgiveUnknownNames_ter ^ ^ ^ ^ ^ 
result.forgiveUnknownNames();

StatementExpression expression MethodInvocation qualifier result_ter ^ ^ member clearResolved_ter ^ ^ ^ ^ ^ 
result.clearResolved();

condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member builder_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ 
if((builder != null)){
StatementExpression expression MethodInvocation member forgiveUnknownNames_ter ^ ^ ^ ^ ^ 
forgiveUnknownNames();

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier result_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && !result.isEmpty())){

IfStatement condition MemberReference member result_ter ^ ^ ^ ^ ^ 
if(result){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation member matchesNumberContext_ter ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && matchesNumberContext())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation member matchesStringContext_ter ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && matchesStringContext())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation member matchesObjectContext_ter ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && matchesObjectContext())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation member canBeCalled_ter ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && canBeCalled())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation member isNullable_ter ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && isNullable())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation member isUnknownType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && isUnknownType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation member isUnionType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && isUnionType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation member isObject_ter ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && isObject())){

IfStatement condition MethodInvocation member matchesNumberContext_ter ^ ^ ^ ^ ^ 
if(matchesNumberContext()){

IfStatement condition MethodInvocation member matchesStringContext_ter ^ ^ ^ ^ ^ 
if(matchesStringContext()){

IfStatement condition MethodInvocation member matchesObjectContext_ter ^ ^ ^ ^ ^ 
if(matchesObjectContext()){

IfStatement condition MethodInvocation member canBeCalled_ter ^ ^ ^ ^ ^ 
if(canBeCalled()){

IfStatement condition MethodInvocation member isNullable_ter ^ ^ ^ ^ ^ 
if(isNullable()){

IfStatement condition MethodInvocation member isUnknownType_ter ^ ^ ^ ^ ^ 
if(isUnknownType()){

IfStatement condition MethodInvocation member isUnionType_ter ^ ^ ^ ^ ^ 
if(isUnionType()){

IfStatement condition MethodInvocation member isObject_ter ^ ^ ^ ^ ^ 
if(isObject()){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl This selectors MethodInvocation member isObject_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier that_ter ^ ^ member isObject_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && (this.isObject() && that.isObject()))){

condition BinaryOperation operator >_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ 
if((result > null)){
IfStatement condition MethodInvocation qualifier result_ter ^ ^ arguments MemberReference member result_ter ^ ^ ^ ^ member isNoType_ter ^ ^ ^ ^ ^ 
if(result.isNoType(result)){

IfStatement condition MethodInvocation qualifier result_ter ^ ^ arguments MemberReference member result_ter ^ ^ ^ ^ member isNoObjectType_ter ^ ^ ^ ^ ^ 
if(result.isNoObjectType(result)){

IfStatement condition MethodInvocation qualifier result_ter ^ ^ arguments MemberReference member result_ter ^ ^ ^ ^ member isEmptyType_ter ^ ^ ^ ^ ^ 
if(result.isEmptyType(result)){

IfStatement condition MethodInvocation qualifier result_ter ^ ^ arguments MemberReference member result_ter ^ ^ ^ ^ member isNumberObjectType_ter ^ ^ ^ ^ ^ 
if(result.isNumberObjectType(result)){

IfStatement condition MethodInvocation qualifier result_ter ^ ^ arguments MemberReference member result_ter ^ ^ ^ ^ member isNumberValueType_ter ^ ^ ^ ^ ^ 
if(result.isNumberValueType(result)){

IfStatement condition MethodInvocation qualifier result_ter ^ ^ arguments MemberReference member result_ter ^ ^ ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ ^ 
if(result.isFunctionPrototypeType(result)){

IfStatement condition MethodInvocation qualifier result_ter ^ ^ arguments MemberReference member result_ter ^ ^ ^ ^ member isStringObjectType_ter ^ ^ ^ ^ ^ 
if(result.isStringObjectType(result)){

IfStatement condition MethodInvocation qualifier result_ter ^ ^ arguments MemberReference member result_ter ^ ^ ^ ^ member isTheObjectType_ter ^ ^ ^ ^ ^ 
if(result.isTheObjectType(result)){

IfStatement condition MethodInvocation qualifier result_ter ^ ^ arguments MemberReference member result_ter ^ ^ ^ ^ member isStringValueType_ter ^ ^ ^ ^ ^ 
if(result.isStringValueType(result)){

IfStatement condition MethodInvocation qualifier result_ter ^ ^ arguments MemberReference member result_ter ^ ^ ^ ^ member isString_ter ^ ^ ^ ^ ^ 
if(result.isString(result)){

IfStatement condition MethodInvocation qualifier result_ter ^ ^ arguments MemberReference member result_ter ^ ^ ^ ^ member isNumber_ter ^ ^ ^ ^ ^ 
if(result.isNumber(result)){

IfStatement condition MethodInvocation qualifier result_ter ^ ^ arguments MemberReference member result_ter ^ ^ ^ ^ member isArrayType_ter ^ ^ ^ ^ ^ 
if(result.isArrayType(result)){

IfStatement condition MethodInvocation qualifier result_ter ^ ^ arguments MemberReference member result_ter ^ ^ ^ ^ member isBooleanObjectType_ter ^ ^ ^ ^ ^ 
if(result.isBooleanObjectType(result)){

IfStatement condition MethodInvocation qualifier result_ter ^ ^ arguments MemberReference member result_ter ^ ^ ^ ^ member isBooleanValueType_ter ^ ^ ^ ^ ^ 
if(result.isBooleanValueType(result)){

IfStatement condition MethodInvocation qualifier result_ter ^ ^ arguments MemberReference member result_ter ^ ^ ^ ^ member isRegexpType_ter ^ ^ ^ ^ ^ 
if(result.isRegexpType(result)){

IfStatement condition MethodInvocation qualifier result_ter ^ ^ arguments MemberReference member result_ter ^ ^ ^ ^ member isDateType_ter ^ ^ ^ ^ ^ 
if(result.isDateType(result)){

IfStatement condition MethodInvocation qualifier result_ter ^ ^ arguments MemberReference member result_ter ^ ^ ^ ^ member isNullType_ter ^ ^ ^ ^ ^ 
if(result.isNullType(result)){

IfStatement condition MethodInvocation qualifier result_ter ^ ^ arguments MemberReference member result_ter ^ ^ ^ ^ member isVoidType_ter ^ ^ ^ ^ ^ 
if(result.isVoidType(result)){

IfStatement condition MethodInvocation qualifier result_ter ^ ^ arguments MemberReference member result_ter ^ ^ ^ ^ member isAllType_ter ^ ^ ^ ^ ^ 
if(result.isAllType(result)){

IfStatement condition MethodInvocation qualifier result_ter ^ ^ arguments MemberReference member result_ter ^ ^ ^ ^ member isUnknownType_ter ^ ^ ^ ^ ^ 
if(result.isUnknownType(result)){

IfStatement condition MethodInvocation qualifier result_ter ^ ^ arguments MemberReference member result_ter ^ ^ ^ ^ member isCheckedUnknownType_ter ^ ^ ^ ^ ^ 
if(result.isCheckedUnknownType(result)){

IfStatement condition MethodInvocation qualifier result_ter ^ ^ arguments MemberReference member result_ter ^ ^ ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
if(result.isUnionType(result)){

IfStatement condition MethodInvocation qualifier result_ter ^ ^ arguments MemberReference member result_ter ^ ^ ^ ^ member isFunctionType_ter ^ ^ ^ ^ ^ 
if(result.isFunctionType(result)){

IfStatement condition MethodInvocation qualifier result_ter ^ ^ arguments MemberReference member result_ter ^ ^ ^ ^ member isEnumElementType_ter ^ ^ ^ ^ ^ 
if(result.isEnumElementType(result)){

IfStatement condition MethodInvocation qualifier result_ter ^ ^ arguments MemberReference member result_ter ^ ^ ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ 
if(result.isEnumType(result)){

IfStatement condition MethodInvocation qualifier result_ter ^ ^ arguments MemberReference member result_ter ^ ^ ^ ^ member isNamedType_ter ^ ^ ^ ^ ^ 
if(result.isNamedType(result)){

IfStatement condition MethodInvocation qualifier result_ter ^ ^ arguments MemberReference member result_ter ^ ^ ^ ^ member isRecordType_ter ^ ^ ^ ^ ^ 
if(result.isRecordType(result)){

IfStatement condition MethodInvocation qualifier result_ter ^ ^ arguments MemberReference member result_ter ^ ^ ^ ^ member isTemplateType_ter ^ ^ ^ ^ ^ 
if(result.isTemplateType(result)){

IfStatement condition MethodInvocation qualifier result_ter ^ ^ arguments MemberReference member result_ter ^ ^ ^ ^ member isObject_ter ^ ^ ^ ^ ^ 
if(result.isObject(result)){

IfStatement condition MethodInvocation qualifier result_ter ^ ^ arguments MemberReference member result_ter ^ ^ ^ ^ member isConstructor_ter ^ ^ ^ ^ ^ 
if(result.isConstructor(result)){

IfStatement condition MethodInvocation qualifier result_ter ^ ^ arguments MemberReference member result_ter ^ ^ ^ ^ member isNominalType_ter ^ ^ ^ ^ ^ 
if(result.isNominalType(result)){

IfStatement condition MethodInvocation qualifier result_ter ^ ^ arguments MemberReference member result_ter ^ ^ ^ ^ member isInstanceType_ter ^ ^ ^ ^ ^ 
if(result.isInstanceType(result)){

IfStatement condition MethodInvocation qualifier result_ter ^ ^ arguments MemberReference member result_ter ^ ^ ^ ^ member isInterface_ter ^ ^ ^ ^ ^ 
if(result.isInterface(result)){

IfStatement condition MethodInvocation qualifier result_ter ^ ^ arguments MemberReference member result_ter ^ ^ ^ ^ member isOrdinaryFunction_ter ^ ^ ^ ^ ^ 
if(result.isOrdinaryFunction(result)){

IfStatement condition MethodInvocation qualifier result_ter ^ ^ arguments MemberReference member result_ter ^ ^ ^ ^ member matchesInt32Context_ter ^ ^ ^ ^ ^ 
if(result.matchesInt32Context(result)){

IfStatement condition MethodInvocation qualifier result_ter ^ ^ arguments MemberReference member result_ter ^ ^ ^ ^ member matchesUint32Context_ter ^ ^ ^ ^ ^ 
if(result.matchesUint32Context(result)){

IfStatement condition MethodInvocation qualifier result_ter ^ ^ arguments MemberReference member result_ter ^ ^ ^ ^ member matchesNumberContext_ter ^ ^ ^ ^ ^ 
if(result.matchesNumberContext(result)){

IfStatement condition MethodInvocation qualifier result_ter ^ ^ arguments MemberReference member result_ter ^ ^ ^ ^ member matchesStringContext_ter ^ ^ ^ ^ ^ 
if(result.matchesStringContext(result)){

IfStatement condition MethodInvocation qualifier result_ter ^ ^ arguments MemberReference member result_ter ^ ^ ^ ^ member matchesObjectContext_ter ^ ^ ^ ^ ^ 
if(result.matchesObjectContext(result)){

IfStatement condition MethodInvocation qualifier result_ter ^ ^ arguments MemberReference member result_ter ^ ^ ^ ^ member canBeCalled_ter ^ ^ ^ ^ ^ 
if(result.canBeCalled(result)){

IfStatement condition MethodInvocation qualifier result_ter ^ ^ arguments MemberReference member result_ter ^ ^ ^ ^ member isNullable_ter ^ ^ ^ ^ ^ 
if(result.isNullable(result)){

IfStatement condition MethodInvocation qualifier result_ter ^ ^ arguments MemberReference member result_ter ^ ^ ^ ^ member isResolved_ter ^ ^ ^ ^ ^ 
if(result.isResolved(result)){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member isNoType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && (result.isNoType() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member isNoObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && (result.isNoObjectType() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member isEmptyType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && (result.isEmptyType() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member isNumberObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && (result.isNumberObjectType() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member isNumberValueType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && (result.isNumberValueType() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && (result.isFunctionPrototypeType() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member isStringObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && (result.isStringObjectType() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member isTheObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && (result.isTheObjectType() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member isStringValueType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && (result.isStringValueType() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member isString_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && (result.isString() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member isNumber_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && (result.isNumber() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member isArrayType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && (result.isArrayType() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member isBooleanObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && (result.isBooleanObjectType() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member isBooleanValueType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && (result.isBooleanValueType() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member isRegexpType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && (result.isRegexpType() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member isDateType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && (result.isDateType() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member isNullType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && (result.isNullType() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member isVoidType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && (result.isVoidType() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member isAllType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && (result.isAllType() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member isUnknownType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && (result.isUnknownType() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member isCheckedUnknownType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && (result.isCheckedUnknownType() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && (result.isUnionType() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member isFunctionType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && (result.isFunctionType() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member isEnumElementType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && (result.isEnumElementType() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && (result.isEnumType() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member isNamedType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && (result.isNamedType() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member isRecordType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && (result.isRecordType() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member isTemplateType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && (result.isTemplateType() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member isObject_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && (result.isObject() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && (result.isConstructor() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member isNominalType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && (result.isNominalType() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member isInstanceType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && (result.isInstanceType() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member isInterface_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && (result.isInterface() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member isOrdinaryFunction_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && (result.isOrdinaryFunction() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member matchesInt32Context_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && (result.matchesInt32Context() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member matchesUint32Context_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && (result.matchesUint32Context() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member matchesNumberContext_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && (result.matchesNumberContext() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member matchesStringContext_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && (result.matchesStringContext() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member matchesObjectContext_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && (result.matchesObjectContext() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member canBeCalled_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && (result.canBeCalled() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member isNullable_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && (result.isNullable() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member isResolved_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && (result.isResolved() != null))){

condition BinaryOperation operator >=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ 
if((result >= null)){
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier result_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ ^ 
if(!result.isEmpty()){

IfStatement condition MethodInvocation qualifier result_ter ^ ^ arguments MemberReference member result_ter ^ ^ ^ ^ member equals_ter ^ ^ ^ ^ ^ 
if(result.equals(result)){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isObject_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && (that.isObject() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member otherAlternate_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && (otherAlternate != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl This selectors MethodInvocation member isObject_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((this.isObject() && (result != null))){

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if((result != null)){
continue;
}
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member isNoType_ter ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((result.isNoType() && (result != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member isNoObjectType_ter ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((result.isNoObjectType() && (result != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member isEmptyType_ter ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((result.isEmptyType() && (result != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member isNumberObjectType_ter ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((result.isNumberObjectType() && (result != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member isNumberValueType_ter ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((result.isNumberValueType() && (result != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((result.isFunctionPrototypeType() && (result != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member isStringObjectType_ter ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((result.isStringObjectType() && (result != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member isTheObjectType_ter ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((result.isTheObjectType() && (result != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member isStringValueType_ter ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((result.isStringValueType() && (result != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member isString_ter ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((result.isString() && (result != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member isNumber_ter ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((result.isNumber() && (result != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member isArrayType_ter ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((result.isArrayType() && (result != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member isBooleanObjectType_ter ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((result.isBooleanObjectType() && (result != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member isBooleanValueType_ter ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((result.isBooleanValueType() && (result != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member isRegexpType_ter ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((result.isRegexpType() && (result != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member isDateType_ter ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((result.isDateType() && (result != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member isNullType_ter ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((result.isNullType() && (result != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member isVoidType_ter ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((result.isVoidType() && (result != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member isAllType_ter ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((result.isAllType() && (result != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member isUnknownType_ter ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((result.isUnknownType() && (result != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member isCheckedUnknownType_ter ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((result.isCheckedUnknownType() && (result != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((result.isUnionType() && (result != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member isFunctionType_ter ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((result.isFunctionType() && (result != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member isEnumElementType_ter ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((result.isEnumElementType() && (result != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((result.isEnumType() && (result != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member isNamedType_ter ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((result.isNamedType() && (result != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member isRecordType_ter ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((result.isRecordType() && (result != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member isTemplateType_ter ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((result.isTemplateType() && (result != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member isObject_ter ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((result.isObject() && (result != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((result.isConstructor() && (result != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member isNominalType_ter ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((result.isNominalType() && (result != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member isInstanceType_ter ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((result.isInstanceType() && (result != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member isInterface_ter ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((result.isInterface() && (result != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member isOrdinaryFunction_ter ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((result.isOrdinaryFunction() && (result != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member matchesInt32Context_ter ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((result.matchesInt32Context() && (result != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member matchesUint32Context_ter ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((result.matchesUint32Context() && (result != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member matchesNumberContext_ter ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((result.matchesNumberContext() && (result != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member matchesStringContext_ter ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((result.matchesStringContext() && (result != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member matchesObjectContext_ter ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((result.matchesObjectContext() && (result != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member canBeCalled_ter ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((result.canBeCalled() && (result != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member isNullable_ter ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((result.isNullable() && (result != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member isResolved_ter ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((result.isResolved() && (result != null))){

StatementExpression expression MethodInvocation qualifier builder_ter ^ ^ arguments MemberReference member alternate_ter ^ ^ ^ ^ member addAlternate_ter ^ ^ ^ ^ ^ 
builder.addAlternate(alternate);

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier that_ter ^ ^ member isObject_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && (that.isObject() == null))){

IfStatement condition MemberReference prefix_operators !_ter ^ ^ member result_ter ^ ^ ^ ^ ^ 
if(!result){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier result_ter ^ ^ member isNoType_ter ^ ^ ^ ^ ^ 
if(!result.isNoType()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier result_ter ^ ^ member isNoObjectType_ter ^ ^ ^ ^ ^ 
if(!result.isNoObjectType()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier result_ter ^ ^ member isEmptyType_ter ^ ^ ^ ^ ^ 
if(!result.isEmptyType()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier result_ter ^ ^ member isNumberObjectType_ter ^ ^ ^ ^ ^ 
if(!result.isNumberObjectType()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier result_ter ^ ^ member isNumberValueType_ter ^ ^ ^ ^ ^ 
if(!result.isNumberValueType()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier result_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ ^ 
if(!result.isFunctionPrototypeType()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier result_ter ^ ^ member isStringObjectType_ter ^ ^ ^ ^ ^ 
if(!result.isStringObjectType()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier result_ter ^ ^ member isTheObjectType_ter ^ ^ ^ ^ ^ 
if(!result.isTheObjectType()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier result_ter ^ ^ member isStringValueType_ter ^ ^ ^ ^ ^ 
if(!result.isStringValueType()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier result_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ 
if(!result.isString()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier result_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ 
if(!result.isNumber()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier result_ter ^ ^ member isArrayType_ter ^ ^ ^ ^ ^ 
if(!result.isArrayType()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier result_ter ^ ^ member isBooleanObjectType_ter ^ ^ ^ ^ ^ 
if(!result.isBooleanObjectType()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier result_ter ^ ^ member isBooleanValueType_ter ^ ^ ^ ^ ^ 
if(!result.isBooleanValueType()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier result_ter ^ ^ member isRegexpType_ter ^ ^ ^ ^ ^ 
if(!result.isRegexpType()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier result_ter ^ ^ member isDateType_ter ^ ^ ^ ^ ^ 
if(!result.isDateType()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier result_ter ^ ^ member isNullType_ter ^ ^ ^ ^ ^ 
if(!result.isNullType()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier result_ter ^ ^ member isVoidType_ter ^ ^ ^ ^ ^ 
if(!result.isVoidType()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier result_ter ^ ^ member isAllType_ter ^ ^ ^ ^ ^ 
if(!result.isAllType()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier result_ter ^ ^ member isUnknownType_ter ^ ^ ^ ^ ^ 
if(!result.isUnknownType()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier result_ter ^ ^ member isCheckedUnknownType_ter ^ ^ ^ ^ ^ 
if(!result.isCheckedUnknownType()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier result_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
if(!result.isUnionType()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier result_ter ^ ^ member isFunctionType_ter ^ ^ ^ ^ ^ 
if(!result.isFunctionType()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier result_ter ^ ^ member isEnumElementType_ter ^ ^ ^ ^ ^ 
if(!result.isEnumElementType()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier result_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ 
if(!result.isEnumType()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier result_ter ^ ^ member isNamedType_ter ^ ^ ^ ^ ^ 
if(!result.isNamedType()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier result_ter ^ ^ member isRecordType_ter ^ ^ ^ ^ ^ 
if(!result.isRecordType()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier result_ter ^ ^ member isTemplateType_ter ^ ^ ^ ^ ^ 
if(!result.isTemplateType()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier result_ter ^ ^ member isObject_ter ^ ^ ^ ^ ^ 
if(!result.isObject()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier result_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ ^ 
if(!result.isConstructor()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier result_ter ^ ^ member isNominalType_ter ^ ^ ^ ^ ^ 
if(!result.isNominalType()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier result_ter ^ ^ member isInstanceType_ter ^ ^ ^ ^ ^ 
if(!result.isInstanceType()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier result_ter ^ ^ member isInterface_ter ^ ^ ^ ^ ^ 
if(!result.isInterface()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier result_ter ^ ^ member isOrdinaryFunction_ter ^ ^ ^ ^ ^ 
if(!result.isOrdinaryFunction()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier result_ter ^ ^ member matchesInt32Context_ter ^ ^ ^ ^ ^ 
if(!result.matchesInt32Context()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier result_ter ^ ^ member matchesUint32Context_ter ^ ^ ^ ^ ^ 
if(!result.matchesUint32Context()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier result_ter ^ ^ member matchesNumberContext_ter ^ ^ ^ ^ ^ 
if(!result.matchesNumberContext()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier result_ter ^ ^ member matchesStringContext_ter ^ ^ ^ ^ ^ 
if(!result.matchesStringContext()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier result_ter ^ ^ member matchesObjectContext_ter ^ ^ ^ ^ ^ 
if(!result.matchesObjectContext()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier result_ter ^ ^ member canBeCalled_ter ^ ^ ^ ^ ^ 
if(!result.canBeCalled()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier result_ter ^ ^ member isNullable_ter ^ ^ ^ ^ ^ 
if(!result.isNullable()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier result_ter ^ ^ member isResolved_ter ^ ^ ^ ^ ^ 
if(!result.isResolved()){

StatementExpression expression MethodInvocation qualifier builder_ter ^ ^ arguments MemberReference member otherAlternate_ter ^ ^ ^ ^ member addAlternate_ter ^ ^ ^ ^ ^ 
builder.addAlternate(otherAlternate);

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((result != null)){

StatementExpression expression MethodInvocation qualifier builder_ter ^ ^ arguments MemberReference member that_ter ^ ^ ^ ^ member addAlternate_ter ^ ^ ^ ^ ^ 
builder.addAlternate(that);



IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member isNoType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && (result.isNoType() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member isNoObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && (result.isNoObjectType() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member isEmptyType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && (result.isEmptyType() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member isNumberObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && (result.isNumberObjectType() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member isNumberValueType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && (result.isNumberValueType() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && (result.isFunctionPrototypeType() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member isStringObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && (result.isStringObjectType() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member isTheObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && (result.isTheObjectType() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member isStringValueType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && (result.isStringValueType() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member isString_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && (result.isString() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member isNumber_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && (result.isNumber() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member isArrayType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && (result.isArrayType() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member isBooleanObjectType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && (result.isBooleanObjectType() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member isBooleanValueType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && (result.isBooleanValueType() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member isRegexpType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && (result.isRegexpType() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member isDateType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && (result.isDateType() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member isNullType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && (result.isNullType() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member isVoidType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && (result.isVoidType() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member isAllType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && (result.isAllType() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member isUnknownType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && (result.isUnknownType() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member isCheckedUnknownType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && (result.isCheckedUnknownType() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && (result.isUnionType() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member isFunctionType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && (result.isFunctionType() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member isEnumElementType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && (result.isEnumElementType() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && (result.isEnumType() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member isNamedType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && (result.isNamedType() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member isRecordType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && (result.isRecordType() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member isTemplateType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && (result.isTemplateType() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member isObject_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && (result.isObject() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && (result.isConstructor() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member isNominalType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && (result.isNominalType() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member isInstanceType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && (result.isInstanceType() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member isInterface_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && (result.isInterface() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member isOrdinaryFunction_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && (result.isOrdinaryFunction() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member matchesInt32Context_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && (result.matchesInt32Context() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member matchesUint32Context_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && (result.matchesUint32Context() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member matchesNumberContext_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && (result.matchesNumberContext() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member matchesStringContext_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && (result.matchesStringContext() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member matchesObjectContext_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && (result.matchesObjectContext() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member canBeCalled_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && (result.canBeCalled() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member isNullable_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && (result.isNullable() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier result_ter ^ ^ member isResolved_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && (result.isResolved() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member matchesNumberContext_ter ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && !matchesNumberContext())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member matchesStringContext_ter ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && !matchesStringContext())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member matchesObjectContext_ter ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && !matchesObjectContext())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member canBeCalled_ter ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && !canBeCalled())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member isNullable_ter ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && !isNullable())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member isUnknownType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && !isUnknownType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && !isUnionType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member isObject_ter ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && !isObject())){

condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member alternates_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ 
if((alternates != null)){
StatementExpression expression MethodInvocation qualifier alternate_ter ^ ^ member forgiveUnknownNames_ter ^ ^ ^ ^ ^ 
alternate.forgiveUnknownNames();

StatementExpression expression MethodInvocation qualifier alternate_ter ^ ^ member clearResolved_ter ^ ^ ^ ^ ^ 
alternate.clearResolved();

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MemberReference member result_ter ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && result)){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl This selectors MethodInvocation member isObject_ter ^ ^ ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && (this.isObject() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member result_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier that_ter ^ ^ member isObject_ter ^ ^ ^ ^ ^ ^ ^ 
if(((result != null) && that.isObject())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl This selectors MethodInvocation member isObject_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier that_ter ^ ^ member isObject_ter ^ ^ ^ ^ ^ ^ ^ 
if((this.isObject() && that.isObject())){

stderr: 