stdout: else_statement -> BlockStatement
using GPU
p
path org.apache.commons.math.linear.BigMatrixImpl
operate
Position(line=985, column=12)
FOUND IT!
path org.apache.commons.math.linear.RealMatrixImpl
operate
Position(line=773, column=12)
FOUND IT!
[{'bugid': 'Math-98', 'treeroot': <Searchnode.Node object at 0x7f994bbf4e50>, 'troot': <Searchnode.Node object at 0x7f994bbf4e50>, 'oldcode': '        final BigDecimal[] out = new BigDecimal[v.length];', 'filepath': 'buggy/Math-98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java', 'subroot': <Searchnode.Node object at 0x7f994bc02550>, 'vardic': {'operate_ter': 'meth0', 'v_ter': 'par0', 'nRows_ter': 'loc0', 'nCols_ter': 'loc1', 'out_ter': 'loc2', 'row_ter': 'loc3', 'sum_ter': 'loc4', 'i_ter': 'loc5'}, 'typedic': {'v_ter': 'BigDecimal', 'nRows_ter': 'int', 'nCols_ter': 'int', 'out_ter': 'BigDecimal', 'row_ter': 'int', 'sum_ter': 'BigDecimal', 'i_ter': 'int'}, 'idss': 'Math-98', 'classname': 'org.apache.commons.math.linear.BigMatrixImpl', 'precode': '/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the "License"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.commons.math.linear;\nimport java.io.Serializable;\nimport java.math.BigDecimal;\n\n/**\n * Implementation of {@link BigMatrix} using a BigDecimal[][] array to store entries\n * and <a href="http://www.math.gatech.edu/~bourbaki/math2601/Web-notes/2num.pdf">\n * LU decompostion</a> to support linear system \n * solution and inverse.\n * <p>\n * The LU decompostion is performed as needed, to support the following operations: <ul>\n * <li>solve</li>\n * <li>isSingular</li>\n * <li>getDeterminant</li>\n * <li>inverse</li> </ul></p>\n * <p>\n* <strong>Usage notes</strong>:<br>\n * <ul><li>\n * The LU decomposition is stored and reused on subsequent calls.  If matrix\n * data are modified using any of the public setXxx methods, the saved\n * decomposition is discarded.  If data are modified via references to the\n * underlying array obtained using <code>getDataRef()</code>, then the stored\n * LU decomposition will not be discarded.  In this case, you need to\n * explicitly invoke <code>LUDecompose()</code> to recompute the decomposition\n * before using any of the methods above.</li>\n * <li>\n * As specified in the {@link BigMatrix} interface, matrix element indexing\n * is 0-based -- e.g., <code>getEntry(0, 0)</code>\n * returns the element in the first row, first column of the matrix.</li></ul></p>\n * \n * @version $Revision$ $Date$\n */\npublic class BigMatrixImpl implements BigMatrix, Serializable {\n    \n    /** Serialization id */\n    private static final long serialVersionUID = -1011428905656140431L;\n    \n    /** Entries of the matrix */\n    protected BigDecimal data[][] = null;\n    \n    /** Entries of cached LU decomposition.\n     *  All updates to data (other than luDecompose()) *must* set this to null\n     */\n    protected BigDecimal lu[][] = null;\n    \n    /** Permutation associated with LU decomposition */\n    protected int[] permutation = null;\n    \n    /** Parity of the permutation associated with the LU decomposition */\n    protected int parity = 1;\n    \n    /** Rounding mode for divisions **/\n    private int roundingMode = BigDecimal.ROUND_HALF_UP;\n    \n    /*** BigDecimal scale ***/\n    private int scale = 64;\n    \n    /** Bound to determine effective singularity in LU decomposition */\n    private static final BigDecimal TOO_SMALL = new BigDecimal(10E-12);\n    \n    /** BigDecimal 0 */\n    static final BigDecimal ZERO = new BigDecimal(0);\n    /** BigDecimal 1 */\n    static final BigDecimal ONE = new BigDecimal(1);\n    \n    /** \n     * Creates a matrix with no data\n     */\n    public BigMatrixImpl() {\n    }\n    \n    /**\n     * Create a new BigMatrix with the supplied row and column dimensions.\n     *\n     * @param rowDimension      the number of rows in the new matrix\n     * @param columnDimension   the number of columns in the new matrix\n     * @throws IllegalArgumentException if row or column dimension is not\n     *  positive\n     */\n    public BigMatrixImpl(int rowDimension, int columnDimension) {\n        if (rowDimension <=0 || columnDimension <=0) {\n            throw new IllegalArgumentException\n            ("row and column dimensions must be positive");\n        }\n        data = new BigDecimal[rowDimension][columnDimension];\n        lu = null;\n    }\n    \n    /**\n     * Create a new BigMatrix using <code>d</code> as the underlying\n     * data array.\n     * <p>The input array is copied, not referenced. This constructor has\n     * the same effect as calling {@link #BigMatrixImpl(BigDecimal[][], boolean)}\n     * with the second argument set to <code>true</code>.</p>\n     *\n     * @param d data for new matrix\n     * @throws IllegalArgumentException if <code>d</code> is not rectangular\n     *  (not all rows have the same length) or empty\n     * @throws NullPointerException if <code>d</code> is null\n     */\n    public BigMatrixImpl(BigDecimal[][] d) {\n        this.copyIn(d);\n        lu = null;\n    }\n\n    /**\n     * Create a new BigMatrix using the input array as the underlying\n     * data array.\n     * <p>If an array is built specially in order to be embedded in a\n     * BigMatrix and not used directly, the <code>copyArray</code> may be\n     * set to <code>false</code. This will prevent the copying and improve\n     * performance as no new array will be built and no data will be copied.</p>\n     * @param d data for new matrix\n     * @param copyArray if true, the input array will be copied, otherwise\n     * it will be referenced\n     * @throws IllegalArgumentException if <code>d</code> is not rectangular\n     *  (not all rows have the same length) or empty\n     * @throws NullPointerException if <code>d</code> is null\n     * @see #BigMatrixImpl(BigDecimal[][])\n     */\n    public BigMatrixImpl(BigDecimal[][] d, boolean copyArray) {\n        if (copyArray) {\n            copyIn(d);\n        } else {\n            if (d == null) {\n                throw new NullPointerException();\n            }   \n            final int nRows = d.length;\n            if (nRows == 0) {\n                throw new IllegalArgumentException("Matrix must have at least one row."); \n            }\n            final int nCols = d[0].length;\n            if (nCols == 0) {\n                throw new IllegalArgumentException("Matrix must have at least one column."); \n            }\n            for (int r = 1; r < nRows; r++) {\n                if (d[r].length != nCols) {\n                    throw new IllegalArgumentException("All input rows must have the same length.");\n                }\n            }       \n            data = d;\n        }\n        lu = null;\n    }\n\n    /**\n     * Create a new BigMatrix using <code>d</code> as the underlying\n     * data array.\n     * <p>Since the underlying array will hold <code>BigDecimal</code>\n     * instances, it will be created.</p>\n     *\n     * @param d data for new matrix\n     * @throws IllegalArgumentException if <code>d</code> is not rectangular\n     *  (not all rows have the same length) or empty\n     * @throws NullPointerException if <code>d</code> is null\n     */\n    public BigMatrixImpl(double[][] d) {\n        final int nRows = d.length;\n        if (nRows == 0) {\n            throw new IllegalArgumentException(\n            "Matrix must have at least one row."); \n        }\n        final int nCols = d[0].length;\n        if (nCols == 0) {\n            throw new IllegalArgumentException(\n            "Matrix must have at least one column."); \n        }\n        for (int row = 1; row < nRows; row++) {\n            if (d[row].length != nCols) {\n                throw new IllegalArgumentException(\n                "All input rows must have the same length.");\n            }\n        }\n        this.copyIn(d);\n        lu = null;\n    }\n    \n    /**\n     * Create a new BigMatrix using the values represented by the strings in \n     * <code>d</code> as the underlying data array.\n     *\n     * @param d data for new matrix\n     * @throws IllegalArgumentException if <code>d</code> is not rectangular\n     *  (not all rows have the same length) or empty\n     * @throws NullPointerException if <code>d</code> is null\n     */\n    public BigMatrixImpl(String[][] d) {\n        final int nRows = d.length;\n        if (nRows == 0) {\n            throw new IllegalArgumentException(\n            "Matrix must have at least one row."); \n        }\n        final int nCols = d[0].length;\n        if (nCols == 0) {\n            throw new IllegalArgumentException(\n            "Matrix must have at least one column."); \n        }\n        for (int row = 1; row < nRows; row++) {\n            if (d[row].length != nCols) {\n                throw new IllegalArgumentException(\n                "All input rows must have the same length.");\n            }\n        }\n        this.copyIn(d);\n        lu = null;\n    }\n    \n    /**\n     * Create a new (column) BigMatrix using <code>v</code> as the\n     * data for the unique column of the <code>v.length x 1</code> matrix \n     * created.\n     * <p>\n     * The input array is copied, not referenced.</p>\n     *\n     * @param v column vector holding data for new matrix\n     */\n    public BigMatrixImpl(BigDecimal[] v) {\n        final int nRows = v.length;\n        data = new BigDecimal[nRows][1];\n        for (int row = 0; row < nRows; row++) {\n            data[row][0] = v[row];\n        }\n    }\n    \n    /**\n     * Create a new BigMatrix which is a copy of this.\n     *\n     * @return  the cloned matrix\n     */\n    public BigMatrix copy() {\n        return new BigMatrixImpl(this.copyOut(), false);\n    }\n    \n    /**\n     * Compute the sum of this and <code>m</code>.\n     *\n     * @param m    matrix to be added\n     * @return     this + m\n     * @throws  IllegalArgumentException if m is not the same size as this\n     */\n    public BigMatrix add(BigMatrix m) throws IllegalArgumentException {\n        try {\n            return add((BigMatrixImpl) m);\n        } catch (ClassCastException cce) {\n            final int rowCount    = getRowDimension();\n            final int columnCount = getColumnDimension();\n            if (columnCount != m.getColumnDimension() || rowCount != m.getRowDimension()) {\n                throw new IllegalArgumentException("matrix dimension mismatch");\n            }\n            final BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];\n            for (int row = 0; row < rowCount; row++) {\n                final BigDecimal[] dataRow    = data[row];\n                final BigDecimal[] outDataRow = outData[row];\n                for (int col = 0; col < columnCount; col++) {\n                    outDataRow[col] = dataRow[col].add(m.getEntry(row, col));\n                }  \n            }\n            return new BigMatrixImpl(outData, false);\n        }\n    }\n\n    /**\n     * Compute the sum of this and <code>m</code>.\n     *\n     * @param m    matrix to be added\n     * @return     this + m\n     * @throws  IllegalArgumentException if m is not the same size as this\n     */\n    public BigMatrixImpl add(BigMatrixImpl m) throws IllegalArgumentException {\n        final int rowCount    = getRowDimension();\n        final int columnCount = getColumnDimension();\n        if (columnCount != m.getColumnDimension() || rowCount != m.getRowDimension()) {\n            throw new IllegalArgumentException("matrix dimension mismatch");\n        }\n        final BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];\n        for (int row = 0; row < rowCount; row++) {\n            final BigDecimal[] dataRow    = data[row];\n            final BigDecimal[] mRow       = m.data[row];\n            final BigDecimal[] outDataRow = outData[row];\n            for (int col = 0; col < columnCount; col++) {\n                outDataRow[col] = dataRow[col].add(mRow[col]);\n            }  \n        }\n        return new BigMatrixImpl(outData, false);\n    }\n\n    /**\n     * Compute  this minus <code>m</code>.\n     *\n     * @param m    matrix to be subtracted\n     * @return     this + m\n     * @throws  IllegalArgumentException if m is not the same size as this\n     */\n    public BigMatrix subtract(BigMatrix m) throws IllegalArgumentException {\n        try {\n            return subtract((BigMatrixImpl) m);\n        } catch (ClassCastException cce) {\n            final int rowCount    = getRowDimension();\n            final int columnCount = getColumnDimension();\n            if (columnCount != m.getColumnDimension() || rowCount != m.getRowDimension()) {\n                throw new IllegalArgumentException("matrix dimension mismatch");\n            }\n            final BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];\n            for (int row = 0; row < rowCount; row++) {\n                final BigDecimal[] dataRow    = data[row];\n                final BigDecimal[] outDataRow = outData[row];\n                for (int col = 0; col < columnCount; col++) {\n                    outDataRow[col] = dataRow[col].subtract(getEntry(row, col));\n                }  \n            }\n            return new BigMatrixImpl(outData, false);\n        }\n    }\n\n    /**\n     * Compute  this minus <code>m</code>.\n     *\n     * @param m    matrix to be subtracted\n     * @return     this + m\n     * @throws  IllegalArgumentException if m is not the same size as this\n     */\n    public BigMatrixImpl subtract(BigMatrixImpl m) throws IllegalArgumentException {\n        final int rowCount    = getRowDimension();\n        final int columnCount = getColumnDimension();\n        if (columnCount != m.getColumnDimension() || rowCount != m.getRowDimension()) {\n            throw new IllegalArgumentException("matrix dimension mismatch");\n        }\n        final BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];\n        for (int row = 0; row < rowCount; row++) {\n            final BigDecimal[] dataRow    = data[row];\n            final BigDecimal[] mRow       = m.data[row];\n            final BigDecimal[] outDataRow = outData[row];\n            for (int col = 0; col < columnCount; col++) {\n                outDataRow[col] = dataRow[col].subtract(mRow[col]);\n            }  \n        }\n        return new BigMatrixImpl(outData, false);\n    }\n\n    /**\n     * Returns the result of adding d to each entry of this.\n     *\n     * @param d    value to be added to each entry\n     * @return     d + this\n     */\n    public BigMatrix scalarAdd(BigDecimal d) {\n        final int rowCount    = getRowDimension();\n        final int columnCount = getColumnDimension();\n        final BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];\n        for (int row = 0; row < rowCount; row++) {\n            final BigDecimal[] dataRow    = data[row];\n            final BigDecimal[] outDataRow = outData[row];\n            for (int col = 0; col < columnCount; col++) {\n                outDataRow[col] = dataRow[col].add(d);\n            }\n        }\n        return new BigMatrixImpl(outData, false);\n    }\n\n    /**\n     * Returns the result of multiplying each entry of this by <code>d</code>\n     * @param d  value to multiply all entries by\n     * @return d * this\n     */\n    public BigMatrix scalarMultiply(BigDecimal d) {\n        final int rowCount    = getRowDimension();\n        final int columnCount = getColumnDimension();\n        final BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];\n        for (int row = 0; row < rowCount; row++) {\n            final BigDecimal[] dataRow    = data[row];\n            final BigDecimal[] outDataRow = outData[row];\n            for (int col = 0; col < columnCount; col++) {\n                outDataRow[col] = dataRow[col].multiply(d);\n            }\n        }\n        return new BigMatrixImpl(outData, false);\n    }\n\n    /**\n     * Returns the result of postmultiplying this by <code>m</code>.\n     * @param m    matrix to postmultiply by\n     * @return     this*m\n     * @throws     IllegalArgumentException\n     *             if columnDimension(this) != rowDimension(m)\n     */\n    public BigMatrix multiply(BigMatrix m) throws IllegalArgumentException {\n        try {\n            return multiply((BigMatrixImpl) m);\n        } catch (ClassCastException cce) {\n            if (this.getColumnDimension() != m.getRowDimension()) {\n                throw new IllegalArgumentException("Matrices are not multiplication compatible.");\n            }\n            final int nRows = this.getRowDimension();\n            final int nCols = m.getColumnDimension();\n            final int nSum = this.getColumnDimension();\n            final BigDecimal[][] outData = new BigDecimal[nRows][nCols];\n            for (int row = 0; row < nRows; row++) {\n                final BigDecimal[] dataRow    = data[row];\n                final BigDecimal[] outDataRow = outData[row];\n                for (int col = 0; col < nCols; col++) {\n                    BigDecimal sum = ZERO;\n                    for (int i = 0; i < nSum; i++) {\n                        sum = sum.add(dataRow[i].multiply(m.getEntry(i, col)));\n                    }\n                    outDataRow[col] = sum;\n                }\n            }\n            return new BigMatrixImpl(outData, false);\n        }\n    }\n\n    /**\n     * Returns the result of postmultiplying this by <code>m</code>.\n     * @param m    matrix to postmultiply by\n     * @return     this*m\n     * @throws     IllegalArgumentException\n     *             if columnDimension(this) != rowDimension(m)\n     */\n    public BigMatrixImpl multiply(BigMatrixImpl m) throws IllegalArgumentException {\n        if (this.getColumnDimension() != m.getRowDimension()) {\n            throw new IllegalArgumentException("Matrices are not multiplication compatible.");\n        }\n        final int nRows = this.getRowDimension();\n        final int nCols = m.getColumnDimension();\n        final int nSum = this.getColumnDimension();\n        final BigDecimal[][] outData = new BigDecimal[nRows][nCols];\n        for (int row = 0; row < nRows; row++) {\n            final BigDecimal[] dataRow    = data[row];\n            final BigDecimal[] outDataRow = outData[row];\n            for (int col = 0; col < nCols; col++) {\n                BigDecimal sum = ZERO;\n                for (int i = 0; i < nSum; i++) {\n                    sum = sum.add(dataRow[i].multiply(m.data[i][col]));\n                }\n                outDataRow[col] = sum;\n            }\n        }            \n        return new BigMatrixImpl(outData, false);\n    }\n\n    /**\n     * Returns the result premultiplying this by <code>m</code>.\n     * @param m    matrix to premultiply by\n     * @return     m * this\n     * @throws     IllegalArgumentException\n     *             if rowDimension(this) != columnDimension(m)\n     */\n    public BigMatrix preMultiply(BigMatrix m) throws IllegalArgumentException {\n        return m.multiply(this);\n    }\n\n    /**\n     * Returns matrix entries as a two-dimensional array.\n     * <p>\n     * Makes a fresh copy of the underlying data.</p>\n     *\n     * @return    2-dimensional array of entries\n     */\n    public BigDecimal[][] getData() {\n        return copyOut();\n    }\n    \n    /**\n     * Returns matrix entries as a two-dimensional array.\n     * <p>\n     * Makes a fresh copy of the underlying data converted to\n     * <code>double</code> values.</p>\n     *\n     * @return    2-dimensional array of entries\n     */\n    public double[][] getDataAsDoubleArray() {\n        final int nRows = getRowDimension();\n        final int nCols = getColumnDimension();\n        final double d[][] = new double[nRows][nCols];\n        for (int i = 0; i < nRows; i++) {\n            for (int j = 0; j < nCols; j++) {\n                d[i][j] = data[i][j].doubleValue();\n            }\n        }\n        return d;\n    }\n    \n    /**\n     * Returns a reference to the underlying data array.\n     * <p>\n     * Does not make a fresh copy of the underlying data.</p>\n     *\n     * @return 2-dimensional array of entries\n     */\n    public BigDecimal[][] getDataRef() {\n        return data;\n    }\n    \n    /***\n     * Gets the rounding mode for division operations\n     * The default is {@link java.math.BigDecimal#ROUND_HALF_UP}\n     * @see BigDecimal\n     * @return the rounding mode.\n     */ \n    public int getRoundingMode() {\n        return roundingMode;\n    }\n    \n    /***\n     * Sets the rounding mode for decimal divisions.\n     * @see BigDecimal\n     * @param roundingMode rounding mode for decimal divisions\n     */\n    public void setRoundingMode(int roundingMode) {\n        this.roundingMode = roundingMode;\n    }\n    \n    /***\n     * Sets the scale for division operations.\n     * The default is 64\n     * @see BigDecimal\n     * @return the scale\n     */\n    public int getScale() {\n        return scale;\n    }\n    \n    /***\n     * Sets the scale for division operations.\n     * @see BigDecimal\n     * @param scale scale for division operations\n     */\n    public void setScale(int scale) {\n        this.scale = scale;\n    }\n    \n    /**\n     * Returns the <a href="http://mathworld.wolfram.com/MaximumAbsoluteRowSumNorm.html">\n     * maximum absolute row sum norm</a> of the matrix.\n     *\n     * @return norm\n     */\n    public BigDecimal getNorm() {\n        BigDecimal maxColSum = ZERO;\n        for (int col = 0; col < this.getColumnDimension(); col++) {\n            BigDecimal sum = ZERO;\n            for (int row = 0; row < this.getRowDimension(); row++) {\n                sum = sum.add(data[row][col].abs());\n            }\n            maxColSum = maxColSum.max(sum);\n        }\n        return maxColSum;\n    }\n    \n    /**\n     * Gets a submatrix. Rows and columns are indicated\n     * counting from 0 to n-1.\n     *\n     * @param startRow Initial row index\n     * @param endRow Final row index\n     * @param startColumn Initial column index\n     * @param endColumn Final column index\n     * @return The subMatrix containing the data of the\n     *         specified rows and columns\n     * @exception MatrixIndexException if row or column selections are not valid\n     */\n    public BigMatrix getSubMatrix(int startRow, int endRow,\n                                  int startColumn, int endColumn)\n        throws MatrixIndexException {\n        if (startRow < 0 || startRow > endRow || endRow > data.length ||\n                startColumn < 0 || startColumn > endColumn ||\n                endColumn > data[0].length ) {\n            throw new MatrixIndexException(\n            "invalid row or column index selection");\n        }\n        final BigDecimal[][] subMatrixData =\n            new BigDecimal[endRow - startRow + 1][endColumn - startColumn + 1];\n        for (int i = startRow; i <= endRow; i++) {\n            System.arraycopy(data[i], startColumn,\n                    subMatrixData[i - startRow], 0,\n                    endColumn - startColumn + 1);\n        }\n        return new BigMatrixImpl(subMatrixData, false);\n    }\n    \n    /**\n     * Gets a submatrix. Rows and columns are indicated\n     * counting from 0 to n-1.\n     *\n     * @param selectedRows Array of row indices must be non-empty\n     * @param selectedColumns Array of column indices must be non-empty\n     * @return The subMatrix containing the data in the\n     *     specified rows and columns\n     * @exception MatrixIndexException  if supplied row or column index arrays\n     *     are not valid\n     */\n    public BigMatrix getSubMatrix(int[] selectedRows, int[] selectedColumns)\n        throws MatrixIndexException {\n        if (selectedRows.length * selectedColumns.length == 0) {\n            throw new MatrixIndexException(\n            "selected row and column index arrays must be non-empty");\n        }\n        final BigDecimal[][] subMatrixData =\n            new BigDecimal[selectedRows.length][selectedColumns.length];\n        try  {\n            for (int i = 0; i < selectedRows.length; i++) {\n                final BigDecimal[] subI = subMatrixData[i];\n                final BigDecimal[] dataSelectedI = data[selectedRows[i]];\n                for (int j = 0; j < selectedColumns.length; j++) {\n                    subI[j] = dataSelectedI[selectedColumns[j]];\n                }\n            }\n        }\n        catch (ArrayIndexOutOfBoundsException e) {\n            throw new MatrixIndexException("matrix dimension mismatch");\n        }\n        return new BigMatrixImpl(subMatrixData, false);\n    } \n    \n    /**\n     * Replace the submatrix starting at <code>row, column</code> using data in\n     * the input <code>subMatrix</code> array. Indexes are 0-based.\n     * <p> \n     * Example:<br>\n     * Starting with <pre>\n     * 1  2  3  4\n     * 5  6  7  8\n     * 9  0  1  2\n     * </pre>\n     * and <code>subMatrix = {{3, 4} {5,6}}</code>, invoking \n     * <code>setSubMatrix(subMatrix,1,1))</code> will result in <pre>\n     * 1  2  3  4\n     * 5  3  4  8\n     * 9  5  6  2\n     * </pre></p>\n     * \n     * @param subMatrix  array containing the submatrix replacement data\n     * @param row  row coordinate of the top, left element to be replaced\n     * @param column  column coordinate of the top, left element to be replaced\n     * @throws MatrixIndexException  if subMatrix does not fit into this \n     *    matrix from element in (row, column) \n     * @throws IllegalArgumentException if <code>subMatrix</code> is not rectangular\n     *  (not all rows have the same length) or empty\n     * @throws NullPointerException if <code>subMatrix</code> is null\n     * @since 1.1\n     */\n    public void setSubMatrix(BigDecimal[][] subMatrix, int row, int column) \n    throws MatrixIndexException {\n        if ((row < 0) || (column < 0)){\n            throw new MatrixIndexException\n            ("invalid row or column index selection");          \n        }\n        final int nRows = subMatrix.length;\n        if (nRows == 0) {\n            throw new IllegalArgumentException(\n            "Matrix must have at least one row."); \n        }\n        final int nCols = subMatrix[0].length;\n        if (nCols == 0) {\n            throw new IllegalArgumentException(\n            "Matrix must have at least one column."); \n        }\n        for (int r = 1; r < nRows; r++) {\n            if (subMatrix[r].length != nCols) {\n                throw new IllegalArgumentException(\n                "All input rows must have the same length.");\n            }\n        }       \n        if (data == null) {\n            if ((row > 0)||(column > 0)) throw new MatrixIndexException\n            ("matrix must be initialized to perfom this method");\n            data = new BigDecimal[nRows][nCols];\n            System.arraycopy(subMatrix, 0, data, 0, subMatrix.length);          \n        }   \n        if (((nRows + row) > this.getRowDimension()) ||\n            (nCols + column > this.getColumnDimension()))\n            throw new MatrixIndexException(\n            "invalid row or column index selection");                   \n        for (int i = 0; i < nRows; i++) {\n            System.arraycopy(subMatrix[i], 0, data[row + i], column, nCols);\n        } \n        lu = null;\n    }\n    \n    /**\n     * Returns the entries in row number <code>row</code>\n     * as a row matrix.  Row indices start at 0.\n     *\n     * @param row the row to be fetched\n     * @return row matrix\n     * @throws MatrixIndexException if the specified row index is invalid\n     */\n    public BigMatrix getRowMatrix(int row) throws MatrixIndexException {\n        if ( !isValidCoordinate( row, 0)) {\n            throw new MatrixIndexException("illegal row argument");\n        }\n        final int ncols = this.getColumnDimension();\n        final BigDecimal[][] out = new BigDecimal[1][ncols]; \n        System.arraycopy(data[row], 0, out[0], 0, ncols);\n        return new BigMatrixImpl(out, false);\n    } \n    \n    /**\n     * Returns the entries in column number <code>column</code>\n     * as a column matrix.  Column indices start at 0.\n     *\n     * @param column the column to be fetched\n     * @return column matrix\n     * @throws MatrixIndexException if the specified column index is invalid\n     */\n    public BigMatrix getColumnMatrix(int column) throws MatrixIndexException {\n        if ( !isValidCoordinate( 0, column)) {\n            throw new MatrixIndexException("illegal column argument");\n        }\n        final int nRows = this.getRowDimension();\n        final BigDecimal[][] out = new BigDecimal[nRows][1]; \n        for (int row = 0; row < nRows; row++) {\n            out[row][0] = data[row][column];\n        }\n        return new BigMatrixImpl(out, false);\n    }\n    \n    /**\n     * Returns the entries in row number <code>row</code> as an array.\n     * <p>\n     * Row indices start at 0.  A <code>MatrixIndexException</code> is thrown\n     * unless <code>0 <= row < rowDimension.</code></p>\n     *\n     * @param row the row to be fetched\n     * @return array of entries in the row\n     * @throws MatrixIndexException if the specified row index is not valid\n     */\n    public BigDecimal[] getRow(int row) throws MatrixIndexException {\n        if ( !isValidCoordinate( row, 0 ) ) {\n            throw new MatrixIndexException("illegal row argument");\n        }\n        final int ncols = this.getColumnDimension();\n        final BigDecimal[] out = new BigDecimal[ncols];\n        System.arraycopy(data[row], 0, out, 0, ncols);\n        return out;\n    }\n    \n     /**\n     * Returns the entries in row number <code>row</code> as an array\n     * of double values.\n     * <p>\n     * Row indices start at 0.  A <code>MatrixIndexException</code> is thrown\n     * unless <code>0 <= row < rowDimension.</code></p>\n     *\n     * @param row the row to be fetched\n     * @return array of entries in the row\n     * @throws MatrixIndexException if the specified row index is not valid\n     */\n    public double[] getRowAsDoubleArray(int row) throws MatrixIndexException {\n        if ( !isValidCoordinate( row, 0 ) ) {\n            throw new MatrixIndexException("illegal row argument");\n        }\n        final int ncols = this.getColumnDimension();\n        final double[] out = new double[ncols];\n        for (int i=0;i<ncols;i++) {\n            out[i] = data[row][i].doubleValue();\n        }\n        return out;\n    }\n    \n     /**\n     * Returns the entries in column number <code>col</code> as an array.\n     * <p>\n     * Column indices start at 0.  A <code>MatrixIndexException</code> is thrown\n     * unless <code>0 <= column < columnDimension.</code></p>\n     *\n     * @param col the column to be fetched\n     * @return array of entries in the column\n     * @throws MatrixIndexException if the specified column index is not valid\n     */\n    public BigDecimal[] getColumn(int col) throws MatrixIndexException {\n        if ( !isValidCoordinate(0, col) ) {\n            throw new MatrixIndexException("illegal column argument");\n        }\n        final int nRows = this.getRowDimension();\n        final BigDecimal[] out = new BigDecimal[nRows];\n        for (int i = 0; i < nRows; i++) {\n            out[i] = data[i][col];\n        }\n        return out;\n    }\n    \n    /**\n     * Returns the entries in column number <code>col</code> as an array\n     * of double values.\n     * <p>\n     * Column indices start at 0.  A <code>MatrixIndexException</code> is thrown\n     * unless <code>0 <= column < columnDimension.</code></p>\n     *\n     * @param col the column to be fetched\n     * @return array of entries in the column\n     * @throws MatrixIndexException if the specified column index is not valid\n     */\n    public double[] getColumnAsDoubleArray(int col) throws MatrixIndexException {\n        if ( !isValidCoordinate( 0, col ) ) {\n            throw new MatrixIndexException("illegal column argument");\n        }\n        final int nrows = this.getRowDimension();\n        final double[] out = new double[nrows];\n        for (int i=0;i<nrows;i++) {\n            out[i] = data[i][col].doubleValue();\n        }\n        return out;\n    }\n    \n     /**\n     * Returns the entry in the specified row and column.\n     * <p>\n     * Row and column indices start at 0 and must satisfy \n     * <ul>\n     * <li><code>0 <= row < rowDimension</code></li>\n     * <li><code> 0 <= column < columnDimension</code></li>\n     * </ul>\n     * otherwise a <code>MatrixIndexException</code> is thrown.</p>\n     *\n     * @param row  row location of entry to be fetched  \n     * @param column  column location of entry to be fetched\n     * @return matrix entry in row,column\n     * @throws MatrixIndexException if the row or column index is not valid\n     */\n    public BigDecimal getEntry(int row, int column)\n    throws MatrixIndexException {\n        try {\n            return data[row][column];\n        } catch (ArrayIndexOutOfBoundsException e) {\n            throw new MatrixIndexException("matrix entry does not exist");\n        }\n    }\n    \n    /**\n     * Returns the entry in the specified row and column as a double.\n     * <p>\n     * Row and column indices start at 0 and must satisfy \n     * <ul>\n     * <li><code>0 <= row < rowDimension</code></li>\n     * <li><code> 0 <= column < columnDimension</code></li>\n     * </ul>\n     * otherwise a <code>MatrixIndexException</code> is thrown.</p>\n     *\n     * @param row  row location of entry to be fetched\n     * @param column  column location of entry to be fetched\n     * @return matrix entry in row,column\n     * @throws MatrixIndexException if the row\n     * or column index is not valid\n     */\n    public double getEntryAsDouble(int row, int column) throws MatrixIndexException {\n        return getEntry(row,column).doubleValue();\n    }\n    \n    /**\n     * Returns the transpose matrix.\n     *\n     * @return transpose matrix\n     */\n    public BigMatrix transpose() {\n        final int nRows = this.getRowDimension();\n        final int nCols = this.getColumnDimension();\n        final BigDecimal[][] outData = new BigDecimal[nCols][nRows];\n        for (int row = 0; row < nRows; row++) {\n            final BigDecimal[] dataRow = data[row];\n            for (int col = 0; col < nCols; col++) {\n                outData[col][row] = dataRow[col];\n            }\n        }\n        return new BigMatrixImpl(outData, false);\n    }\n    \n    /**\n     * Returns the inverse matrix if this matrix is invertible.\n     * \n     * @return inverse matrix\n     * @throws InvalidMatrixException if this is not invertible\n     */\n    public BigMatrix inverse() throws InvalidMatrixException {\n        return solve(MatrixUtils.createBigIdentityMatrix(getRowDimension()));\n    }\n    \n    /**\n     * Returns the determinant of this matrix.\n     *\n     * @return determinant\n     * @throws InvalidMatrixException if matrix is not square\n     */\n    public BigDecimal getDeterminant() throws InvalidMatrixException {\n        if (!isSquare()) {\n            throw new InvalidMatrixException("matrix is not square");\n        }\n        if (isSingular()) {   // note: this has side effect of attempting LU decomp if lu == null\n            return ZERO;\n        } else {\n            BigDecimal det = (parity == 1) ? ONE : ONE.negate();\n            for (int i = 0; i < this.getRowDimension(); i++) {\n                det = det.multiply(lu[i][i]);\n            }\n            return det;\n        }\n    }\n    \n     /**\n     * Is this a square matrix?\n     * @return true if the matrix is square (rowDimension = columnDimension)\n     */\n    public boolean isSquare() {\n        return (this.getColumnDimension() == this.getRowDimension());\n    }\n    \n    /**\n     * Is this a singular matrix?\n     * @return true if the matrix is singular\n     */\n    public boolean isSingular() {\n        if (lu == null) {\n            try {\n                luDecompose();\n                return false;\n            } catch (InvalidMatrixException ex) {\n                return true;\n            }\n        } else { // LU decomp must have been successfully performed\n            return false; // so the matrix is not singular\n        }\n    }\n    \n    /**\n     * Returns the number of rows in the matrix.\n     *\n     * @return rowDimension\n     */\n    public int getRowDimension() {\n        return data.length;\n    }\n    \n    /**\n     * Returns the number of columns in the matrix.\n     *\n     * @return columnDimension\n     */\n    public int getColumnDimension() {\n        return data[0].length;\n    }\n    \n     /**\n     * Returns the <a href="http://mathworld.wolfram.com/MatrixTrace.html">\n     * trace</a> of the matrix (the sum of the elements on the main diagonal).\n     *\n     * @return trace\n     * \n     * @throws IllegalArgumentException if this matrix is not square.\n     */\n    public BigDecimal getTrace() throws IllegalArgumentException {\n        if (!isSquare()) {\n            throw new IllegalArgumentException("matrix is not square");\n        }\n        BigDecimal trace = data[0][0];\n        for (int i = 1; i < this.getRowDimension(); i++) {\n            trace = trace.add(data[i][i]);\n        }\n        return trace;\n    }\n    \n    /**\n     * Returns the result of multiplying this by the vector <code>v</code>.\n     *\n     * @param v the vector to operate on\n     * @return this*v\n     * @throws IllegalArgumentException if columnDimension != v.size()\n     */\n    public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException {\n        if (v.length != this.getColumnDimension()) {\n            throw new IllegalArgumentException("vector has wrong length");\n        }\n        final int nRows = this.getRowDimension();\n        final int nCols = this.getColumnDimension();', 'aftercode': '        for (int row = 0; row < nRows; row++) {\n            BigDecimal sum = ZERO;\n            for (int i = 0; i < nCols; i++) {\n                sum = sum.add(data[row][i].multiply(v[i]));\n            }\n            out[row] = sum;\n        }\n        return out;\n    }\n    \n    /**\n     * Returns the result of multiplying this by the vector <code>v</code>.\n     *\n     * @param v the vector to operate on\n     * @return this*v\n     * @throws IllegalArgumentException if columnDimension != v.size()\n     */\n    public BigDecimal[] operate(double[] v) throws IllegalArgumentException {\n        final BigDecimal bd[] = new BigDecimal[v.length];\n        for (int i = 0; i < bd.length; i++) {\n            bd[i] = new BigDecimal(v[i]);\n        }\n        return operate(bd);\n    }\n    \n    /**\n     * Returns the (row) vector result of premultiplying this by the vector <code>v</code>.\n     *\n     * @param v the row vector to premultiply by\n     * @return v*this\n     * @throws IllegalArgumentException if rowDimension != v.size()\n     */\n    public BigDecimal[] preMultiply(BigDecimal[] v) throws IllegalArgumentException {\n        final int nRows = this.getRowDimension();\n        if (v.length != nRows) {\n            throw new IllegalArgumentException("vector has wrong length");\n        }\n        final int nCols = this.getColumnDimension();\n        final BigDecimal[] out = new BigDecimal[nCols];\n        for (int col = 0; col < nCols; col++) {\n            BigDecimal sum = ZERO;\n            for (int i = 0; i < nRows; i++) {\n                sum = sum.add(data[i][col].multiply(v[i]));\n            }\n            out[col] = sum;\n        }\n        return out;\n    }\n    \n    /**\n     * Returns a matrix of (column) solution vectors for linear systems with\n     * coefficient matrix = this and constant vectors = columns of\n     * <code>b</code>. \n     *\n     * @param b  array of constants forming RHS of linear systems to\n     * to solve\n     * @return solution array\n     * @throws IllegalArgumentException if this.rowDimension != row dimension\n     * @throws InvalidMatrixException if this matrix is not square or is singular\n     */\n    public BigDecimal[] solve(BigDecimal[] b) throws IllegalArgumentException, InvalidMatrixException {\n        final int nRows = this.getRowDimension();\n        if (b.length != nRows) {\n            throw new IllegalArgumentException("constant vector has wrong length");\n        }\n        final BigMatrix bMatrix = new BigMatrixImpl(b);\n        final BigDecimal[][] solution = ((BigMatrixImpl) (solve(bMatrix))).getDataRef();\n        final BigDecimal[] out = new BigDecimal[nRows];\n        for (int row = 0; row < nRows; row++) {\n            out[row] = solution[row][0];\n        }\n        return out;\n    }\n    \n    /**\n     * Returns a matrix of (column) solution vectors for linear systems with\n     * coefficient matrix = this and constant vectors = columns of\n     * <code>b</code>. \n     *\n     * @param b  array of constants forming RHS of linear systems to\n     * to solve\n     * @return solution array\n     * @throws IllegalArgumentException if this.rowDimension != row dimension\n     * @throws InvalidMatrixException if this matrix is not square or is singular\n     */\n    public BigDecimal[] solve(double[] b) throws IllegalArgumentException, InvalidMatrixException {\n        final BigDecimal bd[] = new BigDecimal[b.length];\n        for (int i = 0; i < bd.length; i++) {\n            bd[i] = new BigDecimal(b[i]);\n        }\n        return solve(bd);\n    }\n    \n    /**\n     * Returns a matrix of (column) solution vectors for linear systems with\n     * coefficient matrix = this and constant vectors = columns of\n     * <code>b</code>. \n     *\n     * @param b  matrix of constant vectors forming RHS of linear systems to\n     * to solve\n     * @return matrix of solution vectors\n     * @throws IllegalArgumentException if this.rowDimension != row dimension\n     * @throws InvalidMatrixException if this matrix is not square or is singular\n     */\n    public BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException  {\n        if (b.getRowDimension() != this.getRowDimension()) {\n            throw new IllegalArgumentException("Incorrect row dimension");\n        }\n        if (!this.isSquare()) {\n            throw new InvalidMatrixException("coefficient matrix is not square");\n        }\n        if (this.isSingular()) { // side effect: compute LU decomp\n            throw new InvalidMatrixException("Matrix is singular.");\n        }\n        \n        final int nCol = this.getColumnDimension();\n        final int nColB = b.getColumnDimension();\n        final int nRowB = b.getRowDimension();\n        \n        // Apply permutations to b\n        final BigDecimal[][] bp = new BigDecimal[nRowB][nColB];\n        for (int row = 0; row < nRowB; row++) {\n            final BigDecimal[] bpRow = bp[row];\n            for (int col = 0; col < nColB; col++) {\n                bpRow[col] = b.getEntry(permutation[row], col);\n            }\n        }\n        \n        // Solve LY = b\n        for (int col = 0; col < nCol; col++) {\n            for (int i = col + 1; i < nCol; i++) {\n                final BigDecimal[] bpI = bp[i];\n                final BigDecimal[] luI = lu[i];\n                for (int j = 0; j < nColB; j++) {\n                    bpI[j] = bpI[j].subtract(bp[col][j].multiply(luI[col]));\n                }\n            }\n        }\n        \n        // Solve UX = Y\n        for (int col = nCol - 1; col >= 0; col--) {\n            final BigDecimal[] bpCol = bp[col];\n            final BigDecimal luDiag = lu[col][col];\n            for (int j = 0; j < nColB; j++) {\n                bpCol[j] = bpCol[j].divide(luDiag, scale, roundingMode);\n            }\n            for (int i = 0; i < col; i++) {\n                final BigDecimal[] bpI = bp[i];\n                final BigDecimal[] luI = lu[i];\n                for (int j = 0; j < nColB; j++) {\n                    bpI[j] = bpI[j].subtract(bp[col][j].multiply(luI[col]));\n                }\n            }\n        }\n\n        return new BigMatrixImpl(bp, false);\n\n    }\n    \n    /**\n     * Computes a new \n     * <a href="http://www.math.gatech.edu/~bourbaki/math2601/Web-notes/2num.pdf">\n     * LU decompostion</a> for this matrix, storing the result for use by other methods. \n     * <p>\n     * <strong>Implementation Note</strong>:<br>\n     * Uses <a href="http://www.damtp.cam.ac.uk/user/fdl/people/sd/lectures/nummeth98/linear.htm">\n     * Crout\'s algortithm</a>, with partial pivoting.</p>\n     * <p>\n     * <strong>Usage Note</strong>:<br>\n     * This method should rarely be invoked directly. Its only use is\n     * to force recomputation of the LU decomposition when changes have been\n     * made to the underlying data using direct array references. Changes\n     * made using setXxx methods will trigger recomputation when needed\n     * automatically.</p>\n     *\n     * @throws InvalidMatrixException if the matrix is non-square or singular.\n     */\n    public void luDecompose() throws InvalidMatrixException {\n        \n        final int nRows = this.getRowDimension();\n        final int nCols = this.getColumnDimension();\n        if (nRows != nCols) {\n            throw new InvalidMatrixException("LU decomposition requires that the matrix be square.");\n        }\n        lu = this.getData();\n        \n        // Initialize permutation array and parity\n        permutation = new int[nRows];\n        for (int row = 0; row < nRows; row++) {\n            permutation[row] = row;\n        }\n        parity = 1;\n        \n        // Loop over columns\n        for (int col = 0; col < nCols; col++) {\n            \n            BigDecimal sum = ZERO;\n            \n            // upper\n            for (int row = 0; row < col; row++) {\n                final BigDecimal[] luRow = lu[row];\n                sum = luRow[col];\n                for (int i = 0; i < row; i++) {\n                    sum = sum.subtract(luRow[i].multiply(lu[i][col]));\n                }\n                luRow[col] = sum;\n            }\n            \n            // lower\n            int max = col; // permutation row\n            BigDecimal largest = ZERO;\n            for (int row = col; row < nRows; row++) {\n                final BigDecimal[] luRow = lu[row];\n                sum = luRow[col];\n                for (int i = 0; i < col; i++) {\n                    sum = sum.subtract(luRow[i].multiply(lu[i][col]));\n                }\n                luRow[col] = sum;\n                \n                // maintain best permutation choice\n                if (sum.abs().compareTo(largest) == 1) {\n                    largest = sum.abs();\n                    max = row;\n                }\n            }\n            \n            // Singularity check\n            if (lu[max][col].abs().compareTo(TOO_SMALL) <= 0) {\n                lu = null;\n                throw new InvalidMatrixException("matrix is singular");\n            }\n            \n            // Pivot if necessary\n            if (max != col) {\n                BigDecimal tmp = ZERO;\n                for (int i = 0; i < nCols; i++) {\n                    tmp = lu[max][i];\n                    lu[max][i] = lu[col][i];\n                    lu[col][i] = tmp;\n                }\n                int temp = permutation[max];\n                permutation[max] = permutation[col];\n                permutation[col] = temp;\n                parity = -parity;\n            }\n            \n            // Divide the lower elements by the "winning" diagonal elt.\n            final BigDecimal luDiag = lu[col][col];\n            for (int row = col + 1; row < nRows; row++) {\n                final BigDecimal[] luRow = lu[row];\n                luRow[col] = luRow[col].divide(luDiag, scale, roundingMode);\n            }\n            \n        }\n        \n    }\n    \n    /**\n     * Get a string representation for this matrix.\n     * @return a string representation for this matrix\n     */\n    public String toString() {\n        StringBuffer res = new StringBuffer();\n        res.append("BigMatrixImpl{");\n        if (data != null) {\n            for (int i = 0; i < data.length; i++) {\n                if (i > 0) {\n                    res.append(",");\n                }\n                res.append("{");\n                for (int j = 0; j < data[0].length; j++) {\n                    if (j > 0) {\n                        res.append(",");\n                    }\n                    res.append(data[i][j]);\n                } \n                res.append("}");\n            } \n        }\n        res.append("}");\n        return res.toString();\n    } \n    \n    /**\n     * Returns true iff <code>object</code> is a \n     * <code>BigMatrixImpl</code> instance with the same dimensions as this\n     * and all corresponding matrix entries are equal.  BigDecimal.equals\n     * is used to compare corresponding entries.\n     * \n     * @param object the object to test equality against.\n     * @return true if object equals this\n     */\n    public boolean equals(Object object) {\n        if (object == this ) {\n            return true;\n        }\n        if (object instanceof BigMatrixImpl == false) {\n            return false;\n        }\n        final BigMatrix m = (BigMatrix) object;\n        final int nRows = getRowDimension();\n        final int nCols = getColumnDimension();\n        if (m.getColumnDimension() != nCols || m.getRowDimension() != nRows) {\n            return false;\n        }\n        for (int row = 0; row < nRows; row++) {\n            final BigDecimal[] dataRow = data[row];\n            for (int col = 0; col < nCols; col++) {\n                if (!dataRow[col].equals(m.getEntry(row, col))) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    \n    /**\n     * Computes a hashcode for the matrix.\n     * \n     * @return hashcode for matrix\n     */\n    public int hashCode() {\n        int ret = 7;\n        final int nRows = getRowDimension();\n        final int nCols = getColumnDimension();\n        ret = ret * 31 + nRows;\n        ret = ret * 31 + nCols;\n        for (int row = 0; row < nRows; row++) {\n            final BigDecimal[] dataRow = data[row];\n            for (int col = 0; col < nCols; col++) {\n                ret = ret * 31 + (11 * (row+1) + 17 * (col+1)) * \n                dataRow[col].hashCode();\n            }\n        }   \n        return ret;\n    }\n    \n    //------------------------ Protected methods\n    \n    /**\n     *  Returns the LU decomposition as a BigMatrix.\n     *  Returns a fresh copy of the cached LU matrix if this has been computed; \n     *  otherwise the composition is computed and cached for use by other methods.   \n     *  Since a copy is returned in either case, changes to the returned matrix do not \n     *  affect the LU decomposition property. \n     * <p>\n     * The matrix returned is a compact representation of the LU decomposition. \n     * Elements below the main diagonal correspond to entries of the "L" matrix;   \n     * elements on and above the main diagonal correspond to entries of the "U"\n     * matrix.</p>\n     * <p>\n     * Example: <pre>\n     * \n     *     Returned matrix                L                  U\n     *         2  3  1                   1  0  0            2  3  1          \n     *         5  4  6                   5  1  0            0  4  6\n     *         1  7  8                   1  7  1            0  0  8          \n     * </pre>\n     * \n     * The L and U matrices satisfy the matrix equation LU = permuteRows(this), <br>\n     *  where permuteRows reorders the rows of the matrix to follow the order determined\n     *  by the <a href=#getPermutation()>permutation</a> property.</p>\n     * \n     * @return LU decomposition matrix\n     * @throws InvalidMatrixException if the matrix is non-square or singular.\n     */\n    protected BigMatrix getLUMatrix() throws InvalidMatrixException {\n        if (lu == null) {\n            luDecompose();\n        }\n        return new BigMatrixImpl(lu);\n    }\n    \n    /**\n     * Returns the permutation associated with the lu decomposition.\n     * The entries of the array represent a permutation of the numbers 0, ... , nRows - 1.\n     * <p>\n     * Example:\n     * permutation = [1, 2, 0] means current 2nd row is first, current third row is second\n     * and current first row is last.</p>\n     * <p>\n     * Returns a fresh copy of the array.</p>\n     * \n     * @return the permutation\n     */\n    protected int[] getPermutation() {\n        final int[] out = new int[permutation.length];\n        System.arraycopy(permutation, 0, out, 0, permutation.length);\n        return out;\n    }\n    \n    //------------------------ Private methods\n    \n    /**\n     * Returns a fresh copy of the underlying data array.\n     *\n     * @return a copy of the underlying data array.\n     */\n    private BigDecimal[][] copyOut() {\n        final int nRows = this.getRowDimension();\n        final BigDecimal[][] out = new BigDecimal[nRows][this.getColumnDimension()];\n        // can\'t copy 2-d array in one shot, otherwise get row references\n        for (int i = 0; i < nRows; i++) {\n            System.arraycopy(data[i], 0, out[i], 0, data[i].length);\n        }\n        return out;\n    }\n    \n    /**\n     * Replaces data with a fresh copy of the input array.\n     * <p>\n     * Verifies that the input array is rectangular and non-empty.</p>\n     *\n     * @param in data to copy in\n     * @throws IllegalArgumentException if input array is emtpy or not\n     *    rectangular\n     * @throws NullPointerException if input array is null\n     */\n    private void copyIn(BigDecimal[][] in) {\n        setSubMatrix(in,0,0);\n    }\n    \n    /**\n     * Replaces data with a fresh copy of the input array.\n     *\n     * @param in data to copy in\n     */\n    private void copyIn(double[][] in) {\n        final int nRows = in.length;\n        final int nCols = in[0].length;\n        data = new BigDecimal[nRows][nCols];\n        for (int i = 0; i < nRows; i++) {\n            final BigDecimal[] dataI = data[i];\n            final double[] inI = in[i];\n            for (int j = 0; j < nCols; j++) {\n                dataI[j] = new BigDecimal(inI[j]);\n            }\n        }\n        lu = null;\n    }\n    \n    /**\n     * Replaces data with BigDecimals represented by the strings in the input\n     * array.\n     *\n     * @param in data to copy in\n     */\n    private void copyIn(String[][] in) {\n        final int nRows = in.length;\n        final int nCols = in[0].length;\n        data = new BigDecimal[nRows][nCols];\n        for (int i = 0; i < nRows; i++) {\n            final BigDecimal[] dataI = data[i];\n            final String[] inI = in[i];\n            for (int j = 0; j < nCols; j++) {\n                dataI[j] = new BigDecimal(inI[j]);\n            }\n        }\n        lu = null;\n    }\n    \n    /**\n     * Tests a given coordinate as being valid or invalid\n     *\n     * @param row the row index.\n     * @param col the column index.\n     * @return true if the coordinate is with the current dimensions\n     */\n    private boolean isValidCoordinate(int row, int col) {\n        final int nRows = this.getRowDimension();\n        final int nCols = this.getColumnDimension();\n        return !(row < 0 || row >= nRows || col < 0 || col >= nCols);\n    }\n    \n}', 'tree': 'MethodDeclaration modifiers public_ter ^ ^ return_type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ name meth0 ^ ^ parameters FormalParameter type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ name par0 ^ ^ ^ ^ throws IllegalArgumentException_ter ^ ^ body IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ operandr This selectors MethodInvocation member getColumnDimension_ter ^ ^ ^ ^ ^ ^ ^ ^ then_statement BlockStatement statements ThrowStatement expression ClassCreator type ReferenceType name IllegalArgumentException_ter ^ ^ ^ ^ arguments Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer This selectors MethodInvocation member getRowDimension_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc1 ^ ^ initializer This selectors MethodInvocation member getColumnDimension_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ForStatement control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc3 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc3 ^ ^ ^ ^ operandr MemberReference member loc0 ^ ^ ^ ^ ^ ^ update MemberReference postfix_operators ++_ter ^ ^ member loc3 ^ ^ ^ ^ ^ ^ body BlockStatement statements LocalVariableDeclaration type ReferenceType name BigDecimal_ter ^ ^ ^ ^ declarators VariableDeclarator name loc4 ^ ^ initializer MemberReference member ZERO_ter ^ ^ ^ ^ ^ ^ ^ ForStatement control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc5 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr MemberReference member loc1 ^ ^ ^ ^ ^ ^ update MemberReference postfix_operators ++_ter ^ ^ member loc5 ^ ^ ^ ^ ^ ^ body BlockStatement statements StatementExpression expression Assignment expressionl MemberReference member loc4 ^ ^ ^ ^ value MethodInvocation qualifier loc4 ^ ^ arguments MemberReference selectors ArraySelector index MemberReference member loc3 ^ ^ ^ ^ ^ ArraySelector index MemberReference member loc5 ^ ^ ^ ^ ^ MethodInvocation arguments MemberReference selectors ArraySelector index MemberReference member loc5 ^ ^ ^ ^ ^ ^ member par0 ^ ^ ^ ^ member multiply_ter ^ ^ ^ ^ member data_ter ^ ^ ^ ^ member add_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference selectors ArraySelector index MemberReference member loc3 ^ ^ ^ ^ ^ ^ member loc2 ^ ^ ^ ^ value MemberReference member loc4 ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ReturnStatement expression MemberReference member loc2 ^ ^ ^ ^ ^ ^ ^ ', 'prob': [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], 'mode': 0, 'line': 991, 'isa': False, 'fl_score': 1}, {'bugid': 'Math-98', 'treeroot': <Searchnode.Node object at 0x7f993f616210>, 'troot': <Searchnode.Node object at 0x7f993f616210>, 'oldcode': '        final double[] out = new double[v.length];', 'filepath': 'buggy/Math-98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java', 'subroot': <Searchnode.Node object at 0x7f993f61c850>, 'vardic': {'operate_ter': 'meth0', 'v_ter': 'par0', 'nRows_ter': 'loc0', 'nCols_ter': 'loc1', 'out_ter': 'loc2', 'row_ter': 'loc3', 'dataRow_ter': 'loc4', 'sum_ter': 'loc5', 'i_ter': 'loc6'}, 'typedic': {'v_ter': 'double', 'nRows_ter': 'int', 'nCols_ter': 'int', 'out_ter': 'double', 'row_ter': 'int', 'dataRow_ter': 'double', 'sum_ter': 'double', 'i_ter': 'int'}, 'idss': 'Math-98', 'classname': 'org.apache.commons.math.linear.RealMatrixImpl', 'precode': '/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the "License"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.commons.math.linear;\n\nimport java.io.Serializable;\nimport org.apache.commons.math.util.MathUtils;\n\n\n/**\n * Implementation of RealMatrix using a double[][] array to store entries and\n * <a href="http://www.math.gatech.edu/~bourbaki/math2601/Web-notes/2num.pdf">\n * LU decomposition</a> to support linear system\n * solution and inverse.\n * <p>\n * The LU decomposition is performed as needed, to support the following operations: <ul>\n * <li>solve</li>\n * <li>isSingular</li>\n * <li>getDeterminant</li>\n * <li>inverse</li> </ul></p>\n * <p>\n * <strong>Usage notes</strong>:<br>\n * <ul><li>\n * The LU decomposition is cached and reused on subsequent calls.   \n * If data are modified via references to the underlying array obtained using\n * <code>getDataRef()</code>, then the stored LU decomposition will not be\n * discarded.  In this case, you need to explicitly invoke \n * <code>LUDecompose()</code> to recompute the decomposition\n * before using any of the methods above.</li>\n * <li>\n * As specified in the {@link RealMatrix} interface, matrix element indexing\n * is 0-based -- e.g., <code>getEntry(0, 0)</code>\n * returns the element in the first row, first column of the matrix.</li></ul>\n * </p>\n *\n * @version $Revision$ $Date$\n */\npublic class RealMatrixImpl implements RealMatrix, Serializable {\n    \n    /** Serializable version identifier */\n    private static final long serialVersionUID = -4828886979278117018L;\n\n    /** Entries of the matrix */\n    protected double data[][] = null;\n\n    /** Entries of cached LU decomposition.\n     *  All updates to data (other than luDecompose()) *must* set this to null\n     */\n    protected double lu[][] = null;\n\n    /** Permutation associated with LU decomposition */\n    protected int[] permutation = null;\n\n    /** Parity of the permutation associated with the LU decomposition */\n    protected int parity = 1;\n\n    /** Bound to determine effective singularity in LU decomposition */\n    private static final double TOO_SMALL = 10E-12;\n\n    /**\n     * Creates a matrix with no data\n     */\n    public RealMatrixImpl() {\n    }\n\n    /**\n     * Create a new RealMatrix with the supplied row and column dimensions.\n     *\n     * @param rowDimension  the number of rows in the new matrix\n     * @param columnDimension  the number of columns in the new matrix\n     * @throws IllegalArgumentException if row or column dimension is not\n     *  positive\n     */\n    public RealMatrixImpl(int rowDimension, int columnDimension) {\n        if (rowDimension <= 0 || columnDimension <= 0) {\n            throw new IllegalArgumentException(\n                    "row and column dimensions must be postive");\n        }\n        data = new double[rowDimension][columnDimension];\n        lu = null;\n    }\n\n    /**\n     * Create a new RealMatrix using the input array as the underlying\n     * data array.\n     * <p>The input array is copied, not referenced. This constructor has\n     * the same effect as calling {@link #RealMatrixImpl(double[][], boolean)}\n     * with the second argument set to <code>true</code>.</p>\n     *\n     * @param d data for new matrix\n     * @throws IllegalArgumentException if <code>d</code> is not rectangular\n     *  (not all rows have the same length) or empty\n     * @throws NullPointerException if <code>d</code> is null\n     * @see #RealMatrixImpl(double[][], boolean)\n     */\n    public RealMatrixImpl(double[][] d) {\n        copyIn(d);\n        lu = null;\n    }\n\n    /**\n     * Create a new RealMatrix using the input array as the underlying\n     * data array.\n     * <p>If an array is built specially in order to be embedded in a\n     * RealMatrix and not used directly, the <code>copyArray</code> may be\n     * set to <code>false</code. This will prevent the copying and improve\n     * performance as no new array will be built and no data will be copied.</p>\n     * @param d data for new matrix\n     * @param copyArray if true, the input array will be copied, otherwise\n     * it will be referenced\n     * @throws IllegalArgumentException if <code>d</code> is not rectangular\n     *  (not all rows have the same length) or empty\n     * @throws NullPointerException if <code>d</code> is null\n     * @see #RealMatrixImpl(double[][])\n     */\n    public RealMatrixImpl(double[][] d, boolean copyArray) {\n        if (copyArray) {\n            copyIn(d);\n        } else {\n            if (d == null) {\n                throw new NullPointerException();\n            }   \n            final int nRows = d.length;\n            if (nRows == 0) {\n                throw new IllegalArgumentException("Matrix must have at least one row."); \n            }\n            final int nCols = d[0].length;\n            if (nCols == 0) {\n                throw new IllegalArgumentException("Matrix must have at least one column."); \n            }\n            for (int r = 1; r < nRows; r++) {\n                if (d[r].length != nCols) {\n                    throw new IllegalArgumentException("All input rows must have the same length.");\n                }\n            }       \n            data = d;\n        }\n        lu = null;\n    }\n\n    /**\n     * Create a new (column) RealMatrix using <code>v</code> as the\n     * data for the unique column of the <code>v.length x 1</code> matrix\n     * created.\n     * <p>The input array is copied, not referenced.</p>\n     *\n     * @param v column vector holding data for new matrix\n     */\n    public RealMatrixImpl(double[] v) {\n        final int nRows = v.length;\n        data = new double[nRows][1];\n        for (int row = 0; row < nRows; row++) {\n            data[row][0] = v[row];\n        }\n    }\n\n    /**\n     * Create a new RealMatrix which is a copy of this.\n     *\n     * @return  the cloned matrix\n     */\n    public RealMatrix copy() {\n        return new RealMatrixImpl(copyOut(), false);\n    }\n\n    /**\n     * Compute the sum of this and <code>m</code>.\n     *\n     * @param m    matrix to be added\n     * @return     this + m\n     * @throws  IllegalArgumentException if m is not the same size as this\n     */\n    public RealMatrix add(RealMatrix m) throws IllegalArgumentException {\n        try {\n            return add((RealMatrixImpl) m);\n        } catch (ClassCastException cce) {\n            final int rowCount    = getRowDimension();\n            final int columnCount = getColumnDimension();\n            if (columnCount != m.getColumnDimension() || rowCount != m.getRowDimension()) {\n                throw new IllegalArgumentException("matrix dimension mismatch");\n            }\n            final double[][] outData = new double[rowCount][columnCount];\n            for (int row = 0; row < rowCount; row++) {\n                final double[] dataRow    = data[row];\n                final double[] outDataRow = outData[row];\n                for (int col = 0; col < columnCount; col++) {\n                    outDataRow[col] = dataRow[col] + m.getEntry(row, col);\n                }  \n            }\n            return new RealMatrixImpl(outData, false);\n        }\n    }\n\n    /**\n     * Compute the sum of this and <code>m</code>.\n     *\n     * @param m    matrix to be added\n     * @return     this + m\n     * @throws  IllegalArgumentException if m is not the same size as this\n     */\n    public RealMatrixImpl add(RealMatrixImpl m) throws IllegalArgumentException {\n        final int rowCount    = getRowDimension();\n        final int columnCount = getColumnDimension();\n        if (columnCount != m.getColumnDimension() || rowCount != m.getRowDimension()) {\n            throw new IllegalArgumentException("matrix dimension mismatch");\n        }\n        final double[][] outData = new double[rowCount][columnCount];\n        for (int row = 0; row < rowCount; row++) {\n            final double[] dataRow    = data[row];\n            final double[] mRow       = m.data[row];\n            final double[] outDataRow = outData[row];\n            for (int col = 0; col < columnCount; col++) {\n                outDataRow[col] = dataRow[col] + mRow[col];\n            }  \n        }\n        return new RealMatrixImpl(outData, false);\n    }\n\n    /**\n     * Compute  this minus <code>m</code>.\n     *\n     * @param m    matrix to be subtracted\n     * @return     this + m\n     * @throws  IllegalArgumentException if m is not the same size as this\n     */\n    public RealMatrix subtract(RealMatrix m) throws IllegalArgumentException {\n        try {\n            return subtract((RealMatrixImpl) m);\n        } catch (ClassCastException cce) {\n            final int rowCount    = getRowDimension();\n            final int columnCount = getColumnDimension();\n            if (columnCount != m.getColumnDimension() || rowCount != m.getRowDimension()) {\n                throw new IllegalArgumentException("matrix dimension mismatch");\n            }\n            final double[][] outData = new double[rowCount][columnCount];\n            for (int row = 0; row < rowCount; row++) {\n                final double[] dataRow    = data[row];\n                final double[] outDataRow = outData[row];\n                for (int col = 0; col < columnCount; col++) {\n                    outDataRow[col] = dataRow[col] - m.getEntry(row, col);\n                }  \n            }\n            return new RealMatrixImpl(outData, false);\n        }\n    }\n\n    /**\n     * Compute  this minus <code>m</code>.\n     *\n     * @param m    matrix to be subtracted\n     * @return     this + m\n     * @throws  IllegalArgumentException if m is not the same size as this\n     */\n    public RealMatrixImpl subtract(RealMatrixImpl m) throws IllegalArgumentException {\n        final int rowCount    = getRowDimension();\n        final int columnCount = getColumnDimension();\n        if (columnCount != m.getColumnDimension() || rowCount != m.getRowDimension()) {\n            throw new IllegalArgumentException("matrix dimension mismatch");\n        }\n        final double[][] outData = new double[rowCount][columnCount];\n        for (int row = 0; row < rowCount; row++) {\n            final double[] dataRow    = data[row];\n            final double[] mRow       = m.data[row];\n            final double[] outDataRow = outData[row];\n            for (int col = 0; col < columnCount; col++) {\n                outDataRow[col] = dataRow[col] - mRow[col];\n            }  \n        }\n        return new RealMatrixImpl(outData, false);\n    }\n\n    /**\n     * Returns the result of adding d to each entry of this.\n     *\n     * @param d    value to be added to each entry\n     * @return     d + this\n     */\n    public RealMatrix scalarAdd(double d) {\n        final int rowCount    = getRowDimension();\n        final int columnCount = getColumnDimension();\n        final double[][] outData = new double[rowCount][columnCount];\n        for (int row = 0; row < rowCount; row++) {\n            final double[] dataRow    = data[row];\n            final double[] outDataRow = outData[row];\n            for (int col = 0; col < columnCount; col++) {\n                outDataRow[col] = dataRow[col] + d;\n            }\n        }\n        return new RealMatrixImpl(outData, false);\n    }\n\n    /**\n     * Returns the result of multiplying each entry of this by <code>d</code>\n     * @param d  value to multiply all entries by\n     * @return d * this\n     */\n    public RealMatrix scalarMultiply(double d) {\n        final int rowCount    = getRowDimension();\n        final int columnCount = getColumnDimension();\n        final double[][] outData = new double[rowCount][columnCount];\n        for (int row = 0; row < rowCount; row++) {\n            final double[] dataRow    = data[row];\n            final double[] outDataRow = outData[row];\n            for (int col = 0; col < columnCount; col++) {\n                outDataRow[col] = dataRow[col] * d;\n            }\n        }\n        return new RealMatrixImpl(outData, false);\n    }\n\n    /**\n     * Returns the result of postmultiplying this by <code>m</code>.\n     * @param m    matrix to postmultiply by\n     * @return     this*m\n     * @throws     IllegalArgumentException\n     *             if columnDimension(this) != rowDimension(m)\n     */\n    public RealMatrix multiply(RealMatrix m) throws IllegalArgumentException {\n        try {\n            return multiply((RealMatrixImpl) m);\n        } catch (ClassCastException cce) {\n            if (this.getColumnDimension() != m.getRowDimension()) {\n                throw new IllegalArgumentException("Matrices are not multiplication compatible.");\n            }\n            final int nRows = this.getRowDimension();\n            final int nCols = m.getColumnDimension();\n            final int nSum = this.getColumnDimension();\n            final double[][] outData = new double[nRows][nCols];\n            for (int row = 0; row < nRows; row++) {\n                final double[] dataRow    = data[row];\n                final double[] outDataRow = outData[row];\n                for (int col = 0; col < nCols; col++) {\n                    double sum = 0;\n                    for (int i = 0; i < nSum; i++) {\n                        sum += dataRow[i] * m.getEntry(i, col);\n                    }\n                    outDataRow[col] = sum;\n                }\n            }\n            return new RealMatrixImpl(outData, false);\n        }\n    }\n\n    /**\n     * Returns the result of postmultiplying this by <code>m</code>.\n     * @param m    matrix to postmultiply by\n     * @return     this*m\n     * @throws     IllegalArgumentException\n     *             if columnDimension(this) != rowDimension(m)\n     */\n    public RealMatrixImpl multiply(RealMatrixImpl m) throws IllegalArgumentException {\n        if (this.getColumnDimension() != m.getRowDimension()) {\n            throw new IllegalArgumentException("Matrices are not multiplication compatible.");\n        }\n        final int nRows = this.getRowDimension();\n        final int nCols = m.getColumnDimension();\n        final int nSum = this.getColumnDimension();\n        final double[][] outData = new double[nRows][nCols];\n        for (int row = 0; row < nRows; row++) {\n            final double[] dataRow    = data[row];\n            final double[] outDataRow = outData[row];\n            for (int col = 0; col < nCols; col++) {\n                double sum = 0;\n                for (int i = 0; i < nSum; i++) {\n                    sum += dataRow[i] * m.data[i][col];\n                }\n                outDataRow[col] = sum;\n            }\n        }            \n        return new RealMatrixImpl(outData, false);\n    }\n\n    /**\n     * Returns the result of premultiplying this by <code>m</code>.\n     * @param m    matrix to premultiply by\n     * @return     m * this\n     * @throws     IllegalArgumentException\n     *             if rowDimension(this) != columnDimension(m)\n     */\n    public RealMatrix preMultiply(RealMatrix m) throws IllegalArgumentException {\n        return m.multiply(this);\n    }\n\n    /**\n     * Returns matrix entries as a two-dimensional array.\n     * <p>\n     * Makes a fresh copy of the underlying data.</p>\n     *\n     * @return    2-dimensional array of entries\n     */\n    public double[][] getData() {\n        return copyOut();\n    }\n\n    /**\n     * Returns a reference to the underlying data array.\n     * <p>\n     * Does not make a fresh copy of the underlying data.</p>\n     *\n     * @return 2-dimensional array of entries\n     */\n    public double[][] getDataRef() {\n        return data;\n    }\n\n    /**\n     *\n     * @return norm\n     */\n    public double getNorm() {\n        double maxColSum = 0;\n        for (int col = 0; col < this.getColumnDimension(); col++) {\n            double sum = 0;\n            for (int row = 0; row < this.getRowDimension(); row++) {\n                sum += Math.abs(data[row][col]);\n            }\n            maxColSum = Math.max(maxColSum, sum);\n        }\n        return maxColSum;\n    }\n    \n    /**\n     * Gets a submatrix. Rows and columns are indicated\n     * counting from 0 to n-1.\n     *\n     * @param startRow Initial row index\n     * @param endRow Final row index\n     * @param startColumn Initial column index\n     * @param endColumn Final column index\n     * @return The subMatrix containing the data of the\n     *         specified rows and columns\n     * @exception MatrixIndexException if row or column selections are not valid\n     */\n    public RealMatrix getSubMatrix(int startRow, int endRow,\n                                   int startColumn, int endColumn)\n        throws MatrixIndexException {\n        if (startRow < 0 || startRow > endRow || endRow > data.length ||\n             startColumn < 0 || startColumn > endColumn ||\n             endColumn > data[0].length) {\n            throw new MatrixIndexException(\n                    "invalid row or column index selection");\n        }\n        final double[][] subMatrixData =\n            new double[endRow - startRow + 1][endColumn - startColumn + 1];\n        for (int i = startRow; i <= endRow; i++) {\n            System.arraycopy(data[i], startColumn,\n                             subMatrixData[i - startRow], 0,\n                             endColumn - startColumn + 1);\n        }\n        return new RealMatrixImpl(subMatrixData, false);\n    }\n    \n    /**\n     * Gets a submatrix. Rows and columns are indicated\n     * counting from 0 to n-1.\n     *\n     * @param selectedRows Array of row indices must be non-empty\n     * @param selectedColumns Array of column indices must be non-empty\n     * @return The subMatrix containing the data in the\n     *     specified rows and columns\n     * @exception MatrixIndexException  if supplied row or column index arrays\n     *     are not valid\n     */\n    public RealMatrix getSubMatrix(int[] selectedRows, int[] selectedColumns)\n        throws MatrixIndexException {\n        if (selectedRows.length * selectedColumns.length == 0) {\n            throw new MatrixIndexException(\n                    "selected row and column index arrays must be non-empty");\n        }\n        final double[][] subMatrixData =\n            new double[selectedRows.length][selectedColumns.length];\n        try  {\n            for (int i = 0; i < selectedRows.length; i++) {\n                final double[] subI = subMatrixData[i];\n                final double[] dataSelectedI = data[selectedRows[i]];\n                for (int j = 0; j < selectedColumns.length; j++) {\n                    subI[j] = dataSelectedI[selectedColumns[j]];\n                }\n            }\n        } catch (ArrayIndexOutOfBoundsException e) {\n            throw new MatrixIndexException("matrix dimension mismatch");\n        }\n        return new RealMatrixImpl(subMatrixData, false);\n    } \n\n    /**\n     * Replace the submatrix starting at <code>row, column</code> using data in\n     * the input <code>subMatrix</code> array. Indexes are 0-based.\n     * <p> \n     * Example:<br>\n     * Starting with <pre>\n     * 1  2  3  4\n     * 5  6  7  8\n     * 9  0  1  2\n     * </pre>\n     * and <code>subMatrix = {{3, 4} {5,6}}</code>, invoking \n     * <code>setSubMatrix(subMatrix,1,1))</code> will result in <pre>\n     * 1  2  3  4\n     * 5  3  4  8\n     * 9  5  6  2\n     * </pre></p>\n     * \n     * @param subMatrix  array containing the submatrix replacement data\n     * @param row  row coordinate of the top, left element to be replaced\n     * @param column  column coordinate of the top, left element to be replaced\n     * @throws MatrixIndexException  if subMatrix does not fit into this \n     *    matrix from element in (row, column) \n     * @throws IllegalArgumentException if <code>subMatrix</code> is not rectangular\n     *  (not all rows have the same length) or empty\n     * @throws NullPointerException if <code>subMatrix</code> is null\n     * @since 1.1\n     */\n    public void setSubMatrix(double[][] subMatrix, int row, int column) \n        throws MatrixIndexException {\n        if ((row < 0) || (column < 0)){\n            throw new MatrixIndexException\n                ("invalid row or column index selection");          \n        }\n        final int nRows = subMatrix.length;\n        if (nRows == 0) {\n            throw new IllegalArgumentException(\n            "Matrix must have at least one row."); \n        }\n        final int nCols = subMatrix[0].length;\n        if (nCols == 0) {\n            throw new IllegalArgumentException(\n            "Matrix must have at least one column."); \n        }\n        for (int r = 1; r < nRows; r++) {\n            if (subMatrix[r].length != nCols) {\n                throw new IllegalArgumentException(\n                "All input rows must have the same length.");\n            }\n        }       \n        if (data == null) {\n            if ((row > 0)||(column > 0)) throw new MatrixIndexException\n                ("matrix must be initialized to perfom this method");\n            data = new double[nRows][nCols];\n            System.arraycopy(subMatrix, 0, data, 0, subMatrix.length);          \n        }   \n        if (((nRows + row) > this.getRowDimension()) ||\n            (nCols + column > this.getColumnDimension()))\n            throw new MatrixIndexException(\n                    "invalid row or column index selection");                   \n        for (int i = 0; i < nRows; i++) {\n            System.arraycopy(subMatrix[i], 0, data[row + i], column, nCols);\n        } \n        lu = null;\n    }\n    \n    /**\n     * Returns the entries in row number <code>row</code> as a row matrix.\n     * Row indices start at 0.\n     * \n     * @param row  the row to be fetched\n     * @return row matrix\n     * @throws MatrixIndexException if the specified row index is invalid\n     */\n    public RealMatrix getRowMatrix(int row) throws MatrixIndexException {\n        if ( !isValidCoordinate( row, 0)) {\n            throw new MatrixIndexException("illegal row argument");\n        }\n        final int ncols = this.getColumnDimension();\n        final double[][] out = new double[1][ncols]; \n        System.arraycopy(data[row], 0, out[0], 0, ncols);\n        return new RealMatrixImpl(out, false);\n    }\n    \n    /**\n     * Returns the entries in column number <code>column</code>\n     * as a column matrix.  Column indices start at 0.\n     *\n     * @param column the column to be fetched\n     * @return column matrix\n     * @throws MatrixIndexException if the specified column index is invalid\n     */\n    public RealMatrix getColumnMatrix(int column) throws MatrixIndexException {\n        if ( !isValidCoordinate( 0, column)) {\n            throw new MatrixIndexException("illegal column argument");\n        }\n        final int nRows = this.getRowDimension();\n        final double[][] out = new double[nRows][1]; \n        for (int row = 0; row < nRows; row++) {\n            out[row][0] = data[row][column];\n        }\n        return new RealMatrixImpl(out, false);\n    }\n\n     /**\n     * Returns the entries in row number <code>row</code> as an array.\n     * <p>\n     * Row indices start at 0.  A <code>MatrixIndexException</code> is thrown\n     * unless <code>0 <= row < rowDimension.</code></p>\n     *\n     * @param row the row to be fetched\n     * @return array of entries in the row\n     * @throws MatrixIndexException if the specified row index is not valid\n     */\n    public double[] getRow(int row) throws MatrixIndexException {\n        if ( !isValidCoordinate( row, 0 ) ) {\n            throw new MatrixIndexException("illegal row argument");\n        }\n        final int ncols = this.getColumnDimension();\n        final double[] out = new double[ncols];\n        System.arraycopy(data[row], 0, out, 0, ncols);\n        return out;\n    }\n\n    /**\n     * Returns the entries in column number <code>col</code> as an array.\n     * <p>\n     * Column indices start at 0.  A <code>MatrixIndexException</code> is thrown\n     * unless <code>0 <= column < columnDimension.</code></p>\n     *\n     * @param col the column to be fetched\n     * @return array of entries in the column\n     * @throws MatrixIndexException if the specified column index is not valid\n     */\n    public double[] getColumn(int col) throws MatrixIndexException {\n        if ( !isValidCoordinate(0, col) ) {\n            throw new MatrixIndexException("illegal column argument");\n        }\n        final int nRows = this.getRowDimension();\n        final double[] out = new double[nRows];\n        for (int row = 0; row < nRows; row++) {\n            out[row] = data[row][col];\n        }\n        return out;\n    }\n\n    /**\n     * Returns the entry in the specified row and column.\n     * <p>\n     * Row and column indices start at 0 and must satisfy \n     * <ul>\n     * <li><code>0 <= row < rowDimension</code></li>\n     * <li><code> 0 <= column < columnDimension</code></li>\n     * </ul>\n     * otherwise a <code>MatrixIndexException</code> is thrown.</p>\n     * \n     * @param row  row location of entry to be fetched\n     * @param column  column location of entry to be fetched\n     * @return matrix entry in row,column\n     * @throws MatrixIndexException if the row or column index is not valid\n     */\n    public double getEntry(int row, int column)\n        throws MatrixIndexException {\n        try {\n            return data[row][column];\n        } catch (ArrayIndexOutOfBoundsException e) {\n            throw new MatrixIndexException("matrix entry does not exist");\n        }\n    }\n\n    /**\n     * Returns the transpose matrix.\n     *\n     * @return transpose matrix\n     */\n    public RealMatrix transpose() {\n        final int nRows = getRowDimension();\n        final int nCols = getColumnDimension();\n        final double[][] outData = new double[nCols][nRows];\n        for (int row = 0; row < nRows; row++) {\n            final double[] dataRow = data[row];\n            for (int col = 0; col < nCols; col++) {\n                outData[col][row] = dataRow[col];\n            }\n        }\n        return new RealMatrixImpl(outData, false);\n    }\n\n    /**\n     * Returns the inverse matrix if this matrix is invertible.\n     *\n     * @return inverse matrix\n     * @throws InvalidMatrixException if this is not invertible\n     */\n    public RealMatrix inverse() throws InvalidMatrixException {\n        return solve(MatrixUtils.createRealIdentityMatrix(getRowDimension()));\n    }\n\n    /**\n     * @return determinant\n     * @throws InvalidMatrixException if matrix is not square\n     */\n    public double getDeterminant() throws InvalidMatrixException {\n        if (!isSquare()) {\n            throw new InvalidMatrixException("matrix is not square");\n        }\n        if (isSingular()) {   // note: this has side effect of attempting LU decomp if lu == null\n            return 0d;\n        } else {\n            double det = parity;\n            for (int i = 0; i < this.getRowDimension(); i++) {\n                det *= lu[i][i];\n            }\n            return det;\n        }\n    }\n\n    /**\n     * @return true if the matrix is square (rowDimension = columnDimension)\n     */\n    public boolean isSquare() {\n        return (this.getColumnDimension() == this.getRowDimension());\n    }\n\n    /**\n     * @return true if the matrix is singular\n     */\n    public boolean isSingular() {\n        if (lu == null) {\n            try {\n                luDecompose();\n                return false;\n            } catch (InvalidMatrixException ex) {\n                return true;\n            }\n        } else { // LU decomp must have been successfully performed\n            return false; // so the matrix is not singular\n        }\n    }\n\n    /**\n     * @return rowDimension\n     */\n    public int getRowDimension() {\n        return data.length;\n    }\n\n    /**\n     * @return columnDimension\n     */\n    public int getColumnDimension() {\n        return data[0].length;\n    }\n\n    /**\n     * @return trace\n     * @throws IllegalArgumentException if the matrix is not square\n     */\n    public double getTrace() throws IllegalArgumentException {\n        if (!isSquare()) {\n            throw new IllegalArgumentException("matrix is not square");\n        }\n        double trace = data[0][0];\n        for (int i = 1; i < this.getRowDimension(); i++) {\n            trace += data[i][i];\n        }\n        return trace;\n    }\n\n    /**\n     * @param v vector to operate on\n     * @throws IllegalArgumentException if columnDimension != v.length\n     * @return resulting vector\n     */\n    public double[] operate(double[] v) throws IllegalArgumentException {\n        final int nRows = this.getRowDimension();\n        final int nCols = this.getColumnDimension();\n        if (v.length != nCols) {\n            throw new IllegalArgumentException("vector has wrong length");\n        }', 'aftercode': '        for (int row = 0; row < nRows; row++) {\n            final double[] dataRow = data[row];\n            double sum = 0;\n            for (int i = 0; i < nCols; i++) {\n                sum += dataRow[i] * v[i];\n            }\n            out[row] = sum;\n        }\n        return out;\n    }\n\n    /**\n     * @param v vector to premultiply by\n     * @throws IllegalArgumentException if rowDimension != v.length\n     * @return resulting matrix\n     */\n    public double[] preMultiply(double[] v) throws IllegalArgumentException {\n        final int nRows = this.getRowDimension();\n        if (v.length != nRows) {\n            throw new IllegalArgumentException("vector has wrong length");\n        }\n        final int nCols = this.getColumnDimension();\n        final double[] out = new double[nCols];\n        for (int col = 0; col < nCols; col++) {\n            double sum = 0;\n            for (int i = 0; i < nRows; i++) {\n                sum += data[i][col] * v[i];\n            }\n            out[col] = sum;\n        }\n        return out;\n    }\n\n    /**\n     * Returns a matrix of (column) solution vectors for linear systems with\n     * coefficient matrix = this and constant vectors = columns of\n     * <code>b</code>.\n     *\n     * @param b  array of constant forming RHS of linear systems to\n     * to solve\n     * @return solution array\n     * @throws IllegalArgumentException if this.rowDimension != row dimension\n     * @throws InvalidMatrixException if this matrix is not square or is singular\n     */\n    public double[] solve(double[] b) throws IllegalArgumentException, InvalidMatrixException {\n        final int nRows = this.getRowDimension();\n        if (b.length != nRows) {\n            throw new IllegalArgumentException("constant vector has wrong length");\n        }\n        final RealMatrix bMatrix = new RealMatrixImpl(b);\n        final double[][] solution = ((RealMatrixImpl) (solve(bMatrix))).getDataRef();\n        final double[] out = new double[nRows];\n        for (int row = 0; row < nRows; row++) {\n            out[row] = solution[row][0];\n        }\n        return out;\n    }\n\n    /**\n     * Returns a matrix of (column) solution vectors for linear systems with\n     * coefficient matrix = this and constant vectors = columns of\n     * <code>b</code>.\n     *\n     * @param b  matrix of constant vectors forming RHS of linear systems to\n     * to solve\n     * @return matrix of solution vectors\n     * @throws IllegalArgumentException if this.rowDimension != row dimension\n     * @throws InvalidMatrixException if this matrix is not square or is singular\n     */\n    public RealMatrix solve(RealMatrix b) throws IllegalArgumentException, InvalidMatrixException  {\n        if (b.getRowDimension() != this.getRowDimension()) {\n            throw new IllegalArgumentException("Incorrect row dimension");\n        }\n        if (!this.isSquare()) {\n            throw new InvalidMatrixException("coefficient matrix is not square");\n        }\n        if (this.isSingular()) { // side effect: compute LU decomp\n            throw new InvalidMatrixException("Matrix is singular.");\n        }\n\n        final int nCol  = this.getColumnDimension();\n        final int nColB = b.getColumnDimension();\n        final int nRowB = b.getRowDimension();\n\n        // Apply permutations to b\n        final double[][] bp = new double[nRowB][nColB];\n        for (int row = 0; row < nRowB; row++) {\n            final double[] bpRow = bp[row];\n            for (int col = 0; col < nColB; col++) {\n                bpRow[col] = b.getEntry(permutation[row], col);\n            }\n        }\n\n        // Solve LY = b\n        for (int col = 0; col < nCol; col++) {\n            for (int i = col + 1; i < nCol; i++) {\n                final double[] bpI = bp[i];\n                final double[] luI = lu[i];\n                for (int j = 0; j < nColB; j++) {\n                    bpI[j] -= bp[col][j] * luI[col];\n                }\n            }\n        }\n\n        // Solve UX = Y\n        for (int col = nCol - 1; col >= 0; col--) {\n            final double[] bpCol = bp[col];\n            final double luDiag = lu[col][col];\n            for (int j = 0; j < nColB; j++) {\n                bpCol[j] /= luDiag;\n            }\n            for (int i = 0; i < col; i++) {\n                final double[] bpI = bp[i];\n                final double[] luI = lu[i];\n                for (int j = 0; j < nColB; j++) {\n                    bpI[j] -= bp[col][j] * luI[col];\n                }\n            }\n        }\n\n        return new RealMatrixImpl(bp, false);\n\n    }\n\n    /**\n     * Computes a new\n     * <a href="http://www.math.gatech.edu/~bourbaki/math2601/Web-notes/2num.pdf">\n     * LU decomposition</a> for this matrix, storing the result for use by other methods.\n     * <p>\n     * <strong>Implementation Note</strong>:<br>\n     * Uses <a href="http://www.damtp.cam.ac.uk/user/fdl/people/sd/lectures/nummeth98/linear.htm">\n     * Crout\'s algorithm</a>, with partial pivoting.</p>\n     * <p>\n     * <strong>Usage Note</strong>:<br>\n     * This method should rarely be invoked directly. Its only use is\n     * to force recomputation of the LU decomposition when changes have been\n     * made to the underlying data using direct array references. Changes\n     * made using setXxx methods will trigger recomputation when needed\n     * automatically.</p>\n     *\n     * @throws InvalidMatrixException if the matrix is non-square or singular.\n     */\n    public void luDecompose() throws InvalidMatrixException {\n\n        final int nRows = this.getRowDimension();\n        final int nCols = this.getColumnDimension();\n        if (nRows != nCols) {\n            throw new InvalidMatrixException("LU decomposition requires that the matrix be square.");\n        }\n        lu = getData();\n\n        // Initialize permutation array and parity\n        permutation = new int[nRows];\n        for (int row = 0; row < nRows; row++) {\n            permutation[row] = row;\n        }\n        parity = 1;\n\n        // Loop over columns\n        for (int col = 0; col < nCols; col++) {\n\n            double sum = 0;\n\n            // upper\n            for (int row = 0; row < col; row++) {\n                final double[] luRow = lu[row];\n                sum = luRow[col];\n                for (int i = 0; i < row; i++) {\n                    sum -= luRow[i] * lu[i][col];\n                }\n                luRow[col] = sum;\n            }\n\n            // lower\n            int max = col; // permutation row\n            double largest = 0d;\n            for (int row = col; row < nRows; row++) {\n                final double[] luRow = lu[row];\n                sum = luRow[col];\n                for (int i = 0; i < col; i++) {\n                    sum -= luRow[i] * lu[i][col];\n                }\n                luRow[col] = sum;\n\n                // maintain best permutation choice\n                if (Math.abs(sum) > largest) {\n                    largest = Math.abs(sum);\n                    max = row;\n                }\n            }\n\n            // Singularity check\n            if (Math.abs(lu[max][col]) < TOO_SMALL) {\n                lu = null;\n                throw new InvalidMatrixException("matrix is singular");\n            }\n\n            // Pivot if necessary\n            if (max != col) {\n                double tmp = 0;\n                for (int i = 0; i < nCols; i++) {\n                    tmp = lu[max][i];\n                    lu[max][i] = lu[col][i];\n                    lu[col][i] = tmp;\n                }\n                int temp = permutation[max];\n                permutation[max] = permutation[col];\n                permutation[col] = temp;\n                parity = -parity;\n            }\n\n            // Divide the lower elements by the "winning" diagonal elt.\n            final double luDiag = lu[col][col];\n            for (int row = col + 1; row < nRows; row++) {\n                lu[row][col] /= luDiag;\n            }\n        }\n    }\n\n    /**\n     * Get a string representation for this matrix.\n     * @return a string representation for this matrix\n     */\n    public String toString() {\n        StringBuffer res = new StringBuffer();\n        res.append("RealMatrixImpl{");\n        if (data != null) {\n            for (int i = 0; i < data.length; i++) {\n                if (i > 0) {\n                    res.append(",");\n                }\n                res.append("{");\n                for (int j = 0; j < data[0].length; j++) {\n                    if (j > 0) {\n                        res.append(",");\n                    }\n                    res.append(data[i][j]);\n                } \n                res.append("}");\n            } \n        }\n        res.append("}");\n        return res.toString();\n    } \n    \n    /**\n     * Returns true iff <code>object</code> is a \n     * <code>RealMatrixImpl</code> instance with the same dimensions as this\n     * and all corresponding matrix entries are equal.  Corresponding entries\n     * are compared using {@link java.lang.Double#doubleToLongBits(double)}\n     * \n     * @param object the object to test equality against.\n     * @return true if object equals this\n     */\n    public boolean equals(Object object) {\n        if (object == this ) {\n            return true;\n        }\n        if (object instanceof RealMatrixImpl == false) {\n            return false;\n        }\n        RealMatrix m = (RealMatrix) object;\n        final int nRows = getRowDimension();\n        final int nCols = getColumnDimension();\n        if (m.getColumnDimension() != nCols || m.getRowDimension() != nRows) {\n            return false;\n        }\n        for (int row = 0; row < nRows; row++) {\n            final double[] dataRow = data[row];\n            for (int col = 0; col < nCols; col++) {\n                if (Double.doubleToLongBits(dataRow[col]) != \n                    Double.doubleToLongBits(m.getEntry(row, col))) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    \n    /**\n     * Computes a hashcode for the matrix.\n     * \n     * @return hashcode for matrix\n     */\n    public int hashCode() {\n        int ret = 7;\n        final int nRows = getRowDimension();\n        final int nCols = getColumnDimension();\n        ret = ret * 31 + nRows;\n        ret = ret * 31 + nCols;\n        for (int row = 0; row < nRows; row++) {\n            final double[] dataRow = data[row];\n            for (int col = 0; col < nCols; col++) {\n               ret = ret * 31 + (11 * (row+1) + 17 * (col+1)) * \n                   MathUtils.hash(dataRow[col]);\n           }\n        }\n        return ret;\n    }\n\n    //------------------------ Protected methods\n\n    /**\n     *  Returns the LU decomposition as a RealMatrix.\n     *  Returns a fresh copy of the cached LU matrix if this has been computed;\n     *  otherwise the composition is computed and cached for use by other methods.\n     *  Since a copy is returned in either case, changes to the returned matrix do not\n     *  affect the LU decomposition property.\n     * <p>\n     * The matrix returned is a compact representation of the LU decomposition.\n     * Elements below the main diagonal correspond to entries of the "L" matrix;\n     * elements on and above the main diagonal correspond to entries of the "U"\n     * matrix.</p>\n     * <p>\n     * Example: <pre>\n     *\n     *     Returned matrix                L                  U\n     *         2  3  1                   1  0  0            2  3  1\n     *         5  4  6                   5  1  0            0  4  6\n     *         1  7  8                   1  7  1            0  0  8\n     * </pre>\n     *\n     * The L and U matrices satisfy the matrix equation LU = permuteRows(this), <br>\n     *  where permuteRows reorders the rows of the matrix to follow the order determined\n     *  by the <a href=#getPermutation()>permutation</a> property.</p>\n     *\n     * @return LU decomposition matrix\n     * @throws InvalidMatrixException if the matrix is non-square or singular.\n     */\n    protected RealMatrix getLUMatrix() throws InvalidMatrixException {\n        if (lu == null) {\n            luDecompose();\n        }\n        return new RealMatrixImpl(lu);\n    }\n\n    /**\n     * Returns the permutation associated with the lu decomposition.\n     * The entries of the array represent a permutation of the numbers 0, ... , nRows - 1.\n     * <p>\n     * Example:\n     * permutation = [1, 2, 0] means current 2nd row is first, current third row is second\n     * and current first row is last.</p>\n     * <p>\n     * Returns a fresh copy of the array.</p>\n     *\n     * @return the permutation\n     */\n    protected int[] getPermutation() {\n        final int[] out = new int[permutation.length];\n        System.arraycopy(permutation, 0, out, 0, permutation.length);\n        return out;\n    }\n\n    //------------------------ Private methods\n\n    /**\n     * Returns a fresh copy of the underlying data array.\n     *\n     * @return a copy of the underlying data array.\n     */\n    private double[][] copyOut() {\n        final int nRows = this.getRowDimension();\n        final double[][] out = new double[nRows][this.getColumnDimension()];\n        // can\'t copy 2-d array in one shot, otherwise get row references\n        for (int i = 0; i < nRows; i++) {\n            System.arraycopy(data[i], 0, out[i], 0, data[i].length);\n        }\n        return out;\n    }\n\n    /**\n     * Replaces data with a fresh copy of the input array.\n     * <p>\n     * Verifies that the input array is rectangular and non-empty.</p>\n     *\n     * @param in data to copy in\n     * @throws IllegalArgumentException if input array is empty or not\n     *    rectangular\n     * @throws NullPointerException if input array is null\n     */\n    private void copyIn(double[][] in) {\n        setSubMatrix(in,0,0);\n    }\n\n    /**\n     * Tests a given coordinate as being valid or invalid\n     *\n     * @param row the row index.\n     * @param col the column index.\n     * @return true if the coordinate is with the current dimensions\n     */\n    private boolean isValidCoordinate(int row, int col) {\n        final int nRows = getRowDimension();\n        final int nCols = getColumnDimension();\n        return !(row < 0 || row > nRows - 1 || col < 0 || col > nCols -1);\n    }\n\n}', 'tree': 'MethodDeclaration modifiers public_ter ^ ^ return_type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ name meth0 ^ ^ parameters FormalParameter type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ name par0 ^ ^ ^ ^ throws IllegalArgumentException_ter ^ ^ body LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer This selectors MethodInvocation member getRowDimension_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc1 ^ ^ initializer This selectors MethodInvocation member getColumnDimension_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ operandr MemberReference member loc1 ^ ^ ^ ^ ^ ^ then_statement BlockStatement statements ThrowStatement expression ClassCreator type ReferenceType name IllegalArgumentException_ter ^ ^ ^ ^ arguments Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ForStatement control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc3 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc3 ^ ^ ^ ^ operandr MemberReference member loc0 ^ ^ ^ ^ ^ ^ update MemberReference postfix_operators ++_ter ^ ^ member loc3 ^ ^ ^ ^ ^ ^ body BlockStatement statements LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc4 ^ ^ initializer MemberReference selectors ArraySelector index MemberReference member loc3 ^ ^ ^ ^ ^ ^ member data_ter ^ ^ ^ ^ ^ ^ ^ LocalVariableDeclaration type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name loc5 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ForStatement control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr MemberReference member loc1 ^ ^ ^ ^ ^ ^ update MemberReference postfix_operators ++_ter ^ ^ member loc6 ^ ^ ^ ^ ^ ^ body BlockStatement statements StatementExpression expression Assignment expressionl MemberReference member loc5 ^ ^ ^ ^ value BinaryOperation operator *_ter ^ ^ operandl MemberReference selectors ArraySelector index MemberReference member loc6 ^ ^ ^ ^ ^ ^ member loc4 ^ ^ ^ ^ operandr MemberReference selectors ArraySelector index MemberReference member loc6 ^ ^ ^ ^ ^ ^ member par0 ^ ^ ^ ^ ^ ^ type +=_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference selectors ArraySelector index MemberReference member loc3 ^ ^ ^ ^ ^ ^ member loc2 ^ ^ ^ ^ value MemberReference member loc5 ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ReturnStatement expression MemberReference member loc2 ^ ^ ^ ^ ^ ^ ^ ', 'prob': [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], 'mode': 0, 'line': 779, 'isa': False, 'fl_score': 1}]
before@0 batch0 x: 0: root ^  ; []
after@0 batch0 x: 0: root ^  ; []
before@0 batch1 x: 0: root ^  ; []
after@0 batch1 x: 0: root ^  ; []
copynode 0:  root modified ^ ^ ; ['root -> modified']
copynode 0:  root add ^ ^ ; ['root -> add']
copynode 0:  root ReturnStatement ^ ^ ; ['root -> ReturnStatement']
copynode 0:  root ^ ; ['root -> End']
copynode 0:  root return_type ^ ^ ; ['root -> return_type']
copynode 0:  root MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  ^ ^ ; ['copy-MemberReference']
copynode 0:  root StatementExpression ^ ^ ; ['root -> StatementExpression']
copynode 0:  root IfStatement ^ ^ ; ['root -> IfStatement']
copynode 0:  root parameters ^ ^ ; ['root -> parameters']
copynode 0:  root LocalVariableDeclaration ^ ^ ; ['root -> LocalVariableDeclaration']
copynode 0:  root modified ^ ^ ; ['root -> modified']
copynode 0:  root add ^ ^ ; ['root -> add']
copynode 0:  root ^ ; ['root -> End']
copynode 0:  root ReturnStatement ^ ^ ; ['root -> ReturnStatement']
copynode 0:  root return_type ^ ^ ; ['root -> return_type']
copynode 0:  root MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  ^ ^ ; ['copy-MemberReference']
copynode 0:  root StatementExpression ^ ^ ; ['root -> StatementExpression']
copynode 0:  root IfStatement ^ ^ ; ['root -> IfStatement']
copynode 0:  root parameters ^ ^ ; ['root -> parameters']
copynode 0:  root BasicType-BasicType name double_ter ^ ^ ^  ^ ^ ; ['copy-BasicType']
before@1 batch0 x: -14.184459686279297: root LocalVariableDeclaration ^ ^  ; ['root -> LocalVariableDeclaration']
after@1 batch0 x: -14.184459686279297: root LocalVariableDeclaration ^ ^  ; ['root -> LocalVariableDeclaration']
before@1 batch1 x: -12.20612621307373: root BasicType-BasicType name double_ter ^ ^ ^  ^ ^  ; ['copy-BasicType']
after@1 batch1 x: -12.20612621307373: root BasicType-BasicType name double_ter ^ ^ ^  ^ ^  ; ['copy-BasicType']
copynode -0.33867982029914856:  root modified ^ LocalVariableDeclaration ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration']
copynode -1.2479397058486938:  root add ^ IfStatement ^ ^ ; ['root -> add', 'root -> IfStatement']
copynode -0.33867982029914856:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  ^ ^ ; ['root -> modified', 'copy-MemberReference']
copynode -1.2479397058486938:  root add ^ StatementExpression ^ ^ ; ['root -> add', 'root -> StatementExpression']
copynode -0.33867982029914856:  root modified ^ StatementExpression ^ ^ ; ['root -> modified', 'root -> StatementExpression']
copynode -1.2479397058486938:  root add ^ ReturnStatement ^ ^ ; ['root -> add', 'root -> ReturnStatement']
copynode -1.2479397058486938:  root add ^ LocalVariableDeclaration ^ ^ ; ['root -> add', 'root -> LocalVariableDeclaration']
copynode -1.2479397058486938:  root add ^ ReturnStatement_ter ^ ^ ; ['root -> add', 'root -> ReturnStatement_ter']
copynode -1.2479397058486938:  root add ^ control ^ ^ ; ['root -> add', 'root -> control']
copynode -1.2479397058486938:  root add ^ AssertStatement ^ ^ ; ['root -> add', 'root -> AssertStatement']
copynode -0.33867982029914856:  root modified ^ ^ ; ['root -> modified', 'root -> End']
copynode -0.33867982029914856:  root modified ^ control ^ ^ ; ['root -> modified', 'root -> control']
copynode -1.2479397058486938:  root add ^ WhileStatement ^ ^ ; ['root -> add', 'root -> WhileStatement']
copynode -0.33867982029914856:  root modified ^ parameters ^ ^ ; ['root -> modified', 'root -> parameters']
copynode -1.2479397058486938:  root add ^ BreakStatement_ter ^ ^ ; ['root -> add', 'root -> BreakStatement_ter']
copynode -1.2479397058486938:  root add ^ parameters ^ ^ ; ['root -> add', 'root -> parameters']
copynode -0.33867982029914856:  root modified ^ IfStatement ^ ^ ; ['root -> modified', 'root -> IfStatement']
copynode -0.33867982029914856:  root modified ^ ReturnStatement ^ ^ ; ['root -> modified', 'root -> ReturnStatement']
copynode -9.79606819152832:  root ReturnStatement expression ^ ^ ^ ; ['root -> ReturnStatement', 'ReturnStatement -> expression']
copynode -10.603342056274414:  root return_type ReferenceType ^ ^ ^ ; ['root -> return_type', 'return_type -> ReferenceType']
copynode -0.33867982029914856:  root modified ^ TernaryExpression ^ ^ ; ['root -> modified', 'root -> TernaryExpression']
copynode -0.33867982029914856:  root modified ^ ReturnStatement_ter ^ ^ ; ['root -> modified', 'root -> ReturnStatement_ter']
copynode -11.69059944152832:  root StatementExpression expression ^ ^ ^ ; ['root -> StatementExpression', 'StatementExpression -> expression']
copynode -11.633390426635742:  root MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> member']
copynode -11.980195999145508:  root IfStatement condition ^ ^ ^ ; ['root -> IfStatement', 'IfStatement -> condition']
copynode -10.603342056274414:  root return_type BasicType ^ ^ ^ ; ['root -> return_type', 'return_type -> BasicType']
copynode -12.543996810913086:  root parameters FormalParameter ^ ^ ^ ; ['root -> parameters', 'parameters -> FormalParameter']
copynode -11.633390426635742:  root MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  qualifier ^ member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> qualifier member']
copynode -9.79606819152832:  root ReturnStatement expression MemberReference member loc2 ^ ^ ^ ^ ^ ^ ; ['root -> ReturnStatement', 'copy-ReturnStatement']
copynode -14.184459686279297:  root LocalVariableDeclaration modifiers ^ type ^ declarators ^ ^ ^ ; ['root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators']
copynode -14.184459686279297:  root LocalVariableDeclaration type ^ declarators ^ ^ ^ ; ['root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators']
copynode -14.184459686279297:  root LocalVariableDeclaration annotations ^ type ^ declarators ^ ^ ^ ; ['root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> annotations type declarators']
copynode -11.633390426635742:  root MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  prefix_operators ^ member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> prefix_operators member']
copynode -11.69059944152832:  root StatementExpression expression Assignment expressionl MemberReference member loc4 ^ ^ ^ ^ value MethodInvocation qualifier loc4 ^ ^ arguments MemberReference selectors ArraySelector index MemberReference member loc3 ^ ^ ^ ^ ^ ArraySelector index MemberReference member loc5 ^ ^ ^ ^ ^ MethodInvocation arguments MemberReference selectors ArraySelector index MemberReference member loc5 ^ ^ ^ ^ ^ ^ member par0 ^ ^ ^ ^ member multiply_ter ^ ^ ^ ^ member data_ter ^ ^ ^ ^ member add_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ; ['root -> StatementExpression', 'copy-StatementExpression']
copynode -11.633390426635742:  root MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  selectors ^ member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> selectors member']
copynode -12.543996810913086:  root parameters ^ ^ ; ['root -> parameters', 'parameters -> End']
copynode -11.69059944152832:  root StatementExpression expression Assignment expressionl MemberReference selectors ArraySelector index MemberReference member loc3 ^ ^ ^ ^ ^ ^ member loc2 ^ ^ ^ ^ value MemberReference member loc4 ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ; ['root -> StatementExpression', 'copy-StatementExpression']
copynode -10.603342056274414:  root return_type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ ^ ; ['root -> return_type', 'copy-return_type']
copynode -12.543996810913086:  root parameters InferredFormalParameter ^ ^ ^ ; ['root -> parameters', 'parameters -> InferredFormalParameter']
copynode -11.633390426635742:  root MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  postfix_operators ^ member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> postfix_operators member']
copynode -11.633390426635742:  root MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  prefix_operators ^ qualifier ^ member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> prefix_operators qualifier member']
copynode -12.543996810913086:  root parameters MemberReference ^ ^ ^ ; ['root -> parameters', 'parameters -> MemberReference']
copynode -14.184459686279297:  root LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer This selectors MethodInvocation member getRowDimension_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> LocalVariableDeclaration', 'copy-LocalVariableDeclaration']
copynode -14.184459686279297:  root LocalVariableDeclaration modifiers ^ annotations ^ type ^ declarators ^ ^ ^ ; ['root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers annotations type declarators']
copynode -11.633390426635742:  root MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  qualifier ^ selectors ^ member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> qualifier selectors member']
copynode -12.543996810913086:  root parameters FormalParameter type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ name par0 ^ ^ ^ ^ ^ ; ['root -> parameters', 'copy-parameters']
copynode -14.184459686279297:  root LocalVariableDeclaration type ReferenceType name BigDecimal_ter ^ ^ ^ ^ declarators VariableDeclarator name loc4 ^ ^ initializer MemberReference member ZERO_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> LocalVariableDeclaration', 'copy-LocalVariableDeclaration']
copynode -9.79606819152832:  root ReturnStatement par0 ^ ^ ^ ; ['root -> ReturnStatement', 'copy-FormalParameter']
copynode -14.184459686279297:  root LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc1 ^ ^ initializer This selectors MethodInvocation member getColumnDimension_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> LocalVariableDeclaration', 'copy-LocalVariableDeclaration']
copynode -11.633390426635742:  root MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  prefix_operators ^ selectors ^ member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> prefix_operators selectors member']
copynode -10.603342056274414:  root return_type unknown ^ ^ ^ ; ['root -> return_type', 'start -> unknown']
copynode -12.543996810913086:  root parameters Cast ^ ^ ^ ; ['root -> parameters', 'parameters -> Cast']
copynode -11.69059944152832:  root StatementExpression unknown ^ ^ ^ ; ['root -> StatementExpression', 'start -> unknown']
copynode -10.603342056274414:  root return_type par0 ^ ^ ^ ; ['root -> return_type', 'copy-FormalParameter']
copynode -14.184459686279297:  root LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> LocalVariableDeclaration', 'copy-LocalVariableDeclaration']
copynode -11.980195999145508:  root IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ operandr This selectors MethodInvocation member getColumnDimension_ter ^ ^ ^ ^ ^ ^ ^ ^ then_statement BlockStatement statements ThrowStatement expression ClassCreator type ReferenceType name IllegalArgumentException_ter ^ ^ ^ ^ arguments Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> IfStatement', 'copy-IfStatement']
copynode -11.980195999145508:  root IfStatement condition ^ then_statement ^ ^ ^ ; ['root -> IfStatement', 'IfStatement -> condition then_statement']
copynode -9.79606819152832:  root ReturnStatement unknown ^ ^ ^ ; ['root -> ReturnStatement', 'start -> unknown']
copynode -11.633390426635742:  root MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  prefix_operators ^ qualifier ^ selectors ^ member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> prefix_operators qualifier selectors member']
copynode -14.184459686279297:  root LocalVariableDeclaration par0 ^ ^ ^ ; ['root -> LocalVariableDeclaration', 'copy-FormalParameter']
copynode -11.980195999145508:  root IfStatement unknown ^ ^ ^ ; ['root -> IfStatement', 'start -> unknown']
copynode -14.184459686279297:  root LocalVariableDeclaration unknown ^ ^ ^ ; ['root -> LocalVariableDeclaration', 'start -> unknown']
copynode -12.543996810913086:  root parameters loc1 ^ ^ ^ ; ['root -> parameters', 'copy-VariableDeclarator']
copynode -12.543996810913086:  root parameters loc0 ^ ^ ^ ; ['root -> parameters', 'copy-VariableDeclarator']
copynode -11.633390426635742:  root MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  postfix_operators ^ selectors ^ member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> postfix_operators selectors member']
copynode -11.980195999145508:  root IfStatement condition ^ then_statement ^ else_statement ^ ^ ^ ; ['root -> IfStatement', 'IfStatement -> condition then_statement else_statement']
copynode -11.69059944152832:  root StatementExpression par0 ^ ^ ^ ; ['root -> StatementExpression', 'copy-FormalParameter']
copynode -12.543996810913086:  root parameters loc4 ^ ^ ^ ; ['root -> parameters', 'copy-VariableDeclarator']
copynode -12.543996810913086:  root parameters loc5 ^ ^ ^ ; ['root -> parameters', 'copy-VariableDeclarator']
copynode -11.980195999145508:  root IfStatement par0 ^ ^ ^ ; ['root -> IfStatement', 'copy-FormalParameter']
copynode -10.603342056274414:  root return_type loc0 ^ ^ ^ ; ['root -> return_type', 'copy-VariableDeclarator']
copynode -10.603342056274414:  root return_type loc2 ^ ^ ^ ; ['root -> return_type', 'copy-VariableDeclarator']
copynode -10.603342056274414:  root return_type loc1 ^ ^ ^ ; ['root -> return_type', 'copy-VariableDeclarator']
copynode -9.79606819152832:  root ReturnStatement loc5 ^ ^ ^ ; ['root -> ReturnStatement', 'copy-VariableDeclarator']
copynode -10.603342056274414:  root return_type loc4 ^ ^ ^ ; ['root -> return_type', 'copy-VariableDeclarator']
copynode -9.79606819152832:  root ReturnStatement loc4 ^ ^ ^ ; ['root -> ReturnStatement', 'copy-VariableDeclarator']
copynode -9.79606819152832:  root ReturnStatement loc0 ^ ^ ^ ; ['root -> ReturnStatement', 'copy-VariableDeclarator']
copynode -11.69059944152832:  root StatementExpression label ^ expression ^ ^ ^ ; ['root -> StatementExpression', 'StatementExpression -> label expression']
copynode -9.79606819152832:  root ReturnStatement loc3 ^ ^ ^ ; ['root -> ReturnStatement', 'copy-VariableDeclarator']
copynode -10.603342056274414:  root return_type loc3 ^ ^ ^ ; ['root -> return_type', 'copy-VariableDeclarator']
copynode -9.79606819152832:  root ReturnStatement loc1 ^ ^ ^ ; ['root -> ReturnStatement', 'copy-VariableDeclarator']
copynode -9.79606819152832:  root ReturnStatement loc2 ^ ^ ^ ; ['root -> ReturnStatement', 'copy-VariableDeclarator']
copynode -11.69059944152832:  root StatementExpression loc2 ^ ^ ^ ; ['root -> StatementExpression', 'copy-VariableDeclarator']
copynode -11.69059944152832:  root StatementExpression loc3 ^ ^ ^ ; ['root -> StatementExpression', 'copy-VariableDeclarator']
copynode -11.69059944152832:  root StatementExpression loc5 ^ ^ ^ ; ['root -> StatementExpression', 'copy-VariableDeclarator']
copynode -11.69059944152832:  root StatementExpression loc4 ^ ^ ^ ; ['root -> StatementExpression', 'copy-VariableDeclarator']
copynode -11.980195999145508:  root IfStatement loc0 ^ ^ ^ ; ['root -> IfStatement', 'copy-VariableDeclarator']
copynode -11.980195999145508:  root IfStatement loc4 ^ ^ ^ ; ['root -> IfStatement', 'copy-VariableDeclarator']
copynode -11.980195999145508:  root IfStatement loc5 ^ ^ ^ ; ['root -> IfStatement', 'copy-VariableDeclarator']
copynode -11.980195999145508:  root IfStatement loc1 ^ ^ ^ ; ['root -> IfStatement', 'copy-VariableDeclarator']
copynode -0.394977867603302:  root modified ^ LocalVariableDeclaration ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration']
copynode -0.394977867603302:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  ^ ^ ; ['root -> modified', 'copy-MemberReference']
copynode -1.120666742324829:  root add ^ IfStatement ^ ^ ; ['root -> add', 'root -> IfStatement']
copynode -1.120666742324829:  root add ^ StatementExpression ^ ^ ; ['root -> add', 'root -> StatementExpression']
copynode -0.394977867603302:  root modified ^ BasicType-BasicType name double_ter ^ ^ ^  ^ ^ ; ['root -> modified', 'copy-BasicType']
copynode -1.120666742324829:  root add ^ ReturnStatement ^ ^ ; ['root -> add', 'root -> ReturnStatement']
copynode -0.394977867603302:  root modified ^ BasicType-BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^  ^ ^ ; ['root -> modified', 'copy-BasicType']
copynode -0.394977867603302:  root modified ^ StatementExpression ^ ^ ; ['root -> modified', 'root -> StatementExpression']
copynode -1.120666742324829:  root add ^ LocalVariableDeclaration ^ ^ ; ['root -> add', 'root -> LocalVariableDeclaration']
copynode -1.120666742324829:  root add ^ control ^ ^ ; ['root -> add', 'root -> control']
copynode -1.120666742324829:  root add ^ ReturnStatement_ter ^ ^ ; ['root -> add', 'root -> ReturnStatement_ter']
copynode -1.120666742324829:  root add ^ BreakStatement_ter ^ ^ ; ['root -> add', 'root -> BreakStatement_ter']
copynode -1.120666742324829:  root add ^ ContinueStatement_ter ^ ^ ; ['root -> add', 'root -> ContinueStatement_ter']
copynode -1.120666742324829:  root add ^ AssertStatement ^ ^ ; ['root -> add', 'root -> AssertStatement']
copynode -1.120666742324829:  root add ^ WhileStatement ^ ^ ; ['root -> add', 'root -> WhileStatement']
copynode -0.394977867603302:  root modified ^ parameters ^ ^ ; ['root -> modified', 'root -> parameters']
copynode -0.394977867603302:  root modified ^ control ^ ^ ; ['root -> modified', 'root -> control']
copynode -0.394977867603302:  root modified ^ ^ ; ['root -> modified', 'root -> End']
copynode -0.394977867603302:  root modified ^ IfStatement ^ ^ ; ['root -> modified', 'root -> IfStatement']
copynode -0.394977867603302:  root modified ^ ReturnStatement ^ ^ ; ['root -> modified', 'root -> ReturnStatement']
copynode -9.916728973388672:  root ReturnStatement expression ^ ^ ^ ; ['root -> ReturnStatement', 'ReturnStatement -> expression']
copynode -10.367170333862305:  root return_type ReferenceType ^ ^ ^ ; ['root -> return_type', 'return_type -> ReferenceType']
copynode -11.247756958007812:  root StatementExpression expression ^ ^ ^ ; ['root -> StatementExpression', 'StatementExpression -> expression']
copynode -11.038277626037598:  root MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> member']
copynode -11.616626739501953:  root IfStatement condition ^ ^ ^ ; ['root -> IfStatement', 'IfStatement -> condition']
copynode -10.367170333862305:  root return_type BasicType ^ ^ ^ ; ['root -> return_type', 'return_type -> BasicType']
copynode -12.095176696777344:  root parameters FormalParameter ^ ^ ^ ; ['root -> parameters', 'parameters -> FormalParameter']
copynode -11.038277626037598:  root MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  qualifier ^ member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> qualifier member']
copynode -12.20612621307373:  root BasicType-BasicType name double_ter ^ ^ ^  name ^ ^ ^ ; ['copy-BasicType', 'BasicType -> name']
copynode -9.916728973388672:  root ReturnStatement expression MemberReference member loc2 ^ ^ ^ ^ ^ ^ ; ['root -> ReturnStatement', 'copy-ReturnStatement']
copynode -11.247756958007812:  root StatementExpression expression Assignment expressionl MemberReference member loc5 ^ ^ ^ ^ value BinaryOperation operator *_ter ^ ^ operandl MemberReference selectors ArraySelector index MemberReference member loc6 ^ ^ ^ ^ ^ ^ member loc4 ^ ^ ^ ^ operandr MemberReference selectors ArraySelector index MemberReference member loc6 ^ ^ ^ ^ ^ ^ member par0 ^ ^ ^ ^ ^ ^ type +=_ter ^ ^ ^ ^ ^ ^ ; ['root -> StatementExpression', 'copy-StatementExpression']
copynode -12.20612621307373:  root BasicType-BasicType name double_ter ^ ^ ^  name int_ter ^ ^ ^ ^ ; ['copy-BasicType', 'copy-BasicType']
copynode -12.095176696777344:  root parameters ^ ^ ; ['root -> parameters', 'parameters -> End']
copynode -11.038277626037598:  root MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  prefix_operators ^ member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> prefix_operators member']
copynode -12.20612621307373:  root BasicType-BasicType name double_ter ^ ^ ^  name int_ter ^ ^ ^ ^ ; ['copy-BasicType', 'copy-BasicType']
copynode -12.20612621307373:  root BasicType-BasicType name double_ter ^ ^ ^  name int_ter ^ ^ ^ ^ ; ['copy-BasicType', 'copy-BasicType']
copynode -12.20612621307373:  root BasicType-BasicType name double_ter ^ ^ ^  name double_ter ^ ^ ^ ^ ; ['copy-BasicType', 'copy-BasicType']
copynode -12.20612621307373:  root BasicType-BasicType name double_ter ^ ^ ^  name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ ; ['copy-BasicType', 'copy-BasicType']
copynode -11.038277626037598:  root MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  selectors ^ member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> selectors member']
copynode -12.20612621307373:  root BasicType-BasicType name double_ter ^ ^ ^  name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ ; ['copy-BasicType', 'copy-BasicType']
copynode -11.247756958007812:  root StatementExpression expression Assignment expressionl MemberReference selectors ArraySelector index MemberReference member loc3 ^ ^ ^ ^ ^ ^ member loc2 ^ ^ ^ ^ value MemberReference member loc5 ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ; ['root -> StatementExpression', 'copy-StatementExpression']
copynode -12.20612621307373:  root BasicType-BasicType name double_ter ^ ^ ^  name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ ; ['copy-BasicType', 'copy-BasicType']
copynode -12.20612621307373:  root BasicType-BasicType name double_ter ^ ^ ^  name int_ter ^ ^ ^ ^ ; ['copy-BasicType', 'copy-BasicType']
copynode -10.367170333862305:  root return_type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ ^ ; ['root -> return_type', 'copy-return_type']
copynode -12.20612621307373:  root BasicType-BasicType name double_ter ^ ^ ^  name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ ; ['copy-BasicType', 'copy-BasicType']
copynode -12.095176696777344:  root parameters MemberReference ^ ^ ^ ; ['root -> parameters', 'parameters -> MemberReference']
copynode -11.038277626037598:  root MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  postfix_operators ^ member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> postfix_operators member']
copynode -11.038277626037598:  root MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  prefix_operators ^ qualifier ^ member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> prefix_operators qualifier member']
copynode -12.095176696777344:  root parameters InferredFormalParameter ^ ^ ^ ; ['root -> parameters', 'parameters -> InferredFormalParameter']
copynode -12.095176696777344:  root parameters FormalParameter type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ name par0 ^ ^ ^ ^ ^ ; ['root -> parameters', 'copy-parameters']
copynode -11.038277626037598:  root MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  qualifier ^ selectors ^ member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> qualifier selectors member']
copynode -9.916728973388672:  root ReturnStatement par0 ^ ^ ^ ; ['root -> ReturnStatement', 'copy-FormalParameter']
copynode -11.038277626037598:  root MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  prefix_operators ^ selectors ^ member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> prefix_operators selectors member']
copynode -10.367170333862305:  root return_type unknown ^ ^ ^ ; ['root -> return_type', 'start -> unknown']
copynode -10.367170333862305:  root return_type par0 ^ ^ ^ ; ['root -> return_type', 'copy-FormalParameter']
copynode -11.616626739501953:  root IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ operandr MemberReference member loc1 ^ ^ ^ ^ ^ ^ then_statement BlockStatement statements ThrowStatement expression ClassCreator type ReferenceType name IllegalArgumentException_ter ^ ^ ^ ^ arguments Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> IfStatement', 'copy-IfStatement']
copynode -12.095176696777344:  root parameters Cast ^ ^ ^ ; ['root -> parameters', 'parameters -> Cast']
copynode -12.095176696777344:  root parameters loc0 ^ ^ ^ ; ['root -> parameters', 'copy-VariableDeclarator']
copynode -12.095176696777344:  root parameters loc1 ^ ^ ^ ; ['root -> parameters', 'copy-VariableDeclarator']
copynode -11.038277626037598:  root MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  prefix_operators ^ qualifier ^ selectors ^ member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> prefix_operators qualifier selectors member']
copynode -12.095176696777344:  root parameters loc4 ^ ^ ^ ; ['root -> parameters', 'copy-VariableDeclarator']
copynode -12.095176696777344:  root parameters loc5 ^ ^ ^ ; ['root -> parameters', 'copy-VariableDeclarator']
copynode -11.616626739501953:  root IfStatement condition ^ then_statement ^ ^ ^ ; ['root -> IfStatement', 'IfStatement -> condition then_statement']
copynode -11.247756958007812:  root StatementExpression unknown ^ ^ ^ ; ['root -> StatementExpression', 'start -> unknown']
copynode -9.916728973388672:  root ReturnStatement unknown ^ ^ ^ ; ['root -> ReturnStatement', 'start -> unknown']
copynode -11.038277626037598:  root MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  postfix_operators ^ selectors ^ member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> postfix_operators selectors member']
copynode -11.616626739501953:  root IfStatement unknown ^ ^ ^ ; ['root -> IfStatement', 'start -> unknown']
copynode -11.247756958007812:  root StatementExpression par0 ^ ^ ^ ; ['root -> StatementExpression', 'copy-FormalParameter']
copynode -10.367170333862305:  root return_type loc1 ^ ^ ^ ; ['root -> return_type', 'copy-VariableDeclarator']
copynode -11.616626739501953:  root IfStatement condition ^ then_statement ^ else_statement ^ ^ ^ ; ['root -> IfStatement', 'IfStatement -> condition then_statement else_statement']
copynode -11.616626739501953:  root IfStatement par0 ^ ^ ^ ; ['root -> IfStatement', 'copy-FormalParameter']
copynode -10.367170333862305:  root return_type loc0 ^ ^ ^ ; ['root -> return_type', 'copy-VariableDeclarator']
copynode -10.367170333862305:  root return_type loc2 ^ ^ ^ ; ['root -> return_type', 'copy-VariableDeclarator']
copynode -10.367170333862305:  root return_type loc4 ^ ^ ^ ; ['root -> return_type', 'copy-VariableDeclarator']
copynode -10.367170333862305:  root return_type loc5 ^ ^ ^ ; ['root -> return_type', 'copy-VariableDeclarator']
copynode -9.916728973388672:  root ReturnStatement loc6 ^ ^ ^ ; ['root -> ReturnStatement', 'copy-VariableDeclarator']
copynode -9.916728973388672:  root ReturnStatement loc4 ^ ^ ^ ; ['root -> ReturnStatement', 'copy-VariableDeclarator']
copynode -9.916728973388672:  root ReturnStatement loc5 ^ ^ ^ ; ['root -> ReturnStatement', 'copy-VariableDeclarator']
copynode -9.916728973388672:  root ReturnStatement loc0 ^ ^ ^ ; ['root -> ReturnStatement', 'copy-VariableDeclarator']
copynode -9.916728973388672:  root ReturnStatement loc3 ^ ^ ^ ; ['root -> ReturnStatement', 'copy-VariableDeclarator']
copynode -9.916728973388672:  root ReturnStatement loc1 ^ ^ ^ ; ['root -> ReturnStatement', 'copy-VariableDeclarator']
copynode -11.247756958007812:  root StatementExpression label ^ expression ^ ^ ^ ; ['root -> StatementExpression', 'StatementExpression -> label expression']
copynode -11.247756958007812:  root StatementExpression loc2 ^ ^ ^ ; ['root -> StatementExpression', 'copy-VariableDeclarator']
copynode -11.247756958007812:  root StatementExpression loc3 ^ ^ ^ ; ['root -> StatementExpression', 'copy-VariableDeclarator']
copynode -11.247756958007812:  root StatementExpression loc6 ^ ^ ^ ; ['root -> StatementExpression', 'copy-VariableDeclarator']
copynode -11.247756958007812:  root StatementExpression loc4 ^ ^ ^ ; ['root -> StatementExpression', 'copy-VariableDeclarator']
copynode -11.616626739501953:  root IfStatement loc4 ^ ^ ^ ; ['root -> IfStatement', 'copy-VariableDeclarator']
copynode -11.616626739501953:  root IfStatement loc1 ^ ^ ^ ; ['root -> IfStatement', 'copy-VariableDeclarator']
copynode -11.616626739501953:  root IfStatement loc5 ^ ^ ^ ; ['root -> IfStatement', 'copy-VariableDeclarator']
copynode -11.616626739501953:  root IfStatement loc0 ^ ^ ^ ; ['root -> IfStatement', 'copy-VariableDeclarator']
before@2 batch0 x: -35.61727714538574: root IfStatement loc1 ^ ^ ^  ; ['root -> IfStatement', 'copy-VariableDeclarator']
after@2 batch0 x: -35.61727714538574: root IfStatement loc1 ^ ^ ^  ; ['root -> IfStatement', 'copy-VariableDeclarator']
before@2 batch1 x: -33.6147403717041: root IfStatement loc0 ^ ^ ^  ; ['root -> IfStatement', 'copy-VariableDeclarator']
after@2 batch1 x: -33.6147403717041: root IfStatement loc0 ^ ^ ^  ; ['root -> IfStatement', 'copy-VariableDeclarator']
copynode -0.5900155305862427:  root modified ^ LocalVariableDeclaration modifiers ^ type ^ declarators ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators']
copynode -1.608478307723999:  root add ^ IfStatement condition ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition']
copynode -1.9409120380878448:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  qualifier ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member']
copynode -2.610908269882202:  root add ^ StatementExpression expression ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression']
copynode -1.9409120380878448:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member']
copynode -4.379615813493729:  root modified ^ StatementExpression expression ^ ^ ^ ; ['root -> modified', 'root -> StatementExpression', 'StatementExpression -> expression']
copynode -0.5900155305862427:  root modified ^ LocalVariableDeclaration annotations ^ type ^ declarators ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> annotations type declarators']
copynode -0.5900155305862427:  root modified ^ LocalVariableDeclaration type ^ declarators ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators']
copynode -1.9409120380878448:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  selectors ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> selectors member']
copynode -5.200181841850281:  root add ^ ReturnStatement expression ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'ReturnStatement -> expression']
copynode -0.5900155305862427:  root modified ^ LocalVariableDeclaration modifiers ^ annotations ^ type ^ declarators ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers annotations type declarators']
copynode -5.777900338172913:  root add ^ LocalVariableDeclaration modifiers ^ type ^ declarators ^ ^ ^ ; ['root -> add', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators']
copynode -6.371432900428772:  root add ^ ReturnStatement_ter ^ ^ ; ['root -> add', 'root -> ReturnStatement_ter', 'root -> End']
copynode -1.9409120380878448:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  prefix_operators ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> prefix_operators member']
copynode -1.9409120380878448:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  qualifier ^ selectors ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier selectors member']
copynode -5.777900338172913:  root add ^ LocalVariableDeclaration type ^ declarators ^ ^ ^ ; ['root -> add', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators']
copynode -7.2086673974990845:  root add ^ AssertStatement condition ^ ^ ^ ; ['root -> add', 'root -> AssertStatement', 'AssertStatement -> condition']
copynode -5.200181841850281:  root add ^ ReturnStatement expression MemberReference member loc2 ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'copy-ReturnStatement']
copynode -2.610908269882202:  root add ^ StatementExpression expression Assignment expressionl MemberReference member loc4 ^ ^ ^ ^ value MethodInvocation qualifier loc4 ^ ^ arguments MemberReference selectors ArraySelector index MemberReference member loc3 ^ ^ ^ ^ ^ ArraySelector index MemberReference member loc5 ^ ^ ^ ^ ^ MethodInvocation arguments MemberReference selectors ArraySelector index MemberReference member loc5 ^ ^ ^ ^ ^ ^ member par0 ^ ^ ^ ^ member multiply_ter ^ ^ ^ ^ member data_ter ^ ^ ^ ^ member add_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'copy-StatementExpression']
copynode -7.938361763954163:  root add ^ WhileStatement condition ^ ^ ^ ; ['root -> add', 'root -> WhileStatement', 'WhileStatement -> condition']
copynode -7.96884348988533:  root modified ^ parameters FormalParameter ^ ^ ^ ; ['root -> modified', 'root -> parameters', 'parameters -> FormalParameter']
copynode -0.5900155305862427:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer This selectors MethodInvocation member getRowDimension_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'copy-LocalVariableDeclaration']
copynode -7.870975524187088:  root modified ^ control ForControl ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl']
copynode -1.9409120380878448:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  prefix_operators ^ qualifier ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> prefix_operators qualifier member']
copynode -1.9409120380878448:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  postfix_operators ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> postfix_operators member']
copynode -6.976159691810608:  root add ^ control ForControl ^ ^ ^ ; ['root -> add', 'root -> control', 'control -> ForControl']
copynode -6.976159691810608:  root add ^ control EnhancedForControl ^ ^ ^ ; ['root -> add', 'root -> control', 'control -> EnhancedForControl']
copynode -5.777900338172913:  root add ^ LocalVariableDeclaration annotations ^ type ^ declarators ^ ^ ^ ; ['root -> add', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> annotations type declarators']
copynode -8.511878609657288:  root add ^ BreakStatement_ter ^ ^ ; ['root -> add', 'root -> BreakStatement_ter', 'root -> End']
copynode -8.624516993761063:  root modified ^ IfStatement condition ^ ^ ^ ; ['root -> modified', 'root -> IfStatement', 'IfStatement -> condition']
copynode -8.615951180458069:  root add ^ parameters FormalParameter ^ ^ ^ ; ['root -> add', 'root -> parameters', 'parameters -> FormalParameter']
copynode -2.610908269882202:  root add ^ StatementExpression expression Assignment expressionl MemberReference selectors ArraySelector index MemberReference member loc3 ^ ^ ^ ^ ^ ^ member loc2 ^ ^ ^ ^ value MemberReference member loc4 ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'copy-StatementExpression']
copynode -6.976159691810608:  root add ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc3 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc3 ^ ^ ^ ^ operandr MemberReference member loc0 ^ ^ ^ ^ ^ ^ update MemberReference postfix_operators ++_ter ^ ^ member loc3 ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> control', 'copy-control']
copynode -6.976159691810608:  root add ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc5 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr MemberReference member loc1 ^ ^ ^ ^ ^ ^ update MemberReference postfix_operators ++_ter ^ ^ member loc5 ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> control', 'copy-control']
copynode -0.5900155305862427:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc1 ^ ^ initializer This selectors MethodInvocation member getColumnDimension_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'copy-LocalVariableDeclaration']
copynode -4.379615813493729:  root modified ^ StatementExpression expression Assignment expressionl MemberReference member loc4 ^ ^ ^ ^ value MethodInvocation qualifier loc4 ^ ^ arguments MemberReference selectors ArraySelector index MemberReference member loc3 ^ ^ ^ ^ ^ ArraySelector index MemberReference member loc5 ^ ^ ^ ^ ^ MethodInvocation arguments MemberReference selectors ArraySelector index MemberReference member loc5 ^ ^ ^ ^ ^ ^ member par0 ^ ^ ^ ^ member multiply_ter ^ ^ ^ ^ member data_ter ^ ^ ^ ^ member add_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> StatementExpression', 'copy-StatementExpression']
copynode -9.291609317064285:  root modified ^ ReturnStatement expression ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression']
copynode -0.5900155305862427:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'copy-LocalVariableDeclaration']
copynode -6.976159691810608:  root add ^ control ForControl_ter ^ ^ ^ ; ['root -> add', 'root -> control', 'control -> ForControl_ter']
copynode -0.5900155305862427:  root modified ^ LocalVariableDeclaration type ReferenceType name BigDecimal_ter ^ ^ ^ ^ declarators VariableDeclarator name loc4 ^ ^ initializer MemberReference member ZERO_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'copy-LocalVariableDeclaration']
copynode -1.9409120380878448:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  prefix_operators ^ selectors ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> prefix_operators selectors member']
copynode -9.815258659422398:  root ReturnStatement expression Literal ^ ^ ^ ^ ; ['root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> Literal']
copynode -4.379615813493729:  root modified ^ StatementExpression expression Assignment expressionl MemberReference selectors ArraySelector index MemberReference member loc3 ^ ^ ^ ^ ^ ^ member loc2 ^ ^ ^ ^ value MemberReference member loc4 ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> StatementExpression', 'copy-StatementExpression']
copynode -5.777900338172913:  root add ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer This selectors MethodInvocation member getRowDimension_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> LocalVariableDeclaration', 'copy-LocalVariableDeclaration']
copynode -0.5900155305862427:  root modified ^ LocalVariableDeclaration unknown ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'start -> unknown']
copynode -10.979953318834305:  root modified ^ TernaryExpression condition ^ if_true ^ if_false ^ ^ ^ ; ['root -> modified', 'root -> TernaryExpression', 'TernaryExpression -> condition if_true if_false']
copynode -6.371432900428772:  root add ^ ReturnStatement_ter ^ StatementExpression ^ ^ ; ['root -> add', 'root -> ReturnStatement_ter', 'root -> StatementExpression']
copynode -11.239869624376297:  root modified ^ ReturnStatement_ter ^ ^ ; ['root -> modified', 'root -> ReturnStatement_ter', 'root -> End']
copynode -10.852129444479942:  root return_type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ ^ ; ['root -> return_type', 'return_type -> ReferenceType', 'copy-ReferenceType']
copynode -0.5900155305862427:  root modified ^ LocalVariableDeclaration par0 ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'copy-FormalParameter']
copynode -1.9409120380878448:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  prefix_operators ^ qualifier ^ selectors ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> prefix_operators qualifier selectors member']
copynode -6.371432900428772:  root add ^ ReturnStatement_ter ^ IfStatement ^ ^ ; ['root -> add', 'root -> ReturnStatement_ter', 'root -> IfStatement']
copynode -9.815258659422398:  root ReturnStatement expression MemberReference ^ ^ ^ ^ ; ['root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MemberReference']
copynode -5.777900338172913:  root add ^ LocalVariableDeclaration type ReferenceType name BigDecimal_ter ^ ^ ^ ^ declarators VariableDeclarator name loc4 ^ ^ initializer MemberReference member ZERO_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> LocalVariableDeclaration', 'copy-LocalVariableDeclaration']
copynode -7.870975524187088:  root modified ^ control EnhancedForControl ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> EnhancedForControl']
copynode -7.2086673974990845:  root add ^ AssertStatement condition ^ value ^ ^ ^ ; ['root -> add', 'root -> AssertStatement', 'AssertStatement -> condition value']
copynode -5.777900338172913:  root add ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc1 ^ ^ initializer This selectors MethodInvocation member getColumnDimension_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> LocalVariableDeclaration', 'copy-LocalVariableDeclaration']
copynode -11.70100980810821:  root StatementExpression expression MethodInvocation ^ ^ ^ ^ ; ['root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation']
copynode -11.980635083717061:  root IfStatement condition BinaryOperation ^ ^ ^ ^ ; ['root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation']
copynode -9.815258659422398:  root ReturnStatement expression BinaryOperation ^ ^ ^ ^ ; ['root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation']
copynode -6.371432900428772:  root add ^ ReturnStatement_ter ^ ReturnStatement ^ ^ ; ['root -> add', 'root -> ReturnStatement_ter', 'root -> ReturnStatement']
copynode -5.777900338172913:  root add ^ LocalVariableDeclaration modifiers ^ annotations ^ type ^ declarators ^ ^ ^ ; ['root -> add', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers annotations type declarators']
copynode -11.893120229244232:  root MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  member loc1 ^ ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> member', 'member -> loc1']
copynode -1.9409120380878448:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  postfix_operators ^ selectors ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> postfix_operators selectors member']
copynode -6.976159691810608:  root add ^ control par0 ^ ^ ^ ; ['root -> add', 'root -> control', 'copy-FormalParameter']
copynode -10.852129444479942:  root return_type ReferenceType name BigDecimal_ter ^ ^ ^ ^ ^ ; ['root -> return_type', 'return_type -> ReferenceType', 'copy-ReferenceType']
copynode -6.371432900428772:  root add ^ ReturnStatement_ter ^ BreakStatement_ter ^ ^ ; ['root -> add', 'root -> ReturnStatement_ter', 'root -> BreakStatement_ter']
copynode -6.371432900428772:  root add ^ ReturnStatement_ter ^ ContinueStatement_ter ^ ^ ; ['root -> add', 'root -> ReturnStatement_ter', 'root -> ContinueStatement_ter']
copynode -1.608478307723999:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ operandr This selectors MethodInvocation member getColumnDimension_ter ^ ^ ^ ^ ^ ^ ^ ^ then_statement BlockStatement statements ThrowStatement expression ClassCreator type ReferenceType name IllegalArgumentException_ter ^ ^ ^ ^ arguments Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'copy-IfStatement']
copynode -9.815258659422398:  root ReturnStatement expression MethodInvocation ^ ^ ^ ^ ; ['root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation']
copynode -8.615951180458069:  root add ^ parameters ^ ^ ; ['root -> add', 'root -> parameters', 'parameters -> End']
copynode -8.511878609657288:  root add ^ BreakStatement_ter ^ StatementExpression ^ ^ ; ['root -> add', 'root -> BreakStatement_ter', 'root -> StatementExpression']
copynode -1.608478307723999:  root add ^ IfStatement condition ^ then_statement ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition then_statement']
copynode -11.70100980810821:  root StatementExpression expression Assignment ^ ^ ^ ^ ; ['root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment']
copynode -12.57201542519033:  root parameters FormalParameter modifiers ^ type ^ name ^ ^ ^ ^ ; ['root -> parameters', 'parameters -> FormalParameter', 'FormalParameter -> modifiers type name']
copynode -6.371432900428772:  root add ^ ReturnStatement_ter ^ ReturnStatement_ter ^ ^ ; ['root -> add', 'root -> ReturnStatement_ter', 'root -> ReturnStatement_ter']
copynode -12.261849880218506:  root return_type BasicType name int_ter ^ ^ ^ ^ ^ ; ['root -> return_type', 'return_type -> BasicType', 'copy-BasicType']
copynode -7.870975524187088:  root modified ^ control ForControl_ter ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl_ter']
copynode -12.261849880218506:  root return_type BasicType name ^ ^ ^ ^ ; ['root -> return_type', 'return_type -> BasicType', 'BasicType -> name']
copynode -8.511878609657288:  root add ^ BreakStatement_ter ^ IfStatement ^ ^ ; ['root -> add', 'root -> BreakStatement_ter', 'root -> IfStatement']
copynode -10.852129444479942:  root return_type ReferenceType name ^ arguments ^ ^ ^ ^ ; ['root -> return_type', 'return_type -> ReferenceType', 'ReferenceType -> name arguments']
copynode -11.893120229244232:  root MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  member unknown ^ ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> member', 'start -> unknown']
copynode -12.57201542519033:  root parameters FormalParameter type ^ name ^ ^ ^ ^ ; ['root -> parameters', 'parameters -> FormalParameter', 'FormalParameter -> type name']
copynode -7.870975524187088:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc5 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr MemberReference member loc1 ^ ^ ^ ^ ^ ^ update MemberReference postfix_operators ++_ter ^ ^ member loc5 ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'copy-control']
copynode -11.980635083717061:  root IfStatement condition MethodInvocation ^ ^ ^ ^ ; ['root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation']
copynode -13.174732685089111:  root MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  qualifier par0 ^ ^ member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0']
copynode -6.371432900428772:  root add ^ ReturnStatement_ter ^ control ^ ^ ; ['root -> add', 'root -> ReturnStatement_ter', 'root -> control']
copynode -7.870975524187088:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc3 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc3 ^ ^ ^ ^ operandr MemberReference member loc0 ^ ^ ^ ^ ^ ^ update MemberReference postfix_operators ++_ter ^ ^ member loc3 ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'copy-control']
copynode -9.291609317064285:  root modified ^ ReturnStatement expression MemberReference member loc2 ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'copy-ReturnStatement']
copynode -8.511878609657288:  root add ^ BreakStatement_ter ^ ReturnStatement ^ ^ ; ['root -> add', 'root -> BreakStatement_ter', 'root -> ReturnStatement']
copynode -9.815258659422398:  root ReturnStatement expression ClassCreator ^ ^ ^ ^ ; ['root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> ClassCreator']
copynode -13.975658416748047:  root ReturnStatement expression MemberReference member loc2 ^ ^ ^ ^ ^ ^ ; ['root -> ReturnStatement', 'copy-ReturnStatement', 'root -> End']
copynode -6.371432900428772:  root add ^ ReturnStatement_ter ^ WhileStatement ^ ^ ; ['root -> add', 'root -> ReturnStatement_ter', 'root -> WhileStatement']
copynode -12.261849880218506:  root return_type BasicType name int_ter ^ ^ ^ ^ ^ ; ['root -> return_type', 'return_type -> BasicType', 'copy-BasicType']
copynode -11.893120229244232:  root MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  member loc0 ^ ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> member', 'member -> loc0']
copynode -8.511878609657288:  root add ^ BreakStatement_ter ^ ContinueStatement_ter ^ ^ ; ['root -> add', 'root -> BreakStatement_ter', 'root -> ContinueStatement_ter']
copynode -8.511878609657288:  root add ^ BreakStatement_ter ^ BreakStatement_ter ^ ^ ; ['root -> add', 'root -> BreakStatement_ter', 'root -> BreakStatement_ter']
copynode -11.70100980810821:  root StatementExpression expression This ^ ^ ^ ^ ; ['root -> StatementExpression', 'StatementExpression -> expression', 'expression -> This']
copynode -0.8258925974369049:  root modified ^ LocalVariableDeclaration modifiers ^ type ^ declarators ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators']
copynode -1.9397521615028381:  root add ^ IfStatement condition ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition']
copynode -2.216233968734741:  root add ^ StatementExpression expression ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression']
copynode -1.874237596988678:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  qualifier ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member']
copynode -2.919219493865967:  root add ^ ReturnStatement expression ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'ReturnStatement -> expression']
copynode -1.874237596988678:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member']
copynode -2.7658753991127014:  root modified ^ BasicType-BasicType name double_ter ^ ^ ^  name ^ ^ ^ ; ['root -> modified', 'copy-BasicType', 'BasicType -> name']
copynode -2.919219493865967:  root add ^ ReturnStatement expression MemberReference member loc2 ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'copy-ReturnStatement']
copynode -4.459926426410675:  root modified ^ BasicType-BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^  name ^ ^ ^ ; ['root -> modified', 'copy-BasicType', 'BasicType -> name']
copynode -0.8258925974369049:  root modified ^ LocalVariableDeclaration type ^ declarators ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators']
copynode -1.874237596988678:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  selectors ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> selectors member']
copynode -5.125048935413361:  root modified ^ StatementExpression expression ^ ^ ^ ; ['root -> modified', 'root -> StatementExpression', 'StatementExpression -> expression']
copynode -0.8258925974369049:  root modified ^ LocalVariableDeclaration annotations ^ type ^ declarators ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> annotations type declarators']
copynode -5.486079931259155:  root add ^ ReturnStatement_ter ^ ^ ; ['root -> add', 'root -> ReturnStatement_ter', 'root -> End']
copynode -2.7658753991127014:  root modified ^ BasicType-BasicType name double_ter ^ ^ ^  name int_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-BasicType', 'copy-BasicType']
copynode -2.7658753991127014:  root modified ^ BasicType-BasicType name double_ter ^ ^ ^  name int_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-BasicType', 'copy-BasicType']
copynode -2.7658753991127014:  root modified ^ BasicType-BasicType name double_ter ^ ^ ^  name int_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-BasicType', 'copy-BasicType']
copynode -2.7658753991127014:  root modified ^ BasicType-BasicType name double_ter ^ ^ ^  name double_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-BasicType', 'copy-BasicType']
copynode -2.7658753991127014:  root modified ^ BasicType-BasicType name double_ter ^ ^ ^  name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-BasicType', 'copy-BasicType']
copynode -2.7658753991127014:  root modified ^ BasicType-BasicType name double_ter ^ ^ ^  name ^ dimensions ^ ^ ^ ; ['root -> modified', 'copy-BasicType', 'BasicType -> name dimensions']
copynode -5.3703248500823975:  root add ^ LocalVariableDeclaration modifiers ^ type ^ declarators ^ ^ ^ ; ['root -> add', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators']
copynode -6.146259069442749:  root add ^ BreakStatement_ter ^ ^ ; ['root -> add', 'root -> BreakStatement_ter', 'root -> End']
copynode -0.8258925974369049:  root modified ^ LocalVariableDeclaration modifiers ^ annotations ^ type ^ declarators ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers annotations type declarators']
copynode -5.3703248500823975:  root add ^ LocalVariableDeclaration type ^ declarators ^ ^ ^ ; ['root -> add', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators']
copynode -2.216233968734741:  root add ^ StatementExpression expression Assignment expressionl MemberReference member loc5 ^ ^ ^ ^ value BinaryOperation operator *_ter ^ ^ operandl MemberReference selectors ArraySelector index MemberReference member loc6 ^ ^ ^ ^ ^ ^ member loc4 ^ ^ ^ ^ operandr MemberReference selectors ArraySelector index MemberReference member loc6 ^ ^ ^ ^ ^ ^ member par0 ^ ^ ^ ^ ^ ^ type +=_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'copy-StatementExpression']
copynode -2.7658753991127014:  root modified ^ BasicType-BasicType name double_ter ^ ^ ^  name int_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-BasicType', 'copy-BasicType']
copynode -1.874237596988678:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  prefix_operators ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> prefix_operators member']
copynode -2.7658753991127014:  root modified ^ BasicType-BasicType name double_ter ^ ^ ^  name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-BasicType', 'copy-BasicType']
copynode -5.424457311630249:  root add ^ control EnhancedForControl ^ ^ ^ ; ['root -> add', 'root -> control', 'control -> EnhancedForControl']
copynode -5.424457311630249:  root add ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr MemberReference member loc1 ^ ^ ^ ^ ^ ^ update MemberReference postfix_operators ++_ter ^ ^ member loc6 ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> control', 'copy-control']
copynode -6.899089574813843:  root add ^ ContinueStatement_ter ^ ^ ; ['root -> add', 'root -> ContinueStatement_ter', 'root -> End']
copynode -5.424457311630249:  root add ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc3 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc3 ^ ^ ^ ^ operandr MemberReference member loc0 ^ ^ ^ ^ ^ ^ update MemberReference postfix_operators ++_ter ^ ^ member loc3 ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> control', 'copy-control']
copynode -2.7658753991127014:  root modified ^ BasicType-BasicType name double_ter ^ ^ ^  name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-BasicType', 'copy-BasicType']
copynode -1.874237596988678:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  qualifier ^ selectors ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier selectors member']
copynode -2.216233968734741:  root add ^ StatementExpression expression Assignment expressionl MemberReference selectors ArraySelector index MemberReference member loc3 ^ ^ ^ ^ ^ ^ member loc2 ^ ^ ^ ^ value MemberReference member loc5 ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'copy-StatementExpression']
copynode -5.424457311630249:  root add ^ control ForControl ^ ^ ^ ; ['root -> add', 'root -> control', 'control -> ForControl']
copynode -7.229402303695679:  root add ^ AssertStatement condition ^ ^ ^ ; ['root -> add', 'root -> AssertStatement', 'AssertStatement -> condition']
copynode -4.459926426410675:  root modified ^ BasicType-BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^  name int_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-BasicType', 'copy-BasicType']
copynode -5.3703248500823975:  root add ^ LocalVariableDeclaration annotations ^ type ^ declarators ^ ^ ^ ; ['root -> add', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> annotations type declarators']
copynode -4.459926426410675:  root modified ^ BasicType-BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^  name ^ dimensions ^ ^ ^ ; ['root -> modified', 'copy-BasicType', 'BasicType -> name dimensions']
copynode -4.459926426410675:  root modified ^ BasicType-BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^  name int_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-BasicType', 'copy-BasicType']
copynode -4.459926426410675:  root modified ^ BasicType-BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^  name int_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-BasicType', 'copy-BasicType']
copynode -7.800077199935913:  root add ^ WhileStatement condition ^ ^ ^ ; ['root -> add', 'root -> WhileStatement', 'WhileStatement -> condition']
copynode -4.459926426410675:  root modified ^ BasicType-BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^  name double_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-BasicType', 'copy-BasicType']
copynode -4.459926426410675:  root modified ^ BasicType-BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^  name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-BasicType', 'copy-BasicType']
copynode -4.459926426410675:  root modified ^ BasicType-BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^  name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-BasicType', 'copy-BasicType']
copynode -1.874237596988678:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  prefix_operators ^ qualifier ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> prefix_operators qualifier member']
copynode -5.424457311630249:  root add ^ control ForControl_ter ^ ^ ^ ; ['root -> add', 'root -> control', 'control -> ForControl_ter']
copynode -0.8258925974369049:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc1 ^ ^ initializer This selectors MethodInvocation member getColumnDimension_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'copy-LocalVariableDeclaration']
copynode -0.8258925974369049:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer This selectors MethodInvocation member getRowDimension_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'copy-LocalVariableDeclaration']
copynode -4.459926426410675:  root modified ^ BasicType-BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^  name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-BasicType', 'copy-BasicType']
copynode -8.399791061878204:  root modified ^ parameters FormalParameter ^ ^ ^ ; ['root -> modified', 'root -> parameters', 'parameters -> FormalParameter']
copynode -1.874237596988678:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  postfix_operators ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> postfix_operators member']
copynode -4.459926426410675:  root modified ^ BasicType-BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^  name int_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-BasicType', 'copy-BasicType']
copynode -8.603748619556427:  root modified ^ control ForControl ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl']
copynode -8.99907237291336:  root modified ^ IfStatement condition ^ ^ ^ ; ['root -> modified', 'root -> IfStatement', 'IfStatement -> condition']
copynode -9.571312248706818:  root modified ^ ReturnStatement expression ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression']
copynode -0.8258925974369049:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc4 ^ ^ initializer MemberReference selectors ArraySelector index MemberReference member loc3 ^ ^ ^ ^ ^ ^ member data_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'copy-LocalVariableDeclaration']
copynode -5.486079931259155:  root add ^ ReturnStatement_ter ^ StatementExpression ^ ^ ; ['root -> add', 'root -> ReturnStatement_ter', 'root -> StatementExpression']
copynode -5.486079931259155:  root add ^ ReturnStatement_ter ^ IfStatement ^ ^ ; ['root -> add', 'root -> ReturnStatement_ter', 'root -> IfStatement']
copynode -5.125048935413361:  root modified ^ StatementExpression expression Assignment expressionl MemberReference member loc5 ^ ^ ^ ^ value BinaryOperation operator *_ter ^ ^ operandl MemberReference selectors ArraySelector index MemberReference member loc6 ^ ^ ^ ^ ^ ^ member loc4 ^ ^ ^ ^ operandr MemberReference selectors ArraySelector index MemberReference member loc6 ^ ^ ^ ^ ^ ^ member par0 ^ ^ ^ ^ ^ ^ type +=_ter ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> StatementExpression', 'copy-StatementExpression']
copynode -1.874237596988678:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  prefix_operators ^ selectors ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> prefix_operators selectors member']
copynode -5.3703248500823975:  root add ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc1 ^ ^ initializer This selectors MethodInvocation member getColumnDimension_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> LocalVariableDeclaration', 'copy-LocalVariableDeclaration']
copynode -0.8258925974369049:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'copy-LocalVariableDeclaration']
copynode -9.971611645072699:  root ReturnStatement expression Literal ^ ^ ^ ^ ; ['root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> Literal']
copynode -6.146259069442749:  root add ^ BreakStatement_ter ^ StatementExpression ^ ^ ; ['root -> add', 'root -> BreakStatement_ter', 'root -> StatementExpression']
copynode -6.146259069442749:  root add ^ BreakStatement_ter ^ IfStatement ^ ^ ; ['root -> add', 'root -> BreakStatement_ter', 'root -> IfStatement']
copynode -5.3703248500823975:  root add ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer This selectors MethodInvocation member getRowDimension_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> LocalVariableDeclaration', 'copy-LocalVariableDeclaration']
copynode -0.8258925974369049:  root modified ^ LocalVariableDeclaration type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name loc5 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'copy-LocalVariableDeclaration']
copynode -5.3703248500823975:  root add ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc4 ^ ^ initializer MemberReference selectors ArraySelector index MemberReference member loc3 ^ ^ ^ ^ ^ ^ member data_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> LocalVariableDeclaration', 'copy-LocalVariableDeclaration']
copynode -5.3703248500823975:  root add ^ LocalVariableDeclaration modifiers ^ annotations ^ type ^ declarators ^ ^ ^ ; ['root -> add', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers annotations type declarators']
copynode -5.486079931259155:  root add ^ ReturnStatement_ter ^ ReturnStatement ^ ^ ; ['root -> add', 'root -> ReturnStatement_ter', 'root -> ReturnStatement']
copynode -5.424457311630249:  root add ^ control par0 ^ ^ ^ ; ['root -> add', 'root -> control', 'copy-FormalParameter']
copynode -5.3703248500823975:  root add ^ LocalVariableDeclaration type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name loc5 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> LocalVariableDeclaration', 'copy-LocalVariableDeclaration']
copynode -9.971611645072699:  root ReturnStatement expression MemberReference ^ ^ ^ ^ ; ['root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MemberReference']
copynode -5.125048935413361:  root modified ^ StatementExpression expression Assignment expressionl MemberReference selectors ArraySelector index MemberReference member loc3 ^ ^ ^ ^ ^ ^ member loc2 ^ ^ ^ ^ value MemberReference member loc5 ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> StatementExpression', 'copy-StatementExpression']
copynode -5.486079931259155:  root add ^ ReturnStatement_ter ^ BreakStatement_ter ^ ^ ; ['root -> add', 'root -> ReturnStatement_ter', 'root -> BreakStatement_ter']
copynode -6.146259069442749:  root add ^ BreakStatement_ter ^ ReturnStatement ^ ^ ; ['root -> add', 'root -> BreakStatement_ter', 'root -> ReturnStatement']
copynode -5.486079931259155:  root add ^ ReturnStatement_ter ^ ContinueStatement_ter ^ ^ ; ['root -> add', 'root -> ReturnStatement_ter', 'root -> ContinueStatement_ter']
copynode -6.899089574813843:  root add ^ ContinueStatement_ter ^ IfStatement ^ ^ ; ['root -> add', 'root -> ContinueStatement_ter', 'root -> IfStatement']
copynode -0.8258925974369049:  root modified ^ LocalVariableDeclaration unknown ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'start -> unknown']
copynode -6.146259069442749:  root add ^ BreakStatement_ter ^ BreakStatement_ter ^ ^ ; ['root -> add', 'root -> BreakStatement_ter', 'root -> BreakStatement_ter']
copynode -1.874237596988678:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  prefix_operators ^ qualifier ^ selectors ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> prefix_operators qualifier selectors member']
copynode -6.899089574813843:  root add ^ ContinueStatement_ter ^ StatementExpression ^ ^ ; ['root -> add', 'root -> ContinueStatement_ter', 'root -> StatementExpression']
copynode -11.26936474815011:  root StatementExpression expression MethodInvocation ^ ^ ^ ^ ; ['root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation']
copynode -6.146259069442749:  root add ^ BreakStatement_ter ^ ContinueStatement_ter ^ ^ ; ['root -> add', 'root -> BreakStatement_ter', 'root -> ContinueStatement_ter']
copynode -11.617057535448112:  root IfStatement condition BinaryOperation ^ ^ ^ ^ ; ['root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation']
copynode -10.704013466835022:  root return_type ReferenceType name IllegalArgumentException_ter ^ ^ ^ ^ ^ ; ['root -> return_type', 'return_type -> ReferenceType', 'copy-ReferenceType']
copynode -1.9397521615028381:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ operandr MemberReference member loc1 ^ ^ ^ ^ ^ ^ then_statement BlockStatement statements ThrowStatement expression ClassCreator type ReferenceType name IllegalArgumentException_ter ^ ^ ^ ^ arguments Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'copy-IfStatement']
copynode -5.486079931259155:  root add ^ ReturnStatement_ter ^ ReturnStatement_ter ^ ^ ; ['root -> add', 'root -> ReturnStatement_ter', 'root -> ReturnStatement_ter']
copynode -11.26936474815011:  root StatementExpression expression Assignment ^ ^ ^ ^ ; ['root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment']
copynode -11.361947685480118:  root MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  member loc1 ^ ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> member', 'member -> loc1']
copynode -6.146259069442749:  root add ^ BreakStatement_ter ^ ReturnStatement_ter ^ ^ ; ['root -> add', 'root -> BreakStatement_ter', 'root -> ReturnStatement_ter']
copynode -1.874237596988678:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  postfix_operators ^ selectors ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> postfix_operators selectors member']
copynode -12.396180748939514:  root MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  qualifier par0 ^ ^ member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0']
copynode -5.486079931259155:  root add ^ ReturnStatement_ter ^ control ^ ^ ; ['root -> add', 'root -> ReturnStatement_ter', 'root -> control']
copynode -11.788679718971252:  root return_type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ ^ ; ['root -> return_type', 'return_type -> BasicType', 'copy-BasicType']
copynode -6.146259069442749:  root add ^ BreakStatement_ter ^ control ^ ^ ; ['root -> add', 'root -> BreakStatement_ter', 'root -> control']
before@3 batch0 x: -14.267920790240169: root StatementExpression expression This ^ ^ ^ ^  ; ['root -> StatementExpression', 'StatementExpression -> expression', 'expression -> This']
after@3 batch0 x: -14.267920790240169: root StatementExpression expression This ^ ^ ^ ^  ; ['root -> StatementExpression', 'StatementExpression -> expression', 'expression -> This']
before@3 batch1 x: -12.794973134994507: root add ^ BreakStatement_ter ^ control ^ ^  ; ['root -> add', 'root -> BreakStatement_ter', 'root -> control']
after@3 batch1 x: -12.794973134994507: root add ^ BreakStatement_ter ^ control ^ ^  ; ['root -> add', 'root -> BreakStatement_ter', 'root -> control']
copynode -0.6405863165855408:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ^ declarators ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers']
copynode -1.6088126860558987:  root add ^ IfStatement condition BinaryOperation ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation']
copynode -2.4207249581813812:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  qualifier par0 ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0']
copynode -2.6198308374732733:  root add ^ StatementExpression expression MethodInvocation ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation']
copynode -1.6088126860558987:  root add ^ IfStatement condition MethodInvocation ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation']
copynode -3.133087307214737:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  member loc1 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> loc1']
copynode -2.6198308374732733:  root add ^ StatementExpression expression Assignment ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment']
copynode -4.631506562232971:  root modified ^ LocalVariableDeclaration type ReferenceType ^ ^ declarators ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType']
copynode -4.390080207027495:  root modified ^ StatementExpression expression Assignment ^ ^ ^ ^ ; ['root -> modified', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment']
copynode -0.6405863165855408:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ^ declarators ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers']
copynode -2.6198308374732733:  root add ^ StatementExpression expression This ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> This']
copynode -3.133087307214737:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  member unknown ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'start -> unknown']
copynode -1.6088126860558987:  root add ^ IfStatement condition MemberReference ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference']
copynode -5.312475800514221:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ annotations ^ type ^ declarators ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers annotations type declarators', 'copy-modifiers']
copynode -1.6088126860558987:  root add ^ IfStatement condition This ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> This']
copynode -3.133087307214737:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  member loc0 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> loc0']
copynode -5.292831093072891:  root add ^ ReturnStatement expression Literal ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> Literal']
copynode -4.850362807512283:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  selectors ArraySelector ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> selectors member', 'selectors -> ArraySelector']
copynode -3.133087307214737:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  member par0 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> par0']
copynode -0.6405863165855408:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ^ declarators ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'modifiers -> final_ter']
copynode -2.6198308374732733:  root add ^ StatementExpression expression MemberReference ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MemberReference']
copynode -4.390080207027495:  root modified ^ StatementExpression expression MethodInvocation ^ ^ ^ ^ ; ['root -> modified', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation']
copynode -2.4207249581813812:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  qualifier unknown ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'start -> unknown']
copynode -2.4207249581813812:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  qualifier loc0 ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'qualifier -> loc0']
copynode -2.6198308374732733:  root add ^ StatementExpression expression SuperMethodInvocation ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> SuperMethodInvocation']
copynode -0.6405863165855408:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ^ declarators ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers']
copynode -4.850362807512283:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  selectors ArraySelector index MemberReference member loc5 ^ ^ ^ ^ ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> selectors member', 'copy-selectors']
copynode -4.850362807512283:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  selectors ArraySelector index MemberReference member loc3 ^ ^ ^ ^ ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> selectors member', 'copy-selectors']
copynode -6.164722889661789:  root add ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ^ declarators ^ ^ ^ ; ['root -> add', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers']
copynode -3.133087307214737:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  member loc2 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> loc2']
copynode -5.292831093072891:  root add ^ ReturnStatement expression MemberReference ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MemberReference']
copynode -2.4207249581813812:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  qualifier loc1 ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'qualifier -> loc1']
copynode -6.978567391633987:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  qualifier par0 ^ ^ selectors ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier selectors member', 'qualifier -> par0']
copynode -4.850362807512283:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  selectors ArraySelector index MemberReference member loc3 ^ ^ ^ ^ ^ ArraySelector index MemberReference member loc5 ^ ^ ^ ^ ^ MethodInvocation arguments MemberReference selectors ArraySelector index MemberReference member loc5 ^ ^ ^ ^ ^ ^ member par0 ^ ^ ^ ^ member multiply_ter ^ ^ ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> selectors member', 'copy-selectors']
copynode -6.164722889661789:  root add ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ^ declarators ^ ^ ^ ; ['root -> add', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers']
copynode -2.4207249581813812:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  qualifier par1 ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par1']
copynode -2.4207249581813812:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  qualifier par0 ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'copy-qualifier']
copynode -4.390080207027495:  root modified ^ StatementExpression expression This ^ ^ ^ ^ ; ['root -> modified', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> This']
copynode -7.22322690486908:  root add ^ LocalVariableDeclaration type ReferenceType ^ ^ declarators ^ ^ ^ ; ['root -> add', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType']
copynode -2.6198308374732733:  root add ^ StatementExpression expression Cast ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Cast']
copynode -6.41530779004097:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  prefix_operators !_ter ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> prefix_operators member', 'prefix_operators -> !_ter']
copynode -4.390080207027495:  root modified ^ StatementExpression expression MemberReference ^ ^ ^ ^ ; ['root -> modified', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MemberReference']
copynode -3.133087307214737:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  member ZERO_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'copy-member']
copynode -7.649730324745178:  root add ^ ReturnStatement expression MemberReference member loc2 ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'copy-ReturnStatement', 'root -> End']
copynode -3.133087307214737:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  member data_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'copy-member']
copynode -7.403580978512764:  root add ^ AssertStatement condition BinaryOperation ^ ^ ^ ^ ; ['root -> add', 'root -> AssertStatement', 'AssertStatement -> condition', 'condition -> BinaryOperation']
copynode -1.6088126860558987:  root add ^ IfStatement condition Cast ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> Cast']
copynode -7.740542650222778:  root add ^ StatementExpression expression Assignment expressionl MemberReference member loc4 ^ ^ ^ ^ value MethodInvocation qualifier loc4 ^ ^ arguments MemberReference selectors ArraySelector index MemberReference member loc3 ^ ^ ^ ^ ^ ArraySelector index MemberReference member loc5 ^ ^ ^ ^ ^ MethodInvocation arguments MemberReference selectors ArraySelector index MemberReference member loc5 ^ ^ ^ ^ ^ ^ member par0 ^ ^ ^ ^ member multiply_ter ^ ^ ^ ^ member data_ter ^ ^ ^ ^ member add_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'copy-StatementExpression', 'root -> End']
copynode -6.41530779004097:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  prefix_operators ++_ter ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> prefix_operators member', 'prefix_operators -> ++_ter']
copynode -7.9849172830581665:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer This selectors MethodInvocation member getRowDimension_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'copy-LocalVariableDeclaration', 'root -> End']
copynode -4.850362807512283:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  selectors MethodInvocation member getColumnDimension_ter ^ ^ ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> selectors member', 'copy-selectors']
copynode -1.6088126860558987:  root add ^ IfStatement condition Literal ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> Literal']
copynode -3.133087307214737:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  member par1 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> par1']
copynode -4.390080207027495:  root modified ^ StatementExpression expression SuperMethodInvocation ^ ^ ^ ^ ; ['root -> modified', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> SuperMethodInvocation']
copynode -1.6088126860558987:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ operandr This selectors MethodInvocation member getColumnDimension_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'copy-condition']
copynode -6.41530779004097:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  prefix_operators -_ter ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> prefix_operators member', 'prefix_operators -> -_ter']
copynode -7.949475726112723:  root add ^ WhileStatement condition BinaryOperation ^ ^ ^ ^ ; ['root -> add', 'root -> WhileStatement', 'WhileStatement -> condition', 'condition -> BinaryOperation']
copynode -6.41530779004097:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  prefix_operators ~_ter ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> prefix_operators member', 'prefix_operators -> ~_ter']
copynode -2.6198308374732733:  root add ^ StatementExpression expression BinaryOperation ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> BinaryOperation']
copynode -8.358780145645142:  root add ^ control EnhancedForControl var ^ iterable ^ ^ ^ ^ ; ['root -> add', 'root -> control', 'control -> EnhancedForControl', 'EnhancedForControl -> var iterable']
copynode -5.292831093072891:  root add ^ ReturnStatement expression BinaryOperation ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation']
copynode -6.164722889661789:  root add ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ^ declarators ^ ^ ^ ; ['root -> add', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers']
copynode -8.05597086250782:  root modified ^ control ForControl init ^ condition ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update']
copynode -6.41530779004097:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  prefix_operators --_ter ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> prefix_operators member', 'prefix_operators -> --_ter']
copynode -1.6088126860558987:  root add ^ IfStatement condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr MemberReference member loc1 ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'copy-condition']
copynode -8.624954527971568:  root modified ^ IfStatement condition BinaryOperation ^ ^ ^ ^ ; ['root -> modified', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation']
copynode -8.667325258255005:  root add ^ StatementExpression expression Assignment expressionl MemberReference selectors ArraySelector index MemberReference member loc3 ^ ^ ^ ^ ^ ^ member loc2 ^ ^ ^ ^ value MemberReference member loc4 ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'copy-StatementExpression', 'root -> End']
copynode -4.850362807512283:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  selectors MethodInvocation member getColumnDimension_ter ^ ^ ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> selectors member', 'copy-selectors']
copynode -3.133087307214737:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  member length_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'copy-member']
copynode -8.909158825874329:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc1 ^ ^ initializer This selectors MethodInvocation member getColumnDimension_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'copy-LocalVariableDeclaration', 'root -> End']
copynode -4.850362807512283:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  selectors MethodInvocation member getRowDimension_ter ^ ^ ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> selectors member', 'copy-selectors']
copynode -8.242412835359573:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  postfix_operators ++_ter ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> postfix_operators member', 'copy-postfix_operators']
copynode -5.292831093072891:  root add ^ ReturnStatement expression MethodInvocation ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation']
copynode -8.062109261751175:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  prefix_operators !_ter ^ ^ qualifier ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> prefix_operators qualifier member', 'prefix_operators -> !_ter']
copynode -1.6088126860558987:  root add ^ IfStatement condition TernaryExpression ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> TernaryExpression']
copynode -8.693613290786743:  root add ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc3 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc3 ^ ^ ^ ^ operandr MemberReference member loc0 ^ ^ ^ ^ ^ ^ update MemberReference postfix_operators ++_ter ^ ^ member loc3 ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> control', 'copy-control', 'root -> End']
copynode -7.9788697343319654:  root modified ^ parameters FormalParameter modifiers ^ type ^ name ^ ^ ^ ^ ; ['root -> modified', 'root -> parameters', 'parameters -> FormalParameter', 'FormalParameter -> modifiers type name']
copynode -7.9788697343319654:  root modified ^ parameters FormalParameter type ^ name ^ ^ ^ ^ ; ['root -> modified', 'root -> parameters', 'parameters -> FormalParameter', 'FormalParameter -> type name']
copynode -8.267662286758423:  root add ^ control ForControl init ^ condition ^ update ^ ^ ^ ^ ; ['root -> add', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update']
copynode -8.696377038955688:  root add ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc5 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr MemberReference member loc1 ^ ^ ^ ^ ^ ^ update MemberReference postfix_operators ++_ter ^ ^ member loc5 ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> control', 'copy-control', 'root -> End']
copynode -2.6198308374732733:  root add ^ StatementExpression expression SuperConstructorInvocation_ter ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> SuperConstructorInvocation_ter']
copynode -9.260799437761307:  root modified ^ StatementExpression expression Assignment expressionl MemberReference member loc4 ^ ^ ^ ^ value MethodInvocation qualifier loc4 ^ ^ arguments MemberReference selectors ArraySelector index MemberReference member loc3 ^ ^ ^ ^ ^ ArraySelector index MemberReference member loc5 ^ ^ ^ ^ ^ MethodInvocation arguments MemberReference selectors ArraySelector index MemberReference member loc5 ^ ^ ^ ^ ^ ^ member par0 ^ ^ ^ ^ member multiply_ter ^ ^ ^ ^ member data_ter ^ ^ ^ ^ member add_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> StatementExpression', 'copy-StatementExpression', 'root -> End']
copynode -3.133087307214737:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  member loc3 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> loc3']
copynode -8.05597086250782:  root modified ^ control ForControl init ^ condition ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition']
copynode -4.850362807512283:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  selectors MemberReference ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> selectors member', 'selectors -> MemberReference']
copynode -8.653439104557037:  root add ^ parameters FormalParameter modifiers ^ type ^ name ^ ^ ^ ^ ; ['root -> add', 'root -> parameters', 'parameters -> FormalParameter', 'FormalParameter -> modifiers type name']
copynode -8.242412835359573:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  postfix_operators ++_ter ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> postfix_operators member', 'copy-postfix_operators']
copynode -9.530733227729797:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'copy-LocalVariableDeclaration', 'root -> End']
copynode -5.312475800514221:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ annotations ^ type ^ declarators ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers annotations type declarators', 'copy-modifiers']
copynode -7.403580978512764:  root add ^ AssertStatement condition MethodInvocation ^ ^ ^ ^ ; ['root -> add', 'root -> AssertStatement', 'AssertStatement -> condition', 'condition -> MethodInvocation']
copynode -8.653439104557037:  root add ^ parameters FormalParameter type ^ name ^ ^ ^ ^ ; ['root -> add', 'root -> parameters', 'parameters -> FormalParameter', 'FormalParameter -> type name']
copynode -2.6198308374732733:  root add ^ StatementExpression expression Literal ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Literal']
copynode -2.6198308374732733:  root add ^ StatementExpression expression ClassCreator ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> ClassCreator']
copynode -8.062109261751175:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  prefix_operators -_ter ^ ^ qualifier ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> prefix_operators qualifier member', 'prefix_operators -> -_ter']
copynode -9.302676810882986:  root modified ^ ReturnStatement expression ArrayCreator ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> ArrayCreator']
copynode -9.792211651802063:  root modified ^ LocalVariableDeclaration type ReferenceType name BigDecimal_ter ^ ^ ^ ^ declarators VariableDeclarator name loc4 ^ ^ initializer MemberReference member ZERO_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'copy-LocalVariableDeclaration', 'root -> End']
copynode -8.062109261751175:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  prefix_operators ++_ter ^ ^ qualifier ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> prefix_operators qualifier member', 'prefix_operators -> ++_ter']
copynode -0.8613652735948563:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ^ declarators ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers']
copynode -1.9401345388032496:  root add ^ IfStatement condition BinaryOperation ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation']
copynode -2.306586802005768:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  qualifier par0 ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0']
copynode -2.238281538709998:  root add ^ StatementExpression expression MethodInvocation ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation']
copynode -2.238281538709998:  root add ^ StatementExpression expression Assignment ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment']
copynode -1.9401345388032496:  root add ^ IfStatement condition MethodInvocation ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation']
copynode -3.082298770546913:  root add ^ ReturnStatement expression Literal ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> Literal']
copynode -3.1877311170101166:  root modified ^ BasicType-BasicType name double_ter ^ ^ ^  name long_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-BasicType', 'BasicType -> name', 'name -> long_ter']
copynode -3.103141486644745:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  member loc1 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> loc1']
copynode -3.1877311170101166:  root modified ^ BasicType-BasicType name double_ter ^ ^ ^  name int_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-BasicType', 'BasicType -> name', 'name -> int_ter']
copynode -3.082298770546913:  root add ^ ReturnStatement expression MemberReference ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MemberReference']
copynode -1.9401345388032496:  root add ^ IfStatement condition MemberReference ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference']
copynode -4.827715158462524:  root add ^ ReturnStatement expression MemberReference member loc2 ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'copy-ReturnStatement', 'root -> End']
copynode -3.103141486644745:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  member loc0 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> loc0']
copynode -5.0199481546878815:  root modified ^ LocalVariableDeclaration type BasicType ^ ^ declarators ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType']
copynode -2.238281538709998:  root add ^ StatementExpression expression MemberReference ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MemberReference']
copynode -4.877267569303513:  root modified ^ BasicType-BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^  name long_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-BasicType', 'BasicType -> name', 'name -> long_ter']
copynode -3.103141486644745:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  member unknown ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'start -> unknown']
copynode -3.103141486644745:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  member par0 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> par0']
copynode -2.238281538709998:  root add ^ StatementExpression expression This ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> This']
copynode -3.103141486644745:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  member loc2 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> loc2']
copynode -5.663606941699982:  root modified ^ BasicType-BasicType name double_ter ^ ^ ^  name int_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-BasicType', 'copy-BasicType', 'root -> End']
copynode -5.773224174976349:  root modified ^ BasicType-BasicType name double_ter ^ ^ ^  name int_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-BasicType', 'copy-BasicType', 'root -> End']
copynode -5.120173990726471:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  selectors ArraySelector ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> selectors member', 'selectors -> ArraySelector']
copynode -5.13502870220691:  root modified ^ StatementExpression expression Assignment ^ ^ ^ ^ ; ['root -> modified', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment']
copynode -2.238281538709998:  root add ^ StatementExpression expression SuperMethodInvocation ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> SuperMethodInvocation']
copynode -5.88169127702713:  root modified ^ BasicType-BasicType name double_ter ^ ^ ^  name int_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-BasicType', 'copy-BasicType', 'root -> End']
copynode -5.984375298023224:  root modified ^ BasicType-BasicType name double_ter ^ ^ ^  name double_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-BasicType', 'copy-BasicType', 'root -> End']
copynode -4.877267569303513:  root modified ^ BasicType-BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^  name int_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-BasicType', 'BasicType -> name', 'name -> int_ter']
copynode -6.034313499927521:  root modified ^ BasicType-BasicType name double_ter ^ ^ ^  name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-BasicType', 'copy-BasicType', 'root -> End']
copynode -0.8613652735948563:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ^ declarators ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'modifiers -> final_ter']
copynode -1.9401345388032496:  root add ^ IfStatement condition This ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> This']
copynode -3.103141486644745:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  member loc3 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> loc3']
copynode -6.368107467889786:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ annotations ^ type ^ declarators ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers annotations type declarators', 'copy-modifiers']
copynode -3.103141486644745:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  member loc4 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> loc4']
copynode -6.408989250659943:  root modified ^ BasicType-BasicType name double_ter ^ ^ ^  name int_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-BasicType', 'copy-BasicType', 'root -> End']
copynode -2.306586802005768:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  qualifier unknown ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'start -> unknown']
copynode -6.391668319702148:  root add ^ LocalVariableDeclaration type BasicType ^ ^ declarators ^ ^ ^ ; ['root -> add', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType']
copynode -5.13502870220691:  root modified ^ StatementExpression expression MethodInvocation ^ ^ ^ ^ ; ['root -> modified', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation']
copynode -6.041967928409576:  root modified ^ BasicType-BasicType name double_ter ^ ^ ^  name long_ter ^ ^ dimensions ^ ^ ^ ; ['root -> modified', 'copy-BasicType', 'BasicType -> name dimensions', 'name -> long_ter']
copynode -6.404031038284302:  root add ^ StatementExpression expression Assignment expressionl MemberReference member loc5 ^ ^ ^ ^ value BinaryOperation operator *_ter ^ ^ operandl MemberReference selectors ArraySelector index MemberReference member loc6 ^ ^ ^ ^ ^ ^ member loc4 ^ ^ ^ ^ operandr MemberReference selectors ArraySelector index MemberReference member loc6 ^ ^ ^ ^ ^ ^ member par0 ^ ^ ^ ^ ^ ^ type +=_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'copy-StatementExpression', 'root -> End']
copynode -3.082298770546913:  root add ^ ReturnStatement expression MethodInvocation ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation']
copynode -6.561437904834747:  root modified ^ BasicType-BasicType name double_ter ^ ^ ^  name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-BasicType', 'copy-BasicType', 'root -> End']
copynode -3.103141486644745:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  member par1 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> par1']
copynode -6.097040057182312:  root add ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ^ declarators ^ ^ ^ ; ['root -> add', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers']
copynode -6.68294620513916:  root add ^ control EnhancedForControl var ^ iterable ^ ^ ^ ^ ; ['root -> add', 'root -> control', 'control -> EnhancedForControl', 'EnhancedForControl -> var iterable']
copynode -3.082298770546913:  root add ^ ReturnStatement expression BinaryOperation ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation']
copynode -1.9401345388032496:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ operandr MemberReference member loc1 ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'copy-condition']
copynode -3.082298770546913:  root add ^ ReturnStatement expression This_ter ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> This_ter']
copynode -2.306586802005768:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  qualifier par0 ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'copy-qualifier']
copynode -5.120173990726471:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  selectors ArraySelector index MemberReference member loc3 ^ ^ ^ ^ ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> selectors member', 'copy-selectors']
copynode -6.041967928409576:  root modified ^ BasicType-BasicType name double_ter ^ ^ ^  name int_ter ^ ^ dimensions ^ ^ ^ ; ['root -> modified', 'copy-BasicType', 'BasicType -> name dimensions', 'name -> int_ter']
copynode -7.13772588968277:  root modified ^ BasicType-BasicType name double_ter ^ ^ ^  name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-BasicType', 'copy-BasicType', 'root -> End']
copynode -5.13502870220691:  root modified ^ StatementExpression expression MemberReference ^ ^ ^ ^ ; ['root -> modified', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MemberReference']
copynode -0.8613652735948563:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ^ declarators ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers']
copynode -7.240663111209869:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  qualifier par0 ^ ^ selectors ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier selectors member', 'qualifier -> par0']
copynode -5.120173990726471:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  selectors ArraySelector index MemberReference member loc3 ^ ^ ^ ^ ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> selectors member', 'copy-selectors']
copynode -7.373700201511383:  root modified ^ BasicType-BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^  name int_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-BasicType', 'copy-BasicType', 'root -> End']
copynode -1.9401345388032496:  root add ^ IfStatement condition Literal ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> Literal']
copynode -7.2660839557647705:  root add ^ StatementExpression expression Assignment expressionl MemberReference selectors ArraySelector index MemberReference member loc3 ^ ^ ^ ^ ^ ^ member loc2 ^ ^ ^ ^ value MemberReference member loc5 ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'copy-StatementExpression', 'root -> End']
copynode -6.738985300064087:  root add ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr MemberReference member loc1 ^ ^ ^ ^ ^ ^ update MemberReference postfix_operators ++_ter ^ ^ member loc6 ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> control', 'copy-control', 'root -> End']
copynode -7.464825689792633:  root modified ^ BasicType-BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^  name int_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-BasicType', 'copy-BasicType', 'root -> End']
copynode -5.120173990726471:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  selectors ArraySelector index MemberReference member loc6 ^ ^ ^ ^ ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> selectors member', 'copy-selectors']
copynode -5.120173990726471:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  selectors ArraySelector index MemberReference member loc6 ^ ^ ^ ^ ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> selectors member', 'copy-selectors']
copynode -2.238281538709998:  root add ^ StatementExpression expression Cast ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Cast']
copynode -2.306586802005768:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  qualifier loc0 ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'qualifier -> loc0']
copynode -3.082298770546913:  root add ^ ReturnStatement expression ArrayCreator ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> ArrayCreator']
copynode -1.9401345388032496:  root add ^ IfStatement condition Cast ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> Cast']
copynode -7.071361780166626:  root add ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc3 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc3 ^ ^ ^ ^ operandr MemberReference member loc0 ^ ^ ^ ^ ^ ^ update MemberReference postfix_operators ++_ter ^ ^ member loc3 ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> control', 'copy-control', 'root -> End']
copynode -6.097040057182312:  root add ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ^ declarators ^ ^ ^ ; ['root -> add', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers']
copynode -7.778317511081696:  root modified ^ BasicType-BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^  name int_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-BasicType', 'copy-BasicType', 'root -> End']
copynode -0.8613652735948563:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ^ declarators ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers']
copynode -2.306586802005768:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  qualifier par1 ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par1']
copynode -6.411149561405182:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  prefix_operators -_ter ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> prefix_operators member', 'prefix_operators -> -_ter']
copynode -3.1877311170101166:  root modified ^ BasicType-BasicType name double_ter ^ ^ ^  name boolean_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-BasicType', 'BasicType -> name', 'name -> boolean_ter']
copynode -3.103141486644745:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  member par2 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> par2']
copynode -7.430780231952667:  root modified ^ BasicType-BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^  name long_ter ^ ^ dimensions ^ ^ ^ ; ['root -> modified', 'copy-BasicType', 'BasicType -> name dimensions', 'name -> long_ter']
copynode -6.411149561405182:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  prefix_operators ~_ter ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> prefix_operators member', 'prefix_operators -> ~_ter']
copynode -7.914473593235016:  root modified ^ BasicType-BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^  name double_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-BasicType', 'copy-BasicType', 'root -> End']
copynode -7.351590767502785:  root add ^ AssertStatement condition BinaryOperation ^ ^ ^ ^ ; ['root -> add', 'root -> AssertStatement', 'AssertStatement -> condition', 'condition -> BinaryOperation']
copynode -7.920197546482086:  root modified ^ BasicType-BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^  name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-BasicType', 'copy-BasicType', 'root -> End']
copynode -5.13502870220691:  root modified ^ StatementExpression expression This ^ ^ ^ ^ ; ['root -> modified', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> This']
copynode -6.097040057182312:  root add ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ^ declarators ^ ^ ^ ; ['root -> add', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers']
copynode -3.082298770546913:  root add ^ ReturnStatement expression ClassCreator ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> ClassCreator']
copynode -7.319037556648254:  root add ^ control ForControl init ^ condition ^ update ^ ^ ^ ^ ; ['root -> add', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update']
copynode -8.100974142551422:  root modified ^ BasicType-BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^  name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-BasicType', 'copy-BasicType', 'root -> End']
copynode -6.411149561405182:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  prefix_operators !_ter ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> prefix_operators member', 'prefix_operators -> !_ter']
copynode -6.411149561405182:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  prefix_operators ++_ter ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> prefix_operators member', 'prefix_operators -> ++_ter']
copynode -4.827715158462524:  root add ^ ReturnStatement expression MemberReference member loc2 ^ ^ ^ ^ ^ IfStatement ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'copy-ReturnStatement', 'root -> IfStatement']
copynode -3.082298770546913:  root add ^ ReturnStatement expression ClassCreator type ReferenceType name IllegalArgumentException_ter ^ ^ ^ ^ arguments Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'copy-expression']
copynode -3.103141486644745:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  member data_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'copy-member']
copynode -0.8613652735948563:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ^ declarators ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers']
copynode -7.816800232976675:  root add ^ WhileStatement condition BinaryOperation ^ ^ ^ ^ ; ['root -> add', 'root -> WhileStatement', 'WhileStatement -> condition', 'condition -> BinaryOperation']
copynode -6.738985300064087:  root add ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr MemberReference member loc1 ^ ^ ^ ^ ^ ^ update MemberReference postfix_operators ++_ter ^ ^ member loc6 ^ ^ ^ ^ ^ ^ StatementExpression ^ ^ ; ['root -> add', 'root -> control', 'copy-control', 'root -> StatementExpression']
copynode -8.35046449303627:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc1 ^ ^ initializer This selectors MethodInvocation member getColumnDimension_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'copy-LocalVariableDeclaration', 'root -> End']
copynode -8.366692215204239:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer This selectors MethodInvocation member getRowDimension_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'copy-LocalVariableDeclaration', 'root -> End']
copynode -8.390671789646149:  root modified ^ BasicType-BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^  name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-BasicType', 'copy-BasicType', 'root -> End']
before@4 batch0 x: -9.835870057344437: root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  prefix_operators ++_ter ^ ^ qualifier ^ member ^ ^ ^  ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> prefix_operators qualifier member', 'prefix_operators -> ++_ter']
after@4 batch0 x: -9.835870057344437: root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  prefix_operators ++_ter ^ ^ qualifier ^ member ^ ^ ^  ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> prefix_operators qualifier member', 'prefix_operators -> ++_ter']
before@4 batch1 x: -8.391666966956109: root modified ^ BasicType-BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^  name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^  ; ['root -> modified', 'copy-BasicType', 'copy-BasicType', 'root -> End']
after@4 batch1 x: -8.391666966956109: root modified ^ BasicType-BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^  name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^  ; ['root -> modified', 'copy-BasicType', 'copy-BasicType', 'root -> End']
copynode -0.6617973167449236:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType ^ ^ declarators ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType']
copynode -1.8853031359612942:  root add ^ IfStatement condition BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
copynode -2.4999161288142204:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member']
copynode -3.589327782392502:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  member loc1 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> loc1', 'root -> End']
copynode -3.0670843925327063:  root add ^ StatementExpression expression MethodInvocation qualifier ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member']
copynode -4.237221708521247:  root add ^ StatementExpression expression Assignment expressionl ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type']
copynode -2.4999161288142204:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  qualifier par0 ^ ^ member unknown ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'start -> unknown']
copynode -3.0670843925327063:  root add ^ StatementExpression expression MethodInvocation qualifier ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier member']
copynode -3.3088012896478176:  root add ^ IfStatement condition MethodInvocation qualifier ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier member']
copynode -4.632092230138369:  root modified ^ LocalVariableDeclaration type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType']
copynode -4.753276550211012:  root modified ^ StatementExpression expression Assignment expressionl ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type']
copynode -5.011046350002289:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType ^ ^ declarators ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType']
copynode -3.3088012896478176:  root add ^ IfStatement condition MethodInvocation member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> member']
copynode -5.101542621850967:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  member unknown ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'start -> unknown', 'root -> End']
copynode -5.059186210855842:  root add ^ StatementExpression expression This selectors ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> This', 'This -> selectors']
copynode -3.3088012896478176:  root add ^ IfStatement condition MethodInvocation qualifier ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier arguments member']
copynode -3.0670843925327063:  root add ^ StatementExpression expression MethodInvocation arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> arguments member']
copynode -3.0670843925327063:  root add ^ StatementExpression expression MethodInvocation member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> member']
copynode -3.3088012896478176:  root add ^ IfStatement condition MethodInvocation prefix_operators ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> prefix_operators member']
copynode -5.583031564950943:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  member loc0 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> loc0', 'root -> End']
copynode -5.6231755912303925:  root add ^ ReturnStatement expression Literal value ^ ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> Literal', 'Literal -> value']
copynode -5.678852945566177:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  member par0 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> par0', 'root -> End']
copynode -5.432292576879263:  root add ^ IfStatement condition This selectors ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> This', 'This -> selectors']
copynode -5.179950352758169:  root add ^ IfStatement condition MemberReference member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference', 'MemberReference -> member']
copynode -3.3088012896478176:  root add ^ IfStatement condition MethodInvocation prefix_operators ^ qualifier ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> prefix_operators qualifier member']
copynode -5.90599912405014:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType ^ ^ declarators ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'modifiers -> final_ter', 'type -> ReferenceType']
copynode -2.4999161288142204:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  qualifier par0 ^ ^ member data_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member']
copynode -6.258848279714584:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  qualifier unknown ^ ^ member length_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'start -> unknown', 'copy-member']
copynode -5.179950352758169:  root add ^ IfStatement condition MemberReference prefix_operators ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference', 'MemberReference -> prefix_operators member']
copynode -3.3088012896478176:  root add ^ IfStatement condition MethodInvocation prefix_operators ^ qualifier ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> prefix_operators qualifier arguments member']
copynode -5.62751367688179:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  selectors ArraySelector index ^ ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> selectors member', 'selectors -> ArraySelector', 'ArraySelector -> index']
copynode -6.563412606716156:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType ^ ^ declarators ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType']
copynode -6.286447614431381:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  qualifier loc0 ^ ^ member length_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'qualifier -> loc0', 'copy-member']
copynode -3.3088012896478176:  root add ^ IfStatement condition MethodInvocation qualifier ^ selectors ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier selectors member']
copynode -3.0670843925327063:  root add ^ StatementExpression expression MethodInvocation qualifier ^ selectors ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier selectors member']
copynode -6.052157631143928:  root add ^ StatementExpression expression MemberReference postfix_operators ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MemberReference', 'MemberReference -> postfix_operators member']
copynode -3.3088012896478176:  root add ^ IfStatement condition MethodInvocation arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> arguments member']
copynode -6.891264647245407:  root add ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType ^ ^ declarators ^ ^ ^ ; ['root -> add', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType']
copynode -6.930292993783951:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  member loc2 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> loc2', 'root -> End']
copynode -6.370902290567756:  root add ^ StatementExpression expression SuperMethodInvocation arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> SuperMethodInvocation', 'SuperMethodInvocation -> arguments member']
copynode -6.631959229707718:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  selectors ArraySelector index MemberReference member loc5 ^ ^ ^ ^ ^ ^ member par0 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> selectors member', 'copy-selectors', 'member -> par0']
copynode -3.3088012896478176:  root add ^ IfStatement condition MethodInvocation prefix_operators ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> prefix_operators arguments member']
copynode -7.1047408282756805:  root add ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType ^ ^ declarators ^ ^ ^ ; ['root -> add', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType']
copynode -6.052157631143928:  root add ^ StatementExpression expression MemberReference selectors ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MemberReference', 'MemberReference -> selectors member']
copynode -2.4999161288142204:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  qualifier par0 ^ ^ member ZERO_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member']
copynode -2.4999161288142204:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member']
copynode -7.037994474172592:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  qualifier loc1 ^ ^ member length_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'qualifier -> loc1', 'copy-member']
copynode -6.835904508829117:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  selectors ArraySelector index MemberReference member loc3 ^ ^ ^ ^ ^ ^ member par0 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> selectors member', 'copy-selectors', 'member -> par0']
copynode -5.432292576879263:  root add ^ IfStatement condition This prefix_operators ^ selectors ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> This', 'This -> prefix_operators selectors']
copynode -7.184570401906967:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  qualifier par1 ^ ^ member length_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par1', 'copy-member']
copynode -7.2695996426045895:  root add ^ LocalVariableDeclaration type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators ^ ^ ^ ; ['root -> add', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType']
copynode -5.432292576879263:  root add ^ IfStatement condition This qualifier ^ selectors ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> This', 'This -> qualifier selectors']
copynode -7.098624736070633:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  selectors ArraySelector index MemberReference member loc3 ^ ^ ^ ^ ^ ArraySelector index MemberReference member loc5 ^ ^ ^ ^ ^ MethodInvocation arguments MemberReference selectors ArraySelector index MemberReference member loc5 ^ ^ ^ ^ ^ ^ member par0 ^ ^ ^ ^ member multiply_ter ^ ^ ^ ^ member par0 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> selectors member', 'copy-selectors', 'member -> par0']
copynode -7.021098166704178:  root add ^ ReturnStatement expression MemberReference member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MemberReference', 'MemberReference -> member']
copynode -6.172036879695952:  root modified ^ StatementExpression expression MethodInvocation qualifier ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier member']
copynode -2.4999161288142204:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  qualifier par0 ^ ^ member par0 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'member -> par0']
copynode -7.222862809896469:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  qualifier par0 ^ ^ member unknown ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'copy-qualifier', 'start -> unknown']
copynode -7.686831623315811:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  member ZERO_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'copy-member', 'root -> End']
copynode -5.179950352758169:  root add ^ IfStatement condition MemberReference qualifier ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference', 'MemberReference -> qualifier member']
copynode -3.3088012896478176:  root add ^ IfStatement condition MethodInvocation prefix_operators ^ qualifier ^ selectors ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> prefix_operators qualifier selectors member']
copynode -7.770575672388077:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  member data_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'copy-member', 'root -> End']
copynode -5.62751367688179:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  selectors ArraySelector index MemberReference member loc3 ^ ^ ^ ^ ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> selectors member', 'selectors -> ArraySelector', 'copy-ArraySelector']
copynode -3.0670843925327063:  root add ^ StatementExpression expression MethodInvocation selectors ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> selectors member']
copynode -7.776993677020073:  root add ^ AssertStatement condition BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> AssertStatement', 'AssertStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
copynode -7.670623534359038:  root modified ^ StatementExpression expression MemberReference postfix_operators ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MemberReference', 'MemberReference -> postfix_operators member']
copynode -5.62751367688179:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  selectors ArraySelector index MemberReference member loc5 ^ ^ ^ ^ ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> selectors member', 'selectors -> ArraySelector', 'copy-ArraySelector']
copynode -7.27990840934217:  root add ^ StatementExpression expression Cast type ^ expression ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Cast', 'Cast -> type expression']
copynode -7.058066293597221:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  qualifier par0 ^ ^ selectors ArraySelector ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier selectors member', 'qualifier -> par0', 'selectors -> ArraySelector']
copynode -6.286447614431381:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  qualifier loc0 ^ ^ member unknown ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'qualifier -> loc0', 'start -> unknown']
copynode -6.370902290567756:  root add ^ StatementExpression expression SuperMethodInvocation member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> SuperMethodInvocation', 'SuperMethodInvocation -> member']
copynode -5.62751367688179:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  selectors ArraySelector index MemberReference member loc5 ^ ^ ^ ^ ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> selectors member', 'selectors -> ArraySelector', 'copy-ArraySelector']
copynode -6.052157631143928:  root add ^ StatementExpression expression MemberReference postfix_operators ^ selectors ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MemberReference', 'MemberReference -> postfix_operators selectors member']
copynode -6.172036879695952:  root modified ^ StatementExpression expression MethodInvocation qualifier ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member']
copynode -8.050974994897842:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  member par1 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> par1', 'root -> End']
copynode -5.62751367688179:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  selectors ArraySelector index MemberReference member loc3 ^ ^ ^ ^ ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> selectors member', 'selectors -> ArraySelector', 'copy-ArraySelector']
copynode -7.8455957137048244:  root add ^ IfStatement condition Cast type ^ expression ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> Cast', 'Cast -> type expression']
copynode -3.0670843925327063:  root add ^ StatementExpression expression MethodInvocation qualifier ^ selectors ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier selectors arguments member']
copynode -0.6617973167449236:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType ^ ^ declarators ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType']
copynode -7.526607662439346:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  prefix_operators !_ter ^ ^ member loc1 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> prefix_operators member', 'prefix_operators -> !_ter', 'member -> loc1']
copynode -2.4999161288142204:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  qualifier par0 ^ ^ member loc1 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'member -> loc1']
copynode -8.256467631086707:  root add ^ WhileStatement condition BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> WhileStatement', 'WhileStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
copynode -7.021098166704178:  root add ^ ReturnStatement expression MemberReference selectors ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MemberReference', 'MemberReference -> selectors member']
copynode -5.179950352758169:  root add ^ IfStatement condition MemberReference prefix_operators ^ qualifier ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference', 'MemberReference -> prefix_operators qualifier member']
copynode -5.179950352758169:  root add ^ IfStatement condition MemberReference selectors ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference', 'MemberReference -> selectors member']
copynode -7.966734081506729:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  prefix_operators ++_ter ^ ^ member loc1 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> prefix_operators member', 'prefix_operators -> ++_ter', 'member -> loc1']
copynode -8.456732481718063:  root add ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType ^ ^ declarators ^ ^ ^ ; ['root -> add', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType']
copynode -8.450043827295303:  root add ^ ReturnStatement expression BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
copynode -8.228211279958487:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ operandr This selectors MethodInvocation member getColumnDimension_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'copy-condition', 'root -> End']
copynode -6.172036879695952:  root modified ^ StatementExpression expression MethodInvocation member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> member']
copynode -7.037994474172592:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  qualifier loc1 ^ ^ member unknown ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'qualifier -> loc1', 'start -> unknown']
copynode -8.281656414270401:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  prefix_operators ~_ter ^ ^ member loc1 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> prefix_operators member', 'prefix_operators -> ~_ter', 'member -> loc1']
copynode -3.0670843925327063:  root add ^ StatementExpression expression MethodInvocation qualifier loc4 ^ ^ arguments MemberReference selectors ArraySelector index MemberReference member loc3 ^ ^ ^ ^ ^ ArraySelector index MemberReference member loc5 ^ ^ ^ ^ ^ MethodInvocation arguments MemberReference selectors ArraySelector index MemberReference member loc5 ^ ^ ^ ^ ^ ^ member par0 ^ ^ ^ ^ member multiply_ter ^ ^ ^ ^ member data_ter ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'copy-MethodInvocation']
copynode -5.059186210855842:  root add ^ StatementExpression expression This qualifier ^ selectors ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> This', 'This -> qualifier selectors']
copynode -7.222862809896469:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'copy-qualifier', 'copy-member']
copynode -0.8707987917587161:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType ^ ^ declarators ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType']
copynode -2.326543851289898:  root add ^ IfStatement condition BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
copynode -2.360073957592249:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member']
copynode -3.3101563956588507:  root add ^ StatementExpression expression Assignment expressionl ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type']
copynode -3.5668090134859085:  root add ^ ReturnStatement expression Literal value ^ ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> Literal', 'Literal -> value']
copynode -3.6255728006362915:  root modified ^ BasicType-BasicType name double_ter ^ ^ ^  name long_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-BasicType', 'BasicType -> name', 'name -> long_ter', 'root -> End']
copynode -2.8865685369819403:  root add ^ StatementExpression expression MethodInvocation qualifier ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member']
copynode -3.9562183022499084:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  member loc1 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> loc1', 'root -> End']
copynode -2.360073957592249:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  qualifier par0 ^ ^ member unknown ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'start -> unknown']
copynode -4.325373262166977:  root modified ^ BasicType-BasicType name double_ter ^ ^ ^  name int_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-BasicType', 'BasicType -> name', 'name -> int_ter', 'root -> End']
copynode -2.8865685369819403:  root add ^ StatementExpression expression MethodInvocation member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> member']
copynode -2.8865685369819403:  root add ^ StatementExpression expression MethodInvocation arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> arguments member']
copynode -2.8865685369819403:  root add ^ StatementExpression expression MethodInvocation qualifier ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier member']
copynode -3.4230823651887476:  root add ^ IfStatement condition MethodInvocation qualifier ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier member']
copynode -4.390663519501686:  root add ^ ReturnStatement expression MemberReference member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MemberReference', 'MemberReference -> member']
copynode -5.014457285404205:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  member loc0 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> loc0', 'root -> End']
copynode -5.030129559338093:  root modified ^ LocalVariableDeclaration type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType']
copynode -3.4230823651887476:  root add ^ IfStatement condition MethodInvocation qualifier ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier arguments member']
copynode -0.8707987917587161:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType ^ ^ declarators ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType']
copynode -3.4230823651887476:  root add ^ IfStatement condition MethodInvocation member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> member']
copynode -5.312002956867218:  root modified ^ BasicType-BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^  name long_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-BasicType', 'BasicType -> name', 'name -> long_ter', 'root -> End']
copynode -4.770318998489529:  root add ^ IfStatement condition MemberReference member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference', 'MemberReference -> member']
copynode -5.351731956005096:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  member unknown ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'start -> unknown', 'root -> End']
copynode -5.370996177196503:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  member par0 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> par0', 'root -> End']
copynode -5.580448677763343:  root add ^ StatementExpression expression This selectors ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> This', 'This -> selectors']
copynode -5.646661221981049:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  member loc2 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> loc2', 'root -> End']
copynode -3.4230823651887476:  root add ^ IfStatement condition MethodInvocation prefix_operators ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> prefix_operators member']
copynode -5.10718016885221:  root add ^ StatementExpression expression MemberReference postfix_operators ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MemberReference', 'MemberReference -> postfix_operators member']
copynode -5.8051679553464055:  root modified ^ StatementExpression expression Assignment expressionl ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type']
copynode -3.4230823651887476:  root add ^ IfStatement condition MethodInvocation prefix_operators ^ qualifier ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> prefix_operators qualifier member']
copynode -6.006163328886032:  root modified ^ BasicType-BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^  name int_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-BasicType', 'BasicType -> name', 'name -> int_ter', 'root -> End']
copynode -4.390663519501686:  root add ^ ReturnStatement expression MemberReference selectors ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MemberReference', 'MemberReference -> selectors member']
copynode -6.048729375004768:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType ^ ^ declarators ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'modifiers -> final_ter', 'type -> BasicType']
copynode -4.770318998489529:  root add ^ IfStatement condition MemberReference prefix_operators ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference', 'MemberReference -> prefix_operators member']
copynode -5.10718016885221:  root add ^ StatementExpression expression MemberReference selectors ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MemberReference', 'MemberReference -> selectors member']
copynode -6.298991620540619:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  member loc3 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> loc3', 'root -> End']
copynode -3.4230823651887476:  root add ^ IfStatement condition MethodInvocation prefix_operators ^ qualifier ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> prefix_operators qualifier arguments member']
copynode -6.079139722976834:  root add ^ IfStatement condition This selectors ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> This', 'This -> selectors']
copynode -6.406764447689056:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  member loc4 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> loc4', 'root -> End']
copynode -5.8016815185546875:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  selectors ArraySelector index ^ ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> selectors member', 'selectors -> ArraySelector', 'ArraySelector -> index']
copynode -2.360073957592249:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  qualifier par0 ^ ^ member data_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member']
copynode -6.415152609348297:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  qualifier unknown ^ ^ member length_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'start -> unknown', 'copy-member']
copynode -2.360073957592249:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member']
copynode -6.6084858775138855:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  member par1 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> par1', 'root -> End']
copynode -4.390663519501686:  root add ^ ReturnStatement expression MemberReference qualifier ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MemberReference', 'MemberReference -> qualifier member']
copynode -5.816988518461585:  root add ^ StatementExpression expression SuperMethodInvocation arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> SuperMethodInvocation', 'SuperMethodInvocation -> arguments member']
copynode -6.703951120376587:  root add ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType ^ ^ declarators ^ ^ ^ ; ['root -> add', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType']
copynode -3.4230823651887476:  root add ^ IfStatement condition MethodInvocation qualifier ^ selectors ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier selectors member']
copynode -5.816988518461585:  root add ^ StatementExpression expression SuperMethodInvocation member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> SuperMethodInvocation', 'SuperMethodInvocation -> member']
copynode -3.4230823651887476:  root add ^ IfStatement condition MethodInvocation arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> arguments member']
copynode -2.360073957592249:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  qualifier par0 ^ ^ member par0 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'member -> par0']
copynode -6.7138750702142715:  root add ^ ReturnStatement expression BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
copynode -6.432773124426603:  root add ^ LocalVariableDeclaration type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators ^ ^ ^ ; ['root -> add', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType']
copynode -7.066179528832436:  root add ^ ReturnStatement expression This_ter ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> This_ter', 'root -> End']
copynode -3.4230823651887476:  root add ^ IfStatement condition MethodInvocation prefix_operators ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> prefix_operators arguments member']
copynode -7.251336053013802:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType ^ ^ declarators ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType']
copynode -7.0279755727387965:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ operandr MemberReference member loc1 ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'copy-condition', 'root -> End']
copynode -6.510383903980255:  root modified ^ BasicType-BasicType name double_ter ^ ^ ^  name long_ter ^ ^ dimensions None_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-BasicType', 'BasicType -> name dimensions', 'name -> long_ter', 'copy-dimensions']
copynode -3.5668090134859085:  root add ^ ReturnStatement expression Literal prefix_operators ^ value ^ ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> Literal', 'Literal -> prefix_operators value']
copynode -7.070862352848053:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  selectors ArraySelector index MemberReference member loc3 ^ ^ ^ ^ ^ ^ member par0 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> selectors member', 'copy-selectors', 'member -> par0']
copynode -7.218223434872925:  root modified ^ StatementExpression expression MemberReference postfix_operators ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MemberReference', 'MemberReference -> postfix_operators member']
copynode -5.10718016885221:  root add ^ StatementExpression expression MemberReference postfix_operators ^ selectors ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MemberReference', 'MemberReference -> postfix_operators selectors member']
copynode -4.770318998489529:  root add ^ IfStatement condition MemberReference qualifier ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference', 'MemberReference -> qualifier member']
copynode -3.4230823651887476:  root add ^ IfStatement condition MethodInvocation member getRowDimension_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'copy-MethodInvocation']
copynode -2.8865685369819403:  root add ^ StatementExpression expression MethodInvocation qualifier ^ selectors ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier selectors member']
copynode -6.543981805443764:  root add ^ ReturnStatement expression MethodInvocation qualifier ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier member']
copynode -7.325153887271881:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  selectors ArraySelector index MemberReference member loc3 ^ ^ ^ ^ ^ ^ member par0 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> selectors member', 'copy-selectors', 'member -> par0']
copynode -7.06619793176651:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  qualifier par0 ^ ^ member unknown ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'copy-qualifier', 'start -> unknown']
copynode -7.466845095157623:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  selectors ArraySelector index MemberReference member loc6 ^ ^ ^ ^ ^ ^ member par0 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> selectors member', 'copy-selectors', 'member -> par0']
copynode -7.487225115299225:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  selectors ArraySelector index MemberReference member loc6 ^ ^ ^ ^ ^ ^ member par0 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> selectors member', 'copy-selectors', 'member -> par0']
copynode -6.543981805443764:  root add ^ ReturnStatement expression MethodInvocation qualifier ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member']
copynode -6.510383903980255:  root modified ^ BasicType-BasicType name double_ter ^ ^ ^  name long_ter ^ ^ dimensions MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'copy-BasicType', 'BasicType -> name dimensions', 'name -> long_ter', 'copy-dimensions']
copynode -7.7522605657577515:  root add ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType ^ ^ declarators ^ ^ ^ ; ['root -> add', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType']
copynode -7.782002404332161:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType ^ ^ declarators ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType']
copynode -7.598191320896149:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  qualifier loc0 ^ ^ member length_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'qualifier -> loc0', 'copy-member']
copynode -7.5545337703078985:  root add ^ StatementExpression expression Cast type ^ expression ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Cast', 'Cast -> type expression']
copynode -4.770318998489529:  root add ^ IfStatement condition MemberReference selectors ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference', 'MemberReference -> selectors member']
copynode -2.8865685369819403:  root add ^ StatementExpression expression MethodInvocation selectors ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> selectors member']
copynode -7.87535747885704:  root modified ^ BasicType-BasicType name double_ter ^ ^ ^  name boolean_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-BasicType', 'BasicType -> name', 'name -> boolean_ter', 'root -> End']
copynode -7.130214869976044:  root modified ^ BasicType-BasicType name double_ter ^ ^ ^  name int_ter ^ ^ dimensions None_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-BasicType', 'BasicType -> name dimensions', 'name -> int_ter', 'copy-dimensions']
copynode -7.883996665477753:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  member par2 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> par2', 'root -> End']
before@5 batch0 x: -8.785978883504868: root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  qualifier par0 ^ ^ member length_ter ^ ^ ^ ^  ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'copy-qualifier', 'copy-member']
after@5 batch0 x: -8.785978883504868: root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  qualifier par0 ^ ^ member length_ter ^ ^ ^ ^  ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'copy-qualifier', 'copy-member']
before@5 batch1 x: -7.884179549248074: root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  member par2 ^ ^ ^ ^  ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> par2', 'root -> End']
after@5 batch1 x: -7.884179549248074: root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  member par2 ^ ^ ^ ^  ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> par2', 'root -> End']
copynode -0.6624030834063888:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType']
copynode -1.888778097461909:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter']
copynode -2.758190892636776:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'root -> End']
copynode -1.888778097461909:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter']
copynode -4.251857452094555:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  qualifier par0 ^ ^ member unknown ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'start -> unknown', 'root -> End']
copynode -4.237983388244174:  root add ^ StatementExpression expression Assignment expressionl MemberReference ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference']
copynode -3.7806974854320288:  root add ^ StatementExpression expression MethodInvocation qualifier loc1 ^ ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc1']
copynode -4.652863755938597:  root modified ^ LocalVariableDeclaration type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-declarators']
copynode -1.888778097461909:  root add ^ IfStatement condition BinaryOperation operator >_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >_ter']
copynode -5.011508571595186:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType']
copynode -5.0667709074914455:  root add ^ IfStatement condition MethodInvocation member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown']
copynode -4.766118521802127:  root modified ^ StatementExpression expression Assignment expressionl MemberReference ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference']
copynode -1.888778097461909:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter']
copynode -4.4696239195764065:  root add ^ IfStatement condition MethodInvocation qualifier par0 ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> par0']
copynode -1.888778097461909:  root add ^ IfStatement condition BinaryOperation operator <_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter']
copynode -4.449862083420157:  root add ^ StatementExpression expression MethodInvocation qualifier loc1 ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> loc1']
copynode -5.42779004201293:  root add ^ IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> prefix_operators member', 'prefix_operators -> !_ter']
copynode -5.420742591843009:  root add ^ StatementExpression expression MethodInvocation member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown']
copynode -3.7806974854320288:  root add ^ StatementExpression expression MethodInvocation qualifier par0 ^ ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0']
copynode -5.104976551607251:  root add ^ StatementExpression expression This selectors MemberReference ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> This', 'This -> selectors', 'selectors -> MemberReference']
copynode -3.7806974854320288:  root add ^ StatementExpression expression MethodInvocation qualifier loc0 ^ ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc0']
copynode -3.7806974854320288:  root add ^ StatementExpression expression MethodInvocation qualifier unknown ^ ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown']
copynode -1.888778097461909:  root add ^ IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter']
copynode -5.631741899996996:  root add ^ ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> Literal', 'Literal -> value', 'value -> null_ter']
copynode -0.6624030834063888:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name ^ arguments ^ ^ ^ declarators ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'ReferenceType -> name arguments']
copynode -5.258978446945548:  root add ^ StatementExpression expression MethodInvocation arguments MemberReference ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference']
copynode -4.4696239195764065:  root add ^ IfStatement condition MethodInvocation qualifier unknown ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier member', 'start -> unknown']
copynode -5.882278796285391:  root add ^ IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> prefix_operators qualifier member', 'prefix_operators -> !_ter']
copynode -5.906502969795838:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'modifiers -> final_ter', 'type -> ReferenceType', 'copy-ReferenceType']
copynode -4.449862083420157:  root add ^ StatementExpression expression MethodInvocation qualifier unknown ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier member', 'start -> unknown']
copynode -4.449862083420157:  root add ^ StatementExpression expression MethodInvocation qualifier par0 ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> par0']
copynode -5.749360229820013:  root add ^ IfStatement condition This selectors MemberReference ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> This', 'This -> selectors', 'selectors -> MemberReference']
copynode -4.652863755938597:  root modified ^ LocalVariableDeclaration type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator']
copynode -5.2343792878091335:  root add ^ IfStatement condition MethodInvocation qualifier unknown ^ ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown']
copynode -5.104976551607251:  root add ^ StatementExpression expression This selectors MethodInvocation ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> This', 'This -> selectors', 'selectors -> MethodInvocation']
copynode -4.4696239195764065:  root add ^ IfStatement condition MethodInvocation qualifier loc1 ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> loc1']
copynode -5.793218310922384:  root add ^ IfStatement condition MemberReference member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference', 'MemberReference -> member', 'start -> unknown']
copynode -1.888778097461909:  root add ^ IfStatement condition BinaryOperation operator >=_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >=_ter']
copynode -6.297142796218395:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  qualifier par0 ^ ^ member data_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'root -> End']
copynode -0.6624030834063888:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ ^ ^ declarators ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType']
copynode -6.39735734462738:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  qualifier unknown ^ ^ member length_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'start -> unknown', 'copy-member', 'root -> End']
copynode -4.237983388244174:  root add ^ StatementExpression expression Assignment expressionl MemberReference member loc4 ^ ^ ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'copy-expressionl']
copynode -6.446512099355459:  root add ^ IfStatement condition MemberReference prefix_operators !_ter ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference', 'MemberReference -> prefix_operators member', 'prefix_operators -> !_ter']
copynode -6.475382205098867:  root add ^ IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> prefix_operators qualifier arguments member', 'prefix_operators -> !_ter']
copynode -0.6624030834063888:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name ^ ^ ^ declarators ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'ReferenceType -> name']
copynode -4.766118521802127:  root modified ^ StatementExpression expression Assignment expressionl MemberReference member loc4 ^ ^ ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'copy-expressionl']
copynode -6.573627710342407:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  qualifier loc0 ^ ^ member length_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'qualifier -> loc0', 'copy-member', 'root -> End']
copynode -6.563885323674185:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType']
copynode -4.449862083420157:  root add ^ StatementExpression expression MethodInvocation qualifier loc0 ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> loc0']
copynode -5.2343792878091335:  root add ^ IfStatement condition MethodInvocation qualifier loc1 ^ ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc1']
copynode -4.237983388244174:  root add ^ StatementExpression expression Assignment expressionl This ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> This']
copynode -0.6624030834063888:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType']
copynode -5.2343792878091335:  root add ^ IfStatement condition MethodInvocation qualifier par0 ^ ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0']
copynode -7.035498291254044:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  selectors ArraySelector index MemberReference member loc5 ^ ^ ^ ^ ^ ^ member par0 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> selectors member', 'copy-selectors', 'member -> par0', 'root -> End']
copynode -4.4696239195764065:  root add ^ IfStatement condition MethodInvocation qualifier loc0 ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> loc0']
copynode -7.103079196065664:  root add ^ IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> prefix_operators arguments member', 'prefix_operators -> !_ter']
copynode -1.888778097461909:  root add ^ IfStatement condition BinaryOperation operator <=_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <=_ter']
copynode -6.899201665073633:  root add ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators ^ ^ ^ ; ['root -> add', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType']
copynode -7.193337015807629:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  qualifier par0 ^ ^ member ZERO_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'root -> End']
copynode -4.766118521802127:  root modified ^ StatementExpression expression Assignment expressionl MemberReference selectors ArraySelector index MemberReference member loc3 ^ ^ ^ ^ ^ ^ member loc2 ^ ^ ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'copy-expressionl']
copynode -0.6624030834063888:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType']
copynode -7.117487893439829:  root add ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators ^ ^ ^ ; ['root -> add', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType']
copynode -6.6790050230920315:  root add ^ IfStatement condition MethodInvocation qualifier par0 ^ ^ selectors ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier selectors member', 'qualifier -> par0']
copynode -1.888778097461909:  root add ^ IfStatement condition BinaryOperation operator instanceof_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> instanceof_ter']
copynode -4.237983388244174:  root add ^ StatementExpression expression Assignment expressionl MemberReference selectors ArraySelector index MemberReference member loc3 ^ ^ ^ ^ ^ ^ member loc2 ^ ^ ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'copy-expressionl']
copynode -7.315697722136974:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'root -> End']
copynode -7.321828722953796:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  qualifier loc1 ^ ^ member length_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'qualifier -> loc1', 'copy-member', 'root -> End']
copynode -7.322869688272476:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  selectors ArraySelector index MemberReference member loc3 ^ ^ ^ ^ ^ ^ member par0 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> selectors member', 'copy-selectors', 'member -> par0', 'root -> End']
copynode -7.031801572069526:  root add ^ StatementExpression expression SuperMethodInvocation arguments MemberReference ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> SuperMethodInvocation', 'SuperMethodInvocation -> arguments member', 'arguments -> MemberReference']
copynode -0.6624030834063888:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name ^ dimensions ^ arguments ^ ^ ^ declarators ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'ReferenceType -> name dimensions arguments']
copynode -5.749360229820013:  root add ^ IfStatement condition This selectors MethodInvocation ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> This', 'This -> selectors', 'selectors -> MethodInvocation']
copynode -7.473372578620911:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  qualifier par1 ^ ^ member length_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par1', 'copy-member', 'root -> End']
copynode -7.472893830388784:  root add ^ IfStatement condition This prefix_operators !_ter ^ ^ selectors ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> This', 'This -> prefix_operators selectors', 'prefix_operators -> !_ter']
copynode -7.496747251600027:  root add ^ LocalVariableDeclaration type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator ^ ^ ^ ^ ; ['root -> add', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator']
copynode -6.883846636861563:  root add ^ IfStatement condition MethodInvocation arguments MemberReference ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference']
copynode -6.490241140127182:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  selectors ArraySelector index MemberReference ^ ^ ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> selectors member', 'selectors -> ArraySelector', 'ArraySelector -> index', 'index -> MemberReference']
copynode -7.5749011635780334:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  selectors ArraySelector index MemberReference member loc3 ^ ^ ^ ^ ^ ArraySelector index MemberReference member loc5 ^ ^ ^ ^ ^ MethodInvocation arguments MemberReference selectors ArraySelector index MemberReference member loc5 ^ ^ ^ ^ ^ ^ member par0 ^ ^ ^ ^ member multiply_ter ^ ^ ^ ^ member par0 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> selectors member', 'copy-selectors', 'member -> par0', 'root -> End']
copynode -7.617595724761486:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  qualifier par0 ^ ^ member par0 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'member -> par0', 'root -> End']
copynode -5.258978446945548:  root add ^ StatementExpression expression MethodInvocation arguments Literal ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> Literal']
copynode -6.7360654678195715:  root add ^ StatementExpression expression MethodInvocation qualifier loc1 ^ ^ selectors ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier selectors member', 'qualifier -> loc1']
copynode -0.6624030834063888:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ ^ ^ declarators ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType']
copynode -7.672509551048279:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  qualifier par0 ^ ^ member unknown ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'copy-qualifier', 'start -> unknown', 'root -> End']
copynode -5.258978446945548:  root add ^ StatementExpression expression MethodInvocation arguments MethodInvocation ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MethodInvocation']
copynode -0.6624030834063888:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name ^ sub_type ^ ^ ^ declarators ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'ReferenceType -> name sub_type']
copynode -6.872209718450904:  root add ^ StatementExpression expression MemberReference postfix_operators ++_ter ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MemberReference', 'MemberReference -> postfix_operators member', 'copy-postfix_operators']
copynode -6.872209718450904:  root add ^ StatementExpression expression MemberReference postfix_operators ++_ter ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MemberReference', 'MemberReference -> postfix_operators member', 'copy-postfix_operators']
copynode -7.133819809183478:  root add ^ StatementExpression expression MemberReference selectors ArraySelector ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MemberReference', 'MemberReference -> selectors member', 'selectors -> ArraySelector']
copynode -7.757638569921255:  root add ^ IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier ^ selectors ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> prefix_operators qualifier selectors member', 'prefix_operators -> !_ter']
copynode -7.805531105026603:  root add ^ StatementExpression expression MethodInvocation selectors MethodInvocation ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> selectors member', 'selectors -> MethodInvocation']
copynode -0.8859977414831519:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType']
copynode -2.5788020081818104:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'root -> End']
copynode -2.333185430150479:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter']
copynode -2.333185430150479:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter']
copynode -3.3122900729067624:  root add ^ StatementExpression expression Assignment expressionl MemberReference ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference']
copynode -3.614739753305912:  root add ^ ReturnStatement expression Literal value 0_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> Literal', 'Literal -> value', 'value -> 0_ter']
copynode -4.31410363689065:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  qualifier par0 ^ ^ member unknown ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'start -> unknown', 'root -> End']
copynode -4.458559622988105:  root add ^ StatementExpression expression MethodInvocation member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown']
copynode -3.819977393373847:  root add ^ StatementExpression expression MethodInvocation qualifier unknown ^ ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown']
copynode -4.4815468695014715:  root add ^ StatementExpression expression MethodInvocation arguments MemberReference ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference']
copynode -2.333185430150479:  root add ^ IfStatement condition BinaryOperation operator >_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >_ter']
copynode -4.694055570755154:  root add ^ IfStatement condition MethodInvocation qualifier par0 ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> par0']
copynode -3.3122900729067624:  root add ^ StatementExpression expression Assignment expressionl MemberReference member loc5 ^ ^ ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'copy-expressionl']
copynode -2.333185430150479:  root add ^ IfStatement condition BinaryOperation operator <_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter']
copynode -5.296783579979092:  root add ^ IfStatement condition MethodInvocation member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown']
copynode -2.333185430150479:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter']
copynode -0.8859977414831519:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name ^ ^ ^ declarators ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'BasicType -> name']
copynode -5.070303216576576:  root modified ^ LocalVariableDeclaration type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator']
copynode -4.658897986635566:  root add ^ StatementExpression expression MethodInvocation qualifier unknown ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier member', 'start -> unknown']
copynode -5.344011141452938:  root add ^ IfStatement condition MemberReference member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference', 'MemberReference -> member', 'start -> unknown']
copynode -5.110385908279568:  root add ^ IfStatement condition MethodInvocation qualifier unknown ^ ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown']
copynode -3.614739753305912:  root add ^ ReturnStatement expression Literal value 1_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> Literal', 'Literal -> value', 'value -> 1_ter']
copynode -3.819977393373847:  root add ^ StatementExpression expression MethodInvocation qualifier par0 ^ ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0']
copynode -5.7332439557649195:  root add ^ IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> prefix_operators member', 'prefix_operators -> !_ter']
copynode -2.333185430150479:  root add ^ IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter']
copynode -4.8169382363557816:  root add ^ ReturnStatement expression MemberReference member loc1 ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MemberReference', 'MemberReference -> member', 'member -> loc1']
copynode -5.922451032791287:  root add ^ IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> prefix_operators qualifier member', 'prefix_operators -> !_ter']
copynode -2.333185430150479:  root add ^ IfStatement condition BinaryOperation operator >=_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >=_ter']
copynode -5.625363966450095:  root add ^ StatementExpression expression This selectors MemberReference ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> This', 'This -> selectors', 'selectors -> MemberReference']
copynode -3.614739753305912:  root add ^ ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> Literal', 'Literal -> value', 'value -> false_ter']
copynode -3.819977393373847:  root add ^ StatementExpression expression MethodInvocation qualifier loc1 ^ ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc1']
copynode -6.078565787523985:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'modifiers -> final_ter', 'type -> BasicType', 'copy-BasicType']
copynode -5.875696730799973:  root modified ^ StatementExpression expression Assignment expressionl MemberReference ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference']
copynode -6.11821378627792:  root add ^ IfStatement condition MemberReference prefix_operators !_ter ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference', 'MemberReference -> prefix_operators member', 'prefix_operators -> !_ter']
copynode -4.658897986635566:  root add ^ StatementExpression expression MethodInvocation qualifier par0 ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> par0']
copynode -4.694055570755154:  root add ^ IfStatement condition MethodInvocation qualifier unknown ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier member', 'start -> unknown']
copynode -3.3122900729067624:  root add ^ StatementExpression expression Assignment expressionl This ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> This']
copynode -5.804935505613685:  root add ^ StatementExpression expression MemberReference postfix_operators ++_ter ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MemberReference', 'MemberReference -> postfix_operators member', 'copy-postfix_operators']
copynode -6.35163880744949:  root add ^ IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> prefix_operators qualifier arguments member', 'prefix_operators -> !_ter']
copynode -3.819977393373847:  root add ^ StatementExpression expression MethodInvocation qualifier loc0 ^ ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc0']
copynode -6.454437170177698:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  qualifier par0 ^ ^ member data_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'root -> End']
copynode -5.070303216576576:  root modified ^ LocalVariableDeclaration type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'copy-declarators']
copynode -3.614739753305912:  root add ^ ReturnStatement expression Literal value 2_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> Literal', 'Literal -> value', 'value -> 2_ter']
copynode -0.8859977414831519:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ ^ ^ declarators ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType']
copynode -3.3122900729067624:  root add ^ StatementExpression expression Assignment expressionl MemberReference selectors ArraySelector index MemberReference member loc3 ^ ^ ^ ^ ^ ^ member loc2 ^ ^ ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'copy-expressionl']
copynode -4.4815468695014715:  root add ^ StatementExpression expression MethodInvocation arguments Literal value <string>_ter ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> arguments member', 'copy-arguments']
copynode -4.658897986635566:  root add ^ StatementExpression expression MethodInvocation qualifier loc1 ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> loc1']
copynode -6.397742106113583:  root add ^ IfStatement condition This selectors MemberReference ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> This', 'This -> selectors', 'selectors -> MemberReference']
copynode -6.573284149169922:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  qualifier unknown ^ ^ member length_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'start -> unknown', 'copy-member', 'root -> End']
copynode -6.5891989804804325:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'root -> End']
copynode -4.8169382363557816:  root add ^ ReturnStatement expression MemberReference member loc2 ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MemberReference', 'MemberReference -> member', 'member -> loc2']
copynode -6.222589543089271:  root add ^ StatementExpression expression MemberReference selectors ArraySelector ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MemberReference', 'MemberReference -> selectors member', 'selectors -> ArraySelector']
copynode -3.614739753305912:  root add ^ ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> Literal', 'Literal -> value', 'value -> null_ter']
copynode -6.049863591790199:  root add ^ ReturnStatement expression MemberReference selectors ArraySelector ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MemberReference', 'MemberReference -> selectors member', 'selectors -> ArraySelector']
copynode -4.4815468695014715:  root add ^ StatementExpression expression MethodInvocation arguments Literal ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> Literal']
copynode -2.333185430150479:  root add ^ IfStatement condition BinaryOperation operator <=_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <=_ter']
copynode -6.776778612285852:  root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  qualifier par0 ^ ^ member par0 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'member -> par0', 'root -> End']
copynode -3.614739753305912:  root add ^ ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> Literal', 'Literal -> value', 'value -> true_ter']
copynode -5.110385908279568:  root add ^ IfStatement condition MethodInvocation qualifier par0 ^ ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0']
copynode -0.8859977414831519:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name ^ dimensions ^ ^ ^ declarators ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'BasicType -> name dimensions']
copynode -6.775935938581824:  root add ^ StatementExpression expression SuperMethodInvocation member meth0 ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> SuperMethodInvocation', 'SuperMethodInvocation -> member', 'member -> meth0']
copynode -4.8169382363557816:  root add ^ ReturnStatement expression MemberReference member par0 ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MemberReference', 'MemberReference -> member', 'member -> par0']
copynode -5.625363966450095:  root add ^ StatementExpression expression This selectors MethodInvocation ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> This', 'This -> selectors', 'selectors -> MethodInvocation']
copynode -6.6962544824928045:  root add ^ StatementExpression expression SuperMethodInvocation arguments MemberReference ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> SuperMethodInvocation', 'SuperMethodInvocation -> arguments member', 'arguments -> MemberReference']
copynode -6.745501574128866:  root add ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators ^ ^ ^ ; ['root -> add', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType']
copynode -0.8859977414831519:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name int_ter ^ ^ ^ ^ declarators ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType']
copynode -6.98778797313571:  root add ^ LocalVariableDeclaration type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator ^ ^ ^ ^ ; ['root -> add', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator']
copynode -4.4815468695014715:  root add ^ StatementExpression expression MethodInvocation arguments MethodInvocation ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MethodInvocation']
copynode -6.753290189895779:  root add ^ IfStatement condition MethodInvocation qualifier par0 ^ ^ selectors ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier selectors member', 'qualifier -> par0']
copynode -4.8169382363557816:  root add ^ ReturnStatement expression MemberReference member loc0 ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MemberReference', 'MemberReference -> member', 'member -> loc0']
copynode -4.8169382363557816:  root add ^ ReturnStatement expression MemberReference member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MemberReference', 'MemberReference -> member', 'start -> unknown']
copynode -5.804935505613685:  root add ^ StatementExpression expression MemberReference postfix_operators ++_ter ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MemberReference', 'MemberReference -> postfix_operators member', 'copy-postfix_operators']
copynode -4.658897986635566:  root add ^ StatementExpression expression MethodInvocation qualifier loc0 ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> loc0']
copynode -0.8859977414831519:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name int_ter ^ ^ ^ ^ declarators ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType']
before@6 batch0 x: -7.8709501922130585: root add ^ StatementExpression expression Assignment expressionl MemberReference member loc4 ^ ^ ^ ^ value MethodInvocation qualifier loc4 ^ ^ arguments MemberReference selectors ArraySelector index MemberReference member loc3 ^ ^ ^ ^ ^ ArraySelector index MemberReference member loc5 ^ ^ ^ ^ ^ MethodInvocation arguments MemberReference selectors ArraySelector index MemberReference member loc5 ^ ^ ^ ^ ^ ^ member par0 ^ ^ ^ ^ member multiply_ter ^ ^ ^ ^ member data_ter ^ ^ ^ ^ member add_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^  ; ['root -> add', 'root -> StatementExpression', 'copy-StatementExpression', 'root -> End']
after@6 batch0 x: -7.8709501922130585: root add ^ StatementExpression expression Assignment expressionl MemberReference member loc4 ^ ^ ^ ^ value MethodInvocation qualifier loc4 ^ ^ arguments MemberReference selectors ArraySelector index MemberReference member loc3 ^ ^ ^ ^ ^ ArraySelector index MemberReference member loc5 ^ ^ ^ ^ ^ MethodInvocation arguments MemberReference selectors ArraySelector index MemberReference member loc5 ^ ^ ^ ^ ^ ^ member par0 ^ ^ ^ ^ member multiply_ter ^ ^ ^ ^ member data_ter ^ ^ ^ ^ member add_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^  ; ['root -> add', 'root -> StatementExpression', 'copy-StatementExpression', 'root -> End']
before@6 batch1 x: -7.178984134458005: root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name int_ter ^ ^ ^ ^ declarators ^ ^ ^  ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType']
after@6 batch1 x: -7.178984134458005: root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name int_ter ^ ^ ^ ^ declarators ^ ^ ^  ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType']
copynode -0.683833041228354:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator']
copynode -2.5063086221925914:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference']
copynode -3.088309414219111:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference']
copynode -4.510394406854175:  root add ^ StatementExpression expression Assignment expressionl MemberReference member ^ ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member']
copynode -2.5063086221925914:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MethodInvocation']
copynode -4.936660692212172:  root modified ^ LocalVariableDeclaration type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-declarators', 'root -> End']
copynode -5.0255199052917305:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-declarators']
copynode -2.5063086221925914:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl This ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> This']
copynode -4.997952587436885:  root add ^ IfStatement condition BinaryOperation operator >_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >_ter', 'operandl -> MemberReference']
copynode -5.268792267888784:  root add ^ IfStatement condition MethodInvocation qualifier par0 ^ ^ member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> par0', 'start -> unknown']
copynode -5.362197836861014:  root add ^ StatementExpression expression MethodInvocation qualifier loc1 ^ ^ member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> loc1', 'start -> unknown']
copynode -5.4354254603385925:  root add ^ StatementExpression expression MethodInvocation member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown', 'root -> End']
copynode -5.095041747204959:  root modified ^ StatementExpression expression Assignment expressionl MemberReference member ^ ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member']
copynode -5.429935964290053:  root add ^ IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> prefix_operators member', 'prefix_operators -> !_ter', 'start -> unknown']
copynode -5.2639151881448925:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation']
copynode -4.580833395943046:  root add ^ StatementExpression expression MethodInvocation qualifier loc1 ^ ^ arguments MemberReference ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc1', 'arguments -> MemberReference']
copynode -5.594053702428937:  root add ^ StatementExpression expression This selectors MemberReference member ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> This', 'This -> selectors', 'selectors -> MemberReference', 'MemberReference -> member']
copynode -5.303149349521846:  root add ^ IfStatement condition BinaryOperation operator <_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference']
copynode -3.088309414219111:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl This ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> This']
copynode -3.088309414219111:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MethodInvocation']
copynode -5.709062483161688:  root add ^ ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> End']
copynode -5.834192117676139:  root add ^ StatementExpression expression MethodInvocation arguments MemberReference member ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> member']
copynode -5.65812600357458:  root add ^ IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> BinaryOperation']
copynode -5.920278290519491:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'modifiers -> final_ter', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-declarators']
copynode -5.975266244262457:  root add ^ IfStatement condition This selectors MemberReference member ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> This', 'This -> selectors', 'selectors -> MemberReference', 'MemberReference -> member']
copynode -5.752652144990861:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ arguments ^ ^ ^ declarators ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'ReferenceType -> name arguments', 'copy-name']
copynode -5.969081958755851:  root add ^ StatementExpression expression MethodInvocation qualifier par0 ^ ^ member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> par0', 'start -> unknown']
copynode -4.580833395943046:  root add ^ StatementExpression expression MethodInvocation qualifier loc1 ^ ^ arguments Literal ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc1', 'arguments -> Literal']
copynode -5.0866712387651205:  root add ^ IfStatement condition MethodInvocation member unknown ^ ^ ^ ^ ^ ReturnStatement ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown', 'root -> ReturnStatement']
copynode -5.0866712387651205:  root add ^ IfStatement condition MethodInvocation member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown', 'root -> End']
copynode -6.0711001307936385:  root modified ^ LocalVariableDeclaration type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name ^ initializer ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer']
copynode -2.5063086221925914:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl BinaryOperation ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> BinaryOperation']
copynode -2.5063086221925914:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl Literal ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> Literal']
copynode -6.167954679578543:  root add ^ IfStatement condition MethodInvocation qualifier loc1 ^ ^ member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> loc1', 'start -> unknown']
copynode -5.095041747204959:  root modified ^ StatementExpression expression Assignment expressionl MemberReference qualifier ^ member ^ ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> qualifier member']
copynode -6.33095262106508:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ ^ ^ declarators VariableDeclarator ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator']
copynode -5.884523342130706:  root add ^ IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier par0 ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> prefix_operators qualifier member', 'prefix_operators -> !_ter', 'qualifier -> par0']
copynode -5.65169527195394:  root add ^ StatementExpression expression MethodInvocation qualifier unknown ^ ^ arguments MemberReference ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown', 'arguments -> MemberReference']
copynode -6.2143524955026805:  root add ^ IfStatement condition BinaryOperation operator >=_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >=_ter', 'operandl -> MemberReference']
copynode -5.490678807720542:  root add ^ StatementExpression expression MethodInvocation qualifier par0 ^ ^ arguments MemberReference ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> MemberReference']
copynode -0.683833041228354:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-declarators']
copynode -6.617954334244132:  root add ^ StatementExpression expression MethodInvocation qualifier loc0 ^ ^ member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> loc0', 'start -> unknown']
copynode -6.578152617410524:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-declarators']
copynode -5.621438881382346:  root add ^ StatementExpression expression MethodInvocation qualifier loc0 ^ ^ arguments MemberReference ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc0', 'arguments -> MemberReference']
copynode -6.508972878567874:  root modified ^ StatementExpression expression Assignment expressionl MemberReference member loc4 ^ ^ ^ ^ value ArrayCreator ^ ^ type ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'copy-expressionl', 'value -> ArrayCreator']
copynode -6.492705798707902:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ ^ ^ declarators ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'ReferenceType -> name', 'copy-name']
copynode -6.103601889684796:  root add ^ StatementExpression expression This selectors MethodInvocation arguments ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> This', 'This -> selectors', 'selectors -> MethodInvocation', 'MethodInvocation -> arguments member']
copynode -2.5063086221925914:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'copy-operandl']
copynode -6.452500412240624:  root add ^ IfStatement condition MemberReference prefix_operators !_ter ^ ^ member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference', 'MemberReference -> prefix_operators member', 'prefix_operators -> !_ter', 'start -> unknown']
copynode -6.88432042056229:  root add ^ StatementExpression expression Assignment expressionl This selectors ^ ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> This', 'This -> selectors']
copynode -5.490678807720542:  root add ^ StatementExpression expression MethodInvocation qualifier par0 ^ ^ arguments Literal ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> Literal']
copynode -6.901213622651994:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator']
copynode -6.190056648105383:  root add ^ IfStatement condition MemberReference member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'root -> End']
copynode -6.103601889684796:  root add ^ StatementExpression expression This selectors MethodInvocation member ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> This', 'This -> selectors', 'selectors -> MethodInvocation', 'MethodInvocation -> member']
copynode -4.580833395943046:  root add ^ StatementExpression expression MethodInvocation qualifier loc1 ^ ^ arguments This_ter ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc1', 'arguments -> This_ter']
copynode -5.621438881382346:  root add ^ StatementExpression expression MethodInvocation qualifier loc0 ^ ^ arguments Literal ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc0', 'arguments -> Literal']
copynode -3.088309414219111:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl Literal ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> Literal']
copynode -6.079819735139608:  root add ^ IfStatement condition MethodInvocation qualifier unknown ^ ^ arguments MemberReference ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown', 'arguments -> MemberReference']
copynode -4.997952587436885:  root add ^ IfStatement condition BinaryOperation operator >_ter ^ ^ operandl MethodInvocation ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >_ter', 'operandl -> MethodInvocation']
copynode -3.088309414219111:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl BinaryOperation ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> BinaryOperation']
copynode -6.478134777164087:  root add ^ IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier unknown ^ ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> prefix_operators qualifier arguments member', 'prefix_operators -> !_ter', 'start -> unknown']
copynode -2.5063086221925914:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'copy-operandl']
copynode -7.096619721502066:  root add ^ IfStatement condition MethodInvocation qualifier loc0 ^ ^ member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> loc0', 'start -> unknown']
copynode -5.0866712387651205:  root add ^ IfStatement condition MethodInvocation member unknown ^ ^ ^ ^ ^ StatementExpression ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown', 'root -> StatementExpression']
copynode -7.144312385469675:  root add ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator ^ ^ ^ ^ ; ['root -> add', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator']
copynode -4.580833395943046:  root add ^ StatementExpression expression MethodInvocation qualifier loc1 ^ ^ arguments This ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc1', 'arguments -> This']
copynode -2.5063086221925914:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc3 ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'copy-operandl']
copynode -7.248483286239207:  root add ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator ^ ^ ^ ^ ; ['root -> add', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator']
copynode -5.0255199052917305:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator']
copynode -7.242633796297014:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator']
copynode -7.231392617337406:  root modified ^ StatementExpression expression Assignment expressionl MemberReference selectors ArraySelector index MemberReference member loc3 ^ ^ ^ ^ ^ ^ member loc2 ^ ^ ^ ^ value ArrayCreator ^ ^ type ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'copy-expressionl', 'value -> ArrayCreator']
copynode -5.65169527195394:  root add ^ StatementExpression expression MethodInvocation qualifier unknown ^ ^ arguments Literal ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown', 'arguments -> Literal']
copynode -7.37375863455236:  root add ^ StatementExpression expression SuperMethodInvocation arguments MemberReference member ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> SuperMethodInvocation', 'SuperMethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> member']
copynode -5.303149349521846:  root add ^ IfStatement condition BinaryOperation operator <_ter ^ ^ operandl MethodInvocation ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MethodInvocation']
copynode -7.140118486713618:  root add ^ IfStatement condition BinaryOperation operator <=_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <=_ter', 'operandl -> MemberReference']
copynode -5.884523342130706:  root add ^ IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier unknown ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> prefix_operators qualifier member', 'prefix_operators -> !_ter', 'start -> unknown']
copynode -4.580833395943046:  root add ^ StatementExpression expression MethodInvocation qualifier loc1 ^ ^ arguments MemberReference selectors ArraySelector index MemberReference member loc3 ^ ^ ^ ^ ^ ArraySelector index MemberReference member loc5 ^ ^ ^ ^ ^ MethodInvocation arguments MemberReference selectors ArraySelector index MemberReference member loc5 ^ ^ ^ ^ ^ ^ member par0 ^ ^ ^ ^ member multiply_ter ^ ^ ^ ^ member data_ter ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc1', 'copy-arguments']
copynode -4.580833395943046:  root add ^ StatementExpression expression MethodInvocation qualifier loc1 ^ ^ arguments MethodInvocation ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc1', 'arguments -> MethodInvocation']
copynode -7.265886303037405:  root add ^ IfStatement condition MethodInvocation qualifier par0 ^ ^ selectors MethodInvocation ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier selectors member', 'qualifier -> par0', 'selectors -> MethodInvocation']
copynode -7.28807771904394:  root add ^ IfStatement condition BinaryOperation operator instanceof_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> instanceof_ter', 'operandl -> MemberReference']
copynode -6.397998256026767:  root add ^ StatementExpression expression Assignment expressionl MemberReference member loc4 ^ ^ ^ ^ value Literal ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'copy-expressionl', 'value -> Literal']
copynode -4.580833395943046:  root add ^ StatementExpression expression MethodInvocation qualifier loc1 ^ ^ arguments Literal value <string>_ter ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc1', 'copy-arguments']
copynode -0.9175535729154944:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator']
copynode -3.1593221980147064:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference']
copynode -3.5118460613302886:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference']
copynode -3.618787914980203:  root add ^ StatementExpression expression Assignment expressionl MemberReference member ^ ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member']
copynode -4.077960915863514:  root add ^ ReturnStatement expression Literal value 0_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> Literal', 'Literal -> value', 'value -> 0_ter', 'root -> End']
copynode -4.4787888284772635:  root add ^ StatementExpression expression MethodInvocation member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown', 'root -> End']
copynode -4.943016251549125:  root add ^ StatementExpression expression MethodInvocation arguments MemberReference member ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> member']
copynode -4.537570407614112:  root add ^ StatementExpression expression MethodInvocation qualifier unknown ^ ^ arguments MemberReference ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown', 'arguments -> MemberReference']
copynode -5.062850995454937:  root add ^ IfStatement condition MethodInvocation qualifier par0 ^ ^ member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> par0', 'start -> unknown']
copynode -5.016690726857632:  root add ^ IfStatement condition BinaryOperation operator >_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >_ter', 'operandl -> MemberReference']
copynode -5.351459875702858:  root modified ^ LocalVariableDeclaration type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name ^ initializer ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer']
copynode -5.233544583898038:  root add ^ IfStatement condition BinaryOperation operator <_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference']
copynode -5.323533292394131:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation']
copynode -5.6424063220620155:  root add ^ ReturnStatement expression Literal value 1_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> Literal', 'Literal -> value', 'value -> 1_ter', 'root -> End']
copynode -5.735693425871432:  root add ^ IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> prefix_operators member', 'prefix_operators -> !_ter', 'start -> unknown']
copynode -5.84163124859333:  root add ^ ReturnStatement expression MemberReference member loc1 ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'root -> End']
copynode -5.980375220999122:  root add ^ StatementExpression expression This selectors MemberReference member ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> This', 'This -> selectors', 'selectors -> MemberReference', 'MemberReference -> member']
copynode -5.785378928761929:  root add ^ IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> BinaryOperation']
copynode -3.1593221980147064:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MethodInvocation']
copynode -6.026996470987797:  root add ^ ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> Literal', 'Literal -> value', 'value -> false_ter', 'root -> End']
copynode -5.318262743297964:  root add ^ IfStatement condition MethodInvocation member unknown ^ ^ ^ ^ ^ ReturnStatement ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown', 'root -> ReturnStatement']
copynode -5.940749641042203:  root add ^ IfStatement condition BinaryOperation operator >=_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >=_ter', 'operandl -> MemberReference']
copynode -6.104370124638081:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'modifiers -> final_ter', 'type -> BasicType', 'copy-BasicType', 'copy-declarators']
copynode -5.096566439140588:  root add ^ StatementExpression expression Assignment expressionl MemberReference member loc5 ^ ^ ^ ^ value MemberReference ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'copy-expressionl', 'value -> MemberReference']
copynode -5.347501724027097:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name boolean_ter ^ ^ ^ ^ declarators ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'BasicType -> name', 'name -> boolean_ter']
copynode -4.537570407614112:  root add ^ StatementExpression expression MethodInvocation qualifier unknown ^ ^ arguments Literal ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown', 'arguments -> Literal']
copynode -5.096566439140588:  root add ^ StatementExpression expression Assignment expressionl MemberReference member loc5 ^ ^ ^ ^ value Literal ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'copy-expressionl', 'value -> Literal']
copynode -6.248299231752753:  root add ^ StatementExpression expression MethodInvocation qualifier par0 ^ ^ member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> par0', 'start -> unknown']
copynode -5.924997065216303:  root add ^ IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier par0 ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> prefix_operators qualifier member', 'prefix_operators -> !_ter', 'qualifier -> par0']
copynode -6.283892035949975:  root add ^ StatementExpression expression Assignment expressionl This selectors ^ ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> This', 'This -> selectors']
copynode -5.632566346321255:  root add ^ IfStatement condition MethodInvocation qualifier unknown ^ ^ arguments MemberReference ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown', 'arguments -> MemberReference']
copynode -3.5118460613302886:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MethodInvocation']
copynode -5.663884511217475:  root add ^ StatementExpression expression MethodInvocation qualifier par0 ^ ^ arguments MemberReference ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> MemberReference']
copynode -6.125470393337309:  root add ^ IfStatement condition MemberReference prefix_operators !_ter ^ ^ member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference', 'MemberReference -> prefix_operators member', 'prefix_operators -> !_ter', 'start -> unknown']
copynode -5.318262743297964:  root add ^ IfStatement condition MethodInvocation member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown', 'root -> End']
copynode -6.487661615014076:  root modified ^ LocalVariableDeclaration type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'copy-declarators', 'root -> End']
copynode -6.113526266999543:  root modified ^ StatementExpression expression Assignment expressionl MemberReference member ^ ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member']
copynode -6.5115742376074195:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator']
copynode -6.503219462931156:  root add ^ ReturnStatement expression Literal value 2_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> Literal', 'Literal -> value', 'value -> 2_ter', 'root -> End']
copynode -5.347501724027097:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name int_ter ^ ^ ^ ^ declarators ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'BasicType -> name', 'name -> int_ter']
copynode -6.566365523729473:  root add ^ IfStatement condition This selectors MemberReference member ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> This', 'This -> selectors', 'selectors -> MemberReference', 'MemberReference -> member']
copynode -6.547541370615363:  root add ^ StatementExpression expression MethodInvocation qualifier loc1 ^ ^ member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> loc1', 'start -> unknown']
copynode -3.618787914980203:  root add ^ StatementExpression expression Assignment expressionl MemberReference qualifier ^ member ^ ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> qualifier member']
copynode -5.620936675462872:  root add ^ IfStatement condition MemberReference member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'root -> End']
copynode -6.538914194330573:  root add ^ StatementExpression expression MethodInvocation arguments Literal value <string>_ter ^ ^ ^ ^ member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> arguments member', 'copy-arguments', 'start -> unknown']
copynode -6.590439036488533:  root add ^ ReturnStatement expression MemberReference member loc2 ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MemberReference', 'MemberReference -> member', 'member -> loc2', 'root -> End']
copynode -0.9175535729154944:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'copy-declarators']
copynode -6.6630056872963905:  root add ^ ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> End']
copynode -3.1593221980147064:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'copy-operandl']
copynode -6.731357803568244:  root add ^ StatementExpression expression MethodInvocation arguments Literal value ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> Literal', 'Literal -> value']
copynode -3.1593221980147064:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl This ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> This']
copynode -6.354451927356422:  root add ^ IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier unknown ^ ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> prefix_operators qualifier arguments member', 'prefix_operators -> !_ter', 'start -> unknown']
copynode -5.620936675462872:  root add ^ IfStatement condition MemberReference member unknown ^ ^ ^ ^ ^ ReturnStatement ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'root -> ReturnStatement']
copynode -6.8217297568917274:  root add ^ ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> Literal', 'Literal -> value', 'value -> true_ter', 'root -> End']
copynode -6.061669697985053:  root add ^ StatementExpression expression MethodInvocation qualifier loc1 ^ ^ arguments MemberReference ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc1', 'arguments -> MemberReference']
copynode -6.873159339651465:  root add ^ StatementExpression expression SuperMethodInvocation member meth0 ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> SuperMethodInvocation', 'SuperMethodInvocation -> member', 'member -> meth0', 'root -> End']
copynode -6.887199714779854:  root add ^ ReturnStatement expression MemberReference member par0 ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MemberReference', 'MemberReference -> member', 'member -> par0', 'root -> End']
copynode -6.741946454625577:  root add ^ IfStatement condition BinaryOperation operator <=_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <=_ter', 'operandl -> MemberReference']
copynode -6.979617740958929:  root add ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator ^ ^ ^ ^ ; ['root -> add', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator']
copynode -7.001240222714841:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator']
copynode -5.663884511217475:  root add ^ StatementExpression expression MethodInvocation qualifier par0 ^ ^ arguments Literal ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> Literal']
copynode -6.978985687717795:  root add ^ StatementExpression expression SuperMethodInvocation arguments MemberReference member ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> SuperMethodInvocation', 'SuperMethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> member']
copynode -3.1593221980147064:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl BinaryOperation ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> BinaryOperation']
copynode -4.537570407614112:  root add ^ StatementExpression expression MethodInvocation qualifier unknown ^ ^ arguments MethodInvocation ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown', 'arguments -> MethodInvocation']
copynode -5.096566439140588:  root add ^ StatementExpression expression Assignment expressionl MemberReference member loc5 ^ ^ ^ ^ value MethodInvocation ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'copy-expressionl', 'value -> MethodInvocation']
copynode -4.537570407614112:  root add ^ StatementExpression expression MethodInvocation qualifier unknown ^ ^ arguments BinaryOperation ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown', 'arguments -> BinaryOperation']
copynode -7.125253990292549:  root add ^ ReturnStatement expression MemberReference member loc0 ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MemberReference', 'MemberReference -> member', 'member -> loc0', 'root -> End']
copynode -6.371589055284858:  root add ^ StatementExpression expression MethodInvocation qualifier loc0 ^ ^ arguments MemberReference ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc0', 'arguments -> MemberReference']
before@7 batch0 x: -7.575102468705154: root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  selectors ArraySelector index MemberReference member loc3 ^ ^ ^ ^ ^ ArraySelector index MemberReference member loc5 ^ ^ ^ ^ ^ MethodInvocation arguments MemberReference selectors ArraySelector index MemberReference member loc5 ^ ^ ^ ^ ^ ^ member par0 ^ ^ ^ ^ member multiply_ter ^ ^ ^ ^ member par0 ^ ^ ^ ^  ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> selectors member', 'copy-selectors', 'member -> par0', 'root -> End']
after@7 batch0 x: -7.575102468705154: root modified ^ MemberReference-MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^  selectors ArraySelector index MemberReference member loc3 ^ ^ ^ ^ ^ ArraySelector index MemberReference member loc5 ^ ^ ^ ^ ^ MethodInvocation arguments MemberReference selectors ArraySelector index MemberReference member loc5 ^ ^ ^ ^ ^ ^ member par0 ^ ^ ^ ^ member multiply_ter ^ ^ ^ ^ member par0 ^ ^ ^ ^  ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> selectors member', 'copy-selectors', 'member -> par0', 'root -> End']
before@7 batch1 x: -7.185608139261603: root add ^ StatementExpression expression MethodInvocation qualifier loc0 ^ ^ arguments MemberReference ^ ^ member ^ ^ ^ ^ ^  ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc0', 'arguments -> MemberReference']
after@7 batch1 x: -7.185608139261603: root add ^ StatementExpression expression MethodInvocation qualifier loc0 ^ ^ arguments MemberReference ^ ^ member ^ ^ ^ ^ ^  ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc0', 'arguments -> MemberReference']
copynode -0.6876553322654217:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name ^ initializer ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer']
copynode -2.802183724474162:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -3.329796842765063:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -5.134149608813459:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-declarators', 'root -> End']
copynode -4.895502633880824:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier ^ member ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MethodInvocation', 'MethodInvocation -> qualifier member']
copynode -4.5591582817723975:  root add ^ StatementExpression expression Assignment expressionl MemberReference member loc1 ^ ^ ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> loc1']
copynode -5.392705008387566:  root add ^ StatementExpression expression MethodInvocation qualifier loc1 ^ ^ member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> loc1', 'start -> unknown', 'root -> End']
copynode -5.304384447168559:  root add ^ IfStatement condition BinaryOperation operator >_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -5.461051310412586:  root modified ^ StatementExpression expression Assignment expressionl MemberReference member loc2 ^ ^ ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> loc2']
copynode -5.476943887304515:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
copynode -5.618022091221064:  root add ^ IfStatement condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -5.589596351608634:  root add ^ StatementExpression expression MethodInvocation qualifier loc1 ^ ^ arguments MemberReference member ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc1', 'arguments -> MemberReference', 'MemberReference -> member']
copynode -2.802183724474162:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference qualifier ^ member ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> qualifier member']
copynode -5.96313943923451:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'modifiers -> final_ter', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-declarators', 'root -> End']
copynode -5.913334704469889:  root add ^ IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
copynode -6.015469154343009:  root add ^ StatementExpression expression MethodInvocation qualifier loc1 ^ ^ arguments Literal value ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc1', 'arguments -> Literal', 'Literal -> value']
copynode -6.0045165959745646:  root add ^ StatementExpression expression MethodInvocation qualifier par0 ^ ^ member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> par0', 'start -> unknown', 'root -> End']
copynode -5.161806649994105:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl This selectors ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> This', 'This -> selectors']
copynode -4.5591582817723975:  root add ^ StatementExpression expression Assignment expressionl MemberReference member unknown ^ ^ ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'start -> unknown']
copynode -5.677924282383174:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier ^ member ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MethodInvocation', 'MethodInvocation -> qualifier member']
copynode -6.097229723003693:  root modified ^ LocalVariableDeclaration type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2']
copynode -0.6876553322654217:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name']
copynode -5.999029031954706:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ arguments TypeArgument ^ ^ ^ ^ declarators ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'ReferenceType -> name arguments', 'copy-name', 'arguments -> TypeArgument']
copynode -5.392417151480913:  root add ^ IfStatement condition MethodInvocation qualifier par0 ^ ^ member unknown ^ ^ ^ ^ ^ ReturnStatement ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> par0', 'start -> unknown', 'root -> ReturnStatement']
copynode -5.161806649994105:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl This selectors MethodInvocation member getColumnDimension_ter ^ ^ ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> This', 'copy-This']
copynode -6.117367334198207:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
copynode -5.463083973620087:  root add ^ IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> prefix_operators member', 'prefix_operators -> !_ter', 'start -> unknown', 'root -> End']
copynode -6.216566629242152:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl Literal value ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> Literal', 'Literal -> value']
copynode -4.5591582817723975:  root add ^ StatementExpression expression Assignment expressionl MemberReference member loc0 ^ ^ ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> loc0']
copynode -5.5980432401411235:  root add ^ StatementExpression expression This selectors MemberReference member unknown ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> This', 'This -> selectors', 'selectors -> MemberReference', 'MemberReference -> member', 'start -> unknown']
copynode -6.336319433990866:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ ^ ^ declarators VariableDeclarator name ^ initializer ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer']
copynode -6.471642097458243:  root add ^ StatementExpression expression MethodInvocation qualifier unknown ^ ^ arguments MemberReference member ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown', 'arguments -> MemberReference', 'MemberReference -> member']
copynode -5.6614466975443065:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl This selectors MethodInvocation member getColumnDimension_ter ^ ^ ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> This', 'copy-This']
copynode -6.378478686092421:  root add ^ IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier par0 ^ ^ member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> prefix_operators qualifier member', 'prefix_operators -> !_ter', 'qualifier -> par0', 'start -> unknown']
copynode -6.610536017455161:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-declarators', 'root -> End']
copynode -5.978290981380269:  root add ^ IfStatement condition This selectors MemberReference member unknown ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> This', 'This -> selectors', 'selectors -> MemberReference', 'MemberReference -> member', 'start -> unknown']
copynode -5.463083973620087:  root add ^ IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ member unknown ^ ^ ^ ^ ^ ReturnStatement ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> prefix_operators member', 'prefix_operators -> !_ter', 'start -> unknown', 'root -> ReturnStatement']
copynode -6.502569622825831:  root add ^ IfStatement condition BinaryOperation operator >=_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >=_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -6.654339319065912:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-declarators', 'root -> End']
copynode -5.392417151480913:  root add ^ IfStatement condition MethodInvocation qualifier par0 ^ ^ member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> par0', 'start -> unknown', 'root -> End']
copynode -6.651093041524291:  root add ^ StatementExpression expression MethodInvocation qualifier loc0 ^ ^ member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> loc0', 'start -> unknown', 'root -> End']
copynode -4.5591582817723975:  root add ^ StatementExpression expression Assignment expressionl MemberReference member par0 ^ ^ ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> par0']
copynode -6.553326865658164:  root add ^ StatementExpression expression MethodInvocation qualifier par0 ^ ^ arguments MemberReference member ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> MemberReference', 'MemberReference -> member']
copynode -6.045253342017531:  root add ^ IfStatement condition MethodInvocation member unknown ^ ^ ^ ^ ^ ReturnStatement expression MemberReference member loc2 ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown', 'root -> ReturnStatement', 'copy-ReturnStatement']
copynode -6.045253342017531:  root add ^ IfStatement condition MethodInvocation member unknown ^ ^ ^ ^ ^ ReturnStatement expression ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown', 'root -> ReturnStatement', 'ReturnStatement -> expression']
copynode -5.8925064112991095:  root add ^ StatementExpression expression MethodInvocation arguments MemberReference member par0 ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par0']
copynode -5.6614466975443065:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl This selectors ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> This', 'This -> selectors']
copynode -6.7188190734013915:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ ^ ^ declarators VariableDeclarator ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'ReferenceType -> name', 'copy-name', 'declarators -> VariableDeclarator']
copynode -6.673511287197471:  root add ^ StatementExpression expression MethodInvocation qualifier loc0 ^ ^ arguments MemberReference member ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc0', 'arguments -> MemberReference', 'MemberReference -> member']
copynode -6.924340507015586:  root add ^ StatementExpression expression MethodInvocation qualifier par0 ^ ^ arguments Literal value ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> Literal', 'Literal -> value']
copynode -6.915105202584527:  root add ^ StatementExpression expression Assignment expressionl This selectors MemberReference ^ ^ ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> This', 'This -> selectors', 'selectors -> MemberReference']
copynode -6.955180919729173:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name ^ initializer ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer']
copynode -6.716258044354618:  root modified ^ StatementExpression expression Assignment expressionl MemberReference member loc4 ^ ^ ^ ^ value ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ^ ^ type ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'copy-expressionl', 'value -> ArrayCreator', 'copy-ArrayCreator']
copynode -5.161806649994105:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl This selectors MethodInvocation member getColumnDimension_ter ^ ^ ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> This', 'copy-This']
copynode -5.8925064112991095:  root add ^ StatementExpression expression MethodInvocation arguments MemberReference member loc1 ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> loc1']
copynode -6.985102968290448:  root add ^ StatementExpression expression This selectors MethodInvocation member unknown ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> This', 'This -> selectors', 'selectors -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown']
copynode -6.295062359422445:  root add ^ IfStatement condition MethodInvocation qualifier loc1 ^ ^ member unknown ^ ^ ^ ^ ^ ReturnStatement ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> loc1', 'start -> unknown', 'root -> ReturnStatement']
copynode -7.048042079433799:  root add ^ StatementExpression expression MethodInvocation qualifier loc0 ^ ^ arguments Literal value ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc0', 'arguments -> Literal', 'Literal -> value']
copynode -7.0540152858011425:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl Literal value ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> Literal', 'Literal -> value']
copynode -6.303428049199283:  root modified ^ StatementExpression expression Assignment expressionl MemberReference qualifier par0 ^ ^ member ^ ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0']
copynode -7.065005358308554:  root add ^ IfStatement condition MethodInvocation qualifier unknown ^ ^ arguments MemberReference member ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown', 'arguments -> MemberReference', 'MemberReference -> member']
copynode -7.155982143711299:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
copynode -5.304384447168559:  root add ^ IfStatement condition BinaryOperation operator >_ter ^ ^ operandl MemberReference qualifier ^ member ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >_ter', 'operandl -> MemberReference', 'MemberReference -> qualifier member']
copynode -5.5980432401411235:  root add ^ StatementExpression expression This selectors MemberReference member par0 ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> This', 'This -> selectors', 'selectors -> MemberReference', 'MemberReference -> member', 'member -> par0']
copynode -7.222306853160262:  root add ^ IfStatement condition MethodInvocation member unknown ^ ^ ^ ^ ^ StatementExpression expression ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown', 'root -> StatementExpression', 'StatementExpression -> expression']
copynode -7.0112483110278845:  root add ^ StatementExpression expression MethodInvocation qualifier loc1 ^ ^ arguments This_ter ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc1', 'arguments -> This_ter', 'arguments -> End']
copynode -7.314323482714826:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name ^ initializer ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer']
copynode -6.723824875429273:  root add ^ StatementExpression expression This selectors MethodInvocation arguments MemberReference ^ ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> This', 'This -> selectors', 'selectors -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference']
copynode -5.589596351608634:  root add ^ StatementExpression expression MethodInvocation qualifier loc1 ^ ^ arguments MemberReference qualifier ^ member ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc1', 'arguments -> MemberReference', 'MemberReference -> qualifier member']
copynode -3.329796842765063:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference qualifier ^ member ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> qualifier member']
copynode -7.377564317546785:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name ^ initializer ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer']
copynode -7.398544928058982:  root add ^ StatementExpression expression MethodInvocation qualifier unknown ^ ^ arguments Literal value ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown', 'arguments -> Literal', 'Literal -> value']
copynode -6.844724575057626:  root add ^ IfStatement condition MemberReference prefix_operators !_ter ^ ^ member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference', 'MemberReference -> prefix_operators member', 'prefix_operators -> !_ter', 'start -> unknown', 'root -> End']
copynode -7.231690129265189:  root add ^ StatementExpression expression MethodInvocation qualifier loc1 ^ ^ arguments This selectors ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc1', 'arguments -> This', 'This -> selectors']
copynode -5.392417151480913:  root add ^ IfStatement condition MethodInvocation qualifier par0 ^ ^ member unknown ^ ^ ^ ^ ^ StatementExpression ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> par0', 'start -> unknown', 'root -> StatementExpression']
copynode -5.6614466975443065:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl This selectors MethodInvocation member getColumnDimension_ter ^ ^ ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> This', 'copy-This']
copynode -7.253255337011069:  root add ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name ^ initializer ^ ^ ^ ^ ^ ; ['root -> add', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer']
copynode -0.6876553322654217:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'copy-VariableDeclarator']
copynode -0.9229296147823334:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name ^ initializer ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer']
copynode -3.3505437183193862:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -3.6563036399893463:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -3.701669216621667:  root add ^ StatementExpression expression Assignment expressionl MemberReference member unknown ^ ^ ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'start -> unknown']
copynode -5.188287427648902:  root add ^ StatementExpression expression MethodInvocation qualifier unknown ^ ^ arguments MemberReference member ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown', 'arguments -> MemberReference', 'MemberReference -> member']
copynode -5.391902297735214:  root modified ^ LocalVariableDeclaration type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2']
copynode -3.701669216621667:  root add ^ StatementExpression expression Assignment expressionl MemberReference member loc1 ^ ^ ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> loc1']
copynode -5.252894442062825:  root add ^ IfStatement condition BinaryOperation operator >_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -5.011622061952949:  root add ^ StatementExpression expression MethodInvocation arguments MemberReference member par0 ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par0']
copynode -5.522127370815724:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
copynode -3.3505437183193862:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference qualifier ^ member ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> qualifier member']
copynode -3.701669216621667:  root add ^ StatementExpression expression Assignment expressionl MemberReference member loc0 ^ ^ ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> loc0']
copynode -5.482666667085141:  root add ^ IfStatement condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -5.19232070306316:  root add ^ IfStatement condition MethodInvocation qualifier par0 ^ ^ member unknown ^ ^ ^ ^ ^ ReturnStatement ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> par0', 'start -> unknown', 'root -> ReturnStatement']
copynode -3.701669216621667:  root add ^ StatementExpression expression Assignment expressionl MemberReference member par0 ^ ^ ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> par0']
copynode -0.9229296147823334:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name']
copynode -6.007464732509106:  root add ^ IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
copynode -6.170038498938084:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'modifiers -> final_ter', 'type -> BasicType', 'copy-BasicType', 'copy-declarators', 'root -> End']
copynode -6.209022214636207:  root add ^ StatementExpression expression MethodInvocation qualifier unknown ^ ^ arguments Literal value ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown', 'arguments -> Literal', 'Literal -> value']
copynode -6.200135736726224:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name boolean_ter ^ ^ ^ ^ declarators VariableDeclarator ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'BasicType -> name', 'name -> boolean_ter', 'declarators -> VariableDeclarator']
copynode -6.269997001159936:  root add ^ StatementExpression expression Assignment expressionl MemberReference member loc5 ^ ^ ^ ^ value Literal value ^ ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'copy-expressionl', 'value -> Literal', 'Literal -> value']
copynode -6.295582169666886:  root add ^ StatementExpression expression MethodInvocation qualifier par0 ^ ^ member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> par0', 'start -> unknown', 'root -> End']
copynode -6.31485158810392:  root add ^ StatementExpression expression Assignment expressionl This selectors MemberReference ^ ^ ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> This', 'This -> selectors', 'selectors -> MemberReference']
copynode -6.165350686293095:  root add ^ IfStatement condition BinaryOperation operator >=_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >=_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -6.048577960114926:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier ^ member ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MethodInvocation', 'MethodInvocation -> qualifier member']
copynode -6.368324829731137:  root add ^ IfStatement condition MethodInvocation qualifier unknown ^ ^ arguments MemberReference member ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown', 'arguments -> MemberReference', 'MemberReference -> member']
copynode -6.3048656322062016:  root add ^ IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier par0 ^ ^ member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> prefix_operators qualifier member', 'prefix_operators -> !_ter', 'qualifier -> par0', 'start -> unknown']
copynode -6.497440082021058:  root modified ^ StatementExpression expression Assignment expressionl MemberReference member loc2 ^ ^ ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> loc2']
copynode -6.516718572471291:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name ^ initializer ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer']
copynode -5.19232070306316:  root add ^ IfStatement condition MethodInvocation qualifier par0 ^ ^ member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> par0', 'start -> unknown', 'root -> End']
copynode -6.538661449216306:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'BasicType -> name', 'name -> int_ter', 'declarators -> VariableDeclarator']
copynode -5.011622061952949:  root add ^ StatementExpression expression MethodInvocation arguments MemberReference member loc0 ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> loc0']
copynode -6.4638771917670965:  root add ^ StatementExpression expression MethodInvocation qualifier par0 ^ ^ arguments MemberReference member ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> MemberReference', 'MemberReference -> member']
copynode -6.589283583685756:  root add ^ StatementExpression expression MethodInvocation qualifier loc1 ^ ^ member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> loc1', 'start -> unknown', 'root -> End']
copynode -6.653721480630338:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'copy-declarators', 'root -> End']
copynode -3.701669216621667:  root add ^ StatementExpression expression Assignment expressionl MemberReference member par1 ^ ^ ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> par1']
copynode -6.626393830403686:  root add ^ StatementExpression expression MethodInvocation arguments Literal value <string>_ter ^ ^ ^ ^ member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> arguments member', 'copy-arguments', 'start -> unknown', 'root -> End']
copynode -5.770326622761786:  root add ^ IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> prefix_operators member', 'prefix_operators -> !_ter', 'start -> unknown', 'root -> End']
copynode -5.984160416293889:  root add ^ StatementExpression expression This selectors MemberReference member unknown ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> This', 'This -> selectors', 'selectors -> MemberReference', 'MemberReference -> member', 'start -> unknown']
copynode -6.6002286975272:  root add ^ StatementExpression expression Assignment expressionl MemberReference qualifier par0 ^ ^ member ^ ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0']
copynode -5.770326622761786:  root add ^ IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ member unknown ^ ^ ^ ^ ^ ReturnStatement ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> prefix_operators member', 'prefix_operators -> !_ter', 'start -> unknown', 'root -> ReturnStatement']
copynode -6.145547198597342:  root add ^ IfStatement condition MethodInvocation member unknown ^ ^ ^ ^ ^ ReturnStatement expression MemberReference member loc2 ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown', 'root -> ReturnStatement', 'copy-ReturnStatement']
copynode -6.189604044426233:  root add ^ StatementExpression expression Assignment expressionl MemberReference member loc5 ^ ^ ^ ^ value MemberReference member ^ ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'copy-expressionl', 'value -> MemberReference', 'MemberReference -> member']
copynode -6.433332677464932:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier ^ member ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MethodInvocation', 'MethodInvocation -> qualifier member']
copynode -5.252894442062825:  root add ^ IfStatement condition BinaryOperation operator >_ter ^ ^ operandl MemberReference qualifier ^ member ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >_ter', 'operandl -> MemberReference', 'MemberReference -> qualifier member']
copynode -6.145547198597342:  root add ^ IfStatement condition MethodInvocation member unknown ^ ^ ^ ^ ^ ReturnStatement expression ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown', 'root -> ReturnStatement', 'ReturnStatement -> expression']
copynode -7.007864346727729:  root add ^ StatementExpression expression MethodInvocation qualifier par0 ^ ^ arguments Literal value ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> Literal', 'Literal -> value']
copynode -7.006957840174437:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name ^ initializer ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer']
copynode -6.569503620266914:  root add ^ IfStatement condition This selectors MemberReference member unknown ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> This', 'This -> selectors', 'selectors -> MemberReference', 'MemberReference -> member', 'start -> unknown']
copynode -5.482666667085141:  root add ^ IfStatement condition BinaryOperation operator <_ter ^ ^ operandl MemberReference qualifier ^ member ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference', 'MemberReference -> qualifier member']
copynode -6.880270591005683:  root add ^ StatementExpression expression MethodInvocation qualifier loc1 ^ ^ arguments MemberReference member ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc1', 'arguments -> MemberReference', 'MemberReference -> member']
copynode -3.701669216621667:  root add ^ StatementExpression expression Assignment expressionl MemberReference member loc2 ^ ^ ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> loc2']
copynode -5.19232070306316:  root add ^ IfStatement condition MethodInvocation qualifier par0 ^ ^ member unknown ^ ^ ^ ^ ^ StatementExpression ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> par0', 'start -> unknown', 'root -> StatementExpression']
copynode -3.6563036399893463:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference qualifier ^ member ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> qualifier member']
before@8 batch0 x: -7.533344628987834: root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'copy-VariableDeclarator']
after@8 batch0 x: -7.533344628987834: root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'copy-VariableDeclarator']
before@8 batch1 x: -7.160426850896329: root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference qualifier ^ member ^ ^ ^ operandr ^ ^ ^ ^ ^  ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> qualifier member']
after@8 batch1 x: -7.160426850896329: root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference qualifier ^ member ^ ^ ^ operandr ^ ^ ^ ^ ^  ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> qualifier member']
copynode -0.6971841042395681:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2']
copynode -2.8568787719123065:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1']
copynode -2.8568787719123065:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0']
copynode -3.3505159723572433:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0']
copynode -3.3505159723572433:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1']
copynode -2.8568787719123065:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc0 ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc0']
copynode -5.301216013263911:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier par0 ^ ^ member ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> par0']
copynode -3.3505159723572433:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc0 ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc0']
copynode -5.489495548419654:  root modified ^ StatementExpression expression Assignment expressionl MemberReference member loc2 ^ ^ ^ ^ value ArrayCreator ^ ^ type ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> loc2', 'value -> ArrayCreator']
copynode -2.8568787719123065:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member unknown ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'start -> unknown']
copynode -5.815937615465373:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference qualifier par0 ^ ^ member ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0']
copynode -5.47100581927225:  root add ^ IfStatement condition BinaryOperation operator >_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1']
copynode -6.103890779195353:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name', 'name -> loc2']
copynode -5.529035277199:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter']
copynode -6.096916444133967:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier par0 ^ ^ member ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> par0']
copynode -5.780011139344424:  root add ^ IfStatement condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1']
copynode -5.3969833416631445:  root add ^ StatementExpression expression Assignment expressionl MemberReference member loc1 ^ ^ ^ ^ value MethodInvocation ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'value -> MethodInvocation']
copynode -6.240169086959213:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl Literal value null_ter ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> Literal', 'Literal -> value', 'value -> null_ter']
copynode -6.0859292219392955:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl This selectors MemberReference ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> This', 'This -> selectors', 'selectors -> MemberReference']
copynode -6.349352689925581:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2']
copynode -6.34077439410612:  root add ^ StatementExpression expression This selectors MemberReference member unknown ^ ^ ^ MethodInvocation ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> This', 'This -> selectors', 'selectors -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'selectors -> MethodInvocation']
copynode -3.3505159723572433:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member unknown ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'start -> unknown']
copynode -6.126683211885393:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ arguments TypeArgument pattern_type ^ ^ ^ ^ ^ declarators ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'ReferenceType -> name arguments', 'copy-name', 'arguments -> TypeArgument', 'TypeArgument -> pattern_type']
copynode -5.969540941994637:  root add ^ IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter']
copynode -5.529035277199:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter']
copynode -5.47100581927225:  root add ^ IfStatement condition BinaryOperation operator >_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0']
copynode -6.211526937317103:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl This selectors MethodInvocation member getColumnDimension_ter ^ ^ ^ ^ ^ ^ operandr Literal ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> This', 'copy-This', 'operandr -> Literal']
copynode -6.172066647559404:  root add ^ IfStatement condition MethodInvocation qualifier par0 ^ ^ member unknown ^ ^ ^ ^ ^ ReturnStatement expression MemberReference member loc2 ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> par0', 'start -> unknown', 'root -> ReturnStatement', 'copy-ReturnStatement']
copynode -6.742195850238204:  root add ^ IfStatement condition MethodInvocation member unknown ^ ^ ^ ^ ^ ReturnStatement expression MemberReference member loc2 ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown', 'root -> ReturnStatement', 'copy-ReturnStatement', 'root -> End']
copynode -6.797157756052911:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ ^ ^ declarators VariableDeclarator name ^ initializer ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'ReferenceType -> name', 'copy-name', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer']
copynode -6.585429317783564:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl This selectors MethodInvocation member getColumnDimension_ter ^ ^ ^ ^ ^ ^ operandr Literal ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> This', 'copy-This', 'operandr -> Literal']
copynode -6.101773380418308:  root modified ^ LocalVariableDeclaration type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator']
copynode -6.027527945116162:  root add ^ StatementExpression expression MethodInvocation qualifier loc1 ^ ^ arguments Literal value <string>_ter ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc1', 'arguments -> Literal', 'Literal -> value', 'value -> <string>_ter']
copynode -6.953651481657289:  root add ^ StatementExpression expression Assignment expressionl This selectors MemberReference member ^ ^ ^ ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> This', 'This -> selectors', 'selectors -> MemberReference', 'MemberReference -> member']
copynode -6.975941552780569:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2']
copynode -6.172066647559404:  root add ^ IfStatement condition MethodInvocation qualifier par0 ^ ^ member unknown ^ ^ ^ ^ ^ ReturnStatement expression ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> par0', 'start -> unknown', 'root -> ReturnStatement', 'ReturnStatement -> expression']
copynode -5.813200360164046:  root add ^ StatementExpression expression MethodInvocation qualifier loc1 ^ ^ arguments MemberReference member par0 ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc1', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par0']
copynode -7.014001603238285:  root modified ^ StatementExpression expression Assignment expressionl MemberReference member loc4 ^ ^ ^ ^ value ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'copy-expressionl', 'value -> ArrayCreator', 'copy-ArrayCreator', 'type -> =_ter']
copynode -6.7445744927972555:  root add ^ IfStatement condition MethodInvocation member unknown ^ ^ ^ ^ ^ ReturnStatement expression Literal ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> Literal']
copynode -5.813200360164046:  root add ^ StatementExpression expression MethodInvocation qualifier loc1 ^ ^ arguments MemberReference member loc1 ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc1', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> loc1']
copynode -2.8568787719123065:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1']
copynode -7.071562345605344:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl Literal value null_ter ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> Literal', 'Literal -> value', 'value -> null_ter']
copynode -6.778142936062068:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl This selectors MemberReference ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> This', 'This -> selectors', 'selectors -> MemberReference']
copynode -7.030337816104293:  root add ^ StatementExpression expression This selectors MethodInvocation member unknown ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> This', 'This -> selectors', 'selectors -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown', 'selectors -> End']
copynode -6.214119046460837:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter']
copynode -6.633773213950917:  root add ^ IfStatement condition This selectors MemberReference member unknown ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> This', 'This -> selectors', 'selectors -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'selectors -> End']
copynode -6.652035049628466:  root add ^ IfStatement condition BinaryOperation operator >=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1']
copynode -5.780011139344424:  root add ^ IfStatement condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0']
copynode -5.3969833416631445:  root add ^ StatementExpression expression Assignment expressionl MemberReference member loc1 ^ ^ ^ ^ value This ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'value -> This']
copynode -6.64848684379831:  root add ^ IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ member unknown ^ ^ ^ ^ ^ ReturnStatement expression ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> prefix_operators member', 'prefix_operators -> !_ter', 'start -> unknown', 'root -> ReturnStatement', 'ReturnStatement -> expression']
copynode -6.0892746014287695:  root add ^ StatementExpression expression Assignment expressionl MemberReference member unknown ^ ^ ^ ^ value Literal ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'value -> Literal']
copynode -6.768683901056647:  root add ^ StatementExpression expression MethodInvocation arguments MemberReference member par0 ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par0', 'arguments -> End']
copynode -0.6971841042395681:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc3 ^ ^ initializer ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc3']
copynode -7.236436880659312:  root add ^ StatementExpression expression This selectors MemberReference member par0 ^ ^ ^ MethodInvocation ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> This', 'This -> selectors', 'selectors -> MemberReference', 'MemberReference -> member', 'member -> par0', 'selectors -> MethodInvocation']
copynode -7.333079980366165:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2']
copynode -7.1120333625003695:  root modified ^ StatementExpression expression Assignment expressionl MemberReference qualifier par0 ^ ^ member loc2 ^ ^ ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'member -> loc2']
copynode -5.813200360164046:  root add ^ StatementExpression expression MethodInvocation qualifier loc1 ^ ^ arguments MemberReference member unknown ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc1', 'arguments -> MemberReference', 'MemberReference -> member', 'start -> unknown']
copynode -6.211526937317103:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl This selectors MethodInvocation member getColumnDimension_ter ^ ^ ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> This', 'copy-This', 'operandr -> MemberReference']
copynode -6.339545444934629:  root add ^ StatementExpression expression Assignment expressionl MemberReference member loc0 ^ ^ ^ ^ value MethodInvocation ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> loc0', 'value -> MethodInvocation']
copynode -0.6971841042395681:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc1 ^ ^ initializer ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc1']
copynode -7.3000811245292425:  root add ^ StatementExpression expression MethodInvocation qualifier loc1 ^ ^ arguments This_ter ^ ^ member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc1', 'arguments -> This_ter', 'arguments -> End', 'start -> unknown']
copynode -7.404366164468229:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2']
copynode -7.33763094432652:  root add ^ StatementExpression expression This selectors MethodInvocation arguments MemberReference member ^ ^ ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> This', 'This -> selectors', 'selectors -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> member']
copynode -6.587648491142318:  root add ^ IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier par0 ^ ^ member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> prefix_operators qualifier member', 'prefix_operators -> !_ter', 'qualifier -> par0', 'start -> unknown', 'root -> End']
copynode -7.217814899515361:  root add ^ IfStatement condition BinaryOperation operator >_ter ^ ^ operandl MemberReference qualifier par0 ^ ^ member ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >_ter', 'operandl -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0']
copynode -6.64848684379831:  root add ^ IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ member unknown ^ ^ ^ ^ ^ ReturnStatement expression MemberReference member loc2 ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> prefix_operators member', 'prefix_operators -> !_ter', 'start -> unknown', 'root -> ReturnStatement', 'copy-ReturnStatement']
copynode -7.457489926367998:  root add ^ IfStatement condition MethodInvocation qualifier par0 ^ ^ member unknown ^ ^ ^ ^ ^ StatementExpression expression ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> par0', 'start -> unknown', 'root -> StatementExpression', 'StatementExpression -> expression']
copynode -7.375719598960131:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference qualifier par0 ^ ^ member ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0']
copynode -0.941202487796545:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2']
copynode -3.467834811192006:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0']
copynode -3.692739266436547:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0']
copynode -4.581987500656396:  root add ^ StatementExpression expression Assignment expressionl MemberReference member unknown ^ ^ ^ ^ value Literal ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'value -> Literal']
copynode -3.467834811192006:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1']
copynode -5.633102874737233:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference qualifier par0 ^ ^ member ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0']
copynode -4.581987500656396:  root add ^ StatementExpression expression Assignment expressionl MemberReference member unknown ^ ^ ^ ^ value MemberReference ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'value -> MemberReference']
copynode -5.49034672556445:  root add ^ IfStatement condition BinaryOperation operator >_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0']
copynode -5.395366672426462:  root modified ^ LocalVariableDeclaration type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator']
copynode -3.467834811192006:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc0 ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc0']
copynode -6.0738862454891205:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name', 'name -> loc2']
copynode -5.565261533483863:  root add ^ StatementExpression expression MethodInvocation arguments MemberReference member par0 ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par0', 'arguments -> End']
copynode -3.467834811192006:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member unknown ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'start -> unknown']
copynode -6.23574051912874:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name boolean_ter ^ ^ ^ ^ declarators VariableDeclarator name ^ initializer ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'BasicType -> name', 'name -> boolean_ter', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer']
copynode -5.274425899609923:  root add ^ StatementExpression expression MethodInvocation qualifier unknown ^ ^ arguments MemberReference member par0 ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par0']
copynode -5.729124884586781:  root add ^ IfStatement condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0']
copynode -6.351094546262175:  root add ^ StatementExpression expression Assignment expressionl This selectors MemberReference member ^ ^ ^ ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> This', 'This -> selectors', 'selectors -> MemberReference', 'MemberReference -> member']
copynode -6.22239363193512:  root add ^ StatementExpression expression MethodInvocation qualifier unknown ^ ^ arguments Literal value <string>_ter ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown', 'arguments -> Literal', 'Literal -> value', 'value -> <string>_ter']
copynode -5.942040322814137:  root add ^ IfStatement condition MethodInvocation qualifier par0 ^ ^ member unknown ^ ^ ^ ^ ^ ReturnStatement expression MemberReference member loc2 ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> par0', 'start -> unknown', 'root -> ReturnStatement', 'copy-ReturnStatement']
copynode -3.692739266436547:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc0 ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc0']
copynode -3.467834811192006:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1']
copynode -4.581987500656396:  root add ^ StatementExpression expression Assignment expressionl MemberReference member unknown ^ ^ ^ ^ value MethodInvocation ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'value -> MethodInvocation']
copynode -5.630204069893807:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter']
copynode -6.537358234170824:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2']
copynode -6.528355614282191:  root modified ^ StatementExpression expression Assignment expressionl MemberReference member loc2 ^ ^ ^ ^ value ArrayCreator ^ ^ type ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> loc2', 'value -> ArrayCreator']
copynode -6.574760659597814:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name ^ initializer ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'BasicType -> name', 'name -> int_ter', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer']
copynode -6.435035433154553:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier par0 ^ ^ member ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> par0']
copynode -5.415186048019677:  root add ^ StatementExpression expression Assignment expressionl MemberReference member loc1 ^ ^ ^ ^ value MemberReference ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'value -> MemberReference']
copynode -3.692739266436547:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member unknown ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'start -> unknown']
copynode -5.630204069893807:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter']
copynode -5.415186048019677:  root add ^ StatementExpression expression Assignment expressionl MemberReference member loc1 ^ ^ ^ ^ value Literal ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'value -> Literal']
copynode -3.692739266436547:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1']
copynode -6.121384005527943:  root add ^ IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter']
copynode -6.698947303462774:  root add ^ StatementExpression expression This selectors MemberReference member unknown ^ ^ ^ MethodInvocation ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> This', 'This -> selectors', 'selectors -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'selectors -> MethodInvocation']
copynode -5.942040322814137:  root add ^ IfStatement condition MethodInvocation qualifier par0 ^ ^ member unknown ^ ^ ^ ^ ^ ReturnStatement expression ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> par0', 'start -> unknown', 'root -> ReturnStatement', 'ReturnStatement -> expression']
copynode -6.391897927504033:  root add ^ IfStatement condition BinaryOperation operator >=_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0']
copynode -6.779128479305655:  root add ^ IfStatement condition MethodInvocation member unknown ^ ^ ^ ^ ^ ReturnStatement expression MemberReference member loc2 ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown', 'root -> ReturnStatement', 'copy-ReturnStatement', 'root -> End']
copynode -5.715618134010583:  root add ^ StatementExpression expression Assignment expressionl MemberReference member loc0 ^ ^ ^ ^ value Literal ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> loc0', 'value -> Literal']
copynode -6.847694199066609:  root add ^ IfStatement condition BinaryOperation operator >_ter ^ ^ operandl MemberReference qualifier par0 ^ ^ member ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >_ter', 'operandl -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0']
copynode -5.715618134010583:  root add ^ StatementExpression expression Assignment expressionl MemberReference member loc0 ^ ^ ^ ^ value MemberReference ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> loc0', 'value -> MemberReference']
copynode -6.464524901006371:  root add ^ IfStatement condition MethodInvocation qualifier unknown ^ ^ arguments MemberReference member par0 ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par0']
copynode -6.320894174743444:  root add ^ StatementExpression expression Assignment expressionl MemberReference member loc5 ^ ^ ^ ^ value Literal value 0_ter ^ ^ ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'copy-expressionl', 'value -> Literal', 'Literal -> value', 'value -> 0_ter']
copynode -6.820319231133908:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier par0 ^ ^ member ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> par0']
copynode -6.702788636554033:  root add ^ StatementExpression expression Assignment expressionl MemberReference qualifier par0 ^ ^ member unknown ^ ^ ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'start -> unknown']
copynode -7.031898871064186:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2']
copynode -5.415186048019677:  root add ^ StatementExpression expression Assignment expressionl MemberReference member loc1 ^ ^ ^ ^ value MethodInvocation ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'value -> MethodInvocation']
copynode -6.040535212028772:  root add ^ StatementExpression expression Assignment expressionl MemberReference member par0 ^ ^ ^ ^ value Literal ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'value -> Literal']
copynode -5.274425899609923:  root add ^ StatementExpression expression MethodInvocation qualifier unknown ^ ^ arguments MemberReference member loc0 ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> loc0']
before@9 batch0 x: -7.509459383320063: root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference qualifier par0 ^ ^ member ^ ^ ^ operandr ^ ^ ^ ^ ^  ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0']
after@9 batch0 x: -7.509459383320063: root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference qualifier par0 ^ ^ member ^ ^ ^ operandr ^ ^ ^ ^ ^  ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0']
before@9 batch1 x: -7.0878193564713: root add ^ ReturnStatement expression This_ter ^ ^ ^ ^  ; ['root -> add', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> This_ter', 'root -> End']
after@9 batch1 x: -7.0878193564713: root add ^ ReturnStatement expression This_ter ^ ^ ^ ^  ; ['root -> add', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> This_ter', 'root -> End']
copynode -0.7024265199434012:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator']
copynode -0.7024265199434012:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator']
copynode -0.7024265199434012:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer Literal ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> Literal']
copynode -0.7024265199434012:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer LambdaExpression ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> LambdaExpression']
copynode -3.637250557076186:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'operandr -> Literal']
copynode -3.842679753433913:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> Literal']
copynode -4.079257260542363:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> Literal']
copynode -0.7024265199434012:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer Assignment ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> Assignment']
copynode -0.7024265199434012:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MethodInvocation ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MethodInvocation']
copynode -0.7024265199434012:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer BinaryOperation ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> BinaryOperation']
copynode -0.7024265199434012:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayInitializer ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayInitializer']
copynode -4.442717920523137:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'operandr -> Literal']
copynode -0.7024265199434012:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MemberReference ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MemberReference']
copynode -0.7024265199434012:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer TernaryExpression ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> TernaryExpression']
copynode -3.637250557076186:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'operandr -> MemberReference']
copynode -3.842679753433913:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> MemberReference']
copynode -5.359605326782912:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc0 ^ ^ ^ ^ operandr Literal ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc0', 'operandr -> Literal']
copynode -5.732619973830879:  root modified ^ StatementExpression expression Assignment expressionl MemberReference member loc2 ^ ^ ^ ^ value ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ^ ^ type ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> loc2', 'value -> ArrayCreator', 'copy-ArrayCreator']
copynode -5.702765833120793:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc0 ^ ^ ^ ^ operandr Literal ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc0', 'operandr -> Literal']
copynode -6.10942485765554:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name', 'name -> loc2', 'root -> End']
copynode -5.949142232071608:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member unknown ^ ^ ^ ^ operandr Literal ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'operandr -> Literal']
copynode -6.343259192537516:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl This selectors MemberReference member ^ ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> This', 'This -> selectors', 'selectors -> MemberReference', 'MemberReference -> member']
copynode -6.030314243864268:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member']
copynode -6.260932750534266:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference']
copynode -4.079257260542363:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> MemberReference']
copynode -6.507242209278047:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ arguments TypeArgument pattern_type ?_ter ^ ^ ^ ^ ^ ^ declarators ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'ReferenceType -> name arguments', 'copy-name', 'arguments -> TypeArgument', 'TypeArgument -> pattern_type', 'pattern_type -> ?_ter']
copynode -6.433196197729558:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member unknown ^ ^ ^ ^ operandr Literal ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'operandr -> Literal']
copynode -6.513167608063668:  root add ^ IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference']
copynode -5.539910740684718:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier par0 ^ ^ member unknown ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> par0', 'start -> unknown']
copynode -6.082989893388003:  root add ^ IfStatement condition BinaryOperation operator >_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'operandr -> Literal']
copynode -6.73090774519369:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl This selectors MethodInvocation member getColumnDimension_ter ^ ^ ^ ^ ^ ^ operandr Literal value ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> This', 'copy-This', 'operandr -> Literal', 'Literal -> value']
copynode -6.314277732279152:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl Literal value null_ter ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> Literal', 'Literal -> value', 'value -> null_ter', 'operandr -> MemberReference']
copynode -6.817763646133244:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'ReferenceType -> name', 'copy-name', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2']
copynode -6.763524133712053:  root add ^ IfStatement condition MethodInvocation qualifier par0 ^ ^ member unknown ^ ^ ^ ^ ^ ReturnStatement expression MemberReference member loc2 ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> par0', 'start -> unknown', 'root -> ReturnStatement', 'copy-ReturnStatement', 'root -> End']
copynode -6.660154170822352:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference']
copynode -6.272749565076083:  root add ^ IfStatement condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'operandr -> Literal']
copynode -6.849661297630519:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl This selectors MethodInvocation member getColumnDimension_ter ^ ^ ^ ^ ^ ^ operandr Literal value ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> This', 'copy-This', 'operandr -> Literal', 'Literal -> value']
copynode -6.387155189644545:  root add ^ StatementExpression expression This selectors MemberReference member unknown ^ ^ ^ MethodInvocation arguments ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> This', 'This -> selectors', 'selectors -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'selectors -> MethodInvocation', 'MethodInvocation -> arguments member']
copynode -4.442717920523137:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'operandr -> MemberReference']
copynode -5.539910740684718:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> par0', 'member -> length_ter']
copynode -7.014933658065274:  root modified ^ StatementExpression expression Assignment expressionl MemberReference member loc4 ^ ^ ^ ^ value ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'copy-expressionl', 'value -> ArrayCreator', 'copy-ArrayCreator', 'type -> =_ter', 'root -> End']
copynode -6.269251368474215:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> par0', 'copy-member']
copynode -7.050811117514968:  root add ^ IfStatement condition MethodInvocation member unknown ^ ^ ^ ^ ^ ReturnStatement expression Literal value ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> Literal', 'Literal -> value']
copynode -5.359605326782912:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc0 ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc0', 'operandr -> MemberReference']
copynode -7.108012683223933:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl This selectors MemberReference member ^ ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> This', 'This -> selectors', 'selectors -> MemberReference', 'MemberReference -> member']
copynode -7.129849990829825:  root add ^ StatementExpression expression This selectors MethodInvocation member unknown ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> This', 'This -> selectors', 'selectors -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown', 'selectors -> End', 'root -> End']
copynode -6.082989893388003:  root add ^ IfStatement condition BinaryOperation operator >_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'operandr -> MemberReference']
copynode -5.539910740684718:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> par0', 'copy-member']
copynode -6.294055120437406:  root add ^ StatementExpression expression Assignment expressionl MemberReference member loc1 ^ ^ ^ ^ value MethodInvocation qualifier ^ member ^ ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'value -> MethodInvocation', 'MethodInvocation -> qualifier member']
copynode -6.355187090113759:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator']
copynode -6.931571977213025:  root add ^ StatementExpression expression MethodInvocation qualifier loc1 ^ ^ arguments Literal value <string>_ter ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc1', 'arguments -> Literal', 'Literal -> value', 'value -> <string>_ter', 'arguments -> End']
copynode -7.267128900974058:  root add ^ StatementExpression expression Assignment expressionl MemberReference member unknown ^ ^ ^ ^ value Literal value ^ ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'value -> Literal', 'Literal -> value']
copynode -6.997208077460527:  root add ^ IfStatement condition MethodInvocation qualifier par0 ^ ^ member unknown ^ ^ ^ ^ ^ ReturnStatement expression Literal ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> par0', 'start -> unknown', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> Literal']
copynode -6.882391749997623:  root modified ^ LocalVariableDeclaration type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ^ dimensions ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions']
copynode -7.065684809815139:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr Literal ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'operandr -> Literal']
copynode -7.0036881025880575:  root add ^ StatementExpression expression MethodInvocation qualifier loc1 ^ ^ arguments MemberReference member par0 ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc1', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par0', 'arguments -> End']
copynode -7.318223586305976:  root add ^ StatementExpression expression MethodInvocation arguments MemberReference member par0 ^ ^ ^ ^ member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par0', 'arguments -> End', 'start -> unknown']
copynode -7.1380208428017795:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference']
copynode -7.065032368525863:  root add ^ StatementExpression expression MethodInvocation qualifier loc1 ^ ^ arguments MemberReference member loc1 ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc1', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'arguments -> End']
copynode -6.6611033896915615:  root add ^ IfStatement condition BinaryOperation operator >_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> Literal']
copynode -7.201461033313535:  root add ^ StatementExpression expression Assignment expressionl MemberReference member loc1 ^ ^ ^ ^ value This selectors ^ ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'value -> This', 'This -> selectors']
copynode -6.272749565076083:  root add ^ IfStatement condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'operandr -> MemberReference']
copynode -7.402429288253188:  root add ^ StatementExpression expression MethodInvocation qualifier loc1 ^ ^ arguments This_ter ^ ^ member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc1', 'arguments -> This_ter', 'arguments -> End', 'start -> unknown', 'root -> End']
copynode -5.539910740684718:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier par0 ^ ^ member size_ter ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> par0', 'member -> size_ter']
copynode -7.348257745616138:  root modified ^ StatementExpression expression Assignment expressionl MemberReference qualifier par0 ^ ^ member loc2 ^ ^ ^ ^ value ArrayCreator ^ ^ type ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'member -> loc2', 'value -> ArrayCreator']
copynode -5.949142232071608:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member unknown ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'operandr -> MemberReference']
copynode -0.9454266973771155:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator']
copynode -0.9454266973771155:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer Literal ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> Literal']
copynode -0.9454266973771155:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayInitializer ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayInitializer']
copynode -0.9454266973771155:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayInitializer_ter ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayInitializer_ter']
copynode -0.9454266973771155:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator']
copynode -3.955869663041085:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> Literal']
copynode -3.8928313362412155:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> Literal']
copynode -0.9454266973771155:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer LambdaExpression ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> LambdaExpression']
copynode -0.9454266973771155:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer BinaryOperation ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> BinaryOperation']
copynode -0.9454266973771155:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MemberReference ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MemberReference']
copynode -0.9454266973771155:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer TernaryExpression ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> TernaryExpression']
copynode -0.9454266973771155:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MethodInvocation ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MethodInvocation']
copynode -5.270041943062097:  root add ^ StatementExpression expression Assignment expressionl MemberReference member unknown ^ ^ ^ ^ value Literal value ^ ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'value -> Literal', 'Literal -> value']
copynode -3.8928313362412155:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> MemberReference']
copynode -5.727393488865346:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'operandr -> Literal']
copynode -5.880174279678613:  root add ^ StatementExpression expression Assignment expressionl MemberReference member unknown ^ ^ ^ ^ value MemberReference member ^ ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'value -> MemberReference', 'MemberReference -> member']
copynode -6.078222154174:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name', 'name -> loc2', 'root -> End']
copynode -3.955869663041085:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> MemberReference']
copynode -6.171865036711097:  root add ^ StatementExpression expression MethodInvocation arguments MemberReference member par0 ^ ^ ^ ^ member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par0', 'arguments -> End', 'start -> unknown']
copynode -5.945056538563222:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc0 ^ ^ ^ ^ operandr Literal ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc0', 'operandr -> Literal']
copynode -6.2731782561168075:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name boolean_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'BasicType -> name', 'name -> boolean_ter', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2']
copynode -5.747144255321473:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member']
copynode -5.939084891229868:  root modified ^ LocalVariableDeclaration type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ^ dimensions ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions']
copynode -6.493324099574238:  root add ^ IfStatement condition MethodInvocation qualifier par0 ^ ^ member unknown ^ ^ ^ ^ ^ ReturnStatement expression MemberReference member loc2 ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> par0', 'start -> unknown', 'root -> ReturnStatement', 'copy-ReturnStatement', 'root -> End']
copynode -5.910779293160886:  root add ^ IfStatement condition BinaryOperation operator >_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> Literal']
copynode -6.25199470994994:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member unknown ^ ^ ^ ^ operandr Literal ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'operandr -> Literal']
copynode -6.612283914349973:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'BasicType -> name', 'name -> int_ter', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2']
copynode -6.494474429171532:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc0 ^ ^ ^ ^ operandr Literal ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc0', 'operandr -> Literal']
copynode -6.578297873027623:  root modified ^ StatementExpression expression Assignment expressionl MemberReference member loc2 ^ ^ ^ ^ value ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ^ ^ type ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> loc2', 'value -> ArrayCreator', 'copy-ArrayCreator']
copynode -6.534789789002389:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference']
copynode -6.738402963150293:  root add ^ StatementExpression expression Assignment expressionl MemberReference member loc1 ^ ^ ^ ^ value Literal value ^ ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'value -> Literal', 'Literal -> value']
copynode -6.507142405491322:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr Literal ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'operandr -> Literal']
copynode -6.7341726901941:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference']
copynode -6.702716845553368:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member unknown ^ ^ ^ ^ operandr Literal ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'operandr -> Literal']
copynode -6.679456353653222:  root add ^ StatementExpression expression Assignment expressionl MemberReference member loc1 ^ ^ ^ ^ value MemberReference member ^ ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'value -> MemberReference', 'MemberReference -> member']
copynode -6.755546587985009:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'operandr -> Literal']
copynode -6.873916984070092:  root add ^ StatementExpression expression Assignment expressionl MemberReference member loc0 ^ ^ ^ ^ value Literal value ^ ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> loc0', 'value -> Literal', 'Literal -> value']
copynode -6.780699651222676:  root add ^ IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference']
copynode -5.910779293160886:  root add ^ IfStatement condition BinaryOperation operator >_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> MemberReference']
copynode -6.351304154377431:  root add ^ IfStatement condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> Literal']
copynode -6.473968178033829:  root add ^ StatementExpression expression MethodInvocation qualifier unknown ^ ^ arguments Literal value <string>_ter ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown', 'arguments -> Literal', 'Literal -> value', 'value -> <string>_ter', 'arguments -> End']
copynode -6.354578778613359:  root add ^ StatementExpression expression Assignment expressionl This selectors MemberReference member unknown ^ ^ ^ ^ ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> This', 'This -> selectors', 'selectors -> MemberReference', 'MemberReference -> member', 'start -> unknown']
copynode -7.04758656071499:  root add ^ StatementExpression expression Assignment expressionl MemberReference member par0 ^ ^ ^ ^ value Literal value ^ ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'value -> Literal', 'Literal -> value']
copynode -6.329491412267089:  root add ^ StatementExpression expression MethodInvocation qualifier unknown ^ ^ arguments MemberReference member par0 ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par0', 'arguments -> End']
copynode -6.808771847281605:  root add ^ IfStatement condition MethodInvocation qualifier par0 ^ ^ member unknown ^ ^ ^ ^ ^ ReturnStatement expression Literal ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> par0', 'start -> unknown', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> Literal']
copynode -6.96791696595028:  root add ^ StatementExpression expression Assignment expressionl MemberReference member loc0 ^ ^ ^ ^ value MemberReference member ^ ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> loc0', 'value -> MemberReference', 'MemberReference -> member']
copynode -5.939084891229868:  root modified ^ LocalVariableDeclaration type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ^ dimensions ^ initializer ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer']
before@10 batch0 x: -7.506507172714919: root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member unknown ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ ^ ^  ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'operandr -> MemberReference']
after@10 batch0 x: -7.506507172714919: root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member unknown ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ ^ ^  ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'operandr -> MemberReference']
before@10 batch1 x: -7.193578843027353: root modified ^ LocalVariableDeclaration type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ^ dimensions ^ initializer ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer']
after@10 batch1 x: -7.193578843027353: root modified ^ LocalVariableDeclaration type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ^ dimensions ^ initializer ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer']
copynode -1.548637118889019:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ^ dimensions ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions']
copynode -2.6319958835374564:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer Literal value ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> Literal', 'Literal -> value']
copynode -1.548637118889019:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ^ dimensions ^ initializer ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer']
copynode -2.611657705856487:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator selectors ^ type ^ arguments ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> selectors type arguments']
copynode -2.611657705856487:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator type ^ arguments ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> type arguments']
copynode -3.8683596993796527:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'operandr -> Literal', 'Literal -> value']
copynode -3.2358320623170584:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer LambdaExpression parameters ^ body ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> LambdaExpression', 'LambdaExpression -> parameters body']
copynode -4.103391095530242:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> Literal', 'Literal -> value']
copynode -4.197265687864274:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> Literal', 'Literal -> value']
copynode -4.214368668152019:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer Assignment expressionl ^ value ^ type ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> Assignment', 'Assignment -> expressionl value type']
copynode -2.611657705856487:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator selectors ^ type ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> selectors type']
copynode -4.458674040390179:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
copynode -2.611657705856487:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator type ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> type']
copynode -4.491315689636394:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayInitializer initializers ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers']
copynode -4.545765961986035:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'operandr -> Literal', 'Literal -> value']
copynode -3.2358320623170584:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer LambdaExpression body ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> LambdaExpression', 'LambdaExpression -> body']
copynode -4.786766615463421:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer TernaryExpression condition ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> TernaryExpression', 'TernaryExpression -> condition if_true if_false']
copynode -4.575003233505413:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MemberReference qualifier ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MemberReference', 'MemberReference -> qualifier member']
copynode -4.377673950744793:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MethodInvocation qualifier ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MethodInvocation', 'MethodInvocation -> qualifier member']
copynode -4.377673950744793:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MethodInvocation qualifier ^ arguments ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MethodInvocation', 'MethodInvocation -> qualifier arguments member']
copynode -5.599357947241515:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc0 ^ ^ ^ ^ operandr Literal value ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc0', 'operandr -> Literal', 'Literal -> value']
copynode -5.795334639959037:  root modified ^ StatementExpression expression Assignment expressionl MemberReference member loc2 ^ ^ ^ ^ value ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> loc2', 'value -> ArrayCreator', 'copy-ArrayCreator', 'type -> =_ter']
copynode -5.8089606571011245:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc0 ^ ^ ^ ^ operandr Literal value ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc0', 'operandr -> Literal', 'Literal -> value']
copynode -5.415066852699965:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr MemberReference member ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'operandr -> MemberReference', 'MemberReference -> member']
copynode -1.548637118889019:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'copy-ArrayCreator']
copynode -4.575003233505413:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MemberReference member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MemberReference', 'MemberReference -> member']
copynode -5.508004560600966:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr MemberReference member ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> MemberReference', 'MemberReference -> member']
copynode -5.415066852699965:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr MemberReference qualifier ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'operandr -> MemberReference', 'MemberReference -> qualifier member']
copynode -6.249335631262511:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member unknown ^ ^ ^ ^ operandr Literal value ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'operandr -> Literal', 'Literal -> value']
copynode -5.508004560600966:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr MemberReference qualifier ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> MemberReference', 'MemberReference -> qualifier member']
copynode -3.2358320623170584:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer LambdaExpression parameters ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> LambdaExpression', 'LambdaExpression -> parameters']
copynode -6.459024093579501:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -6.590425144415349:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member unknown ^ ^ ^ ^ operandr Literal value ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'operandr -> Literal', 'Literal -> value']
copynode -4.377673950744793:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MethodInvocation member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MethodInvocation', 'MethodInvocation -> member']
copynode -6.564127101562917:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ arguments TypeArgument pattern_type ?_ter ^ ^ ^ ^ ^ ^ declarators ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'ReferenceType -> name arguments', 'copy-name', 'arguments -> TypeArgument', 'TypeArgument -> pattern_type', 'pattern_type -> ?_ter', 'arguments -> End']
copynode -4.575003233505413:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MemberReference selectors ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MemberReference', 'MemberReference -> selectors member']
copynode -6.394755370449275:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ operandr Literal ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'operandr -> Literal']
copynode -6.7329871277324855:  root add ^ IfStatement condition BinaryOperation operator >_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'operandr -> Literal', 'Literal -> value']
copynode -6.700952399056405:  root add ^ IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -6.471532832365483:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr MemberReference member ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> MemberReference', 'MemberReference -> member']
copynode -6.861089564394206:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -6.867599270772189:  root add ^ IfStatement condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'operandr -> Literal', 'Literal -> value']
copynode -6.7582897949032485:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl This selectors MethodInvocation member getColumnDimension_ter ^ ^ ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> This', 'copy-This', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter']
copynode -6.870461001526564:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl This selectors MethodInvocation member getColumnDimension_ter ^ ^ ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> This', 'copy-This', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter']
copynode -6.793553674127907:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl Literal value null_ter ^ ^ ^ ^ operandr MemberReference member ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> Literal', 'Literal -> value', 'value -> null_ter', 'operandr -> MemberReference', 'MemberReference -> member']
copynode -7.0561782899312675:  root add ^ IfStatement condition MethodInvocation member unknown ^ ^ ^ ^ ^ ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> Literal', 'Literal -> value', 'value -> null_ter']
copynode -4.377673950744793:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MethodInvocation arguments ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MethodInvocation', 'MethodInvocation -> arguments member']
copynode -6.7171699474565685:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier par0 ^ ^ member unknown ^ ^ ^ ^ operandr Literal ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> par0', 'start -> unknown', 'operandr -> Literal']
copynode -6.987483210396022:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ operandr Literal ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> par0', 'member -> length_ter', 'operandr -> Literal']
copynode -7.04910423560068:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ operandr Literal ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> par0', 'copy-member', 'operandr -> Literal']
copynode -7.299118775874376:  root add ^ IfStatement condition MethodInvocation qualifier par0 ^ ^ member unknown ^ ^ ^ ^ ^ ReturnStatement expression Literal value ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> par0', 'start -> unknown', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> Literal', 'Literal -> value']
copynode -7.305001287837513:  root modified ^ LocalVariableDeclaration type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType ^ ^ dimensions ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> ReferenceType']
copynode -6.971259247045964:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr MemberReference member ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'operandr -> MemberReference', 'MemberReference -> member']
copynode -7.308183848392218:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr Literal value ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'operandr -> Literal', 'Literal -> value']
copynode -7.346122492104769:  root add ^ StatementExpression expression MethodInvocation arguments MemberReference member par0 ^ ^ ^ ^ member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par0', 'arguments -> End', 'start -> unknown', 'root -> End']
copynode -7.357827007304877:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -7.268495546653867:  root add ^ StatementExpression expression MethodInvocation qualifier loc1 ^ ^ arguments Literal value <string>_ter ^ ^ ^ ^ member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc1', 'arguments -> Literal', 'Literal -> value', 'value -> <string>_ter', 'arguments -> End', 'start -> unknown']
copynode -7.308232819661498:  root add ^ StatementExpression expression MethodInvocation qualifier loc1 ^ ^ arguments MemberReference member par0 ^ ^ ^ ^ member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc1', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par0', 'arguments -> End', 'start -> unknown']
copynode -7.393781683873385:  root add ^ IfStatement condition BinaryOperation operator >_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> Literal', 'Literal -> value']
copynode -6.882429852616042:  root add ^ StatementExpression expression This selectors MemberReference member unknown ^ ^ ^ MethodInvocation arguments MemberReference ^ ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> This', 'This -> selectors', 'selectors -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'selectors -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference']
copynode -7.382679557427764:  root add ^ StatementExpression expression MethodInvocation qualifier loc1 ^ ^ arguments MemberReference member loc1 ^ ^ ^ ^ member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc1', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'arguments -> End', 'start -> unknown']
copynode -1.636058981064707:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ^ dimensions ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions']
copynode -1.636058981064707:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ^ dimensions ^ initializer ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer']
copynode -3.173347706440836:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer Literal value ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> Literal', 'Literal -> value']
copynode -3.2778589674271643:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayInitializer initializers ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers']
copynode -3.569650883320719:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayInitializer_ter ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayInitializer_ter', 'root -> End']
copynode -4.109161842148751:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> Literal', 'Literal -> value']
copynode -4.180459599476308:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> Literal', 'Literal -> value']
copynode -4.545543903950602:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
copynode -3.615988011006266:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator type ^ arguments ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> type arguments']
copynode -3.615988011006266:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator selectors ^ type ^ arguments ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> selectors type arguments']
copynode -4.347151989582926:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer LambdaExpression parameters ^ body ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> LambdaExpression', 'LambdaExpression -> parameters body']
copynode -5.109530682209879:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer TernaryExpression condition ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> TernaryExpression', 'TernaryExpression -> condition if_true if_false']
copynode -4.5745794721879065:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MemberReference qualifier ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MemberReference', 'MemberReference -> qualifier member']
copynode -3.615988011006266:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator type ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> type']
copynode -3.615988011006266:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator selectors ^ type ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> selectors type']
copynode -1.636058981064707:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'copy-ArrayCreator']
copynode -4.347151989582926:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer LambdaExpression body ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> LambdaExpression', 'LambdaExpression -> body']
copynode -5.264658207539469:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MethodInvocation qualifier ^ arguments ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MethodInvocation', 'MethodInvocation -> qualifier arguments member']
copynode -5.98359141824767:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'operandr -> Literal', 'Literal -> value']
copynode -5.4751125681214035:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr MemberReference qualifier ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> MemberReference', 'MemberReference -> qualifier member']
copynode -4.5745794721879065:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MemberReference member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MemberReference', 'MemberReference -> member']
copynode -5.4751125681214035:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr MemberReference member ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> MemberReference', 'MemberReference -> member']
copynode -6.198991484940052:  root add ^ StatementExpression expression MethodInvocation arguments MemberReference member par0 ^ ^ ^ ^ member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par0', 'arguments -> End', 'start -> unknown', 'root -> End']
copynode -6.216930012684315:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc0 ^ ^ ^ ^ operandr Literal value ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc0', 'operandr -> Literal', 'Literal -> value']
copynode -3.173347706440836:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer Literal prefix_operators ^ value ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> Literal', 'Literal -> prefix_operators value']
copynode -4.5745794721879065:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MemberReference selectors ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MemberReference', 'MemberReference -> selectors member']
copynode -6.298448566347361:  root modified ^ LocalVariableDeclaration type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType ^ ^ dimensions ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> BasicType']
copynode -5.305024449247867:  root add ^ StatementExpression expression Assignment expressionl MemberReference member unknown ^ ^ ^ ^ value Literal value false_ter ^ ^ ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'value -> Literal', 'Literal -> value', 'value -> false_ter']
copynode -6.088430869858712:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr MemberReference member ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> MemberReference', 'MemberReference -> member']
copynode -6.577599625568837:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member unknown ^ ^ ^ ^ operandr Literal value ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'operandr -> Literal', 'Literal -> value']
copynode -5.305024449247867:  root add ^ StatementExpression expression Assignment expressionl MemberReference member unknown ^ ^ ^ ^ value Literal value true_ter ^ ^ ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'value -> Literal', 'Literal -> value', 'value -> true_ter']
copynode -6.569335039239377:  root add ^ IfStatement condition BinaryOperation operator >_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> Literal', 'Literal -> value']
copynode -6.29068437544629:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ operandr Literal ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'operandr -> Literal']
copynode -6.639999422710389:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc0 ^ ^ ^ ^ operandr Literal value ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc0', 'operandr -> Literal', 'Literal -> value']
copynode -6.279770034831017:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name boolean_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'BasicType -> name', 'name -> boolean_ter', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator']
copynode -3.173347706440836:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer Literal selectors ^ value ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> Literal', 'Literal -> selectors value']
copynode -6.68610681919381:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -6.7864527511410415:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr Literal value ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'operandr -> Literal', 'Literal -> value']
copynode -5.264658207539469:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MethodInvocation qualifier ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MethodInvocation', 'MethodInvocation -> qualifier member']
copynode -6.882904443424195:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member unknown ^ ^ ^ ^ operandr Literal value ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'operandr -> Literal', 'Literal -> value']
copynode -6.894721630495042:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'operandr -> Literal', 'Literal -> value']
copynode -6.866199288051575:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -6.921491782646626:  root add ^ IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -6.993855993729085:  root add ^ IfStatement condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> Literal', 'Literal -> value']
copynode -5.305024449247867:  root add ^ StatementExpression expression Assignment expressionl MemberReference member unknown ^ ^ ^ ^ value Literal value 0_ter ^ ^ ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'value -> Literal', 'Literal -> value', 'value -> 0_ter']
before@11 batch0 x: -7.498566521331668: root add ^ StatementExpression expression MethodInvocation qualifier loc1 ^ ^ arguments MemberReference member loc1 ^ ^ ^ ^ member unknown ^ ^ ^ ^ ^ ^  ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc1', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'arguments -> End', 'start -> unknown']
after@11 batch0 x: -7.498566521331668: root add ^ StatementExpression expression MethodInvocation qualifier loc1 ^ ^ arguments MemberReference member loc1 ^ ^ ^ ^ member unknown ^ ^ ^ ^ ^ ^  ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> loc1', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'arguments -> End', 'start -> unknown']
before@11 batch1 x: -7.0878193564713: root add ^ ReturnStatement expression This_ter ^ ^ ^ ^  ; ['root -> add', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> This_ter', 'root -> End']
after@11 batch1 x: -7.0878193564713: root add ^ ReturnStatement expression This_ter ^ ^ ^ ^  ; ['root -> add', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> This_ter', 'root -> End']
copynode -1.9742055505048484:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType ^ ^ dimensions ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> ReferenceType']
copynode -2.6716562181245536:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType ^ ^ dimensions ^ initializer ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType']
copynode -2.6397437278646976:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> Literal', 'Literal -> value', 'value -> null_ter']
copynode -3.615885582519695:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator selectors MethodInvocation ^ ^ type ^ arguments ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> selectors type arguments', 'selectors -> MethodInvocation']
copynode -3.8355396657716483:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator type ReferenceType ^ ^ arguments ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> type arguments', 'type -> ReferenceType']
copynode -3.889762009959668:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter']
copynode -4.126007519196719:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter']
copynode -4.2105593658052385:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter']
copynode -4.215015349211171:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer Assignment expressionl MemberReference ^ ^ value ^ type ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference']
copynode -4.504689064575359:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator type ReferenceType ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> type', 'type -> ReferenceType']
copynode -4.448824611259624:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator selectors MethodInvocation ^ ^ type ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> selectors type', 'selectors -> MethodInvocation']
copynode -4.558402557391673:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter']
copynode -2.6397437278646976:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> Literal', 'Literal -> value', 'value -> <string>_ter']
copynode -5.054857876850292:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MemberReference qualifier par0 ^ ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0']
copynode -4.791224533459172:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer TernaryExpression condition BinaryOperation ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation']
copynode -4.531882804585621:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayInitializer initializers Literal ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> Literal']
copynode -5.270044055534527:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MethodInvocation qualifier par0 ^ ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> par0']
copynode -4.474987012101337:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer BinaryOperation operator +_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter']
copynode -5.461751666618511:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MethodInvocation qualifier unknown ^ ^ arguments ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown']
copynode -5.620456384029239:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc0 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc0', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter']
copynode -5.796374924248084:  root modified ^ StatementExpression expression Assignment expressionl MemberReference member loc2 ^ ^ ^ ^ value ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> loc2', 'value -> ArrayCreator', 'copy-ArrayCreator', 'type -> =_ter', 'root -> End']
copynode -5.8213940928690135:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc0 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc0', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter']
copynode -6.031677451683208:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'copy-ArrayCreator', 'root -> End']
copynode -4.7754218250047415:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer LambdaExpression body StatementExpression ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> LambdaExpression', 'LambdaExpression -> body', 'body -> StatementExpression']
copynode -3.94238528306596:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer LambdaExpression parameters FormalParameter ^ ^ body ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> LambdaExpression', 'LambdaExpression -> parameters body', 'parameters -> FormalParameter']
copynode -3.94238528306596:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer LambdaExpression parameters ^ body ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> LambdaExpression', 'LambdaExpression -> parameters body', 'parameters -> End']
copynode -4.531882804585621:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayInitializer initializers MemberReference ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> MemberReference']
copynode -4.474987012101337:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer BinaryOperation operator |_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> |_ter']
copynode -4.474987012101337:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer BinaryOperation operator &&_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter']
copynode -6.270343549083918:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member unknown ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter']
copynode -4.7754218250047415:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer LambdaExpression body ReturnStatement ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> LambdaExpression', 'LambdaExpression -> body', 'body -> ReturnStatement']
copynode -4.791224533459172:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer TernaryExpression condition MemberReference ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> MemberReference']
copynode -3.94238528306596:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer LambdaExpression parameters MemberReference ^ ^ body ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> LambdaExpression', 'LambdaExpression -> parameters body', 'parameters -> MemberReference']
copynode -4.531882804585621:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayInitializer initializers ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> End']
copynode -6.617490377975628:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MethodInvocation member unknown ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown']
copynode -6.602348628919572:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member unknown ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter']
copynode -6.071825590683147:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MemberReference member unknown ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MemberReference', 'MemberReference -> member', 'start -> unknown']
copynode -3.94238528306596:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer LambdaExpression parameters InferredFormalParameter ^ ^ body ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> LambdaExpression', 'LambdaExpression -> parameters body', 'parameters -> InferredFormalParameter']
copynode -6.710081733297557:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ operandr Literal value ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'operandr -> Literal', 'Literal -> value']
copynode -4.531882804585621:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayInitializer initializers MethodInvocation ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> MethodInvocation']
copynode -4.474987012101337:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer BinaryOperation operator &_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &_ter']
copynode -2.6397437278646976:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer Literal value true_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> Literal', 'Literal -> value', 'value -> true_ter']
copynode -6.026237681042403:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr MemberReference member loc1 ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'operandr -> MemberReference', 'MemberReference -> member', 'member -> loc1']
copynode -6.086441412102431:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr MemberReference member loc1 ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> MemberReference', 'MemberReference -> member', 'member -> loc1']
copynode -6.773727625142783:  root add ^ IfStatement condition BinaryOperation operator >_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'operandr -> Literal', 'Literal -> value', 'value -> 0_ter']
copynode -5.270044055534527:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MethodInvocation qualifier unknown ^ ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MethodInvocation', 'MethodInvocation -> qualifier member', 'start -> unknown']
copynode -3.889762009959668:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'operandr -> Literal', 'Literal -> value', 'value -> 0_ter']
copynode -3.615885582519695:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator selectors MethodInvocation member getColumnDimension_ter ^ ^ ^ ^ type ^ arguments ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> selectors type arguments', 'copy-selectors']
copynode -6.671002677641809:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ arguments TypeArgument pattern_type ?_ter ^ ^ ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'ReferenceType -> name arguments', 'copy-name', 'arguments -> TypeArgument', 'TypeArgument -> pattern_type', 'pattern_type -> ?_ter', 'arguments -> End', 'copy-declarators']
copynode -2.6397437278646976:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer Literal value false_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> Literal', 'Literal -> value', 'value -> false_ter']
copynode -4.215015349211171:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer Assignment expressionl MemberReference member loc4 ^ ^ ^ ^ value ^ type ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> Assignment', 'Assignment -> expressionl value type', 'copy-expressionl']
copynode -6.912198967766017:  root add ^ IfStatement condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'operandr -> Literal', 'Literal -> value', 'value -> 0_ter']
copynode -6.676493254257366:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MemberReference selectors ArraySelector ^ ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MemberReference', 'MemberReference -> selectors member', 'selectors -> ArraySelector']
copynode -4.7754218250047415:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer LambdaExpression body MethodInvocation ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> LambdaExpression', 'LambdaExpression -> body', 'body -> MethodInvocation']
copynode -4.215015349211171:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer Assignment expressionl MemberReference selectors ArraySelector index MemberReference member loc3 ^ ^ ^ ^ ^ ^ member loc2 ^ ^ ^ ^ value ^ type ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> Assignment', 'Assignment -> expressionl value type', 'copy-expressionl']
copynode -6.954053490888327:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl This selectors MethodInvocation member getColumnDimension_ter ^ ^ ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> This', 'copy-This', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> End']
copynode -4.7754218250047415:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer LambdaExpression body IfStatement ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> LambdaExpression', 'LambdaExpression -> body', 'body -> IfStatement']
copynode -4.126007519196719:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> Literal', 'Literal -> value', 'value -> 0_ter']
copynode -7.1191727998666465:  root add ^ IfStatement condition MethodInvocation member unknown ^ ^ ^ ^ ^ ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> End']
copynode -6.246422007214278:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr MemberReference qualifier unknown ^ ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'operandr -> MemberReference', 'MemberReference -> qualifier member', 'start -> unknown']
copynode -4.531882804585621:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayInitializer initializers BinaryOperation ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> BinaryOperation']
copynode -4.791224533459172:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer TernaryExpression condition MethodInvocation ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> MethodInvocation']
copynode -7.207524306606501:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier par0 ^ ^ member unknown ^ ^ ^ ^ operandr Literal value ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> par0', 'start -> unknown', 'operandr -> Literal', 'Literal -> value']
copynode -7.220515526365489:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ operandr Literal value ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> par0', 'copy-member', 'operandr -> Literal', 'Literal -> value']
copynode -6.246422007214278:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr MemberReference qualifier par0 ^ ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'operandr -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0']
copynode -7.214650995563716:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ operandr Literal value ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> par0', 'member -> length_ter', 'operandr -> Literal', 'Literal -> value']
copynode -4.474987012101337:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer BinaryOperation operator !=_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter']
copynode -6.3982757474295795:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr MemberReference qualifier par0 ^ ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0']
copynode -2.0041930326260626:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType ^ ^ dimensions ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> BasicType']
copynode -2.8882662602700293:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType ^ ^ dimensions ^ initializer ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> BasicType']
copynode -3.256150918547064:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> Literal', 'Literal -> value', 'value -> 0_ter']
copynode -3.288639083970338:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayInitializer initializers Literal ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> Literal']
copynode -4.12885315483436:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter']
copynode -4.211831267457455:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter']
copynode -3.256150918547064:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> Literal', 'Literal -> value', 'value -> 1_ter']
copynode -2.0041930326260626:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType ^ ^ dimensions ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> ReferenceType']
copynode -4.839112515095621:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator selectors MethodInvocation ^ ^ type ^ arguments ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> selectors type arguments', 'selectors -> MethodInvocation']
copynode -4.775382275227457:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator type BasicType ^ ^ arguments ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> type arguments', 'type -> BasicType']
copynode -5.209509427193552:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MemberReference qualifier par0 ^ ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0']
copynode -5.114070207811892:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer TernaryExpression condition BinaryOperation ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation']
copynode -3.288639083970338:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayInitializer initializers BinaryOperation ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> BinaryOperation']
copynode -3.288639083970338:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayInitializer initializers MemberReference ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> MemberReference']
copynode -4.775382275227457:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator type ReferenceType ^ ^ arguments ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> type arguments', 'type -> ReferenceType']
copynode -5.692327673081309:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'copy-ArrayCreator', 'root -> End']
copynode -4.612255217973143:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer BinaryOperation operator +_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter']
copynode -5.433554882649332:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator selectors MethodInvocation ^ ^ type ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> selectors type', 'selectors -> MethodInvocation']
copynode -3.288639083970338:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayInitializer initializers ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> End']
copynode -5.340806240681559:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator type BasicType ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> type', 'type -> BasicType']
copynode -4.612255217973143:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer BinaryOperation operator |_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> |_ter']
copynode -2.8882662602700293:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType ^ ^ dimensions ^ initializer ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType']
copynode -6.013787263538688:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter']
copynode -3.288639083970338:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayInitializer initializers MethodInvocation ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> MethodInvocation']
copynode -3.256150918547064:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer Literal value 2_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> Literal', 'Literal -> value', 'value -> 2_ter']
copynode -3.256150918547064:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer Literal value false_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> Literal', 'Literal -> value', 'value -> false_ter']
copynode -5.340806240681559:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator type ReferenceType ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> type', 'type -> ReferenceType']
copynode -3.288639083970338:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayInitializer initializers This ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> This']
copynode -3.256150918547064:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> Literal', 'Literal -> value', 'value -> null_ter']
copynode -6.2864263006486:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer Literal prefix_operators -_ter ^ ^ value ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> Literal', 'Literal -> prefix_operators value', 'prefix_operators -> -_ter']
copynode -6.006584221962839:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MethodInvocation qualifier unknown ^ ^ arguments ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown']
copynode -6.246412395965308:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc0 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc0', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter']
copynode -6.34493650496006:  root modified ^ LocalVariableDeclaration type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> BasicType', 'copy-BasicType']
copynode -6.428025190252811:  root add ^ StatementExpression expression Assignment expressionl MemberReference member unknown ^ ^ ^ ^ value Literal value false_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'value -> Literal', 'Literal -> value', 'value -> false_ter', 'type -> =_ter']
copynode -3.256150918547064:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer Literal value true_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> Literal', 'Literal -> value', 'value -> true_ter']
copynode -3.288639083970338:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayInitializer initializers ArrayCreator ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> ArrayCreator']
copynode -3.288639083970338:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayInitializer initializers Cast ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> Cast']
copynode -6.650060448329896:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ operandr Literal value ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'operandr -> Literal', 'Literal -> value']
copynode -4.914347166661173:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer LambdaExpression parameters MemberReference ^ ^ body ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> LambdaExpression', 'LambdaExpression -> parameters body', 'parameters -> MemberReference']
copynode -6.658868889790028:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc0 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc0', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter']
copynode -6.6066469247452915:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member unknown ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter']
copynode -6.62048116652295:  root add ^ IfStatement condition BinaryOperation operator >_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> Literal', 'Literal -> value', 'value -> 0_ter']
copynode -6.171682845335454:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr MemberReference qualifier par0 ^ ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0']
copynode -6.617207471746951:  root add ^ StatementExpression expression Assignment expressionl MemberReference member unknown ^ ^ ^ ^ value Literal value true_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'value -> Literal', 'Literal -> value', 'value -> true_ter', 'type -> =_ter']
copynode -4.914347166661173:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer LambdaExpression parameters InferredFormalParameter ^ ^ body ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> LambdaExpression', 'LambdaExpression -> parameters body', 'parameters -> InferredFormalParameter']
copynode -6.3194737383164465:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MemberReference selectors ArraySelector ^ ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MemberReference', 'MemberReference -> selectors member', 'selectors -> ArraySelector']
copynode -4.839112515095621:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator selectors ArraySelector ^ ^ type ^ arguments ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> selectors type arguments', 'selectors -> ArraySelector']
before@12 batch0 x: -7.280636563431472: root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr MemberReference qualifier par0 ^ ^ member ^ ^ ^ ^ ^ ^ ^  ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0']
after@12 batch0 x: -7.280636563431472: root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr MemberReference qualifier par0 ^ ^ member ^ ^ ^ ^ ^ ^ ^  ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0']
before@12 batch1 x: -6.862028556410223: root add ^ IfStatement condition MethodInvocation member unknown ^ ^ ^ ^ ^ ReturnStatement expression MemberReference member loc2 ^ ^ ^ ^ ^ ^  ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown', 'root -> ReturnStatement', 'copy-ReturnStatement', 'root -> End']
after@12 batch1 x: -6.862028556410223: root add ^ IfStatement condition MethodInvocation member unknown ^ ^ ^ ^ ^ ReturnStatement expression MemberReference member loc2 ^ ^ ^ ^ ^ ^  ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown', 'root -> ReturnStatement', 'copy-ReturnStatement', 'root -> End']
copynode -1.9757916355738416:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> ReferenceType', 'copy-ReferenceType']
copynode -2.807290029944852:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> End']
copynode -2.6731907243374735:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions ^ initializer ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType']
copynode -1.9757916355738416:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ dimensions ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> ReferenceType', 'copy-ReferenceType']
copynode -3.835765652518603:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ arguments ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> type arguments', 'type -> ReferenceType', 'copy-ReferenceType']
copynode -3.740141500486061:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator selectors MethodInvocation arguments ^ member ^ ^ ^ type ^ arguments ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> selectors type arguments', 'selectors -> MethodInvocation', 'MethodInvocation -> arguments member']
copynode -4.241890752222389:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> End']
copynode -2.6731907243374735:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ dimensions ^ initializer ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType']
copynode -4.504918747639749:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> type', 'type -> ReferenceType', 'copy-ReferenceType']
copynode -3.9558871197514236:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ReturnStatement ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> ReturnStatement']
copynode -3.740141500486061:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator selectors MethodInvocation member ^ ^ ^ type ^ arguments ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> selectors type arguments', 'selectors -> MethodInvocation', 'MethodInvocation -> member']
copynode -4.788893622579053:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> Literal', 'Literal -> value', 'value -> <string>_ter', 'root -> End']
copynode -4.592828814405948:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> End']
copynode -4.370942858280614:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer Assignment expressionl MemberReference member ^ ^ ^ value ^ type ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member']
copynode -4.187898464035243:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ReturnStatement ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> ReturnStatement']
copynode -4.572761420859024:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator selectors MethodInvocation arguments ^ member ^ ^ ^ type ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> selectors type', 'selectors -> MethodInvocation', 'MethodInvocation -> arguments member']
copynode -3.9558871197514236:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> End']
copynode -5.177281701704487:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer TernaryExpression condition BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
copynode -4.370942858280614:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer Assignment expressionl MemberReference qualifier ^ member ^ ^ ^ value ^ type ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> qualifier member']
copynode -4.187898464035243:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> End']
copynode -5.1417618214618415:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member']
copynode -5.470754545880482:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayInitializer initializers Literal value ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> Literal', 'Literal -> value']
copynode -4.572761420859024:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator selectors MethodInvocation member ^ ^ ^ type ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> selectors type', 'selectors -> MethodInvocation', 'MethodInvocation -> member']
copynode -3.835765652518603:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ arguments ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> type arguments', 'type -> ReferenceType', 'copy-ReferenceType']
copynode -5.535775092197582:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MethodInvocation qualifier par0 ^ ^ member unknown ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> par0', 'start -> unknown']
copynode -5.548907262040302:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer BinaryOperation operator +_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> MemberReference']
copynode -5.856556117068976:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc0 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc0', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> End']
copynode -6.036653843475506:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer LambdaExpression body StatementExpression expression ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> LambdaExpression', 'LambdaExpression -> body', 'body -> StatementExpression', 'StatementExpression -> expression']
copynode -3.9558871197514236:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression']
copynode -3.9558871197514236:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ContinueStatement_ter ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> ContinueStatement_ter']
copynode -5.689124883618206:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc0 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ReturnStatement ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc0', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> ReturnStatement']
copynode -4.187898464035243:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression']
copynode -4.504918747639749:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> type', 'type -> ReferenceType', 'copy-ReferenceType']
copynode -1.9757916355738416:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name ^ ^ ^ dimensions ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> ReferenceType', 'ReferenceType -> name']
copynode -4.241890752222389:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression']
copynode -6.625367921544239:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayInitializer initializers ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> End', 'root -> End']
copynode -6.633633966324851:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MethodInvocation member unknown ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown', 'root -> End']
copynode -6.639534619404003:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MemberReference member unknown ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'root -> End']
copynode -5.1417618214618415:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MemberReference qualifier par0 ^ ^ member unknown ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'start -> unknown']
copynode -4.241890752222389:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ReturnStatement ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> ReturnStatement']
copynode -4.187898464035243:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ContinueStatement_ter ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> ContinueStatement_ter']
copynode -6.2496564805042:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayInitializer initializers MemberReference qualifier ^ member ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> MemberReference', 'MemberReference -> qualifier member']
copynode -6.252554875565693:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer BinaryOperation operator |_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> |_ter', 'operandl -> MemberReference']
copynode -6.810112876119092:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer Literal value true_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> Literal', 'Literal -> value', 'value -> true_ter', 'root -> End']
copynode -5.689124883618206:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc0 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc0', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> End']
copynode -6.500398841453716:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer LambdaExpression body ReturnStatement expression ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> LambdaExpression', 'LambdaExpression -> body', 'body -> ReturnStatement', 'ReturnStatement -> expression']
copynode -5.680309471441433:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MethodInvocation qualifier unknown ^ ^ arguments MemberReference ^ ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown', 'arguments -> MemberReference']
copynode -6.904729929519817:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator selectors MethodInvocation member getColumnDimension_ter ^ ^ ^ ^ type ReferenceType ^ ^ arguments ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> selectors type arguments', 'copy-selectors', 'type -> ReferenceType']
copynode -4.592828814405948:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression']
copynode -5.680309471441433:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MethodInvocation qualifier unknown ^ ^ arguments ArrayCreator ^ ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown', 'arguments -> ArrayCreator']
copynode -6.915508127771318:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ arguments TypeArgument pattern_type ?_ter ^ ^ ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'ReferenceType -> name arguments', 'copy-name', 'arguments -> TypeArgument', 'TypeArgument -> pattern_type', 'pattern_type -> ?_ter', 'arguments -> End', 'copy-declarators', 'root -> End']
copynode -6.526187983108684:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer LambdaExpression parameters MemberReference member ^ ^ ^ body ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> LambdaExpression', 'LambdaExpression -> parameters body', 'parameters -> MemberReference', 'MemberReference -> member']
copynode -6.686077204300091:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer LambdaExpression parameters InferredFormalParameter name ^ ^ ^ body ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> LambdaExpression', 'LambdaExpression -> parameters body', 'parameters -> InferredFormalParameter', 'InferredFormalParameter -> name']
copynode -6.947615546407178:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer Literal value false_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> Literal', 'Literal -> value', 'value -> false_ter', 'root -> End']
copynode -4.592828814405948:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ReturnStatement ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> ReturnStatement']
copynode -6.254475575638935:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation']
copynode -6.508673960110173:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer TernaryExpression condition MemberReference qualifier ^ member ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> MemberReference', 'MemberReference -> qualifier member']
copynode -2.6731907243374735:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name ^ ^ ^ dimensions ^ initializer ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'ReferenceType -> name']
copynode -6.638742219191045:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member unknown ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> End']
copynode -6.2496564805042:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayInitializer initializers MemberReference member ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> MemberReference', 'MemberReference -> member']
copynode -6.772675496293232:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer BinaryOperation operator &_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &_ter', 'operandl -> MemberReference']
copynode -6.34781315876171:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member unknown ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ReturnStatement ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> ReturnStatement']
copynode -7.209754747105762:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayInitializer initializers BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
copynode -7.254171933513135:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> par0', 'member -> length_ter', 'operandr -> Literal', 'Literal -> value', 'value -> 0_ter']
copynode -2.0520157241262496:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> BasicType', 'copy-BasicType']
copynode -2.9359356560744345:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions ^ initializer ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> BasicType', 'copy-BasicType']
copynode -3.9668157869018614:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> Literal', 'Literal -> value', 'value -> 0_ter', 'root -> End']
copynode -4.061414495576173:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayInitializer initializers Literal value ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> Literal', 'Literal -> value']
copynode -4.512090521398932:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> Literal', 'Literal -> value', 'value -> 1_ter', 'root -> End']
copynode -4.156056036707014:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> End']
copynode -2.0520157241262496:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ dimensions ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> BasicType', 'copy-BasicType']
copynode -4.280252474825829:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ReturnStatement ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> ReturnStatement']
copynode -5.15443846071139:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name IllegalArgumentException_ter ^ ^ ^ ^ dimensions ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> ReferenceType', 'copy-ReferenceType']
copynode -5.32036846363917:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator type BasicType name double_ter ^ ^ ^ ^ arguments ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> type arguments', 'type -> BasicType', 'copy-BasicType']
copynode -5.383401216007769:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer TernaryExpression condition BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
copynode -4.280252474825829:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> End']
copynode -5.34155427897349:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member']
copynode -5.650456184986979:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator type ReferenceType name IllegalArgumentException_ter ^ ^ ^ ^ arguments ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> type arguments', 'type -> ReferenceType', 'copy-ReferenceType']
copynode -2.9359356560744345:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ dimensions ^ initializer ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> BasicType', 'copy-BasicType']
copynode -5.208961094263941:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator selectors MethodInvocation arguments ^ member ^ ^ ^ type ^ arguments ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> selectors type arguments', 'selectors -> MethodInvocation', 'MethodInvocation -> arguments member']
copynode -5.40822769748047:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayInitializer initializers BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
copynode -5.871965185273439:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayInitializer initializers ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> End', 'root -> End']
copynode -4.156056036707014:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ReturnStatement ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> ReturnStatement']
copynode -5.891811067704111:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator type BasicType name double_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> type', 'type -> BasicType', 'copy-BasicType']
copynode -4.156056036707014:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression']
copynode -6.1170692020095885:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer Literal value 2_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> Literal', 'Literal -> value', 'value -> 2_ter', 'root -> End']
copynode -6.040946657303721:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name IllegalArgumentException_ter ^ ^ ^ ^ dimensions ^ initializer ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType']
copynode -5.620359197724611:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayInitializer initializers MemberReference qualifier ^ member ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> MemberReference', 'MemberReference -> qualifier member']
copynode -6.173023181501776:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer Literal value false_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> Literal', 'Literal -> value', 'value -> false_ter', 'root -> End']
copynode -5.208961094263941:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator selectors MethodInvocation member ^ ^ ^ type ^ arguments ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> selectors type arguments', 'selectors -> MethodInvocation', 'MethodInvocation -> member']
copynode -2.0520157241262496:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name ^ ^ ^ dimensions ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> BasicType', 'BasicType -> name']
copynode -6.255987124983221:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> End']
copynode -6.207313294056803:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator type ReferenceType name IllegalArgumentException_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> type', 'type -> ReferenceType', 'copy-ReferenceType']
copynode -5.732752206269652:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer BinaryOperation operator +_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> MemberReference']
copynode -5.809735769871622:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator selectors MethodInvocation arguments ^ member ^ ^ ^ type ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> selectors type', 'selectors -> MethodInvocation', 'MethodInvocation -> arguments member']
copynode -6.306639997754246:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer Literal prefix_operators -_ter ^ ^ value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> Literal', 'Literal -> prefix_operators value', 'prefix_operators -> -_ter', 'value -> 1_ter']
copynode -6.550889926496893:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer Literal value true_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> Literal', 'Literal -> value', 'value -> true_ter', 'root -> End']
copynode -4.280252474825829:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression']
copynode -6.511622492689639:  root add ^ StatementExpression expression Assignment expressionl MemberReference member unknown ^ ^ ^ ^ value Literal value false_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'value -> Literal', 'Literal -> value', 'value -> false_ter', 'type -> =_ter', 'root -> End']
copynode -5.96488797897473:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer BinaryOperation operator |_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> |_ter', 'operandl -> MemberReference']
copynode -5.34155427897349:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MemberReference qualifier par0 ^ ^ member unknown ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'start -> unknown']
copynode -5.620359197724611:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayInitializer initializers MemberReference member ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> MemberReference', 'MemberReference -> member']
copynode -6.090736859943718:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ReturnStatement ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> ReturnStatement']
copynode -6.714167159516364:  root add ^ StatementExpression expression Assignment expressionl MemberReference member unknown ^ ^ ^ ^ value Literal value true_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'value -> Literal', 'Literal -> value', 'value -> true_ter', 'type -> =_ter', 'root -> End']
copynode -5.809735769871622:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator selectors MethodInvocation member ^ ^ ^ type ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> selectors type', 'selectors -> MethodInvocation', 'MethodInvocation -> member']
copynode -6.325928397011012:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc0 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ReturnStatement ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc0', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> ReturnStatement']
copynode -6.68402778590098:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer LambdaExpression parameters MemberReference member ^ ^ ^ body ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> LambdaExpression', 'LambdaExpression -> parameters body', 'parameters -> MemberReference', 'MemberReference -> member']
copynode -6.240606084931642:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayInitializer initializers This selectors ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> This', 'This -> selectors']
copynode -2.9359356560744345:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name ^ ^ ^ dimensions ^ initializer ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> BasicType', 'BasicType -> name']
copynode -4.280252474825829:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ContinueStatement_ter ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> ContinueStatement_ter']
before@13 batch0 x: -7.335116270463914: root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^  ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> par0', 'member -> length_ter', 'operandr -> Literal', 'Literal -> value', 'value -> 0_ter']
after@13 batch0 x: -7.335116270463914: root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^  ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> par0', 'member -> length_ter', 'operandr -> Literal', 'Literal -> value', 'value -> 0_ter']
before@13 batch1 x: -7.084652918856591: root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ContinueStatement_ter ^ ^  ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> ContinueStatement_ter']
after@13 batch1 x: -7.084652918856591: root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ContinueStatement_ter ^ ^  ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> ContinueStatement_ter']
copynode -2.155175971449353:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions None_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-dimensions']
copynode -2.155175971449353:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-dimensions']
copynode -2.155175971449353:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MemberReference ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> ReferenceType', 'copy-ReferenceType', 'dimensions -> MemberReference']
copynode -2.155175971449353:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MethodInvocation ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> ReferenceType', 'copy-ReferenceType', 'dimensions -> MethodInvocation']
copynode -2.8600103522185236:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions None_ter ^ ^ initializer ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-dimensions']
copynode -2.155175971449353:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions Literal ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> ReferenceType', 'copy-ReferenceType', 'dimensions -> Literal']
copynode -2.8600103522185236:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ initializer ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-dimensions']
copynode -2.155175971449353:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions None_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> ReferenceType', 'copy-ReferenceType', 'dimensions -> None_ter']
copynode -2.8600103522185236:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MemberReference ^ ^ initializer ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'dimensions -> MemberReference']
copynode -4.666712784266565:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> type', 'type -> ReferenceType', 'copy-ReferenceType', 'root -> End']
copynode -4.76931117917411:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator selectors MethodInvocation member unknown ^ ^ ^ ^ type ^ arguments ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> selectors type arguments', 'selectors -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown']
copynode -2.8600103522185236:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MethodInvocation ^ ^ initializer ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'dimensions -> MethodInvocation']
copynode -3.920604648650624:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ dimensions None_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-dimensions']
copynode -4.020294286470744:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ arguments MemberReference ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> type arguments', 'type -> ReferenceType', 'copy-ReferenceType', 'arguments -> MemberReference']
copynode -2.8600103522185236:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions Literal ^ ^ initializer ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'dimensions -> Literal']
copynode -4.21537881041877:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator selectors MethodInvocation arguments MemberReference ^ ^ member ^ ^ ^ type ^ arguments ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> selectors type arguments', 'selectors -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference']
copynode -4.953769174637273:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer Assignment expressionl MemberReference member loc2 ^ ^ ^ ^ value ^ type ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> loc2']
copynode -4.020294286470744:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ arguments ArrayCreator ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> type arguments', 'type -> ReferenceType', 'copy-ReferenceType', 'arguments -> ArrayCreator']
copynode -4.7587040471844375:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ReturnStatement expression MemberReference member loc2 ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> ReturnStatement', 'copy-ReturnStatement']
copynode -5.218579855980352:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer Assignment expressionl MemberReference qualifier par0 ^ ^ member ^ ^ ^ value ^ type ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0']
copynode -3.920604648650624:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ dimensions MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-dimensions']
copynode -2.8600103522185236:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions None_ter ^ ^ initializer ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'dimensions -> None_ter']
copynode -5.412412238074467:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'root -> End']
copynode -5.011193759273738:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ReturnStatement expression MemberReference member loc2 ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> ReturnStatement', 'copy-ReturnStatement']
copynode -4.21537881041877:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator selectors MethodInvocation arguments ArrayCreator ^ ^ member ^ ^ ^ type ^ arguments ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> selectors type arguments', 'selectors -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> ArrayCreator']
copynode -4.5759909267071635:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ dimensions None_ter ^ ^ initializer ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-dimensions']
copynode -5.605977420462295:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator selectors MethodInvocation member unknown ^ ^ ^ ^ type ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> selectors type', 'selectors -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown']
copynode -5.733130347682163:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MethodInvocation qualifier par0 ^ ^ member unknown ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> par0', 'start -> unknown', 'root -> End']
copynode -5.194271210348234:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter']
copynode -4.7587040471844375:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ReturnStatement expression ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> ReturnStatement', 'ReturnStatement -> expression']
copynode -4.5759909267071635:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ dimensions MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ initializer ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-dimensions']
copynode -5.046084855450317:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator selectors MethodInvocation arguments MemberReference ^ ^ member ^ ^ ^ type ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> selectors type', 'selectors -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference']
copynode -5.011193759273738:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ReturnStatement expression ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> ReturnStatement', 'ReturnStatement -> expression']
copynode -4.020294286470744:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ arguments Literal ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> type arguments', 'type -> ReferenceType', 'copy-ReferenceType', 'arguments -> Literal']
copynode -3.920604648650624:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ dimensions MemberReference ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> ReferenceType', 'copy-ReferenceType', 'dimensions -> MemberReference']
copynode -3.920604648650624:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ dimensions MethodInvocation ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> ReferenceType', 'copy-ReferenceType', 'dimensions -> MethodInvocation']
copynode -5.046084855450317:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator selectors MethodInvocation arguments ArrayCreator ^ ^ member ^ ^ ^ type ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> selectors type', 'selectors -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> ArrayCreator']
copynode -6.354151527862996:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ContinueStatement_ter ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> ContinueStatement_ter', 'root -> End']
copynode -6.339400093536824:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression', 'StatementExpression -> expression']
copynode -5.479192873230204:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayInitializer initializers Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> Literal', 'Literal -> value', 'value -> null_ter']
copynode -6.519717150426004:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> type', 'type -> ReferenceType', 'copy-ReferenceType', 'root -> End']
copynode -6.504241533111781:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression', 'StatementExpression -> expression']
copynode -6.585660302545875:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression', 'StatementExpression -> expression']
copynode -5.194271210348234:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer TernaryExpression condition BinaryOperation operator !=_ter ^ ^ operandl ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter']
copynode -6.672591370297596:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MemberReference qualifier par0 ^ ^ member unknown ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'start -> unknown', 'root -> End']
copynode -4.21537881041877:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator selectors MethodInvocation arguments Literal ^ ^ member ^ ^ ^ type ^ arguments ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> selectors type arguments', 'selectors -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> Literal']
copynode -6.071039539529011:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer BinaryOperation operator +_ter ^ ^ operandl MemberReference qualifier ^ member ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> MemberReference', 'MemberReference -> qualifier member']
copynode -5.715921454291674:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ arguments ArrayCreator ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> type arguments', 'type -> ReferenceType', 'copy-ReferenceType', 'arguments -> ArrayCreator']
copynode -5.715921454291674:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ arguments MemberReference ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> type arguments', 'type -> ReferenceType', 'copy-ReferenceType', 'arguments -> MemberReference']
copynode -6.75142628652975:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ContinueStatement_ter ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> ContinueStatement_ter', 'root -> End']
copynode -6.762074869824573:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayInitializer initializers MemberReference qualifier par0 ^ ^ member ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0']
copynode -6.071039539529011:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer BinaryOperation operator +_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -6.527201356948353:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> ReferenceType', 'ReferenceType -> name', 'copy-name']
copynode -4.5759909267071635:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ dimensions MemberReference ^ ^ initializer ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'dimensions -> MemberReference']
copynode -6.15912049706094:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer LambdaExpression body StatementExpression expression MethodInvocation ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> LambdaExpression', 'LambdaExpression -> body', 'body -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation']
copynode -3.920604648650624:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ dimensions Literal ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> ReferenceType', 'copy-ReferenceType', 'dimensions -> Literal']
copynode -6.905364100355655:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression', 'StatementExpression -> expression']
copynode -3.920604648650624:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ dimensions None_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> ReferenceType', 'copy-ReferenceType', 'dimensions -> None_ter']
copynode -2.138067411724478:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions None_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> BasicType', 'copy-BasicType', 'copy-dimensions']
copynode -2.138067411724478:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions MemberReference ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> BasicType', 'copy-BasicType', 'dimensions -> MemberReference']
copynode -2.138067411724478:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions Literal ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> BasicType', 'copy-BasicType', 'dimensions -> Literal']
copynode -2.138067411724478:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> BasicType', 'copy-BasicType', 'copy-dimensions']
copynode -3.0237736054696143:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions None_ter ^ ^ initializer ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> BasicType', 'copy-BasicType', 'copy-dimensions']
copynode -2.138067411724478:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions None_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> BasicType', 'copy-BasicType', 'dimensions -> None_ter']
copynode -2.138067411724478:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions MethodInvocation ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> BasicType', 'copy-BasicType', 'dimensions -> MethodInvocation']
copynode -3.0237736054696143:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions MemberReference ^ ^ initializer ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> BasicType', 'copy-BasicType', 'dimensions -> MemberReference']
copynode -4.147383749950677:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayInitializer initializers Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> Literal', 'Literal -> value', 'value -> 0_ter']
copynode -3.0237736054696143:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions Literal ^ ^ initializer ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> BasicType', 'copy-BasicType', 'dimensions -> Literal']
copynode -3.0237736054696143:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ initializer ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> BasicType', 'copy-BasicType', 'copy-dimensions']
copynode -4.147383749950677:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayInitializer initializers Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> Literal', 'Literal -> value', 'value -> 1_ter']
copynode -3.0237736054696143:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions None_ter ^ ^ initializer ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> BasicType', 'copy-BasicType', 'dimensions -> None_ter']
copynode -3.0237736054696143:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions MethodInvocation ^ ^ initializer ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> BasicType', 'copy-BasicType', 'dimensions -> MethodInvocation']
copynode -4.974452036898583:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ReturnStatement expression MemberReference member loc2 ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> ReturnStatement', 'copy-ReturnStatement']
copynode -5.697227949742228:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'root -> End']
copynode -4.974452036898583:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ReturnStatement expression ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> ReturnStatement', 'ReturnStatement -> expression']
copynode -5.957283983472735:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator type BasicType name double_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> type', 'type -> BasicType', 'copy-BasicType', 'root -> End']
copynode -6.0314825675450265:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression', 'StatementExpression -> expression']
copynode -5.428210151381791:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter']
copynode -4.891512098256499:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ dimensions None_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> BasicType', 'copy-BasicType', 'copy-dimensions']
copynode -6.164620176423341:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayInitializer initializers MemberReference qualifier par0 ^ ^ member ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0']
copynode -6.2827514805831015:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator type ReferenceType name IllegalArgumentException_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> type', 'type -> ReferenceType', 'copy-ReferenceType', 'root -> End']
copynode -5.395108798984438:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator type BasicType name double_ter ^ ^ ^ ^ arguments ArrayCreator ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> type arguments', 'type -> BasicType', 'copy-BasicType', 'arguments -> ArrayCreator']
copynode -6.214411104563624:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator selectors MethodInvocation member unknown ^ ^ ^ ^ type ^ arguments ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> selectors type arguments', 'selectors -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown']
copynode -4.891512098256499:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ dimensions MemberReference ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> BasicType', 'copy-BasicType', 'dimensions -> MemberReference']
copynode -6.425960643682629:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer Literal prefix_operators -_ter ^ ^ value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> Literal', 'Literal -> prefix_operators value', 'prefix_operators -> -_ter', 'value -> 1_ter', 'root -> End']
copynode -5.9320467612706125:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ReturnStatement expression MemberReference member loc2 ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> ReturnStatement', 'copy-ReturnStatement']
copynode -5.784884796012193:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayInitializer initializers BinaryOperation operator +_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter']
copynode -5.395108798984438:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator type BasicType name double_ter ^ ^ ^ ^ arguments MemberReference ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> type arguments', 'type -> BasicType', 'copy-BasicType', 'arguments -> MemberReference']
copynode -2.138067411724478:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions BinaryOperation ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> BasicType', 'copy-BasicType', 'dimensions -> BinaryOperation']
copynode -6.5571813764981925:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression', 'StatementExpression -> expression']
copynode -5.725199291948229:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator type ReferenceType name IllegalArgumentException_ter ^ ^ ^ ^ arguments ArrayCreator ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> type arguments', 'type -> ReferenceType', 'copy-ReferenceType', 'arguments -> ArrayCreator']
copynode -6.704434508923441:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer MemberReference qualifier par0 ^ ^ member unknown ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'start -> unknown', 'root -> End']
copynode -5.23273583734408:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name IllegalArgumentException_ter ^ ^ ^ ^ dimensions MemberReference ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> ReferenceType', 'copy-ReferenceType', 'dimensions -> MemberReference']
copynode -5.9320467612706125:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ReturnStatement expression ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> ReturnStatement', 'ReturnStatement -> expression']
copynode -5.23273583734408:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name IllegalArgumentException_ter ^ ^ ^ ^ dimensions None_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-dimensions']
before@14 batch0 x: -6.937827053130604: root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ dimensions None_ter ^ ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> ReferenceType', 'copy-ReferenceType', 'dimensions -> None_ter']
after@14 batch0 x: -6.937827053130604: root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ dimensions None_ter ^ ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> ReferenceType', 'copy-ReferenceType', 'dimensions -> None_ter']
before@14 batch1 x: -6.793797921855003: root add ^ StatementExpression expression Assignment expressionl MemberReference member unknown ^ ^ ^ ^ value Literal value true_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^  ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'value -> Literal', 'Literal -> value', 'value -> true_ter', 'type -> =_ter', 'root -> End']
after@14 batch1 x: -6.793797921855003: root add ^ StatementExpression expression Assignment expressionl MemberReference member unknown ^ ^ ^ ^ value Literal value true_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^  ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'value -> Literal', 'Literal -> value', 'value -> true_ter', 'type -> =_ter', 'root -> End']
copynode -3.619692253530957:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions None_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-dimensions', 'root -> End']
copynode -3.7146763080963865:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-dimensions', 'root -> End']
copynode -3.9257205004105344:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MemberReference member ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> ReferenceType', 'copy-ReferenceType', 'dimensions -> MemberReference', 'MemberReference -> member']
copynode -4.334536122740246:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions Literal value ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> ReferenceType', 'copy-ReferenceType', 'dimensions -> Literal', 'Literal -> value']
copynode -4.571854161680676:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions None_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> ReferenceType', 'copy-ReferenceType', 'dimensions -> None_ter', 'root -> End']
copynode -4.191685008467175:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MethodInvocation qualifier ^ member ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> ReferenceType', 'copy-ReferenceType', 'dimensions -> MethodInvocation', 'MethodInvocation -> qualifier member']
copynode -4.648629393661395:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MemberReference member ^ ^ ^ initializer ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'dimensions -> MemberReference', 'MemberReference -> member']
copynode -4.977517786086537:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ dimensions None_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-dimensions', 'root -> End']
copynode -4.309808101737872:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions None_ter ^ ^ initializer ArrayInitializer_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-dimensions', 'initializer -> ArrayInitializer_ter']
copynode -5.059241499984637:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions Literal value ^ ^ ^ initializer ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'dimensions -> Literal', 'Literal -> value']
copynode -4.849633452249691:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator selectors MethodInvocation member unknown ^ ^ ^ ^ type ^ arguments ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> selectors type arguments', 'selectors -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown', 'selectors -> End']
copynode -4.391358699882403:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ initializer ArrayInitializer_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-dimensions', 'initializer -> ArrayInitializer_ter']
copynode -4.309808101737872:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions None_ter ^ ^ initializer ArrayInitializer ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-dimensions', 'initializer -> ArrayInitializer']
copynode -5.215926836710423:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ReturnStatement expression MemberReference member loc2 ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> ReturnStatement', 'copy-ReturnStatement', 'root -> End']
copynode -5.256528558791615:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ dimensions MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-dimensions', 'root -> End']
copynode -3.9257205004105344:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MemberReference qualifier ^ member ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> ReferenceType', 'copy-ReferenceType', 'dimensions -> MemberReference', 'MemberReference -> qualifier member']
copynode -4.391358699882403:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ initializer ArrayInitializer ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-dimensions', 'initializer -> ArrayInitializer']
copynode -4.912517037475482:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MethodInvocation qualifier ^ member ^ ^ ^ initializer ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'dimensions -> MethodInvocation', 'MethodInvocation -> qualifier member']
copynode -5.100777198327705:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator selectors MethodInvocation arguments MemberReference qualifier ^ member ^ ^ ^ member ^ ^ ^ type ^ arguments ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> selectors type arguments', 'selectors -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> qualifier member']
copynode -5.107259658398107:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer Assignment expressionl MemberReference member loc2 ^ ^ ^ ^ value ArrayCreator ^ ^ type ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> loc2', 'value -> ArrayCreator']
copynode -5.007908083658549:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ arguments MemberReference qualifier ^ member ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> type arguments', 'type -> ReferenceType', 'copy-ReferenceType', 'arguments -> MemberReference', 'MemberReference -> qualifier member']
copynode -5.4895905326120555:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ReturnStatement expression MemberReference member loc2 ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> ReturnStatement', 'copy-ReturnStatement', 'root -> End']
copynode -5.255895634414628:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer Assignment expressionl MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ value ^ type ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member']
copynode -5.7653105889912695:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference']
copynode -5.685491424752399:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator selectors MethodInvocation member unknown ^ ^ ^ ^ type ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> selectors type', 'selectors -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown', 'selectors -> End']
copynode -5.784464817028493:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ReturnStatement expression Literal ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> Literal']
copynode -5.007908083658549:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ arguments MemberReference member ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> type arguments', 'type -> ReferenceType', 'copy-ReferenceType', 'arguments -> MemberReference', 'MemberReference -> member']
copynode -5.299248900497332:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions None_ter ^ ^ initializer ArrayInitializer ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'dimensions -> None_ter', 'initializer -> ArrayInitializer']
copynode -4.648629393661395:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MemberReference qualifier ^ member ^ ^ ^ initializer ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'dimensions -> MemberReference', 'MemberReference -> qualifier member']
copynode -4.191685008467175:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MethodInvocation member ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> ReferenceType', 'copy-ReferenceType', 'dimensions -> MethodInvocation', 'MethodInvocation -> member']
copynode -5.115413881998393:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ arguments ArrayCreator type ^ dimensions ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> type arguments', 'type -> ReferenceType', 'copy-ReferenceType', 'arguments -> ArrayCreator', 'ArrayCreator -> type dimensions']
copynode -6.142664052706095:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ arguments Literal value ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> type arguments', 'type -> ReferenceType', 'copy-ReferenceType', 'arguments -> Literal', 'Literal -> value']
copynode -5.299248900497332:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions None_ter ^ ^ initializer ArrayInitializer_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'dimensions -> None_ter', 'initializer -> ArrayInitializer_ter']
copynode -5.999936706852168:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ReturnStatement expression Literal ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> Literal']
copynode -5.942712281597778:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator selectors MethodInvocation arguments MemberReference qualifier ^ member ^ ^ ^ member ^ ^ ^ type ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> selectors type', 'selectors -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> qualifier member']
copynode -5.115413881998393:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ arguments ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> type arguments', 'type -> ReferenceType', 'copy-ReferenceType', 'arguments -> ArrayCreator', 'copy-ArrayCreator']
copynode -5.5015016093384475:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator selectors MethodInvocation arguments ArrayCreator type ^ dimensions ^ ^ ^ member ^ ^ ^ type ^ arguments ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> selectors type arguments', 'selectors -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> ArrayCreator', 'ArrayCreator -> type dimensions']
copynode -4.191685008467175:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MethodInvocation qualifier ^ arguments ^ member ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> ReferenceType', 'copy-ReferenceType', 'dimensions -> MethodInvocation', 'MethodInvocation -> qualifier arguments member']
copynode -5.115413881998393:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ arguments ArrayCreator type ^ dimensions ^ initializer ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> type arguments', 'type -> ReferenceType', 'copy-ReferenceType', 'arguments -> ArrayCreator', 'ArrayCreator -> type dimensions initializer']
copynode -4.849633452249691:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator selectors MethodInvocation member unknown ^ ^ ^ MethodInvocation ^ ^ type ^ arguments ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> selectors type arguments', 'selectors -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown', 'selectors -> MethodInvocation']
copynode -5.623367797816172:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ dimensions None_ter ^ ^ initializer ArrayInitializer_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-dimensions', 'initializer -> ArrayInitializer_ter']
copynode -4.391358699882403:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ initializer ArrayCreator ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-dimensions', 'initializer -> ArrayCreator']
copynode -6.173083248198964:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ dimensions MemberReference member ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> ReferenceType', 'copy-ReferenceType', 'dimensions -> MemberReference', 'MemberReference -> member']
copynode -5.623367797816172:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ dimensions None_ter ^ ^ initializer ArrayInitializer ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-dimensions', 'initializer -> ArrayInitializer']
copynode -6.26974004751537:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ dimensions MethodInvocation qualifier ^ member ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> ReferenceType', 'copy-ReferenceType', 'dimensions -> MethodInvocation', 'MethodInvocation -> qualifier member']
copynode -6.6774659648071975:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator selectors MethodInvocation arguments Literal value ^ ^ ^ member ^ ^ ^ type ^ arguments ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> selectors type arguments', 'selectors -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> Literal', 'Literal -> value']
copynode -5.100777198327705:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator selectors MethodInvocation arguments MemberReference member ^ ^ ^ member ^ ^ ^ type ^ arguments ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> selectors type arguments', 'selectors -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> member']
copynode -5.889479171717539:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ dimensions MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ initializer ArrayInitializer_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-dimensions', 'initializer -> ArrayInitializer_ter']
copynode -4.309808101737872:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions None_ter ^ ^ initializer ArrayCreator ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-dimensions', 'initializer -> ArrayCreator']
copynode -6.719677668763325:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer BinaryOperation operator +_ter ^ ^ operandl MemberReference qualifier par0 ^ ^ member ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0']
copynode -6.65214193216525:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer TernaryExpression condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference']
copynode -4.912517037475482:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MethodInvocation member ^ ^ ^ initializer ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'dimensions -> MethodInvocation', 'MethodInvocation -> member']
copynode -5.5015016093384475:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator selectors MethodInvocation arguments ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ^ ^ member ^ ^ ^ type ^ arguments ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> selectors type arguments', 'selectors -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> ArrayCreator', 'copy-ArrayCreator']
copynode -5.5015016093384475:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator selectors MethodInvocation arguments ArrayCreator type ^ dimensions ^ initializer ^ ^ ^ member ^ ^ ^ type ^ arguments ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> selectors type arguments', 'selectors -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> ArrayCreator', 'ArrayCreator -> type dimensions initializer']
copynode -3.4200709336437285:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions None_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> BasicType', 'copy-BasicType', 'copy-dimensions', 'root -> End']
copynode -3.7199178212322295:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions MemberReference member ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> BasicType', 'copy-BasicType', 'dimensions -> MemberReference', 'MemberReference -> member']
copynode -4.095974492374808:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions Literal value ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> BasicType', 'copy-BasicType', 'dimensions -> Literal', 'Literal -> value']
copynode -4.136396693531424:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> BasicType', 'copy-BasicType', 'copy-dimensions', 'root -> End']
copynode -4.468494819942862:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions None_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> BasicType', 'copy-BasicType', 'dimensions -> None_ter', 'root -> End']
copynode -4.616976673249155:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions MemberReference member ^ ^ ^ initializer ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> BasicType', 'copy-BasicType', 'dimensions -> MemberReference', 'MemberReference -> member']
copynode -4.293925578240305:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions None_ter ^ ^ initializer ArrayInitializer ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> BasicType', 'copy-BasicType', 'copy-dimensions', 'initializer -> ArrayInitializer']
copynode -4.997841770295054:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions Literal value ^ ^ ^ initializer ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> BasicType', 'copy-BasicType', 'dimensions -> Literal', 'Literal -> value']
copynode -4.487709450069815:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions MethodInvocation qualifier ^ member ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> BasicType', 'copy-BasicType', 'dimensions -> MethodInvocation', 'MethodInvocation -> qualifier member']
copynode -4.293925578240305:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions None_ter ^ ^ initializer ArrayInitializer_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> BasicType', 'copy-BasicType', 'copy-dimensions', 'initializer -> ArrayInitializer_ter']
copynode -3.7199178212322295:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions MemberReference qualifier ^ member ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> BasicType', 'copy-BasicType', 'dimensions -> MemberReference', 'MemberReference -> qualifier member']
copynode -4.853538632858545:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayInitializer initializers Literal value 0_ter ^ ^ ^ Literal ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> Literal', 'Literal -> value', 'value -> 0_ter', 'initializers -> Literal']
copynode -5.518430489581078:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ReturnStatement expression MemberReference member loc2 ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> ReturnStatement', 'copy-ReturnStatement', 'root -> End']
copynode -4.999072248581797:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ initializer ArrayInitializer ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> BasicType', 'copy-BasicType', 'copy-dimensions', 'initializer -> ArrayInitializer']
copynode -5.372618610505015:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions None_ter ^ ^ initializer ArrayInitializer ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> BasicType', 'copy-BasicType', 'dimensions -> None_ter', 'initializer -> ArrayInitializer']
copynode -5.306778133381158:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayInitializer initializers Literal value 1_ter ^ ^ ^ Literal ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> Literal', 'Literal -> value', 'value -> 1_ter', 'initializers -> Literal']
copynode -4.999072248581797:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ initializer ArrayInitializer_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> BasicType', 'copy-BasicType', 'copy-dimensions', 'initializer -> ArrayInitializer_ter']
copynode -5.377661640290171:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions MethodInvocation qualifier ^ member ^ ^ ^ initializer ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> BasicType', 'copy-BasicType', 'dimensions -> MethodInvocation', 'MethodInvocation -> qualifier member']
copynode -5.851723689120263:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ReturnStatement expression Literal ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> Literal']
copynode -4.487709450069815:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions MethodInvocation qualifier ^ arguments ^ member ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> BasicType', 'copy-BasicType', 'dimensions -> MethodInvocation', 'MethodInvocation -> qualifier arguments member']
copynode -4.616976673249155:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions MemberReference qualifier ^ member ^ ^ ^ initializer ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> BasicType', 'copy-BasicType', 'dimensions -> MemberReference', 'MemberReference -> qualifier member']
copynode -6.157766523305327:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ dimensions None_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> BasicType', 'copy-BasicType', 'copy-dimensions', 'root -> End']
copynode -6.107834053225815:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference']
copynode -4.487709450069815:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions MethodInvocation member ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> BasicType', 'copy-BasicType', 'dimensions -> MethodInvocation', 'MethodInvocation -> member']
copynode -5.372618610505015:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions None_ter ^ ^ initializer ArrayInitializer_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> BasicType', 'copy-BasicType', 'dimensions -> None_ter', 'initializer -> ArrayInitializer_ter']
copynode -6.5333499810658395:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ReturnStatement expression MemberReference member loc2 ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> ReturnStatement', 'copy-ReturnStatement', 'root -> End']
copynode -6.277519710827619:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayInitializer initializers MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member']
copynode -6.369848156813532:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator selectors MethodInvocation member unknown ^ ^ ^ ^ type ^ arguments ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> selectors type arguments', 'selectors -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown', 'selectors -> End']
copynode -6.396482410375029:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ dimensions MemberReference member ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> BasicType', 'copy-BasicType', 'dimensions -> MemberReference', 'MemberReference -> member']
copynode -6.079583839979023:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment']
copynode -6.755551780108362:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name IllegalArgumentException_ter ^ ^ ^ ^ dimensions None_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-dimensions', 'root -> End']
copynode -6.560610460583121:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> BasicType', 'copy-BasicType', 'dimensions -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
before@15 batch0 x: -6.82512254267931: root add ^ IfStatement condition MethodInvocation qualifier par0 ^ ^ member unknown ^ ^ ^ ^ ^ ReturnStatement expression MemberReference member loc2 ^ ^ ^ ^ ^ ^  ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> par0', 'start -> unknown', 'root -> ReturnStatement', 'copy-ReturnStatement', 'root -> End']
after@15 batch0 x: -6.82512254267931: root add ^ IfStatement condition MethodInvocation qualifier par0 ^ ^ member unknown ^ ^ ^ ^ ^ ReturnStatement expression MemberReference member loc2 ^ ^ ^ ^ ^ ^  ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> par0', 'start -> unknown', 'root -> ReturnStatement', 'copy-ReturnStatement', 'root -> End']
before@15 batch1 x: -6.793797921855003: root add ^ StatementExpression expression Assignment expressionl MemberReference member unknown ^ ^ ^ ^ value Literal value true_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^  ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'value -> Literal', 'Literal -> value', 'value -> true_ter', 'type -> =_ter', 'root -> End']
after@15 batch1 x: -6.793797921855003: root add ^ StatementExpression expression Assignment expressionl MemberReference member unknown ^ ^ ^ ^ value Literal value true_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^  ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'value -> Literal', 'Literal -> value', 'value -> true_ter', 'type -> =_ter', 'root -> End']
copynode -4.619618880213238:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MethodInvocation qualifier par0 ^ ^ member ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> ReferenceType', 'copy-ReferenceType', 'dimensions -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> par0']
copynode -4.34130611422006:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> ReferenceType', 'copy-ReferenceType', 'dimensions -> Literal', 'Literal -> value', 'value -> 0_ter']
copynode -4.21731709188316:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MemberReference member length_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> ReferenceType', 'copy-ReferenceType', 'dimensions -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -5.019533839309588:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions None_ter ^ ^ initializer ArrayInitializer_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-dimensions', 'initializer -> ArrayInitializer_ter', 'root -> End']
copynode -5.1132082908879966:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator selectors MethodInvocation member unknown ^ ^ ^ ^ type ReferenceType ^ ^ arguments ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> selectors type arguments', 'selectors -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown', 'selectors -> End', 'type -> ReferenceType']
copynode -5.183300461852923:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ initializer ArrayInitializer_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-dimensions', 'initializer -> ArrayInitializer_ter', 'root -> End']
copynode -5.23475530394353:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions None_ter ^ ^ initializer ArrayInitializer initializers ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-dimensions', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers']
copynode -4.21731709188316:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MemberReference member unknown ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> ReferenceType', 'copy-ReferenceType', 'dimensions -> MemberReference', 'MemberReference -> member', 'start -> unknown']
copynode -5.331762697780505:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ initializer ArrayInitializer initializers ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-dimensions', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers']
copynode -5.327853607595898:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MemberReference qualifier par0 ^ ^ member ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> ReferenceType', 'copy-ReferenceType', 'dimensions -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0']
copynode -5.33964940556325:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MethodInvocation qualifier par0 ^ ^ member ^ ^ ^ initializer ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'dimensions -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> par0']
copynode -5.0661248557735234:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions Literal value 0_ter ^ ^ ^ ^ initializer ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'dimensions -> Literal', 'Literal -> value', 'value -> 0_ter']
copynode -5.385314483894035:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator selectors MethodInvocation arguments MemberReference qualifier par0 ^ ^ member ^ ^ ^ member ^ ^ ^ type ^ arguments ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> selectors type arguments', 'selectors -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0']
copynode -5.4966972546390025:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ arguments MemberReference qualifier par0 ^ ^ member ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> type arguments', 'type -> ReferenceType', 'copy-ReferenceType', 'arguments -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0']
copynode -4.34130611422006:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> ReferenceType', 'copy-ReferenceType', 'dimensions -> Literal', 'Literal -> value', 'value -> 1_ter']
copynode -5.4112215612549335:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer Assignment expressionl MemberReference member loc2 ^ ^ ^ ^ value ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ^ ^ type ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> loc2', 'value -> ArrayCreator', 'copy-ArrayCreator']
copynode -4.944662150228396:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MemberReference member length_ter ^ ^ ^ ^ initializer ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'dimensions -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -5.94927389617078:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator selectors MethodInvocation member unknown ^ ^ ^ ^ type ReferenceType ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> selectors type', 'selectors -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown', 'selectors -> End', 'type -> ReferenceType']
copynode -5.992590065579861:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ReturnStatement expression Literal value ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> Literal', 'Literal -> value']
copynode -6.001503434265032:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions None_ter ^ ^ initializer ArrayInitializer initializers ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'dimensions -> None_ter', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers']
copynode -4.944662150228396:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MemberReference member unknown ^ ^ ^ ^ initializer ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'dimensions -> MemberReference', 'MemberReference -> member', 'start -> unknown']
copynode -6.037695016944781:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MemberReference qualifier par0 ^ ^ member ^ ^ ^ initializer ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'dimensions -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0']
copynode -6.103454627256724:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ arguments ArrayCreator type ReferenceType ^ ^ dimensions ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> type arguments', 'type -> ReferenceType', 'copy-ReferenceType', 'arguments -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> ReferenceType']
copynode -5.779058953048661:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer Assignment expressionl MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ value ArrayCreator ^ ^ type ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'value -> ArrayCreator']
copynode -6.071673798025586:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MethodInvocation member unknown ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> ReferenceType', 'copy-ReferenceType', 'dimensions -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown']
copynode -6.154453661525622:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions None_ter ^ ^ initializer ArrayInitializer_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'dimensions -> None_ter', 'initializer -> ArrayInitializer_ter', 'root -> End']
copynode -6.212247557472438:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ReturnStatement expression Literal value ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> Literal', 'Literal -> value']
copynode -6.271697987569496:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator selectors MethodInvocation arguments ArrayCreator type ReferenceType ^ ^ dimensions ^ ^ ^ member ^ ^ ^ type ^ arguments ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> selectors type arguments', 'selectors -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> ReferenceType']
copynode -6.303960777979228:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ arguments ArrayCreator type ReferenceType ^ ^ dimensions ^ initializer ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> type arguments', 'type -> ReferenceType', 'copy-ReferenceType', 'arguments -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType']
copynode -5.993965961199137:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ arguments MemberReference member par0 ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> type arguments', 'type -> ReferenceType', 'copy-ReferenceType', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par0']
copynode -6.225547228707001:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator selectors MethodInvocation arguments MemberReference qualifier par0 ^ ^ member ^ ^ ^ member ^ ^ ^ type ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> selectors type', 'selectors -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0']
copynode -6.377089929068461:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ dimensions None_ter ^ ^ initializer ArrayInitializer_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-dimensions', 'initializer -> ArrayInitializer_ter', 'root -> End']
copynode -5.0661248557735234:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions Literal value 1_ter ^ ^ ^ ^ initializer ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'dimensions -> Literal', 'Literal -> value', 'value -> 1_ter']
copynode -5.906730610644445:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference qualifier ^ member ^ ^ ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> qualifier member']
copynode -6.546704780543223:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ dimensions None_ter ^ ^ initializer ArrayInitializer initializers ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-dimensions', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers']
copynode -6.282405185163952:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MethodInvocation qualifier unknown ^ ^ arguments ^ member ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> ReferenceType', 'copy-ReferenceType', 'dimensions -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown']
copynode -6.746917616808787:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ dimensions MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ initializer ArrayInitializer_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-dimensions', 'initializer -> ArrayInitializer_ter', 'root -> End']
copynode -6.686232569278218:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ dimensions MethodInvocation qualifier par0 ^ ^ member ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> ReferenceType', 'copy-ReferenceType', 'dimensions -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> par0']
copynode -4.21731709188316:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MemberReference member par0 ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> ReferenceType', 'copy-ReferenceType', 'dimensions -> MemberReference', 'MemberReference -> member', 'member -> par0']
copynode -5.906730610644445:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -6.248161770563456:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ arguments ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> type arguments', 'type -> ReferenceType', 'copy-ReferenceType', 'arguments -> ArrayCreator', 'copy-ArrayCreator', 'arguments -> End']
copynode -6.820705462945625:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator selectors MethodInvocation arguments ArrayCreator type ReferenceType ^ ^ dimensions ^ initializer ^ ^ ^ member ^ ^ ^ type ^ arguments ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> selectors type arguments', 'selectors -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType']
copynode -6.78622254380025:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MethodInvocation member unknown ^ ^ ^ ^ initializer ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'dimensions -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown']
copynode -6.370997902704403:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator selectors MethodInvocation member unknown ^ ^ ^ MethodInvocation arguments ^ member ^ ^ ^ type ^ arguments ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> selectors type arguments', 'selectors -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown', 'selectors -> MethodInvocation', 'MethodInvocation -> arguments member']
copynode -6.765641924692318:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer BinaryOperation operator +_ter ^ ^ operandl MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member']
copynode -6.7358508601319045:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator selectors MethodInvocation arguments MemberReference member par0 ^ ^ ^ ^ member ^ ^ ^ type ^ arguments ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> selectors type arguments', 'selectors -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par0']
copynode -6.4424158001784235:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ initializer ArrayCreator type ^ dimensions ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-dimensions', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions']
copynode -4.117669383529574:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> BasicType', 'copy-BasicType', 'dimensions -> Literal', 'Literal -> value', 'value -> 1_ter']
copynode -3.9767405563034117:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions MemberReference member length_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> BasicType', 'copy-BasicType', 'dimensions -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -4.953597123268992:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions None_ter ^ ^ initializer ArrayInitializer initializers ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> BasicType', 'copy-BasicType', 'copy-dimensions', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers']
copynode -5.233023697976023:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions None_ter ^ ^ initializer ArrayInitializer_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> BasicType', 'copy-BasicType', 'copy-dimensions', 'initializer -> ArrayInitializer_ter', 'root -> End']
copynode -5.1294947736896574:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions MethodInvocation qualifier par0 ^ ^ member ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> BasicType', 'copy-BasicType', 'dimensions -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> par0']
copynode -5.234637069050223:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions MemberReference qualifier par0 ^ ^ member ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> BasicType', 'copy-BasicType', 'dimensions -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0']
copynode -5.019793922547251:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions Literal value 1_ter ^ ^ ^ ^ initializer ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> BasicType', 'copy-BasicType', 'dimensions -> Literal', 'Literal -> value', 'value -> 1_ter']
copynode -3.9767405563034117:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions MemberReference member unknown ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> BasicType', 'copy-BasicType', 'dimensions -> MemberReference', 'MemberReference -> member', 'start -> unknown']
copynode -4.874742473009974:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions MemberReference member length_ter ^ ^ ^ ^ initializer ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> BasicType', 'copy-BasicType', 'dimensions -> MemberReference', 'MemberReference -> member', 'copy-member']
copynode -5.496565759647638:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayInitializer initializers Literal value 0_ter ^ ^ ^ Literal value ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> Literal', 'Literal -> value', 'value -> 0_ter', 'initializers -> Literal', 'Literal -> value']
copynode -5.7137443968094885:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ initializer ArrayInitializer initializers ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> BasicType', 'copy-BasicType', 'copy-dimensions', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers']
copynode -4.117669383529574:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> BasicType', 'copy-BasicType', 'dimensions -> Literal', 'Literal -> value', 'value -> 0_ter']
copynode -5.95232235873118:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions None_ter ^ ^ initializer ArrayInitializer initializers ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> BasicType', 'copy-BasicType', 'dimensions -> None_ter', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers']
copynode -5.99208956444636:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ initializer ArrayInitializer_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> BasicType', 'copy-BasicType', 'copy-dimensions', 'initializer -> ArrayInitializer_ter', 'root -> End']
copynode -5.98028588341549:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayInitializer initializers Literal value 1_ter ^ ^ ^ Literal value ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> Literal', 'Literal -> value', 'value -> 1_ter', 'initializers -> Literal', 'Literal -> value']
copynode -6.048289481084794:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ReturnStatement expression Literal value ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> Literal', 'Literal -> value']
copynode -6.015076512936503:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions MethodInvocation qualifier par0 ^ ^ member ^ ^ ^ initializer ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> BasicType', 'copy-BasicType', 'dimensions -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> par0']
copynode -6.12828820431605:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions MemberReference qualifier par0 ^ ^ member ^ ^ ^ initializer ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> BasicType', 'copy-BasicType', 'dimensions -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0']
copynode -4.874742473009974:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions MemberReference member unknown ^ ^ ^ ^ initializer ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> BasicType', 'copy-BasicType', 'dimensions -> MemberReference', 'MemberReference -> member', 'start -> unknown']
copynode -6.417950088623911:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions None_ter ^ ^ initializer ArrayInitializer_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> BasicType', 'copy-BasicType', 'dimensions -> None_ter', 'initializer -> ArrayInitializer_ter', 'root -> End']
copynode -6.084622430149466:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions MethodInvocation qualifier unknown ^ ^ arguments ^ member ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> BasicType', 'copy-BasicType', 'dimensions -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown']
copynode -6.389149832073599:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions MethodInvocation member unknown ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> BasicType', 'copy-BasicType', 'dimensions -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown']
copynode -5.019793922547251:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions Literal value 0_ter ^ ^ ^ ^ initializer ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> BasicType', 'copy-BasicType', 'dimensions -> Literal', 'Literal -> value', 'value -> 0_ter']
copynode -6.695516125764698:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type']
copynode -3.9767405563034117:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions MemberReference member par0 ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> BasicType', 'copy-BasicType', 'dimensions -> MemberReference', 'MemberReference -> member', 'member -> par0']
before@16 batch0 x: -7.065119471633807: root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ initializer ArrayCreator type ^ dimensions ^ ^ ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-dimensions', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions']
after@16 batch0 x: -7.065119471633807: root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ initializer ArrayCreator type ^ dimensions ^ ^ ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-dimensions', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions']
before@16 batch1 x: -6.793797921855003: root add ^ StatementExpression expression Assignment expressionl MemberReference member unknown ^ ^ ^ ^ value Literal value true_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^  ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'value -> Literal', 'Literal -> value', 'value -> true_ter', 'type -> =_ter', 'root -> End']
after@16 batch1 x: -6.793797921855003: root add ^ StatementExpression expression Assignment expressionl MemberReference member unknown ^ ^ ^ ^ value Literal value true_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^  ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'value -> Literal', 'Literal -> value', 'value -> true_ter', 'type -> =_ter', 'root -> End']
copynode -4.7408235013717785:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> ReferenceType', 'copy-ReferenceType', 'dimensions -> Literal', 'Literal -> value', 'value -> 0_ter', 'root -> End']
copynode -5.01509963220451:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MemberReference member length_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> ReferenceType', 'copy-ReferenceType', 'dimensions -> MemberReference', 'MemberReference -> member', 'copy-member', 'root -> End']
copynode -4.68352582550142:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MethodInvocation qualifier par0 ^ ^ member unknown ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> ReferenceType', 'copy-ReferenceType', 'dimensions -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> par0', 'start -> unknown']
copynode -5.336214172304608:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MemberReference member unknown ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> ReferenceType', 'copy-ReferenceType', 'dimensions -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'root -> End']
copynode -5.11363383938442:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator selectors MethodInvocation member unknown ^ ^ ^ ^ type ReferenceType name BigDecimal_ter ^ ^ ^ ^ arguments ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> selectors type arguments', 'selectors -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown', 'selectors -> End', 'type -> ReferenceType', 'copy-ReferenceType']
copynode -5.387185866595246:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> ReferenceType', 'copy-ReferenceType', 'dimensions -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member']
copynode -5.612724089645781:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> ReferenceType', 'copy-ReferenceType', 'dimensions -> Literal', 'Literal -> value', 'value -> 1_ter', 'root -> End']
copynode -5.624705222668126:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer Assignment expressionl MemberReference member loc2 ^ ^ ^ ^ value ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> loc2', 'value -> ArrayCreator', 'copy-ArrayCreator', 'type -> =_ter']
copynode -5.556478675614926:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ arguments MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> type arguments', 'type -> ReferenceType', 'copy-ReferenceType', 'arguments -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member']
copynode -5.4790037393104285:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator selectors MethodInvocation arguments MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ member ^ ^ ^ type ^ arguments ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> selectors type arguments', 'selectors -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member']
copynode -5.402531687403098:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MethodInvocation qualifier par0 ^ ^ member unknown ^ ^ ^ ^ initializer ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'dimensions -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> par0', 'start -> unknown']
copynode -5.99821105459705:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> Literal', 'Literal -> value', 'value -> null_ter']
copynode -6.152046772302128:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MethodInvocation member unknown ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> ReferenceType', 'copy-ReferenceType', 'dimensions -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown', 'root -> End']
copynode -5.449752598302439:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions Literal value 0_ter ^ ^ ^ ^ initializer ArrayInitializer_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'dimensions -> Literal', 'Literal -> value', 'value -> 0_ter', 'initializer -> ArrayInitializer_ter']
copynode -5.949697059462778:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator selectors MethodInvocation member unknown ^ ^ ^ ^ type ReferenceType name BigDecimal_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> selectors type', 'selectors -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown', 'selectors -> End', 'type -> ReferenceType', 'copy-ReferenceType']
copynode -5.449752598302439:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions Literal value 0_ter ^ ^ ^ ^ initializer ArrayInitializer ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'dimensions -> Literal', 'Literal -> value', 'value -> 0_ter', 'initializer -> ArrayInitializer']
copynode -5.243455502437428:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions None_ter ^ ^ initializer ArrayInitializer initializers MemberReference ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-dimensions', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> MemberReference']
copynode -6.109808419059846:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ arguments ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> type arguments', 'type -> ReferenceType', 'copy-ReferenceType', 'arguments -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> ReferenceType', 'copy-ReferenceType']
copynode -6.096778549486771:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ initializer ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'dimensions -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member']
copynode -6.217583988793194:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> Literal', 'Literal -> value', 'value -> null_ter']
copynode -5.342420814791694:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ initializer ArrayInitializer initializers MemberReference ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-dimensions', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> MemberReference']
copynode -6.131644626380876:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer Assignment expressionl MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ value ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ^ ^ type ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'value -> ArrayCreator', 'copy-ArrayCreator']
copynode -6.310050792686525:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ arguments ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions ^ initializer ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> type arguments', 'type -> ReferenceType', 'copy-ReferenceType', 'arguments -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType']
copynode -5.736571487272158:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MemberReference member length_ter ^ ^ ^ ^ initializer ArrayInitializer_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'dimensions -> MemberReference', 'MemberReference -> member', 'copy-member', 'initializer -> ArrayInitializer_ter']
copynode -5.11363383938442:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator selectors MethodInvocation member unknown ^ ^ ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ arguments ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> selectors type arguments', 'selectors -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown', 'selectors -> End', 'type -> ReferenceType', 'copy-ReferenceType']
copynode -6.287474681390449:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator selectors MethodInvocation arguments ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions ^ ^ ^ member ^ ^ ^ type ^ arguments ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> selectors type arguments', 'selectors -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> ReferenceType', 'copy-ReferenceType']
copynode -5.736571487272158:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MemberReference member length_ter ^ ^ ^ ^ initializer ArrayInitializer ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'dimensions -> MemberReference', 'MemberReference -> member', 'copy-member', 'initializer -> ArrayInitializer']
copynode -6.5257595961447805:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference qualifier par0 ^ ^ member ^ ^ ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0']
copynode -6.321308177663013:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator selectors MethodInvocation arguments MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ member ^ ^ ^ type ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> selectors type', 'selectors -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member']
copynode -4.68352582550142:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MethodInvocation qualifier par0 ^ ^ member size_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> ReferenceType', 'copy-ReferenceType', 'dimensions -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> par0', 'member -> size_ter']
copynode -6.7991449708351865:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MemberReference member par0 ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> ReferenceType', 'copy-ReferenceType', 'dimensions -> MemberReference', 'MemberReference -> member', 'member -> par0', 'root -> End']
copynode -6.073328312719241:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MemberReference member unknown ^ ^ ^ ^ initializer ArrayInitializer_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'dimensions -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'initializer -> ArrayInitializer_ter']
copynode -6.822273589830729:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ arguments ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> type arguments', 'type -> ReferenceType', 'copy-ReferenceType', 'arguments -> ArrayCreator', 'copy-ArrayCreator', 'arguments -> End', 'root -> End']
copynode -5.243455502437428:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions None_ter ^ ^ initializer ArrayInitializer initializers MethodInvocation ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-dimensions', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> MethodInvocation']
copynode -6.073328312719241:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MemberReference member unknown ^ ^ ^ ^ initializer ArrayInitializer ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'dimensions -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'initializer -> ArrayInitializer']
copynode -5.342420814791694:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ initializer ArrayInitializer initializers MethodInvocation ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-dimensions', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> MethodInvocation']
copynode -4.68352582550142:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MethodInvocation qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> ReferenceType', 'copy-ReferenceType', 'dimensions -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> par0', 'copy-member']
copynode -5.243455502437428:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions None_ter ^ ^ initializer ArrayInitializer initializers ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-dimensions', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> End']
copynode -6.320485390882823:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ arguments MemberReference member par0 ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> type arguments', 'type -> ReferenceType', 'copy-ReferenceType', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par0', 'arguments -> End']
copynode -6.010550437727943:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions None_ter ^ ^ initializer ArrayInitializer initializers MemberReference ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'dimensions -> None_ter', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> MemberReference']
copynode -7.065119471633807:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ initializer ArrayCreator type ReferenceType ^ ^ dimensions ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-dimensions', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> ReferenceType']
copynode -5.243455502437428:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions None_ter ^ ^ initializer ArrayInitializer initializers Literal ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-dimensions', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> Literal']
copynode -4.479147831443697:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> BasicType', 'copy-BasicType', 'dimensions -> Literal', 'Literal -> value', 'value -> 1_ter', 'root -> End']
copynode -4.582758324686438:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions MemberReference member length_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> BasicType', 'copy-BasicType', 'dimensions -> MemberReference', 'MemberReference -> member', 'copy-member', 'root -> End']
copynode -5.429112153593451:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions MemberReference member unknown ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> BasicType', 'copy-BasicType', 'dimensions -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'root -> End']
copynode -5.345215285662562:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> BasicType', 'copy-BasicType', 'dimensions -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member']
copynode -5.725897709373385:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> BasicType', 'copy-BasicType', 'dimensions -> Literal', 'Literal -> value', 'value -> 0_ter', 'root -> End']
copynode -5.236298853997141:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions MethodInvocation qualifier par0 ^ ^ member unknown ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> BasicType', 'copy-BasicType', 'dimensions -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> par0', 'start -> unknown']
copynode -5.395343745592982:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions Literal value 1_ter ^ ^ ^ ^ initializer ArrayInitializer ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> BasicType', 'copy-BasicType', 'dimensions -> Literal', 'Literal -> value', 'value -> 1_ter', 'initializer -> ArrayInitializer']
copynode -5.570108667481691:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayInitializer initializers Literal value 0_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> Literal', 'Literal -> value', 'value -> 0_ter', 'initializers -> Literal', 'Literal -> value', 'value -> 0_ter']
copynode -5.473964656237513:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions MemberReference member length_ter ^ ^ ^ ^ initializer ArrayInitializer ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> BasicType', 'copy-BasicType', 'dimensions -> MemberReference', 'MemberReference -> member', 'copy-member', 'initializer -> ArrayInitializer']
copynode -4.961879117880017:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions None_ter ^ ^ initializer ArrayInitializer initializers MemberReference ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> BasicType', 'copy-BasicType', 'copy-dimensions', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> MemberReference']
copynode -5.395343745592982:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions Literal value 1_ter ^ ^ ^ ^ initializer ArrayInitializer_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> BasicType', 'copy-BasicType', 'dimensions -> Literal', 'Literal -> value', 'value -> 1_ter', 'initializer -> ArrayInitializer_ter']
copynode -5.473964656237513:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions MemberReference member length_ter ^ ^ ^ ^ initializer ArrayInitializer_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> BasicType', 'copy-BasicType', 'dimensions -> MemberReference', 'MemberReference -> member', 'copy-member', 'initializer -> ArrayInitializer_ter']
copynode -4.961879117880017:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions None_ter ^ ^ initializer ArrayInitializer initializers Literal ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> BasicType', 'copy-BasicType', 'copy-dimensions', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> Literal']
copynode -6.513649018947035:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions MethodInvocation member unknown ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> BasicType', 'copy-BasicType', 'dimensions -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown', 'root -> End']
copynode -6.07120432658121:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ReturnStatement expression Literal value 0_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> Literal', 'Literal -> value', 'value -> 0_ter']
copynode -6.238711314741522:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ initializer ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> BasicType', 'copy-BasicType', 'dimensions -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member']
copynode -6.119770827237517:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions MethodInvocation qualifier par0 ^ ^ member unknown ^ ^ ^ ^ initializer ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> BasicType', 'copy-BasicType', 'dimensions -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> par0', 'start -> unknown']
copynode -4.961879117880017:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions None_ter ^ ^ initializer ArrayInitializer initializers ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> BasicType', 'copy-BasicType', 'copy-dimensions', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> End']
copynode -6.0560031910426915:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayInitializer initializers Literal value 1_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> Literal', 'Literal -> value', 'value -> 1_ter', 'initializers -> Literal', 'Literal -> value', 'value -> 0_ter']
copynode -6.709997850004584:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions MemberReference member par0 ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> BasicType', 'copy-BasicType', 'dimensions -> MemberReference', 'MemberReference -> member', 'member -> par0', 'root -> End']
copynode -4.961879117880017:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions None_ter ^ ^ initializer ArrayInitializer initializers MethodInvocation ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> BasicType', 'copy-BasicType', 'copy-dimensions', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> MethodInvocation']
copynode -5.570108667481691:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayInitializer initializers Literal value 0_ter ^ ^ ^ Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> Literal', 'Literal -> value', 'value -> 0_ter', 'initializers -> Literal', 'Literal -> value', 'value -> 1_ter']
before@17 batch0 x: -7.097719404147938: root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions None_ter ^ ^ initializer ArrayInitializer initializers Literal ^ ^ ^ ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-dimensions', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> Literal']
after@17 batch0 x: -7.097719404147938: root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions None_ter ^ ^ initializer ArrayInitializer initializers Literal ^ ^ ^ ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-dimensions', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> Literal']
before@17 batch1 x: -6.856614247430116: root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayInitializer initializers Literal value 0_ter ^ ^ ^ Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> Literal', 'Literal -> value', 'value -> 0_ter', 'initializers -> Literal', 'Literal -> value', 'value -> 1_ter']
after@17 batch1 x: -6.856614247430116: root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayInitializer initializers Literal value 0_ter ^ ^ ^ Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> Literal', 'Literal -> value', 'value -> 0_ter', 'initializers -> Literal', 'Literal -> value', 'value -> 1_ter']
copynode -5.289155865670182:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MethodInvocation qualifier par0 ^ ^ member unknown ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> ReferenceType', 'copy-ReferenceType', 'dimensions -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> par0', 'start -> unknown', 'root -> End']
copynode -5.570690313936211:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> ReferenceType', 'copy-ReferenceType', 'dimensions -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'root -> End']
copynode -5.626574441674165:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer Assignment expressionl MemberReference member loc2 ^ ^ ^ ^ value ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> loc2', 'value -> ArrayCreator', 'copy-ArrayCreator', 'type -> =_ter', 'root -> End']
copynode -6.0666233957745135:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc1', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> End']
copynode -6.190165906446055:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions Literal value 0_ter ^ ^ ^ ^ initializer ArrayInitializer_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'dimensions -> Literal', 'Literal -> value', 'value -> 0_ter', 'initializer -> ArrayInitializer_ter', 'root -> End']
copynode -6.238717717002146:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator selectors MethodInvocation member unknown ^ ^ ^ ^ type ReferenceType name BigDecimal_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> selectors type', 'selectors -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown', 'selectors -> End', 'type -> ReferenceType', 'copy-ReferenceType', 'root -> End']
copynode -6.243138700025156:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions Literal value 0_ter ^ ^ ^ ^ initializer ArrayInitializer initializers ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'dimensions -> Literal', 'Literal -> value', 'value -> 0_ter', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers']
copynode -6.283104193396866:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> End']
copynode -5.700263362537953:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ arguments MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> type arguments', 'type -> ReferenceType', 'copy-ReferenceType', 'arguments -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'arguments -> End']
copynode -6.412587036611512:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer Assignment expressionl MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ value ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'value -> ArrayCreator', 'copy-ArrayCreator', 'type -> =_ter']
copynode -6.467200692975894:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MemberReference member length_ter ^ ^ ^ ^ initializer ArrayInitializer_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'dimensions -> MemberReference', 'MemberReference -> member', 'copy-member', 'initializer -> ArrayInitializer_ter', 'root -> End']
copynode -5.759471696568653:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator selectors MethodInvocation arguments MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ member ^ ^ ^ type ^ arguments ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> selectors type arguments', 'selectors -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'arguments -> End']
copynode -6.548564370954409:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MemberReference member length_ter ^ ^ ^ ^ initializer ArrayInitializer initializers ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'dimensions -> MemberReference', 'MemberReference -> member', 'copy-member', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers']
copynode -5.410155771271093:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator selectors MethodInvocation member unknown ^ ^ ^ ^ type ReferenceType name BigDecimal_ter ^ ^ ^ ^ arguments MemberReference ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> selectors type arguments', 'selectors -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown', 'selectors -> End', 'type -> ReferenceType', 'copy-ReferenceType', 'arguments -> MemberReference']
copynode -6.725299860001542:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MethodInvocation qualifier par0 ^ ^ member size_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> ReferenceType', 'copy-ReferenceType', 'dimensions -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> par0', 'member -> size_ter', 'root -> End']
copynode -6.011649791384116:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MethodInvocation qualifier par0 ^ ^ member unknown ^ ^ ^ ^ initializer ArrayInitializer ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'dimensions -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> par0', 'start -> unknown', 'initializer -> ArrayInitializer']
copynode -6.576111528789625:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member']
copynode -6.7995803917292506:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MemberReference member unknown ^ ^ ^ ^ initializer ArrayInitializer_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'dimensions -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'initializer -> ArrayInitializer_ter', 'root -> End']
copynode -6.011649791384116:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MethodInvocation qualifier par0 ^ ^ member unknown ^ ^ ^ ^ initializer ArrayInitializer_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'dimensions -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> par0', 'start -> unknown', 'initializer -> ArrayInitializer_ter']
copynode -6.248800608562306:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions None_ter ^ ^ initializer ArrayInitializer initializers MemberReference member ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-dimensions', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> MemberReference', 'MemberReference -> member']
copynode -6.904021080816165:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MemberReference member unknown ^ ^ ^ ^ initializer ArrayInitializer initializers ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'dimensions -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers']
copynode -6.261781219553086:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ arguments ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions None_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> type arguments', 'type -> ReferenceType', 'copy-ReferenceType', 'arguments -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-dimensions']
copynode -6.970704341889359:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MethodInvocation qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> ReferenceType', 'copy-ReferenceType', 'dimensions -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> par0', 'copy-member', 'root -> End']
copynode -6.977024409221485:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions None_ter ^ ^ initializer ArrayInitializer initializers ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-dimensions', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> End', 'root -> End']
copynode -6.248800608562306:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions None_ter ^ ^ initializer ArrayInitializer initializers MemberReference qualifier ^ member ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-dimensions', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> MemberReference', 'MemberReference -> qualifier member']
copynode -6.344715116778389:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ initializer ArrayInitializer initializers MemberReference qualifier ^ member ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-dimensions', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> MemberReference', 'MemberReference -> qualifier member']
copynode -6.991884865026805:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ arguments MemberReference member par0 ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> type arguments', 'type -> ReferenceType', 'copy-ReferenceType', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par0', 'arguments -> End', 'root -> End']
copynode -6.275785751873627:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ initializer ArrayInitializer_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'dimensions -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'initializer -> ArrayInitializer_ter']
copynode -6.275785751873627:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ initializer ArrayInitializer ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'dimensions -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'initializer -> ArrayInitializer']
copynode -5.700263362537953:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ arguments MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ MemberReference ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> type arguments', 'type -> ReferenceType', 'copy-ReferenceType', 'arguments -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'arguments -> MemberReference']
copynode -7.097719404147938:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions None_ter ^ ^ initializer ArrayInitializer initializers Literal value ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-dimensions', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> Literal', 'Literal -> value']
copynode -6.344715116778389:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ initializer ArrayInitializer initializers MemberReference member ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-dimensions', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> MemberReference', 'MemberReference -> member']
copynode -6.541950364364311:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator selectors MethodInvocation arguments ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions None_ter ^ ^ ^ ^ member ^ ^ ^ type ^ arguments ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> selectors type arguments', 'selectors -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-dimensions']
copynode -6.462226159565034:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ arguments ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions None_ter ^ ^ initializer ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> type arguments', 'type -> ReferenceType', 'copy-ReferenceType', 'arguments -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-dimensions']
copynode -7.086706552887335:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-dimensions', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> ReferenceType', 'copy-ReferenceType']
copynode -5.705009812954813:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> BasicType', 'copy-BasicType', 'dimensions -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'root -> End']
copynode -5.776657158974558:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions MethodInvocation qualifier par0 ^ ^ member unknown ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> BasicType', 'copy-BasicType', 'dimensions -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> par0', 'start -> unknown', 'root -> End']
copynode -6.101491952780634:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions Literal value 1_ter ^ ^ ^ ^ initializer ArrayInitializer initializers ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> BasicType', 'copy-BasicType', 'dimensions -> Literal', 'Literal -> value', 'value -> 1_ter', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers']
copynode -6.181334639433771:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions MemberReference member length_ter ^ ^ ^ ^ initializer ArrayInitializer initializers ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> BasicType', 'copy-BasicType', 'dimensions -> MemberReference', 'MemberReference -> member', 'copy-member', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers']
copynode -6.2742080935277045:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions Literal value 1_ter ^ ^ ^ ^ initializer ArrayInitializer_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> BasicType', 'copy-BasicType', 'dimensions -> Literal', 'Literal -> value', 'value -> 1_ter', 'initializer -> ArrayInitializer_ter', 'root -> End']
copynode -6.340680325869471:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions MemberReference member length_ter ^ ^ ^ ^ initializer ArrayInitializer_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> BasicType', 'copy-BasicType', 'dimensions -> MemberReference', 'MemberReference -> member', 'copy-member', 'initializer -> ArrayInitializer_ter', 'root -> End']
copynode -6.472541673574597:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions None_ter ^ ^ initializer ArrayInitializer initializers Literal value ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> BasicType', 'copy-BasicType', 'copy-dimensions', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> Literal', 'Literal -> value']
copynode -6.521745822858065:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ReturnStatement expression Literal value 0_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> Literal', 'Literal -> value', 'value -> 0_ter', 'root -> End']
copynode -6.676301820669323:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions None_ter ^ ^ initializer ArrayInitializer initializers ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> BasicType', 'copy-BasicType', 'copy-dimensions', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> End', 'root -> End']
copynode -6.195155961904675:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions None_ter ^ ^ initializer ArrayInitializer initializers MemberReference qualifier ^ member ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> BasicType', 'copy-BasicType', 'copy-dimensions', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> MemberReference', 'MemberReference -> qualifier member']
copynode -6.176659659016877:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayInitializer initializers Literal value 0_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ Literal ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> Literal', 'Literal -> value', 'value -> 0_ter', 'initializers -> Literal', 'Literal -> value', 'value -> 0_ter', 'initializers -> Literal']
copynode -6.195155961904675:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions None_ter ^ ^ initializer ArrayInitializer initializers MemberReference member ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> BasicType', 'copy-BasicType', 'copy-dimensions', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> MemberReference', 'MemberReference -> member']
copynode -6.5903667085804045:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ initializer ArrayInitializer ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> BasicType', 'copy-BasicType', 'dimensions -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'initializer -> ArrayInitializer']
copynode -6.663620891515166:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions MethodInvocation qualifier par0 ^ ^ member unknown ^ ^ ^ ^ initializer ArrayInitializer ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> BasicType', 'copy-BasicType', 'dimensions -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> par0', 'start -> unknown', 'initializer -> ArrayInitializer']
copynode -6.5903667085804045:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ initializer ArrayInitializer_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> BasicType', 'copy-BasicType', 'dimensions -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'initializer -> ArrayInitializer_ter']
copynode -6.695121743250638:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayInitializer initializers Literal value 1_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ Literal ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> Literal', 'Literal -> value', 'value -> 1_ter', 'initializers -> Literal', 'Literal -> value', 'value -> 0_ter', 'initializers -> Literal']
before@18 batch0 x: -7.192229096079245: root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions ^ ^ ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-dimensions', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> ReferenceType', 'copy-ReferenceType']
after@18 batch0 x: -7.192229096079245: root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions ^ ^ ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-dimensions', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> ReferenceType', 'copy-ReferenceType']
before@18 batch1 x: -7.459839858580381: root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayInitializer initializers Literal value 1_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ Literal ^ ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> Literal', 'Literal -> value', 'value -> 1_ter', 'initializers -> Literal', 'Literal -> value', 'value -> 0_ter', 'initializers -> Literal']
after@18 batch1 x: -7.459839858580381: root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayInitializer initializers Literal value 1_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ Literal ^ ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> Literal', 'Literal -> value', 'value -> 1_ter', 'initializers -> Literal', 'Literal -> value', 'value -> 0_ter', 'initializers -> Literal']
copynode -6.377291601311299:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ arguments MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> type arguments', 'type -> ReferenceType', 'copy-ReferenceType', 'arguments -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'arguments -> End', 'root -> End']
copynode -6.414945092052221:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer Assignment expressionl MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ value ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'value -> ArrayCreator', 'copy-ArrayCreator', 'type -> =_ter', 'root -> End']
copynode -6.5520027100574225:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator selectors MethodInvocation arguments MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ member unknown ^ ^ ^ ^ type ^ arguments ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> selectors type arguments', 'selectors -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'arguments -> End', 'start -> unknown']
copynode -6.73582423129119:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MethodInvocation qualifier par0 ^ ^ member unknown ^ ^ ^ ^ initializer ArrayInitializer initializers ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'dimensions -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> par0', 'start -> unknown', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers']
copynode -6.868598643923178:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MethodInvocation qualifier par0 ^ ^ member unknown ^ ^ ^ ^ initializer ArrayInitializer_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'dimensions -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> par0', 'start -> unknown', 'initializer -> ArrayInitializer_ter', 'root -> End']
copynode -7.017642863327637:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ initializer ArrayInitializer_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'dimensions -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'initializer -> ArrayInitializer_ter', 'root -> End']
copynode -6.983577284263447:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions None_ter ^ ^ initializer ArrayInitializer initializers MemberReference qualifier par0 ^ ^ member ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-dimensions', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0']
copynode -7.0670412259642035:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ initializer ArrayInitializer initializers ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'dimensions -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers']
copynode -6.9839371426496655:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ initializer ArrayInitializer initializers MemberReference qualifier par0 ^ ^ member ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-dimensions', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0']
copynode -6.919705900596455:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions None_ter ^ ^ initializer ArrayInitializer initializers MemberReference member par0 ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-dimensions', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> MemberReference', 'MemberReference -> member', 'member -> par0']
copynode -6.936476234506699:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ arguments ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions None_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> type arguments', 'type -> ReferenceType', 'copy-ReferenceType', 'arguments -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-dimensions', 'arguments -> End']
copynode -6.7711302225943655:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ operandr Literal ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'operandr -> Literal']
copynode -6.581225631729467:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator selectors MethodInvocation member unknown ^ ^ ^ ^ type ReferenceType name BigDecimal_ter ^ ^ ^ ^ arguments MemberReference member ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> selectors type arguments', 'selectors -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown', 'selectors -> End', 'type -> ReferenceType', 'copy-ReferenceType', 'arguments -> MemberReference', 'MemberReference -> member']
copynode -6.581225631729467:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator selectors MethodInvocation member unknown ^ ^ ^ ^ type ReferenceType name BigDecimal_ter ^ ^ ^ ^ arguments MemberReference qualifier ^ member ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> selectors type arguments', 'selectors -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown', 'selectors -> End', 'type -> ReferenceType', 'copy-ReferenceType', 'arguments -> MemberReference', 'MemberReference -> qualifier member']
copynode -7.077349644314381:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ arguments MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ MemberReference qualifier ^ member ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> type arguments', 'type -> ReferenceType', 'copy-ReferenceType', 'arguments -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'arguments -> MemberReference', 'MemberReference -> qualifier member']
copynode -6.256146654719487:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions Literal value 0_ter ^ ^ ^ ^ initializer ArrayInitializer initializers MemberReference ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'dimensions -> Literal', 'Literal -> value', 'value -> 0_ter', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> MemberReference']
copynode -7.1163682921323925:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ initializer ArrayInitializer initializers MemberReference member par0 ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-dimensions', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> MemberReference', 'MemberReference -> member', 'member -> par0']
copynode -7.13162447954528:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator selectors MethodInvocation arguments ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions None_ter ^ ^ ^ ^ member ^ ^ ^ type ^ arguments ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> selectors type arguments', 'selectors -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-dimensions', 'arguments -> End']
copynode -6.256146654719487:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions Literal value 0_ter ^ ^ ^ ^ initializer ArrayInitializer initializers ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'dimensions -> Literal', 'Literal -> value', 'value -> 0_ter', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> End']
copynode -6.567086406284943:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MemberReference member length_ter ^ ^ ^ ^ initializer ArrayInitializer initializers MemberReference ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'dimensions -> MemberReference', 'MemberReference -> member', 'copy-member', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> MemberReference']
copynode -7.167870290271821:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ arguments ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions None_ter ^ ^ initializer ArrayInitializer ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> type arguments', 'type -> ReferenceType', 'copy-ReferenceType', 'arguments -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-dimensions', 'initializer -> ArrayInitializer']
copynode -6.567086406284943:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MemberReference member length_ter ^ ^ ^ ^ initializer ArrayInitializer initializers ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'dimensions -> MemberReference', 'MemberReference -> member', 'copy-member', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> End']
copynode -6.8359275297261775:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions None_ter ^ ^ initializer ArrayInitializer initializers MemberReference qualifier par0 ^ ^ member ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> BasicType', 'copy-BasicType', 'copy-dimensions', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0']
copynode -6.924890354741365:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayInitializer initializers Literal value 0_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ Literal value ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> Literal', 'Literal -> value', 'value -> 0_ter', 'initializers -> Literal', 'Literal -> value', 'value -> 0_ter', 'initializers -> Literal', 'Literal -> value']
copynode -6.516883882228285:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions None_ter ^ ^ initializer ArrayInitializer initializers Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> BasicType', 'copy-BasicType', 'copy-dimensions', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> Literal', 'Literal -> value', 'value -> 1_ter']
copynode -7.284706997219473:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ initializer ArrayInitializer initializers ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> BasicType', 'copy-BasicType', 'dimensions -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers']
copynode -6.9848609999753535:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions None_ter ^ ^ initializer ArrayInitializer initializers MemberReference member par0 ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> BasicType', 'copy-BasicType', 'copy-dimensions', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> MemberReference', 'MemberReference -> member', 'member -> par0']
copynode -6.111950021702796:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions Literal value 1_ter ^ ^ ^ ^ initializer ArrayInitializer initializers MemberReference ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> BasicType', 'copy-BasicType', 'dimensions -> Literal', 'Literal -> value', 'value -> 1_ter', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> MemberReference']
copynode -7.402589025441557:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions MethodInvocation qualifier par0 ^ ^ member unknown ^ ^ ^ ^ initializer ArrayInitializer initializers ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> BasicType', 'copy-BasicType', 'dimensions -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> par0', 'start -> unknown', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers']
copynode -7.450644301716238:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ initializer ArrayInitializer_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> BasicType', 'copy-BasicType', 'dimensions -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'initializer -> ArrayInitializer_ter', 'root -> End']
copynode -6.190572204533964:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions MemberReference member length_ter ^ ^ ^ ^ initializer ArrayInitializer initializers MemberReference ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> BasicType', 'copy-BasicType', 'dimensions -> MemberReference', 'MemberReference -> member', 'copy-member', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> MemberReference']
copynode -6.111950021702796:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions Literal value 1_ter ^ ^ ^ ^ initializer ArrayInitializer initializers ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> BasicType', 'copy-BasicType', 'dimensions -> Literal', 'Literal -> value', 'value -> 1_ter', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> End']
before@19 batch0 x: -7.906406708294526: root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MemberReference member length_ter ^ ^ ^ ^ initializer ArrayInitializer initializers ^ ^ ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'dimensions -> MemberReference', 'MemberReference -> member', 'copy-member', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> End']
after@19 batch0 x: -7.906406708294526: root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MemberReference member length_ter ^ ^ ^ ^ initializer ArrayInitializer initializers ^ ^ ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'dimensions -> MemberReference', 'MemberReference -> member', 'copy-member', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> End']
before@19 batch1 x: -7.507812958676368: root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions Literal value 1_ter ^ ^ ^ ^ initializer ArrayInitializer initializers ^ ^ ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> BasicType', 'copy-BasicType', 'dimensions -> Literal', 'Literal -> value', 'value -> 1_ter', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> End']
after@19 batch1 x: -7.507812958676368: root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions Literal value 1_ter ^ ^ ^ ^ initializer ArrayInitializer initializers ^ ^ ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> BasicType', 'copy-BasicType', 'dimensions -> Literal', 'Literal -> value', 'value -> 1_ter', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> End']
copynode -6.622300815535709:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator selectors MethodInvocation arguments MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ member unknown ^ ^ ^ ^ type ^ arguments ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> selectors type arguments', 'selectors -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'arguments -> End', 'start -> unknown', 'selectors -> End']
copynode -7.206084791730973:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ arguments ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions None_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> type arguments', 'type -> ReferenceType', 'copy-ReferenceType', 'arguments -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-dimensions', 'arguments -> End', 'root -> End']
copynode -7.227650541579351:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ operandr Literal value ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'operandr -> Literal', 'Literal -> value']
copynode -7.085892772534862:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ initializer ArrayInitializer initializers MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-dimensions', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member']
copynode -7.076206992613152:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions None_ter ^ ^ initializer ArrayInitializer initializers MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-dimensions', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member']
copynode -7.307043192879064:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator selectors MethodInvocation member unknown ^ ^ ^ ^ type ReferenceType name BigDecimal_ter ^ ^ ^ ^ arguments MemberReference qualifier par0 ^ ^ member ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> selectors type arguments', 'selectors -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown', 'selectors -> End', 'type -> ReferenceType', 'copy-ReferenceType', 'arguments -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0']
copynode -7.32557211459789:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ arguments MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ MemberReference qualifier par0 ^ ^ member ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> type arguments', 'type -> ReferenceType', 'copy-ReferenceType', 'arguments -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'arguments -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0']
copynode -7.2520886044658255:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator selectors MethodInvocation member unknown ^ ^ ^ ^ type ReferenceType name BigDecimal_ter ^ ^ ^ ^ arguments MemberReference member par0 ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> selectors type arguments', 'selectors -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown', 'selectors -> End', 'type -> ReferenceType', 'copy-ReferenceType', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par0']
copynode -7.411802281392738:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator selectors MethodInvocation arguments ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions None_ter ^ ^ ^ ^ member unknown ^ ^ ^ ^ type ^ arguments ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> selectors type arguments', 'selectors -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-dimensions', 'arguments -> End', 'start -> unknown']
copynode -7.622768387431279:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions Literal value 0_ter ^ ^ ^ ^ initializer ArrayInitializer initializers ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'dimensions -> Literal', 'Literal -> value', 'value -> 0_ter', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> End', 'root -> End']
copynode -7.703644163600984:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ arguments ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions None_ter ^ ^ initializer ArrayInitializer initializers ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> type arguments', 'type -> ReferenceType', 'copy-ReferenceType', 'arguments -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-dimensions', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers']
copynode -7.36705206357874:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions Literal value 0_ter ^ ^ ^ ^ initializer ArrayInitializer initializers MemberReference member ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'dimensions -> Literal', 'Literal -> value', 'value -> 0_ter', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> MemberReference', 'MemberReference -> member']
copynode -7.906406708294526:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MemberReference member length_ter ^ ^ ^ ^ initializer ArrayInitializer initializers ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'dimensions -> MemberReference', 'MemberReference -> member', 'copy-member', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> End', 'root -> End']
copynode -6.76400468708016:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MethodInvocation qualifier par0 ^ ^ member unknown ^ ^ ^ ^ initializer ArrayInitializer initializers ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'dimensions -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> par0', 'start -> unknown', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> End']
copynode -6.76400468708016:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MethodInvocation qualifier par0 ^ ^ member unknown ^ ^ ^ ^ initializer ArrayInitializer initializers MemberReference ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'dimensions -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> par0', 'start -> unknown', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> MemberReference']
copynode -7.700941391522065:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MemberReference member length_ter ^ ^ ^ ^ initializer ArrayInitializer initializers MemberReference member ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'dimensions -> MemberReference', 'MemberReference -> member', 'copy-member', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> MemberReference', 'MemberReference -> member']
copynode -7.077042725170031:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ initializer ArrayInitializer initializers MemberReference ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'dimensions -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> MemberReference']
copynode -7.194406065391377:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions None_ter ^ ^ initializer ArrayInitializer initializers MemberReference member par0 ^ ^ ^ MemberReference ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-dimensions', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> MemberReference', 'MemberReference -> member', 'member -> par0', 'initializers -> MemberReference']
copynode -6.9545354754664:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions None_ter ^ ^ initializer ArrayInitializer initializers MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> BasicType', 'copy-BasicType', 'copy-dimensions', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member']
copynode -7.507812958676368:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions Literal value 1_ter ^ ^ ^ ^ initializer ArrayInitializer initializers ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> BasicType', 'copy-BasicType', 'dimensions -> Literal', 'Literal -> value', 'value -> 1_ter', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> End', 'root -> End']
copynode -6.983760186005384:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayInitializer initializers Literal value 0_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> Literal', 'Literal -> value', 'value -> 0_ter', 'initializers -> Literal', 'Literal -> value', 'value -> 0_ter', 'initializers -> Literal', 'Literal -> value', 'value -> 0_ter']
copynode -7.377920609433204:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions Literal value 1_ter ^ ^ ^ ^ initializer ArrayInitializer initializers MemberReference member ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> BasicType', 'copy-BasicType', 'dimensions -> Literal', 'Literal -> value', 'value -> 1_ter', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> MemberReference', 'MemberReference -> member']
copynode -7.454973521176726:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions MemberReference member length_ter ^ ^ ^ ^ initializer ArrayInitializer initializers MemberReference member ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> BasicType', 'copy-BasicType', 'dimensions -> MemberReference', 'MemberReference -> member', 'copy-member', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> MemberReference', 'MemberReference -> member']
copynode -6.983760186005384:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayInitializer initializers Literal value 0_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> Literal', 'Literal -> value', 'value -> 0_ter', 'initializers -> Literal', 'Literal -> value', 'value -> 0_ter', 'initializers -> Literal', 'Literal -> value', 'value -> 1_ter']
copynode -6.9545354754664:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions None_ter ^ ^ initializer ArrayInitializer initializers MemberReference qualifier par0 ^ ^ member unknown ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> BasicType', 'copy-BasicType', 'copy-dimensions', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'start -> unknown']
copynode -7.377920609433204:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions Literal value 1_ter ^ ^ ^ ^ initializer ArrayInitializer initializers MemberReference qualifier ^ member ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> BasicType', 'copy-BasicType', 'dimensions -> Literal', 'Literal -> value', 'value -> 1_ter', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> MemberReference', 'MemberReference -> qualifier member']
copynode -7.249527128878981:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions None_ter ^ ^ initializer ArrayInitializer initializers Literal value 1_ter ^ ^ ^ MemberReference ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> BasicType', 'copy-BasicType', 'copy-dimensions', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> Literal', 'Literal -> value', 'value -> 1_ter', 'initializers -> MemberReference']
before@20 batch0 x: -8.29001811449416: root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions None_ter ^ ^ initializer ArrayInitializer initializers MemberReference member par0 ^ ^ ^ MemberReference ^ ^ ^ ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-dimensions', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> MemberReference', 'MemberReference -> member', 'member -> par0', 'initializers -> MemberReference']
after@20 batch0 x: -8.29001811449416: root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions None_ter ^ ^ initializer ArrayInitializer initializers MemberReference member par0 ^ ^ ^ MemberReference ^ ^ ^ ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-dimensions', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> MemberReference', 'MemberReference -> member', 'member -> par0', 'initializers -> MemberReference']
before@20 batch1 x: -8.478311451617628: root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions None_ter ^ ^ initializer ArrayInitializer initializers Literal value 1_ter ^ ^ ^ MemberReference ^ ^ ^ ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> BasicType', 'copy-BasicType', 'copy-dimensions', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> Literal', 'Literal -> value', 'value -> 1_ter', 'initializers -> MemberReference']
after@20 batch1 x: -8.478311451617628: root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions None_ter ^ ^ initializer ArrayInitializer initializers Literal value 1_ter ^ ^ ^ MemberReference ^ ^ ^ ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> BasicType', 'copy-BasicType', 'copy-dimensions', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> Literal', 'Literal -> value', 'value -> 1_ter', 'initializers -> MemberReference']
copynode -6.8032487004529685:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator selectors MethodInvocation arguments MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ member unknown ^ ^ ^ ^ type ReferenceType ^ ^ arguments ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> selectors type arguments', 'selectors -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'arguments -> End', 'start -> unknown', 'selectors -> End', 'type -> ReferenceType']
copynode -7.233954007504508:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter']
copynode -7.37065650333534:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator selectors MethodInvocation member unknown ^ ^ ^ ^ type ReferenceType name BigDecimal_ter ^ ^ ^ ^ arguments MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> selectors type arguments', 'selectors -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown', 'selectors -> End', 'type -> ReferenceType', 'copy-ReferenceType', 'arguments -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member']
copynode -7.447184218064649:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator selectors MethodInvocation member unknown ^ ^ ^ ^ type ReferenceType name BigDecimal_ter ^ ^ ^ ^ arguments MemberReference member par0 ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> selectors type arguments', 'selectors -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown', 'selectors -> End', 'type -> ReferenceType', 'copy-ReferenceType', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par0', 'arguments -> End']
copynode -7.52662665839307:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator selectors MethodInvocation arguments ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions None_ter ^ ^ ^ ^ member unknown ^ ^ ^ ^ type ^ arguments ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> selectors type arguments', 'selectors -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-dimensions', 'arguments -> End', 'start -> unknown', 'selectors -> End']
copynode -7.395090323101613:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ arguments MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> type arguments', 'type -> ReferenceType', 'copy-ReferenceType', 'arguments -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'arguments -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member']
copynode -7.94544623256661:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MethodInvocation qualifier par0 ^ ^ member unknown ^ ^ ^ ^ initializer ArrayInitializer initializers ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'dimensions -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> par0', 'start -> unknown', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> End', 'root -> End']
copynode -7.825207635993138:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions Literal value 0_ter ^ ^ ^ ^ initializer ArrayInitializer initializers MemberReference member par0 ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'dimensions -> Literal', 'Literal -> value', 'value -> 0_ter', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> MemberReference', 'MemberReference -> member', 'member -> par0']
copynode -8.108622916275635:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MemberReference member length_ter ^ ^ ^ ^ initializer ArrayInitializer initializers MemberReference member par0 ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'dimensions -> MemberReference', 'MemberReference -> member', 'copy-member', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> MemberReference', 'MemberReference -> member', 'member -> par0']
copynode -7.338646387914196:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ initializer ArrayInitializer initializers MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ MemberReference ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-dimensions', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'initializers -> MemberReference']
copynode -7.343910466181114:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions None_ter ^ ^ initializer ArrayInitializer initializers MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ MemberReference ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-dimensions', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'initializers -> MemberReference']
copynode -7.981022218475118:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MethodInvocation qualifier par0 ^ ^ member unknown ^ ^ ^ ^ initializer ArrayInitializer initializers MemberReference qualifier ^ member ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'dimensions -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> par0', 'start -> unknown', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> MemberReference', 'MemberReference -> qualifier member']
copynode -7.338646387914196:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ initializer ArrayInitializer initializers MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-dimensions', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'initializers -> End']
copynode -7.343910466181114:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions None_ter ^ ^ initializer ArrayInitializer initializers MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-dimensions', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'initializers -> End']
copynode -8.251971151912585:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ initializer ArrayInitializer initializers MemberReference qualifier ^ member ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'dimensions -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> MemberReference', 'MemberReference -> qualifier member']
copynode -7.886318745557219:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions MemberReference member length_ter ^ ^ ^ ^ initializer ArrayInitializer initializers MemberReference member par0 ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> BasicType', 'copy-BasicType', 'dimensions -> MemberReference', 'MemberReference -> member', 'copy-member', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> MemberReference', 'MemberReference -> member', 'member -> par0']
copynode -7.841036927420646:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions Literal value 1_ter ^ ^ ^ ^ initializer ArrayInitializer initializers MemberReference member par0 ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> BasicType', 'copy-BasicType', 'dimensions -> Literal', 'Literal -> value', 'value -> 1_ter', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> MemberReference', 'MemberReference -> member', 'member -> par0']
copynode -7.597159810829908:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayInitializer initializers Literal value 0_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ Literal ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> Literal', 'Literal -> value', 'value -> 0_ter', 'initializers -> Literal', 'Literal -> value', 'value -> 0_ter', 'initializers -> Literal', 'Literal -> value', 'value -> 0_ter', 'initializers -> Literal']
copynode -8.385268431622535:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions Literal value 1_ter ^ ^ ^ ^ initializer ArrayInitializer initializers MemberReference qualifier par0 ^ ^ member ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> BasicType', 'copy-BasicType', 'dimensions -> Literal', 'Literal -> value', 'value -> 1_ter', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0']
copynode -7.360975226853043:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions None_ter ^ ^ initializer ArrayInitializer initializers MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ MemberReference ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> BasicType', 'copy-BasicType', 'copy-dimensions', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'initializers -> MemberReference']
copynode -7.360975226853043:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions None_ter ^ ^ initializer ArrayInitializer initializers MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> BasicType', 'copy-BasicType', 'copy-dimensions', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'initializers -> End']
copynode -7.360975226853043:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions None_ter ^ ^ initializer ArrayInitializer initializers MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ Literal ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> BasicType', 'copy-BasicType', 'copy-dimensions', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'initializers -> Literal']
copynode -8.478311451617628:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions None_ter ^ ^ initializer ArrayInitializer initializers Literal value 1_ter ^ ^ ^ MemberReference qualifier ^ member ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> BasicType', 'copy-BasicType', 'copy-dimensions', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> Literal', 'Literal -> value', 'value -> 1_ter', 'initializers -> MemberReference', 'MemberReference -> qualifier member']
before@21 batch0 x: -8.656695153797045: root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ initializer ArrayInitializer initializers MemberReference qualifier ^ member ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'dimensions -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> MemberReference', 'MemberReference -> qualifier member']
after@21 batch0 x: -8.656695153797045: root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ initializer ArrayInitializer initializers MemberReference qualifier ^ member ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'dimensions -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> MemberReference', 'MemberReference -> qualifier member']
before@21 batch1 x: -9.06843605870381: root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions None_ter ^ ^ initializer ArrayInitializer initializers Literal value 1_ter ^ ^ ^ MemberReference qualifier ^ member ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> BasicType', 'copy-BasicType', 'copy-dimensions', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> Literal', 'Literal -> value', 'value -> 1_ter', 'initializers -> MemberReference', 'MemberReference -> qualifier member']
after@21 batch1 x: -9.06843605870381: root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions None_ter ^ ^ initializer ArrayInitializer initializers Literal value 1_ter ^ ^ ^ MemberReference qualifier ^ member ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> BasicType', 'copy-BasicType', 'copy-dimensions', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> Literal', 'Literal -> value', 'value -> 1_ter', 'initializers -> MemberReference', 'MemberReference -> qualifier member']
copynode -6.8037267843901645:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator selectors MethodInvocation arguments MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ member unknown ^ ^ ^ ^ type ReferenceType name BigDecimal_ter ^ ^ ^ ^ arguments ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> selectors type arguments', 'selectors -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'arguments -> End', 'start -> unknown', 'selectors -> End', 'type -> ReferenceType', 'copy-ReferenceType']
copynode -7.613866848842008:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator selectors MethodInvocation member unknown ^ ^ ^ ^ type ReferenceType name BigDecimal_ter ^ ^ ^ ^ arguments MemberReference member par0 ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> selectors type arguments', 'selectors -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown', 'selectors -> End', 'type -> ReferenceType', 'copy-ReferenceType', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par0', 'arguments -> End', 'root -> End']
copynode -7.669278976274654:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator selectors MethodInvocation arguments ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions None_ter ^ ^ ^ ^ member unknown ^ ^ ^ ^ type ReferenceType ^ ^ arguments ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> selectors type arguments', 'selectors -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-dimensions', 'arguments -> End', 'start -> unknown', 'selectors -> End', 'type -> ReferenceType']
copynode -7.545792309538228:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator selectors MethodInvocation member unknown ^ ^ ^ ^ type ReferenceType name BigDecimal_ter ^ ^ ^ ^ arguments MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> selectors type arguments', 'selectors -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown', 'selectors -> End', 'type -> ReferenceType', 'copy-ReferenceType', 'arguments -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'arguments -> End']
copynode -7.799792092453572:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ arguments MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> type arguments', 'type -> ReferenceType', 'copy-ReferenceType', 'arguments -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'arguments -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'arguments -> End']
copynode -8.382810449460521:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ initializer ArrayInitializer initializers MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ MemberReference qualifier ^ member ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-dimensions', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'initializers -> MemberReference', 'MemberReference -> qualifier member']
copynode -8.38300312613137:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions None_ter ^ ^ initializer ArrayInitializer initializers MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ MemberReference qualifier ^ member ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-dimensions', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'initializers -> MemberReference', 'MemberReference -> qualifier member']
copynode -8.437416116008535:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MethodInvocation qualifier par0 ^ ^ member unknown ^ ^ ^ ^ initializer ArrayInitializer initializers MemberReference qualifier par0 ^ ^ member ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'dimensions -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> par0', 'start -> unknown', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0']
copynode -8.557739114621654:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ initializer ArrayInitializer initializers MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-dimensions', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'initializers -> End', 'root -> End']
copynode -8.566959272371605:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions None_ter ^ ^ initializer ArrayInitializer initializers MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-dimensions', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'initializers -> End', 'root -> End']
copynode -8.656695153797045:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ initializer ArrayInitializer initializers MemberReference qualifier par0 ^ ^ member ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'dimensions -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0']
copynode -7.332761081634089:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ if_true Literal ^ ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'if_true -> Literal']
copynode -7.332761081634089:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ if_true MemberReference ^ ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'if_true -> MemberReference']
copynode -8.161986217135563:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions Literal value 0_ter ^ ^ ^ ^ initializer ArrayInitializer initializers MemberReference member par0 ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'dimensions -> Literal', 'Literal -> value', 'value -> 0_ter', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> MemberReference', 'MemberReference -> member', 'member -> par0', 'initializers -> End']
copynode -8.446666129399091:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayInitializer initializers Literal value 0_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ Literal value ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> Literal', 'Literal -> value', 'value -> 0_ter', 'initializers -> Literal', 'Literal -> value', 'value -> 0_ter', 'initializers -> Literal', 'Literal -> value', 'value -> 0_ter', 'initializers -> Literal', 'Literal -> value']
copynode -8.646615943405777:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions None_ter ^ ^ initializer ArrayInitializer initializers MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> BasicType', 'copy-BasicType', 'copy-dimensions', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'initializers -> End', 'root -> End']
copynode -8.537345847580582:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions None_ter ^ ^ initializer ArrayInitializer initializers MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ MemberReference qualifier ^ member ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> BasicType', 'copy-BasicType', 'copy-dimensions', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'initializers -> MemberReference', 'MemberReference -> qualifier member']
copynode -8.477222826797515:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions Literal value 1_ter ^ ^ ^ ^ initializer ArrayInitializer initializers MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> BasicType', 'copy-BasicType', 'dimensions -> Literal', 'Literal -> value', 'value -> 1_ter', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member']
copynode -9.000600776169449:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions None_ter ^ ^ initializer ArrayInitializer initializers MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ Literal value ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> BasicType', 'copy-BasicType', 'copy-dimensions', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'initializers -> Literal', 'Literal -> value']
copynode -8.0225569778122:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions MemberReference member length_ter ^ ^ ^ ^ initializer ArrayInitializer initializers MemberReference member par0 ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> BasicType', 'copy-BasicType', 'dimensions -> MemberReference', 'MemberReference -> member', 'copy-member', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> MemberReference', 'MemberReference -> member', 'member -> par0', 'initializers -> End']
copynode -8.203442316967994:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions Literal value 1_ter ^ ^ ^ ^ initializer ArrayInitializer initializers MemberReference member par0 ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> BasicType', 'copy-BasicType', 'dimensions -> Literal', 'Literal -> value', 'value -> 1_ter', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> MemberReference', 'MemberReference -> member', 'member -> par0', 'initializers -> End']
copynode -9.06843605870381:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions None_ter ^ ^ initializer ArrayInitializer initializers Literal value 1_ter ^ ^ ^ MemberReference qualifier par0 ^ ^ member ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> BasicType', 'copy-BasicType', 'copy-dimensions', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> Literal', 'Literal -> value', 'value -> 1_ter', 'initializers -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0']
before@22 batch0 x: -9.043103024596348: root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions Literal value 0_ter ^ ^ ^ ^ initializer ArrayInitializer initializers MemberReference member par0 ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'dimensions -> Literal', 'Literal -> value', 'value -> 0_ter', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> MemberReference', 'MemberReference -> member', 'member -> par0', 'initializers -> End']
after@22 batch0 x: -9.043103024596348: root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions Literal value 0_ter ^ ^ ^ ^ initializer ArrayInitializer initializers MemberReference member par0 ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'dimensions -> Literal', 'Literal -> value', 'value -> 0_ter', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> MemberReference', 'MemberReference -> member', 'member -> par0', 'initializers -> End']
before@22 batch1 x: -9.1619365462102: root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions None_ter ^ ^ initializer ArrayInitializer initializers Literal value 1_ter ^ ^ ^ MemberReference qualifier par0 ^ ^ member ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> BasicType', 'copy-BasicType', 'copy-dimensions', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> Literal', 'Literal -> value', 'value -> 1_ter', 'initializers -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0']
after@22 batch1 x: -9.1619365462102: root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions None_ter ^ ^ initializer ArrayInitializer initializers Literal value 1_ter ^ ^ ^ MemberReference qualifier par0 ^ ^ member ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> BasicType', 'copy-BasicType', 'copy-dimensions', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> Literal', 'Literal -> value', 'value -> 1_ter', 'initializers -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0']
copynode -7.703080771461828:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator selectors MethodInvocation member unknown ^ ^ ^ ^ type ReferenceType name BigDecimal_ter ^ ^ ^ ^ arguments MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> selectors type arguments', 'selectors -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown', 'selectors -> End', 'type -> ReferenceType', 'copy-ReferenceType', 'arguments -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'arguments -> End', 'root -> End']
copynode -7.669787175371312:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator selectors MethodInvocation arguments ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions None_ter ^ ^ ^ ^ member unknown ^ ^ ^ ^ type ReferenceType name BigDecimal_ter ^ ^ ^ ^ arguments ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> selectors type arguments', 'selectors -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-dimensions', 'arguments -> End', 'start -> unknown', 'selectors -> End', 'type -> ReferenceType', 'copy-ReferenceType']
copynode -6.8803695658862125:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator selectors MethodInvocation arguments MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ member unknown ^ ^ ^ ^ type ReferenceType name BigDecimal_ter ^ ^ ^ ^ arguments MemberReference ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> selectors type arguments', 'selectors -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'arguments -> End', 'start -> unknown', 'selectors -> End', 'type -> ReferenceType', 'copy-ReferenceType', 'arguments -> MemberReference']
copynode -7.9453256243577925:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ arguments MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> type arguments', 'type -> ReferenceType', 'copy-ReferenceType', 'arguments -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'arguments -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'arguments -> End', 'root -> End']
copynode -6.8803695658862125:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator selectors MethodInvocation arguments MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ member unknown ^ ^ ^ ^ type ReferenceType name BigDecimal_ter ^ ^ ^ ^ arguments Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> selectors type arguments', 'selectors -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'arguments -> End', 'start -> unknown', 'selectors -> End', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-arguments']
copynode -8.521131133893505:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ initializer ArrayInitializer initializers MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ MemberReference qualifier par0 ^ ^ member ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-dimensions', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'initializers -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0']
copynode -8.53077122126706:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions None_ter ^ ^ initializer ArrayInitializer initializers MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ MemberReference qualifier par0 ^ ^ member ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-dimensions', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'initializers -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0']
copynode -8.543566258857027:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MethodInvocation qualifier par0 ^ ^ member unknown ^ ^ ^ ^ initializer ArrayInitializer initializers MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'dimensions -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> par0', 'start -> unknown', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member']
copynode -8.830006989417598:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ if_true Literal value ^ ^ ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'if_true -> Literal', 'Literal -> value']
copynode -9.043103024596348:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions Literal value 0_ter ^ ^ ^ ^ initializer ArrayInitializer initializers MemberReference member par0 ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'dimensions -> Literal', 'Literal -> value', 'value -> 0_ter', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> MemberReference', 'MemberReference -> member', 'member -> par0', 'initializers -> End', 'root -> End']
copynode -6.8803695658862125:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator selectors MethodInvocation arguments MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ member unknown ^ ^ ^ ^ type ReferenceType name BigDecimal_ter ^ ^ ^ ^ arguments MemberReference selectors ArraySelector index MemberReference member loc3 ^ ^ ^ ^ ^ ArraySelector index MemberReference member loc5 ^ ^ ^ ^ ^ MethodInvocation arguments MemberReference selectors ArraySelector index MemberReference member loc5 ^ ^ ^ ^ ^ ^ member par0 ^ ^ ^ ^ member multiply_ter ^ ^ ^ ^ member data_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> selectors type arguments', 'selectors -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'arguments -> End', 'start -> unknown', 'selectors -> End', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-arguments']
copynode -8.720780125353485:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions None_ter ^ ^ initializer ArrayInitializer initializers MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ MemberReference qualifier par0 ^ ^ member ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> BasicType', 'copy-BasicType', 'copy-dimensions', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'initializers -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0']
copynode -9.051061945501715:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions MemberReference member length_ter ^ ^ ^ ^ initializer ArrayInitializer initializers MemberReference member par0 ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> BasicType', 'copy-BasicType', 'dimensions -> MemberReference', 'MemberReference -> member', 'copy-member', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> MemberReference', 'MemberReference -> member', 'member -> par0', 'initializers -> End', 'root -> End']
copynode -8.482879978138953:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayInitializer initializers Literal value 0_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> Literal', 'Literal -> value', 'value -> 0_ter', 'initializers -> Literal', 'Literal -> value', 'value -> 0_ter', 'initializers -> Literal', 'Literal -> value', 'value -> 0_ter', 'initializers -> Literal', 'Literal -> value', 'value -> 0_ter']
copynode -9.094595056492835:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions Literal value 1_ter ^ ^ ^ ^ initializer ArrayInitializer initializers MemberReference member par0 ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> BasicType', 'copy-BasicType', 'dimensions -> Literal', 'Literal -> value', 'value -> 1_ter', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> MemberReference', 'MemberReference -> member', 'member -> par0', 'initializers -> End', 'root -> End']
copynode -9.1619365462102:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions None_ter ^ ^ initializer ArrayInitializer initializers Literal value 1_ter ^ ^ ^ MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> BasicType', 'copy-BasicType', 'copy-dimensions', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> Literal', 'Literal -> value', 'value -> 1_ter', 'initializers -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member']
copynode -9.046199890319258:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions None_ter ^ ^ initializer ArrayInitializer initializers MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> BasicType', 'copy-BasicType', 'copy-dimensions', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'initializers -> Literal', 'Literal -> value', 'value -> 0_ter']
copynode -8.482879978138953:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayInitializer initializers Literal value 0_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> Literal', 'Literal -> value', 'value -> 0_ter', 'initializers -> Literal', 'Literal -> value', 'value -> 0_ter', 'initializers -> Literal', 'Literal -> value', 'value -> 0_ter', 'initializers -> Literal', 'Literal -> value', 'value -> 1_ter']
before@23 batch0 x: -9.070984504622174: root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator selectors MethodInvocation arguments MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ member unknown ^ ^ ^ ^ type ReferenceType name BigDecimal_ter ^ ^ ^ ^ arguments MemberReference selectors ArraySelector index MemberReference member loc3 ^ ^ ^ ^ ^ ArraySelector index MemberReference member loc5 ^ ^ ^ ^ ^ MethodInvocation arguments MemberReference selectors ArraySelector index MemberReference member loc5 ^ ^ ^ ^ ^ ^ member par0 ^ ^ ^ ^ member multiply_ter ^ ^ ^ ^ member data_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> selectors type arguments', 'selectors -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'arguments -> End', 'start -> unknown', 'selectors -> End', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-arguments']
after@23 batch0 x: -9.070984504622174: root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator selectors MethodInvocation arguments MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ member unknown ^ ^ ^ ^ type ReferenceType name BigDecimal_ter ^ ^ ^ ^ arguments MemberReference selectors ArraySelector index MemberReference member loc3 ^ ^ ^ ^ ^ ArraySelector index MemberReference member loc5 ^ ^ ^ ^ ^ MethodInvocation arguments MemberReference selectors ArraySelector index MemberReference member loc5 ^ ^ ^ ^ ^ ^ member par0 ^ ^ ^ ^ member multiply_ter ^ ^ ^ ^ member data_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> selectors type arguments', 'selectors -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'arguments -> End', 'start -> unknown', 'selectors -> End', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-arguments']
before@23 batch1 x: -9.776139718014747: root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayInitializer initializers Literal value 0_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> Literal', 'Literal -> value', 'value -> 0_ter', 'initializers -> Literal', 'Literal -> value', 'value -> 0_ter', 'initializers -> Literal', 'Literal -> value', 'value -> 0_ter', 'initializers -> Literal', 'Literal -> value', 'value -> 1_ter']
after@23 batch1 x: -9.776139718014747: root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayInitializer initializers Literal value 0_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> Literal', 'Literal -> value', 'value -> 0_ter', 'initializers -> Literal', 'Literal -> value', 'value -> 0_ter', 'initializers -> Literal', 'Literal -> value', 'value -> 0_ter', 'initializers -> Literal', 'Literal -> value', 'value -> 1_ter']
copynode -7.806649825972272:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator selectors MethodInvocation arguments MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ member unknown ^ ^ ^ ^ type ReferenceType name BigDecimal_ter ^ ^ ^ ^ arguments MemberReference qualifier ^ member ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> selectors type arguments', 'selectors -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'arguments -> End', 'start -> unknown', 'selectors -> End', 'type -> ReferenceType', 'copy-ReferenceType', 'arguments -> MemberReference', 'MemberReference -> qualifier member']
copynode -8.437769554060651:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator selectors MethodInvocation arguments MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ member unknown ^ ^ ^ ^ type ReferenceType name BigDecimal_ter ^ ^ ^ ^ arguments Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> selectors type arguments', 'selectors -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'arguments -> End', 'start -> unknown', 'selectors -> End', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-arguments', 'root -> End']
copynode -7.764296508743428:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator selectors MethodInvocation arguments ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions None_ter ^ ^ ^ ^ member unknown ^ ^ ^ ^ type ReferenceType name BigDecimal_ter ^ ^ ^ ^ arguments MemberReference ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> selectors type arguments', 'selectors -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-dimensions', 'arguments -> End', 'start -> unknown', 'selectors -> End', 'type -> ReferenceType', 'copy-ReferenceType', 'arguments -> MemberReference']
copynode -8.597537381807342:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ initializer ArrayInitializer initializers MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-dimensions', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'initializers -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member']
copynode -8.836515492992476:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ if_true Literal value null_ter ^ ^ ^ ^ if_false ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'if_true -> Literal', 'Literal -> value', 'value -> null_ter']
copynode -8.609606321202591:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions None_ter ^ ^ initializer ArrayInitializer initializers MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-dimensions', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'initializers -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member']
copynode -7.806649825972272:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator selectors MethodInvocation arguments MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ member unknown ^ ^ ^ ^ type ReferenceType name BigDecimal_ter ^ ^ ^ ^ arguments MemberReference member ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> selectors type arguments', 'selectors -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'arguments -> End', 'start -> unknown', 'selectors -> End', 'type -> ReferenceType', 'copy-ReferenceType', 'arguments -> MemberReference', 'MemberReference -> member']
copynode -9.070984504622174:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator selectors MethodInvocation arguments MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ member unknown ^ ^ ^ ^ type ReferenceType name BigDecimal_ter ^ ^ ^ ^ arguments MemberReference selectors ArraySelector index MemberReference member loc3 ^ ^ ^ ^ ^ ArraySelector index MemberReference member loc5 ^ ^ ^ ^ ^ MethodInvocation arguments MemberReference selectors ArraySelector index MemberReference member loc5 ^ ^ ^ ^ ^ ^ member par0 ^ ^ ^ ^ member multiply_ter ^ ^ ^ ^ member data_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> selectors type arguments', 'selectors -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'arguments -> End', 'start -> unknown', 'selectors -> End', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-arguments', 'root -> End']
copynode -8.798322959337384:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions None_ter ^ ^ initializer ArrayInitializer initializers MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> BasicType', 'copy-BasicType', 'copy-dimensions', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'initializers -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member']
copynode -9.093949657399207:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayInitializer initializers Literal value 0_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ Literal ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> Literal', 'Literal -> value', 'value -> 0_ter', 'initializers -> Literal', 'Literal -> value', 'value -> 0_ter', 'initializers -> Literal', 'Literal -> value', 'value -> 0_ter', 'initializers -> Literal', 'Literal -> value', 'value -> 0_ter', 'initializers -> Literal']
copynode -8.798322959337384:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions None_ter ^ ^ initializer ArrayInitializer initializers MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ MemberReference qualifier par0 ^ ^ member unknown ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> BasicType', 'copy-BasicType', 'copy-dimensions', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'initializers -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'start -> unknown']
copynode -9.093949657399207:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayInitializer initializers Literal value 0_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> Literal', 'Literal -> value', 'value -> 0_ter', 'initializers -> Literal', 'Literal -> value', 'value -> 0_ter', 'initializers -> Literal', 'Literal -> value', 'value -> 0_ter', 'initializers -> Literal', 'Literal -> value', 'value -> 0_ter', 'initializers -> End']
copynode -9.533046747092158:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions None_ter ^ ^ initializer ArrayInitializer initializers Literal value 1_ter ^ ^ ^ MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> BasicType', 'copy-BasicType', 'copy-dimensions', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> Literal', 'Literal -> value', 'value -> 1_ter', 'initializers -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'initializers -> End']
before@24 batch0 x: -9.072058262623614: root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator selectors MethodInvocation arguments MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ member unknown ^ ^ ^ ^ type ReferenceType name BigDecimal_ter ^ ^ ^ ^ arguments MemberReference selectors ArraySelector index MemberReference member loc3 ^ ^ ^ ^ ^ ArraySelector index MemberReference member loc5 ^ ^ ^ ^ ^ MethodInvocation arguments MemberReference selectors ArraySelector index MemberReference member loc5 ^ ^ ^ ^ ^ ^ member par0 ^ ^ ^ ^ member multiply_ter ^ ^ ^ ^ member data_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> selectors type arguments', 'selectors -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'arguments -> End', 'start -> unknown', 'selectors -> End', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-arguments', 'root -> End']
after@24 batch0 x: -9.072058262623614: root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator selectors MethodInvocation arguments MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ member unknown ^ ^ ^ ^ type ReferenceType name BigDecimal_ter ^ ^ ^ ^ arguments MemberReference selectors ArraySelector index MemberReference member loc3 ^ ^ ^ ^ ^ ArraySelector index MemberReference member loc5 ^ ^ ^ ^ ^ MethodInvocation arguments MemberReference selectors ArraySelector index MemberReference member loc5 ^ ^ ^ ^ ^ ^ member par0 ^ ^ ^ ^ member multiply_ter ^ ^ ^ ^ member data_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> selectors type arguments', 'selectors -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'arguments -> End', 'start -> unknown', 'selectors -> End', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-arguments', 'root -> End']
before@24 batch1 x: -10.608164931181818: root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions None_ter ^ ^ initializer ArrayInitializer initializers Literal value 1_ter ^ ^ ^ MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> BasicType', 'copy-BasicType', 'copy-dimensions', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> Literal', 'Literal -> value', 'value -> 1_ter', 'initializers -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'initializers -> End']
after@24 batch1 x: -10.608164931181818: root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions None_ter ^ ^ initializer ArrayInitializer initializers Literal value 1_ter ^ ^ ^ MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> BasicType', 'copy-BasicType', 'copy-dimensions', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> Literal', 'Literal -> value', 'value -> 1_ter', 'initializers -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'initializers -> End']
copynode -8.152435086172773:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator selectors MethodInvocation arguments MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ member unknown ^ ^ ^ ^ type ReferenceType name BigDecimal_ter ^ ^ ^ ^ arguments MemberReference qualifier par0 ^ ^ member ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> selectors type arguments', 'selectors -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'arguments -> End', 'start -> unknown', 'selectors -> End', 'type -> ReferenceType', 'copy-ReferenceType', 'arguments -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0']
copynode -8.679252363159321:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator selectors MethodInvocation arguments ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions None_ter ^ ^ ^ ^ member unknown ^ ^ ^ ^ type ReferenceType name BigDecimal_ter ^ ^ ^ ^ arguments MemberReference member ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> selectors type arguments', 'selectors -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-dimensions', 'arguments -> End', 'start -> unknown', 'selectors -> End', 'type -> ReferenceType', 'copy-ReferenceType', 'arguments -> MemberReference', 'MemberReference -> member']
copynode -9.06400658885832:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator selectors MethodInvocation arguments MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ member unknown ^ ^ ^ ^ type ReferenceType name BigDecimal_ter ^ ^ ^ ^ arguments MemberReference member par0 ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> selectors type arguments', 'selectors -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'arguments -> End', 'start -> unknown', 'selectors -> End', 'type -> ReferenceType', 'copy-ReferenceType', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par0']
copynode -8.679252363159321:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator selectors MethodInvocation arguments ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions None_ter ^ ^ ^ ^ member unknown ^ ^ ^ ^ type ReferenceType name BigDecimal_ter ^ ^ ^ ^ arguments MemberReference qualifier ^ member ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> selectors type arguments', 'selectors -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-dimensions', 'arguments -> End', 'start -> unknown', 'selectors -> End', 'type -> ReferenceType', 'copy-ReferenceType', 'arguments -> MemberReference', 'MemberReference -> qualifier member']
copynode -8.972392804222181:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ if_true Literal value null_ter ^ ^ ^ ^ if_false Literal ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'if_true -> Literal', 'Literal -> value', 'value -> null_ter', 'if_false -> Literal']
copynode -8.955897940555587:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ initializer ArrayInitializer initializers MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-dimensions', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'initializers -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'initializers -> End']
copynode -10.109524708706886:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayInitializer initializers Literal value 0_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ Literal value ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> Literal', 'Literal -> value', 'value -> 0_ter', 'initializers -> Literal', 'Literal -> value', 'value -> 0_ter', 'initializers -> Literal', 'Literal -> value', 'value -> 0_ter', 'initializers -> Literal', 'Literal -> value', 'value -> 0_ter', 'initializers -> Literal', 'Literal -> value']
copynode -9.254478497896343:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions None_ter ^ ^ initializer ArrayInitializer initializers MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> BasicType', 'copy-BasicType', 'copy-dimensions', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'initializers -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'initializers -> End']
copynode -9.254478497896343:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions None_ter ^ ^ initializer ArrayInitializer initializers MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ MemberReference ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> BasicType', 'copy-BasicType', 'copy-dimensions', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'initializers -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'initializers -> MemberReference']
copynode -10.393013936001807:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayInitializer initializers Literal value 0_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> Literal', 'Literal -> value', 'value -> 0_ter', 'initializers -> Literal', 'Literal -> value', 'value -> 0_ter', 'initializers -> Literal', 'Literal -> value', 'value -> 0_ter', 'initializers -> Literal', 'Literal -> value', 'value -> 0_ter', 'initializers -> End', 'root -> End']
copynode -10.608164931181818:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions None_ter ^ ^ initializer ArrayInitializer initializers Literal value 1_ter ^ ^ ^ MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> BasicType', 'copy-BasicType', 'copy-dimensions', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> Literal', 'Literal -> value', 'value -> 1_ter', 'initializers -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'initializers -> End', 'root -> End']
before@25 batch0 x: -9.935665859142318: root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ initializer ArrayInitializer initializers MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-dimensions', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'initializers -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'initializers -> End']
after@25 batch0 x: -9.935665859142318: root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ initializer ArrayInitializer initializers MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-dimensions', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'initializers -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'initializers -> End']
before@25 batch1 x: -10.608467947487952: root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions None_ter ^ ^ initializer ArrayInitializer initializers Literal value 1_ter ^ ^ ^ MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> BasicType', 'copy-BasicType', 'copy-dimensions', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> Literal', 'Literal -> value', 'value -> 1_ter', 'initializers -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'initializers -> End', 'root -> End']
after@25 batch1 x: -10.608467947487952: root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions None_ter ^ ^ initializer ArrayInitializer initializers Literal value 1_ter ^ ^ ^ MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> BasicType', 'copy-BasicType', 'copy-dimensions', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> Literal', 'Literal -> value', 'value -> 1_ter', 'initializers -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'initializers -> End', 'root -> End']
copynode -8.216324686509324:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator selectors MethodInvocation arguments MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ member unknown ^ ^ ^ ^ type ReferenceType name BigDecimal_ter ^ ^ ^ ^ arguments MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> selectors type arguments', 'selectors -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'arguments -> End', 'start -> unknown', 'selectors -> End', 'type -> ReferenceType', 'copy-ReferenceType', 'arguments -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member']
copynode -9.287813819362782:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator selectors MethodInvocation arguments ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions None_ter ^ ^ ^ ^ member unknown ^ ^ ^ ^ type ReferenceType name BigDecimal_ter ^ ^ ^ ^ arguments MemberReference member par0 ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> selectors type arguments', 'selectors -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-dimensions', 'arguments -> End', 'start -> unknown', 'selectors -> End', 'type -> ReferenceType', 'copy-ReferenceType', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par0']
copynode -9.478777683689259:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator selectors MethodInvocation arguments ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions None_ter ^ ^ ^ ^ member unknown ^ ^ ^ ^ type ReferenceType name BigDecimal_ter ^ ^ ^ ^ arguments MemberReference qualifier par0 ^ ^ member ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> selectors type arguments', 'selectors -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-dimensions', 'arguments -> End', 'start -> unknown', 'selectors -> End', 'type -> ReferenceType', 'copy-ReferenceType', 'arguments -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0']
copynode -9.42015870611067:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator selectors MethodInvocation arguments MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ member unknown ^ ^ ^ ^ type ReferenceType name BigDecimal_ter ^ ^ ^ ^ arguments MemberReference member par0 ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> selectors type arguments', 'selectors -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'arguments -> End', 'start -> unknown', 'selectors -> End', 'type -> ReferenceType', 'copy-ReferenceType', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par0', 'arguments -> End']
copynode -9.820523745613173:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ if_true Literal value null_ter ^ ^ ^ ^ if_false Literal value ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'if_true -> Literal', 'Literal -> value', 'value -> null_ter', 'if_false -> Literal', 'Literal -> value']
copynode -9.935665859142318:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ initializer ArrayInitializer initializers MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-dimensions', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'initializers -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'initializers -> End', 'root -> End']
copynode -10.295478029642254:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions None_ter ^ ^ initializer ArrayInitializer initializers MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> BasicType', 'copy-BasicType', 'copy-dimensions', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'initializers -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'initializers -> End', 'root -> End']
copynode -10.379689379129559:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions None_ter ^ ^ initializer ArrayInitializer initializers MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ MemberReference qualifier ^ member ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> BasicType', 'copy-BasicType', 'copy-dimensions', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'initializers -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'initializers -> MemberReference', 'MemberReference -> qualifier member']
copynode -10.14698936091736:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayInitializer initializers Literal value 0_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> Literal', 'Literal -> value', 'value -> 0_ter', 'initializers -> Literal', 'Literal -> value', 'value -> 0_ter', 'initializers -> Literal', 'Literal -> value', 'value -> 0_ter', 'initializers -> Literal', 'Literal -> value', 'value -> 0_ter', 'initializers -> Literal', 'Literal -> value', 'value -> 0_ter']
before@26 batch0 x: -9.9360183038807: root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ initializer ArrayInitializer initializers MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-dimensions', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'initializers -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'initializers -> End', 'root -> End']
after@26 batch0 x: -9.9360183038807: root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ initializer ArrayInitializer initializers MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-dimensions', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'initializers -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'initializers -> End', 'root -> End']
before@26 batch1 x: -10.704488412011415: root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayInitializer initializers Literal value 0_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> Literal', 'Literal -> value', 'value -> 0_ter', 'initializers -> Literal', 'Literal -> value', 'value -> 0_ter', 'initializers -> Literal', 'Literal -> value', 'value -> 0_ter', 'initializers -> Literal', 'Literal -> value', 'value -> 0_ter', 'initializers -> Literal', 'Literal -> value', 'value -> 0_ter']
after@26 batch1 x: -10.704488412011415: root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayInitializer initializers Literal value 0_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> Literal', 'Literal -> value', 'value -> 0_ter', 'initializers -> Literal', 'Literal -> value', 'value -> 0_ter', 'initializers -> Literal', 'Literal -> value', 'value -> 0_ter', 'initializers -> Literal', 'Literal -> value', 'value -> 0_ter', 'initializers -> Literal', 'Literal -> value', 'value -> 0_ter']
copynode -8.525227814418031:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator selectors MethodInvocation arguments MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ member unknown ^ ^ ^ ^ type ReferenceType name BigDecimal_ter ^ ^ ^ ^ arguments MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> selectors type arguments', 'selectors -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'arguments -> End', 'start -> unknown', 'selectors -> End', 'type -> ReferenceType', 'copy-ReferenceType', 'arguments -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'arguments -> End']
copynode -9.596077180904103:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator selectors MethodInvocation arguments MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ member unknown ^ ^ ^ ^ type ReferenceType name BigDecimal_ter ^ ^ ^ ^ arguments MemberReference member par0 ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> selectors type arguments', 'selectors -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'arguments -> End', 'start -> unknown', 'selectors -> End', 'type -> ReferenceType', 'copy-ReferenceType', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par0', 'arguments -> End', 'root -> End']
copynode -9.581005550338887:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator selectors MethodInvocation arguments ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions None_ter ^ ^ ^ ^ member unknown ^ ^ ^ ^ type ReferenceType name BigDecimal_ter ^ ^ ^ ^ arguments MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> selectors type arguments', 'selectors -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-dimensions', 'arguments -> End', 'start -> unknown', 'selectors -> End', 'type -> ReferenceType', 'copy-ReferenceType', 'arguments -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member']
copynode -9.556093967868946:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator selectors MethodInvocation arguments ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions None_ter ^ ^ ^ ^ member unknown ^ ^ ^ ^ type ReferenceType name BigDecimal_ter ^ ^ ^ ^ arguments MemberReference member par0 ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> selectors type arguments', 'selectors -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-dimensions', 'arguments -> End', 'start -> unknown', 'selectors -> End', 'type -> ReferenceType', 'copy-ReferenceType', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par0', 'arguments -> End']
copynode -9.831010786117986:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ if_true Literal value null_ter ^ ^ ^ ^ if_false Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'if_true -> Literal', 'Literal -> value', 'value -> null_ter', 'if_false -> Literal', 'Literal -> value', 'value -> null_ter']
copynode -10.647532029543072:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions None_ter ^ ^ initializer ArrayInitializer initializers MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ MemberReference qualifier par0 ^ ^ member ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> BasicType', 'copy-BasicType', 'copy-dimensions', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'initializers -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'initializers -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0']
copynode -10.704488412011415:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayInitializer initializers Literal value 0_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ Literal ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> Literal', 'Literal -> value', 'value -> 0_ter', 'initializers -> Literal', 'Literal -> value', 'value -> 0_ter', 'initializers -> Literal', 'Literal -> value', 'value -> 0_ter', 'initializers -> Literal', 'Literal -> value', 'value -> 0_ter', 'initializers -> Literal', 'Literal -> value', 'value -> 0_ter', 'initializers -> Literal']
before@27 batch0 x: -10.421139148296788: root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ if_true Literal value null_ter ^ ^ ^ ^ if_false Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'if_true -> Literal', 'Literal -> value', 'value -> null_ter', 'if_false -> Literal', 'Literal -> value', 'value -> null_ter']
after@27 batch0 x: -10.421139148296788: root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ if_true Literal value null_ter ^ ^ ^ ^ if_false Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'if_true -> Literal', 'Literal -> value', 'value -> null_ter', 'if_false -> Literal', 'Literal -> value', 'value -> null_ter']
before@27 batch1 x: -11.563534990418702: root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayInitializer initializers Literal value 0_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ Literal ^ ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> Literal', 'Literal -> value', 'value -> 0_ter', 'initializers -> Literal', 'Literal -> value', 'value -> 0_ter', 'initializers -> Literal', 'Literal -> value', 'value -> 0_ter', 'initializers -> Literal', 'Literal -> value', 'value -> 0_ter', 'initializers -> Literal', 'Literal -> value', 'value -> 0_ter', 'initializers -> Literal']
after@27 batch1 x: -11.563534990418702: root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayInitializer initializers Literal value 0_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ Literal ^ ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> Literal', 'Literal -> value', 'value -> 0_ter', 'initializers -> Literal', 'Literal -> value', 'value -> 0_ter', 'initializers -> Literal', 'Literal -> value', 'value -> 0_ter', 'initializers -> Literal', 'Literal -> value', 'value -> 0_ter', 'initializers -> Literal', 'Literal -> value', 'value -> 0_ter', 'initializers -> Literal']
copynode -8.694437682133866:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator selectors MethodInvocation arguments MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ member unknown ^ ^ ^ ^ type ReferenceType name BigDecimal_ter ^ ^ ^ ^ arguments MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> selectors type arguments', 'selectors -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'arguments -> End', 'start -> unknown', 'selectors -> End', 'type -> ReferenceType', 'copy-ReferenceType', 'arguments -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'arguments -> End', 'root -> End']
copynode -9.731939263059758:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator selectors MethodInvocation arguments ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions None_ter ^ ^ ^ ^ member unknown ^ ^ ^ ^ type ReferenceType name BigDecimal_ter ^ ^ ^ ^ arguments MemberReference member par0 ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> selectors type arguments', 'selectors -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-dimensions', 'arguments -> End', 'start -> unknown', 'selectors -> End', 'type -> ReferenceType', 'copy-ReferenceType', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par0', 'arguments -> End', 'root -> End']
copynode -9.729782618000172:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator selectors MethodInvocation arguments ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions None_ter ^ ^ ^ ^ member unknown ^ ^ ^ ^ type ReferenceType name BigDecimal_ter ^ ^ ^ ^ arguments MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> selectors type arguments', 'selectors -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-dimensions', 'arguments -> End', 'start -> unknown', 'selectors -> End', 'type -> ReferenceType', 'copy-ReferenceType', 'arguments -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'arguments -> End']
copynode -10.421139148296788:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ if_true Literal value null_ter ^ ^ ^ ^ if_false Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'if_true -> Literal', 'Literal -> value', 'value -> null_ter', 'if_false -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> End']
copynode -10.723370789084584:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions None_ter ^ ^ initializer ArrayInitializer initializers MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> BasicType', 'copy-BasicType', 'copy-dimensions', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'initializers -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'initializers -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member']
copynode -11.563534990418702:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayInitializer initializers Literal value 0_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ Literal value ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> Literal', 'Literal -> value', 'value -> 0_ter', 'initializers -> Literal', 'Literal -> value', 'value -> 0_ter', 'initializers -> Literal', 'Literal -> value', 'value -> 0_ter', 'initializers -> Literal', 'Literal -> value', 'value -> 0_ter', 'initializers -> Literal', 'Literal -> value', 'value -> 0_ter', 'initializers -> Literal', 'Literal -> value']
before@28 batch0 x: -10.421537625137717: root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ if_true Literal value null_ter ^ ^ ^ ^ if_false Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'if_true -> Literal', 'Literal -> value', 'value -> null_ter', 'if_false -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> End']
after@28 batch0 x: -10.421537625137717: root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ if_true Literal value null_ter ^ ^ ^ ^ if_false Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'if_true -> Literal', 'Literal -> value', 'value -> null_ter', 'if_false -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> End']
before@28 batch1 x: -11.602062441874295: root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayInitializer initializers Literal value 0_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ Literal value ^ ^ ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> Literal', 'Literal -> value', 'value -> 0_ter', 'initializers -> Literal', 'Literal -> value', 'value -> 0_ter', 'initializers -> Literal', 'Literal -> value', 'value -> 0_ter', 'initializers -> Literal', 'Literal -> value', 'value -> 0_ter', 'initializers -> Literal', 'Literal -> value', 'value -> 0_ter', 'initializers -> Literal', 'Literal -> value']
after@28 batch1 x: -11.602062441874295: root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayInitializer initializers Literal value 0_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ Literal value ^ ^ ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> Literal', 'Literal -> value', 'value -> 0_ter', 'initializers -> Literal', 'Literal -> value', 'value -> 0_ter', 'initializers -> Literal', 'Literal -> value', 'value -> 0_ter', 'initializers -> Literal', 'Literal -> value', 'value -> 0_ter', 'initializers -> Literal', 'Literal -> value', 'value -> 0_ter', 'initializers -> Literal', 'Literal -> value']
copynode -9.881655148579739:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name BigDecimal_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ClassCreator selectors MethodInvocation arguments ArrayCreator type ReferenceType name BigDecimal_ter ^ ^ ^ ^ dimensions None_ter ^ ^ ^ ^ member unknown ^ ^ ^ ^ type ReferenceType name BigDecimal_ter ^ ^ ^ ^ arguments MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> ReferenceType', 'copy-ReferenceType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ClassCreator', 'ClassCreator -> selectors type arguments', 'selectors -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> ArrayCreator', 'ArrayCreator -> type dimensions', 'type -> ReferenceType', 'copy-ReferenceType', 'copy-dimensions', 'arguments -> End', 'start -> unknown', 'selectors -> End', 'type -> ReferenceType', 'copy-ReferenceType', 'arguments -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'arguments -> End', 'root -> End']
copynode -11.151930748019367:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayCreator type BasicType name double_ter ^ ^ ^ ^ dimensions None_ter ^ ^ initializer ArrayInitializer initializers MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ MemberReference qualifier par0 ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayCreator', 'ArrayCreator -> type dimensions initializer', 'type -> BasicType', 'copy-BasicType', 'copy-dimensions', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'initializers -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'initializers -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'initializers -> End']
copynode -11.602062441874295:  root modified ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer ArrayInitializer initializers Literal value 0_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators', 'copy-modifiers', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc2', 'initializer -> ArrayInitializer', 'ArrayInitializer -> initializers', 'initializers -> Literal', 'Literal -> value', 'value -> 0_ter', 'initializers -> Literal', 'Literal -> value', 'value -> 0_ter', 'initializers -> Literal', 'Literal -> value', 'value -> 0_ter', 'initializers -> Literal', 'Literal -> value', 'value -> 0_ter', 'initializers -> Literal', 'Literal -> value', 'value -> 0_ter', 'initializers -> Literal', 'Literal -> value', 'value -> 0_ter']
6 length_ter
6 length_ter
6 length_ter
6 length_ter
method
v_ter {'v_ter': 'BigDecimal', 'nRows_ter': 'int', 'nCols_ter': 'int', 'out_ter': 'BigDecimal', 'row_ter': 'int', 'sum_ter': 'BigDecimal', 'i_ter': 'int'}
7 BigDecimal
method
nCols_ter {'v_ter': 'BigDecimal', 'nRows_ter': 'int', 'nCols_ter': 'int', 'out_ter': 'BigDecimal', 'row_ter': 'int', 'sum_ter': 'BigDecimal', 'i_ter': 'int'}
7 int
method
7 
BigMatrix  copy 
BigMatrix  add 
BigMatrixImpl  add 
BigMatrix  subtract 
BigMatrixImpl  subtract 
BigMatrix  scalarAdd 
BigMatrix  scalarMultiply 
BigMatrix  multiply 
BigMatrixImpl  multiply 
BigMatrix  preMultiply 
BigDecimal  getData 
double  getDataAsDoubleArray 
BigDecimal  getDataRef 
int  getRoundingMode 
None  setRoundingMode 
int  getScale 
None  setScale 
BigDecimal  getNorm 
BigMatrix  getSubMatrix 
BigMatrix  getSubMatrix 
None  setSubMatrix 
BigMatrix  getRowMatrix 
BigMatrix  getColumnMatrix 
BigDecimal  getRow 
double  getRowAsDoubleArray 
BigDecimal  getColumn 
double  getColumnAsDoubleArray 
BigDecimal  getEntry 
double  getEntryAsDouble 
BigMatrix  transpose 
BigMatrix  inverse 
BigDecimal  getDeterminant 
boolean  isSquare 
boolean  isSingular 
int  getRowDimension 
int  getColumnDimension 
BigDecimal  getTrace 
BigDecimal  operate 
BigDecimal  operate 
BigDecimal  preMultiply 
BigDecimal  solve 
BigDecimal  solve 
BigMatrix  solve 
None  luDecompose 
String  toString 
boolean  equals 
int  hashCode 
BigMatrix  getLUMatrix 
int  getPermutation 
BigDecimal  copyOut 
None  copyIn 
None  copyIn 
None  copyIn 
boolean  isValidCoordinate 
6 length_ter
6 length_ter
method
v_ter {'v_ter': 'BigDecimal', 'nRows_ter': 'int', 'nCols_ter': 'int', 'out_ter': 'BigDecimal', 'row_ter': 'int', 'sum_ter': 'BigDecimal', 'i_ter': 'int'}
7 BigDecimal
method
v_ter {'v_ter': 'BigDecimal', 'nRows_ter': 'int', 'nCols_ter': 'int', 'out_ter': 'BigDecimal', 'row_ter': 'int', 'sum_ter': 'BigDecimal', 'i_ter': 'int'}
7 BigDecimal
method
7 
method
7 
method
7 
method
7 
6 length_ter
6 length_ter
6 length_ter
method
7 
method
v_ter {'v_ter': 'BigDecimal', 'nRows_ter': 'int', 'nCols_ter': 'int', 'out_ter': 'BigDecimal', 'row_ter': 'int', 'sum_ter': 'BigDecimal', 'i_ter': 'int'}
7 BigDecimal
method
nRows_ter {'v_ter': 'BigDecimal', 'nRows_ter': 'int', 'nCols_ter': 'int', 'out_ter': 'BigDecimal', 'row_ter': 'int', 'sum_ter': 'BigDecimal', 'i_ter': 'int'}
7 int
6 length_ter
6 length_ter
6 length_ter
method
7 
RealMatrix  copy 
RealMatrix  add 
RealMatrixImpl  add 
RealMatrix  subtract 
RealMatrixImpl  subtract 
RealMatrix  scalarAdd 
RealMatrix  scalarMultiply 
RealMatrix  multiply 
RealMatrixImpl  multiply 
RealMatrix  preMultiply 
double  getData 
double  getDataRef 
double  getNorm 
RealMatrix  getSubMatrix 
RealMatrix  getSubMatrix 
None  setSubMatrix 
RealMatrix  getRowMatrix 
RealMatrix  getColumnMatrix 
double  getRow 
double  getColumn 
double  getEntry 
RealMatrix  transpose 
RealMatrix  inverse 
double  getDeterminant 
boolean  isSquare 
boolean  isSingular 
int  getRowDimension 
int  getColumnDimension 
double  getTrace 
double  operate 
double  preMultiply 
double  solve 
RealMatrix  solve 
None  luDecompose 
String  toString 
boolean  equals 
int  hashCode 
RealMatrix  getLUMatrix 
int  getPermutation 
double  copyOut 
None  copyIn 
boolean  isValidCoordinate 
6 length_ter
6 length_ter
6 length_ter
6 length_ter
method
v_ter {'v_ter': 'double', 'nRows_ter': 'int', 'nCols_ter': 'int', 'out_ter': 'double', 'row_ter': 'int', 'dataRow_ter': 'double', 'sum_ter': 'double', 'i_ter': 'int'}
7 double
method
7 
RealMatrix  copy 
RealMatrix  add 
RealMatrixImpl  add 
RealMatrix  subtract 
RealMatrixImpl  subtract 
RealMatrix  scalarAdd 
RealMatrix  scalarMultiply 
RealMatrix  multiply 
RealMatrixImpl  multiply 
RealMatrix  preMultiply 
double  getData 
double  getDataRef 
double  getNorm 
RealMatrix  getSubMatrix 
RealMatrix  getSubMatrix 
None  setSubMatrix 
RealMatrix  getRowMatrix 
RealMatrix  getColumnMatrix 
double  getRow 
double  getColumn 
double  getEntry 
RealMatrix  transpose 
RealMatrix  inverse 
double  getDeterminant 
boolean  isSquare 
boolean  isSingular 
int  getRowDimension 
int  getColumnDimension 
double  getTrace 
double  operate 
double  preMultiply 
double  solve 
RealMatrix  solve 
None  luDecompose 
String  toString 
boolean  equals 
int  hashCode 
RealMatrix  getLUMatrix 
int  getPermutation 
double  copyOut 
None  copyIn 
boolean  isValidCoordinate 
6 length_ter
method
v_ter {'v_ter': 'double', 'nRows_ter': 'int', 'nCols_ter': 'int', 'out_ter': 'double', 'row_ter': 'int', 'dataRow_ter': 'double', 'sum_ter': 'double', 'i_ter': 'int'}
7 double
6 length_ter
6 length_ter
method
7 
method
7 
method
v_ter {'v_ter': 'double', 'nRows_ter': 'int', 'nCols_ter': 'int', 'out_ter': 'double', 'row_ter': 'int', 'dataRow_ter': 'double', 'sum_ter': 'double', 'i_ter': 'int'}
7 double
method
v_ter {'v_ter': 'double', 'nRows_ter': 'int', 'nCols_ter': 'int', 'out_ter': 'double', 'row_ter': 'int', 'dataRow_ter': 'double', 'sum_ter': 'double', 'i_ter': 'int'}
7 double
stderr: Check out a0f3e043 to /root/projects/Recoder-bwk/buggy/Math-98............. OK
Init local repository...................................................... OK
Tag post-fix revision...................................................... OK
Initialize fixed program version........................................... OK
Apply patch................................................................ OK
Initialize buggy program version........................................... OK
Diff a0f3e043:26cf6d54..................................................... OK
Apply patch................................................................ OK
Tag pre-fix revision....................................................... OK
Check out program version: Math-98b........................................ OK
OpenJDK 64-Bit Server VM warning: ignoring option MaxPermSize=1G; support was removed in 8.0
Running ant (export.dir.src.classes)....................................... OK

  0%|          | 0/1 [00:00<?, ?it/s]/root/projects/Recoder-bwk/run.py:527: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  tmpdepth = np.array(tmpdepth)
/root/envs/recoder/lib/python3.7/site-packages/torch/nn/functional.py:1340: UserWarning: nn.functional.tanh is deprecated. Use torch.tanh instead.
  warnings.warn("nn.functional.tanh is deprecated. Use torch.tanh instead.")
100%|██████████| 1/1 [00:42<00:00, 42.39s/it]100%|██████████| 1/1 [00:42<00:00, 42.39s/it]
