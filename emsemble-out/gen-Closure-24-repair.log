stdout: condition MethodInvocation qualifier parent_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ 
if(parent.hasChildren()){
condition MethodInvocation qualifier parent_ter ^ ^ member isFromExterns_ter ^ ^ ^ ^ 
if(parent.isFromExterns()){
condition MethodInvocation qualifier parent_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ 
if(parent.hasOneChild()){
condition MethodInvocation qualifier parent_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ 
if(parent.hasMoreThanOneChild()){
condition MethodInvocation qualifier parent_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ 
if(parent.isQualifiedName()){
condition MethodInvocation qualifier parent_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ 
if(parent.isUnscopedQualifiedName()){
condition MethodInvocation qualifier parent_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ 
if(parent.isVarArgs()){
condition MethodInvocation qualifier parent_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ 
if(parent.isOptionalArg()){
condition MethodInvocation qualifier parent_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ 
if(parent.isSyntheticBlock()){
condition MethodInvocation qualifier parent_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ 
if(parent.wasEmptyNode()){
condition MethodInvocation qualifier parent_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ 
if(parent.isOnlyModifiesThisCall()){
condition MethodInvocation qualifier parent_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ 
if(parent.isNoSideEffectsCall()){
condition MethodInvocation qualifier parent_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ 
if(parent.isLocalResultCall()){
condition MethodInvocation qualifier parent_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ 
if(parent.isQuotedString()){
condition MethodInvocation qualifier parent_ter ^ ^ member isAdd_ter ^ ^ ^ ^ 
if(parent.isAdd()){
condition MethodInvocation qualifier parent_ter ^ ^ member isAnd_ter ^ ^ ^ ^ 
if(parent.isAnd()){
condition MethodInvocation qualifier parent_ter ^ ^ member isArrayLit_ter ^ ^ ^ ^ 
if(parent.isArrayLit()){
condition MethodInvocation qualifier parent_ter ^ ^ member isAssign_ter ^ ^ ^ ^ 
if(parent.isAssign()){
condition MethodInvocation qualifier parent_ter ^ ^ member isAssignAdd_ter ^ ^ ^ ^ 
if(parent.isAssignAdd()){
condition MethodInvocation qualifier parent_ter ^ ^ member isBlock_ter ^ ^ ^ ^ 
if(parent.isBlock()){
condition MethodInvocation qualifier parent_ter ^ ^ member isBreak_ter ^ ^ ^ ^ 
if(parent.isBreak()){
condition MethodInvocation qualifier parent_ter ^ ^ member isCall_ter ^ ^ ^ ^ 
if(parent.isCall()){
condition MethodInvocation qualifier parent_ter ^ ^ member isCase_ter ^ ^ ^ ^ 
if(parent.isCase()){
condition MethodInvocation qualifier parent_ter ^ ^ member isCatch_ter ^ ^ ^ ^ 
if(parent.isCatch()){
condition MethodInvocation qualifier parent_ter ^ ^ member isComma_ter ^ ^ ^ ^ 
if(parent.isComma()){
condition MethodInvocation qualifier parent_ter ^ ^ member isContinue_ter ^ ^ ^ ^ 
if(parent.isContinue()){
condition MethodInvocation qualifier parent_ter ^ ^ member isDebugger_ter ^ ^ ^ ^ 
if(parent.isDebugger()){
condition MethodInvocation qualifier parent_ter ^ ^ member isDec_ter ^ ^ ^ ^ 
if(parent.isDec()){
condition MethodInvocation qualifier parent_ter ^ ^ member isDefaultCase_ter ^ ^ ^ ^ 
if(parent.isDefaultCase()){
condition MethodInvocation qualifier parent_ter ^ ^ member isDelProp_ter ^ ^ ^ ^ 
if(parent.isDelProp()){
condition MethodInvocation qualifier parent_ter ^ ^ member isDo_ter ^ ^ ^ ^ 
if(parent.isDo()){
condition MethodInvocation qualifier parent_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ 
if(parent.isEmpty()){
condition MethodInvocation qualifier parent_ter ^ ^ member isExprResult_ter ^ ^ ^ ^ 
if(parent.isExprResult()){
condition MethodInvocation qualifier parent_ter ^ ^ member isFalse_ter ^ ^ ^ ^ 
if(parent.isFalse()){
condition MethodInvocation qualifier parent_ter ^ ^ member isFor_ter ^ ^ ^ ^ 
if(parent.isFor()){
condition MethodInvocation qualifier parent_ter ^ ^ member isFunction_ter ^ ^ ^ ^ 
if(parent.isFunction()){
condition MethodInvocation qualifier parent_ter ^ ^ member isGetterDef_ter ^ ^ ^ ^ 
if(parent.isGetterDef()){
condition MethodInvocation qualifier parent_ter ^ ^ member isGetElem_ter ^ ^ ^ ^ 
if(parent.isGetElem()){
condition MethodInvocation qualifier parent_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ 
if(parent.isGetProp()){
condition MethodInvocation qualifier parent_ter ^ ^ member isHook_ter ^ ^ ^ ^ 
if(parent.isHook()){
condition MethodInvocation qualifier parent_ter ^ ^ member isIf_ter ^ ^ ^ ^ 
if(parent.isIf()){
condition MethodInvocation qualifier parent_ter ^ ^ member isIn_ter ^ ^ ^ ^ 
if(parent.isIn()){
condition MethodInvocation qualifier parent_ter ^ ^ member isInc_ter ^ ^ ^ ^ 
if(parent.isInc()){
condition MethodInvocation qualifier parent_ter ^ ^ member isInstanceOf_ter ^ ^ ^ ^ 
if(parent.isInstanceOf()){
condition MethodInvocation qualifier parent_ter ^ ^ member isLabel_ter ^ ^ ^ ^ 
if(parent.isLabel()){
condition MethodInvocation qualifier parent_ter ^ ^ member isLabelName_ter ^ ^ ^ ^ 
if(parent.isLabelName()){
condition MethodInvocation qualifier parent_ter ^ ^ member isName_ter ^ ^ ^ ^ 
if(parent.isName()){
condition MethodInvocation qualifier parent_ter ^ ^ member isNE_ter ^ ^ ^ ^ 
if(parent.isNE()){
condition MethodInvocation qualifier parent_ter ^ ^ member isNew_ter ^ ^ ^ ^ 
if(parent.isNew()){
condition MethodInvocation qualifier parent_ter ^ ^ member isNot_ter ^ ^ ^ ^ 
if(parent.isNot()){
condition MethodInvocation qualifier parent_ter ^ ^ member isNull_ter ^ ^ ^ ^ 
if(parent.isNull()){
condition MethodInvocation qualifier parent_ter ^ ^ member isNumber_ter ^ ^ ^ ^ 
if(parent.isNumber()){
condition MethodInvocation qualifier parent_ter ^ ^ member isObjectLit_ter ^ ^ ^ ^ 
if(parent.isObjectLit()){
condition MethodInvocation qualifier parent_ter ^ ^ member isOr_ter ^ ^ ^ ^ 
if(parent.isOr()){
condition MethodInvocation qualifier parent_ter ^ ^ member isParamList_ter ^ ^ ^ ^ 
if(parent.isParamList()){
condition MethodInvocation qualifier parent_ter ^ ^ member isRegExp_ter ^ ^ ^ ^ 
if(parent.isRegExp()){
condition MethodInvocation qualifier parent_ter ^ ^ member isReturn_ter ^ ^ ^ ^ 
if(parent.isReturn()){
condition MethodInvocation qualifier parent_ter ^ ^ member isScript_ter ^ ^ ^ ^ 
if(parent.isScript()){
condition MethodInvocation qualifier parent_ter ^ ^ member isSetterDef_ter ^ ^ ^ ^ 
if(parent.isSetterDef()){
condition MethodInvocation qualifier parent_ter ^ ^ member isString_ter ^ ^ ^ ^ 
if(parent.isString()){
condition MethodInvocation qualifier parent_ter ^ ^ member isStringKey_ter ^ ^ ^ ^ 
if(parent.isStringKey()){
condition MethodInvocation qualifier parent_ter ^ ^ member isSwitch_ter ^ ^ ^ ^ 
if(parent.isSwitch()){
condition MethodInvocation qualifier parent_ter ^ ^ member isThis_ter ^ ^ ^ ^ 
if(parent.isThis()){
condition MethodInvocation qualifier parent_ter ^ ^ member isThrow_ter ^ ^ ^ ^ 
if(parent.isThrow()){
condition MethodInvocation qualifier parent_ter ^ ^ member isTrue_ter ^ ^ ^ ^ 
if(parent.isTrue()){
condition MethodInvocation qualifier parent_ter ^ ^ member isTry_ter ^ ^ ^ ^ 
if(parent.isTry()){
condition MethodInvocation qualifier parent_ter ^ ^ member isTypeOf_ter ^ ^ ^ ^ 
if(parent.isTypeOf()){
condition MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ 
if(parent.isVar()){
condition MethodInvocation qualifier parent_ter ^ ^ member isVoid_ter ^ ^ ^ ^ 
if(parent.isVoid()){
condition MethodInvocation qualifier parent_ter ^ ^ member isWhile_ter ^ ^ ^ ^ 
if(parent.isWhile()){
condition MethodInvocation qualifier parent_ter ^ ^ member isWith_ter ^ ^ ^ ^ 
if(parent.isWith()){
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ ^ 
if(parent.isVar()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ ^ 
if(!parent.isVar()){

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent != null)){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
if(parent.hasChildren()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isFromExterns_ter ^ ^ ^ ^ ^ 
if(parent.isFromExterns()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ ^ 
if(parent.hasOneChild()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ ^ 
if(parent.hasMoreThanOneChild()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ ^ 
if(parent.isQualifiedName()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ ^ 
if(parent.isUnscopedQualifiedName()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ ^ 
if(parent.isVarArgs()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ ^ 
if(parent.isOptionalArg()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ ^ 
if(parent.isSyntheticBlock()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ ^ 
if(parent.wasEmptyNode()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ ^ 
if(parent.isOnlyModifiesThisCall()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ ^ 
if(parent.isNoSideEffectsCall()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ ^ 
if(parent.isLocalResultCall()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ ^ 
if(parent.isQuotedString()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isAdd_ter ^ ^ ^ ^ ^ 
if(parent.isAdd()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isAnd_ter ^ ^ ^ ^ ^ 
if(parent.isAnd()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isArrayLit_ter ^ ^ ^ ^ ^ 
if(parent.isArrayLit()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isAssign_ter ^ ^ ^ ^ ^ 
if(parent.isAssign()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isAssignAdd_ter ^ ^ ^ ^ ^ 
if(parent.isAssignAdd()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isBlock_ter ^ ^ ^ ^ ^ 
if(parent.isBlock()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isBreak_ter ^ ^ ^ ^ ^ 
if(parent.isBreak()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isCall_ter ^ ^ ^ ^ ^ 
if(parent.isCall()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isCase_ter ^ ^ ^ ^ ^ 
if(parent.isCase()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isCatch_ter ^ ^ ^ ^ ^ 
if(parent.isCatch()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isComma_ter ^ ^ ^ ^ ^ 
if(parent.isComma()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isContinue_ter ^ ^ ^ ^ ^ 
if(parent.isContinue()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isDebugger_ter ^ ^ ^ ^ ^ 
if(parent.isDebugger()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isDec_ter ^ ^ ^ ^ ^ 
if(parent.isDec()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isDefaultCase_ter ^ ^ ^ ^ ^ 
if(parent.isDefaultCase()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isDelProp_ter ^ ^ ^ ^ ^ 
if(parent.isDelProp()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isDo_ter ^ ^ ^ ^ ^ 
if(parent.isDo()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ ^ 
if(parent.isEmpty()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isExprResult_ter ^ ^ ^ ^ ^ 
if(parent.isExprResult()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isFalse_ter ^ ^ ^ ^ ^ 
if(parent.isFalse()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isFor_ter ^ ^ ^ ^ ^ 
if(parent.isFor()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isFunction_ter ^ ^ ^ ^ ^ 
if(parent.isFunction()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isGetterDef_ter ^ ^ ^ ^ ^ 
if(parent.isGetterDef()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isGetElem_ter ^ ^ ^ ^ ^ 
if(parent.isGetElem()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ ^ 
if(parent.isGetProp()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isHook_ter ^ ^ ^ ^ ^ 
if(parent.isHook()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isIf_ter ^ ^ ^ ^ ^ 
if(parent.isIf()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isIn_ter ^ ^ ^ ^ ^ 
if(parent.isIn()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isInc_ter ^ ^ ^ ^ ^ 
if(parent.isInc()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isInstanceOf_ter ^ ^ ^ ^ ^ 
if(parent.isInstanceOf()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isLabel_ter ^ ^ ^ ^ ^ 
if(parent.isLabel()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isLabelName_ter ^ ^ ^ ^ ^ 
if(parent.isLabelName()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isName_ter ^ ^ ^ ^ ^ 
if(parent.isName()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isNE_ter ^ ^ ^ ^ ^ 
if(parent.isNE()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isNew_ter ^ ^ ^ ^ ^ 
if(parent.isNew()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isNot_ter ^ ^ ^ ^ ^ 
if(parent.isNot()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isNull_ter ^ ^ ^ ^ ^ 
if(parent.isNull()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ 
if(parent.isNumber()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isObjectLit_ter ^ ^ ^ ^ ^ 
if(parent.isObjectLit()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isOr_ter ^ ^ ^ ^ ^ 
if(parent.isOr()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isParamList_ter ^ ^ ^ ^ ^ 
if(parent.isParamList()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isRegExp_ter ^ ^ ^ ^ ^ 
if(parent.isRegExp()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ 
if(parent.isReturn()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isScript_ter ^ ^ ^ ^ ^ 
if(parent.isScript()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isSetterDef_ter ^ ^ ^ ^ ^ 
if(parent.isSetterDef()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ 
if(parent.isString()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isStringKey_ter ^ ^ ^ ^ ^ 
if(parent.isStringKey()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isSwitch_ter ^ ^ ^ ^ ^ 
if(parent.isSwitch()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isThis_ter ^ ^ ^ ^ ^ 
if(parent.isThis()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isThrow_ter ^ ^ ^ ^ ^ 
if(parent.isThrow()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isTrue_ter ^ ^ ^ ^ ^ 
if(parent.isTrue()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isTry_ter ^ ^ ^ ^ ^ 
if(parent.isTry()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isTypeOf_ter ^ ^ ^ ^ ^ 
if(parent.isTypeOf()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isVoid_ter ^ ^ ^ ^ ^ 
if(parent.isVoid()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isWhile_ter ^ ^ ^ ^ ^ 
if(parent.isWhile()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isWith_ter ^ ^ ^ ^ ^ 
if(parent.isWith()){

condition MethodInvocation qualifier type_ter ^ ^ member isVar_ter ^ ^ ^ ^ 
if(type.isVar()){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && parent.hasChildren())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isFromExterns_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && parent.isFromExterns())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && parent.hasOneChild())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && parent.hasMoreThanOneChild())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && parent.isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && parent.isUnscopedQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && parent.isVarArgs())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && parent.isOptionalArg())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && parent.isSyntheticBlock())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && parent.wasEmptyNode())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && parent.isOnlyModifiesThisCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && parent.isNoSideEffectsCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && parent.isLocalResultCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && parent.isQuotedString())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isAdd_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && parent.isAdd())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isAnd_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && parent.isAnd())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isArrayLit_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && parent.isArrayLit())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isAssign_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && parent.isAssign())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isAssignAdd_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && parent.isAssignAdd())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isBlock_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && parent.isBlock())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isBreak_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && parent.isBreak())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isCall_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && parent.isCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isCase_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && parent.isCase())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isCatch_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && parent.isCatch())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isComma_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && parent.isComma())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isContinue_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && parent.isContinue())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isDebugger_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && parent.isDebugger())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isDec_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && parent.isDec())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isDefaultCase_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && parent.isDefaultCase())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isDelProp_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && parent.isDelProp())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isDo_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && parent.isDo())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && parent.isEmpty())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isExprResult_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && parent.isExprResult())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isFalse_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && parent.isFalse())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isFor_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && parent.isFor())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isFunction_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && parent.isFunction())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isGetterDef_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && parent.isGetterDef())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isGetElem_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && parent.isGetElem())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && parent.isGetProp())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isHook_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && parent.isHook())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isIf_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && parent.isIf())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isIn_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && parent.isIn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isInc_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && parent.isInc())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isInstanceOf_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && parent.isInstanceOf())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isLabel_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && parent.isLabel())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isLabelName_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && parent.isLabelName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isName_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && parent.isName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isNE_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && parent.isNE())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isNew_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && parent.isNew())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isNot_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && parent.isNot())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isNull_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && parent.isNull())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && parent.isNumber())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isObjectLit_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && parent.isObjectLit())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isOr_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && parent.isOr())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isParamList_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && parent.isParamList())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isRegExp_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && parent.isRegExp())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && parent.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isScript_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && parent.isScript())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isSetterDef_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && parent.isSetterDef())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && parent.isString())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isStringKey_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && parent.isStringKey())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isSwitch_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && parent.isSwitch())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isThis_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && parent.isThis())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isThrow_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && parent.isThrow())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isTrue_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && parent.isTrue())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isTry_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && parent.isTry())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isTypeOf_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && parent.isTypeOf())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && parent.isVar())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isVoid_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && parent.isVoid())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isWhile_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && parent.isWhile())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isWith_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && parent.isWith())){

StatementExpression expression MethodInvocation qualifier parent_ter ^ ^ member detachChildren_ter ^ ^ ^ ^ ^ 
parent.detachChildren();

StatementExpression expression MethodInvocation qualifier parent_ter ^ ^ member setQuotedString_ter ^ ^ ^ ^ ^ 
parent.setQuotedString();

condition MethodInvocation qualifier scope_ter ^ ^ member isVar_ter ^ ^ ^ ^ 
if(scope.isVar()){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ ^ ^ ^ 
if(((parent != null) && parent.isVar())){

IfStatement condition MemberReference member parent_ter ^ ^ ^ ^ ^ 
if(parent){

condition MethodInvocation qualifier parent_ter ^ ^ member getNode_ter ^ ^ ^ ^ 
if(parent.getNode()){
condition MethodInvocation qualifier v_ter ^ ^ member isVar_ter ^ ^ ^ ^ 
if(v.isVar()){
condition MethodInvocation qualifier parent_ter ^ ^ member getVarIterable_ter ^ ^ ^ ^ 
if(parent.getVarIterable()){
condition MethodInvocation qualifier n_ter ^ ^ member isVar_ter ^ ^ ^ ^ 
if(n.isVar()){
condition MethodInvocation qualifier parent_ter ^ ^ member getScope_ter ^ ^ ^ ^ 
if(parent.getScope()){
condition MethodInvocation qualifier parent_ter ^ ^ member getInitialValue_ter ^ ^ ^ ^ 
if(parent.getInitialValue()){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && !parent.hasChildren())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isFromExterns_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && !parent.isFromExterns())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && !parent.hasOneChild())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && !parent.hasMoreThanOneChild())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && !parent.isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && !parent.isUnscopedQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && !parent.isVarArgs())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && !parent.isOptionalArg())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && !parent.isSyntheticBlock())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && !parent.wasEmptyNode())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && !parent.isOnlyModifiesThisCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && !parent.isNoSideEffectsCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && !parent.isLocalResultCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && !parent.isQuotedString())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isAdd_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && !parent.isAdd())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isAnd_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && !parent.isAnd())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isArrayLit_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && !parent.isArrayLit())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isAssign_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && !parent.isAssign())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isAssignAdd_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && !parent.isAssignAdd())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isBlock_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && !parent.isBlock())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isBreak_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && !parent.isBreak())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isCall_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && !parent.isCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isCase_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && !parent.isCase())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isCatch_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && !parent.isCatch())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isComma_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && !parent.isComma())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isContinue_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && !parent.isContinue())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isDebugger_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && !parent.isDebugger())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isDec_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && !parent.isDec())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isDefaultCase_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && !parent.isDefaultCase())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isDelProp_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && !parent.isDelProp())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isDo_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && !parent.isDo())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && !parent.isEmpty())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isExprResult_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && !parent.isExprResult())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isFalse_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && !parent.isFalse())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isFor_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && !parent.isFor())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isFunction_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && !parent.isFunction())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isGetterDef_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && !parent.isGetterDef())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isGetElem_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && !parent.isGetElem())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && !parent.isGetProp())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isHook_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && !parent.isHook())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isIf_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && !parent.isIf())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isIn_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && !parent.isIn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isInc_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && !parent.isInc())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isInstanceOf_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && !parent.isInstanceOf())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isLabel_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && !parent.isLabel())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isLabelName_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && !parent.isLabelName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isName_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && !parent.isName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isNE_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && !parent.isNE())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isNew_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && !parent.isNew())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isNot_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && !parent.isNot())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isNull_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && !parent.isNull())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && !parent.isNumber())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isObjectLit_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && !parent.isObjectLit())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isOr_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && !parent.isOr())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isParamList_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && !parent.isParamList())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isRegExp_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && !parent.isRegExp())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && !parent.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isScript_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && !parent.isScript())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isSetterDef_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && !parent.isSetterDef())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && !parent.isString())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isStringKey_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && !parent.isStringKey())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isSwitch_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && !parent.isSwitch())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isThis_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && !parent.isThis())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isThrow_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && !parent.isThrow())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isTrue_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && !parent.isTrue())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isTry_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && !parent.isTry())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isTypeOf_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && !parent.isTypeOf())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && !parent.isVar())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isVoid_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && !parent.isVoid())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isWhile_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && !parent.isWhile())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isWith_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && !parent.isWith())){

condition MethodInvocation qualifier parent_ter ^ ^ member getQualifiedName_ter ^ ^ ^ ^ 
if(parent.getQualifiedName()){
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ arguments MemberReference member name_ter ^ ^ ^ ^ member isVar_ter ^ ^ ^ ^ ^ 
if(!parent.isVar(name)){

condition MethodInvocation qualifier parent_ter ^ ^ member getParent_ter ^ ^ ^ ^ 
if(parent.getParent()){
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ arguments MemberReference member name_ter ^ ^ ^ ^ member isVar_ter ^ ^ ^ ^ ^ 
if(parent.isVar(name)){

IfStatement condition MethodInvocation qualifier type_ter ^ ^ member isVar_ter ^ ^ ^ ^ ^ 
if(type.isVar()){

condition MethodInvocation qualifier parent_ter ^ ^ member getString_ter ^ ^ ^ ^ 
if(parent.getString()){
condition MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ 
if(parent.getType()){
condition MethodInvocation qualifier name_ter ^ ^ member isVar_ter ^ ^ ^ ^ 
if(name.isVar()){
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(parent.hasChildren()){
return;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isFromExterns_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(parent.isFromExterns()){
return;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(parent.hasOneChild()){
return;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(parent.hasMoreThanOneChild()){
return;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(parent.isQualifiedName()){
return;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(parent.isUnscopedQualifiedName()){
return;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(parent.isVarArgs()){
return;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(parent.isOptionalArg()){
return;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(parent.isSyntheticBlock()){
return;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(parent.wasEmptyNode()){
return;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(parent.isOnlyModifiesThisCall()){
return;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(parent.isNoSideEffectsCall()){
return;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(parent.isLocalResultCall()){
return;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(parent.isQuotedString()){
return;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isAdd_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(parent.isAdd()){
return;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isAnd_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(parent.isAnd()){
return;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isArrayLit_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(parent.isArrayLit()){
return;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isAssign_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(parent.isAssign()){
return;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isAssignAdd_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(parent.isAssignAdd()){
return;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isBlock_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(parent.isBlock()){
return;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isBreak_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(parent.isBreak()){
return;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isCall_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(parent.isCall()){
return;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isCase_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(parent.isCase()){
return;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isCatch_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(parent.isCatch()){
return;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isComma_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(parent.isComma()){
return;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isContinue_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(parent.isContinue()){
return;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isDebugger_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(parent.isDebugger()){
return;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isDec_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(parent.isDec()){
return;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isDefaultCase_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(parent.isDefaultCase()){
return;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isDelProp_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(parent.isDelProp()){
return;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isDo_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(parent.isDo()){
return;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(parent.isEmpty()){
return;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isExprResult_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(parent.isExprResult()){
return;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isFalse_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(parent.isFalse()){
return;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isFor_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(parent.isFor()){
return;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isFunction_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(parent.isFunction()){
return;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isGetterDef_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(parent.isGetterDef()){
return;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isGetElem_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(parent.isGetElem()){
return;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(parent.isGetProp()){
return;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isHook_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(parent.isHook()){
return;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isIf_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(parent.isIf()){
return;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isIn_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(parent.isIn()){
return;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isInc_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(parent.isInc()){
return;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isInstanceOf_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(parent.isInstanceOf()){
return;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isLabel_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(parent.isLabel()){
return;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isLabelName_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(parent.isLabelName()){
return;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isName_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(parent.isName()){
return;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isNE_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(parent.isNE()){
return;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isNew_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(parent.isNew()){
return;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isNot_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(parent.isNot()){
return;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isNull_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(parent.isNull()){
return;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(parent.isNumber()){
return;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isObjectLit_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(parent.isObjectLit()){
return;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isOr_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(parent.isOr()){
return;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isParamList_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(parent.isParamList()){
return;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isRegExp_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(parent.isRegExp()){
return;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(parent.isReturn()){
return;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isScript_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(parent.isScript()){
return;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isSetterDef_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(parent.isSetterDef()){
return;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(parent.isString()){
return;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isStringKey_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(parent.isStringKey()){
return;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isSwitch_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(parent.isSwitch()){
return;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isThis_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(parent.isThis()){
return;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isThrow_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(parent.isThrow()){
return;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isTrue_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(parent.isTrue()){
return;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isTry_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(parent.isTry()){
return;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isTypeOf_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(parent.isTypeOf()){
return;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(parent.isVar()){
return;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isVoid_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(parent.isVoid()){
return;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isWhile_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(parent.isWhile()){
return;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isWith_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(parent.isWith()){
return;
}
condition MethodInvocation qualifier transformation_ter ^ ^ member isVar_ter ^ ^ ^ ^ 
if(transformation.isVar()){
IfStatement condition MemberReference prefix_operators !_ter ^ ^ member parent_ter ^ ^ ^ ^ ^ 
if(!parent){

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if((parent == null)){
return;
}
IfStatement condition MethodInvocation member isVar_ter ^ ^ ^ ^ ^ 
if(isVar()){

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent == null)){

ReturnStatement_ter ^ 
if (true) { return;
 }

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier type_ter ^ ^ member isVar_ter ^ ^ ^ ^ ^ 
if(!type.isVar()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
if(!parent.hasChildren()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isFromExterns_ter ^ ^ ^ ^ ^ 
if(!parent.isFromExterns()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ ^ 
if(!parent.hasOneChild()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ ^ 
if(!parent.hasMoreThanOneChild()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ ^ 
if(!parent.isQualifiedName()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ ^ 
if(!parent.isUnscopedQualifiedName()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ ^ 
if(!parent.isVarArgs()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ ^ 
if(!parent.isOptionalArg()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ ^ 
if(!parent.isSyntheticBlock()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ ^ 
if(!parent.wasEmptyNode()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ ^ 
if(!parent.isOnlyModifiesThisCall()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ ^ 
if(!parent.isNoSideEffectsCall()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ ^ 
if(!parent.isLocalResultCall()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ ^ 
if(!parent.isQuotedString()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isAdd_ter ^ ^ ^ ^ ^ 
if(!parent.isAdd()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isAnd_ter ^ ^ ^ ^ ^ 
if(!parent.isAnd()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isArrayLit_ter ^ ^ ^ ^ ^ 
if(!parent.isArrayLit()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isAssign_ter ^ ^ ^ ^ ^ 
if(!parent.isAssign()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isAssignAdd_ter ^ ^ ^ ^ ^ 
if(!parent.isAssignAdd()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isBlock_ter ^ ^ ^ ^ ^ 
if(!parent.isBlock()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isBreak_ter ^ ^ ^ ^ ^ 
if(!parent.isBreak()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isCall_ter ^ ^ ^ ^ ^ 
if(!parent.isCall()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isCase_ter ^ ^ ^ ^ ^ 
if(!parent.isCase()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isCatch_ter ^ ^ ^ ^ ^ 
if(!parent.isCatch()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isComma_ter ^ ^ ^ ^ ^ 
if(!parent.isComma()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isContinue_ter ^ ^ ^ ^ ^ 
if(!parent.isContinue()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isDebugger_ter ^ ^ ^ ^ ^ 
if(!parent.isDebugger()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isDec_ter ^ ^ ^ ^ ^ 
if(!parent.isDec()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isDefaultCase_ter ^ ^ ^ ^ ^ 
if(!parent.isDefaultCase()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isDelProp_ter ^ ^ ^ ^ ^ 
if(!parent.isDelProp()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isDo_ter ^ ^ ^ ^ ^ 
if(!parent.isDo()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ ^ 
if(!parent.isEmpty()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isExprResult_ter ^ ^ ^ ^ ^ 
if(!parent.isExprResult()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isFalse_ter ^ ^ ^ ^ ^ 
if(!parent.isFalse()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isFor_ter ^ ^ ^ ^ ^ 
if(!parent.isFor()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isFunction_ter ^ ^ ^ ^ ^ 
if(!parent.isFunction()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isGetterDef_ter ^ ^ ^ ^ ^ 
if(!parent.isGetterDef()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isGetElem_ter ^ ^ ^ ^ ^ 
if(!parent.isGetElem()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ ^ 
if(!parent.isGetProp()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isHook_ter ^ ^ ^ ^ ^ 
if(!parent.isHook()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isIf_ter ^ ^ ^ ^ ^ 
if(!parent.isIf()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isIn_ter ^ ^ ^ ^ ^ 
if(!parent.isIn()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isInc_ter ^ ^ ^ ^ ^ 
if(!parent.isInc()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isInstanceOf_ter ^ ^ ^ ^ ^ 
if(!parent.isInstanceOf()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isLabel_ter ^ ^ ^ ^ ^ 
if(!parent.isLabel()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isLabelName_ter ^ ^ ^ ^ ^ 
if(!parent.isLabelName()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isName_ter ^ ^ ^ ^ ^ 
if(!parent.isName()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isNE_ter ^ ^ ^ ^ ^ 
if(!parent.isNE()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isNew_ter ^ ^ ^ ^ ^ 
if(!parent.isNew()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isNot_ter ^ ^ ^ ^ ^ 
if(!parent.isNot()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isNull_ter ^ ^ ^ ^ ^ 
if(!parent.isNull()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ 
if(!parent.isNumber()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isObjectLit_ter ^ ^ ^ ^ ^ 
if(!parent.isObjectLit()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isOr_ter ^ ^ ^ ^ ^ 
if(!parent.isOr()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isParamList_ter ^ ^ ^ ^ ^ 
if(!parent.isParamList()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isRegExp_ter ^ ^ ^ ^ ^ 
if(!parent.isRegExp()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ 
if(!parent.isReturn()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isScript_ter ^ ^ ^ ^ ^ 
if(!parent.isScript()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isSetterDef_ter ^ ^ ^ ^ ^ 
if(!parent.isSetterDef()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ 
if(!parent.isString()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isStringKey_ter ^ ^ ^ ^ ^ 
if(!parent.isStringKey()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isSwitch_ter ^ ^ ^ ^ ^ 
if(!parent.isSwitch()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isThis_ter ^ ^ ^ ^ ^ 
if(!parent.isThis()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isThrow_ter ^ ^ ^ ^ ^ 
if(!parent.isThrow()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isTrue_ter ^ ^ ^ ^ ^ 
if(!parent.isTrue()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isTry_ter ^ ^ ^ ^ ^ 
if(!parent.isTry()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isTypeOf_ter ^ ^ ^ ^ ^ 
if(!parent.isTypeOf()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isVoid_ter ^ ^ ^ ^ ^ 
if(!parent.isVoid()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isWhile_ter ^ ^ ^ ^ ^ 
if(!parent.isWhile()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isWith_ter ^ ^ ^ ^ ^ 
if(!parent.isWith()){

condition MethodInvocation qualifier par1 ^ ^ member isVar_ter ^ ^ ^ ^ 
if(.isVar()){

condition MethodInvocation qualifier aliases_ter ^ ^ member isVar_ter ^ ^ ^ ^ 
if(aliases.isVar()){
IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() || parent.hasChildren())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isFromExterns_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() || parent.isFromExterns())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() || parent.hasOneChild())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() || parent.hasMoreThanOneChild())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() || parent.isQualifiedName())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() || parent.isUnscopedQualifiedName())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() || parent.isVarArgs())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() || parent.isOptionalArg())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() || parent.isSyntheticBlock())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() || parent.wasEmptyNode())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() || parent.isOnlyModifiesThisCall())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() || parent.isNoSideEffectsCall())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() || parent.isLocalResultCall())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() || parent.isQuotedString())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isAdd_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() || parent.isAdd())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isAnd_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() || parent.isAnd())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isArrayLit_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() || parent.isArrayLit())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isAssign_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() || parent.isAssign())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isAssignAdd_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() || parent.isAssignAdd())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isBlock_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() || parent.isBlock())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isBreak_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() || parent.isBreak())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isCall_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() || parent.isCall())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isCase_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() || parent.isCase())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isCatch_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() || parent.isCatch())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isComma_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() || parent.isComma())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isContinue_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() || parent.isContinue())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isDebugger_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() || parent.isDebugger())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isDec_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() || parent.isDec())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isDefaultCase_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() || parent.isDefaultCase())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isDelProp_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() || parent.isDelProp())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isDo_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() || parent.isDo())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() || parent.isEmpty())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isExprResult_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() || parent.isExprResult())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isFalse_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() || parent.isFalse())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isFor_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() || parent.isFor())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isFunction_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() || parent.isFunction())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isGetterDef_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() || parent.isGetterDef())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isGetElem_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() || parent.isGetElem())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() || parent.isGetProp())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isHook_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() || parent.isHook())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isIf_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() || parent.isIf())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isIn_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() || parent.isIn())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isInc_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() || parent.isInc())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isInstanceOf_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() || parent.isInstanceOf())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isLabel_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() || parent.isLabel())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isLabelName_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() || parent.isLabelName())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isName_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() || parent.isName())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isNE_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() || parent.isNE())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isNew_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() || parent.isNew())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isNot_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() || parent.isNot())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isNull_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() || parent.isNull())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() || parent.isNumber())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isObjectLit_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() || parent.isObjectLit())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isOr_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() || parent.isOr())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isParamList_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() || parent.isParamList())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isRegExp_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() || parent.isRegExp())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() || parent.isReturn())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isScript_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() || parent.isScript())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isSetterDef_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() || parent.isSetterDef())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() || parent.isString())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isStringKey_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() || parent.isStringKey())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isSwitch_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() || parent.isSwitch())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isThis_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() || parent.isThis())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isThrow_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() || parent.isThrow())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isTrue_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() || parent.isTrue())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isTry_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() || parent.isTry())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isTypeOf_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() || parent.isTypeOf())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() || parent.isVar())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isVoid_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() || parent.isVoid())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isWhile_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() || parent.isWhile())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isWith_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() || parent.isWith())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ ^ ^ ^ 
if(((parent == null) && parent.isVar())){

IfStatement condition MethodInvocation qualifier name_ter ^ ^ member isVar_ter ^ ^ ^ ^ ^ 
if(name.isVar()){

IfStatement condition MethodInvocation arguments MemberReference member parent_ter ^ ^ ^ ^ member isVar_ter ^ ^ ^ ^ ^ 
if(isVar(parent)){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.isVar() && n.getFirstChild().isQualifiedName())){

IfStatement condition MethodInvocation qualifier v_ter ^ ^ member isVar_ter ^ ^ ^ ^ ^ 
if(v.isVar()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.hasChildren()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isFromExterns_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isFromExterns()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.hasOneChild()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.hasMoreThanOneChild()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isQualifiedName()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isUnscopedQualifiedName()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isVarArgs()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isOptionalArg()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isSyntheticBlock()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.wasEmptyNode()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isOnlyModifiesThisCall()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isNoSideEffectsCall()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isLocalResultCall()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isQuotedString()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isAdd_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isAdd()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isAnd_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isAnd()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isArrayLit_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isArrayLit()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isAssign_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isAssign()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isAssignAdd_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isAssignAdd()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isBlock_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isBlock()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isBreak_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isBreak()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isCall_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isCall()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isCase_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isCase()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isCatch_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isCatch()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isComma_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isComma()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isContinue_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isContinue()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isDebugger_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isDebugger()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isDec_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isDec()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isDefaultCase_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isDefaultCase()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isDelProp_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isDelProp()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isDo_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isDo()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isEmpty()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isExprResult_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isExprResult()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isFalse_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isFalse()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isFor_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isFor()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isFunction_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isFunction()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isGetterDef_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isGetterDef()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isGetElem_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isGetElem()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isGetProp()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isHook_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isHook()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isIf_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isIf()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isIn_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isIn()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isInc_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isInc()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isInstanceOf_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isInstanceOf()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isLabel_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isLabel()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isLabelName_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isLabelName()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isName_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isName()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isNE_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isNE()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isNew_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isNew()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isNot_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isNot()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isNull_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isNull()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isNumber()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isObjectLit_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isObjectLit()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isOr_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isOr()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isParamList_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isParamList()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isRegExp_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isRegExp()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isReturn()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isScript_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isScript()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isSetterDef_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isSetterDef()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isString()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isStringKey_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isStringKey()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isSwitch_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isSwitch()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isThis_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isThis()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isThrow_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isThrow()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isTrue_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isTrue()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isTry_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isTry()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isTypeOf_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isTypeOf()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isVar()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isVoid_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isVoid()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isWhile_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isWhile()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isWith_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isWith()){
continue;
}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
if(n.hasChildren()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ 
if(n.getFirstChild().isQualifiedName()){

condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && n.getFirstChild().isQualifiedName())){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isFromExterns_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ 
if((n.isFromExterns() && n.getFirstChild().isQualifiedName())){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ 
if((n.hasOneChild() && n.getFirstChild().isQualifiedName())){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ 
if((n.hasMoreThanOneChild() && n.getFirstChild().isQualifiedName())){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ 
if((n.isQualifiedName() && n.getFirstChild().isQualifiedName())){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ 
if((n.isUnscopedQualifiedName() && n.getFirstChild().isQualifiedName())){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ 
if((n.isVarArgs() && n.getFirstChild().isQualifiedName())){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ 
if((n.isOptionalArg() && n.getFirstChild().isQualifiedName())){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ 
if((n.isSyntheticBlock() && n.getFirstChild().isQualifiedName())){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ 
if((n.wasEmptyNode() && n.getFirstChild().isQualifiedName())){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ 
if((n.isOnlyModifiesThisCall() && n.getFirstChild().isQualifiedName())){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ 
if((n.isNoSideEffectsCall() && n.getFirstChild().isQualifiedName())){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ 
if((n.isLocalResultCall() && n.getFirstChild().isQualifiedName())){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ 
if((n.isQuotedString() && n.getFirstChild().isQualifiedName())){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isAdd_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ 
if((n.isAdd() && n.getFirstChild().isQualifiedName())){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isAnd_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ 
if((n.isAnd() && n.getFirstChild().isQualifiedName())){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isArrayLit_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ 
if((n.isArrayLit() && n.getFirstChild().isQualifiedName())){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isAssign_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ 
if((n.isAssign() && n.getFirstChild().isQualifiedName())){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isAssignAdd_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ 
if((n.isAssignAdd() && n.getFirstChild().isQualifiedName())){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isBlock_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ 
if((n.isBlock() && n.getFirstChild().isQualifiedName())){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isBreak_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ 
if((n.isBreak() && n.getFirstChild().isQualifiedName())){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ 
if((n.isCall() && n.getFirstChild().isQualifiedName())){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isCase_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ 
if((n.isCase() && n.getFirstChild().isQualifiedName())){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isCatch_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ 
if((n.isCatch() && n.getFirstChild().isQualifiedName())){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isComma_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ 
if((n.isComma() && n.getFirstChild().isQualifiedName())){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isContinue_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ 
if((n.isContinue() && n.getFirstChild().isQualifiedName())){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isDebugger_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ 
if((n.isDebugger() && n.getFirstChild().isQualifiedName())){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isDec_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ 
if((n.isDec() && n.getFirstChild().isQualifiedName())){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isDefaultCase_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ 
if((n.isDefaultCase() && n.getFirstChild().isQualifiedName())){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isDelProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ 
if((n.isDelProp() && n.getFirstChild().isQualifiedName())){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isDo_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ 
if((n.isDo() && n.getFirstChild().isQualifiedName())){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ 
if((n.isEmpty() && n.getFirstChild().isQualifiedName())){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isExprResult_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ 
if((n.isExprResult() && n.getFirstChild().isQualifiedName())){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isFalse_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ 
if((n.isFalse() && n.getFirstChild().isQualifiedName())){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isFor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ 
if((n.isFor() && n.getFirstChild().isQualifiedName())){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isFunction_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ 
if((n.isFunction() && n.getFirstChild().isQualifiedName())){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetterDef_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ 
if((n.isGetterDef() && n.getFirstChild().isQualifiedName())){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetElem_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ 
if((n.isGetElem() && n.getFirstChild().isQualifiedName())){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && n.getFirstChild().isQualifiedName())){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isHook_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ 
if((n.isHook() && n.getFirstChild().isQualifiedName())){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isIf_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ 
if((n.isIf() && n.getFirstChild().isQualifiedName())){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isIn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ 
if((n.isIn() && n.getFirstChild().isQualifiedName())){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isInc_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ 
if((n.isInc() && n.getFirstChild().isQualifiedName())){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isInstanceOf_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ 
if((n.isInstanceOf() && n.getFirstChild().isQualifiedName())){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isLabel_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ 
if((n.isLabel() && n.getFirstChild().isQualifiedName())){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isLabelName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ 
if((n.isLabelName() && n.getFirstChild().isQualifiedName())){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ 
if((n.isName() && n.getFirstChild().isQualifiedName())){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isNE_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ 
if((n.isNE() && n.getFirstChild().isQualifiedName())){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isNew_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ 
if((n.isNew() && n.getFirstChild().isQualifiedName())){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isNot_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ 
if((n.isNot() && n.getFirstChild().isQualifiedName())){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isNull_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ 
if((n.isNull() && n.getFirstChild().isQualifiedName())){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isNumber_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ 
if((n.isNumber() && n.getFirstChild().isQualifiedName())){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isObjectLit_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ 
if((n.isObjectLit() && n.getFirstChild().isQualifiedName())){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isOr_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ 
if((n.isOr() && n.getFirstChild().isQualifiedName())){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isParamList_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ 
if((n.isParamList() && n.getFirstChild().isQualifiedName())){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isRegExp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ 
if((n.isRegExp() && n.getFirstChild().isQualifiedName())){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ 
if((n.isReturn() && n.getFirstChild().isQualifiedName())){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isScript_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ 
if((n.isScript() && n.getFirstChild().isQualifiedName())){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isSetterDef_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ 
if((n.isSetterDef() && n.getFirstChild().isQualifiedName())){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isString_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ 
if((n.isString() && n.getFirstChild().isQualifiedName())){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isStringKey_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ 
if((n.isStringKey() && n.getFirstChild().isQualifiedName())){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isSwitch_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ 
if((n.isSwitch() && n.getFirstChild().isQualifiedName())){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isThis_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ 
if((n.isThis() && n.getFirstChild().isQualifiedName())){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isThrow_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ 
if((n.isThrow() && n.getFirstChild().isQualifiedName())){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isTrue_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ 
if((n.isTrue() && n.getFirstChild().isQualifiedName())){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isTry_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ 
if((n.isTry() && n.getFirstChild().isQualifiedName())){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isTypeOf_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ 
if((n.isTypeOf() && n.getFirstChild().isQualifiedName())){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ 
if((n.isVar() && n.getFirstChild().isQualifiedName())){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isVoid_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ 
if((n.isVoid() && n.getFirstChild().isQualifiedName())){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isWhile_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ 
if((n.isWhile() && n.getFirstChild().isQualifiedName())){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isWith_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ 
if((n.isWith() && n.getFirstChild().isQualifiedName())){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member getQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && n.getFirstChild().getQualifiedName())){
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isFromExterns_ter ^ ^ ^ ^ ^ 
if(n.isFromExterns()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ ^ 
if(n.hasOneChild()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ ^ 
if(n.hasMoreThanOneChild()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ ^ 
if(n.isQualifiedName()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ ^ 
if(n.isUnscopedQualifiedName()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ ^ 
if(n.isVarArgs()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ ^ 
if(n.isOptionalArg()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ ^ 
if(n.isSyntheticBlock()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ ^ 
if(n.wasEmptyNode()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ ^ 
if(n.isOnlyModifiesThisCall()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ ^ 
if(n.isNoSideEffectsCall()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ ^ 
if(n.isLocalResultCall()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ ^ 
if(n.isQuotedString()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isAdd_ter ^ ^ ^ ^ ^ 
if(n.isAdd()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isAnd_ter ^ ^ ^ ^ ^ 
if(n.isAnd()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isArrayLit_ter ^ ^ ^ ^ ^ 
if(n.isArrayLit()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isAssign_ter ^ ^ ^ ^ ^ 
if(n.isAssign()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isAssignAdd_ter ^ ^ ^ ^ ^ 
if(n.isAssignAdd()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isBlock_ter ^ ^ ^ ^ ^ 
if(n.isBlock()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isBreak_ter ^ ^ ^ ^ ^ 
if(n.isBreak()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isCall_ter ^ ^ ^ ^ ^ 
if(n.isCall()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isCase_ter ^ ^ ^ ^ ^ 
if(n.isCase()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isCatch_ter ^ ^ ^ ^ ^ 
if(n.isCatch()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isComma_ter ^ ^ ^ ^ ^ 
if(n.isComma()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isContinue_ter ^ ^ ^ ^ ^ 
if(n.isContinue()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isDebugger_ter ^ ^ ^ ^ ^ 
if(n.isDebugger()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isDec_ter ^ ^ ^ ^ ^ 
if(n.isDec()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isDefaultCase_ter ^ ^ ^ ^ ^ 
if(n.isDefaultCase()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isDelProp_ter ^ ^ ^ ^ ^ 
if(n.isDelProp()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isDo_ter ^ ^ ^ ^ ^ 
if(n.isDo()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ ^ 
if(n.isEmpty()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isExprResult_ter ^ ^ ^ ^ ^ 
if(n.isExprResult()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isFalse_ter ^ ^ ^ ^ ^ 
if(n.isFalse()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isFor_ter ^ ^ ^ ^ ^ 
if(n.isFor()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isFunction_ter ^ ^ ^ ^ ^ 
if(n.isFunction()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isGetterDef_ter ^ ^ ^ ^ ^ 
if(n.isGetterDef()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isGetElem_ter ^ ^ ^ ^ ^ 
if(n.isGetElem()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ ^ 
if(n.isGetProp()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isHook_ter ^ ^ ^ ^ ^ 
if(n.isHook()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isIf_ter ^ ^ ^ ^ ^ 
if(n.isIf()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isIn_ter ^ ^ ^ ^ ^ 
if(n.isIn()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isInc_ter ^ ^ ^ ^ ^ 
if(n.isInc()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isInstanceOf_ter ^ ^ ^ ^ ^ 
if(n.isInstanceOf()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isLabel_ter ^ ^ ^ ^ ^ 
if(n.isLabel()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isLabelName_ter ^ ^ ^ ^ ^ 
if(n.isLabelName()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ ^ 
if(n.isName()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isNE_ter ^ ^ ^ ^ ^ 
if(n.isNE()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isNew_ter ^ ^ ^ ^ ^ 
if(n.isNew()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isNot_ter ^ ^ ^ ^ ^ 
if(n.isNot()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isNull_ter ^ ^ ^ ^ ^ 
if(n.isNull()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ 
if(n.isNumber()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isObjectLit_ter ^ ^ ^ ^ ^ 
if(n.isObjectLit()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isOr_ter ^ ^ ^ ^ ^ 
if(n.isOr()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isParamList_ter ^ ^ ^ ^ ^ 
if(n.isParamList()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isRegExp_ter ^ ^ ^ ^ ^ 
if(n.isRegExp()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ 
if(n.isReturn()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isScript_ter ^ ^ ^ ^ ^ 
if(n.isScript()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isSetterDef_ter ^ ^ ^ ^ ^ 
if(n.isSetterDef()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ 
if(n.isString()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isStringKey_ter ^ ^ ^ ^ ^ 
if(n.isStringKey()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isSwitch_ter ^ ^ ^ ^ ^ 
if(n.isSwitch()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isThis_ter ^ ^ ^ ^ ^ 
if(n.isThis()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isThrow_ter ^ ^ ^ ^ ^ 
if(n.isThrow()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isTrue_ter ^ ^ ^ ^ ^ 
if(n.isTrue()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isTry_ter ^ ^ ^ ^ ^ 
if(n.isTry()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isTypeOf_ter ^ ^ ^ ^ ^ 
if(n.isTypeOf()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isVar_ter ^ ^ ^ ^ ^ 
if(n.isVar()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isVoid_ter ^ ^ ^ ^ ^ 
if(n.isVoid()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isWhile_ter ^ ^ ^ ^ ^ 
if(n.isWhile()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isWith_ter ^ ^ ^ ^ ^ 
if(n.isWith()){

condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member getInitialValue_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && n.getFirstChild().getInitialValue())){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isVar_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && n.getFirstChild().isVar())){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member getString_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && n.getFirstChild().getString())){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member getNode_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && n.getFirstChild().getNode())){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getLastChild_ter ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && n.getLastChild().isQualifiedName())){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getNext_ter ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && n.getNext().isQualifiedName())){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getLastSibling_ter ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && n.getLastSibling().isQualifiedName())){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getParent_ter ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && n.getParent().isQualifiedName())){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member detachFromParent_ter ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && n.detachFromParent().isQualifiedName())){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member removeFirstChild_ter ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && n.removeFirstChild().isQualifiedName())){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member removeChildren_ter ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && n.removeChildren().isQualifiedName())){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member cloneNode_ter ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && n.cloneNode().isQualifiedName())){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member cloneTree_ter ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && n.cloneTree().isQualifiedName())){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member getVarIterable_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && n.getFirstChild().getVarIterable())){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && n.hasChildren())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isFromExterns_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && n.isFromExterns())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && n.hasOneChild())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && n.hasMoreThanOneChild())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && n.isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && n.isUnscopedQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && n.isVarArgs())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && n.isOptionalArg())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && n.isSyntheticBlock())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && n.wasEmptyNode())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && n.isOnlyModifiesThisCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && n.isNoSideEffectsCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && n.isLocalResultCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && n.isQuotedString())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isAdd_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && n.isAdd())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isAnd_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && n.isAnd())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isArrayLit_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && n.isArrayLit())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isAssign_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && n.isAssign())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isAssignAdd_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && n.isAssignAdd())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isBlock_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && n.isBlock())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isBreak_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && n.isBreak())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isCall_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && n.isCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isCase_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && n.isCase())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isCatch_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && n.isCatch())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isComma_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && n.isComma())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isContinue_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && n.isContinue())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isDebugger_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && n.isDebugger())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isDec_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && n.isDec())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isDefaultCase_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && n.isDefaultCase())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isDelProp_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && n.isDelProp())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isDo_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && n.isDo())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && n.isEmpty())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isExprResult_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && n.isExprResult())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isFalse_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && n.isFalse())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isFor_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && n.isFor())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isFunction_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && n.isFunction())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isGetterDef_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && n.isGetterDef())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isGetElem_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && n.isGetElem())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && n.isGetProp())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isHook_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && n.isHook())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isIf_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && n.isIf())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isIn_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && n.isIn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isInc_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && n.isInc())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isInstanceOf_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && n.isInstanceOf())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isLabel_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && n.isLabel())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isLabelName_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && n.isLabelName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && n.isName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isNE_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && n.isNE())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isNew_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && n.isNew())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isNot_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && n.isNot())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isNull_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && n.isNull())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && n.isNumber())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isObjectLit_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && n.isObjectLit())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isOr_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && n.isOr())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isParamList_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && n.isParamList())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isRegExp_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && n.isRegExp())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && n.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isScript_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && n.isScript())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isSetterDef_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && n.isSetterDef())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && n.isString())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isStringKey_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && n.isStringKey())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isSwitch_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && n.isSwitch())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isThis_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && n.isThis())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isThrow_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && n.isThrow())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isTrue_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && n.isTrue())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isTry_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && n.isTry())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isTypeOf_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && n.isTypeOf())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isVar_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && n.isVar())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isVoid_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && n.isVoid())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isWhile_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && n.isWhile())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isWith_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && n.isWith())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && n.getFirstChild().isQualifiedName())){

condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member getName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && n.getFirstChild().getName())){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member getScope_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && n.getFirstChild().getScope())){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && n.getFirstChild().isQualifiedName())){

condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member getParent_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && n.getFirstChild().getParent())){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && n.hasChildren())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isFromExterns_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && n.isFromExterns())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && n.hasOneChild())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && n.hasMoreThanOneChild())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && n.isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && n.isUnscopedQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && n.isVarArgs())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && n.isOptionalArg())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && n.isSyntheticBlock())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && n.wasEmptyNode())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && n.isOnlyModifiesThisCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && n.isNoSideEffectsCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && n.isLocalResultCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && n.isQuotedString())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isAdd_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && n.isAdd())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isAnd_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && n.isAnd())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isArrayLit_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && n.isArrayLit())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isAssign_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && n.isAssign())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isAssignAdd_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && n.isAssignAdd())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isBlock_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && n.isBlock())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isBreak_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && n.isBreak())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isCall_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && n.isCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isCase_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && n.isCase())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isCatch_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && n.isCatch())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isComma_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && n.isComma())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isContinue_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && n.isContinue())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isDebugger_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && n.isDebugger())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isDec_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && n.isDec())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isDefaultCase_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && n.isDefaultCase())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isDelProp_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && n.isDelProp())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isDo_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && n.isDo())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && n.isEmpty())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isExprResult_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && n.isExprResult())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isFalse_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && n.isFalse())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isFor_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && n.isFor())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isFunction_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && n.isFunction())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isGetterDef_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && n.isGetterDef())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isGetElem_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && n.isGetElem())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && n.isGetProp())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isHook_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && n.isHook())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isIf_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && n.isIf())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isIn_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && n.isIn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isInc_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && n.isInc())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isInstanceOf_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && n.isInstanceOf())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isLabel_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && n.isLabel())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isLabelName_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && n.isLabelName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && n.isName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isNE_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && n.isNE())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isNew_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && n.isNew())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isNot_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && n.isNot())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isNull_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && n.isNull())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && n.isNumber())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isObjectLit_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && n.isObjectLit())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isOr_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && n.isOr())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isParamList_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && n.isParamList())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isRegExp_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && n.isRegExp())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && n.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isScript_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && n.isScript())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isSetterDef_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && n.isSetterDef())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && n.isString())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isStringKey_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && n.isStringKey())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isSwitch_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && n.isSwitch())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isThis_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && n.isThis())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isThrow_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && n.isThrow())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isTrue_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && n.isTrue())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isTry_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && n.isTry())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isTypeOf_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && n.isTypeOf())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isVar_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && n.isVar())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isVoid_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && n.isVoid())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isWhile_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && n.isWhile())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isWith_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && n.isWith())){

StatementExpression expression MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
n.hasChildren();


IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isFromExterns_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isFromExterns() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasOneChild() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasMoreThanOneChild() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isQualifiedName() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isUnscopedQualifiedName() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isVarArgs() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isOptionalArg() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isSyntheticBlock() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.wasEmptyNode() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isOnlyModifiesThisCall() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isNoSideEffectsCall() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isLocalResultCall() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isQuotedString() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isAdd_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isAdd() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isAnd_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isAnd() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isArrayLit_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isArrayLit() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isAssign_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isAssign() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isAssignAdd_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isAssignAdd() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isBlock_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isBlock() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isBreak_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isBreak() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isCall() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isCase_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isCase() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isCatch_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isCatch() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isComma_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isComma() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isContinue_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isContinue() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isDebugger_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isDebugger() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isDec_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isDec() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isDefaultCase_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isDefaultCase() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isDelProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isDelProp() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isDo_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isDo() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isEmpty() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isExprResult_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isExprResult() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isFalse_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isFalse() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isFor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isFor() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isFunction_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isFunction() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetterDef_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetterDef() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetElem_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetElem() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isHook_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isHook() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isIf_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isIf() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isIn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isIn() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isInc_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isInc() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isInstanceOf_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isInstanceOf() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isLabel_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isLabel() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isLabelName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isLabelName() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isNE_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isNE() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isNew_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isNew() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isNot_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isNot() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isNull_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isNull() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isNumber_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isNumber() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isObjectLit_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isObjectLit() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isOr_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isOr() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isParamList_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isParamList() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isRegExp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isRegExp() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isReturn() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isScript_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isScript() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isSetterDef_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isSetterDef() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isString_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isString() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isStringKey_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isStringKey() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isSwitch_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isSwitch() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isThis_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isThis() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isThrow_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isThrow() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isTrue_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isTrue() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isTry_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isTry() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isTypeOf_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isTypeOf() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isVar() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isVoid_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isVoid() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isWhile_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isWhile() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isWith_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isWith() && n.getFirstChild().isQualifiedName())){

condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() || n.getFirstChild().isQualifiedName())){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && !n.hasChildren())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isFromExterns_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && !n.isFromExterns())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && !n.hasOneChild())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && !n.hasMoreThanOneChild())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && !n.isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && !n.isUnscopedQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && !n.isVarArgs())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && !n.isOptionalArg())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && !n.isSyntheticBlock())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && !n.wasEmptyNode())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && !n.isOnlyModifiesThisCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && !n.isNoSideEffectsCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && !n.isLocalResultCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && !n.isQuotedString())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isAdd_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && !n.isAdd())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isAnd_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && !n.isAnd())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isArrayLit_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && !n.isArrayLit())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isAssign_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && !n.isAssign())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isAssignAdd_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && !n.isAssignAdd())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isBlock_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && !n.isBlock())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isBreak_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && !n.isBreak())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isCall_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && !n.isCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isCase_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && !n.isCase())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isCatch_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && !n.isCatch())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isComma_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && !n.isComma())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isContinue_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && !n.isContinue())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isDebugger_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && !n.isDebugger())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isDec_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && !n.isDec())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isDefaultCase_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && !n.isDefaultCase())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isDelProp_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && !n.isDelProp())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isDo_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && !n.isDo())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && !n.isEmpty())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isExprResult_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && !n.isExprResult())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isFalse_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && !n.isFalse())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isFor_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && !n.isFor())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isFunction_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && !n.isFunction())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isGetterDef_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && !n.isGetterDef())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isGetElem_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && !n.isGetElem())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && !n.isGetProp())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isHook_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && !n.isHook())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isIf_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && !n.isIf())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isIn_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && !n.isIn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isInc_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && !n.isInc())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isInstanceOf_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && !n.isInstanceOf())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isLabel_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && !n.isLabel())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isLabelName_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && !n.isLabelName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && !n.isName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isNE_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && !n.isNE())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isNew_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && !n.isNew())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isNot_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && !n.isNot())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isNull_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && !n.isNull())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && !n.isNumber())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isObjectLit_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && !n.isObjectLit())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isOr_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && !n.isOr())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isParamList_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && !n.isParamList())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isRegExp_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && !n.isRegExp())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && !n.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isScript_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && !n.isScript())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isSetterDef_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && !n.isSetterDef())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && !n.isString())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isStringKey_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && !n.isStringKey())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isSwitch_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && !n.isSwitch())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isThis_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && !n.isThis())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isThrow_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && !n.isThrow())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isTrue_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && !n.isTrue())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isTry_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && !n.isTry())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isTypeOf_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && !n.isTypeOf())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isVar_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && !n.isVar())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isVoid_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && !n.isVoid())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isWhile_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && !n.isWhile())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isWith_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.getFirstChild().isQualifiedName()) && !n.isWith())){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
if(!n.hasChildren()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isFromExterns_ter ^ ^ ^ ^ ^ 
if(!n.isFromExterns()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ ^ 
if(!n.hasOneChild()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ ^ 
if(!n.hasMoreThanOneChild()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ ^ 
if(!n.isQualifiedName()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ ^ 
if(!n.isUnscopedQualifiedName()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ ^ 
if(!n.isVarArgs()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ ^ 
if(!n.isOptionalArg()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ ^ 
if(!n.isSyntheticBlock()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ ^ 
if(!n.wasEmptyNode()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ ^ 
if(!n.isOnlyModifiesThisCall()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ ^ 
if(!n.isNoSideEffectsCall()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ ^ 
if(!n.isLocalResultCall()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ ^ 
if(!n.isQuotedString()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isAdd_ter ^ ^ ^ ^ ^ 
if(!n.isAdd()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isAnd_ter ^ ^ ^ ^ ^ 
if(!n.isAnd()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isArrayLit_ter ^ ^ ^ ^ ^ 
if(!n.isArrayLit()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isAssign_ter ^ ^ ^ ^ ^ 
if(!n.isAssign()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isAssignAdd_ter ^ ^ ^ ^ ^ 
if(!n.isAssignAdd()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isBlock_ter ^ ^ ^ ^ ^ 
if(!n.isBlock()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isBreak_ter ^ ^ ^ ^ ^ 
if(!n.isBreak()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isCall_ter ^ ^ ^ ^ ^ 
if(!n.isCall()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isCase_ter ^ ^ ^ ^ ^ 
if(!n.isCase()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isCatch_ter ^ ^ ^ ^ ^ 
if(!n.isCatch()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isComma_ter ^ ^ ^ ^ ^ 
if(!n.isComma()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isContinue_ter ^ ^ ^ ^ ^ 
if(!n.isContinue()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isDebugger_ter ^ ^ ^ ^ ^ 
if(!n.isDebugger()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isDec_ter ^ ^ ^ ^ ^ 
if(!n.isDec()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isDefaultCase_ter ^ ^ ^ ^ ^ 
if(!n.isDefaultCase()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isDelProp_ter ^ ^ ^ ^ ^ 
if(!n.isDelProp()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isDo_ter ^ ^ ^ ^ ^ 
if(!n.isDo()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ ^ 
if(!n.isEmpty()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isExprResult_ter ^ ^ ^ ^ ^ 
if(!n.isExprResult()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isFalse_ter ^ ^ ^ ^ ^ 
if(!n.isFalse()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isFor_ter ^ ^ ^ ^ ^ 
if(!n.isFor()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isFunction_ter ^ ^ ^ ^ ^ 
if(!n.isFunction()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isGetterDef_ter ^ ^ ^ ^ ^ 
if(!n.isGetterDef()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isGetElem_ter ^ ^ ^ ^ ^ 
if(!n.isGetElem()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ ^ 
if(!n.isGetProp()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isHook_ter ^ ^ ^ ^ ^ 
if(!n.isHook()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isIf_ter ^ ^ ^ ^ ^ 
if(!n.isIf()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isIn_ter ^ ^ ^ ^ ^ 
if(!n.isIn()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isInc_ter ^ ^ ^ ^ ^ 
if(!n.isInc()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isInstanceOf_ter ^ ^ ^ ^ ^ 
if(!n.isInstanceOf()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isLabel_ter ^ ^ ^ ^ ^ 
if(!n.isLabel()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isLabelName_ter ^ ^ ^ ^ ^ 
if(!n.isLabelName()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ ^ 
if(!n.isName()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isNE_ter ^ ^ ^ ^ ^ 
if(!n.isNE()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isNew_ter ^ ^ ^ ^ ^ 
if(!n.isNew()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isNot_ter ^ ^ ^ ^ ^ 
if(!n.isNot()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isNull_ter ^ ^ ^ ^ ^ 
if(!n.isNull()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ 
if(!n.isNumber()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isObjectLit_ter ^ ^ ^ ^ ^ 
if(!n.isObjectLit()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isOr_ter ^ ^ ^ ^ ^ 
if(!n.isOr()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isParamList_ter ^ ^ ^ ^ ^ 
if(!n.isParamList()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isRegExp_ter ^ ^ ^ ^ ^ 
if(!n.isRegExp()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ 
if(!n.isReturn()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isScript_ter ^ ^ ^ ^ ^ 
if(!n.isScript()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isSetterDef_ter ^ ^ ^ ^ ^ 
if(!n.isSetterDef()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ 
if(!n.isString()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isStringKey_ter ^ ^ ^ ^ ^ 
if(!n.isStringKey()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isSwitch_ter ^ ^ ^ ^ ^ 
if(!n.isSwitch()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isThis_ter ^ ^ ^ ^ ^ 
if(!n.isThis()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isThrow_ter ^ ^ ^ ^ ^ 
if(!n.isThrow()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isTrue_ter ^ ^ ^ ^ ^ 
if(!n.isTrue()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isTry_ter ^ ^ ^ ^ ^ 
if(!n.isTry()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isTypeOf_ter ^ ^ ^ ^ ^ 
if(!n.isTypeOf()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isVar_ter ^ ^ ^ ^ ^ 
if(!n.isVar()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isVoid_ter ^ ^ ^ ^ ^ 
if(!n.isVoid()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isWhile_ter ^ ^ ^ ^ ^ 
if(!n.isWhile()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isWith_ter ^ ^ ^ ^ ^ 
if(!n.isWith()){

condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ 
if((n.getString() && n.getFirstChild().isQualifiedName())){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getInitialValue_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ 
if((n.getInitialValue() && n.getFirstChild().isQualifiedName())){
ReturnStatement_ter ^ 
if (true) { return;
 }

condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier type_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ 
if((type.hasChildren() && n.getFirstChild().isQualifiedName())){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getQualifiedName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ 
if((n.getQualifiedName() && n.getFirstChild().isQualifiedName())){
IfStatement condition MemberReference member n_ter ^ ^ ^ ^ ^ 
if(n){

IfStatement condition MemberReference member GOOG_SCOPE_NON_ALIAS_LOCAL_ter ^ ^ ^ ^ ^ 
if(GOOG_SCOPE_NON_ALIAS_LOCAL){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.getFirstChild().isQualifiedName() && n.getFirstChild().isQualifiedName())){

condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getNode_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ 
if((n.getNode() && n.getFirstChild().isQualifiedName())){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getVarIterable_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ 
if((n.getVarIterable() && n.getFirstChild().isQualifiedName())){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && !n.hasChildren())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isFromExterns_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && !n.isFromExterns())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && !n.hasOneChild())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && !n.hasMoreThanOneChild())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && !n.isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && !n.isUnscopedQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && !n.isVarArgs())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && !n.isOptionalArg())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && !n.isSyntheticBlock())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && !n.wasEmptyNode())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && !n.isOnlyModifiesThisCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && !n.isNoSideEffectsCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && !n.isLocalResultCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && !n.isQuotedString())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isAdd_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && !n.isAdd())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isAnd_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && !n.isAnd())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isArrayLit_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && !n.isArrayLit())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isAssign_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && !n.isAssign())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isAssignAdd_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && !n.isAssignAdd())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isBlock_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && !n.isBlock())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isBreak_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && !n.isBreak())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isCall_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && !n.isCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isCase_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && !n.isCase())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isCatch_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && !n.isCatch())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isComma_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && !n.isComma())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isContinue_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && !n.isContinue())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isDebugger_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && !n.isDebugger())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isDec_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && !n.isDec())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isDefaultCase_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && !n.isDefaultCase())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isDelProp_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && !n.isDelProp())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isDo_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && !n.isDo())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && !n.isEmpty())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isExprResult_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && !n.isExprResult())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isFalse_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && !n.isFalse())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isFor_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && !n.isFor())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isFunction_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && !n.isFunction())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isGetterDef_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && !n.isGetterDef())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isGetElem_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && !n.isGetElem())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && !n.isGetProp())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isHook_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && !n.isHook())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isIf_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && !n.isIf())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isIn_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && !n.isIn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isInc_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && !n.isInc())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isInstanceOf_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && !n.isInstanceOf())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isLabel_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && !n.isLabel())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isLabelName_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && !n.isLabelName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && !n.isName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isNE_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && !n.isNE())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isNew_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && !n.isNew())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isNot_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && !n.isNot())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isNull_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && !n.isNull())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && !n.isNumber())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isObjectLit_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && !n.isObjectLit())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isOr_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && !n.isOr())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isParamList_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && !n.isParamList())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isRegExp_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && !n.isRegExp())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && !n.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isScript_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && !n.isScript())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isSetterDef_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && !n.isSetterDef())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && !n.isString())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isStringKey_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && !n.isStringKey())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isSwitch_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && !n.isSwitch())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isThis_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && !n.isThis())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isThrow_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && !n.isThrow())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isTrue_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && !n.isTrue())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isTry_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && !n.isTry())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isTypeOf_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && !n.isTypeOf())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isVar_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && !n.isVar())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isVoid_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && !n.isVoid())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isWhile_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && !n.isWhile())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isWith_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && !n.isWith())){

condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ 
if((n.getName() && n.getFirstChild().isQualifiedName())){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && n.getFirstChild())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && (n.hasChildren() && n.getFirstChild().isQualifiedName()))){

StatementExpression expression MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ 
n.getFirstChild().isQualifiedName();


IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((!n.hasChildren() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isFromExterns_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((!n.isFromExterns() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((!n.hasOneChild() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((!n.hasMoreThanOneChild() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((!n.isQualifiedName() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((!n.isUnscopedQualifiedName() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((!n.isVarArgs() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((!n.isOptionalArg() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((!n.isSyntheticBlock() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((!n.wasEmptyNode() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((!n.isOnlyModifiesThisCall() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((!n.isNoSideEffectsCall() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((!n.isLocalResultCall() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((!n.isQuotedString() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isAdd_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((!n.isAdd() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isAnd_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((!n.isAnd() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isArrayLit_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((!n.isArrayLit() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isAssign_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((!n.isAssign() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isAssignAdd_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((!n.isAssignAdd() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isBlock_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((!n.isBlock() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isBreak_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((!n.isBreak() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((!n.isCall() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isCase_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((!n.isCase() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isCatch_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((!n.isCatch() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isComma_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((!n.isComma() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isContinue_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((!n.isContinue() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isDebugger_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((!n.isDebugger() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isDec_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((!n.isDec() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isDefaultCase_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((!n.isDefaultCase() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isDelProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((!n.isDelProp() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isDo_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((!n.isDo() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((!n.isEmpty() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isExprResult_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((!n.isExprResult() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isFalse_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((!n.isFalse() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isFor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((!n.isFor() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isFunction_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((!n.isFunction() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isGetterDef_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((!n.isGetterDef() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isGetElem_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((!n.isGetElem() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((!n.isGetProp() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isHook_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((!n.isHook() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isIf_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((!n.isIf() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isIn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((!n.isIn() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isInc_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((!n.isInc() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isInstanceOf_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((!n.isInstanceOf() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isLabel_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((!n.isLabel() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isLabelName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((!n.isLabelName() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((!n.isName() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isNE_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((!n.isNE() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isNew_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((!n.isNew() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isNot_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((!n.isNot() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isNull_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((!n.isNull() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isNumber_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((!n.isNumber() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isObjectLit_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((!n.isObjectLit() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isOr_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((!n.isOr() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isParamList_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((!n.isParamList() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isRegExp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((!n.isRegExp() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((!n.isReturn() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isScript_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((!n.isScript() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isSetterDef_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((!n.isSetterDef() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isString_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((!n.isString() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isStringKey_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((!n.isStringKey() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isSwitch_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((!n.isSwitch() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isThis_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((!n.isThis() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isThrow_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((!n.isThrow() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isTrue_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((!n.isTrue() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isTry_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((!n.isTry() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isTypeOf_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((!n.isTypeOf() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((!n.isVar() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isVoid_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((!n.isVoid() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isWhile_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((!n.isWhile() && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isWith_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((!n.isWith() && n.getFirstChild().isQualifiedName())){

condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getParent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ 
if((n.getParent() && n.getFirstChild().isQualifiedName())){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getString_ter ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && n.getString().isQualifiedName())){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.hasChildren()) && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isFromExterns_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.isFromExterns()) && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.hasOneChild()) && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.hasMoreThanOneChild()) && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.isQualifiedName()) && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.isUnscopedQualifiedName()) && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.isVarArgs()) && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.isOptionalArg()) && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.isSyntheticBlock()) && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.wasEmptyNode()) && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.isOnlyModifiesThisCall()) && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.isNoSideEffectsCall()) && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.isLocalResultCall()) && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.isQuotedString()) && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isAdd_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.isAdd()) && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isAnd_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.isAnd()) && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isArrayLit_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.isArrayLit()) && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isAssign_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.isAssign()) && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isAssignAdd_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.isAssignAdd()) && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isBlock_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.isBlock()) && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isBreak_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.isBreak()) && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isCall_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.isCall()) && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isCase_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.isCase()) && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isCatch_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.isCatch()) && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isComma_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.isComma()) && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isContinue_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.isContinue()) && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isDebugger_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.isDebugger()) && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isDec_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.isDec()) && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isDefaultCase_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.isDefaultCase()) && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isDelProp_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.isDelProp()) && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isDo_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.isDo()) && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.isEmpty()) && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isExprResult_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.isExprResult()) && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isFalse_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.isFalse()) && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isFor_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.isFor()) && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isFunction_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.isFunction()) && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isGetterDef_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.isGetterDef()) && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isGetElem_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.isGetElem()) && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.isGetProp()) && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isHook_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.isHook()) && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isIf_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.isIf()) && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isIn_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.isIn()) && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isInc_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.isInc()) && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isInstanceOf_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.isInstanceOf()) && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isLabel_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.isLabel()) && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isLabelName_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.isLabelName()) && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.isName()) && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isNE_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.isNE()) && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isNew_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.isNew()) && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isNot_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.isNot()) && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isNull_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.isNull()) && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.isNumber()) && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isObjectLit_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.isObjectLit()) && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isOr_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.isOr()) && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isParamList_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.isParamList()) && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isRegExp_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.isRegExp()) && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.isReturn()) && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isScript_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.isScript()) && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isSetterDef_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.isSetterDef()) && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.isString()) && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isStringKey_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.isStringKey()) && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isSwitch_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.isSwitch()) && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isThis_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.isThis()) && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isThrow_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.isThrow()) && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isTrue_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.isTrue()) && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isTry_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.isTry()) && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isTypeOf_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.isTypeOf()) && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isVar_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.isVar()) && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isVoid_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.isVoid()) && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isWhile_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.isWhile()) && n.getFirstChild().isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isWith_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.hasChildren() && n.isWith()) && n.getFirstChild().isQualifiedName())){

StatementExpression expression MethodInvocation qualifier aliases_ter ^ ^ arguments MemberReference member name_ter ^ ^ ^ MemberReference member aliasVar_ter ^ ^ ^ ^ member put_ter ^ ^ ^ ^ ^ 
aliases.put(name, aliasVar);

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isFromExterns_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((n.isFromExterns() && (n.hasChildren() && n.getFirstChild().isQualifiedName()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((n.hasOneChild() && (n.hasChildren() && n.getFirstChild().isQualifiedName()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((n.hasMoreThanOneChild() && (n.hasChildren() && n.getFirstChild().isQualifiedName()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((n.isQualifiedName() && (n.hasChildren() && n.getFirstChild().isQualifiedName()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((n.isUnscopedQualifiedName() && (n.hasChildren() && n.getFirstChild().isQualifiedName()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((n.isVarArgs() && (n.hasChildren() && n.getFirstChild().isQualifiedName()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((n.isOptionalArg() && (n.hasChildren() && n.getFirstChild().isQualifiedName()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((n.isSyntheticBlock() && (n.hasChildren() && n.getFirstChild().isQualifiedName()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((n.wasEmptyNode() && (n.hasChildren() && n.getFirstChild().isQualifiedName()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((n.isOnlyModifiesThisCall() && (n.hasChildren() && n.getFirstChild().isQualifiedName()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((n.isNoSideEffectsCall() && (n.hasChildren() && n.getFirstChild().isQualifiedName()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((n.isLocalResultCall() && (n.hasChildren() && n.getFirstChild().isQualifiedName()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((n.isQuotedString() && (n.hasChildren() && n.getFirstChild().isQualifiedName()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isAdd_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((n.isAdd() && (n.hasChildren() && n.getFirstChild().isQualifiedName()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isAnd_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((n.isAnd() && (n.hasChildren() && n.getFirstChild().isQualifiedName()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isArrayLit_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((n.isArrayLit() && (n.hasChildren() && n.getFirstChild().isQualifiedName()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isAssign_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((n.isAssign() && (n.hasChildren() && n.getFirstChild().isQualifiedName()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isAssignAdd_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((n.isAssignAdd() && (n.hasChildren() && n.getFirstChild().isQualifiedName()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isBlock_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((n.isBlock() && (n.hasChildren() && n.getFirstChild().isQualifiedName()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isBreak_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((n.isBreak() && (n.hasChildren() && n.getFirstChild().isQualifiedName()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((n.isCall() && (n.hasChildren() && n.getFirstChild().isQualifiedName()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isCase_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((n.isCase() && (n.hasChildren() && n.getFirstChild().isQualifiedName()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isCatch_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((n.isCatch() && (n.hasChildren() && n.getFirstChild().isQualifiedName()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isComma_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((n.isComma() && (n.hasChildren() && n.getFirstChild().isQualifiedName()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isContinue_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((n.isContinue() && (n.hasChildren() && n.getFirstChild().isQualifiedName()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isDebugger_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((n.isDebugger() && (n.hasChildren() && n.getFirstChild().isQualifiedName()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isDec_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((n.isDec() && (n.hasChildren() && n.getFirstChild().isQualifiedName()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isDefaultCase_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((n.isDefaultCase() && (n.hasChildren() && n.getFirstChild().isQualifiedName()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isDelProp_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((n.isDelProp() && (n.hasChildren() && n.getFirstChild().isQualifiedName()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isDo_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((n.isDo() && (n.hasChildren() && n.getFirstChild().isQualifiedName()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((n.isEmpty() && (n.hasChildren() && n.getFirstChild().isQualifiedName()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isExprResult_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((n.isExprResult() && (n.hasChildren() && n.getFirstChild().isQualifiedName()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isFalse_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((n.isFalse() && (n.hasChildren() && n.getFirstChild().isQualifiedName()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isFor_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((n.isFor() && (n.hasChildren() && n.getFirstChild().isQualifiedName()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isFunction_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((n.isFunction() && (n.hasChildren() && n.getFirstChild().isQualifiedName()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetterDef_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetterDef() && (n.hasChildren() && n.getFirstChild().isQualifiedName()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetElem_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetElem() && (n.hasChildren() && n.getFirstChild().isQualifiedName()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && (n.hasChildren() && n.getFirstChild().isQualifiedName()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isHook_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((n.isHook() && (n.hasChildren() && n.getFirstChild().isQualifiedName()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isIf_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((n.isIf() && (n.hasChildren() && n.getFirstChild().isQualifiedName()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isIn_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((n.isIn() && (n.hasChildren() && n.getFirstChild().isQualifiedName()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isInc_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((n.isInc() && (n.hasChildren() && n.getFirstChild().isQualifiedName()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isInstanceOf_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((n.isInstanceOf() && (n.hasChildren() && n.getFirstChild().isQualifiedName()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isLabel_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((n.isLabel() && (n.hasChildren() && n.getFirstChild().isQualifiedName()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isLabelName_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((n.isLabelName() && (n.hasChildren() && n.getFirstChild().isQualifiedName()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && (n.hasChildren() && n.getFirstChild().isQualifiedName()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isNE_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((n.isNE() && (n.hasChildren() && n.getFirstChild().isQualifiedName()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isNew_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((n.isNew() && (n.hasChildren() && n.getFirstChild().isQualifiedName()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isNot_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((n.isNot() && (n.hasChildren() && n.getFirstChild().isQualifiedName()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isNull_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((n.isNull() && (n.hasChildren() && n.getFirstChild().isQualifiedName()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isNumber_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((n.isNumber() && (n.hasChildren() && n.getFirstChild().isQualifiedName()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isObjectLit_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((n.isObjectLit() && (n.hasChildren() && n.getFirstChild().isQualifiedName()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isOr_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((n.isOr() && (n.hasChildren() && n.getFirstChild().isQualifiedName()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isParamList_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((n.isParamList() && (n.hasChildren() && n.getFirstChild().isQualifiedName()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isRegExp_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((n.isRegExp() && (n.hasChildren() && n.getFirstChild().isQualifiedName()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((n.isReturn() && (n.hasChildren() && n.getFirstChild().isQualifiedName()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isScript_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((n.isScript() && (n.hasChildren() && n.getFirstChild().isQualifiedName()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isSetterDef_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((n.isSetterDef() && (n.hasChildren() && n.getFirstChild().isQualifiedName()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isString_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((n.isString() && (n.hasChildren() && n.getFirstChild().isQualifiedName()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isStringKey_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((n.isStringKey() && (n.hasChildren() && n.getFirstChild().isQualifiedName()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isSwitch_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((n.isSwitch() && (n.hasChildren() && n.getFirstChild().isQualifiedName()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isThis_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((n.isThis() && (n.hasChildren() && n.getFirstChild().isQualifiedName()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isThrow_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((n.isThrow() && (n.hasChildren() && n.getFirstChild().isQualifiedName()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isTrue_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((n.isTrue() && (n.hasChildren() && n.getFirstChild().isQualifiedName()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isTry_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((n.isTry() && (n.hasChildren() && n.getFirstChild().isQualifiedName()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isTypeOf_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((n.isTypeOf() && (n.hasChildren() && n.getFirstChild().isQualifiedName()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((n.isVar() && (n.hasChildren() && n.getFirstChild().isQualifiedName()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isVoid_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((n.isVoid() && (n.hasChildren() && n.getFirstChild().isQualifiedName()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isWhile_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((n.isWhile() && (n.hasChildren() && n.getFirstChild().isQualifiedName()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isWith_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((n.isWith() && (n.hasChildren() && n.getFirstChild().isQualifiedName()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && !n.getFirstChild())){

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((n != null)){

condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isQualifiedName_ter ^ ^ ^ ^ member getInitialValue_ter ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && n.getInitialValue().isQualifiedName())){
StatementExpression expression MethodInvocation arguments MemberReference member t_ter ^ ^ ^ MemberReference member n_ter ^ ^ ^ MemberReference member GOOG_SCOPE_NON_ALIAS_LOCAL_ter ^ ^ ^ MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ ^ member report_ter ^ ^ ^ ^ ^ 
report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());

StatementExpression expression MethodInvocation arguments MemberReference member t_ter ^ ^ ^ MemberReference member n_ter ^ ^ ^ MemberReference member GOOG_SCOPE_NON_ALIAS_LOCAL_ter ^ ^ ^ MethodInvocation qualifier n_ter ^ ^ member toString_ter ^ ^ ^ ^ member report_ter ^ ^ ^ ^ ^ 
report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.toString());

StatementExpression expression MethodInvocation arguments MemberReference member t_ter ^ ^ ^ MemberReference member n_ter ^ ^ ^ MemberReference member GOOG_SCOPE_NON_ALIAS_LOCAL_ter ^ ^ ^ MethodInvocation qualifier n_ter ^ ^ member toStringTree_ter ^ ^ ^ ^ member report_ter ^ ^ ^ ^ ^ 
report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.toStringTree());

StatementExpression expression MethodInvocation arguments MemberReference member t_ter ^ ^ ^ MemberReference member n_ter ^ ^ ^ MemberReference member GOOG_SCOPE_NON_ALIAS_LOCAL_ter ^ ^ ^ MethodInvocation qualifier n_ter ^ ^ member toStringTreeImpl_ter ^ ^ ^ ^ member report_ter ^ ^ ^ ^ ^ 
report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.toStringTreeImpl());

StatementExpression expression MethodInvocation arguments MemberReference member t_ter ^ ^ ^ MemberReference member n_ter ^ ^ ^ MemberReference member GOOG_SCOPE_NON_ALIAS_LOCAL_ter ^ ^ ^ MethodInvocation qualifier n_ter ^ ^ member getSourceFileName_ter ^ ^ ^ ^ member report_ter ^ ^ ^ ^ ^ 
report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getSourceFileName());

StatementExpression expression MethodInvocation arguments MemberReference member t_ter ^ ^ ^ MemberReference member n_ter ^ ^ ^ MemberReference member GOOG_SCOPE_NON_ALIAS_LOCAL_ter ^ ^ ^ MethodInvocation qualifier n_ter ^ ^ member getQualifiedName_ter ^ ^ ^ ^ member report_ter ^ ^ ^ ^ ^ 
report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getQualifiedName());

StatementExpression expression MethodInvocation arguments MemberReference member t_ter ^ ^ ^ MemberReference member n_ter ^ ^ ^ MemberReference member GOOG_SCOPE_USED_IMPROPERLY_ter ^ ^ ^ MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ ^ member report_ter ^ ^ ^ ^ ^ 
report(t, n, GOOG_SCOPE_USED_IMPROPERLY, n.getString());

StatementExpression expression MethodInvocation arguments MemberReference member t_ter ^ ^ ^ MemberReference member n_ter ^ ^ ^ MemberReference member GOOG_SCOPE_HAS_BAD_PARAMETERS_ter ^ ^ ^ MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ ^ member report_ter ^ ^ ^ ^ ^ 
report(t, n, GOOG_SCOPE_HAS_BAD_PARAMETERS, n.getString());

StatementExpression expression MethodInvocation arguments MemberReference member t_ter ^ ^ ^ MemberReference member n_ter ^ ^ ^ MemberReference member GOOG_SCOPE_REFERENCES_THIS_ter ^ ^ ^ MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ ^ member report_ter ^ ^ ^ ^ ^ 
report(t, n, GOOG_SCOPE_REFERENCES_THIS, n.getString());

StatementExpression expression MethodInvocation arguments MemberReference member t_ter ^ ^ ^ MemberReference member n_ter ^ ^ ^ MemberReference member GOOG_SCOPE_USES_RETURN_ter ^ ^ ^ MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ ^ member report_ter ^ ^ ^ ^ ^ 
report(t, n, GOOG_SCOPE_USES_RETURN, n.getString());

StatementExpression expression MethodInvocation arguments MemberReference member t_ter ^ ^ ^ MemberReference member n_ter ^ ^ ^ MemberReference member GOOG_SCOPE_USES_THROW_ter ^ ^ ^ MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ ^ member report_ter ^ ^ ^ ^ ^ 
report(t, n, GOOG_SCOPE_USES_THROW, n.getString());

StatementExpression expression MethodInvocation arguments MemberReference member t_ter ^ ^ ^ MemberReference member n_ter ^ ^ ^ MemberReference member GOOG_SCOPE_ALIAS_REDEFINED_ter ^ ^ ^ MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ ^ member report_ter ^ ^ ^ ^ ^ 
report(t, n, GOOG_SCOPE_ALIAS_REDEFINED, n.getString());

ReturnStatement_ter ^ 
if (true) { return;
 }

StatementExpression expression MethodInvocation arguments MemberReference member t_ter ^ ^ ^ MemberReference member n_ter ^ ^ ^ MemberReference member type_ter ^ ^ ^ MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ ^ member report_ter ^ ^ ^ ^ ^ 
report(t, n, type, n.getString());

BreakStatement_ter ^ 
break;

StatementExpression expression MethodInvocation arguments MemberReference member t_ter ^ ^ ^ MemberReference member n_ter ^ ^ ^ MemberReference member GOOG_SCOPE_NON_ALIAS_LOCAL_ter ^ ^ ^ MethodInvocation qualifier type_ter ^ ^ member getString_ter ^ ^ ^ ^ member report_ter ^ ^ ^ ^ ^ 
report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, type.getString());

StatementExpression expression MethodInvocation arguments MemberReference member t_ter ^ ^ ^ MemberReference member n_ter ^ ^ ^ MemberReference member par1 ^ ^ ^ MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ ^ member report_ter ^ ^ ^ ^ ^ 
report(t, n, , n.getString());


StatementExpression expression MethodInvocation arguments MemberReference member t_ter ^ ^ ^ MemberReference member n_ter ^ ^ ^ MemberReference member n_ter ^ ^ ^ MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ ^ member report_ter ^ ^ ^ ^ ^ 
report(t, n, n, n.getString());

StatementExpression expression MethodInvocation arguments MemberReference member t_ter ^ ^ ^ MemberReference member n_ter ^ ^ ^ MemberReference member GOOG_SCOPE_NON_ALIAS_LOCAL_ter ^ ^ ^ MethodInvocation qualifier n_ter ^ ^ member getInitialValue_ter ^ ^ ^ ^ member report_ter ^ ^ ^ ^ ^ 
report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getInitialValue());

StatementExpression expression MethodInvocation arguments MemberReference member t_ter ^ ^ ^ MemberReference member n_ter ^ ^ ^ MemberReference member GOOG_SCOPE_NON_ALIAS_LOCAL_ter ^ ^ ^ MethodInvocation qualifier n_ter ^ ^ member getName_ter ^ ^ ^ ^ member report_ter ^ ^ ^ ^ ^ 
report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getName());

StatementExpression expression MethodInvocation arguments MemberReference member type_ter ^ ^ ^ MemberReference member n_ter ^ ^ ^ MemberReference member GOOG_SCOPE_NON_ALIAS_LOCAL_ter ^ ^ ^ MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ ^ member report_ter ^ ^ ^ ^ ^ 
report(type, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());

StatementExpression expression MethodInvocation arguments MemberReference member t_ter ^ ^ ^ MemberReference member n_ter ^ ^ ^ MemberReference member scope_ter ^ ^ ^ MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ ^ member report_ter ^ ^ ^ ^ ^ 
report(t, n, scope, n.getString());

StatementExpression expression MethodInvocation arguments MemberReference member t_ter ^ ^ ^ MemberReference member n_ter ^ ^ ^ MemberReference member GOOG_SCOPE_NON_ALIAS_LOCAL_ter ^ ^ ^ MethodInvocation qualifier n_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ member report_ter ^ ^ ^ ^ ^ 
report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.isQualifiedName());

StatementExpression expression MethodInvocation arguments MemberReference member t_ter ^ ^ ^ MemberReference member type_ter ^ ^ ^ MemberReference member GOOG_SCOPE_NON_ALIAS_LOCAL_ter ^ ^ ^ MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ ^ member report_ter ^ ^ ^ ^ ^ 
report(t, type, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());

StatementExpression expression MethodInvocation arguments MemberReference member t_ter ^ ^ ^ MemberReference member n_ter ^ ^ ^ MemberReference member GOOG_SCOPE_NON_ALIAS_LOCAL_ter ^ ^ ^ MethodInvocation qualifier transformation_ter ^ ^ member getString_ter ^ ^ ^ ^ member report_ter ^ ^ ^ ^ ^ 
report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, transformation.getString());

StatementExpression expression MethodInvocation arguments MemberReference member t_ter ^ ^ ^ MemberReference member n_ter ^ ^ ^ MemberReference member par2 ^ ^ ^ MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ ^ member report_ter ^ ^ ^ ^ ^ 
report(t, n, , n.getString());


StatementExpression expression MethodInvocation arguments MemberReference member t_ter ^ ^ ^ MemberReference member n_ter ^ ^ ^ MemberReference qualifier GOOG_SCOPE_USED_IMPROPERLY_ter ^ ^ member GOOG_SCOPE_NON_ALIAS_LOCAL_ter ^ ^ ^ MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ ^ member report_ter ^ ^ ^ ^ ^ 
report(t, n, GOOG_SCOPE_USED_IMPROPERLY.GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());

StatementExpression expression MethodInvocation arguments MemberReference member t_ter ^ ^ ^ MemberReference member n_ter ^ ^ ^ MemberReference qualifier GOOG_SCOPE_HAS_BAD_PARAMETERS_ter ^ ^ member GOOG_SCOPE_NON_ALIAS_LOCAL_ter ^ ^ ^ MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ ^ member report_ter ^ ^ ^ ^ ^ 
report(t, n, GOOG_SCOPE_HAS_BAD_PARAMETERS.GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());

StatementExpression expression MethodInvocation arguments MemberReference member t_ter ^ ^ ^ MemberReference member n_ter ^ ^ ^ MemberReference qualifier GOOG_SCOPE_REFERENCES_THIS_ter ^ ^ member GOOG_SCOPE_NON_ALIAS_LOCAL_ter ^ ^ ^ MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ ^ member report_ter ^ ^ ^ ^ ^ 
report(t, n, GOOG_SCOPE_REFERENCES_THIS.GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());

StatementExpression expression MethodInvocation arguments MemberReference member t_ter ^ ^ ^ MemberReference member n_ter ^ ^ ^ MemberReference qualifier GOOG_SCOPE_USES_RETURN_ter ^ ^ member GOOG_SCOPE_NON_ALIAS_LOCAL_ter ^ ^ ^ MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ ^ member report_ter ^ ^ ^ ^ ^ 
report(t, n, GOOG_SCOPE_USES_RETURN.GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());

StatementExpression expression MethodInvocation arguments MemberReference member t_ter ^ ^ ^ MemberReference member n_ter ^ ^ ^ MemberReference qualifier GOOG_SCOPE_USES_THROW_ter ^ ^ member GOOG_SCOPE_NON_ALIAS_LOCAL_ter ^ ^ ^ MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ ^ member report_ter ^ ^ ^ ^ ^ 
report(t, n, GOOG_SCOPE_USES_THROW.GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());

StatementExpression expression MethodInvocation arguments MemberReference member t_ter ^ ^ ^ MemberReference member n_ter ^ ^ ^ MemberReference qualifier GOOG_SCOPE_ALIAS_REDEFINED_ter ^ ^ member GOOG_SCOPE_NON_ALIAS_LOCAL_ter ^ ^ ^ MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ ^ member report_ter ^ ^ ^ ^ ^ 
report(t, n, GOOG_SCOPE_ALIAS_REDEFINED.GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());

StatementExpression expression MethodInvocation arguments MemberReference member t_ter ^ ^ ^ MemberReference member n_ter ^ ^ ^ MemberReference qualifier GOOG_SCOPE_NON_ALIAS_LOCAL_ter ^ ^ member GOOG_SCOPE_NON_ALIAS_LOCAL_ter ^ ^ ^ MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ ^ member report_ter ^ ^ ^ ^ ^ 
report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL.GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());

StatementExpression expression MethodInvocation arguments MemberReference member t_ter ^ ^ ^ MemberReference member n_ter ^ ^ ^ MemberReference member GOOG_SCOPE_NON_ALIAS_LOCAL_ter ^ ^ ^ MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ member report_ter ^ ^ ^ ^ ^ 
report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.hasChildren());

StatementExpression expression MethodInvocation arguments MemberReference member t_ter ^ ^ ^ MemberReference member n_ter ^ ^ ^ MemberReference member GOOG_SCOPE_NON_ALIAS_LOCAL_ter ^ ^ ^ MethodInvocation qualifier n_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ member report_ter ^ ^ ^ ^ ^ 
report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getFirstChild());

StatementExpression expression MethodInvocation arguments MemberReference member t_ter ^ ^ ^ MemberReference member n_ter ^ ^ ^ MemberReference member parent_ter ^ ^ ^ MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ ^ member report_ter ^ ^ ^ ^ ^ 
report(t, n, parent, n.getString());

StatementExpression expression MethodInvocation arguments MemberReference member par1 ^ ^ ^ MemberReference member n_ter ^ ^ ^ MemberReference member GOOG_SCOPE_NON_ALIAS_LOCAL_ter ^ ^ ^ MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ ^ member report_ter ^ ^ ^ ^ ^ 
report(, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());


StatementExpression expression MethodInvocation arguments MemberReference member t_ter ^ ^ ^ MemberReference member n_ter ^ ^ ^ MemberReference member v_ter ^ ^ ^ MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ ^ member report_ter ^ ^ ^ ^ ^ 
report(t, n, v, n.getString());

StatementExpression expression MethodInvocation arguments MemberReference member t_ter ^ ^ ^ MemberReference member par1 ^ ^ ^ MemberReference member GOOG_SCOPE_NON_ALIAS_LOCAL_ter ^ ^ ^ MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ ^ member report_ter ^ ^ ^ ^ ^ 
report(t, , GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());


StatementExpression expression MethodInvocation arguments MemberReference member t_ter ^ ^ ^ MemberReference member n_ter ^ ^ ^ MemberReference member aliasVar_ter ^ ^ ^ MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ ^ member report_ter ^ ^ ^ ^ ^ 
report(t, n, aliasVar, n.getString());

StatementExpression expression MethodInvocation arguments MemberReference member t_ter ^ ^ ^ MemberReference member n_ter ^ ^ ^ MemberReference member GOOG_SCOPE_NON_ALIAS_LOCAL_ter ^ ^ ^ MethodInvocation qualifier n_ter ^ ^ member isVar_ter ^ ^ ^ ^ member report_ter ^ ^ ^ ^ ^ 
report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.isVar());

StatementExpression expression MethodInvocation qualifier aliases_ter ^ ^ arguments MemberReference member name_ter ^ ^ ^ MemberReference member aliasVar_ter ^ ^ ^ ^ member put_ter ^ ^ ^ ^ ^ 
aliases.put(name, aliasVar);

StatementExpression expression MethodInvocation arguments MemberReference member t_ter ^ ^ ^ MemberReference member n_ter ^ ^ ^ MemberReference member GOOG_SCOPE_NON_ALIAS_LOCAL_ter ^ ^ ^ MethodInvocation qualifier scope_ter ^ ^ member getString_ter ^ ^ ^ ^ member report_ter ^ ^ ^ ^ ^ 
report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, scope.getString());

StatementExpression expression MethodInvocation arguments MemberReference member t_ter ^ ^ ^ MemberReference member n_ter ^ ^ ^ MemberReference member t_ter ^ ^ ^ MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ ^ member report_ter ^ ^ ^ ^ ^ 
report(t, n, t, n.getString());

StatementExpression expression MethodInvocation arguments MemberReference member n_ter ^ ^ ^ MemberReference member n_ter ^ ^ ^ MemberReference member GOOG_SCOPE_NON_ALIAS_LOCAL_ter ^ ^ ^ MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ ^ member report_ter ^ ^ ^ ^ ^ 
report(n, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());

StatementExpression expression MethodInvocation arguments MemberReference member t_ter ^ ^ ^ MemberReference member n_ter ^ ^ ^ MemberReference member GOOG_SCOPE_NON_ALIAS_LOCAL_ter ^ ^ ^ MethodInvocation qualifier parent_ter ^ ^ member getString_ter ^ ^ ^ ^ member report_ter ^ ^ ^ ^ ^ 
report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, parent.getString());

StatementExpression expression MethodInvocation arguments MemberReference member par2 ^ ^ ^ MemberReference member n_ter ^ ^ ^ MemberReference member GOOG_SCOPE_NON_ALIAS_LOCAL_ter ^ ^ ^ MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ ^ member report_ter ^ ^ ^ ^ ^ 
report(, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());


StatementExpression expression MethodInvocation arguments MemberReference member t_ter ^ ^ ^ MemberReference member n_ter ^ ^ ^ MemberReference member GOOG_SCOPE_NON_ALIAS_LOCAL_ter ^ ^ ^ MethodInvocation qualifier par1 ^ ^ member getString_ter ^ ^ ^ ^ member report_ter ^ ^ ^ ^ ^ 
report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, .getString());


StatementExpression expression MethodInvocation arguments MemberReference member parent_ter ^ ^ ^ MemberReference member n_ter ^ ^ ^ MemberReference member GOOG_SCOPE_NON_ALIAS_LOCAL_ter ^ ^ ^ MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ ^ member report_ter ^ ^ ^ ^ ^ 
report(parent, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());

StatementExpression expression MethodInvocation arguments MemberReference member t_ter ^ ^ ^ MemberReference member n_ter ^ ^ ^ MemberReference member GOOG_SCOPE_NON_ALIAS_LOCAL_ter ^ ^ ^ MethodInvocation qualifier t_ter ^ ^ member getString_ter ^ ^ ^ ^ member report_ter ^ ^ ^ ^ ^ 
report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, t.getString());

StatementExpression expression MethodInvocation arguments MemberReference member t_ter ^ ^ ^ MemberReference member par2 ^ ^ ^ MemberReference member GOOG_SCOPE_NON_ALIAS_LOCAL_ter ^ ^ ^ MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ ^ member report_ter ^ ^ ^ ^ ^ 
report(t, , GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());


StatementExpression expression MethodInvocation arguments MemberReference member t_ter ^ ^ ^ MemberReference member n_ter ^ ^ ^ MemberReference member GOOG_SCOPE_NON_ALIAS_LOCAL_ter ^ ^ ^ MethodInvocation qualifier v_ter ^ ^ member getString_ter ^ ^ ^ ^ member report_ter ^ ^ ^ ^ ^ 
report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, v.getString());

StatementExpression expression MethodInvocation arguments MemberReference member aliasVar_ter ^ ^ ^ MemberReference member n_ter ^ ^ ^ MemberReference member GOOG_SCOPE_NON_ALIAS_LOCAL_ter ^ ^ ^ MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ ^ member report_ter ^ ^ ^ ^ ^ 
report(aliasVar, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());

StatementExpression expression MethodInvocation arguments MemberReference member t_ter ^ ^ ^ MemberReference member n_ter ^ ^ ^ MemberReference member GOOG_SCOPE_NON_ALIAS_LOCAL_ter ^ ^ ^ MethodInvocation qualifier name_ter ^ ^ member getString_ter ^ ^ ^ ^ member report_ter ^ ^ ^ ^ ^ 
report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, name.getString());

StatementExpression expression MethodInvocation arguments MemberReference member t_ter ^ ^ ^ MemberReference member parent_ter ^ ^ ^ MemberReference member GOOG_SCOPE_NON_ALIAS_LOCAL_ter ^ ^ ^ MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ ^ member report_ter ^ ^ ^ ^ ^ 
report(t, parent, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());

StatementExpression expression MethodInvocation arguments MemberReference member scope_ter ^ ^ ^ MemberReference member n_ter ^ ^ ^ MemberReference member GOOG_SCOPE_NON_ALIAS_LOCAL_ter ^ ^ ^ MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ ^ member report_ter ^ ^ ^ ^ ^ 
report(scope, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());

StatementExpression expression MethodInvocation arguments MemberReference member t_ter ^ ^ ^ MemberReference member aliasVar_ter ^ ^ ^ MemberReference member GOOG_SCOPE_NON_ALIAS_LOCAL_ter ^ ^ ^ MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ ^ member report_ter ^ ^ ^ ^ ^ 
report(t, aliasVar, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());

StatementExpression expression MethodInvocation arguments MemberReference member t_ter ^ ^ ^ MemberReference member n_ter ^ ^ ^ MemberReference member GOOG_SCOPE_NON_ALIAS_LOCAL_ter ^ ^ ^ MethodInvocation qualifier n_ter ^ ^ member getNode_ter ^ ^ ^ ^ member report_ter ^ ^ ^ ^ ^ 
report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getNode());

StatementExpression expression MethodInvocation arguments MemberReference member t_ter ^ ^ ^ MemberReference member n_ter ^ ^ ^ MemberReference member GOOG_SCOPE_NON_ALIAS_LOCAL_ter ^ ^ ^ MethodInvocation qualifier n_ter ^ ^ member findAliases_ter ^ ^ ^ ^ member report_ter ^ ^ ^ ^ ^ 
report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.findAliases());

StatementExpression expression MethodInvocation arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ ^ member report_ter ^ ^ ^ ^ ^ 
report(n.getString());

StatementExpression expression MethodInvocation qualifier aliases_ter ^ ^ arguments MemberReference member name_ter ^ ^ ^ MemberReference member aliasVar_ter ^ ^ ^ ^ member put_ter ^ ^ ^ ^ ^ 
aliases.put(name, aliasVar);

ContinueStatement_ter ^ 
continue;

StatementExpression expression MethodInvocation qualifier transformation_ter ^ ^ arguments MemberReference member name_ter ^ ^ ^ MemberReference member qualifiedName_ter ^ ^ ^ ^ member addAlias_ter ^ ^ ^ ^ ^ 
transformation.addAlias(name, qualifiedName);
continue;
}


StatementExpression expression MethodInvocation arguments MemberReference member t_ter ^ ^ ^ MemberReference member scope_ter ^ ^ ^ MemberReference member GOOG_SCOPE_NON_ALIAS_LOCAL_ter ^ ^ ^ MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ ^ member report_ter ^ ^ ^ ^ ^ 
report(t, scope, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());

StatementExpression expression MethodInvocation arguments MemberReference member v_ter ^ ^ ^ MemberReference member n_ter ^ ^ ^ MemberReference member GOOG_SCOPE_NON_ALIAS_LOCAL_ter ^ ^ ^ MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ ^ member report_ter ^ ^ ^ ^ ^ 
report(v, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());

stderr: 