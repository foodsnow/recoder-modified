stdout: LocalVariableDeclaration type ReferenceType name Map_ter ^ ^ arguments TypeArgument type ReferenceType name TemplateType_ter ^ ^ ^ ^ ^ TypeArgument type ReferenceType name JSType_ter ^ ^ ^ ^ ^ ^ ^ ^ declarators VariableDeclarator name inferred_ter ^ ^ initializer MethodInvocation arguments MemberReference member fnType_ter ^ ^ ^ MemberReference member n_ter ^ ^ ^ ^ member inferTemplateTypesFromParameters_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
arg TemplateType, JSType
arg 
arg 
arg TemplateType, JSType
Map<TemplateType, JSType> inferred = inferTemplateTypesFromParameters(fnType, n);

LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name Map_ter ^ ^ arguments TypeArgument type ReferenceType name TemplateType_ter ^ ^ ^ ^ ^ TypeArgument type ReferenceType name JSType_ter ^ ^ ^ ^ ^ ^ ^ ^ declarators VariableDeclarator name inferred_ter ^ ^ initializer MethodInvocation arguments MemberReference member fnType_ter ^ ^ ^ MemberReference member n_ter ^ ^ ^ ^ member inferTemplateTypesFromParameters_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
arg TemplateType, JSType
arg 
arg 
arg TemplateType, JSType
final Map<TemplateType, JSType> inferred = inferTemplateTypesFromParameters(fnType, n);

LocalVariableDeclaration type ReferenceType name Map_ter ^ ^ arguments TypeArgument type ReferenceType name TemplateType_ter ^ ^ ^ ^ ^ TypeArgument type ReferenceType name JSType_ter ^ ^ ^ ^ ^ ^ ^ ^ declarators VariableDeclarator name inferred_ter ^ ^ initializer MethodInvocation arguments MemberReference member fnType_ter ^ ^ ^ MemberReference member registry_ter ^ ^ ^ ^ member inferTemplateTypesFromParameters_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
arg TemplateType, JSType
arg 
arg 
arg TemplateType, JSType
Map<TemplateType, JSType> inferred = inferTemplateTypesFromParameters(fnType, registry);

LocalVariableDeclaration type ReferenceType name Map_ter ^ ^ arguments TypeArgument type ReferenceType name TemplateType_ter ^ ^ ^ ^ ^ TypeArgument type ReferenceType name JSType_ter ^ ^ ^ ^ ^ ^ ^ ^ declarators VariableDeclarator name inferred_ter ^ ^ initializer MethodInvocation arguments MemberReference member fnType_ter ^ ^ ^ MemberReference member inferred_ter ^ ^ ^ ^ member inferTemplateTypesFromParameters_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
arg TemplateType, JSType
arg 
arg 
arg TemplateType, JSType
Map<TemplateType, JSType> inferred = inferTemplateTypesFromParameters(fnType, inferred);

LocalVariableDeclaration type ReferenceType name Map_ter ^ ^ arguments TypeArgument type ReferenceType name TemplateType_ter ^ ^ ^ ^ ^ TypeArgument type ReferenceType name JSType_ter ^ ^ ^ ^ ^ ^ ^ ^ declarators VariableDeclarator name inferred_ter ^ ^ initializer MethodInvocation arguments MemberReference member registry_ter ^ ^ ^ MemberReference member n_ter ^ ^ ^ ^ member inferTemplateTypesFromParameters_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
arg TemplateType, JSType
arg 
arg 
arg TemplateType, JSType
Map<TemplateType, JSType> inferred = inferTemplateTypesFromParameters(registry, n);

LocalVariableDeclaration type ReferenceType name Map_ter ^ ^ arguments TypeArgument type ReferenceType name TemplateType_ter ^ ^ ^ ^ ^ TypeArgument type ReferenceType name JSType_ter ^ ^ ^ ^ ^ ^ ^ ^ declarators VariableDeclarator name inferred_ter ^ ^ initializer MethodInvocation arguments MemberReference member fnType_ter ^ ^ ^ MemberReference member fnType_ter ^ ^ ^ ^ member inferTemplateTypesFromParameters_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
arg TemplateType, JSType
arg 
arg 
arg TemplateType, JSType
Map<TemplateType, JSType> inferred = inferTemplateTypesFromParameters(fnType, fnType);

LocalVariableDeclaration type ReferenceType name Map_ter ^ ^ arguments TypeArgument type ReferenceType name TemplateType_ter ^ ^ ^ ^ ^ TypeArgument type ReferenceType name JSType_ter ^ ^ ^ ^ ^ ^ ^ ^ declarators VariableDeclarator name inferred_ter ^ ^ initializer MethodInvocation arguments MemberReference member inferred_ter ^ ^ ^ MemberReference member n_ter ^ ^ ^ ^ member inferTemplateTypesFromParameters_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
arg TemplateType, JSType
arg 
arg 
arg TemplateType, JSType
Map<TemplateType, JSType> inferred = inferTemplateTypesFromParameters(inferred, n);

LocalVariableDeclaration type ReferenceType name Map_ter ^ ^ arguments TypeArgument type ReferenceType name TemplateType_ter ^ ^ ^ ^ ^ TypeArgument type ReferenceType name JSType_ter ^ ^ ^ ^ ^ ^ ^ ^ declarators VariableDeclarator name inferred_ter ^ ^ initializer MethodInvocation arguments MemberReference member fnType_ter ^ ^ ^ MemberReference member replacer_ter ^ ^ ^ ^ member inferTemplateTypesFromParameters_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
arg TemplateType, JSType
arg 
arg 
arg TemplateType, JSType
Map<TemplateType, JSType> inferred = inferTemplateTypesFromParameters(fnType, replacer);

LocalVariableDeclaration type ReferenceType name Map_ter ^ ^ arguments TypeArgument type ReferenceType name TemplateType_ter ^ ^ ^ ^ ^ TypeArgument type ReferenceType name JSType_ter ^ ^ ^ ^ ^ ^ ^ ^ declarators VariableDeclarator name inferred_ter ^ ^ initializer MethodInvocation arguments MemberReference member fnType_ter ^ ^ ^ MemberReference member callTarget_ter ^ ^ ^ ^ member inferTemplateTypesFromParameters_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
arg TemplateType, JSType
arg 
arg 
arg TemplateType, JSType
Map<TemplateType, JSType> inferred = inferTemplateTypesFromParameters(fnType, callTarget);

LocalVariableDeclaration type ReferenceType name Map_ter ^ ^ arguments TypeArgument type ReferenceType name TemplateType_ter ^ ^ ^ ^ ^ TypeArgument type ReferenceType name JSType_ter ^ ^ ^ ^ ^ ^ ^ ^ declarators VariableDeclarator name inferred_ter ^ ^ initializer MethodInvocation arguments MemberReference member n_ter ^ ^ ^ MemberReference member fnType_ter ^ ^ ^ ^ member inferTemplateTypesFromParameters_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
arg TemplateType, JSType
arg 
arg 
arg TemplateType, JSType
Map<TemplateType, JSType> inferred = inferTemplateTypesFromParameters(n, fnType);

ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if (true) { return false; }

LocalVariableDeclaration type ReferenceType name Map_ter ^ ^ arguments TypeArgument type ReferenceType name TemplateType_ter ^ ^ ^ ^ ^ TypeArgument type ReferenceType name JSType_ter ^ ^ ^ ^ ^ ^ ^ ^ declarators VariableDeclarator name inferred_ter ^ ^ initializer MethodInvocation arguments MemberReference member replacer_ter ^ ^ ^ MemberReference member n_ter ^ ^ ^ ^ member inferTemplateTypesFromParameters_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
arg TemplateType, JSType
arg 
arg 
arg TemplateType, JSType
Map<TemplateType, JSType> inferred = inferTemplateTypesFromParameters(replacer, n);

LocalVariableDeclaration type ReferenceType name Map_ter ^ ^ arguments TypeArgument type ReferenceType name TemplateType_ter ^ ^ ^ ^ ^ TypeArgument type ReferenceType name JSType_ter ^ ^ ^ ^ ^ ^ ^ ^ declarators VariableDeclarator name inferred_ter ^ ^ initializer MethodInvocation arguments MemberReference member callTarget_ter ^ ^ ^ MemberReference member n_ter ^ ^ ^ ^ member inferTemplateTypesFromParameters_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
arg TemplateType, JSType
arg 
arg 
arg TemplateType, JSType
Map<TemplateType, JSType> inferred = inferTemplateTypesFromParameters(callTarget, n);

LocalVariableDeclaration type ReferenceType name Map_ter ^ ^ arguments TypeArgument type ReferenceType name TemplateType_ter ^ ^ ^ ^ ^ TypeArgument type ReferenceType name JSType_ter ^ ^ ^ ^ ^ ^ ^ ^ declarators VariableDeclarator name inferred_ter ^ ^ initializer MethodInvocation arguments MemberReference member fnType_ter ^ ^ ^ MemberReference member keys_ter ^ ^ ^ ^ member inferTemplateTypesFromParameters_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
arg TemplateType, JSType
arg 
arg 
arg TemplateType, JSType
Map<TemplateType, JSType> inferred = inferTemplateTypesFromParameters(fnType, keys);

LocalVariableDeclaration type ReferenceType name Map_ter ^ ^ arguments TypeArgument type ReferenceType name TemplateType_ter ^ ^ ^ ^ ^ TypeArgument type ReferenceType name JSType_ter ^ ^ ^ ^ ^ ^ ^ ^ declarators VariableDeclarator name inferred_ter ^ ^ initializer MethodInvocation arguments MemberReference member n_ter ^ ^ ^ ^ member inferTemplateTypesFromParameters_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
arg TemplateType, JSType
arg 
arg 
arg TemplateType, JSType
Map<TemplateType, JSType> inferred = inferTemplateTypesFromParameters(n);

LocalVariableDeclaration type ReferenceType name Map_ter ^ ^ arguments TypeArgument type ReferenceType name TemplateType_ter ^ ^ ^ ^ ^ TypeArgument type ReferenceType name JSType_ter ^ ^ ^ ^ ^ ^ ^ ^ declarators VariableDeclarator name inferred_ter ^ ^ initializer MethodInvocation arguments MemberReference member keys_ter ^ ^ ^ MemberReference member n_ter ^ ^ ^ ^ member inferTemplateTypesFromParameters_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
arg TemplateType, JSType
arg 
arg 
arg TemplateType, JSType
Map<TemplateType, JSType> inferred = inferTemplateTypesFromParameters(keys, n);

LocalVariableDeclaration type ReferenceType name Map_ter ^ ^ ^ ^ declarators VariableDeclarator name inferred_ter ^ ^ initializer MethodInvocation arguments MemberReference member fnType_ter ^ ^ ^ MemberReference member n_ter ^ ^ ^ ^ member inferTemplateTypesFromParameters_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Map inferred = inferTemplateTypesFromParameters(fnType, n);

LocalVariableDeclaration type ReferenceType name Map_ter ^ ^ arguments TypeArgument type ReferenceType name TemplateType_ter ^ ^ ^ ^ ^ TypeArgument type ReferenceType name JSType_ter ^ ^ ^ ^ ^ ^ ^ ^ declarators VariableDeclarator name inferred_ter ^ ^ initializer MethodInvocation arguments MemberReference member n_ter ^ ^ ^ MemberReference member n_ter ^ ^ ^ ^ member inferTemplateTypesFromParameters_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
arg TemplateType, JSType
arg 
arg 
arg TemplateType, JSType
Map<TemplateType, JSType> inferred = inferTemplateTypesFromParameters(n, n);

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member fnType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if((fnType == null)){
return false;}
LocalVariableDeclaration type ReferenceType name Map_ter ^ ^ arguments TypeArgument type ReferenceType name TemplateType_ter ^ ^ ^ ^ ^ TypeArgument type ReferenceType name JSType_ter ^ ^ ^ ^ ^ ^ ^ ^ declarators VariableDeclarator name inferred_ter ^ ^ initializer MethodInvocation member inferTemplateTypesFromParameters_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
arg TemplateType, JSType
arg 
arg 
arg TemplateType, JSType
Map<TemplateType, JSType> inferred = inferTemplateTypesFromParameters();

LocalVariableDeclaration type ReferenceType name Map_ter ^ ^ arguments TypeArgument pattern_type ?_ter ^ ^ ^ ^ ^ ^ declarators VariableDeclarator name inferred_ter ^ ^ initializer MethodInvocation arguments MemberReference member fnType_ter ^ ^ ^ MemberReference member n_ter ^ ^ ^ ^ member inferTemplateTypesFromParameters_ter ^ ^ ^ ^ ^ ^ ^ 
arg ?
arg ?
Map<?> inferred = inferTemplateTypesFromParameters(fnType, n);

StatementExpression expression MethodInvocation arguments MemberReference member fnType_ter ^ ^ ^ MemberReference member n_ter ^ ^ ^ ^ member inferTemplateTypesFromParameters_ter ^ ^ ^ ^ ^ 
inferTemplateTypesFromParameters(fnType, n);

LocalVariableDeclaration type ReferenceType name Map_ter ^ ^ arguments TypeArgument type ReferenceType name TemplateType_ter ^ ^ ^ ^ ^ TypeArgument type ReferenceType name JSType_ter ^ ^ ^ ^ ^ ^ ^ ^ declarators VariableDeclarator name inferred_ter ^ ^ initializer MethodInvocation arguments MemberReference member fnType_ter ^ ^ ^ MemberReference member par2 ^ ^ ^ ^ member inferTemplateTypesFromParameters_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
arg TemplateType, JSType
arg 
arg 
arg TemplateType, JSType
Map<TemplateType, JSType> inferred = inferTemplateTypesFromParameters(fnType, );


ReturnStatement_ter ^ 
if (true) { return;
 }

LocalVariableDeclaration type ReferenceType name Map_ter ^ ^ arguments TypeArgument type ReferenceType name TemplateType_ter ^ ^ ^ ^ ^ TypeArgument type ReferenceType name JSType_ter ^ ^ ^ ^ ^ ^ ^ ^ declarators VariableDeclarator name inferred_ter ^ ^ initializer MethodInvocation arguments MemberReference member fnType_ter ^ ^ ^ MemberReference member replacementFnType_ter ^ ^ ^ ^ member inferTemplateTypesFromParameters_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
arg TemplateType, JSType
arg 
arg 
arg TemplateType, JSType
Map<TemplateType, JSType> inferred = inferTemplateTypesFromParameters(fnType, replacementFnType);

LocalVariableDeclaration type ReferenceType name Map_ter ^ ^ arguments TypeArgument type ReferenceType name TemplateType_ter ^ ^ ^ ^ ^ TypeArgument type ReferenceType name JSType_ter ^ ^ ^ ^ ^ ^ ^ ^ declarators VariableDeclarator name inferred_ter ^ ^ initializer MethodInvocation arguments MemberReference member n_ter ^ ^ ^ MemberReference member fnType_ter ^ ^ ^ Literal value false_ter ^ ^ ^ ^ member inferTemplateTypesFromParameters_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
arg TemplateType, JSType
arg 
arg 
arg TemplateType, JSType
Map<TemplateType, JSType> inferred = inferTemplateTypesFromParameters(n, fnType, false);

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member fnType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((fnType != null)){

StatementExpression expression MethodInvocation qualifier fnType_ter ^ ^ member setStruct_ter ^ ^ ^ ^ ^ 
fnType.setStruct();

StatementExpression expression MethodInvocation qualifier fnType_ter ^ ^ member setDict_ter ^ ^ ^ ^ ^ 
fnType.setDict();

StatementExpression expression MethodInvocation qualifier fnType_ter ^ ^ member clearCachedValues_ter ^ ^ ^ ^ ^ 
fnType.clearCachedValues();

LocalVariableDeclaration type ReferenceType name Map_ter ^ ^ arguments TypeArgument type ReferenceType name TemplateType_ter ^ ^ ^ ^ ^ TypeArgument type ReferenceType name JSType_ter ^ ^ ^ ^ ^ ^ ^ ^ declarators VariableDeclarator name inferred_ter ^ ^ initializer MethodInvocation arguments MemberReference member n_ter ^ ^ ^ MemberReference member fnType_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member inferTemplateTypesFromParameters_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
arg TemplateType, JSType
arg 
arg 
arg TemplateType, JSType
Map<TemplateType, JSType> inferred = inferTemplateTypesFromParameters(n, fnType, true);

IfStatement condition MethodInvocation qualifier fnType_ter ^ ^ member isInstanceType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(fnType.isInstanceType()){
return false;}
IfStatement condition MethodInvocation qualifier fnType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(fnType.isConstructor()){
return false;}
IfStatement condition MethodInvocation qualifier fnType_ter ^ ^ member isInterface_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(fnType.isInterface()){
return false;}
IfStatement condition MethodInvocation qualifier fnType_ter ^ ^ member isOrdinaryFunction_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(fnType.isOrdinaryFunction()){
return false;}
IfStatement condition MethodInvocation qualifier fnType_ter ^ ^ member makesStructs_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(fnType.makesStructs()){
return false;}
IfStatement condition MethodInvocation qualifier fnType_ter ^ ^ member makesDicts_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(fnType.makesDicts()){
return false;}
IfStatement condition MethodInvocation qualifier fnType_ter ^ ^ member canBeCalled_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(fnType.canBeCalled()){
return false;}
IfStatement condition MethodInvocation qualifier fnType_ter ^ ^ member hasImplementedInterfaces_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(fnType.hasImplementedInterfaces()){
return false;}
IfStatement condition MethodInvocation qualifier fnType_ter ^ ^ member isReturnTypeInferred_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(fnType.isReturnTypeInferred()){
return false;}
IfStatement condition MethodInvocation qualifier fnType_ter ^ ^ member hasInstanceType_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(fnType.hasInstanceType()){
return false;}
IfStatement condition MethodInvocation qualifier fnType_ter ^ ^ member hasCachedValues_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(fnType.hasCachedValues()){
return false;}
IfStatement condition MethodInvocation qualifier fnType_ter ^ ^ member hasAnyTemplateTypesInternal_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(fnType.hasAnyTemplateTypesInternal()){
return false;}
LocalVariableDeclaration type ReferenceType name Map_ter ^ ^ arguments TypeArgument type ReferenceType name TemplateType_ter ^ ^ ^ ^ ^ TypeArgument type ReferenceType name JSType_ter ^ ^ ^ ^ ^ ^ ^ ^ declarators VariableDeclarator name inferred_ter ^ ^ initializer MethodInvocation arguments MemberReference member replacementFnType_ter ^ ^ ^ MemberReference member n_ter ^ ^ ^ ^ member inferTemplateTypesFromParameters_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
arg TemplateType, JSType
arg 
arg 
arg TemplateType, JSType
Map<TemplateType, JSType> inferred = inferTemplateTypesFromParameters(replacementFnType, n);

LocalVariableDeclaration type ReferenceType name Map_ter ^ ^ arguments TypeArgument type ReferenceType name TemplateType_ter ^ ^ ^ ^ ^ TypeArgument type ReferenceType name JSType_ter ^ ^ ^ ^ ^ ^ ^ ^ declarators VariableDeclarator name inferred_ter ^ ^ initializer MethodInvocation arguments MemberReference member n_ter ^ ^ ^ MemberReference member fnType_ter ^ ^ ^ MemberReference member replacer_ter ^ ^ ^ ^ member inferTemplateTypesFromParameters_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
arg TemplateType, JSType
arg 
arg 
arg TemplateType, JSType
Map<TemplateType, JSType> inferred = inferTemplateTypesFromParameters(n, fnType, replacer);

LocalVariableDeclaration type ReferenceType name Map_ter ^ ^ arguments TypeArgument type ReferenceType name TemplateType_ter ^ ^ ^ ^ ^ TypeArgument type ReferenceType name JSType_ter ^ ^ ^ ^ ^ ^ ^ ^ declarators VariableDeclarator name inferred_ter ^ ^ initializer MethodInvocation arguments MemberReference member n_ter ^ ^ ^ MemberReference member par2 ^ ^ ^ ^ member inferTemplateTypesFromParameters_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
arg TemplateType, JSType
arg 
arg 
arg TemplateType, JSType
Map<TemplateType, JSType> inferred = inferTemplateTypesFromParameters(n, );


LocalVariableDeclaration type ReferenceType name Map_ter ^ ^ arguments TypeArgument type ReferenceType name TemplateType_ter ^ ^ ^ ^ ^ TypeArgument type ReferenceType name JSType_ter ^ ^ ^ ^ ^ ^ ^ ^ declarators VariableDeclarator name inferred_ter ^ ^ initializer MethodInvocation arguments MemberReference member n_ter ^ ^ ^ MemberReference member fnType_ter ^ ^ ^ MemberReference member fnType_ter ^ ^ ^ ^ member inferTemplateTypesFromParameters_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
arg TemplateType, JSType
arg 
arg 
arg TemplateType, JSType
Map<TemplateType, JSType> inferred = inferTemplateTypesFromParameters(n, fnType, fnType);

LocalVariableDeclaration type ReferenceType name Map_ter ^ ^ arguments TypeArgument type ReferenceType name TemplateType_ter ^ ^ ^ ^ ^ TypeArgument type ReferenceType name JSType_ter ^ ^ ^ ^ ^ ^ ^ ^ declarators VariableDeclarator name inferred_ter ^ ^ initializer MethodInvocation arguments MemberReference member par2 ^ ^ ^ MemberReference member n_ter ^ ^ ^ ^ member inferTemplateTypesFromParameters_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
arg TemplateType, JSType
arg 
arg 
arg TemplateType, JSType
Map<TemplateType, JSType> inferred = inferTemplateTypesFromParameters(, n);


LocalVariableDeclaration type ReferenceType name Map_ter ^ ^ arguments TypeArgument type ReferenceType name TemplateType_ter ^ ^ ^ ^ ^ TypeArgument type ReferenceType name JSType_ter ^ ^ ^ ^ ^ ^ ^ ^ declarators VariableDeclarator name inferred_ter ^ ^ initializer MethodInvocation arguments MemberReference member fnType_ter ^ ^ ^ MemberReference member n_ter ^ ^ ^ ^ member setJSType_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
arg TemplateType, JSType
arg 
arg 
arg TemplateType, JSType
Map<TemplateType, JSType> inferred = setJSType(fnType, n);

LocalVariableDeclaration type ReferenceType name Map_ter ^ ^ arguments TypeArgument type ReferenceType name TemplateType_ter ^ ^ ^ ^ ^ TypeArgument type ReferenceType name JSType_ter ^ ^ ^ ^ ^ ^ ^ ^ declarators VariableDeclarator name inferred_ter ^ ^ initializer MethodInvocation arguments MemberReference member fnType_ter ^ ^ ^ ^ member inferTemplateTypesFromParameters_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
arg TemplateType, JSType
arg 
arg 
arg TemplateType, JSType
Map<TemplateType, JSType> inferred = inferTemplateTypesFromParameters(fnType);

LocalVariableDeclaration type ReferenceType name Map_ter ^ ^ arguments TypeArgument type ReferenceType name TemplateType_ter ^ ^ ^ ^ ^ TypeArgument type ReferenceType name JSType_ter ^ ^ ^ ^ ^ ^ ^ ^ declarators VariableDeclarator name inferred_ter ^ ^ initializer MethodInvocation arguments MemberReference member n_ter ^ ^ ^ MemberReference member fnType_ter ^ ^ ^ MemberReference member registry_ter ^ ^ ^ ^ member inferTemplateTypesFromParameters_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
arg TemplateType, JSType
arg 
arg 
arg TemplateType, JSType
Map<TemplateType, JSType> inferred = inferTemplateTypesFromParameters(n, fnType, registry);

StatementExpression expression MethodInvocation qualifier n_ter ^ ^ arguments MethodInvocation qualifier replacementFnType_ter ^ ^ member getReturnType_ter ^ ^ ^ ^ member setJSType_ter ^ ^ ^ ^ ^ 
n.setJSType(replacementFnType.getReturnType());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MemberReference member replacementFnType_ter ^ ^ ^ ^ member checkNotNull_ter ^ ^ ^ ^ ^ 
Preconditions.checkNotNull(replacementFnType);

StatementExpression expression MethodInvocation qualifier n_ter ^ ^ member detachChildren_ter ^ ^ ^ ^ ^ 
n.detachChildren();

StatementExpression expression MethodInvocation qualifier n_ter ^ ^ member setQuotedString_ter ^ ^ ^ ^ ^ 
n.setQuotedString();

LocalVariableDeclaration type ReferenceType name Map_ter ^ ^ arguments TypeArgument type ReferenceType name TemplateType_ter ^ ^ ^ ^ ^ TypeArgument type ReferenceType name JSType_ter ^ ^ ^ ^ ^ ^ ^ ^ declarators VariableDeclarator name inferred_ter ^ ^ initializer MethodInvocation arguments MemberReference member n_ter ^ ^ ^ Literal value false_ter ^ ^ ^ ^ member inferTemplateTypesFromParameters_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
arg TemplateType, JSType
arg 
arg 
arg TemplateType, JSType
Map<TemplateType, JSType> inferred = inferTemplateTypesFromParameters(n, false);

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if((n == null)){
return false;}
StatementExpression expression MethodInvocation qualifier callTarget_ter ^ ^ arguments MemberReference member replacementFnType_ter ^ ^ ^ ^ member setJSType_ter ^ ^ ^ ^ ^ 
callTarget.setJSType(replacementFnType);

stderr: 