stdout: LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name lastDotIdx_ter ^ ^ initializer MethodInvocation qualifier className_ter ^ ^ arguments MemberReference member PACKAGE_SEPARATOR_CHAR_ter ^ ^ ^ ^ member lastIndexOf_ter ^ ^ ^ ^ ^ ^ ^ 
int lastDotIdx = className.lastIndexOf(PACKAGE_SEPARATOR_CHAR);

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name lastDotIdx_ter ^ ^ initializer MethodInvocation qualifier className_ter ^ ^ arguments MemberReference member INNER_CLASS_SEPARATOR_CHAR_ter ^ ^ ^ ^ member lastIndexOf_ter ^ ^ ^ ^ ^ ^ ^ 
int lastDotIdx = className.lastIndexOf(INNER_CLASS_SEPARATOR_CHAR);

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name lastDotIdx_ter ^ ^ initializer MethodInvocation qualifier className_ter ^ ^ arguments MemberReference member EMPTY_ter ^ ^ ^ ^ member lastIndexOf_ter ^ ^ ^ ^ ^ ^ ^ 
int lastDotIdx = className.lastIndexOf(EMPTY);

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name lastDotIdx_ter ^ ^ initializer MethodInvocation qualifier className_ter ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member lastIndexOf_ter ^ ^ ^ ^ ^ ^ ^ 
int lastDotIdx = className.lastIndexOf();

LocalVariableDeclaration type BasicType name long_ter ^ ^ ^ ^ declarators VariableDeclarator name lastDotIdx_ter ^ ^ initializer MethodInvocation qualifier className_ter ^ ^ arguments MemberReference member PACKAGE_SEPARATOR_CHAR_ter ^ ^ ^ ^ member lastIndexOf_ter ^ ^ ^ ^ ^ ^ ^ 
long lastDotIdx = className.lastIndexOf(PACKAGE_SEPARATOR_CHAR);

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name lastDotIdx_ter ^ ^ initializer MethodInvocation qualifier className_ter ^ ^ arguments MemberReference member className_ter ^ ^ ^ ^ member lastIndexOf_ter ^ ^ ^ ^ ^ ^ ^ 
int lastDotIdx = className.lastIndexOf(className);

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name lastDotIdx_ter ^ ^ initializer MethodInvocation qualifier className_ter ^ ^ arguments MemberReference member innerIdx_ter ^ ^ ^ ^ member lastIndexOf_ter ^ ^ ^ ^ ^ ^ ^ 
int lastDotIdx = className.lastIndexOf(innerIdx);

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name lastDotIdx_ter ^ ^ initializer MethodInvocation qualifier className_ter ^ ^ arguments MemberReference member lastDotIdx_ter ^ ^ ^ ^ member lastIndexOf_ter ^ ^ ^ ^ ^ ^ ^ 
int lastDotIdx = className.lastIndexOf(lastDotIdx);

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name lastDotIdx_ter ^ ^ initializer MethodInvocation qualifier className_ter ^ ^ arguments MemberReference qualifier PACKAGE_SEPARATOR_CHAR_ter ^ ^ member PACKAGE_SEPARATOR_CHAR_ter ^ ^ ^ ^ member lastIndexOf_ter ^ ^ ^ ^ ^ ^ ^ 
int lastDotIdx = className.lastIndexOf(PACKAGE_SEPARATOR_CHAR.PACKAGE_SEPARATOR_CHAR);

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name lastDotIdx_ter ^ ^ initializer MethodInvocation qualifier className_ter ^ ^ arguments MemberReference qualifier INNER_CLASS_SEPARATOR_CHAR_ter ^ ^ member PACKAGE_SEPARATOR_CHAR_ter ^ ^ ^ ^ member lastIndexOf_ter ^ ^ ^ ^ ^ ^ ^ 
int lastDotIdx = className.lastIndexOf(INNER_CLASS_SEPARATOR_CHAR.PACKAGE_SEPARATOR_CHAR);

ReturnStatement expression MemberReference qualifier StringUtils_ter ^ ^ member EMPTY_ter ^ ^ ^ ^ ^ 
if (true) { return StringUtils.EMPTY; }

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name lastDotIdx_ter ^ ^ initializer MethodInvocation qualifier className_ter ^ ^ arguments This_ter ^ ^ member lastIndexOf_ter ^ ^ ^ ^ ^ ^ ^ 
int lastDotIdx = className.lastIndexOf(this);

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name lastDotIdx_ter ^ ^ initializer MethodInvocation qualifier className_ter ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member lastIndexOf_ter ^ ^ ^ ^ ^ ^ ^ 
int lastDotIdx = className.lastIndexOf(0);

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name lastDotIdx_ter ^ ^ initializer MethodInvocation qualifier className_ter ^ ^ arguments MemberReference qualifier StringUtils_ter ^ ^ member PACKAGE_SEPARATOR_CHAR_ter ^ ^ ^ ^ member lastIndexOf_ter ^ ^ ^ ^ ^ ^ ^ 
int lastDotIdx = className.lastIndexOf(StringUtils.PACKAGE_SEPARATOR_CHAR);

LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name lastDotIdx_ter ^ ^ initializer MethodInvocation qualifier className_ter ^ ^ arguments MemberReference member PACKAGE_SEPARATOR_CHAR_ter ^ ^ ^ ^ member lastIndexOf_ter ^ ^ ^ ^ ^ ^ ^ 
final int lastDotIdx = className.lastIndexOf(PACKAGE_SEPARATOR_CHAR);

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name lastDotIdx_ter ^ ^ initializer MethodInvocation qualifier par1 ^ ^ arguments MemberReference member PACKAGE_SEPARATOR_CHAR_ter ^ ^ ^ ^ member lastIndexOf_ter ^ ^ ^ ^ ^ ^ ^ 
int lastDotIdx = .lastIndexOf(PACKAGE_SEPARATOR_CHAR);


LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name lastDotIdx_ter ^ ^ initializer MethodInvocation qualifier className_ter ^ ^ arguments MemberReference member PACKAGE_SEPARATOR_CHAR_ter ^ ^ ^ ^ member getShortClassName_ter ^ ^ ^ ^ ^ ^ ^ 
int lastDotIdx = className.getShortClassName(PACKAGE_SEPARATOR_CHAR);

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name lastDotIdx_ter ^ ^ initializer MethodInvocation qualifier lastDotIdx_ter ^ ^ arguments MemberReference member PACKAGE_SEPARATOR_CHAR_ter ^ ^ ^ ^ member lastIndexOf_ter ^ ^ ^ ^ ^ ^ ^ 
int lastDotIdx = lastDotIdx.lastIndexOf(PACKAGE_SEPARATOR_CHAR);

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name lastDotIdx_ter ^ ^ initializer Cast type BasicType name int_ter ^ ^ ^ ^ expression MethodInvocation qualifier className_ter ^ ^ arguments MemberReference member PACKAGE_SEPARATOR_CHAR_ter ^ ^ ^ ^ member lastIndexOf_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
int lastDotIdx = (int)className.lastIndexOf(PACKAGE_SEPARATOR_CHAR);

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name lastDotIdx_ter ^ ^ initializer MethodInvocation qualifier className_ter ^ ^ arguments MemberReference member PACKAGE_SEPARATOR_CHAR_ter ^ ^ ^ ^ member indexOf_ter ^ ^ ^ ^ ^ ^ ^ 
int lastDotIdx = className.indexOf(PACKAGE_SEPARATOR_CHAR);

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name lastDotIdx_ter ^ ^ initializer MethodInvocation qualifier className_ter ^ ^ arguments Literal value 1_ter ^ ^ ^ ^ member lastIndexOf_ter ^ ^ ^ ^ ^ ^ ^ 
int lastDotIdx = className.lastIndexOf(1);

ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if (true) { return null; }

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name lastDotIdx_ter ^ ^ initializer MethodInvocation qualifier className_ter ^ ^ arguments MemberReference member PACKAGE_SEPARATOR_CHAR_ter ^ ^ ^ MemberReference member INNER_CLASS_SEPARATOR_CHAR_ter ^ ^ ^ ^ member lastIndexOf_ter ^ ^ ^ ^ ^ ^ ^ 
int lastDotIdx = className.lastIndexOf(PACKAGE_SEPARATOR_CHAR, INNER_CLASS_SEPARATOR_CHAR);

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name lastDotIdx_ter ^ ^ initializer MethodInvocation qualifier className_ter ^ ^ arguments MemberReference member INNER_CLASS_SEPARATOR_CHAR_ter ^ ^ ^ TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member lastDotIdx_ter ^ ^ ^ ^ operandr Literal prefix_operators -_ter ^ ^ value 1_ter ^ ^ ^ ^ ^ ^ if_true Literal value 0_ter ^ ^ ^ ^ if_false BinaryOperation operator +_ter ^ ^ operandl MemberReference member lastDotIdx_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ member lastIndexOf_ter ^ ^ ^ ^ ^ ^ ^ 
int lastDotIdx = className.lastIndexOf(INNER_CLASS_SEPARATOR_CHAR, ((lastDotIdx == -1))?0:(lastDotIdx + 1));

StatementExpression expression Assignment expressionl MemberReference member out_ter ^ ^ ^ ^ value MethodInvocation qualifier out_ter ^ ^ arguments MemberReference member INNER_CLASS_SEPARATOR_CHAR_ter ^ ^ ^ MemberReference member PACKAGE_SEPARATOR_CHAR_ter ^ ^ ^ ^ member replace_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
out = out.replace(INNER_CLASS_SEPARATOR_CHAR, PACKAGE_SEPARATOR_CHAR);

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name lastDotIdx_ter ^ ^ initializer MethodInvocation qualifier className_ter ^ ^ arguments MemberReference member PACKAGE_SEPARATOR_CHAR_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ ^ member lastIndexOf_ter ^ ^ ^ ^ ^ ^ ^ 
int lastDotIdx = className.lastIndexOf(PACKAGE_SEPARATOR_CHAR, 0);

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name lastDotIdx_ter ^ ^ initializer MethodInvocation qualifier className_ter ^ ^ arguments MemberReference qualifier StringUtils_ter ^ ^ member EMPTY_ter ^ ^ ^ ^ member lastIndexOf_ter ^ ^ ^ ^ ^ ^ ^ 
int lastDotIdx = className.lastIndexOf(StringUtils.EMPTY);

StatementExpression expression MethodInvocation qualifier className_ter ^ ^ arguments MemberReference member PACKAGE_SEPARATOR_CHAR_ter ^ ^ ^ ^ member lastIndexOf_ter ^ ^ ^ ^ ^ 
className.lastIndexOf(PACKAGE_SEPARATOR_CHAR);

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name lastDotIdx_ter ^ ^ initializer MethodInvocation qualifier className_ter ^ ^ arguments MemberReference qualifier StringUtils_ter ^ ^ member INNER_CLASS_SEPARATOR_CHAR_ter ^ ^ ^ ^ member lastIndexOf_ter ^ ^ ^ ^ ^ ^ ^ 
int lastDotIdx = className.lastIndexOf(StringUtils.INNER_CLASS_SEPARATOR_CHAR);

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name lastDotIdx_ter ^ ^ initializer MethodInvocation arguments MemberReference member PACKAGE_SEPARATOR_CHAR_ter ^ ^ ^ ^ member lastIndexOf_ter ^ ^ ^ ^ ^ ^ ^ 
int lastDotIdx = lastIndexOf(PACKAGE_SEPARATOR_CHAR);

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name lastDotIdx_ter ^ ^ initializer MethodInvocation qualifier className_ter ^ ^ arguments Literal value false_ter ^ ^ ^ ^ member lastIndexOf_ter ^ ^ ^ ^ ^ ^ ^ 
int lastDotIdx = className.lastIndexOf(false);

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name lastDotIdx_ter ^ ^ initializer MethodInvocation qualifier innerIdx_ter ^ ^ arguments MemberReference member PACKAGE_SEPARATOR_CHAR_ter ^ ^ ^ ^ member lastIndexOf_ter ^ ^ ^ ^ ^ ^ ^ 
int lastDotIdx = innerIdx.lastIndexOf(PACKAGE_SEPARATOR_CHAR);

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name lastDotIdx_ter ^ ^ initializer MethodInvocation qualifier className_ter ^ ^ arguments MemberReference member PACKAGE_SEPARATOR_CHAR_ter ^ ^ ^ MemberReference member PACKAGE_SEPARATOR_CHAR_ter ^ ^ ^ ^ member lastIndexOf_ter ^ ^ ^ ^ ^ ^ ^ 
int lastDotIdx = className.lastIndexOf(PACKAGE_SEPARATOR_CHAR, PACKAGE_SEPARATOR_CHAR);

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name lastDotIdx_ter ^ ^ initializer MethodInvocation qualifier className_ter ^ ^ arguments MemberReference member PACKAGE_SEPARATOR_CHAR_ter ^ ^ ^ Literal value false_ter ^ ^ ^ ^ member lastIndexOf_ter ^ ^ ^ ^ ^ ^ ^ 
int lastDotIdx = className.lastIndexOf(PACKAGE_SEPARATOR_CHAR, false);

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name lastDotIdx_ter ^ ^ initializer MethodInvocation qualifier className_ter ^ ^ arguments Literal value true_ter ^ ^ ^ ^ member lastIndexOf_ter ^ ^ ^ ^ ^ ^ ^ 
int lastDotIdx = className.lastIndexOf(true);

ReturnStatement_ter ^ 
if (true) { return;
 }

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name lastDotIdx_ter ^ ^ initializer MethodInvocation qualifier className_ter ^ ^ arguments MemberReference member PACKAGE_SEPARATOR_CHAR_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member lastIndexOf_ter ^ ^ ^ ^ ^ ^ ^ 
int lastDotIdx = className.lastIndexOf(PACKAGE_SEPARATOR_CHAR, true);

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name lastDotIdx_ter ^ ^ initializer MethodInvocation qualifier className_ter ^ ^ arguments This selectors MemberReference member PACKAGE_SEPARATOR_CHAR_ter ^ ^ ^ ^ ^ ^ member lastIndexOf_ter ^ ^ ^ ^ ^ ^ ^ 
int lastDotIdx = className.lastIndexOf(this.PACKAGE_SEPARATOR_CHAR);

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name lastDotIdx_ter ^ ^ initializer MethodInvocation qualifier className_ter ^ ^ arguments Literal value 2_ter ^ ^ ^ ^ member lastIndexOf_ter ^ ^ ^ ^ ^ ^ ^ 
int lastDotIdx = className.lastIndexOf(2);

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name lastDotIdx_ter ^ ^ initializer MethodInvocation arguments MemberReference member className_ter ^ ^ ^ ^ member lastIndexOf_ter ^ ^ ^ ^ ^ ^ ^ 
int lastDotIdx = lastIndexOf(className);

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name lastDotIdx_ter ^ ^ initializer MethodInvocation qualifier className_ter ^ ^ arguments MemberReference member PACKAGE_SEPARATOR_CHAR_ter ^ ^ ^ Literal value 1_ter ^ ^ ^ ^ member lastIndexOf_ter ^ ^ ^ ^ ^ ^ ^ 
int lastDotIdx = className.lastIndexOf(PACKAGE_SEPARATOR_CHAR, 1);

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member className_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference qualifier StringUtils_ter ^ ^ member EMPTY_ter ^ ^ ^ ^ ^ 
if((className == 0)){
return StringUtils.EMPTY;}
condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member className_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ 
if((className == null)){
condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member className_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ 
if((className != null)){
condition BinaryOperation operator >=_ter ^ ^ operandl MemberReference member className_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ 
if((className >= null)){
IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member className_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member className_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((className == null) || (className == null))){

condition BinaryOperation operator >_ter ^ ^ operandl MemberReference member className_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ 
if((className > null)){
condition BinaryOperation operator <=_ter ^ ^ operandl MemberReference member className_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ 
if((className <= null)){
IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member className_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member className_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((className == null) || (className != null))){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member className_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier className_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ ^ ^ ^ 
if(((className == null) || className.isEmpty())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member className_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member className_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((className == null) && (className == null))){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member className_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member className_ter ^ ^ ^ ^ operandr Literal prefix_operators -_ter ^ ^ value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((className == null) || (className == -1))){

condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member className_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ 
if((className < null)){
IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member className_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MemberReference member className_ter ^ ^ ^ ^ ^ ^ ^ 
if(((className == null) || className)){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member className_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member className_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((className == null) && (className != null))){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member className_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member className_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((className == null) || (className == 0))){

IfStatement condition MethodInvocation qualifier className_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ ^ 
if(className.isEmpty()){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member className_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier className_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ ^ ^ ^ 
if(((className == null) || !className.isEmpty())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member className_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member className_ter ^ ^ ^ ^ operandr Literal prefix_operators -_ter ^ ^ value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((className == null) || (className != -1))){

IfStatement condition MemberReference member className_ter ^ ^ ^ ^ ^ 
if(className){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member className_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member i_ter ^ ^ ^ ^ operandr Literal prefix_operators -_ter ^ ^ value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((className == null) || (i == -1))){

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member className_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if((className == null)){
return null;}
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member className_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier className_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ ^ ^ ^ 
if(((className == null) && className.isEmpty())){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier className_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ ^ 
if(!className.isEmpty()){

IfStatement condition MethodInvocation qualifier className_ter ^ ^ arguments MemberReference member className_ter ^ ^ ^ ^ member equals_ter ^ ^ ^ ^ ^ 
if(className.equals(className)){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member className_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member PACKAGE_SEPARATOR_CHAR_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((className == null) || (PACKAGE_SEPARATOR_CHAR == null))){

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member className_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((className != null)){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member className_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member className_ter ^ ^ ^ ^ operandr MemberReference member className_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((className == null) || (className == className))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member className_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member className_ter ^ ^ ^ ^ operandr Literal prefix_operators -_ter ^ ^ value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((className == null) && (className == -1))){

condition BinaryOperation operator -_ter ^ ^ operandl MemberReference member className_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ 
if((className - null)){
IfStatement condition MemberReference prefix_operators !_ter ^ ^ member className_ter ^ ^ ^ ^ ^ 
if(!className){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member PACKAGE_SEPARATOR_CHAR_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ 
if((PACKAGE_SEPARATOR_CHAR == null)){
IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member className_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member className_ter ^ ^ ^ ^ operandr MemberReference member PACKAGE_SEPARATOR_CHAR_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((className == null) || (className == PACKAGE_SEPARATOR_CHAR))){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member className_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ 
if((className == "null")){
stderr: 