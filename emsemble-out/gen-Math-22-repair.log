stdout: ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
return false;
ReturnStatement expression MemberReference member isSupportLowerBoundInclusive_ter ^ ^ ^ ^ ^ 
return isSupportLowerBoundInclusive;
ReturnStatement expression MethodInvocation member isSupportLowerBoundInclusive_ter ^ ^ ^ ^ ^ 
return isSupportLowerBoundInclusive();
ReturnStatement expression This selectors MemberReference member isSupportLowerBoundInclusive_ter ^ ^ ^ ^ ^ ^ ^ 
return this.isSupportLowerBoundInclusive;
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
return null;
ReturnStatement expression MethodInvocation prefix_operators !_ter ^ ^ member isSupportLowerBoundInclusive_ter ^ ^ ^ ^ ^ 
return !isSupportLowerBoundInclusive();
ReturnStatement expression This selectors MethodInvocation member isSupportLowerBoundInclusive_ter ^ ^ ^ ^ ^ ^ ^ 
return this.isSupportLowerBoundInclusive();
ReturnStatement expression Literal value 0_ter ^ ^ ^ ^ ^ 
return 0;
ReturnStatement expression This_ter ^ ^ ^ 
return this;
ReturnStatement expression SuperMethodInvocation member isSupportLowerBoundInclusive_ter ^ ^ ^ ^ ^ 
return super.isSupportLowerBoundInclusive();
ReturnStatement expression Literal prefix_operators -_ter ^ ^ value false_ter ^ ^ ^ ^ ^ 
return -false;
ReturnStatement expression Literal value 1_ter ^ ^ ^ ^ ^ 
return 1;
ReturnStatement expression This selectors MemberReference member isSupportLowerBoundInclusive_ter ^ ^ ^ MethodInvocation member isSupportLowerBoundInclusive_ter ^ ^ ^ ^ ^ ^ ^ 
return this.isSupportLowerBoundInclusive.isSupportLowerBoundInclusive();
ReturnStatement expression Assignment expressionl MemberReference member isSupportLowerBoundInclusive_ter ^ ^ ^ ^ value Literal value false_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
return isSupportLowerBoundInclusive = false;
ReturnStatement expression MemberReference member par0 ^ ^ ^ ^ ^ 
return ;
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
return "null";
ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ 
return true;
ReturnStatement expression MethodInvocation member isSupportUpperBoundInclusive_ter ^ ^ ^ ^ ^ 
return isSupportUpperBoundInclusive();
ReturnStatement expression MemberReference member isSupportUpperBoundInclusive_ter ^ ^ ^ ^ ^ 
return isSupportUpperBoundInclusive;
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
return "null";
ReturnStatement expression This selectors MemberReference member isSupportUpperBoundInclusive_ter ^ ^ ^ ^ ^ ^ ^ 
return this.isSupportUpperBoundInclusive;
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
return null;
ReturnStatement expression This selectors MethodInvocation member isSupportUpperBoundInclusive_ter ^ ^ ^ ^ ^ ^ ^ 
return this.isSupportUpperBoundInclusive();
ReturnStatement expression MethodInvocation prefix_operators !_ter ^ ^ member isSupportUpperBoundInclusive_ter ^ ^ ^ ^ ^ 
return !isSupportUpperBoundInclusive();
ReturnStatement expression This_ter ^ ^ ^ 
return this;
ReturnStatement expression SuperMethodInvocation member isSupportUpperBoundInclusive_ter ^ ^ ^ ^ ^ 
return super.isSupportUpperBoundInclusive();
ReturnStatement expression Literal prefix_operators -_ter ^ ^ value true_ter ^ ^ ^ ^ ^ 
return -true;
ReturnStatement expression This selectors MemberReference member isSupportUpperBoundInclusive_ter ^ ^ ^ MethodInvocation member isSupportUpperBoundInclusive_ter ^ ^ ^ ^ ^ ^ ^ 
return this.isSupportUpperBoundInclusive.isSupportUpperBoundInclusive();
ReturnStatement expression MemberReference member par0 ^ ^ ^ ^ ^ 
return ;
ReturnStatement expression Literal value 1_ter ^ ^ ^ ^ ^ 
return 1;
ReturnStatement expression Literal prefix_operators -_ter ^ ^ value false_ter ^ ^ ^ ^ ^ 
return -false;
ReturnStatement expression Assignment expressionl MemberReference member isSupportUpperBoundInclusive_ter ^ ^ ^ ^ value Literal value true_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
return isSupportUpperBoundInclusive = true;
ReturnStatement expression Assignment expressionl MemberReference member isSupportUpperBoundInclusive_ter ^ ^ ^ ^ value Literal value false_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
return isSupportUpperBoundInclusive = false;
stderr: 