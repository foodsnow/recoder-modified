stdout: 
StatementExpression expression Assignment expressionl MemberReference member days_ter ^ ^ ^ ^ value Literal value 24_ter ^ ^ ^ ^ type +=_ter ^ ^ ^ ^ ^ 
days += 24;

StatementExpression expression Assignment expressionl MemberReference member days_ter ^ ^ ^ ^ value Literal value 2_ter ^ ^ ^ ^ type +=_ter ^ ^ ^ ^ ^ 
days += 2;

StatementExpression expression Assignment expressionl MemberReference member days_ter ^ ^ ^ ^ value Literal value 31_ter ^ ^ ^ ^ type +=_ter ^ ^ ^ ^ ^ 
days += 31;

StatementExpression expression Assignment expressionl MemberReference member days_ter ^ ^ ^ ^ value Literal value 1_ter ^ ^ ^ ^ type +=_ter ^ ^ ^ ^ ^ 
days += 1;

StatementExpression expression Assignment expressionl MemberReference member days_ter ^ ^ ^ ^ value Literal value 0_ter ^ ^ ^ ^ type +=_ter ^ ^ ^ ^ ^ 
days += 0;

StatementExpression expression Assignment expressionl MemberReference member days_ter ^ ^ ^ ^ value Literal value true_ter ^ ^ ^ ^ type +=_ter ^ ^ ^ ^ ^ 
days += true;

StatementExpression expression Assignment expressionl MemberReference member days_ter ^ ^ ^ ^ value Literal value false_ter ^ ^ ^ ^ type +=_ter ^ ^ ^ ^ ^ 
days += false;

StatementExpression expression Assignment expressionl MemberReference member hours_ter ^ ^ ^ ^ value Literal value 24_ter ^ ^ ^ ^ type +=_ter ^ ^ ^ ^ ^ 
hours += 24;

StatementExpression expression Assignment expressionl MemberReference member months_ter ^ ^ ^ ^ value Literal value 1_ter ^ ^ ^ ^ type -=_ter ^ ^ ^ ^ ^ 
months -= 1;

StatementExpression expression Assignment expressionl MemberReference member days_ter ^ ^ ^ ^ value Literal value 1_ter ^ ^ ^ ^ type -=_ter ^ ^ ^ ^ ^ 
days -= 1;

StatementExpression expression Assignment expressionl MemberReference member days_ter ^ ^ ^ ^ value Literal value 1_ter ^ ^ ^ ^ type -=_ter ^ ^ ^ ^ ^ 
days -= 1;

StatementExpression expression Assignment expressionl MemberReference member months_ter ^ ^ ^ ^ value Literal value 1_ter ^ ^ ^ ^ type -=_ter ^ ^ ^ ^ ^ 
months -= 1;

StatementExpression expression Assignment expressionl MemberReference member hours_ter ^ ^ ^ ^ value Literal value 24_ter ^ ^ ^ ^ type +=_ter ^ ^ ^ ^ ^ 
hours += 24;

ReturnStatement_ter ^ 
if (true) { return;
 }

StatementExpression expression Assignment expressionl MemberReference member months_ter ^ ^ ^ ^ value Literal value 12_ter ^ ^ ^ ^ type +=_ter ^ ^ ^ ^ ^ 
months += 12;

StatementExpression expression Assignment expressionl MemberReference member years_ter ^ ^ ^ ^ value Literal value 1_ter ^ ^ ^ ^ type -=_ter ^ ^ ^ ^ ^ 
years -= 1;

StatementExpression expression Assignment expressionl MemberReference member days_ter ^ ^ ^ ^ value Literal value null_ter ^ ^ ^ ^ type +=_ter ^ ^ ^ ^ ^ 
days += null;

ReturnStatement_ter ^ 
return;

StatementExpression expression Assignment expressionl MemberReference member days_ter ^ ^ ^ ^ value MemberReference member months_ter ^ ^ ^ ^ type +=_ter ^ ^ ^ ^ ^ 
days += months;

BreakStatement_ter ^ 
break;

StatementExpression expression Assignment expressionl MemberReference member days_ter ^ ^ ^ ^ value Literal value 31_ter ^ ^ ^ ^ type *=_ter ^ ^ ^ ^ ^ 
days *= 31;

StatementExpression expression Assignment expressionl MemberReference member days_ter ^ ^ ^ ^ value Literal value <string>_ter ^ ^ ^ ^ type +=_ter ^ ^ ^ ^ ^ 
days += "null";

StatementExpression expression Assignment expressionl MemberReference member days_ter ^ ^ ^ ^ value MemberReference member days_ter ^ ^ ^ ^ type +=_ter ^ ^ ^ ^ ^ 
days += days;

StatementExpression expression Assignment expressionl MemberReference member days_ter ^ ^ ^ ^ value Literal value 31_ter ^ ^ ^ ^ type -=_ter ^ ^ ^ ^ ^ 
days -= 31;

StatementExpression expression Assignment expressionl MemberReference member days_ter ^ ^ ^ ^ value MemberReference member hours_ter ^ ^ ^ ^ type +=_ter ^ ^ ^ ^ ^ 
days += hours;

IfStatement condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member days_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ 
if((days < 0)){

StatementExpression expression Assignment expressionl MemberReference member days_ter ^ ^ ^ ^ value Literal value 31_ter ^ ^ ^ ^ type &=_ter ^ ^ ^ ^ ^ 
days &= 31;

StatementExpression expression Assignment expressionl MemberReference member months_ter ^ ^ ^ ^ value Literal value 31_ter ^ ^ ^ ^ type +=_ter ^ ^ ^ ^ ^ 
months += 31;

StatementExpression expression Assignment expressionl MemberReference member days_ter ^ ^ ^ ^ value MemberReference member months_ter ^ ^ ^ ^ type *=_ter ^ ^ ^ ^ ^ 
days *= months;

StatementExpression expression Assignment expressionl MemberReference member days_ter ^ ^ ^ ^ value MemberReference member days_ter ^ ^ ^ ^ type *=_ter ^ ^ ^ ^ ^ 
days *= days;

StatementExpression expression Assignment expressionl MemberReference member days_ter ^ ^ ^ ^ value MemberReference member hours_ter ^ ^ ^ ^ type *=_ter ^ ^ ^ ^ ^ 
days *= hours;


StatementExpression expression Assignment expressionl MemberReference member milliseconds_ter ^ ^ ^ ^ value MethodInvocation arguments MemberReference member start_ter ^ ^ ^ MemberReference member end_ter ^ ^ ^ MemberReference qualifier Calendar_ter ^ ^ member MILLISECOND_ter ^ ^ ^ MemberReference member milliseconds_ter ^ ^ ^ ^ member reduceAndCorrect_ter ^ ^ ^ ^ type -=_ter ^ ^ ^ ^ ^ 
milliseconds -= reduceAndCorrect(start, end, Calendar.MILLISECOND, milliseconds);

StatementExpression expression MethodInvocation arguments MemberReference member start_ter ^ ^ ^ MemberReference member end_ter ^ ^ ^ MemberReference qualifier Calendar_ter ^ ^ member MILLISECOND_ter ^ ^ ^ MemberReference member milliseconds_ter ^ ^ ^ ^ member reduceAndCorrect_ter ^ ^ ^ ^ ^ 
reduceAndCorrect(start, end, Calendar.MILLISECOND, milliseconds);

StatementExpression expression Assignment expressionl MemberReference member milliseconds_ter ^ ^ ^ ^ value MethodInvocation arguments MemberReference member start_ter ^ ^ ^ MemberReference member end_ter ^ ^ ^ MemberReference qualifier Calendar_ter ^ ^ member MILLISECOND_ter ^ ^ ^ MemberReference member milliseconds_ter ^ ^ ^ ^ member reduceAndCorrect_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
milliseconds = reduceAndCorrect(start, end, Calendar.MILLISECOND, milliseconds);

StatementExpression expression Assignment expressionl MemberReference member milliseconds_ter ^ ^ ^ ^ value MethodInvocation arguments MemberReference member start_ter ^ ^ ^ MemberReference member end_ter ^ ^ ^ MemberReference qualifier Calendar_ter ^ ^ member MILLISECOND_ter ^ ^ ^ MemberReference member milliseconds_ter ^ ^ ^ ^ member reduceAndCorrect_ter ^ ^ ^ ^ type +=_ter ^ ^ ^ ^ ^ 
milliseconds += reduceAndCorrect(start, end, Calendar.MILLISECOND, milliseconds);

StatementExpression expression Assignment expressionl MemberReference member milliseconds_ter ^ ^ ^ ^ value MethodInvocation arguments MemberReference member years_ter ^ ^ ^ MemberReference member end_ter ^ ^ ^ MemberReference qualifier Calendar_ter ^ ^ member MILLISECOND_ter ^ ^ ^ MemberReference member milliseconds_ter ^ ^ ^ ^ member reduceAndCorrect_ter ^ ^ ^ ^ type -=_ter ^ ^ ^ ^ ^ 
milliseconds -= reduceAndCorrect(years, end, Calendar.MILLISECOND, milliseconds);

StatementExpression expression Assignment expressionl MemberReference member milliseconds_ter ^ ^ ^ ^ value MethodInvocation arguments MemberReference member start_ter ^ ^ ^ MemberReference member end_ter ^ ^ ^ MemberReference member years_ter ^ ^ ^ MemberReference member milliseconds_ter ^ ^ ^ ^ member reduceAndCorrect_ter ^ ^ ^ ^ type -=_ter ^ ^ ^ ^ ^ 
milliseconds -= reduceAndCorrect(start, end, years, milliseconds);

StatementExpression expression Assignment expressionl MemberReference member milliseconds_ter ^ ^ ^ ^ value MethodInvocation arguments MemberReference member start_ter ^ ^ ^ MemberReference member end_ter ^ ^ ^ MemberReference qualifier Calendar_ter ^ ^ member MILLISECOND_ter ^ ^ ^ MemberReference member years_ter ^ ^ ^ ^ member reduceAndCorrect_ter ^ ^ ^ ^ type -=_ter ^ ^ ^ ^ ^ 
milliseconds -= reduceAndCorrect(start, end, Calendar.MILLISECOND, years);

StatementExpression expression Assignment expressionl MemberReference member milliseconds_ter ^ ^ ^ ^ value MethodInvocation arguments MemberReference member start_ter ^ ^ ^ MemberReference member years_ter ^ ^ ^ MemberReference qualifier Calendar_ter ^ ^ member MILLISECOND_ter ^ ^ ^ MemberReference member milliseconds_ter ^ ^ ^ ^ member reduceAndCorrect_ter ^ ^ ^ ^ type -=_ter ^ ^ ^ ^ ^ 
milliseconds -= reduceAndCorrect(start, years, Calendar.MILLISECOND, milliseconds);

StatementExpression expression Assignment expressionl MemberReference member milliseconds_ter ^ ^ ^ ^ value MethodInvocation arguments MemberReference member months_ter ^ ^ ^ MemberReference member end_ter ^ ^ ^ MemberReference qualifier Calendar_ter ^ ^ member MILLISECOND_ter ^ ^ ^ MemberReference member milliseconds_ter ^ ^ ^ ^ member reduceAndCorrect_ter ^ ^ ^ ^ type -=_ter ^ ^ ^ ^ ^ 
milliseconds -= reduceAndCorrect(months, end, Calendar.MILLISECOND, milliseconds);

StatementExpression expression Assignment expressionl MemberReference member milliseconds_ter ^ ^ ^ ^ value MethodInvocation arguments MemberReference member start_ter ^ ^ ^ MemberReference member end_ter ^ ^ ^ MemberReference member months_ter ^ ^ ^ MemberReference member milliseconds_ter ^ ^ ^ ^ member reduceAndCorrect_ter ^ ^ ^ ^ type -=_ter ^ ^ ^ ^ ^ 
milliseconds -= reduceAndCorrect(start, end, months, milliseconds);

StatementExpression expression Assignment expressionl MemberReference member milliseconds_ter ^ ^ ^ ^ value MethodInvocation arguments MemberReference member start_ter ^ ^ ^ MemberReference member end_ter ^ ^ ^ MemberReference qualifier Calendar_ter ^ ^ member MILLISECOND_ter ^ ^ ^ MemberReference member months_ter ^ ^ ^ ^ member reduceAndCorrect_ter ^ ^ ^ ^ type -=_ter ^ ^ ^ ^ ^ 
milliseconds -= reduceAndCorrect(start, end, Calendar.MILLISECOND, months);

StatementExpression expression Assignment expressionl MemberReference member milliseconds_ter ^ ^ ^ ^ value MethodInvocation arguments MemberReference member milliseconds_ter ^ ^ ^ ^ member reduceAndCorrect_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
milliseconds = reduceAndCorrect(milliseconds);

StatementExpression expression Assignment expressionl MemberReference member months_ter ^ ^ ^ ^ value MethodInvocation arguments MemberReference member start_ter ^ ^ ^ MemberReference member end_ter ^ ^ ^ MemberReference qualifier Calendar_ter ^ ^ member MILLISECOND_ter ^ ^ ^ MemberReference member milliseconds_ter ^ ^ ^ ^ member reduceAndCorrect_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
months = reduceAndCorrect(start, end, Calendar.MILLISECOND, milliseconds);

StatementExpression expression Assignment expressionl MemberReference member milliseconds_ter ^ ^ ^ ^ value MethodInvocation arguments MemberReference member end_ter ^ ^ ^ ^ member reduceAndCorrect_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
milliseconds = reduceAndCorrect(end);

StatementExpression expression Assignment expressionl MemberReference member months_ter ^ ^ ^ ^ value MethodInvocation arguments MemberReference member start_ter ^ ^ ^ MemberReference member end_ter ^ ^ ^ MemberReference qualifier Calendar_ter ^ ^ member MILLISECOND_ter ^ ^ ^ MemberReference member milliseconds_ter ^ ^ ^ ^ member reduceAndCorrect_ter ^ ^ ^ ^ type +=_ter ^ ^ ^ ^ ^ 
months += reduceAndCorrect(start, end, Calendar.MILLISECOND, milliseconds);

StatementExpression expression Assignment expressionl MemberReference member milliseconds_ter ^ ^ ^ ^ value MethodInvocation arguments MemberReference member start_ter ^ ^ ^ MemberReference member end_ter ^ ^ ^ MemberReference qualifier Calendar_ter ^ ^ member MILLISECOND_ter ^ ^ ^ MemberReference member milliseconds_ter ^ ^ ^ ^ member reduceAndCorrect_ter ^ ^ ^ ^ type |=_ter ^ ^ ^ ^ ^ 
milliseconds |= reduceAndCorrect(start, end, Calendar.MILLISECOND, milliseconds);

StatementExpression expression Assignment expressionl MemberReference member milliseconds_ter ^ ^ ^ ^ value MethodInvocation arguments MemberReference member start_ter ^ ^ ^ MemberReference member end_ter ^ ^ ^ MemberReference qualifier Calendar_ter ^ ^ member MILLISECOND_ter ^ ^ ^ MemberReference member milliseconds_ter ^ ^ ^ ^ member reduceAndCorrect_ter ^ ^ ^ ^ type &=_ter ^ ^ ^ ^ ^ 
milliseconds &= reduceAndCorrect(start, end, Calendar.MILLISECOND, milliseconds);

StatementExpression expression Assignment expressionl MemberReference member milliseconds_ter ^ ^ ^ ^ value MethodInvocation arguments MemberReference member start_ter ^ ^ ^ MemberReference member months_ter ^ ^ ^ MemberReference qualifier Calendar_ter ^ ^ member MILLISECOND_ter ^ ^ ^ MemberReference member milliseconds_ter ^ ^ ^ ^ member reduceAndCorrect_ter ^ ^ ^ ^ type -=_ter ^ ^ ^ ^ ^ 
milliseconds -= reduceAndCorrect(start, months, Calendar.MILLISECOND, milliseconds);

StatementExpression expression Assignment expressionl MemberReference member months_ter ^ ^ ^ ^ value Literal value 12_ter ^ ^ ^ ^ type +=_ter ^ ^ ^ ^ ^ 
months += 12;

IfStatement condition MethodInvocation arguments MemberReference member start_ter ^ ^ ^ MemberReference member end_ter ^ ^ ^ MemberReference qualifier Calendar_ter ^ ^ member MILLISECOND_ter ^ ^ ^ MemberReference member milliseconds_ter ^ ^ ^ ^ member reduceAndCorrect_ter ^ ^ ^ ^ ^ 
if(reduceAndCorrect(start, end, Calendar.MILLISECOND, milliseconds)){


StatementExpression expression Assignment expressionl MemberReference member milliseconds_ter ^ ^ ^ ^ value MethodInvocation arguments MemberReference member milliseconds_ter ^ ^ ^ ^ member reduceAndCorrect_ter ^ ^ ^ ^ type +=_ter ^ ^ ^ ^ ^ 
milliseconds += reduceAndCorrect(milliseconds);

StatementExpression expression Assignment expressionl MemberReference member milliseconds_ter ^ ^ ^ ^ value MethodInvocation arguments MemberReference member start_ter ^ ^ ^ ^ member reduceAndCorrect_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
milliseconds = reduceAndCorrect(start);

StatementExpression expression Assignment expressionl MemberReference member milliseconds_ter ^ ^ ^ ^ value MethodInvocation arguments MemberReference member end_ter ^ ^ ^ ^ member reduceAndCorrect_ter ^ ^ ^ ^ type +=_ter ^ ^ ^ ^ ^ 
milliseconds += reduceAndCorrect(end);

StatementExpression expression Assignment expressionl MemberReference member milliseconds_ter ^ ^ ^ ^ value MethodInvocation member reduceAndCorrect_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
milliseconds = reduceAndCorrect();

StatementExpression expression Assignment expressionl MemberReference member seconds_ter ^ ^ ^ ^ value MethodInvocation arguments MemberReference member start_ter ^ ^ ^ MemberReference member end_ter ^ ^ ^ MemberReference qualifier Calendar_ter ^ ^ member SECOND_ter ^ ^ ^ MemberReference member seconds_ter ^ ^ ^ ^ member reduceAndCorrect_ter ^ ^ ^ ^ type -=_ter ^ ^ ^ ^ ^ 
seconds -= reduceAndCorrect(start, end, Calendar.SECOND, seconds);

StatementExpression expression Assignment expressionl MemberReference member years_ter ^ ^ ^ ^ value Literal value 1_ter ^ ^ ^ ^ type -=_ter ^ ^ ^ ^ ^ 
years -= 1;

StatementExpression expression Assignment expressionl MemberReference member milliseconds_ter ^ ^ ^ ^ value MethodInvocation arguments MemberReference member start_ter ^ ^ ^ MemberReference member end_ter ^ ^ ^ MemberReference member start_ter ^ ^ ^ MemberReference member milliseconds_ter ^ ^ ^ ^ member reduceAndCorrect_ter ^ ^ ^ ^ type -=_ter ^ ^ ^ ^ ^ 
milliseconds -= reduceAndCorrect(start, end, start, milliseconds);

StatementExpression expression Assignment expressionl MemberReference member milliseconds_ter ^ ^ ^ ^ value MethodInvocation arguments MemberReference member start_ter ^ ^ ^ MemberReference member end_ter ^ ^ ^ MemberReference member end_ter ^ ^ ^ MemberReference member milliseconds_ter ^ ^ ^ ^ member reduceAndCorrect_ter ^ ^ ^ ^ type -=_ter ^ ^ ^ ^ ^ 
milliseconds -= reduceAndCorrect(start, end, end, milliseconds);

StatementExpression expression Assignment expressionl MemberReference member milliseconds_ter ^ ^ ^ ^ value MethodInvocation arguments MemberReference member start_ter ^ ^ ^ MemberReference member end_ter ^ ^ ^ MemberReference member e_ter ^ ^ ^ MemberReference member milliseconds_ter ^ ^ ^ ^ member reduceAndCorrect_ter ^ ^ ^ ^ type -=_ter ^ ^ ^ ^ ^ 
milliseconds -= reduceAndCorrect(start, end, e, milliseconds);

StatementExpression expression Assignment expressionl MemberReference member milliseconds_ter ^ ^ ^ ^ value MethodInvocation arguments MemberReference member start_ter ^ ^ ^ MemberReference member end_ter ^ ^ ^ MemberReference member milliseconds_ter ^ ^ ^ MemberReference member milliseconds_ter ^ ^ ^ ^ member reduceAndCorrect_ter ^ ^ ^ ^ type -=_ter ^ ^ ^ ^ ^ 
milliseconds -= reduceAndCorrect(start, end, milliseconds, milliseconds);

StatementExpression expression Assignment expressionl MemberReference member milliseconds_ter ^ ^ ^ ^ value MethodInvocation arguments MemberReference member end_ter ^ ^ ^ MemberReference member milliseconds_ter ^ ^ ^ MemberReference member milliseconds_ter ^ ^ ^ ^ member reduceAndCorrect_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
milliseconds = reduceAndCorrect(end, milliseconds, milliseconds);

StatementExpression expression Assignment expressionl MemberReference member milliseconds_ter ^ ^ ^ ^ value MethodInvocation arguments MemberReference member milliseconds_ter ^ ^ ^ MemberReference member milliseconds_ter ^ ^ ^ MemberReference member milliseconds_ter ^ ^ ^ ^ member reduceAndCorrect_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
milliseconds = reduceAndCorrect(milliseconds, milliseconds, milliseconds);

StatementExpression expression Assignment expressionl MemberReference member milliseconds_ter ^ ^ ^ ^ value MethodInvocation arguments MemberReference member end_ter ^ ^ ^ MemberReference member end_ter ^ ^ ^ MemberReference member milliseconds_ter ^ ^ ^ ^ member reduceAndCorrect_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
milliseconds = reduceAndCorrect(end, end, milliseconds);

stderr: 