stdout: else_statement -> BlockStatement
using GPU
p
path org.apache.commons.math.stat.descriptive.moment.Variance
evaluate
Position(line=501, column=12)
FOUND IT!
[{'bugid': 'Math-41', 'treeroot': <Searchnode.Node object at 0x7f7385cb9810>, 'troot': <Searchnode.Node object at 0x7f7399317e90>, 'oldcode': '                for (int i = 0; i < weights.length; i++) {', 'filepath': 'buggy/Math-41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java', 'subroot': <Searchnode.Node object at 0x7f7388348390>, 'vardic': {'evaluate_ter': 'meth0', 'var_ter': 'loc0', 'accum_ter': 'loc1', 'dev_ter': 'loc2', 'accum2_ter': 'loc3', 'i_ter': 'loc6', 'sumWts_ter': 'loc5', 'values_ter': 'par0', 'weights_ter': 'par1', 'mean_ter': 'par2', 'begin_ter': 'par3', 'length_ter': 'par4'}, 'typedic': {'var_ter': 'double', 'accum_ter': 'double', 'dev_ter': 'double', 'accum2_ter': 'double', 'i_ter': 'int', 'sumWts_ter': 'double', 'values_ter': 'double', 'weights_ter': 'double', 'mean_ter': 'double', 'begin_ter': 'int', 'length_ter': 'int'}, 'idss': 'Math-41', 'classname': 'org.apache.commons.math.stat.descriptive.moment.Variance', 'precode': '/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the "License"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.math.stat.descriptive.moment;\n\nimport java.io.Serializable;\n\nimport org.apache.commons.math.exception.NullArgumentException;\nimport org.apache.commons.math.exception.util.LocalizedFormats;\nimport org.apache.commons.math.stat.descriptive.WeightedEvaluation;\nimport org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic;\nimport org.apache.commons.math.util.MathUtils;\n\n/**\n * Computes the variance of the available values.  By default, the unbiased\n * "sample variance" definitional formula is used:\n * <p>\n * variance = sum((x_i - mean)^2) / (n - 1) </p>\n * <p>\n * where mean is the {@link Mean} and <code>n</code> is the number\n * of sample observations.</p>\n * <p>\n * The definitional formula does not have good numerical properties, so\n * this implementation does not compute the statistic using the definitional\n * formula. <ul>\n * <li> The <code>getResult</code> method computes the variance using\n * updating formulas based on West\'s algorithm, as described in\n * <a href="http://doi.acm.org/10.1145/359146.359152"> Chan, T. F. and\n * J. G. Lewis 1979, <i>Communications of the ACM</i>,\n * vol. 22 no. 9, pp. 526-531.</a></li>\n * <li> The <code>evaluate</code> methods leverage the fact that they have the\n * full array of values in memory to execute a two-pass algorithm.\n * Specifically, these methods use the "corrected two-pass algorithm" from\n * Chan, Golub, Levesque, <i>Algorithms for Computing the Sample Variance</i>,\n * American Statistician, vol. 37, no. 3 (1983) pp. 242-247.</li></ul>\n * Note that adding values using <code>increment</code> or\n * <code>incrementAll</code> and then executing <code>getResult</code> will\n * sometimes give a different, less accurate, result than executing\n * <code>evaluate</code> with the full array of values. The former approach\n * should only be used when the full array of values is not available.</p>\n * <p>\n * The "population variance"  ( sum((x_i - mean)^2) / n ) can also\n * be computed using this statistic.  The <code>isBiasCorrected</code>\n * property determines whether the "population" or "sample" value is\n * returned by the <code>evaluate</code> and <code>getResult</code> methods.\n * To compute population variances, set this property to <code>false.</code>\n * </p>\n * <p>\n * <strong>Note that this implementation is not synchronized.</strong> If\n * multiple threads access an instance of this class concurrently, and at least\n * one of the threads invokes the <code>increment()</code> or\n * <code>clear()</code> method, it must be synchronized externally.</p>\n *\n * @version $Id$\n */\npublic class Variance extends AbstractStorelessUnivariateStatistic implements Serializable, WeightedEvaluation {\n\n    /** Serializable version identifier */\n    private static final long serialVersionUID = -9111962718267217978L;\n\n    /** SecondMoment is used in incremental calculation of Variance*/\n    protected SecondMoment moment = null;\n\n    /**\n     * Whether or not {@link #increment(double)} should increment\n     * the internal second moment. When a Variance is constructed with an\n     * external SecondMoment as a constructor parameter, this property is\n     * set to false and increments must be applied to the second moment\n     * directly.\n     */\n    protected boolean incMoment = true;\n\n    /**\n     * Whether or not bias correction is applied when computing the\n     * value of the statistic. True means that bias is corrected.  See\n     * {@link Variance} for details on the formula.\n     */\n    private boolean isBiasCorrected = true;\n\n    /**\n     * Constructs a Variance with default (true) <code>isBiasCorrected</code>\n     * property.\n     */\n    public Variance() {\n        moment = new SecondMoment();\n    }\n\n    /**\n     * Constructs a Variance based on an external second moment.\n     * When this constructor is used, the statistic may only be\n     * incremented via the moment, i.e., {@link #increment(double)}\n     * does nothing; whereas {@code m2.increment(value)} increments\n     * both {@code m2} and the Variance instance constructed from it.\n     *\n     * @param m2 the SecondMoment (Third or Fourth moments work\n     * here as well.)\n     */\n    public Variance(final SecondMoment m2) {\n        incMoment = false;\n        this.moment = m2;\n    }\n\n    /**\n     * Constructs a Variance with the specified <code>isBiasCorrected</code>\n     * property\n     *\n     * @param isBiasCorrected  setting for bias correction - true means\n     * bias will be corrected and is equivalent to using the argumentless\n     * constructor\n     */\n    public Variance(boolean isBiasCorrected) {\n        moment = new SecondMoment();\n        this.isBiasCorrected = isBiasCorrected;\n    }\n\n    /**\n     * Constructs a Variance with the specified <code>isBiasCorrected</code>\n     * property and the supplied external second moment.\n     *\n     * @param isBiasCorrected  setting for bias correction - true means\n     * bias will be corrected\n     * @param m2 the SecondMoment (Third or Fourth moments work\n     * here as well.)\n     */\n    public Variance(boolean isBiasCorrected, SecondMoment m2) {\n        incMoment = false;\n        this.moment = m2;\n        this.isBiasCorrected = isBiasCorrected;\n    }\n\n    /**\n     * Copy constructor, creates a new {@code Variance} identical\n     * to the {@code original}\n     *\n     * @param original the {@code Variance} instance to copy\n     */\n    public Variance(Variance original) {\n        copy(original, this);\n    }\n\n    /**\n     * {@inheritDoc}\n     * <p>If all values are available, it is more accurate to use\n     * {@link #evaluate(double[])} rather than adding values one at a time\n     * using this method and then executing {@link #getResult}, since\n     * <code>evaluate</code> leverages the fact that is has the full\n     * list of values together to execute a two-pass algorithm.\n     * See {@link Variance}.</p>\n     *\n     * <p>Note also that when {@link #Variance(SecondMoment)} is used to\n     * create a Variance, this method does nothing. In that case, the\n     * SecondMoment should be incremented directly.</p>\n     */\n    @Override\n    public void increment(final double d) {\n        if (incMoment) {\n            moment.increment(d);\n        }\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public double getResult() {\n            if (moment.n == 0) {\n                return Double.NaN;\n            } else if (moment.n == 1) {\n                return 0d;\n            } else {\n                if (isBiasCorrected) {\n                    return moment.m2 / (moment.n - 1d);\n                } else {\n                    return moment.m2 / (moment.n);\n                }\n            }\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public long getN() {\n        return moment.getN();\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void clear() {\n        if (incMoment) {\n            moment.clear();\n        }\n    }\n\n    /**\n     * Returns the variance of the entries in the input array, or\n     * <code>Double.NaN</code> if the array is empty.\n     * <p>\n     * See {@link Variance} for details on the computing algorithm.</p>\n     * <p>\n     * Returns 0 for a single-value (i.e. length = 1) sample.</p>\n     * <p>\n     * Throws <code>IllegalArgumentException</code> if the array is null.</p>\n     * <p>\n     * Does not change the internal state of the statistic.</p>\n     *\n     * @param values the input array\n     * @return the variance of the values or Double.NaN if length = 0\n     * @throws IllegalArgumentException if the array is null\n     */\n    @Override\n    public double evaluate(final double[] values) {\n        if (values == null) {\n            throw new NullArgumentException(LocalizedFormats.INPUT_ARRAY);\n        }\n        return evaluate(values, 0, values.length);\n    }\n\n    /**\n     * Returns the variance of the entries in the specified portion of\n     * the input array, or <code>Double.NaN</code> if the designated subarray\n     * is empty.\n     * <p>\n     * See {@link Variance} for details on the computing algorithm.</p>\n     * <p>\n     * Returns 0 for a single-value (i.e. length = 1) sample.</p>\n     * <p>\n     * Does not change the internal state of the statistic.</p>\n     * <p>\n     * Throws <code>IllegalArgumentException</code> if the array is null.</p>\n     *\n     * @param values the input array\n     * @param begin index of the first array element to include\n     * @param length the number of elements to include\n     * @return the variance of the values or Double.NaN if length = 0\n     * @throws IllegalArgumentException if the array is null or the array index\n     *  parameters are not valid\n     */\n    @Override\n    public double evaluate(final double[] values, final int begin, final int length) {\n\n        double var = Double.NaN;\n\n        if (test(values, begin, length)) {\n            clear();\n            if (length == 1) {\n                var = 0.0;\n            } else if (length > 1) {\n                Mean mean = new Mean();\n                double m = mean.evaluate(values, begin, length);\n                var = evaluate(values, m, begin, length);\n            }\n        }\n        return var;\n    }\n\n    /**\n     * <p>Returns the weighted variance of the entries in the specified portion of\n     * the input array, or <code>Double.NaN</code> if the designated subarray\n     * is empty.</p>\n     * <p>\n     * Uses the formula <pre>\n     *   &Sigma;(weights[i]*(values[i] - weightedMean)<sup>2</sup>)/(&Sigma;(weights[i]) - 1)\n     * </pre>\n     * where weightedMean is the weighted mean</p>\n     * <p>\n     * This formula will not return the same result as the unweighted variance when all\n     * weights are equal, unless all weights are equal to 1. The formula assumes that\n     * weights are to be treated as "expansion values," as will be the case if for example\n     * the weights represent frequency counts. To normalize weights so that the denominator\n     * in the variance computation equals the length of the input vector minus one, use <pre>\n     *   <code>evaluate(values, MathArrays.normalizeArray(weights, values.length)); </code>\n     * </pre>\n     * <p>\n     * Returns 0 for a single-value (i.e. length = 1) sample.</p>\n     * <p>\n     * Throws <code>IllegalArgumentException</code> if any of the following are true:\n     * <ul><li>the values array is null</li>\n     *     <li>the weights array is null</li>\n     *     <li>the weights array does not have the same length as the values array</li>\n     *     <li>the weights array contains one or more infinite values</li>\n     *     <li>the weights array contains one or more NaN values</li>\n     *     <li>the weights array contains negative values</li>\n     *     <li>the start and length arguments do not determine a valid array</li>\n     * </ul></p>\n     * <p>\n     * Does not change the internal state of the statistic.</p>\n     * <p>\n     * Throws <code>IllegalArgumentException</code> if either array is null.</p>\n     *\n     * @param values the input array\n     * @param weights the weights array\n     * @param begin index of the first array element to include\n     * @param length the number of elements to include\n     * @return the weighted variance of the values or Double.NaN if length = 0\n     * @throws IllegalArgumentException if the parameters are not valid\n     * @since 2.1\n     */\n    public double evaluate(final double[] values, final double[] weights,\n                           final int begin, final int length) {\n\n        double var = Double.NaN;\n\n        if (test(values, weights,begin, length)) {\n            clear();\n            if (length == 1) {\n                var = 0.0;\n            } else if (length > 1) {\n                Mean mean = new Mean();\n                double m = mean.evaluate(values, weights, begin, length);\n                var = evaluate(values, weights, m, begin, length);\n            }\n        }\n        return var;\n    }\n\n    /**\n     * <p>\n     * Returns the weighted variance of the entries in the the input array.</p>\n     * <p>\n     * Uses the formula <pre>\n     *   &Sigma;(weights[i]*(values[i] - weightedMean)<sup>2</sup>)/(&Sigma;(weights[i]) - 1)\n     * </pre>\n     * where weightedMean is the weighted mean</p>\n     * <p>\n     * This formula will not return the same result as the unweighted variance when all\n     * weights are equal, unless all weights are equal to 1. The formula assumes that\n     * weights are to be treated as "expansion values," as will be the case if for example\n     * the weights represent frequency counts. To normalize weights so that the denominator\n     * in the variance computation equals the length of the input vector minus one, use <pre>\n     *   <code>evaluate(values, MathArrays.normalizeArray(weights, values.length)); </code>\n     * </pre>\n     * <p>\n     * Returns 0 for a single-value (i.e. length = 1) sample.</p>\n     * <p>\n     * Throws <code>IllegalArgumentException</code> if any of the following are true:\n     * <ul><li>the values array is null</li>\n     *     <li>the weights array is null</li>\n     *     <li>the weights array does not have the same length as the values array</li>\n     *     <li>the weights array contains one or more infinite values</li>\n     *     <li>the weights array contains one or more NaN values</li>\n     *     <li>the weights array contains negative values</li>\n     * </ul></p>\n     * <p>\n     * Does not change the internal state of the statistic.</p>\n     * <p>\n     * Throws <code>IllegalArgumentException</code> if either array is null.</p>\n     *\n     * @param values the input array\n     * @param weights the weights array\n     * @return the weighted variance of the values\n     * @throws IllegalArgumentException if the parameters are not valid\n     * @since 2.1\n     */\n    public double evaluate(final double[] values, final double[] weights) {\n        return evaluate(values, weights, 0, values.length);\n    }\n\n    /**\n     * Returns the variance of the entries in the specified portion of\n     * the input array, using the precomputed mean value.  Returns\n     * <code>Double.NaN</code> if the designated subarray is empty.\n     * <p>\n     * See {@link Variance} for details on the computing algorithm.</p>\n     * <p>\n     * The formula used assumes that the supplied mean value is the arithmetic\n     * mean of the sample data, not a known population parameter.  This method\n     * is supplied only to save computation when the mean has already been\n     * computed.</p>\n     * <p>\n     * Returns 0 for a single-value (i.e. length = 1) sample.</p>\n     * <p>\n     * Throws <code>IllegalArgumentException</code> if the array is null.</p>\n     * <p>\n     * Does not change the internal state of the statistic.</p>\n     *\n     * @param values the input array\n     * @param mean the precomputed mean value\n     * @param begin index of the first array element to include\n     * @param length the number of elements to include\n     * @return the variance of the values or Double.NaN if length = 0\n     * @throws IllegalArgumentException if the array is null or the array index\n     *  parameters are not valid\n     */\n    public double evaluate(final double[] values, final double mean,\n            final int begin, final int length) {\n\n        double var = Double.NaN;\n\n        if (test(values, begin, length)) {\n            if (length == 1) {\n                var = 0.0;\n            } else if (length > 1) {\n                double accum = 0.0;\n                double dev = 0.0;\n                double accum2 = 0.0;\n                for (int i = begin; i < begin + length; i++) {\n                    dev = values[i] - mean;\n                    accum += dev * dev;\n                    accum2 += dev;\n                }\n                double len = length;\n                if (isBiasCorrected) {\n                    var = (accum - (accum2 * accum2 / len)) / (len - 1.0);\n                } else {\n                    var = (accum - (accum2 * accum2 / len)) / len;\n                }\n            }\n        }\n        return var;\n    }\n\n    /**\n     * Returns the variance of the entries in the input array, using the\n     * precomputed mean value.  Returns <code>Double.NaN</code> if the array\n     * is empty.\n     * <p>\n     * See {@link Variance} for details on the computing algorithm.</p>\n     * <p>\n     * If <code>isBiasCorrected</code> is <code>true</code> the formula used\n     * assumes that the supplied mean value is the arithmetic mean of the\n     * sample data, not a known population parameter.  If the mean is a known\n     * population parameter, or if the "population" version of the variance is\n     * desired, set <code>isBiasCorrected</code> to <code>false</code> before\n     * invoking this method.</p>\n     * <p>\n     * Returns 0 for a single-value (i.e. length = 1) sample.</p>\n     * <p>\n     * Throws <code>IllegalArgumentException</code> if the array is null.</p>\n     * <p>\n     * Does not change the internal state of the statistic.</p>\n     *\n     * @param values the input array\n     * @param mean the precomputed mean value\n     * @return the variance of the values or Double.NaN if the array is empty\n     * @throws IllegalArgumentException if the array is null\n     */\n    public double evaluate(final double[] values, final double mean) {\n        return evaluate(values, mean, 0, values.length);\n    }\n\n    /**\n     * Returns the weighted variance of the entries in the specified portion of\n     * the input array, using the precomputed weighted mean value.  Returns\n     * <code>Double.NaN</code> if the designated subarray is empty.\n     * <p>\n     * Uses the formula <pre>\n     *   &Sigma;(weights[i]*(values[i] - mean)<sup>2</sup>)/(&Sigma;(weights[i]) - 1)\n     * </pre></p>\n     * <p>\n     * The formula used assumes that the supplied mean value is the weighted arithmetic\n     * mean of the sample data, not a known population parameter. This method\n     * is supplied only to save computation when the mean has already been\n     * computed.</p>\n     * <p>\n     * This formula will not return the same result as the unweighted variance when all\n     * weights are equal, unless all weights are equal to 1. The formula assumes that\n     * weights are to be treated as "expansion values," as will be the case if for example\n     * the weights represent frequency counts. To normalize weights so that the denominator\n     * in the variance computation equals the length of the input vector minus one, use <pre>\n     *   <code>evaluate(values, MathArrays.normalizeArray(weights, values.length), mean); </code>\n     * </pre>\n     * <p>\n     * Returns 0 for a single-value (i.e. length = 1) sample.</p>\n     * <p>\n     * Throws <code>IllegalArgumentException</code> if any of the following are true:\n     * <ul><li>the values array is null</li>\n     *     <li>the weights array is null</li>\n     *     <li>the weights array does not have the same length as the values array</li>\n     *     <li>the weights array contains one or more infinite values</li>\n     *     <li>the weights array contains one or more NaN values</li>\n     *     <li>the weights array contains negative values</li>\n     *     <li>the start and length arguments do not determine a valid array</li>\n     * </ul></p>\n     * <p>\n     * Does not change the internal state of the statistic.</p>\n     *\n     * @param values the input array\n     * @param weights the weights array\n     * @param mean the precomputed weighted mean value\n     * @param begin index of the first array element to include\n     * @param length the number of elements to include\n     * @return the variance of the values or Double.NaN if length = 0\n     * @throws IllegalArgumentException if the parameters are not valid\n     * @since 2.1\n     */\n    public double evaluate(final double[] values, final double[] weights,\n                           final double mean, final int begin, final int length) {\n\n        double var = Double.NaN;\n\n        if (test(values, weights, begin, length)) {\n            if (length == 1) {\n                var = 0.0;\n            } else if (length > 1) {\n                double accum = 0.0;\n                double dev = 0.0;\n                double accum2 = 0.0;\n                for (int i = begin; i < begin + length; i++) {\n                    dev = values[i] - mean;\n                    accum += weights[i] * (dev * dev);\n                    accum2 += weights[i] * dev;\n                }\n\n                double sumWts = 0;', 'aftercode': '                    sumWts += weights[i];\n                }\n\n                if (isBiasCorrected) {\n                    var = (accum - (accum2 * accum2 / sumWts)) / (sumWts - 1.0);\n                } else {\n                    var = (accum - (accum2 * accum2 / sumWts)) / sumWts;\n                }\n            }\n        }\n        return var;\n    }\n\n    /**\n     * <p>Returns the weighted variance of the values in the input array, using\n     * the precomputed weighted mean value.</p>\n     * <p>\n     * Uses the formula <pre>\n     *   &Sigma;(weights[i]*(values[i] - mean)<sup>2</sup>)/(&Sigma;(weights[i]) - 1)\n     * </pre></p>\n     * <p>\n     * The formula used assumes that the supplied mean value is the weighted arithmetic\n     * mean of the sample data, not a known population parameter. This method\n     * is supplied only to save computation when the mean has already been\n     * computed.</p>\n     * <p>\n     * This formula will not return the same result as the unweighted variance when all\n     * weights are equal, unless all weights are equal to 1. The formula assumes that\n     * weights are to be treated as "expansion values," as will be the case if for example\n     * the weights represent frequency counts. To normalize weights so that the denominator\n     * in the variance computation equals the length of the input vector minus one, use <pre>\n     *   <code>evaluate(values, MathArrays.normalizeArray(weights, values.length), mean); </code>\n     * </pre>\n     * <p>\n     * Returns 0 for a single-value (i.e. length = 1) sample.</p>\n     * <p>\n     * Throws <code>IllegalArgumentException</code> if any of the following are true:\n     * <ul><li>the values array is null</li>\n     *     <li>the weights array is null</li>\n     *     <li>the weights array does not have the same length as the values array</li>\n     *     <li>the weights array contains one or more infinite values</li>\n     *     <li>the weights array contains one or more NaN values</li>\n     *     <li>the weights array contains negative values</li>\n     * </ul></p>\n     * <p>\n     * Does not change the internal state of the statistic.</p>\n     *\n     * @param values the input array\n     * @param weights the weights array\n     * @param mean the precomputed weighted mean value\n     * @return the variance of the values or Double.NaN if length = 0\n     * @throws IllegalArgumentException if the parameters are not valid\n     * @since 2.1\n     */\n    public double evaluate(final double[] values, final double[] weights, final double mean) {\n        return evaluate(values, weights, mean, 0, values.length);\n    }\n\n    /**\n     * @return Returns the isBiasCorrected.\n     */\n    public boolean isBiasCorrected() {\n        return isBiasCorrected;\n    }\n\n    /**\n     * @param biasCorrected The isBiasCorrected to set.\n     */\n    public void setBiasCorrected(boolean biasCorrected) {\n        this.isBiasCorrected = biasCorrected;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public Variance copy() {\n        Variance result = new Variance();\n        copy(this, result);\n        return result;\n    }\n\n    /**\n     * Copies source to dest.\n     * <p>Neither source nor dest can be null.</p>\n     *\n     * @param source Variance to copy\n     * @param dest Variance to copy to\n     * @throws NullArgumentException if either source or dest is null\n     */\n    public static void copy(Variance source, Variance dest)\n        throws NullArgumentException {\n        MathUtils.checkNotNull(source);\n        MathUtils.checkNotNull(dest);\n        dest.setData(source.getDataRef());\n        dest.moment = source.moment.copy();\n        dest.isBiasCorrected = source.isBiasCorrected;\n        dest.incMoment = source.incMoment;\n    }\n}', 'tree': 'MethodDeclaration body LocalVariableDeclaration type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer MemberReference qualifier Double_ter ^ ^ member NaN_ter ^ ^ ^ ^ ^ ^ ^ IfStatement condition MethodInvocation arguments MemberReference member par0 ^ ^ ^ MemberReference member par1 ^ ^ ^ MemberReference member par3 ^ ^ ^ MemberReference member par4 ^ ^ ^ ^ member test_ter ^ ^ ^ ^ then_statement BlockStatement statements IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par4 ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ then_statement BlockStatement statements StatementExpression expression Assignment expressionl MemberReference member loc0 ^ ^ ^ ^ value Literal value 0.0_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ^ ^ else_statement IfStatement condition BinaryOperation operator >_ter ^ ^ operandl MemberReference member par4 ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ then_statement BlockStatement statements LocalVariableDeclaration type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name loc1 ^ ^ initializer Literal value 0.0_ter ^ ^ ^ ^ ^ ^ ^ LocalVariableDeclaration type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer Literal value 0.0_ter ^ ^ ^ ^ ^ ^ ^ LocalVariableDeclaration type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name loc3 ^ ^ initializer Literal value 0.0_ter ^ ^ ^ ^ ^ ^ ^ ForStatement control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer MemberReference member par3 ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr BinaryOperation operator +_ter ^ ^ operandl MemberReference member par3 ^ ^ ^ ^ operandr MemberReference member par4 ^ ^ ^ ^ ^ ^ ^ ^ update MemberReference postfix_operators ++_ter ^ ^ member loc6 ^ ^ ^ ^ ^ ^ body BlockStatement statements StatementExpression expression Assignment expressionl MemberReference member loc2 ^ ^ ^ ^ value BinaryOperation operator -_ter ^ ^ operandl MemberReference selectors ArraySelector index MemberReference member loc6 ^ ^ ^ ^ ^ ^ member par0 ^ ^ ^ ^ operandr MemberReference member par2 ^ ^ ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member loc1 ^ ^ ^ ^ value BinaryOperation operator *_ter ^ ^ operandl MemberReference selectors ArraySelector index MemberReference member loc6 ^ ^ ^ ^ ^ ^ member par1 ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MemberReference member loc2 ^ ^ ^ ^ operandr MemberReference member loc2 ^ ^ ^ ^ ^ ^ ^ ^ type +=_ter ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member loc3 ^ ^ ^ ^ value BinaryOperation operator *_ter ^ ^ operandl MemberReference selectors ArraySelector index MemberReference member loc6 ^ ^ ^ ^ ^ ^ member par1 ^ ^ ^ ^ operandr MemberReference member loc2 ^ ^ ^ ^ ^ ^ type +=_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ LocalVariableDeclaration type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name loc5 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ForStatement control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^ ^ ^ ^ update MemberReference postfix_operators ++_ter ^ ^ member loc6 ^ ^ ^ ^ ^ ^ body BlockStatement statements StatementExpression expression Assignment expressionl MemberReference member loc5 ^ ^ ^ ^ value MemberReference selectors ArraySelector index MemberReference member loc6 ^ ^ ^ ^ ^ ^ member par1 ^ ^ ^ ^ type +=_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ IfStatement condition MemberReference member isBiasCorrected_ter ^ ^ ^ ^ then_statement BlockStatement statements StatementExpression expression Assignment expressionl MemberReference member loc0 ^ ^ ^ ^ value BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator -_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member loc3 ^ ^ ^ ^ operandr MemberReference member loc3 ^ ^ ^ ^ ^ ^ operandr MemberReference member loc5 ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr Literal value 1.0_ter ^ ^ ^ ^ ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ^ ^ else_statement BlockStatement statements StatementExpression expression Assignment expressionl MemberReference member loc0 ^ ^ ^ ^ value BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator -_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member loc3 ^ ^ ^ ^ operandr MemberReference member loc3 ^ ^ ^ ^ ^ ^ operandr MemberReference member loc5 ^ ^ ^ ^ ^ ^ ^ ^ operandr MemberReference member loc5 ^ ^ ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ReturnStatement expression MemberReference member loc0 ^ ^ ^ ^ ^ ^ parameters FormalParameter modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ name par0 ^ ^ ^ FormalParameter modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ name par1 ^ ^ ^ FormalParameter modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ ^ ^ name par2 ^ ^ ^ FormalParameter modifiers final_ter ^ ^ type BasicType name int_ter ^ ^ ^ ^ name par3 ^ ^ ^ FormalParameter modifiers final_ter ^ ^ type BasicType name int_ter ^ ^ ^ ^ name par4 ^ ^ ^ ^ ^ ', 'prob': [0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], 'mode': 0, 'line': 520, 'isa': False, 'fl_score': 1}]
before@0 batch0 x: 0: root ^  ; []
after@0 batch0 x: 0: root ^  ; []
copynode 0:  root modified ^ ^ ; ['root -> modified']
copynode 0:  root add ^ ^ ; ['root -> add']
copynode 0:  root return_type ^ ^ ; ['root -> return_type']
copynode 0:  root ReturnStatement ^ ^ ; ['root -> ReturnStatement']
copynode 0:  root parameters ^ ^ ; ['root -> parameters']
copynode 0:  root ^ ; ['root -> End']
copynode 0:  root StatementExpression ^ ^ ; ['root -> StatementExpression']
copynode 0:  root IfStatement ^ ^ ; ['root -> IfStatement']
copynode 0:  root operator-operator <_ter ^ ^  ^ ^ ; ['copy-operator']
copynode 0:  root par4 ^ ^ ; ['copy-FormalParameter']
before@1 batch0 x: -12.065445899963379: root par4 ^ ^  ; ['copy-FormalParameter']
after@1 batch0 x: -12.065445899963379: root par4 ^ ^  ; ['copy-FormalParameter']
copynode -0.39526593685150146:  root modified ^ MemberReference-MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^  ^ ^ ; ['root -> modified', 'copy-MemberReference']
copynode -1.1205220222473145:  root add ^ IfStatement ^ ^ ; ['root -> add', 'root -> IfStatement']
copynode -0.39526593685150146:  root modified ^ operator-operator <_ter ^ ^  ^ ^ ; ['root -> modified', 'copy-operator']
copynode -1.1205220222473145:  root add ^ StatementExpression ^ ^ ; ['root -> add', 'root -> StatementExpression']
copynode -0.39526593685150146:  root modified ^ MemberReference-MemberReference member loc6 ^ ^ ^  ^ ^ ; ['root -> modified', 'copy-MemberReference']
copynode -0.39526593685150146:  root modified ^ control ^ ^ ; ['root -> modified', 'root -> control']
copynode -0.39526593685150146:  root modified ^ MemberReference-MemberReference postfix_operators ++_ter ^ ^ member loc6 ^ ^ ^  ^ ^ ; ['root -> modified', 'copy-MemberReference']
copynode -0.39526593685150146:  root modified ^ BasicType-BasicType name int_ter ^ ^ ^  ^ ^ ; ['root -> modified', 'copy-BasicType']
copynode -0.39526593685150146:  root modified ^ BreakStatement ^ ^ ; ['root -> modified', 'root -> BreakStatement']
copynode -1.1205220222473145:  root add ^ LocalVariableDeclaration ^ ^ ; ['root -> add', 'root -> LocalVariableDeclaration']
copynode -0.39526593685150146:  root modified ^ Literal-Literal value 0_ter ^ ^ ^  ^ ^ ; ['root -> modified', 'copy-Literal']
copynode -1.1205220222473145:  root add ^ ReturnStatement_ter ^ ^ ; ['root -> add', 'root -> ReturnStatement_ter']
copynode -1.1205220222473145:  root add ^ control ^ ^ ; ['root -> add', 'root -> control']
copynode -0.39526593685150146:  root modified ^ ^ ; ['root -> modified', 'root -> End']
copynode -1.1205220222473145:  root add ^ ReturnStatement ^ ^ ; ['root -> add', 'root -> ReturnStatement']
copynode -0.39526593685150146:  root modified ^ ReturnStatement ^ ^ ; ['root -> modified', 'root -> ReturnStatement']
copynode -1.1205220222473145:  root add ^ WhileStatement ^ ^ ; ['root -> add', 'root -> WhileStatement']
copynode -1.1205220222473145:  root add ^ AssertStatement ^ ^ ; ['root -> add', 'root -> AssertStatement']
copynode -1.1205220222473145:  root add ^ BreakStatement_ter ^ ^ ; ['root -> add', 'root -> BreakStatement_ter']
copynode -1.1205220222473145:  root add ^ Statement_ter ^ ^ ; ['root -> add', 'root -> Statement_ter']
copynode -9.222753524780273:  root return_type ReferenceType ^ ^ ^ ; ['root -> return_type', 'return_type -> ReferenceType']
copynode -9.726324081420898:  root ReturnStatement expression ^ ^ ^ ; ['root -> ReturnStatement', 'ReturnStatement -> expression']
copynode -9.726324081420898:  root ReturnStatement expression MemberReference member loc0 ^ ^ ^ ^ ^ ^ ; ['root -> ReturnStatement', 'copy-ReturnStatement']
copynode -10.804206848144531:  root parameters FormalParameter ^ ^ ^ ; ['root -> parameters', 'parameters -> FormalParameter']
copynode -11.109743118286133:  root IfStatement condition ^ ^ ^ ; ['root -> IfStatement', 'IfStatement -> condition']
copynode -10.956075668334961:  root StatementExpression expression ^ ^ ^ ; ['root -> StatementExpression', 'StatementExpression -> expression']
copynode -11.260885238647461:  root operator-operator <_ter ^ ^  <=_ter ^ ^ ^ ; ['copy-operator', 'operator -> <=_ter']
copynode -9.222753524780273:  root return_type BasicType ^ ^ ^ ; ['root -> return_type', 'return_type -> BasicType']
copynode -11.260885238647461:  root operator-operator <_ter ^ ^  <_ter ^ ^ ^ ; ['copy-operator', 'operator -> <_ter']
copynode -11.260885238647461:  root operator-operator <_ter ^ ^  -_ter ^ ^ ^ ; ['copy-operator', 'operator -> -_ter']
copynode -11.260885238647461:  root operator-operator <_ter ^ ^  >_ter ^ ^ ^ ; ['copy-operator', 'operator -> >_ter']
copynode -11.260885238647461:  root operator-operator <_ter ^ ^  >=_ter ^ ^ ^ ; ['copy-operator', 'operator -> >=_ter']
copynode -10.956075668334961:  root StatementExpression expression Assignment expressionl MemberReference member loc0 ^ ^ ^ ^ value Literal value 0.0_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ; ['root -> StatementExpression', 'copy-StatementExpression']
copynode -10.804206848144531:  root parameters ^ ^ ; ['root -> parameters', 'parameters -> End']
copynode -10.956075668334961:  root StatementExpression expression Assignment expressionl MemberReference member loc2 ^ ^ ^ ^ value BinaryOperation operator -_ter ^ ^ operandl MemberReference selectors ArraySelector index MemberReference member loc6 ^ ^ ^ ^ ^ ^ member par0 ^ ^ ^ ^ operandr MemberReference member par2 ^ ^ ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ; ['root -> StatementExpression', 'copy-StatementExpression']
copynode -10.956075668334961:  root StatementExpression expression Assignment expressionl MemberReference member loc1 ^ ^ ^ ^ value BinaryOperation operator *_ter ^ ^ operandl MemberReference selectors ArraySelector index MemberReference member loc6 ^ ^ ^ ^ ^ ^ member par1 ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MemberReference member loc2 ^ ^ ^ ^ operandr MemberReference member loc2 ^ ^ ^ ^ ^ ^ ^ ^ type +=_ter ^ ^ ^ ^ ^ ^ ; ['root -> StatementExpression', 'copy-StatementExpression']
copynode -10.956075668334961:  root StatementExpression expression Assignment expressionl MemberReference member loc5 ^ ^ ^ ^ value MemberReference selectors ArraySelector index MemberReference member loc6 ^ ^ ^ ^ ^ ^ member par1 ^ ^ ^ ^ type +=_ter ^ ^ ^ ^ ^ ^ ; ['root -> StatementExpression', 'copy-StatementExpression']
copynode -10.956075668334961:  root StatementExpression expression Assignment expressionl MemberReference member loc3 ^ ^ ^ ^ value BinaryOperation operator *_ter ^ ^ operandl MemberReference selectors ArraySelector index MemberReference member loc6 ^ ^ ^ ^ ^ ^ member par1 ^ ^ ^ ^ operandr MemberReference member loc2 ^ ^ ^ ^ ^ ^ type +=_ter ^ ^ ^ ^ ^ ^ ; ['root -> StatementExpression', 'copy-StatementExpression']
copynode -10.956075668334961:  root StatementExpression expression Assignment expressionl MemberReference member loc0 ^ ^ ^ ^ value BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator -_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member loc3 ^ ^ ^ ^ operandr MemberReference member loc3 ^ ^ ^ ^ ^ ^ operandr MemberReference member loc5 ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr Literal value 1.0_ter ^ ^ ^ ^ ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ; ['root -> StatementExpression', 'copy-StatementExpression']
copynode -10.956075668334961:  root StatementExpression expression Assignment expressionl MemberReference member loc0 ^ ^ ^ ^ value BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator -_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member loc3 ^ ^ ^ ^ operandr MemberReference member loc3 ^ ^ ^ ^ ^ ^ operandr MemberReference member loc5 ^ ^ ^ ^ ^ ^ ^ ^ operandr MemberReference member loc5 ^ ^ ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ; ['root -> StatementExpression', 'copy-StatementExpression']
copynode -11.260885238647461:  root operator-operator <_ter ^ ^  ==_ter ^ ^ ^ ; ['copy-operator', 'operator -> ==_ter']
copynode -11.260885238647461:  root operator-operator <_ter ^ ^  /_ter ^ ^ ^ ; ['copy-operator', 'operator -> /_ter']
copynode -11.260885238647461:  root operator-operator <_ter ^ ^  +_ter ^ ^ ^ ; ['copy-operator', 'operator -> +_ter']
copynode -11.260885238647461:  root operator-operator <_ter ^ ^  >>>_ter ^ ^ ^ ; ['copy-operator', 'operator -> >>>_ter']
copynode -11.260885238647461:  root operator-operator <_ter ^ ^  >>_ter ^ ^ ^ ; ['copy-operator', 'operator -> >>_ter']
copynode -10.804206848144531:  root parameters MemberReference ^ ^ ^ ; ['root -> parameters', 'parameters -> MemberReference']
copynode -10.804206848144531:  root parameters FormalParameter modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ name par0 ^ ^ ^ FormalParameter modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ name par1 ^ ^ ^ FormalParameter modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ ^ ^ name par2 ^ ^ ^ FormalParameter modifiers final_ter ^ ^ type BasicType name int_ter ^ ^ ^ ^ name par3 ^ ^ ^ FormalParameter modifiers final_ter ^ ^ type BasicType name int_ter ^ ^ ^ ^ name par4 ^ ^ ^ ^ ^ ; ['root -> parameters', 'copy-parameters']
copynode -10.804206848144531:  root parameters InferredFormalParameter ^ ^ ^ ; ['root -> parameters', 'parameters -> InferredFormalParameter']
copynode -9.222753524780273:  root return_type par4 ^ ^ ^ ; ['root -> return_type', 'copy-FormalParameter']
copynode -9.222753524780273:  root return_type par3 ^ ^ ^ ; ['root -> return_type', 'copy-FormalParameter']
copynode -9.222753524780273:  root return_type par2 ^ ^ ^ ; ['root -> return_type', 'copy-FormalParameter']
copynode -9.222753524780273:  root return_type par1 ^ ^ ^ ; ['root -> return_type', 'copy-FormalParameter']
copynode -9.222753524780273:  root return_type par0 ^ ^ ^ ; ['root -> return_type', 'copy-FormalParameter']
copynode -11.109743118286133:  root IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par4 ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ then_statement BlockStatement statements StatementExpression expression Assignment expressionl MemberReference member loc0 ^ ^ ^ ^ value Literal value 0.0_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ^ ^ else_statement IfStatement condition BinaryOperation operator >_ter ^ ^ operandl MemberReference member par4 ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ then_statement BlockStatement statements LocalVariableDeclaration type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name loc1 ^ ^ initializer Literal value 0.0_ter ^ ^ ^ ^ ^ ^ ^ LocalVariableDeclaration type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer Literal value 0.0_ter ^ ^ ^ ^ ^ ^ ^ LocalVariableDeclaration type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name loc3 ^ ^ initializer Literal value 0.0_ter ^ ^ ^ ^ ^ ^ ^ ForStatement control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer MemberReference member par3 ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr BinaryOperation operator +_ter ^ ^ operandl MemberReference member par3 ^ ^ ^ ^ operandr MemberReference member par4 ^ ^ ^ ^ ^ ^ ^ ^ update MemberReference postfix_operators ++_ter ^ ^ member loc6 ^ ^ ^ ^ ^ ^ body BlockStatement statements StatementExpression expression Assignment expressionl MemberReference member loc2 ^ ^ ^ ^ value BinaryOperation operator -_ter ^ ^ operandl MemberReference selectors ArraySelector index MemberReference member loc6 ^ ^ ^ ^ ^ ^ member par0 ^ ^ ^ ^ operandr MemberReference member par2 ^ ^ ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member loc1 ^ ^ ^ ^ value BinaryOperation operator *_ter ^ ^ operandl MemberReference selectors ArraySelector index MemberReference member loc6 ^ ^ ^ ^ ^ ^ member par1 ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MemberReference member loc2 ^ ^ ^ ^ operandr MemberReference member loc2 ^ ^ ^ ^ ^ ^ ^ ^ type +=_ter ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member loc3 ^ ^ ^ ^ value BinaryOperation operator *_ter ^ ^ operandl MemberReference selectors ArraySelector index MemberReference member loc6 ^ ^ ^ ^ ^ ^ member par1 ^ ^ ^ ^ operandr MemberReference member loc2 ^ ^ ^ ^ ^ ^ type +=_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ LocalVariableDeclaration type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name loc5 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ForStatement control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^ ^ ^ ^ update MemberReference postfix_operators ++_ter ^ ^ member loc6 ^ ^ ^ ^ ^ ^ body BlockStatement statements StatementExpression expression Assignment expressionl MemberReference member loc5 ^ ^ ^ ^ value MemberReference selectors ArraySelector index MemberReference member loc6 ^ ^ ^ ^ ^ ^ member par1 ^ ^ ^ ^ type +=_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ IfStatement condition MemberReference member isBiasCorrected_ter ^ ^ ^ ^ then_statement BlockStatement statements StatementExpression expression Assignment expressionl MemberReference member loc0 ^ ^ ^ ^ value BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator -_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member loc3 ^ ^ ^ ^ operandr MemberReference member loc3 ^ ^ ^ ^ ^ ^ operandr MemberReference member loc5 ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr Literal value 1.0_ter ^ ^ ^ ^ ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ^ ^ else_statement BlockStatement statements StatementExpression expression Assignment expressionl MemberReference member loc0 ^ ^ ^ ^ value BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator -_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member loc3 ^ ^ ^ ^ operandr MemberReference member loc3 ^ ^ ^ ^ ^ ^ operandr MemberReference member loc5 ^ ^ ^ ^ ^ ^ ^ ^ operandr MemberReference member loc5 ^ ^ ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> IfStatement', 'copy-IfStatement']
copynode -11.109743118286133:  root IfStatement condition BinaryOperation operator >_ter ^ ^ operandl MemberReference member par4 ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ then_statement BlockStatement statements LocalVariableDeclaration type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name loc1 ^ ^ initializer Literal value 0.0_ter ^ ^ ^ ^ ^ ^ ^ LocalVariableDeclaration type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer Literal value 0.0_ter ^ ^ ^ ^ ^ ^ ^ LocalVariableDeclaration type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name loc3 ^ ^ initializer Literal value 0.0_ter ^ ^ ^ ^ ^ ^ ^ ForStatement control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer MemberReference member par3 ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr BinaryOperation operator +_ter ^ ^ operandl MemberReference member par3 ^ ^ ^ ^ operandr MemberReference member par4 ^ ^ ^ ^ ^ ^ ^ ^ update MemberReference postfix_operators ++_ter ^ ^ member loc6 ^ ^ ^ ^ ^ ^ body BlockStatement statements StatementExpression expression Assignment expressionl MemberReference member loc2 ^ ^ ^ ^ value BinaryOperation operator -_ter ^ ^ operandl MemberReference selectors ArraySelector index MemberReference member loc6 ^ ^ ^ ^ ^ ^ member par0 ^ ^ ^ ^ operandr MemberReference member par2 ^ ^ ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member loc1 ^ ^ ^ ^ value BinaryOperation operator *_ter ^ ^ operandl MemberReference selectors ArraySelector index MemberReference member loc6 ^ ^ ^ ^ ^ ^ member par1 ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MemberReference member loc2 ^ ^ ^ ^ operandr MemberReference member loc2 ^ ^ ^ ^ ^ ^ ^ ^ type +=_ter ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member loc3 ^ ^ ^ ^ value BinaryOperation operator *_ter ^ ^ operandl MemberReference selectors ArraySelector index MemberReference member loc6 ^ ^ ^ ^ ^ ^ member par1 ^ ^ ^ ^ operandr MemberReference member loc2 ^ ^ ^ ^ ^ ^ type +=_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ LocalVariableDeclaration type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name loc5 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ForStatement control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^ ^ ^ ^ update MemberReference postfix_operators ++_ter ^ ^ member loc6 ^ ^ ^ ^ ^ ^ body BlockStatement statements StatementExpression expression Assignment expressionl MemberReference member loc5 ^ ^ ^ ^ value MemberReference selectors ArraySelector index MemberReference member loc6 ^ ^ ^ ^ ^ ^ member par1 ^ ^ ^ ^ type +=_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ IfStatement condition MemberReference member isBiasCorrected_ter ^ ^ ^ ^ then_statement BlockStatement statements StatementExpression expression Assignment expressionl MemberReference member loc0 ^ ^ ^ ^ value BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator -_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member loc3 ^ ^ ^ ^ operandr MemberReference member loc3 ^ ^ ^ ^ ^ ^ operandr MemberReference member loc5 ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr Literal value 1.0_ter ^ ^ ^ ^ ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ^ ^ else_statement BlockStatement statements StatementExpression expression Assignment expressionl MemberReference member loc0 ^ ^ ^ ^ value BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator -_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member loc3 ^ ^ ^ ^ operandr MemberReference member loc3 ^ ^ ^ ^ ^ ^ operandr MemberReference member loc5 ^ ^ ^ ^ ^ ^ ^ ^ operandr MemberReference member loc5 ^ ^ ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> IfStatement', 'copy-IfStatement']
copynode -11.109743118286133:  root IfStatement condition MemberReference member isBiasCorrected_ter ^ ^ ^ ^ then_statement BlockStatement statements StatementExpression expression Assignment expressionl MemberReference member loc0 ^ ^ ^ ^ value BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator -_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member loc3 ^ ^ ^ ^ operandr MemberReference member loc3 ^ ^ ^ ^ ^ ^ operandr MemberReference member loc5 ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr Literal value 1.0_ter ^ ^ ^ ^ ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ^ ^ else_statement BlockStatement statements StatementExpression expression Assignment expressionl MemberReference member loc0 ^ ^ ^ ^ value BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator -_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member loc3 ^ ^ ^ ^ operandr MemberReference member loc3 ^ ^ ^ ^ ^ ^ operandr MemberReference member loc5 ^ ^ ^ ^ ^ ^ ^ ^ operandr MemberReference member loc5 ^ ^ ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> IfStatement', 'copy-IfStatement']
copynode -9.726324081420898:  root ReturnStatement par2 ^ ^ ^ ; ['root -> ReturnStatement', 'copy-FormalParameter']
copynode -9.726324081420898:  root ReturnStatement par1 ^ ^ ^ ; ['root -> ReturnStatement', 'copy-FormalParameter']
copynode -9.726324081420898:  root ReturnStatement par4 ^ ^ ^ ; ['root -> ReturnStatement', 'copy-FormalParameter']
copynode -9.726324081420898:  root ReturnStatement par0 ^ ^ ^ ; ['root -> ReturnStatement', 'copy-FormalParameter']
copynode -9.726324081420898:  root ReturnStatement par3 ^ ^ ^ ; ['root -> ReturnStatement', 'copy-FormalParameter']
copynode -11.109743118286133:  root IfStatement condition MethodInvocation arguments MemberReference member par0 ^ ^ ^ MemberReference member par1 ^ ^ ^ MemberReference member par3 ^ ^ ^ MemberReference member par4 ^ ^ ^ ^ member test_ter ^ ^ ^ ^ then_statement BlockStatement statements IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par4 ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ then_statement BlockStatement statements StatementExpression expression Assignment expressionl MemberReference member loc0 ^ ^ ^ ^ value Literal value 0.0_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ^ ^ else_statement IfStatement condition BinaryOperation operator >_ter ^ ^ operandl MemberReference member par4 ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ then_statement BlockStatement statements LocalVariableDeclaration type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name loc1 ^ ^ initializer Literal value 0.0_ter ^ ^ ^ ^ ^ ^ ^ LocalVariableDeclaration type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer Literal value 0.0_ter ^ ^ ^ ^ ^ ^ ^ LocalVariableDeclaration type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name loc3 ^ ^ initializer Literal value 0.0_ter ^ ^ ^ ^ ^ ^ ^ ForStatement control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer MemberReference member par3 ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr BinaryOperation operator +_ter ^ ^ operandl MemberReference member par3 ^ ^ ^ ^ operandr MemberReference member par4 ^ ^ ^ ^ ^ ^ ^ ^ update MemberReference postfix_operators ++_ter ^ ^ member loc6 ^ ^ ^ ^ ^ ^ body BlockStatement statements StatementExpression expression Assignment expressionl MemberReference member loc2 ^ ^ ^ ^ value BinaryOperation operator -_ter ^ ^ operandl MemberReference selectors ArraySelector index MemberReference member loc6 ^ ^ ^ ^ ^ ^ member par0 ^ ^ ^ ^ operandr MemberReference member par2 ^ ^ ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member loc1 ^ ^ ^ ^ value BinaryOperation operator *_ter ^ ^ operandl MemberReference selectors ArraySelector index MemberReference member loc6 ^ ^ ^ ^ ^ ^ member par1 ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MemberReference member loc2 ^ ^ ^ ^ operandr MemberReference member loc2 ^ ^ ^ ^ ^ ^ ^ ^ type +=_ter ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member loc3 ^ ^ ^ ^ value BinaryOperation operator *_ter ^ ^ operandl MemberReference selectors ArraySelector index MemberReference member loc6 ^ ^ ^ ^ ^ ^ member par1 ^ ^ ^ ^ operandr MemberReference member loc2 ^ ^ ^ ^ ^ ^ type +=_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ LocalVariableDeclaration type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name loc5 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ForStatement control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^ ^ ^ ^ update MemberReference postfix_operators ++_ter ^ ^ member loc6 ^ ^ ^ ^ ^ ^ body BlockStatement statements StatementExpression expression Assignment expressionl MemberReference member loc5 ^ ^ ^ ^ value MemberReference selectors ArraySelector index MemberReference member loc6 ^ ^ ^ ^ ^ ^ member par1 ^ ^ ^ ^ type +=_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ IfStatement condition MemberReference member isBiasCorrected_ter ^ ^ ^ ^ then_statement BlockStatement statements StatementExpression expression Assignment expressionl MemberReference member loc0 ^ ^ ^ ^ value BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator -_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member loc3 ^ ^ ^ ^ operandr MemberReference member loc3 ^ ^ ^ ^ ^ ^ operandr MemberReference member loc5 ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr Literal value 1.0_ter ^ ^ ^ ^ ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ^ ^ else_statement BlockStatement statements StatementExpression expression Assignment expressionl MemberReference member loc0 ^ ^ ^ ^ value BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator -_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member loc3 ^ ^ ^ ^ operandr MemberReference member loc3 ^ ^ ^ ^ ^ ^ operandr MemberReference member loc5 ^ ^ ^ ^ ^ ^ ^ ^ operandr MemberReference member loc5 ^ ^ ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> IfStatement', 'copy-IfStatement']
copynode -10.804206848144531:  root parameters Cast ^ ^ ^ ; ['root -> parameters', 'parameters -> Cast']
copynode -10.804206848144531:  root parameters loc0 ^ ^ ^ ; ['root -> parameters', 'copy-VariableDeclarator']
copynode -11.109743118286133:  root IfStatement par2 ^ ^ ^ ; ['root -> IfStatement', 'copy-FormalParameter']
copynode -11.109743118286133:  root IfStatement par4 ^ ^ ^ ; ['root -> IfStatement', 'copy-FormalParameter']
copynode -11.109743118286133:  root IfStatement par3 ^ ^ ^ ; ['root -> IfStatement', 'copy-FormalParameter']
copynode -11.109743118286133:  root IfStatement par1 ^ ^ ^ ; ['root -> IfStatement', 'copy-FormalParameter']
copynode -11.109743118286133:  root IfStatement par0 ^ ^ ^ ; ['root -> IfStatement', 'copy-FormalParameter']
copynode -10.804206848144531:  root parameters loc3 ^ ^ ^ ; ['root -> parameters', 'copy-VariableDeclarator']
copynode -10.804206848144531:  root parameters loc1 ^ ^ ^ ; ['root -> parameters', 'copy-VariableDeclarator']
copynode -10.804206848144531:  root parameters loc2 ^ ^ ^ ; ['root -> parameters', 'copy-VariableDeclarator']
copynode -10.956075668334961:  root StatementExpression unknown ^ ^ ^ ; ['root -> StatementExpression', 'start -> unknown']
copynode -9.222753524780273:  root return_type unknown ^ ^ ^ ; ['root -> return_type', 'start -> unknown']
copynode -10.956075668334961:  root StatementExpression par3 ^ ^ ^ ; ['root -> StatementExpression', 'copy-FormalParameter']
copynode -9.222753524780273:  root return_type loc3 ^ ^ ^ ; ['root -> return_type', 'copy-VariableDeclarator']
copynode -9.222753524780273:  root return_type loc1 ^ ^ ^ ; ['root -> return_type', 'copy-VariableDeclarator']
copynode -9.726324081420898:  root ReturnStatement unknown ^ ^ ^ ; ['root -> ReturnStatement', 'start -> unknown']
copynode -9.726324081420898:  root ReturnStatement loc5 ^ ^ ^ ; ['root -> ReturnStatement', 'copy-VariableDeclarator']
copynode -9.726324081420898:  root ReturnStatement loc1 ^ ^ ^ ; ['root -> ReturnStatement', 'copy-VariableDeclarator']
before@2 batch0 x: -28.665071487426758: root ReturnStatement loc1 ^ ^ ^  ; ['root -> ReturnStatement', 'copy-VariableDeclarator']
after@2 batch0 x: -28.665071487426758: root ReturnStatement loc1 ^ ^ ^  ; ['root -> ReturnStatement', 'copy-VariableDeclarator']
copynode -1.4841176569461823:  root add ^ IfStatement condition ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition']
copynode -1.2008697390556335:  root modified ^ MemberReference-MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^  qualifier ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member']
copynode -1.2008697390556335:  root modified ^ MemberReference-MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^  member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member']
copynode -1.554439663887024:  root modified ^ operator-operator <_ter ^ ^  <=_ter ^ ^ ^ ; ['root -> modified', 'copy-operator', 'operator -> <=_ter']
copynode -2.392061233520508:  root add ^ StatementExpression expression ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression']
copynode -1.554439663887024:  root modified ^ operator-operator <_ter ^ ^  >=_ter ^ ^ ^ ; ['root -> modified', 'copy-operator', 'operator -> >=_ter']
copynode -2.811987519264221:  root modified ^ MemberReference-MemberReference member loc6 ^ ^ ^  member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member']
copynode -2.912606358528137:  root modified ^ control ForControl ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl']
copynode -3.830389142036438:  root modified ^ MemberReference-MemberReference postfix_operators ++_ter ^ ^ member loc6 ^ ^ ^  member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member']
copynode -1.554439663887024:  root modified ^ operator-operator <_ter ^ ^  <_ter ^ ^ ^ ; ['root -> modified', 'copy-operator', 'operator -> <_ter']
copynode -1.554439663887024:  root modified ^ operator-operator <_ter ^ ^  >_ter ^ ^ ^ ; ['root -> modified', 'copy-operator', 'operator -> >_ter']
copynode -1.2008697390556335:  root modified ^ MemberReference-MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^  prefix_operators ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> prefix_operators member']
copynode -2.392061233520508:  root add ^ StatementExpression expression Assignment expressionl MemberReference member loc0 ^ ^ ^ ^ value Literal value 0.0_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'copy-StatementExpression']
copynode -2.912606358528137:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer MemberReference member par3 ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr BinaryOperation operator +_ter ^ ^ operandl MemberReference member par3 ^ ^ ^ ^ operandr MemberReference member par4 ^ ^ ^ ^ ^ ^ ^ ^ update MemberReference postfix_operators ++_ter ^ ^ member loc6 ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'copy-control']
copynode -4.032832503318787:  root modified ^ BasicType-BasicType name int_ter ^ ^ ^  name double_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-BasicType', 'copy-BasicType']
copynode -1.554439663887024:  root modified ^ operator-operator <_ter ^ ^  -_ter ^ ^ ^ ; ['root -> modified', 'copy-operator', 'operator -> -_ter']
copynode -1.2008697390556335:  root modified ^ MemberReference-MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^  selectors ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> selectors member']
copynode -4.032832503318787:  root modified ^ BasicType-BasicType name int_ter ^ ^ ^  name ^ ^ ^ ; ['root -> modified', 'copy-BasicType', 'BasicType -> name']
copynode -2.811987519264221:  root modified ^ MemberReference-MemberReference member loc6 ^ ^ ^  qualifier ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member']
copynode -2.392061233520508:  root add ^ StatementExpression expression Assignment expressionl MemberReference member loc2 ^ ^ ^ ^ value BinaryOperation operator -_ter ^ ^ operandl MemberReference selectors ArraySelector index MemberReference member loc6 ^ ^ ^ ^ ^ ^ member par0 ^ ^ ^ ^ operandr MemberReference member par2 ^ ^ ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'copy-StatementExpression']
copynode -2.392061233520508:  root add ^ StatementExpression expression Assignment expressionl MemberReference member loc1 ^ ^ ^ ^ value BinaryOperation operator *_ter ^ ^ operandl MemberReference selectors ArraySelector index MemberReference member loc6 ^ ^ ^ ^ ^ ^ member par1 ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MemberReference member loc2 ^ ^ ^ ^ operandr MemberReference member loc2 ^ ^ ^ ^ ^ ^ ^ ^ type +=_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'copy-StatementExpression']
copynode -2.392061233520508:  root add ^ StatementExpression expression Assignment expressionl MemberReference member loc3 ^ ^ ^ ^ value BinaryOperation operator *_ter ^ ^ operandl MemberReference selectors ArraySelector index MemberReference member loc6 ^ ^ ^ ^ ^ ^ member par1 ^ ^ ^ ^ operandr MemberReference member loc2 ^ ^ ^ ^ ^ ^ type +=_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'copy-StatementExpression']
copynode -2.392061233520508:  root add ^ StatementExpression expression Assignment expressionl MemberReference member loc5 ^ ^ ^ ^ value MemberReference selectors ArraySelector index MemberReference member loc6 ^ ^ ^ ^ ^ ^ member par1 ^ ^ ^ ^ type +=_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'copy-StatementExpression']
copynode -2.392061233520508:  root add ^ StatementExpression expression Assignment expressionl MemberReference member loc0 ^ ^ ^ ^ value BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator -_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member loc3 ^ ^ ^ ^ operandr MemberReference member loc3 ^ ^ ^ ^ ^ ^ operandr MemberReference member loc5 ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr Literal value 1.0_ter ^ ^ ^ ^ ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'copy-StatementExpression']
copynode -5.978923201560974:  root modified ^ BreakStatement goto ^ ^ ^ ; ['root -> modified', 'root -> BreakStatement', 'BreakStatement -> goto']
copynode -1.554439663887024:  root modified ^ operator-operator <_ter ^ ^  ==_ter ^ ^ ^ ; ['root -> modified', 'copy-operator', 'operator -> ==_ter']
copynode -6.373405814170837:  root modified ^ Literal-Literal value 0_ter ^ ^ ^  value ^ ^ ^ ; ['root -> modified', 'copy-Literal', 'Literal -> value']
copynode -2.392061233520508:  root add ^ StatementExpression expression Assignment expressionl MemberReference member loc0 ^ ^ ^ ^ value BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator -_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member loc3 ^ ^ ^ ^ operandr MemberReference member loc3 ^ ^ ^ ^ ^ ^ operandr MemberReference member loc5 ^ ^ ^ ^ ^ ^ ^ ^ operandr MemberReference member loc5 ^ ^ ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'copy-StatementExpression']
copynode -6.091814041137695:  root add ^ LocalVariableDeclaration type ^ declarators ^ ^ ^ ; ['root -> add', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators']
copynode -1.2008697390556335:  root modified ^ MemberReference-MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^  postfix_operators ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> postfix_operators member']
copynode -2.811987519264221:  root modified ^ MemberReference-MemberReference member loc6 ^ ^ ^  prefix_operators ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> prefix_operators member']
copynode -4.032832503318787:  root modified ^ BasicType-BasicType name int_ter ^ ^ ^  name int_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-BasicType', 'copy-BasicType']
copynode -6.681365966796875:  root add ^ ReturnStatement_ter ^ ^ ; ['root -> add', 'root -> ReturnStatement_ter', 'root -> End']
copynode -4.032832503318787:  root modified ^ BasicType-BasicType name int_ter ^ ^ ^  name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-BasicType', 'copy-BasicType']
copynode -4.032832503318787:  root modified ^ BasicType-BasicType name int_ter ^ ^ ^  name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-BasicType', 'copy-BasicType']
copynode -3.830389142036438:  root modified ^ MemberReference-MemberReference postfix_operators ++_ter ^ ^ member loc6 ^ ^ ^  qualifier ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member']
copynode -4.032832503318787:  root modified ^ BasicType-BasicType name int_ter ^ ^ ^  name double_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-BasicType', 'copy-BasicType']
copynode -4.032832503318787:  root modified ^ BasicType-BasicType name int_ter ^ ^ ^  name int_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-BasicType', 'copy-BasicType']
copynode -4.032832503318787:  root modified ^ BasicType-BasicType name int_ter ^ ^ ^  name double_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-BasicType', 'copy-BasicType']
copynode -2.811987519264221:  root modified ^ MemberReference-MemberReference member loc6 ^ ^ ^  selectors ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> selectors member']
copynode -1.554439663887024:  root modified ^ operator-operator <_ter ^ ^  >>_ter ^ ^ ^ ; ['root -> modified', 'copy-operator', 'operator -> >>_ter']
copynode -3.830389142036438:  root modified ^ MemberReference-MemberReference postfix_operators ++_ter ^ ^ member loc6 ^ ^ ^  postfix_operators ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> postfix_operators member']
copynode -3.830389142036438:  root modified ^ MemberReference-MemberReference postfix_operators ++_ter ^ ^ member loc6 ^ ^ ^  prefix_operators ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> prefix_operators member']
copynode -1.2008697390556335:  root modified ^ MemberReference-MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^  qualifier ^ selectors ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier selectors member']
copynode -2.811987519264221:  root modified ^ MemberReference-MemberReference member loc6 ^ ^ ^  postfix_operators ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> postfix_operators member']
copynode -1.2008697390556335:  root modified ^ MemberReference-MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^  prefix_operators ^ qualifier ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> prefix_operators qualifier member']
copynode -4.032832503318787:  root modified ^ BasicType-BasicType name int_ter ^ ^ ^  name double_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-BasicType', 'copy-BasicType']
copynode -4.032832503318787:  root modified ^ BasicType-BasicType name int_ter ^ ^ ^  name double_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-BasicType', 'copy-BasicType']
copynode -6.688066482543945:  root add ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer MemberReference member par3 ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr BinaryOperation operator +_ter ^ ^ operandl MemberReference member par3 ^ ^ ^ ^ operandr MemberReference member par4 ^ ^ ^ ^ ^ ^ ^ ^ update MemberReference postfix_operators ++_ter ^ ^ member loc6 ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> control', 'copy-control']
copynode -2.912606358528137:  root modified ^ control EnhancedForControl ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> EnhancedForControl']
copynode -3.830389142036438:  root modified ^ MemberReference-MemberReference postfix_operators ++_ter ^ ^ member loc6 ^ ^ ^  selectors ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> selectors member']
copynode -7.117120742797852:  root add ^ ReturnStatement expression MemberReference member loc0 ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'copy-ReturnStatement']
copynode -7.487643122673035:  root modified ^ ReturnStatement expression ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression']
copynode -7.660585403442383:  root add ^ WhileStatement condition ^ ^ ^ ; ['root -> add', 'root -> WhileStatement', 'WhileStatement -> condition']
copynode -1.554439663887024:  root modified ^ operator-operator <_ter ^ ^  >>>_ter ^ ^ ^ ; ['root -> modified', 'copy-operator', 'operator -> >>>_ter']
copynode -1.554439663887024:  root modified ^ operator-operator <_ter ^ ^  /_ter ^ ^ ^ ; ['root -> modified', 'copy-operator', 'operator -> /_ter']
copynode -7.744806289672852:  root add ^ AssertStatement condition ^ ^ ^ ; ['root -> add', 'root -> AssertStatement', 'AssertStatement -> condition']
copynode -7.117120742797852:  root add ^ ReturnStatement expression ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'ReturnStatement -> expression']
copynode -6.091814041137695:  root add ^ LocalVariableDeclaration modifiers ^ type ^ declarators ^ ^ ^ ; ['root -> add', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators']
copynode -1.554439663887024:  root modified ^ operator-operator <_ter ^ ^  *_ter ^ ^ ^ ; ['root -> modified', 'copy-operator', 'operator -> *_ter']
copynode -8.164506912231445:  root add ^ BreakStatement_ter ^ ^ ; ['root -> add', 'root -> BreakStatement_ter', 'root -> End']
copynode -6.688066482543945:  root add ^ control ForControl ^ ^ ^ ; ['root -> add', 'root -> control', 'control -> ForControl']
copynode -6.688066482543945:  root add ^ control EnhancedForControl ^ ^ ^ ; ['root -> add', 'root -> control', 'control -> EnhancedForControl']
copynode -1.4841176569461823:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par4 ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ then_statement BlockStatement statements StatementExpression expression Assignment expressionl MemberReference member loc0 ^ ^ ^ ^ value Literal value 0.0_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ^ ^ else_statement IfStatement condition BinaryOperation operator >_ter ^ ^ operandl MemberReference member par4 ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ then_statement BlockStatement statements LocalVariableDeclaration type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name loc1 ^ ^ initializer Literal value 0.0_ter ^ ^ ^ ^ ^ ^ ^ LocalVariableDeclaration type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer Literal value 0.0_ter ^ ^ ^ ^ ^ ^ ^ LocalVariableDeclaration type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name loc3 ^ ^ initializer Literal value 0.0_ter ^ ^ ^ ^ ^ ^ ^ ForStatement control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer MemberReference member par3 ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr BinaryOperation operator +_ter ^ ^ operandl MemberReference member par3 ^ ^ ^ ^ operandr MemberReference member par4 ^ ^ ^ ^ ^ ^ ^ ^ update MemberReference postfix_operators ++_ter ^ ^ member loc6 ^ ^ ^ ^ ^ ^ body BlockStatement statements StatementExpression expression Assignment expressionl MemberReference member loc2 ^ ^ ^ ^ value BinaryOperation operator -_ter ^ ^ operandl MemberReference selectors ArraySelector index MemberReference member loc6 ^ ^ ^ ^ ^ ^ member par0 ^ ^ ^ ^ operandr MemberReference member par2 ^ ^ ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member loc1 ^ ^ ^ ^ value BinaryOperation operator *_ter ^ ^ operandl MemberReference selectors ArraySelector index MemberReference member loc6 ^ ^ ^ ^ ^ ^ member par1 ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MemberReference member loc2 ^ ^ ^ ^ operandr MemberReference member loc2 ^ ^ ^ ^ ^ ^ ^ ^ type +=_ter ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member loc3 ^ ^ ^ ^ value BinaryOperation operator *_ter ^ ^ operandl MemberReference selectors ArraySelector index MemberReference member loc6 ^ ^ ^ ^ ^ ^ member par1 ^ ^ ^ ^ operandr MemberReference member loc2 ^ ^ ^ ^ ^ ^ type +=_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ LocalVariableDeclaration type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name loc5 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ForStatement control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^ ^ ^ ^ update MemberReference postfix_operators ++_ter ^ ^ member loc6 ^ ^ ^ ^ ^ ^ body BlockStatement statements StatementExpression expression Assignment expressionl MemberReference member loc5 ^ ^ ^ ^ value MemberReference selectors ArraySelector index MemberReference member loc6 ^ ^ ^ ^ ^ ^ member par1 ^ ^ ^ ^ type +=_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ IfStatement condition MemberReference member isBiasCorrected_ter ^ ^ ^ ^ then_statement BlockStatement statements StatementExpression expression Assignment expressionl MemberReference member loc0 ^ ^ ^ ^ value BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator -_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member loc3 ^ ^ ^ ^ operandr MemberReference member loc3 ^ ^ ^ ^ ^ ^ operandr MemberReference member loc5 ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr Literal value 1.0_ter ^ ^ ^ ^ ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ^ ^ else_statement BlockStatement statements StatementExpression expression Assignment expressionl MemberReference member loc0 ^ ^ ^ ^ value BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator -_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member loc3 ^ ^ ^ ^ operandr MemberReference member loc3 ^ ^ ^ ^ ^ ^ operandr MemberReference member loc5 ^ ^ ^ ^ ^ ^ ^ ^ operandr MemberReference member loc5 ^ ^ ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'copy-IfStatement']
copynode -6.091814041137695:  root add ^ LocalVariableDeclaration type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name loc3 ^ ^ initializer Literal value 0.0_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> LocalVariableDeclaration', 'copy-LocalVariableDeclaration']
copynode -9.261940479278564:  root add ^ Statement_ter ^ ^ ; ['root -> add', 'root -> Statement_ter', 'root -> End']
copynode -6.091814041137695:  root add ^ LocalVariableDeclaration type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer Literal value 0.0_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> LocalVariableDeclaration', 'copy-LocalVariableDeclaration']
copynode -7.487643122673035:  root modified ^ ReturnStatement expression MemberReference member loc0 ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'copy-ReturnStatement']
copynode -6.091814041137695:  root add ^ LocalVariableDeclaration type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name loc1 ^ ^ initializer Literal value 0.0_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> LocalVariableDeclaration', 'copy-LocalVariableDeclaration']
copynode -1.2008697390556335:  root modified ^ MemberReference-MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^  prefix_operators ^ selectors ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> prefix_operators selectors member']
copynode -6.373405814170837:  root modified ^ Literal-Literal value 0_ter ^ ^ ^  prefix_operators ^ value ^ ^ ^ ; ['root -> modified', 'copy-Literal', 'Literal -> prefix_operators value']
copynode -6.091814041137695:  root add ^ LocalVariableDeclaration type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer MemberReference qualifier Double_ter ^ ^ member NaN_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> LocalVariableDeclaration', 'copy-LocalVariableDeclaration']
copynode -1.4841176569461823:  root add ^ IfStatement condition BinaryOperation operator >_ter ^ ^ operandl MemberReference member par4 ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ then_statement BlockStatement statements LocalVariableDeclaration type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name loc1 ^ ^ initializer Literal value 0.0_ter ^ ^ ^ ^ ^ ^ ^ LocalVariableDeclaration type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer Literal value 0.0_ter ^ ^ ^ ^ ^ ^ ^ LocalVariableDeclaration type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name loc3 ^ ^ initializer Literal value 0.0_ter ^ ^ ^ ^ ^ ^ ^ ForStatement control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer MemberReference member par3 ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr BinaryOperation operator +_ter ^ ^ operandl MemberReference member par3 ^ ^ ^ ^ operandr MemberReference member par4 ^ ^ ^ ^ ^ ^ ^ ^ update MemberReference postfix_operators ++_ter ^ ^ member loc6 ^ ^ ^ ^ ^ ^ body BlockStatement statements StatementExpression expression Assignment expressionl MemberReference member loc2 ^ ^ ^ ^ value BinaryOperation operator -_ter ^ ^ operandl MemberReference selectors ArraySelector index MemberReference member loc6 ^ ^ ^ ^ ^ ^ member par0 ^ ^ ^ ^ operandr MemberReference member par2 ^ ^ ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member loc1 ^ ^ ^ ^ value BinaryOperation operator *_ter ^ ^ operandl MemberReference selectors ArraySelector index MemberReference member loc6 ^ ^ ^ ^ ^ ^ member par1 ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MemberReference member loc2 ^ ^ ^ ^ operandr MemberReference member loc2 ^ ^ ^ ^ ^ ^ ^ ^ type +=_ter ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member loc3 ^ ^ ^ ^ value BinaryOperation operator *_ter ^ ^ operandl MemberReference selectors ArraySelector index MemberReference member loc6 ^ ^ ^ ^ ^ ^ member par1 ^ ^ ^ ^ operandr MemberReference member loc2 ^ ^ ^ ^ ^ ^ type +=_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ LocalVariableDeclaration type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name loc5 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ForStatement control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^ ^ ^ ^ update MemberReference postfix_operators ++_ter ^ ^ member loc6 ^ ^ ^ ^ ^ ^ body BlockStatement statements StatementExpression expression Assignment expressionl MemberReference member loc5 ^ ^ ^ ^ value MemberReference selectors ArraySelector index MemberReference member loc6 ^ ^ ^ ^ ^ ^ member par1 ^ ^ ^ ^ type +=_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ IfStatement condition MemberReference member isBiasCorrected_ter ^ ^ ^ ^ then_statement BlockStatement statements StatementExpression expression Assignment expressionl MemberReference member loc0 ^ ^ ^ ^ value BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator -_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member loc3 ^ ^ ^ ^ operandr MemberReference member loc3 ^ ^ ^ ^ ^ ^ operandr MemberReference member loc5 ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr Literal value 1.0_ter ^ ^ ^ ^ ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ^ ^ else_statement BlockStatement statements StatementExpression expression Assignment expressionl MemberReference member loc0 ^ ^ ^ ^ value BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator -_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member loc3 ^ ^ ^ ^ operandr MemberReference member loc3 ^ ^ ^ ^ ^ ^ operandr MemberReference member loc5 ^ ^ ^ ^ ^ ^ ^ ^ operandr MemberReference member loc5 ^ ^ ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'copy-IfStatement']
copynode -6.091814041137695:  root add ^ LocalVariableDeclaration type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name loc5 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> LocalVariableDeclaration', 'copy-LocalVariableDeclaration']
copynode -2.912606358528137:  root modified ^ control ForControl_ter ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl_ter']
copynode -2.912606358528137:  root modified ^ control par4 ^ ^ ^ ; ['root -> modified', 'root -> control', 'copy-FormalParameter']
copynode -1.2008697390556335:  root modified ^ MemberReference-MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^  prefix_operators ^ qualifier ^ selectors ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> prefix_operators qualifier selectors member']
copynode -2.811987519264221:  root modified ^ MemberReference-MemberReference member loc6 ^ ^ ^  qualifier ^ selectors ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier selectors member']
copynode -1.2008697390556335:  root modified ^ MemberReference-MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^  postfix_operators ^ selectors ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> postfix_operators selectors member']
copynode -6.091814041137695:  root add ^ LocalVariableDeclaration annotations ^ type ^ declarators ^ ^ ^ ; ['root -> add', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> annotations type declarators']
copynode -6.688066482543945:  root add ^ control par4 ^ ^ ^ ; ['root -> add', 'root -> control', 'copy-FormalParameter']
copynode -10.57166302204132:  root ReturnStatement expression MemberReference member loc0 ^ ^ ^ ^ ^ ^ ; ['root -> ReturnStatement', 'copy-ReturnStatement', 'root -> End']
copynode -6.688066482543945:  root add ^ control par2 ^ ^ ^ ; ['root -> add', 'root -> control', 'copy-FormalParameter']
copynode -6.688066482543945:  root add ^ control par1 ^ ^ ^ ; ['root -> add', 'root -> control', 'copy-FormalParameter']
copynode -6.688066482543945:  root add ^ control par3 ^ ^ ^ ; ['root -> add', 'root -> control', 'copy-FormalParameter']
copynode -2.912606358528137:  root modified ^ control par1 ^ ^ ^ ; ['root -> modified', 'root -> control', 'copy-FormalParameter']
copynode -2.912606358528137:  root modified ^ control par3 ^ ^ ^ ; ['root -> modified', 'root -> control', 'copy-FormalParameter']
copynode -1.4841176569461823:  root add ^ IfStatement condition MemberReference member isBiasCorrected_ter ^ ^ ^ ^ then_statement BlockStatement statements StatementExpression expression Assignment expressionl MemberReference member loc0 ^ ^ ^ ^ value BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator -_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member loc3 ^ ^ ^ ^ operandr MemberReference member loc3 ^ ^ ^ ^ ^ ^ operandr MemberReference member loc5 ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr Literal value 1.0_ter ^ ^ ^ ^ ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ^ ^ else_statement BlockStatement statements StatementExpression expression Assignment expressionl MemberReference member loc0 ^ ^ ^ ^ value BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator -_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member loc3 ^ ^ ^ ^ operandr MemberReference member loc3 ^ ^ ^ ^ ^ ^ operandr MemberReference member loc5 ^ ^ ^ ^ ^ ^ ^ ^ operandr MemberReference member loc5 ^ ^ ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'copy-IfStatement']
copynode -10.29684829711914:  root ReturnStatement expression Literal ^ ^ ^ ^ ; ['root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> Literal']
copynode -2.912606358528137:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^ ^ ^ ^ update MemberReference postfix_operators ++_ter ^ ^ member loc6 ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'copy-control']
copynode -6.688066482543945:  root add ^ control par0 ^ ^ ^ ; ['root -> add', 'root -> control', 'copy-FormalParameter']
copynode -2.912606358528137:  root modified ^ control par2 ^ ^ ^ ; ['root -> modified', 'root -> control', 'copy-FormalParameter']
copynode -3.830389142036438:  root modified ^ MemberReference-MemberReference postfix_operators ++_ter ^ ^ member loc6 ^ ^ ^  qualifier ^ selectors ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier selectors member']
copynode -2.811987519264221:  root modified ^ MemberReference-MemberReference member loc6 ^ ^ ^  prefix_operators ^ qualifier ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> prefix_operators qualifier member']
copynode -2.912606358528137:  root modified ^ control par0 ^ ^ ^ ; ['root -> modified', 'root -> control', 'copy-FormalParameter']
copynode -6.681365966796875:  root add ^ ReturnStatement_ter ^ StatementExpression ^ ^ ; ['root -> add', 'root -> ReturnStatement_ter', 'root -> StatementExpression']
copynode -10.29684829711914:  root ReturnStatement expression MemberReference ^ ^ ^ ^ ; ['root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MemberReference']
copynode -11.11115227045957:  root IfStatement condition BinaryOperation ^ ^ ^ ^ ; ['root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation']
before@3 batch0 x: -11.36961380543653: root IfStatement condition BinaryOperation ^ ^ ^ ^  ; ['root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation']
after@3 batch0 x: -11.36961380543653: root IfStatement condition BinaryOperation ^ ^ ^ ^  ; ['root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation']
copynode -1.4857489950954914:  root add ^ IfStatement condition BinaryOperation ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation']
copynode -2.1137535572052:  root modified ^ operator-operator <_ter ^ ^  <=_ter ^ ^ ^ ; ['root -> modified', 'copy-operator', 'operator -> <=_ter', 'root -> End']
copynode -1.9559432864189148:  root modified ^ MemberReference-MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^  member loc6 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> loc6']
copynode -2.911107301712036:  root modified ^ operator-operator <_ter ^ ^  >=_ter ^ ^ ^ ; ['root -> modified', 'copy-operator', 'operator -> >=_ter', 'root -> End']
copynode -3.032776579260826:  root modified ^ control ForControl init ^ condition ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update']
copynode -2.658340632915497:  root add ^ StatementExpression expression Assignment ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment']
copynode -1.9366028904914856:  root modified ^ MemberReference-MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^  qualifier loc3 ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'qualifier -> loc3']
copynode -2.923440895974636:  root modified ^ MemberReference-MemberReference member loc6 ^ ^ ^  member loc6 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> loc6']
copynode -1.9366028904914856:  root modified ^ MemberReference-MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^  qualifier par1 ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par1']
copynode -2.658340632915497:  root add ^ StatementExpression expression MethodInvocation ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation']
copynode -1.4857489950954914:  root add ^ IfStatement condition MethodInvocation ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation']
copynode -1.9366028904914856:  root modified ^ MemberReference-MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^  qualifier loc2 ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'qualifier -> loc2']
copynode -1.9559432864189148:  root modified ^ MemberReference-MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^  member loc3 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> loc3']
copynode -4.052199482917786:  root modified ^ operator-operator <_ter ^ ^  <_ter ^ ^ ^ ; ['root -> modified', 'copy-operator', 'operator -> <_ter', 'root -> End']
copynode -1.4857489950954914:  root add ^ IfStatement condition MemberReference ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference']
copynode -3.9720729142427444:  root modified ^ MemberReference-MemberReference postfix_operators ++_ter ^ ^ member loc6 ^ ^ ^  member loc6 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> loc6']
copynode -4.625291228294373:  root modified ^ operator-operator <_ter ^ ^  >_ter ^ ^ ^ ; ['root -> modified', 'copy-operator', 'operator -> >_ter', 'root -> End']
copynode -1.9366028904914856:  root modified ^ MemberReference-MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^  qualifier par2 ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par2']
copynode -1.9366028904914856:  root modified ^ MemberReference-MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^  qualifier Double_ter ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'copy-qualifier']
copynode -2.923440895974636:  root modified ^ MemberReference-MemberReference member loc6 ^ ^ ^  member loc3 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> loc3']
copynode -1.9366028904914856:  root modified ^ MemberReference-MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^  qualifier par0 ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0']
copynode -1.9559432864189148:  root modified ^ MemberReference-MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^  member loc5 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> loc5']
copynode -1.9366028904914856:  root modified ^ MemberReference-MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^  qualifier par1 ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'copy-qualifier']
copynode -5.31675398349762:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer MemberReference member par3 ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr BinaryOperation operator +_ter ^ ^ operandl MemberReference member par3 ^ ^ ^ ^ operandr MemberReference member par4 ^ ^ ^ ^ ^ ^ ^ ^ update MemberReference postfix_operators ++_ter ^ ^ member loc6 ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'copy-control', 'root -> End']
copynode -5.350694298744202:  root modified ^ BasicType-BasicType name int_ter ^ ^ ^  name double_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-BasicType', 'copy-BasicType', 'root -> End']
copynode -5.2606284618377686:  root add ^ StatementExpression expression Assignment expressionl MemberReference member loc0 ^ ^ ^ ^ value Literal value 0.0_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'copy-StatementExpression', 'root -> End']
copynode -1.9366028904914856:  root modified ^ MemberReference-MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^  qualifier loc1 ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'qualifier -> loc1']
copynode -1.9366028904914856:  root modified ^ MemberReference-MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^  qualifier unknown ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'start -> unknown']
copynode -5.44746720790863:  root modified ^ operator-operator <_ter ^ ^  -_ter ^ ^ ^ ; ['root -> modified', 'copy-operator', 'operator -> -_ter', 'root -> End']
copynode -1.9559432864189148:  root modified ^ MemberReference-MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^  member unknown ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'start -> unknown']
copynode -4.884001910686493:  root modified ^ MemberReference-MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^  prefix_operators -_ter ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> prefix_operators member', 'prefix_operators -> -_ter']
copynode -2.658340632915497:  root add ^ StatementExpression expression MemberReference ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MemberReference']
copynode -1.9559432864189148:  root modified ^ MemberReference-MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^  member isBiasCorrected_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'copy-member']
copynode -5.495110511779785:  root modified ^ BasicType-BasicType name int_ter ^ ^ ^  name long_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-BasicType', 'BasicType -> name', 'name -> long_ter']
copynode -5.701788663864136:  root add ^ StatementExpression expression Assignment expressionl MemberReference member loc2 ^ ^ ^ ^ value BinaryOperation operator -_ter ^ ^ operandl MemberReference selectors ArraySelector index MemberReference member loc6 ^ ^ ^ ^ ^ ^ member par0 ^ ^ ^ ^ operandr MemberReference member par2 ^ ^ ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'copy-StatementExpression', 'root -> End']
copynode -5.7094886302948:  root add ^ StatementExpression expression Assignment expressionl MemberReference member loc1 ^ ^ ^ ^ value BinaryOperation operator *_ter ^ ^ operandl MemberReference selectors ArraySelector index MemberReference member loc6 ^ ^ ^ ^ ^ ^ member par1 ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MemberReference member loc2 ^ ^ ^ ^ operandr MemberReference member loc2 ^ ^ ^ ^ ^ ^ ^ ^ type +=_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'copy-StatementExpression', 'root -> End']
copynode -3.9720729142427444:  root modified ^ MemberReference-MemberReference postfix_operators ++_ter ^ ^ member loc6 ^ ^ ^  member loc3 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> loc3']
copynode -3.032776579260826:  root modified ^ control ForControl init ^ condition ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition']
copynode -1.9559432864189148:  root modified ^ MemberReference-MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^  member loc4 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> loc4']
copynode -2.923440895974636:  root modified ^ MemberReference-MemberReference member loc6 ^ ^ ^  member loc5 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> loc5']
copynode -5.823933362960815:  root add ^ StatementExpression expression Assignment expressionl MemberReference member loc3 ^ ^ ^ ^ value BinaryOperation operator *_ter ^ ^ operandl MemberReference selectors ArraySelector index MemberReference member loc6 ^ ^ ^ ^ ^ ^ member par1 ^ ^ ^ ^ operandr MemberReference member loc2 ^ ^ ^ ^ ^ ^ type +=_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'copy-StatementExpression', 'root -> End']
copynode -5.904459714889526:  root add ^ StatementExpression expression Assignment expressionl MemberReference member loc5 ^ ^ ^ ^ value MemberReference selectors ArraySelector index MemberReference member loc6 ^ ^ ^ ^ ^ ^ member par1 ^ ^ ^ ^ type +=_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'copy-StatementExpression', 'root -> End']
copynode -1.9559432864189148:  root modified ^ MemberReference-MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^  member loc7 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> loc7']
copynode -4.884001910686493:  root modified ^ MemberReference-MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^  prefix_operators ~_ter ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> prefix_operators member', 'prefix_operators -> ~_ter']
copynode -1.4857489950954914:  root add ^ IfStatement condition MemberReference member isBiasCorrected_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'copy-condition']
copynode -6.102474927902222:  root add ^ StatementExpression expression Assignment expressionl MemberReference member loc0 ^ ^ ^ ^ value BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator -_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member loc3 ^ ^ ^ ^ operandr MemberReference member loc3 ^ ^ ^ ^ ^ ^ operandr MemberReference member loc5 ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr Literal value 1.0_ter ^ ^ ^ ^ ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'copy-StatementExpression', 'root -> End']
copynode -1.9366028904914856:  root modified ^ MemberReference-MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^  qualifier loc0 ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'qualifier -> loc0']
copynode -5.468762576580048:  root modified ^ MemberReference-MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^  selectors ArraySelector ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> selectors member', 'selectors -> ArraySelector']
copynode -6.401135563850403:  root modified ^ operator-operator <_ter ^ ^  ==_ter ^ ^ ^ ; ['root -> modified', 'copy-operator', 'operator -> ==_ter', 'root -> End']
copynode -5.688821911811829:  root modified ^ MemberReference-MemberReference member loc6 ^ ^ ^  qualifier loc3 ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'qualifier -> loc3']
copynode -2.923440895974636:  root modified ^ MemberReference-MemberReference member loc6 ^ ^ ^  member loc4 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> loc4']
copynode -6.469306528568268:  root add ^ LocalVariableDeclaration type BasicType ^ ^ declarators ^ ^ ^ ; ['root -> add', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType']
copynode -6.458523273468018:  root add ^ StatementExpression expression Assignment expressionl MemberReference member loc0 ^ ^ ^ ^ value BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator -_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member loc3 ^ ^ ^ ^ operandr MemberReference member loc3 ^ ^ ^ ^ ^ ^ operandr MemberReference member loc5 ^ ^ ^ ^ ^ ^ ^ ^ operandr MemberReference member loc5 ^ ^ ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'copy-StatementExpression', 'root -> End']
copynode -1.9559432864189148:  root modified ^ MemberReference-MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^  member loc0 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> loc0']
copynode -6.6471534967422485:  root modified ^ BasicType-BasicType name int_ter ^ ^ ^  name int_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-BasicType', 'copy-BasicType', 'root -> End']
copynode -5.468762576580048:  root modified ^ MemberReference-MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^  selectors ArraySelector index MemberReference member loc6 ^ ^ ^ ^ ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> selectors member', 'copy-selectors']
copynode -6.127313777804375:  root modified ^ BreakStatement goto outer_ter ^ ^ ^ ^ ; ['root -> modified', 'root -> BreakStatement', 'BreakStatement -> goto', 'goto -> outer_ter']
copynode -6.491004168987274:  root modified ^ MemberReference-MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^  postfix_operators ++_ter ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> postfix_operators member', 'copy-postfix_operators']
copynode -6.812307000160217:  root modified ^ BasicType-BasicType name int_ter ^ ^ ^  name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-BasicType', 'copy-BasicType', 'root -> End']
copynode -2.923440895974636:  root modified ^ MemberReference-MemberReference member loc6 ^ ^ ^  member unknown ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'start -> unknown']
copynode -6.884872078895569:  root modified ^ BasicType-BasicType name int_ter ^ ^ ^  name double_ter ^ ^ dimensions None_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-BasicType', 'copy-BasicType', 'root -> End']
copynode -3.9720729142427444:  root modified ^ MemberReference-MemberReference postfix_operators ++_ter ^ ^ member loc6 ^ ^ ^  member loc5 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> loc5']
copynode -2.923440895974636:  root modified ^ MemberReference-MemberReference member loc6 ^ ^ ^  member isBiasCorrected_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'copy-member']
copynode -5.495110511779785:  root modified ^ BasicType-BasicType name int_ter ^ ^ ^  name int_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-BasicType', 'BasicType -> name', 'name -> int_ter']
copynode -7.021026253700256:  root modified ^ BasicType-BasicType name int_ter ^ ^ ^  name double_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-BasicType', 'copy-BasicType', 'root -> End']
copynode -6.426120288670063:  root modified ^ Literal-Literal value 0_ter ^ ^ ^  value 0_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-Literal', 'Literal -> value', 'value -> 0_ter']
copynode -7.124278664588928:  root modified ^ BasicType-BasicType name int_ter ^ ^ ^  name int_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-BasicType', 'copy-BasicType', 'root -> End']
copynode -2.923440895974636:  root modified ^ MemberReference-MemberReference member loc6 ^ ^ ^  member loc7 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> loc7']
copynode -7.155534386634827:  root modified ^ BasicType-BasicType name int_ter ^ ^ ^  name double_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-BasicType', 'copy-BasicType', 'root -> End']
copynode -6.585399746894836:  root modified ^ MemberReference-MemberReference member loc6 ^ ^ ^  prefix_operators -_ter ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> prefix_operators member', 'prefix_operators -> -_ter']
copynode -7.184390187263489:  root modified ^ operator-operator <_ter ^ ^  >>_ter ^ ^ ^ ; ['root -> modified', 'copy-operator', 'operator -> >>_ter', 'root -> End']
copynode -4.884001910686493:  root modified ^ MemberReference-MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^  prefix_operators --_ter ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> prefix_operators member', 'prefix_operators -> --_ter']
copynode -7.348130822181702:  root modified ^ BasicType-BasicType name int_ter ^ ^ ^  name double_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-BasicType', 'copy-BasicType', 'root -> End']
copynode -7.368087410926819:  root modified ^ BasicType-BasicType name int_ter ^ ^ ^  name double_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-BasicType', 'copy-BasicType', 'root -> End']
copynode -2.923440895974636:  root modified ^ MemberReference-MemberReference member loc6 ^ ^ ^  member loc0 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> loc0']
copynode -3.9720729142427444:  root modified ^ MemberReference-MemberReference postfix_operators ++_ter ^ ^ member loc6 ^ ^ ^  member loc4 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> loc4']
copynode -7.464959740638733:  root modified ^ control EnhancedForControl var ^ iterable ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> EnhancedForControl', 'EnhancedForControl -> var iterable']
copynode -1.4857489950954914:  root add ^ IfStatement condition MethodInvocation arguments MemberReference member par0 ^ ^ ^ MemberReference member par1 ^ ^ ^ MemberReference member par3 ^ ^ ^ MemberReference member par4 ^ ^ ^ ^ member test_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'copy-condition']
copynode -7.297220349311829:  root modified ^ MemberReference-MemberReference member loc6 ^ ^ ^  postfix_operators ++_ter ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> postfix_operators member', 'copy-postfix_operators']
copynode -4.884001910686493:  root modified ^ MemberReference-MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^  prefix_operators ++_ter ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> prefix_operators member', 'prefix_operators -> ++_ter']
copynode -1.9559432864189148:  root modified ^ MemberReference-MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^  member loc2 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> loc2']
copynode -1.4857489950954914:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par4 ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'copy-condition']
copynode -5.468762576580048:  root modified ^ MemberReference-MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^  selectors ArraySelector index MemberReference member loc6 ^ ^ ^ ^ ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> selectors member', 'copy-selectors']
copynode -1.4857489950954914:  root add ^ IfStatement condition BinaryOperation operator >_ter ^ ^ operandl MemberReference member par4 ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'copy-condition']
copynode -7.607062101364136:  root add ^ ReturnStatement expression MemberReference member loc0 ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'copy-ReturnStatement', 'root -> End']
copynode -7.262638449668884:  root modified ^ MemberReference-MemberReference postfix_operators ++_ter ^ ^ member loc6 ^ ^ ^  postfix_operators ++_ter ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> postfix_operators member', 'copy-postfix_operators']
copynode -6.426120288670063:  root modified ^ Literal-Literal value 0_ter ^ ^ ^  value 1_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-Literal', 'Literal -> value', 'value -> 1_ter']
copynode -7.715219140052795:  root modified ^ operator-operator <_ter ^ ^  >>>_ter ^ ^ ^ ; ['root -> modified', 'copy-operator', 'operator -> >>>_ter', 'root -> End']
copynode -5.688821911811829:  root modified ^ MemberReference-MemberReference member loc6 ^ ^ ^  qualifier loc2 ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'qualifier -> loc2']
copynode -6.585399746894836:  root modified ^ MemberReference-MemberReference member loc6 ^ ^ ^  prefix_operators ~_ter ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> prefix_operators member', 'prefix_operators -> ~_ter']
copynode -7.289854407310486:  root modified ^ MemberReference-MemberReference postfix_operators ++_ter ^ ^ member loc6 ^ ^ ^  prefix_operators -_ter ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> prefix_operators member', 'prefix_operators -> -_ter']
copynode -1.9559432864189148:  root modified ^ MemberReference-MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^  member par1 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'copy-member']
copynode -3.9720729142427444:  root modified ^ MemberReference-MemberReference postfix_operators ++_ter ^ ^ member loc6 ^ ^ ^  member loc7 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> loc7']
copynode -7.3270599246025085:  root modified ^ MemberReference-MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^  prefix_operators -_ter ^ ^ qualifier ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> prefix_operators qualifier member', 'prefix_operators -> -_ter']
copynode -7.005909323692322:  root modified ^ MemberReference-MemberReference postfix_operators ++_ter ^ ^ member loc6 ^ ^ ^  qualifier loc3 ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'qualifier -> loc3']
copynode -3.9720729142427444:  root modified ^ MemberReference-MemberReference postfix_operators ++_ter ^ ^ member loc6 ^ ^ ^  member unknown ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'start -> unknown']
copynode -5.468762576580048:  root modified ^ MemberReference-MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^  selectors ArraySelector index MemberReference member loc6 ^ ^ ^ ^ ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> selectors member', 'copy-selectors']
copynode -7.956116795539856:  root modified ^ operator-operator <_ter ^ ^  /_ter ^ ^ ^ ; ['root -> modified', 'copy-operator', 'operator -> /_ter', 'root -> End']
before@4 batch0 x: -7.95630981400609: root modified ^ operator-operator <_ter ^ ^  /_ter ^ ^ ^  ; ['root -> modified', 'copy-operator', 'operator -> /_ter', 'root -> End']
after@4 batch0 x: -7.95630981400609: root modified ^ operator-operator <_ter ^ ^  /_ter ^ ^ ^  ; ['root -> modified', 'copy-operator', 'operator -> /_ter', 'root -> End']
copynode -1.7172685749828815:  root add ^ IfStatement condition BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
copynode -2.3289178609848022:  root modified ^ MemberReference-MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^  member loc6 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> loc6', 'root -> End']
copynode -3.257283627986908:  root add ^ StatementExpression expression Assignment expressionl ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type']
copynode -3.1214855760335922:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init']
copynode -3.3483313843607903:  root modified ^ MemberReference-MemberReference member loc6 ^ ^ ^  member loc6 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> loc6', 'root -> End']
copynode -4.000209271907806:  root modified ^ MemberReference-MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^  member loc3 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> loc3', 'root -> End']
copynode -3.3307581543922424:  root modified ^ MemberReference-MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^  qualifier loc3 ^ ^ member unknown ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'qualifier -> loc3', 'start -> unknown']
copynode -3.3844080567359924:  root modified ^ MemberReference-MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^  qualifier par1 ^ ^ member unknown ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par1', 'start -> unknown']
copynode -3.3307581543922424:  root modified ^ MemberReference-MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^  qualifier loc3 ^ ^ member par4 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'qualifier -> loc3', 'copy-member']
copynode -3.707581579685211:  root modified ^ MemberReference-MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^  qualifier loc2 ^ ^ member unknown ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'qualifier -> loc2', 'start -> unknown']
copynode -4.424203172326088:  root modified ^ MemberReference-MemberReference postfix_operators ++_ter ^ ^ member loc6 ^ ^ ^  member loc6 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> loc6', 'root -> End']
copynode -3.3844080567359924:  root modified ^ MemberReference-MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^  qualifier par1 ^ ^ member par4 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par1', 'copy-member']
copynode -3.603452146053314:  root add ^ StatementExpression expression MethodInvocation arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> arguments member']
copynode -4.168068636208773:  root add ^ IfStatement condition MemberReference member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference', 'MemberReference -> member']
copynode -3.621475923806429:  root add ^ IfStatement condition MethodInvocation qualifier ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier arguments member']
copynode -4.773969613015652:  root modified ^ MemberReference-MemberReference member loc6 ^ ^ ^  member loc3 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> loc3', 'root -> End']
copynode -3.707581579685211:  root modified ^ MemberReference-MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^  qualifier loc2 ^ ^ member par4 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'qualifier -> loc2', 'copy-member']
copynode -3.603452146053314:  root add ^ StatementExpression expression MethodInvocation qualifier ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member']
copynode -5.0062307715415955:  root modified ^ MemberReference-MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^  member loc5 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> loc5', 'root -> End']
copynode -3.1214855760335922:  root modified ^ control ForControl init VariableDeclaration ^ ^ condition ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'init -> VariableDeclaration']
copynode -3.621475923806429:  root add ^ IfStatement condition MethodInvocation qualifier ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier member']
copynode -4.706868946552277:  root modified ^ MemberReference-MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^  qualifier Double_ter ^ ^ member unknown ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'copy-qualifier', 'start -> unknown']
copynode -3.603452146053314:  root add ^ StatementExpression expression MethodInvocation member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> member']
copynode -4.682045996189117:  root modified ^ MemberReference-MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^  qualifier par2 ^ ^ member unknown ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par2', 'start -> unknown']
copynode -5.596093595027924:  root modified ^ MemberReference-MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^  member unknown ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'start -> unknown', 'root -> End']
copynode -5.287208378314972:  root modified ^ MemberReference-MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^  qualifier par1 ^ ^ member unknown ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'copy-qualifier', 'start -> unknown']
copynode -4.87064653635025:  root modified ^ MemberReference-MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^  qualifier par0 ^ ^ member unknown ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'start -> unknown']
copynode -4.168068636208773:  root add ^ IfStatement condition MemberReference prefix_operators ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference', 'MemberReference -> prefix_operators member']
copynode -3.603452146053314:  root add ^ StatementExpression expression MethodInvocation qualifier ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier member']
copynode -5.722202003002167:  root modified ^ MemberReference-MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^  member isBiasCorrected_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'copy-member', 'root -> End']
copynode -5.79134538769722:  root modified ^ BasicType-BasicType name int_ter ^ ^ ^  name long_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-BasicType', 'BasicType -> name', 'name -> long_ter', 'root -> End']
copynode -5.836732104420662:  root modified ^ MemberReference-MemberReference postfix_operators ++_ter ^ ^ member loc6 ^ ^ ^  member loc3 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> loc3', 'root -> End']
copynode -4.682045996189117:  root modified ^ MemberReference-MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^  qualifier par2 ^ ^ member par4 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par2', 'copy-member']
copynode -3.621475923806429:  root add ^ IfStatement condition MethodInvocation member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> member']
copynode -5.900725781917572:  root modified ^ MemberReference-MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^  member loc4 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> loc4', 'root -> End']
copynode -5.919053994119167:  root modified ^ MemberReference-MemberReference member loc6 ^ ^ ^  member loc5 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> loc5', 'root -> End']
copynode -3.621475923806429:  root add ^ IfStatement condition MethodInvocation arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> arguments member']
copynode -5.998778998851776:  root modified ^ MemberReference-MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^  member loc7 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> loc7', 'root -> End']
copynode -4.87064653635025:  root modified ^ MemberReference-MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^  qualifier par0 ^ ^ member par4 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member']
copynode -5.611245691776276:  root modified ^ MemberReference-MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^  prefix_operators -_ter ^ ^ member loc6 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> prefix_operators member', 'prefix_operators -> -_ter', 'member -> loc6']
copynode -5.871109947562218:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition', 'copy-init']
copynode -4.706868946552277:  root modified ^ MemberReference-MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^  qualifier Double_ter ^ ^ member par4 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'copy-qualifier', 'copy-member']
copynode -5.409489691257477:  root modified ^ MemberReference-MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^  qualifier loc1 ^ ^ member unknown ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'qualifier -> loc1', 'start -> unknown']
copynode -5.671809613704681:  root add ^ StatementExpression expression MemberReference postfix_operators ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MemberReference', 'MemberReference -> postfix_operators member']
copynode -6.080995786935091:  root add ^ IfStatement condition MemberReference member isBiasCorrected_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'copy-condition', 'root -> End']
copynode -5.9997822642326355:  root modified ^ MemberReference-MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^  prefix_operators ~_ter ^ ^ member loc6 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> prefix_operators member', 'prefix_operators -> ~_ter', 'member -> loc6']
copynode -1.7172685749828815:  root add ^ IfStatement condition BinaryOperation operator -_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member loc3 ^ ^ ^ ^ operandr MemberReference member loc3 ^ ^ ^ ^ ^ ^ operandr MemberReference member loc5 ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'copy-BinaryOperation']
copynode -6.473972283303738:  root modified ^ MemberReference-MemberReference member loc6 ^ ^ ^  member loc4 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> loc4', 'root -> End']
copynode -3.621475923806429:  root add ^ IfStatement condition MethodInvocation prefix_operators ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> prefix_operators member']
copynode -5.409489691257477:  root modified ^ MemberReference-MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^  qualifier loc1 ^ ^ member par4 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'qualifier -> loc1', 'copy-member']
copynode -6.3490777015686035:  root modified ^ MemberReference-MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^  selectors ArraySelector index ^ ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> selectors member', 'selectors -> ArraySelector', 'ArraySelector -> index']
copynode -1.7172685749828815:  root add ^ IfStatement condition BinaryOperation operator -_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member loc3 ^ ^ ^ ^ operandr MemberReference member loc3 ^ ^ ^ ^ ^ ^ operandr MemberReference member loc5 ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'copy-BinaryOperation']
copynode -5.436352789402008:  root modified ^ MemberReference-MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^  qualifier unknown ^ ^ member par4 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'start -> unknown', 'copy-member']
copynode -1.7172685749828815:  root add ^ IfStatement condition BinaryOperation operator -_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr Literal value 1.0_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'copy-BinaryOperation']
copynode -6.598662555217743:  root modified ^ MemberReference-MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^  member loc0 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> loc0', 'root -> End']
copynode -3.621475923806429:  root add ^ IfStatement condition MethodInvocation prefix_operators ^ qualifier ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> prefix_operators qualifier arguments member']
copynode -6.684995457530022:  root modified ^ BreakStatement goto outer_ter ^ ^ ^ ^ ; ['root -> modified', 'root -> BreakStatement', 'BreakStatement -> goto', 'goto -> outer_ter', 'root -> End']
copynode -1.7172685749828815:  root add ^ IfStatement condition BinaryOperation operator *_ter ^ ^ operandl MemberReference member loc3 ^ ^ ^ ^ operandr MemberReference member loc3 ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'copy-BinaryOperation']
copynode -1.7172685749828815:  root add ^ IfStatement condition BinaryOperation operator +_ter ^ ^ operandl MemberReference member par3 ^ ^ ^ ^ operandr MemberReference member par4 ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'copy-BinaryOperation']
copynode -3.621475923806429:  root add ^ IfStatement condition MethodInvocation prefix_operators ^ qualifier ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> prefix_operators qualifier member']
copynode -5.671809613704681:  root add ^ StatementExpression expression MemberReference selectors ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MemberReference', 'MemberReference -> selectors member']
copynode -1.7172685749828815:  root add ^ IfStatement condition BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member loc3 ^ ^ ^ ^ operandr MemberReference member loc3 ^ ^ ^ ^ ^ ^ operandr MemberReference member loc5 ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'copy-BinaryOperation']
copynode -6.834571801126003:  root modified ^ MemberReference-MemberReference member loc6 ^ ^ ^  member unknown ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'start -> unknown', 'root -> End']
copynode -6.905217245221138:  root modified ^ MemberReference-MemberReference postfix_operators ++_ter ^ ^ member loc6 ^ ^ ^  member loc5 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> loc5', 'root -> End']
copynode -1.7172685749828815:  root add ^ IfStatement condition BinaryOperation operator *_ter ^ ^ operandl MemberReference member loc3 ^ ^ ^ ^ operandr MemberReference member loc3 ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'copy-BinaryOperation']
copynode -1.7172685749828815:  root add ^ IfStatement condition BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member loc3 ^ ^ ^ ^ operandr MemberReference member loc3 ^ ^ ^ ^ ^ ^ operandr MemberReference member loc5 ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'copy-BinaryOperation']
copynode -6.206547558307648:  root modified ^ MemberReference-MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^  qualifier loc0 ^ ^ member unknown ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'qualifier -> loc0', 'start -> unknown']
copynode -6.977285347878933:  root modified ^ MemberReference-MemberReference member loc6 ^ ^ ^  member isBiasCorrected_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'copy-member', 'root -> End']
copynode -1.7172685749828815:  root add ^ IfStatement condition BinaryOperation operator *_ter ^ ^ operandl MemberReference member loc2 ^ ^ ^ ^ operandr MemberReference member loc2 ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'copy-BinaryOperation']
copynode -7.007543325424194:  root modified ^ BasicType-BasicType name int_ter ^ ^ ^  name int_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-BasicType', 'BasicType -> name', 'name -> int_ter', 'root -> End']
copynode -3.3844080567359924:  root modified ^ MemberReference-MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^  qualifier par1 ^ ^ member loc3 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par1', 'member -> loc3']
copynode -4.168068636208773:  root add ^ IfStatement condition MemberReference qualifier ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference', 'MemberReference -> qualifier member']
copynode -5.287208378314972:  root modified ^ MemberReference-MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^  qualifier par1 ^ ^ member par4 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'copy-qualifier', 'copy-member']
copynode -7.108908839523792:  root modified ^ Literal-Literal value 0_ter ^ ^ ^  value 0_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-Literal', 'Literal -> value', 'value -> 0_ter', 'root -> End']
copynode -7.137874566018581:  root modified ^ MemberReference-MemberReference member loc6 ^ ^ ^  member loc7 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> loc7', 'root -> End']
copynode -6.771487891674042:  root modified ^ MemberReference-MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^  postfix_operators ++_ter ^ ^ member loc6 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> postfix_operators member', 'copy-postfix_operators', 'member -> loc6']
before@5 batch0 x: -7.184584398055449: root modified ^ operator-operator <_ter ^ ^  >>_ter ^ ^ ^  ; ['root -> modified', 'copy-operator', 'operator -> >>_ter', 'root -> End']
after@5 batch0 x: -7.184584398055449: root modified ^ operator-operator <_ter ^ ^  >>_ter ^ ^ ^  ; ['root -> modified', 'copy-operator', 'operator -> >>_ter', 'root -> End']
copynode -1.796177264302969:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter']
copynode -1.796177264302969:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter']
copynode -3.2922390401363373:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation ^ ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation']
copynode -3.2595812228973955:  root add ^ StatementExpression expression Assignment expressionl MemberReference ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference']
copynode -1.796177264302969:  root add ^ IfStatement condition BinaryOperation operator >_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >_ter']
copynode -4.029382228851318:  root modified ^ MemberReference-MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^  qualifier loc3 ^ ^ member unknown ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'qualifier -> loc3', 'start -> unknown', 'root -> End']
copynode -1.796177264302969:  root add ^ IfStatement condition BinaryOperation operator <_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter']
copynode -4.109649956226349:  root modified ^ MemberReference-MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^  qualifier par1 ^ ^ member unknown ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par1', 'start -> unknown', 'root -> End']
copynode -4.373210251331329:  root modified ^ MemberReference-MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^  qualifier loc3 ^ ^ member par4 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'qualifier -> loc3', 'copy-member', 'root -> End']
copynode -4.419451832771301:  root modified ^ MemberReference-MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^  qualifier loc2 ^ ^ member unknown ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'qualifier -> loc2', 'start -> unknown', 'root -> End']
copynode -4.528458654880524:  root modified ^ MemberReference-MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^  qualifier par1 ^ ^ member par4 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par1', 'copy-member', 'root -> End']
copynode -1.796177264302969:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter']
copynode -1.796177264302969:  root add ^ IfStatement condition BinaryOperation operator <=_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <=_ter']
copynode -1.796177264302969:  root add ^ IfStatement condition BinaryOperation operator >=_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >=_ter']
copynode -4.779084146022797:  root modified ^ MemberReference-MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^  qualifier loc2 ^ ^ member par4 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'qualifier -> loc2', 'copy-member', 'root -> End']
copynode -4.5428448505699635:  root add ^ IfStatement condition MemberReference member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference', 'MemberReference -> member', 'start -> unknown']
copynode -4.535636305809021:  root add ^ StatementExpression expression MethodInvocation arguments MemberReference ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference']
copynode -5.093331202864647:  root modified ^ control ForControl init VariableDeclaration type ^ declarators ^ ^ ^ condition ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'init -> VariableDeclaration', 'VariableDeclaration -> type declarators']
copynode -4.738202560693026:  root add ^ IfStatement condition MethodInvocation qualifier unknown ^ ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown']
copynode -1.796177264302969:  root add ^ IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter']
copynode -5.380686700344086:  root modified ^ MemberReference-MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^  qualifier Double_ter ^ ^ member unknown ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'copy-qualifier', 'start -> unknown', 'root -> End']
copynode -3.2922390401363373:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^ ^ ^ ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'copy-condition']
copynode -5.407611310482025:  root add ^ StatementExpression expression MethodInvocation member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown']
copynode -5.472280204296112:  root modified ^ MemberReference-MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^  qualifier par2 ^ ^ member unknown ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par2', 'start -> unknown', 'root -> End']
copynode -5.605251044034958:  root modified ^ MemberReference-MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^  qualifier par1 ^ ^ member unknown ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'copy-qualifier', 'start -> unknown', 'root -> End']
copynode -5.62939190864563:  root modified ^ MemberReference-MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^  qualifier par0 ^ ^ member unknown ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'start -> unknown', 'root -> End']
copynode -5.7038230784237385:  root add ^ IfStatement condition MemberReference prefix_operators !_ter ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference', 'MemberReference -> prefix_operators member', 'prefix_operators -> !_ter']
copynode -5.85024756193161:  root modified ^ MemberReference-MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^  qualifier par2 ^ ^ member par4 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par2', 'copy-member', 'root -> End']
copynode -5.860679138451815:  root add ^ IfStatement condition MethodInvocation member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown']
copynode -6.003817856311798:  root modified ^ MemberReference-MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^  qualifier par0 ^ ^ member par4 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'copy-member', 'root -> End']
copynode -6.01067191362381:  root modified ^ MemberReference-MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^  prefix_operators -_ter ^ ^ member loc6 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> prefix_operators member', 'prefix_operators -> -_ter', 'member -> loc6', 'root -> End']
copynode -6.073835670948029:  root modified ^ MemberReference-MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^  qualifier Double_ter ^ ^ member par4 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'copy-qualifier', 'copy-member', 'root -> End']
copynode -6.147521078586578:  root modified ^ MemberReference-MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^  qualifier loc1 ^ ^ member unknown ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'qualifier -> loc1', 'start -> unknown', 'root -> End']
copynode -5.967774856835604:  root add ^ IfStatement condition MethodInvocation arguments MemberReference ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference']
copynode -4.809747040271759:  root add ^ StatementExpression expression MethodInvocation qualifier unknown ^ ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown']
copynode -6.052265837788582:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition', 'copy-init', 'condition -> BinaryOperation']
copynode -3.2595812228973955:  root add ^ StatementExpression expression Assignment expressionl MemberReference member loc5 ^ ^ ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'copy-expressionl']
copynode -3.2595812228973955:  root add ^ StatementExpression expression Assignment expressionl MemberReference member loc1 ^ ^ ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'copy-expressionl']
copynode -6.394204169511795:  root modified ^ MemberReference-MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^  prefix_operators ~_ter ^ ^ member loc6 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> prefix_operators member', 'prefix_operators -> ~_ter', 'member -> loc6', 'root -> End']
copynode -3.2595812228973955:  root add ^ StatementExpression expression Assignment expressionl MemberReference member loc3 ^ ^ ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'copy-expressionl']
copynode -3.2922390401363373:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition MethodInvocation ^ ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> MethodInvocation']
copynode -5.096910107880831:  root add ^ IfStatement condition MethodInvocation qualifier loc6 ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> loc6']
copynode -6.480905044823885:  root add ^ IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> prefix_operators member', 'prefix_operators -> !_ter']
copynode -6.495752036571503:  root modified ^ MemberReference-MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^  qualifier loc1 ^ ^ member par4 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'qualifier -> loc1', 'copy-member', 'root -> End']
copynode -6.53297346830368:  root modified ^ MemberReference-MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^  qualifier unknown ^ ^ member par4 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'start -> unknown', 'copy-member', 'root -> End']
copynode -6.655936945229769:  root add ^ IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> prefix_operators qualifier arguments member', 'prefix_operators -> !_ter']
copynode -3.2595812228973955:  root add ^ StatementExpression expression Assignment expressionl MemberReference member loc2 ^ ^ ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'copy-expressionl']
copynode -6.456467259675264:  root add ^ IfStatement condition BinaryOperation operator -_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member loc3 ^ ^ ^ ^ operandr MemberReference member loc3 ^ ^ ^ ^ ^ ^ operandr MemberReference member loc5 ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'copy-BinaryOperation', 'root -> End']
copynode -5.096910107880831:  root add ^ IfStatement condition MethodInvocation qualifier unknown ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier member', 'start -> unknown']
copynode -6.5116716511547565:  root add ^ IfStatement condition BinaryOperation operator -_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member loc3 ^ ^ ^ ^ operandr MemberReference member loc3 ^ ^ ^ ^ ^ ^ operandr MemberReference member loc5 ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'copy-BinaryOperation', 'root -> End']
copynode -3.2595812228973955:  root add ^ StatementExpression expression Assignment expressionl MemberReference member loc0 ^ ^ ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'copy-expressionl']
copynode -6.7859814055264:  root add ^ IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> prefix_operators qualifier member', 'prefix_operators -> !_ter']
copynode -6.189586639404297:  root add ^ StatementExpression expression MemberReference postfix_operators ++_ter ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MemberReference', 'MemberReference -> postfix_operators member', 'copy-postfix_operators']
copynode -3.2595812228973955:  root add ^ StatementExpression expression Assignment expressionl MemberReference member loc0 ^ ^ ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'copy-expressionl']
copynode -6.558176625519991:  root add ^ IfStatement condition BinaryOperation operator -_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr Literal value 1.0_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'copy-BinaryOperation', 'root -> End']
copynode -4.809747040271759:  root add ^ StatementExpression expression MethodInvocation qualifier Double_ter ^ ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'copy-qualifier']
copynode -6.950428128242493:  root modified ^ MemberReference-MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^  qualifier loc0 ^ ^ member unknown ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'qualifier -> loc0', 'start -> unknown', 'root -> End']
copynode -6.765652287751436:  root add ^ IfStatement condition BinaryOperation operator +_ter ^ ^ operandl MemberReference member par3 ^ ^ ^ ^ operandr MemberReference member par4 ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'copy-BinaryOperation', 'root -> End']
copynode -6.729509938508272:  root add ^ IfStatement condition BinaryOperation operator *_ter ^ ^ operandl MemberReference member loc3 ^ ^ ^ ^ operandr MemberReference member loc3 ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'copy-BinaryOperation', 'root -> End']
before@6 batch0 x: -7.0076652839634335: root modified ^ BasicType-BasicType name int_ter ^ ^ ^  name int_ter ^ ^ ^ ^  ; ['root -> modified', 'copy-BasicType', 'BasicType -> name', 'name -> int_ter', 'root -> End']
after@6 batch0 x: -7.0076652839634335: root modified ^ BasicType-BasicType name int_ter ^ ^ ^  name int_ter ^ ^ ^ ^  ; ['root -> modified', 'copy-BasicType', 'BasicType -> name', 'name -> int_ter', 'root -> End']
copynode -3.03514289483428:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference']
copynode -3.232101436704397:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference']
copynode -3.5335175243671983:  root add ^ StatementExpression expression Assignment expressionl MemberReference member ^ ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member']
copynode -3.508176103234291:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
copynode -3.72914707288146:  root add ^ IfStatement condition BinaryOperation operator >_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >_ter', 'operandl -> MemberReference']
copynode -4.082412835210562:  root add ^ IfStatement condition BinaryOperation operator <_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference']
copynode -4.536178465932608:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation']
copynode -4.655029412358999:  root add ^ IfStatement condition BinaryOperation operator <=_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <=_ter', 'operandl -> MemberReference']
copynode -4.666229363530874:  root add ^ IfStatement condition BinaryOperation operator >=_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >=_ter', 'operandl -> MemberReference']
copynode -4.8684194684028625:  root add ^ StatementExpression expression MethodInvocation arguments MemberReference member ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> member']
copynode -5.247343420982361:  root modified ^ control ForControl init VariableDeclaration type BasicType ^ ^ declarators ^ ^ ^ condition ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'init -> VariableDeclaration', 'VariableDeclaration -> type declarators', 'type -> BasicType']
copynode -5.434521898627281:  root add ^ StatementExpression expression MethodInvocation member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown', 'root -> End']
copynode -4.858682293444872:  root add ^ IfStatement condition MemberReference member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'root -> End']
copynode -5.37224018201232:  root add ^ IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> BinaryOperation']
copynode -5.31064223125577:  root add ^ IfStatement condition MethodInvocation qualifier unknown ^ ^ arguments MemberReference ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown', 'arguments -> MemberReference']
copynode -4.858682293444872:  root add ^ IfStatement condition MemberReference member unknown ^ ^ ^ ^ ^ StatementExpression ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'root -> StatementExpression']
copynode -5.731738716363907:  root add ^ IfStatement condition MemberReference prefix_operators !_ter ^ ^ member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference', 'MemberReference -> prefix_operators member', 'prefix_operators -> !_ter', 'start -> unknown']
copynode -5.404835790395737:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^ ^ ^ ^ update MemberReference postfix_operators ++_ter ^ ^ member loc6 ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'copy-condition', 'copy-update']
copynode -6.167874861508608:  root add ^ IfStatement condition MethodInvocation arguments MemberReference member ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> member']
copynode -3.03514289483428:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MethodInvocation']
copynode -3.232101436704397:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MethodInvocation']
copynode -6.256457090377808:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
copynode -5.89548759162426:  root add ^ IfStatement condition MethodInvocation member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown', 'root -> End']
copynode -6.484377254964784:  root add ^ IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> prefix_operators member', 'prefix_operators -> !_ter', 'start -> unknown']
copynode -6.482575166970491:  root add ^ IfStatement condition MethodInvocation qualifier loc6 ^ ^ member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> loc6', 'start -> unknown']
copynode -5.404835790395737:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^ ^ ^ ^ update MemberReference ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'copy-condition', 'update -> MemberReference']
copynode -6.25273460149765:  root add ^ StatementExpression expression MethodInvocation qualifier unknown ^ ^ arguments MemberReference ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown', 'arguments -> MemberReference']
copynode -3.72914707288146:  root add ^ IfStatement condition BinaryOperation operator >_ter ^ ^ operandl MethodInvocation ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >_ter', 'operandl -> MethodInvocation']
copynode -6.476949065923691:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition MethodInvocation qualifier ^ arguments ^ member ^ ^ ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier arguments member']
copynode -4.536178465932608:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> MemberReference']
copynode -3.232101436704397:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl BinaryOperation ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> BinaryOperation']
copynode -4.082412835210562:  root add ^ IfStatement condition BinaryOperation operator <_ter ^ ^ operandl MethodInvocation ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MethodInvocation']
copynode -5.89548759162426:  root add ^ IfStatement condition MethodInvocation member unknown ^ ^ ^ ^ ^ StatementExpression ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown', 'root -> StatementExpression']
copynode -6.660311586223543:  root add ^ IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier unknown ^ ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> prefix_operators qualifier arguments member', 'prefix_operators -> !_ter', 'start -> unknown']
copynode -3.5335175243671983:  root add ^ StatementExpression expression Assignment expressionl MemberReference qualifier ^ member ^ ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> qualifier member']
before@7 batch0 x: -7.242473527556285: root add ^ StatementExpression expression Assignment expressionl MemberReference qualifier ^ member ^ ^ ^ value ^ type ^ ^ ^ ^ ^  ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> qualifier member']
after@7 batch0 x: -7.242473527556285: root add ^ StatementExpression expression Assignment expressionl MemberReference qualifier ^ member ^ ^ ^ value ^ type ^ ^ ^ ^ ^  ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> qualifier member']
copynode -3.1364550180733204:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -3.392848577350378:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -3.9125656597316265:  root add ^ IfStatement condition BinaryOperation operator >_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -3.5796345323324203:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl ^ operandr ^ ^ ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter']
copynode -4.272507559508085:  root add ^ IfStatement condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -4.8425786308944225:  root add ^ IfStatement condition BinaryOperation operator <=_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <=_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -4.847554799169302:  root add ^ IfStatement condition BinaryOperation operator >=_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >=_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -4.713959988206625:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
copynode -3.570114064728841:  root add ^ StatementExpression expression Assignment expressionl MemberReference member loc6 ^ ^ ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> loc6']
copynode -3.570114064728841:  root add ^ StatementExpression expression Assignment expressionl MemberReference member unknown ^ ^ ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'start -> unknown']
copynode -5.2581060053780675:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators ^ ^ ^ condition ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'init -> VariableDeclaration', 'VariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType']
copynode -3.570114064728841:  root add ^ StatementExpression expression Assignment expressionl MemberReference member loc5 ^ ^ ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> loc5']
copynode -5.618726778775454:  root add ^ IfStatement condition MethodInvocation qualifier unknown ^ ^ arguments MemberReference member ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown', 'arguments -> MemberReference', 'MemberReference -> member']
copynode -3.5796345323324203:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator ||_ter ^ ^ operandl ^ operandr ^ ^ ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter']
copynode -3.570114064728841:  root add ^ StatementExpression expression Assignment expressionl MemberReference member loc7 ^ ^ ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> loc7']
copynode -3.570114064728841:  root add ^ StatementExpression expression Assignment expressionl MemberReference member loc4 ^ ^ ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> loc4']
copynode -5.562907483428717:  root add ^ IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
copynode -3.5796345323324203:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <=_ter ^ ^ operandl ^ operandr ^ ^ ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <=_ter']
copynode -6.140243023633957:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^ ^ ^ ^ update MemberReference postfix_operators ++_ter ^ ^ member loc6 ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'copy-condition', 'copy-update', 'root -> End']
copynode -3.570114064728841:  root add ^ StatementExpression expression Assignment expressionl MemberReference member loc3 ^ ^ ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> loc3']
copynode -5.914825815707445:  root add ^ IfStatement condition MemberReference member unknown ^ ^ ^ ^ ^ StatementExpression expression ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'root -> StatementExpression', 'StatementExpression -> expression']
copynode -3.5796345323324203:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator &&_ter ^ ^ operandl ^ operandr ^ ^ ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter']
copynode -3.5796345323324203:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator >_ter ^ ^ operandl ^ operandr ^ ^ ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >_ter']
copynode -4.905150309205055:  root add ^ StatementExpression expression MethodInvocation arguments MemberReference member loc5 ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> loc5']
copynode -6.1022831201553345:  root add ^ IfStatement condition MemberReference prefix_operators !_ter ^ ^ member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference', 'MemberReference -> prefix_operators member', 'prefix_operators -> !_ter', 'start -> unknown', 'root -> End']
copynode -4.905150309205055:  root add ^ StatementExpression expression MethodInvocation arguments MemberReference member loc6 ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> loc6']
copynode -6.32138990983367:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier ^ member ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MethodInvocation', 'MethodInvocation -> qualifier member']
copynode -6.318248268216848:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier ^ member ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MethodInvocation', 'MethodInvocation -> qualifier member']
copynode -6.79487156867981:  root add ^ StatementExpression expression MethodInvocation qualifier unknown ^ ^ arguments MemberReference member ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown', 'arguments -> MemberReference', 'MemberReference -> member']
copynode -6.326118625700474:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter']
copynode -6.532333881827071:  root add ^ IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> prefix_operators member', 'prefix_operators -> !_ter', 'start -> unknown', 'root -> End']
copynode -4.713959988206625:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'copy-BinaryOperation']
before@8 batch0 x: -7.140781458467245: root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^ ^ ^ ^ operandr ^ ^ ^ ^ ^  ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'copy-BinaryOperation']
after@8 batch0 x: -7.140781458467245: root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^ ^ ^ ^ operandr ^ ^ ^ ^ ^  ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'copy-BinaryOperation']
copynode -3.1540207620710135:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6']
copynode -3.419136829674244:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6']
copynode -4.078965917229652:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference']
copynode -3.934993466362357:  root add ^ IfStatement condition BinaryOperation operator >_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6']
copynode -3.1540207620710135:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc5']
copynode -3.419136829674244:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc5']
copynode -4.296154020354152:  root add ^ IfStatement condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6']
copynode -4.865262916311622:  root add ^ IfStatement condition BinaryOperation operator <=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6']
copynode -5.401868817396462:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator ^ ^ ^ ^ condition ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'init -> VariableDeclaration', 'VariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator']
copynode -4.871218837797642:  root add ^ IfStatement condition BinaryOperation operator >=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6']
copynode -3.1540207620710135:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc3 ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc3']
copynode -5.672357186675072:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation ^ ^ operandr ^ ^ ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> BinaryOperation']
copynode -3.1540207620710135:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc4 ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc4']
copynode -3.419136829674244:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc3 ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc3']
copynode -3.934993466362357:  root add ^ IfStatement condition BinaryOperation operator >_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc5']
copynode -5.167535472428426:  root add ^ StatementExpression expression Assignment expressionl MemberReference member unknown ^ ^ ^ ^ value Literal ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'value -> Literal']
copynode -5.088435698067769:  root add ^ StatementExpression expression Assignment expressionl MemberReference member loc6 ^ ^ ^ ^ value MemberReference ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'value -> MemberReference']
copynode -5.0340136252343655:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter']
copynode -3.934993466362357:  root add ^ IfStatement condition BinaryOperation operator >_ter ^ ^ operandl MemberReference member loc3 ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc3']
copynode -3.419136829674244:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc4 ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc4']
copynode -4.296154020354152:  root add ^ IfStatement condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc5']
copynode -6.084544762969017:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <=_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <=_ter', 'operandl -> MemberReference']
copynode -5.167535472428426:  root add ^ StatementExpression expression Assignment expressionl MemberReference member unknown ^ ^ ^ ^ value MemberReference ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'value -> MemberReference']
copynode -4.296154020354152:  root add ^ IfStatement condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc3 ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc3']
copynode -6.35196290910244:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation ^ ^ operandr ^ ^ ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation']
copynode -5.523585844552144:  root add ^ StatementExpression expression Assignment expressionl MemberReference member loc5 ^ ^ ^ ^ value MemberReference ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'value -> MemberReference']
copynode -5.0340136252343655:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter']
copynode -6.368545159697533:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator >_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >_ter', 'operandl -> MemberReference']
copynode -4.871218837797642:  root add ^ IfStatement condition BinaryOperation operator >=_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc5']
copynode -5.746631312882528:  root add ^ StatementExpression expression Assignment expressionl MemberReference member loc7 ^ ^ ^ ^ value MemberReference ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> loc7', 'value -> MemberReference']
copynode -3.1540207620710135:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc7 ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc7']
copynode -5.088435698067769:  root add ^ StatementExpression expression Assignment expressionl MemberReference member loc6 ^ ^ ^ ^ value Literal ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'value -> Literal']
copynode -4.865262916311622:  root add ^ IfStatement condition BinaryOperation operator <=_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc5']
copynode -3.419136829674244:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc7 ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc7']
copynode -6.209432203322649:  root add ^ IfStatement condition MemberReference member unknown ^ ^ ^ ^ ^ StatementExpression expression Assignment ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment']
copynode -3.1540207620710135:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member unknown ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'start -> unknown']
copynode -5.088435698067769:  root add ^ StatementExpression expression Assignment expressionl MemberReference member loc6 ^ ^ ^ ^ value BinaryOperation ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'value -> BinaryOperation']
before@9 batch0 x: -6.847217965638265: root add ^ StatementExpression expression Assignment expressionl MemberReference member loc6 ^ ^ ^ ^ value BinaryOperation ^ ^ type ^ ^ ^ ^ ^  ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'value -> BinaryOperation']
after@9 batch0 x: -6.847217965638265: root add ^ StatementExpression expression Assignment expressionl MemberReference member loc6 ^ ^ ^ ^ value BinaryOperation ^ ^ type ^ ^ ^ ^ ^  ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'value -> BinaryOperation']
copynode -4.305463075637817:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -3.9360859747976065:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal']
copynode -4.225823827087879:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> MemberReference']
copynode -4.637406682595611:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr Literal ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'operandr -> Literal']
copynode -4.484106263145804:  root add ^ IfStatement condition BinaryOperation operator >_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> MemberReference']
copynode -4.225823827087879:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal']
copynode -3.9360859747976065:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> MemberReference']
copynode -5.467507471330464:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name ^ initializer ^ ^ ^ ^ ^ condition ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'init -> VariableDeclaration', 'VariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer']
copynode -4.888208447024226:  root add ^ IfStatement condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> MemberReference']
copynode -4.851201482117176:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'operandr -> MemberReference']
copynode -4.851201482117176:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr Literal ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'operandr -> Literal']
copynode -5.744873717427254:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^ ^ ^ ^ operandr ^ ^ ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> BinaryOperation', 'copy-BinaryOperation']
copynode -5.903569150483236:  root add ^ StatementExpression expression Assignment expressionl MemberReference member unknown ^ ^ ^ ^ value Literal value ^ ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'value -> Literal', 'Literal -> value']
copynode -5.9585385208483785:  root add ^ StatementExpression expression Assignment expressionl MemberReference member loc6 ^ ^ ^ ^ value MemberReference member ^ ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'value -> MemberReference', 'MemberReference -> member']
copynode -5.605611061677337:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc3 ^ ^ ^ ^ operandr Literal ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc3', 'operandr -> Literal']
copynode -6.023426529020071:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference']
copynode -5.451571514829993:  root add ^ IfStatement condition BinaryOperation operator <=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> MemberReference']
copynode -5.491463102400303:  root add ^ IfStatement condition BinaryOperation operator >=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> MemberReference']
copynode -5.75314280949533:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc4 ^ ^ ^ ^ operandr Literal ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc4', 'operandr -> Literal']
copynode -4.484106263145804:  root add ^ IfStatement condition BinaryOperation operator >_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal']
copynode -4.637406682595611:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'operandr -> MemberReference']
copynode -6.295632377266884:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <=_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <=_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -6.299143600976095:  root add ^ StatementExpression expression Assignment expressionl MemberReference member unknown ^ ^ ^ ^ value MemberReference member ^ ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'value -> MemberReference', 'MemberReference -> member']
copynode -3.9360859747976065:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'copy-operandr']
copynode -6.479468870675191:  root add ^ StatementExpression expression Assignment expressionl MemberReference member loc5 ^ ^ ^ ^ value MemberReference member ^ ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'value -> MemberReference', 'MemberReference -> member']
copynode -5.873497327789664:  root add ^ IfStatement condition BinaryOperation operator >_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'operandr -> MemberReference']
copynode -6.5799169689416885:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator >_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -4.888208447024226:  root add ^ IfStatement condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal']
copynode -6.419262506067753:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^ ^ ^ ^ operandr ^ ^ ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'copy-BinaryOperation']
copynode -6.60996114066802:  root add ^ StatementExpression expression Assignment expressionl MemberReference member loc7 ^ ^ ^ ^ value MemberReference member ^ ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> loc7', 'value -> MemberReference', 'MemberReference -> member']
copynode -5.824735231697559:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc3 ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc3', 'operandr -> MemberReference']
copynode -6.5410562716424465:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference']
copynode -4.225823827087879:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'copy-operandr']
copynode -6.7371274419128895:  root add ^ IfStatement condition MemberReference member unknown ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type']
copynode -6.051429947838187:  root add ^ IfStatement condition BinaryOperation operator >_ter ^ ^ operandl MemberReference member loc3 ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc3', 'operandr -> MemberReference']
copynode -6.660822439705953:  root add ^ StatementExpression expression Assignment expressionl MemberReference member loc6 ^ ^ ^ ^ value Literal value ^ ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'value -> Literal', 'Literal -> value']
copynode -6.153371809050441:  root add ^ IfStatement condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'operandr -> MemberReference']
before@10 batch0 x: -6.855237064883113: root add ^ IfStatement condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ ^ ^  ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'operandr -> MemberReference']
after@10 batch0 x: -6.855237064883113: root add ^ IfStatement condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ ^ ^  ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'operandr -> MemberReference']
copynode -4.420695638284087:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value']
copynode -4.330609455704689:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr ^ ^ ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6']
copynode -5.083386396989226:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr Literal value ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'operandr -> Literal', 'Literal -> value']
copynode -5.069277234375477:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr MemberReference member ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> MemberReference', 'MemberReference -> member']
copynode -5.39566845446825:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value']
copynode -5.174447378143668:  root add ^ IfStatement condition BinaryOperation operator >_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr MemberReference member ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> MemberReference', 'MemberReference -> member']
copynode -5.548318420536816:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer ^ ^ ^ ^ ^ condition ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'init -> VariableDeclaration', 'VariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc6']
copynode -5.527472769841552:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr MemberReference member ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> MemberReference', 'MemberReference -> member']
copynode -5.581740079447627:  root add ^ IfStatement condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr MemberReference member ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> MemberReference', 'MemberReference -> member']
copynode -5.96168727427721:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr Literal value ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'operandr -> Literal', 'Literal -> value']
copynode -5.7296620681881905:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr MemberReference member ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'operandr -> MemberReference', 'MemberReference -> member']
copynode -5.967760354280472:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^ ^ ^ ^ operandr BinaryOperation ^ ^ ^ ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> BinaryOperation', 'copy-BinaryOperation', 'operandr -> BinaryOperation']
copynode -6.073932116851211:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc3 ^ ^ ^ ^ operandr Literal value ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc3', 'operandr -> Literal', 'Literal -> value']
copynode -6.146350394934416:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -6.20486787520349:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc4 ^ ^ ^ ^ operandr Literal value ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc4', 'operandr -> Literal', 'Literal -> value']
copynode -6.232739767059684:  root add ^ IfStatement condition BinaryOperation operator >_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value']
copynode -4.330609455704689:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc3 ^ ^ ^ ^ operandr ^ ^ ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc3']
copynode -5.069277234375477:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr MemberReference qualifier ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> MemberReference', 'MemberReference -> qualifier member']
copynode -5.174447378143668:  root add ^ IfStatement condition BinaryOperation operator >_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr MemberReference qualifier ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> MemberReference', 'MemberReference -> qualifier member']
copynode -6.311425304040313:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr MemberReference member ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'operandr -> MemberReference', 'MemberReference -> member']
copynode -6.1506094839423895:  root add ^ IfStatement condition BinaryOperation operator <=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr MemberReference member ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> MemberReference', 'MemberReference -> member']
copynode -6.1997424736619:  root add ^ IfStatement condition BinaryOperation operator >=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr MemberReference member ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> MemberReference', 'MemberReference -> member']
copynode -6.319683738052845:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr ^ ^ ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6']
copynode -6.626206217333674:  root add ^ IfStatement condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value']
copynode -6.718391325324774:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -6.537790095433593:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'copy-operandr', 'root -> End']
copynode -6.649089805781841:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^ ^ ^ ^ operandr BinaryOperation ^ ^ ^ ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'copy-BinaryOperation', 'operandr -> BinaryOperation']
copynode -6.5724068488925695:  root add ^ IfStatement condition BinaryOperation operator >_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr MemberReference member ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'operandr -> MemberReference', 'MemberReference -> member']
copynode -6.687956221401691:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc3 ^ ^ ^ ^ operandr MemberReference member ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc3', 'operandr -> MemberReference', 'MemberReference -> member']
copynode -5.581740079447627:  root add ^ IfStatement condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr MemberReference qualifier ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> MemberReference', 'MemberReference -> qualifier member']
copynode -6.602640276774764:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator >_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr ^ ^ ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6']
copynode -6.745851239189506:  root add ^ IfStatement condition BinaryOperation operator >_ter ^ ^ operandl MemberReference member loc3 ^ ^ ^ ^ operandr MemberReference member ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc3', 'operandr -> MemberReference', 'MemberReference -> member']
copynode -6.855237064883113:  root add ^ IfStatement condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr MemberReference member ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'operandr -> MemberReference', 'MemberReference -> member']
copynode -5.7296620681881905:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr MemberReference qualifier ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'operandr -> MemberReference', 'MemberReference -> qualifier member']
copynode -6.739740762161091:  root add ^ IfStatement condition MemberReference member unknown ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference']
copynode -6.012890431797132:  root add ^ StatementExpression expression Assignment expressionl MemberReference member unknown ^ ^ ^ ^ value Literal value false_ter ^ ^ ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'value -> Literal', 'Literal -> value', 'value -> false_ter']
copynode -5.527472769841552:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr MemberReference qualifier ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> MemberReference', 'MemberReference -> qualifier member']
before@11 batch0 x: -7.190517699345946: root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr MemberReference qualifier ^ member ^ ^ ^ ^ ^ ^ ^  ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> MemberReference', 'MemberReference -> qualifier member']
after@11 batch0 x: -7.190517699345946: root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr MemberReference qualifier ^ member ^ ^ ^ ^ ^ ^ ^  ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> MemberReference', 'MemberReference -> qualifier member']
copynode -4.45274574123323:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter']
copynode -4.680482968688011:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr BinaryOperation ^ ^ ^ ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> BinaryOperation']
copynode -5.114141061902046:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter']
copynode -5.441316910088062:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter']
copynode -6.1047234777361155:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc3 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc3', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter']
copynode -6.005990855395794:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter']
copynode -5.575072391889989:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer BinaryOperation ^ ^ ^ ^ ^ ^ condition ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'init -> VariableDeclaration', 'VariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc6', 'initializer -> BinaryOperation']
copynode -6.234159113839269:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc4 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc4', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter']
copynode -6.072517089545727:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ ^ ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> BinaryOperation', 'copy-BinaryOperation', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
copynode -4.680482968688011:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> MemberReference']
copynode -6.295349849388003:  root add ^ IfStatement condition BinaryOperation operator >_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> 0_ter']
copynode -6.6997171100229025:  root add ^ IfStatement condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> 0_ter']
copynode -6.394809618592262:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc3 ^ ^ ^ ^ operandr BinaryOperation ^ ^ ^ ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc3', 'operandr -> BinaryOperation']
copynode -4.45274574123323:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> 0_ter']
copynode -6.756976343691349:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ ^ ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'copy-BinaryOperation', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
copynode -6.171441156417131:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6']
copynode -5.441316910088062:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> 0_ter']
copynode -5.575072391889989:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer MemberReference ^ ^ ^ ^ ^ ^ condition ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'init -> VariableDeclaration', 'VariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc6', 'initializer -> MemberReference']
copynode -7.170454415725544:  root add ^ IfStatement condition MemberReference member unknown ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member ^ ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member']
copynode -4.680482968688011:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr MethodInvocation ^ ^ ^ ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> MethodInvocation']
copynode -6.673915304243565:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr BinaryOperation ^ ^ ^ ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> BinaryOperation']
copynode -5.394330628216267:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr MemberReference member unknown ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> MemberReference', 'MemberReference -> member', 'start -> unknown']
copynode -5.525056501850486:  root add ^ IfStatement condition BinaryOperation operator >_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr MemberReference member loc6 ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> MemberReference', 'MemberReference -> member', 'member -> loc6']
copynode -5.394330628216267:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr MemberReference member loc6 ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> MemberReference', 'MemberReference -> member', 'member -> loc6']
copynode -7.177757952129468:  root add ^ StatementExpression expression Assignment expressionl MemberReference member unknown ^ ^ ^ ^ value Literal value false_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'value -> Literal', 'Literal -> value', 'value -> false_ter', 'type -> =_ter']
copynode -6.940168743953109:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator >_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr BinaryOperation ^ ^ ^ ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> BinaryOperation']
copynode -6.754431895911694:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6']
copynode -6.171441156417131:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc5']
copynode -5.525056501850486:  root add ^ IfStatement condition BinaryOperation operator >_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr MemberReference member unknown ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> MemberReference', 'MemberReference -> member', 'start -> unknown']
copynode -5.746849482879043:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr MemberReference member unknown ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> MemberReference', 'MemberReference -> member', 'start -> unknown']
copynode -5.394330628216267:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr MemberReference member loc3 ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> MemberReference', 'MemberReference -> member', 'member -> loc3']
copynode -5.575072391889989:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer MethodInvocation ^ ^ ^ ^ ^ ^ condition ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'init -> VariableDeclaration', 'VariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc6', 'initializer -> MethodInvocation']
copynode -5.90221425704658:  root add ^ IfStatement condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr MemberReference member loc6 ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> MemberReference', 'MemberReference -> member', 'member -> loc6']
copynode -5.114141061902046:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'operandr -> Literal', 'Literal -> value', 'value -> 0_ter']
copynode -5.525056501850486:  root add ^ IfStatement condition BinaryOperation operator >_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr MemberReference member loc3 ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> MemberReference', 'MemberReference -> member', 'member -> loc3']
copynode -6.005990855395794:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'operandr -> Literal', 'Literal -> value', 'value -> 0_ter']
before@12 batch0 x: -7.839982144534588: root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^  ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'operandr -> Literal', 'Literal -> value', 'value -> 0_ter']
after@12 batch0 x: -7.839982144534588: root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^  ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'operandr -> Literal', 'Literal -> value', 'value -> 0_ter']
copynode -4.566826803609729:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> End']
copynode -5.209797911345959:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> End']
copynode -5.139494255185127:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ ^ ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
copynode -6.181268515065312:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc3 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc3', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> End']
copynode -5.7281263545155525:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> End']
copynode -6.307617599144578:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc4 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc4', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> End']
copynode -6.269942685030401:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ ^ ^ ^ ^ condition ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'init -> VariableDeclaration', 'VariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc6', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
copynode -5.139494255185127:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^ ^ ^ ^ ^ ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> BinaryOperation', 'copy-BinaryOperation']
copynode -6.332416757941246:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr MemberReference member ^ ^ ^ ^ ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> MemberReference', 'MemberReference -> member']
copynode -4.566826803609729:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression']
copynode -6.859324520453811:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> 0_ter', 'root -> End']
copynode -6.387194795534015:  root add ^ IfStatement condition BinaryOperation operator >_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> 0_ter', 'root -> End']
copynode -6.247468091547489:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> End']
copynode -6.836083337664604:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc3 ^ ^ ^ ^ operandr BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ ^ ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc3', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
copynode -5.7281263545155525:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression']
copynode -5.209797911345959:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression']
copynode -6.3244927152991295:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> BinaryOperation', 'copy-BinaryOperation', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter']
copynode -6.834874203428626:  root add ^ IfStatement condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> 0_ter', 'root -> End']
copynode -7.536739352857694:  root add ^ StatementExpression expression Assignment expressionl MemberReference member unknown ^ ^ ^ ^ value Literal value false_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'value -> Literal', 'Literal -> value', 'value -> false_ter', 'type -> =_ter', 'root -> End']
copynode -6.332416757941246:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr MemberReference qualifier ^ member ^ ^ ^ ^ ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> MemberReference', 'MemberReference -> qualifier member']
copynode -7.109481199644506:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer MemberReference member ^ ^ ^ ^ ^ ^ ^ condition ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'init -> VariableDeclaration', 'VariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc6', 'initializer -> MemberReference', 'MemberReference -> member']
copynode -7.055602271109819:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal']
copynode -7.335904814302921:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ ^ ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
copynode -5.7281263545155525:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ContinueStatement_ter ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> ContinueStatement_ter']
copynode -6.247468091547489:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression']
copynode -6.3244927152991295:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> BinaryOperation', 'copy-BinaryOperation', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter']
copynode -7.089368648827076:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> 0_ter', 'root -> End']
copynode -7.721175268292427:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'operandr -> Literal', 'Literal -> value', 'value -> 0_ter', 'root -> End']
copynode -7.599108165130019:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator >_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ ^ ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
copynode -7.2674850076437:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr MethodInvocation qualifier ^ member ^ ^ ^ ^ ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> MethodInvocation', 'MethodInvocation -> qualifier member']
copynode -6.247468091547489:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ContinueStatement_ter ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> ContinueStatement_ter']
copynode -6.3244927152991295:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator >_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> BinaryOperation', 'copy-BinaryOperation', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >_ter']
copynode -6.181268515065312:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc3 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc3', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression']
copynode -7.458040734753013:  root add ^ IfStatement condition BinaryOperation operator >_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr MemberReference member loc6 ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'root -> End']
copynode -7.637969214469194:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr Literal ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'operandr -> Literal']
copynode -6.989987425506115:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'copy-BinaryOperation', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter']
before@13 batch0 x: -8.240855388343334: root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ update ^ ^ ^ ^  ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'copy-BinaryOperation', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter']
after@13 batch0 x: -8.240855388343334: root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ update ^ ^ ^ ^  ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'copy-BinaryOperation', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter']
copynode -5.526396825909615:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter']
copynode -6.627530172467232:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^ ^ ^ ^ ^ ^ update MemberReference postfix_operators ++_ter ^ ^ member loc6 ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> BinaryOperation', 'copy-BinaryOperation', 'copy-update']
copynode -6.7096938919276:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression', 'StatementExpression -> expression']
copynode -6.606758340261877:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ^ ^ condition ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'init -> VariableDeclaration', 'VariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc6', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter']
copynode -5.526396825909615:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr BinaryOperation operator +_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter']
copynode -7.272829823195934:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression', 'StatementExpression -> expression']
copynode -7.247587509453297:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression', 'StatementExpression -> expression']
copynode -7.352511905133724:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ ^ ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> BinaryOperation', 'copy-BinaryOperation', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference']
copynode -7.680570788681507:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ContinueStatement_ter ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> ContinueStatement_ter', 'root -> End']
copynode -7.666743654757738:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value ^ ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value']
copynode -7.232274189591408:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc3 ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc3', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter']
copynode -5.526396825909615:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr BinaryOperation operator /_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter']
copynode -7.817208789288998:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ ^ ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> BinaryOperation', 'copy-BinaryOperation', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference']
copynode -5.526396825909615:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter']
copynode -7.734733916819096:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression', 'StatementExpression -> expression']
copynode -8.123283840715885:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ContinueStatement_ter ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> ContinueStatement_ter', 'root -> End']
copynode -6.673616871237755:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr MemberReference member loc6 ^ ^ ^ ^ ^ ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> MemberReference', 'MemberReference -> member', 'member -> loc6']
copynode -7.674239970743656:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter']
copynode -8.237981099635363:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr Literal value ^ ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'operandr -> Literal', 'Literal -> value']
copynode -8.140609286725521:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator >_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ ^ ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> BinaryOperation', 'copy-BinaryOperation', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >_ter', 'operandl -> MemberReference']
copynode -6.673616871237755:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr MemberReference member unknown ^ ^ ^ ^ ^ ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> MemberReference', 'MemberReference -> member', 'start -> unknown']
copynode -8.15767795033753:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc3 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc3', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression', 'StatementExpression -> expression']
copynode -6.606758340261877:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer BinaryOperation operator +_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ^ ^ condition ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'init -> VariableDeclaration', 'VariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc6', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter']
before@14 batch0 x: -8.431258662603796: root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer BinaryOperation operator +_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ^ ^ condition ^ update ^ ^ ^ ^  ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'init -> VariableDeclaration', 'VariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc6', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter']
after@14 batch0 x: -8.431258662603796: root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer BinaryOperation operator +_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ^ ^ condition ^ update ^ ^ ^ ^  ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'init -> VariableDeclaration', 'VariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc6', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter']
copynode -6.068859770894051:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ ^ ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference']
copynode -6.672181412577629:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^ ^ ^ ^ ^ ^ update MemberReference postfix_operators ++_ter ^ ^ member loc6 ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> BinaryOperation', 'copy-BinaryOperation', 'copy-update', 'root -> End']
copynode -7.012813491746783:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment']
copynode -7.254731579683721:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ condition ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'init -> VariableDeclaration', 'VariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc6', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference']
copynode -7.611233614385128:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ ^ ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> BinaryOperation', 'copy-BinaryOperation', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -7.536150768399239:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr BinaryOperation operator +_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ ^ ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> MemberReference']
copynode -7.7009838074445724:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter']
copynode -7.573965482413769:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment']
copynode -7.608877815306187:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment']
copynode -7.753167167305946:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc3 ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ ^ ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc3', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference']
copynode -7.8088463097810745:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr BinaryOperation operator /_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ ^ ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> MemberReference']
copynode -8.012615673244:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ ^ ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> BinaryOperation', 'copy-BinaryOperation', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -8.147752985358238:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr MemberReference member loc6 ^ ^ ^ ^ ^ ^ update MemberReference postfix_operators ++_ter ^ ^ member loc6 ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'copy-update']
copynode -8.021094158291817:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ ^ ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> MemberReference']
copynode -7.012813491746783:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression MethodInvocation ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation']
copynode -8.270935535430908:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter']
copynode -8.094474770128727:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment']
copynode -8.17165444046259:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ ^ ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference']
copynode -8.41248343884945:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr MemberReference member unknown ^ ^ ^ ^ ^ ^ update MemberReference postfix_operators ++_ter ^ ^ member loc6 ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'copy-update']
copynode -8.390483312308788:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator >_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ ^ ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> BinaryOperation', 'copy-BinaryOperation', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -6.068859770894051:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MethodInvocation ^ ^ operandr ^ ^ ^ ^ ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MethodInvocation']
before@15 batch0 x: -8.782790377736092: root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MethodInvocation ^ ^ operandr ^ ^ ^ ^ ^ update ^ ^ ^ ^  ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MethodInvocation']
after@15 batch0 x: -8.782790377736092: root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MethodInvocation ^ ^ operandr ^ ^ ^ ^ ^ update ^ ^ ^ ^  ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MethodInvocation']
copynode -6.321690693497658:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ ^ ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -7.394704146310687:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type']
copynode -6.321690693497658:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference qualifier ^ member ^ ^ ^ operandr ^ ^ ^ ^ ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference', 'MemberReference -> qualifier member']
copynode -7.94999086111784:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type']
copynode -7.9528908506035805:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type']
copynode -7.855009317398071:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'operandr -> BinaryOperation']
copynode -7.694240554235876:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ condition ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'init -> VariableDeclaration', 'VariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc6', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -8.193176813423634:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr MemberReference member loc6 ^ ^ ^ ^ ^ ^ update MemberReference postfix_operators ++_ter ^ ^ member loc6 ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'copy-update', 'root -> End']
copynode -7.80779866874218:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr BinaryOperation operator +_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ ^ ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -7.997983887791634:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc3 ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ ^ ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc3', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -8.432796575129032:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type']
copynode -8.452105764299631:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr MemberReference member unknown ^ ^ ^ ^ ^ ^ update MemberReference postfix_operators ++_ter ^ ^ member loc6 ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'copy-update', 'root -> End']
copynode -8.105807140469551:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr BinaryOperation operator /_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ ^ ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -8.384663715958595:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'operandr -> BinaryOperation']
copynode -7.730715520679951:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> BinaryOperation', 'copy-BinaryOperation', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6']
copynode -8.318187072873116:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ ^ ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> *_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -8.43504635244608:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ ^ ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -7.80779866874218:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr BinaryOperation operator +_ter ^ ^ operandl MemberReference qualifier ^ member ^ ^ ^ operandr ^ ^ ^ ^ ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> MemberReference', 'MemberReference -> qualifier member']
copynode -7.694240554235876:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl MemberReference qualifier ^ member ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ condition ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'init -> VariableDeclaration', 'VariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc6', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference', 'MemberReference -> qualifier member']
copynode -8.105807140469551:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr BinaryOperation operator /_ter ^ ^ operandl MemberReference qualifier ^ member ^ ^ ^ operandr ^ ^ ^ ^ ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> MemberReference', 'MemberReference -> qualifier member']
before@16 batch0 x: -9.213868096470833: root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr BinaryOperation operator /_ter ^ ^ operandl MemberReference qualifier ^ member ^ ^ ^ operandr ^ ^ ^ ^ ^ update ^ ^ ^ ^  ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> MemberReference', 'MemberReference -> qualifier member']
after@16 batch0 x: -9.213868096470833: root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr BinaryOperation operator /_ter ^ ^ operandl MemberReference qualifier ^ member ^ ^ ^ operandr ^ ^ ^ ^ ^ update ^ ^ ^ ^  ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> /_ter', 'operandl -> MemberReference', 'MemberReference -> qualifier member']
copynode -7.396385336876847:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference']
copynode -8.010480493307114:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
copynode -7.473928228020668:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference qualifier par1 ^ ^ member ^ ^ ^ operandr ^ ^ ^ ^ ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par1']
copynode -6.714853003621101:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6']
copynode -8.02030913438648:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ condition ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'init -> VariableDeclaration', 'VariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc6', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6']
copynode -7.951640706975013:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference']
copynode -8.542289346456528:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
copynode -6.714853003621101:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member par3 ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par3']
copynode -7.95476000988856:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference']
copynode -6.714853003621101:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member par4 ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par4']
copynode -6.714853003621101:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member loc3 ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc3']
copynode -6.714853003621101:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member par5 ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par5']
copynode -7.396385336876847:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member loc5 ^ ^ ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'copy-expressionl']
copynode -8.680166251957417:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ ^ ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> BinaryOperation', 'copy-BinaryOperation', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> MemberReference']
copynode -8.434593898477033:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference']
copynode -8.994912727735937:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl MemberReference qualifier par1 ^ ^ member ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ condition ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'init -> VariableDeclaration', 'VariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc6', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par1']
copynode -7.473928228020668:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference qualifier Double_ter ^ ^ member ^ ^ ^ operandr ^ ^ ^ ^ ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference', 'MemberReference -> qualifier member', 'copy-qualifier']
copynode -8.987899824976921:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr BinaryOperation operator +_ter ^ ^ operandl MemberReference qualifier par1 ^ ^ member ^ ^ ^ operandr ^ ^ ^ ^ ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par1']
before@17 batch0 x: -9.658762201666832: root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr BinaryOperation operator +_ter ^ ^ operandl MemberReference qualifier par1 ^ ^ member ^ ^ ^ operandr ^ ^ ^ ^ ^ update ^ ^ ^ ^  ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par1']
after@17 batch0 x: -9.658762201666832: root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr BinaryOperation operator +_ter ^ ^ operandl MemberReference qualifier par1 ^ ^ member ^ ^ ^ operandr ^ ^ ^ ^ ^ update ^ ^ ^ ^  ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> +_ter', 'operandl -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par1']
copynode -8.135774100781418:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member ^ ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member']
copynode -8.6493782219477:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member ^ ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member']
copynode -8.776118452195078:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member ^ ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member']
copynode -8.359147742390633:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ ^ ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> MemberReference']
copynode -8.185074463486671:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference qualifier par1 ^ ^ member unknown ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par1', 'start -> unknown']
copynode -8.16652962565422:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter']
copynode -9.22022466105409:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member ^ ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member']
copynode -8.16652962565422:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter']
copynode -8.610338135622442:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ ^ ^ ^ ^ condition ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'init -> VariableDeclaration', 'VariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc6', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> MemberReference']
copynode -8.72224397957325:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member par3 ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ ^ ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par3', 'operandr -> MemberReference']
copynode -8.91232843697071:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member par4 ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ ^ ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par4', 'operandr -> MemberReference']
copynode -8.95511408150196:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member loc3 ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ ^ ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc3', 'operandr -> MemberReference']
copynode -8.69726300239563:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter']
copynode -8.185074463486671:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference qualifier par1 ^ ^ member length_ter ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par1', 'member -> length_ter']
copynode -9.198304302990437:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr MemberReference qualifier par1 ^ ^ member par4 ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr MemberReference member ^ ^ ^ ^ ^ ^ ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> BinaryOperation', 'copy-BinaryOperation', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> MemberReference', 'MemberReference -> member']
copynode -8.69726300239563:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter']
copynode -9.387419595383108:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl MemberReference qualifier par1 ^ ^ member unknown ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ condition ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'init -> VariableDeclaration', 'VariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc6', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par1', 'start -> unknown']
copynode -9.188575461506844:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member par5 ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ ^ ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par5', 'operandr -> MemberReference']
before@18 batch0 x: -9.964401617646217: root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member par5 ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ ^ ^ update ^ ^ ^ ^  ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par5', 'operandr -> MemberReference']
after@18 batch0 x: -9.964401617646217: root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member par5 ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ ^ ^ update ^ ^ ^ ^  ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par5', 'operandr -> MemberReference']
copynode -8.186137879849412:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member loc6 ^ ^ ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> loc6']
copynode -9.231982558965683:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference']
copynode -9.315291732549667:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference']
copynode -8.186137879849412:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member loc5 ^ ^ ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> loc5']
copynode -9.088868334889412:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr MemberReference qualifier ^ member ^ ^ ^ ^ ^ ^ ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> MemberReference', 'MemberReference -> qualifier member']
copynode -9.088868334889412:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr MemberReference member ^ ^ ^ ^ ^ ^ ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> MemberReference', 'MemberReference -> member']
copynode -8.825598223600537:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member loc6 ^ ^ ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> loc6']
copynode -9.764008522033691:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference']
copynode -8.700891592074186:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member loc6 ^ ^ ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> loc6']
copynode -9.188603773713112:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference qualifier par1 ^ ^ member unknown ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ ^ ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par1', 'start -> unknown', 'operandr -> MemberReference']
copynode -9.358537121675909:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr MemberReference qualifier ^ member ^ ^ ^ ^ ^ ^ ^ ^ ^ condition ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'init -> VariableDeclaration', 'VariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc6', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> MemberReference', 'MemberReference -> qualifier member']
copynode -9.844159126281738:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference']
copynode -9.446181192994118:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member par3 ^ ^ ^ ^ operandr MemberReference qualifier ^ member ^ ^ ^ ^ ^ ^ ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par3', 'operandr -> MemberReference', 'MemberReference -> qualifier member']
copynode -9.358537121675909:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr MemberReference member ^ ^ ^ ^ ^ ^ ^ ^ ^ condition ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'init -> VariableDeclaration', 'VariableDeclaration -> type declarators', 'type -> BasicType', 'copy-BasicType', 'declarators -> VariableDeclarator', 'VariableDeclarator -> name initializer', 'name -> loc6', 'initializer -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> MemberReference', 'MemberReference -> member']
copynode -8.700891592074186:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member loc5 ^ ^ ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> loc5']
copynode -9.446181192994118:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member par3 ^ ^ ^ ^ operandr MemberReference member ^ ^ ^ ^ ^ ^ ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par3', 'operandr -> MemberReference', 'MemberReference -> member']
copynode -8.825598223600537:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member loc5 ^ ^ ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> loc5']
copynode -9.66035820543766:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member par4 ^ ^ ^ ^ operandr MemberReference qualifier ^ member ^ ^ ^ ^ ^ ^ ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par4', 'operandr -> MemberReference', 'MemberReference -> qualifier member']
before@19 batch0 x: -10.288752689957619: root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member par4 ^ ^ ^ ^ operandr MemberReference qualifier ^ member ^ ^ ^ ^ ^ ^ ^ update ^ ^ ^ ^  ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par4', 'operandr -> MemberReference', 'MemberReference -> qualifier member']
after@19 batch0 x: -10.288752689957619: root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member par4 ^ ^ ^ ^ operandr MemberReference qualifier ^ member ^ ^ ^ ^ ^ ^ ^ update ^ ^ ^ ^  ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par4', 'operandr -> MemberReference', 'MemberReference -> qualifier member']
copynode -9.38363130390644:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -9.524820640683174:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -9.919963404536247:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -10.056279703974724:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -9.355554426671006:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member loc6 ^ ^ ^ ^ value Literal ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'value -> Literal']
copynode -9.982416883111:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference qualifier par1 ^ ^ member unknown ^ ^ ^ ^ operandr MemberReference qualifier ^ member ^ ^ ^ ^ ^ ^ ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par1', 'start -> unknown', 'operandr -> MemberReference', 'MemberReference -> qualifier member']
copynode -9.355554426671006:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member loc6 ^ ^ ^ ^ value MemberReference ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'value -> MemberReference']
copynode -9.6616075882921:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member loc5 ^ ^ ^ ^ value MemberReference ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'value -> MemberReference']
copynode -9.6616075882921:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member loc5 ^ ^ ^ ^ value Literal ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'value -> Literal']
copynode -9.91452036658302:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member loc6 ^ ^ ^ ^ value Literal ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'value -> Literal']
copynode -9.944953181315213:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member loc6 ^ ^ ^ ^ value Literal ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'value -> Literal']
copynode -9.91452036658302:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member loc6 ^ ^ ^ ^ value MemberReference ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'value -> MemberReference']
copynode -9.944953181315213:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member loc6 ^ ^ ^ ^ value MemberReference ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'value -> MemberReference']
copynode -10.132264234591275:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member loc5 ^ ^ ^ ^ value MemberReference ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'value -> MemberReference']
copynode -9.712510421872139:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr MemberReference qualifier unknown ^ ^ member ^ ^ ^ ^ ^ ^ ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> MemberReference', 'MemberReference -> qualifier member', 'start -> unknown']
copynode -9.982416883111:  root modified ^ control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference qualifier par1 ^ ^ member unknown ^ ^ ^ ^ operandr MemberReference member ^ ^ ^ ^ ^ ^ ^ update ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update', 'copy-init', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> -_ter', 'operandl -> MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par1', 'start -> unknown', 'operandr -> MemberReference', 'MemberReference -> member']
copynode -10.270054085645825:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member loc5 ^ ^ ^ ^ value MemberReference ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'value -> MemberReference']
copynode -10.132264234591275:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member loc5 ^ ^ ^ ^ value Literal ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'value -> Literal']
before@20 batch0 x: -11.318060614634305: root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member loc5 ^ ^ ^ ^ value Literal ^ ^ type ^ ^ ^ ^ ^  ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'value -> Literal']
after@20 batch0 x: -11.318060614634305: root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member loc5 ^ ^ ^ ^ value Literal ^ ^ type ^ ^ ^ ^ ^  ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'value -> Literal']
copynode -10.365131581784226:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member loc6 ^ ^ ^ ^ value Literal value ^ ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'value -> Literal', 'Literal -> value']
copynode -10.395450676442124:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member loc6 ^ ^ ^ ^ value MemberReference member ^ ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'value -> MemberReference', 'MemberReference -> member']
copynode -10.65136554336641:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member loc5 ^ ^ ^ ^ value MemberReference member ^ ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'value -> MemberReference', 'MemberReference -> member']
copynode -9.55237092077732:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6']
copynode -9.660650715231895:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6']
copynode -10.874555910588242:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member loc5 ^ ^ ^ ^ value Literal value ^ ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'value -> Literal', 'Literal -> value']
copynode -10.90869376854971:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member loc6 ^ ^ ^ ^ value Literal value ^ ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'value -> Literal', 'Literal -> value']
copynode -10.901846928987652:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member loc6 ^ ^ ^ ^ value Literal value ^ ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'value -> Literal', 'Literal -> value']
copynode -10.960719211492687:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member loc6 ^ ^ ^ ^ value MemberReference member ^ ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'value -> MemberReference', 'MemberReference -> member']
copynode -10.998718716669828:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member loc6 ^ ^ ^ ^ value MemberReference member ^ ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'value -> MemberReference', 'MemberReference -> member']
copynode -11.114956535864621:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member loc5 ^ ^ ^ ^ value MemberReference member ^ ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'value -> MemberReference', 'MemberReference -> member']
copynode -11.26604293147102:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member loc5 ^ ^ ^ ^ value MemberReference member ^ ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'value -> MemberReference', 'MemberReference -> member']
copynode -11.318060614634305:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member loc5 ^ ^ ^ ^ value Literal value ^ ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'value -> Literal', 'Literal -> value']
copynode -10.190673932433128:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6']
copynode -10.087703749537468:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6']
copynode -9.55237092077732:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc5']
copynode -9.660650715231895:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc5']
copynode -9.55237092077732:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc7 ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc7']
before@21 batch0 x: -11.733649864792824: root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc7 ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^  ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc7']
after@21 batch0 x: -11.733649864792824: root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc7 ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^  ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc7']
copynode -10.503595600486733:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member loc6 ^ ^ ^ ^ value Literal value 0_ter ^ ^ ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'value -> Literal', 'Literal -> value', 'value -> 0_ter']
copynode -10.862841233611107:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> MemberReference']
copynode -10.831325188279152:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal']
copynode -11.041740738321096:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member loc6 ^ ^ ^ ^ value Literal value 0_ter ^ ^ ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'value -> Literal', 'Literal -> value', 'value -> 0_ter']
copynode -11.011965642333962:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member loc5 ^ ^ ^ ^ value Literal value 0_ter ^ ^ ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'value -> Literal', 'Literal -> value', 'value -> 0_ter']
copynode -10.831325188279152:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> MemberReference']
copynode -11.054846419487149:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member loc6 ^ ^ ^ ^ value Literal value 0_ter ^ ^ ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'value -> Literal', 'Literal -> value', 'value -> 0_ter']
copynode -10.506819295347668:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member loc6 ^ ^ ^ ^ value MemberReference member loc6 ^ ^ ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'value -> MemberReference', 'MemberReference -> member', 'member -> loc6']
copynode -10.506819295347668:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member loc6 ^ ^ ^ ^ value MemberReference member loc5 ^ ^ ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'value -> MemberReference', 'MemberReference -> member', 'member -> loc5']
copynode -10.862841233611107:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal']
copynode -10.503595600486733:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member loc6 ^ ^ ^ ^ value Literal value false_ter ^ ^ ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'value -> Literal', 'Literal -> value', 'value -> false_ter']
copynode -11.452551253605634:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member loc5 ^ ^ ^ ^ value Literal value 0_ter ^ ^ ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'value -> Literal', 'Literal -> value', 'value -> 0_ter']
copynode -11.631249651312828:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> MemberReference']
copynode -11.705025181174278:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'operandr -> MemberReference']
copynode -10.772544639767148:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member loc5 ^ ^ ^ ^ value MemberReference member loc6 ^ ^ ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'value -> MemberReference', 'MemberReference -> member', 'member -> loc6']
copynode -10.772544639767148:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member loc5 ^ ^ ^ ^ value MemberReference member loc5 ^ ^ ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'value -> MemberReference', 'MemberReference -> member', 'member -> loc5']
copynode -11.057525819633156:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member loc6 ^ ^ ^ ^ value MemberReference member loc6 ^ ^ ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'value -> MemberReference', 'MemberReference -> member', 'member -> loc6']
copynode -11.64220230281353:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal']
before@22 batch0 x: -12.519010946154594: root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal ^ ^ ^ ^ ^ ^ ^ ^  ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal']
after@22 batch0 x: -12.519010946154594: root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal ^ ^ ^ ^ ^ ^ ^ ^  ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal']
copynode -11.702073410153389:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value']
copynode -11.283900390029885:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member loc6 ^ ^ ^ ^ value Literal value 0_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'value -> Literal', 'Literal -> value', 'value -> 0_ter', 'type -> =_ter']
copynode -11.565343245863914:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr MemberReference member ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> MemberReference', 'MemberReference -> member']
copynode -11.800166212487966:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member loc6 ^ ^ ^ ^ value Literal value 0_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'value -> Literal', 'Literal -> value', 'value -> 0_ter', 'type -> =_ter']
copynode -12.221513137221336:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value']
copynode -11.879081025719643:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr MemberReference member ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> MemberReference', 'MemberReference -> member']
copynode -11.87513340509031:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member loc5 ^ ^ ^ ^ value Literal value 0_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'value -> Literal', 'Literal -> value', 'value -> 0_ter', 'type -> =_ter']
copynode -11.946267439518124:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member loc6 ^ ^ ^ ^ value Literal value 0_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'value -> Literal', 'Literal -> value', 'value -> 0_ter', 'type -> =_ter']
copynode -12.519010946154594:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value']
copynode -12.022414016188122:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member loc6 ^ ^ ^ ^ value MemberReference member loc5 ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'value -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'type -> =_ter']
copynode -12.246382842422463:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member loc6 ^ ^ ^ ^ value Literal value false_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'value -> Literal', 'Literal -> value', 'value -> false_ter', 'type -> =_ter']
copynode -11.989962267340161:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member loc6 ^ ^ ^ ^ value MemberReference member loc6 ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'value -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'type -> =_ter']
copynode -11.283900390029885:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member loc6 ^ ^ ^ ^ value Literal value 0_ter ^ ^ ^ ^ type +=_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'value -> Literal', 'Literal -> value', 'value -> 0_ter', 'type -> +=_ter']
copynode -12.353774532675743:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr MemberReference member ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> MemberReference', 'MemberReference -> member']
copynode -12.304692157078534:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member loc5 ^ ^ ^ ^ value Literal value 0_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'value -> Literal', 'Literal -> value', 'value -> 0_ter', 'type -> =_ter']
copynode -12.419378682971:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr MemberReference member ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'operandr -> MemberReference', 'MemberReference -> member']
copynode -11.565343245863914:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr MemberReference qualifier ^ member ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> MemberReference', 'MemberReference -> qualifier member']
copynode -12.45497264212463:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member loc5 ^ ^ ^ ^ value MemberReference member loc5 ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'value -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'type -> =_ter']
before@23 batch0 x: -13.055655735195614: root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member loc5 ^ ^ ^ ^ value MemberReference member loc5 ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^  ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'value -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'type -> =_ter']
after@23 batch0 x: -13.055655735195614: root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member loc5 ^ ^ ^ ^ value MemberReference member loc5 ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^  ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'value -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'type -> =_ter']
copynode -11.758463034988381:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member loc6 ^ ^ ^ ^ value Literal value 0_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'value -> Literal', 'Literal -> value', 'value -> 0_ter', 'type -> =_ter', 'root -> End']
copynode -11.745356649160385:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter']
copynode -12.258030497003347:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member loc6 ^ ^ ^ ^ value Literal value 0_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'value -> Literal', 'Literal -> value', 'value -> 0_ter', 'type -> =_ter', 'root -> End']
copynode -12.343459973693825:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member loc5 ^ ^ ^ ^ value Literal value 0_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'value -> Literal', 'Literal -> value', 'value -> 0_ter', 'type -> =_ter', 'root -> End']
copynode -12.455380036029965:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member loc6 ^ ^ ^ ^ value Literal value 0_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'value -> Literal', 'Literal -> value', 'value -> 0_ter', 'type -> =_ter', 'root -> End']
copynode -12.652789282263257:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member loc6 ^ ^ ^ ^ value MemberReference member loc5 ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'value -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'type -> =_ter', 'root -> End']
copynode -12.562307503074408:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter']
copynode -12.65837873017881:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member loc6 ^ ^ ^ ^ value Literal value false_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'value -> Literal', 'Literal -> value', 'value -> false_ter', 'type -> =_ter', 'root -> End']
copynode -12.674157070578076:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member loc6 ^ ^ ^ ^ value MemberReference member loc6 ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'value -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'type -> =_ter', 'root -> End']
copynode -12.679071555496193:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member loc6 ^ ^ ^ ^ value Literal value 0_ter ^ ^ ^ ^ type +=_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'value -> Literal', 'Literal -> value', 'value -> 0_ter', 'type -> +=_ter', 'root -> End']
copynode -12.260001935064793:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> 0_ter']
copynode -12.757838495541364:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member loc5 ^ ^ ^ ^ value Literal value 0_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'value -> Literal', 'Literal -> value', 'value -> 0_ter', 'type -> =_ter', 'root -> End']
copynode -13.055655735195614:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member loc5 ^ ^ ^ ^ value MemberReference member loc5 ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'value -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'type -> =_ter', 'root -> End']
copynode -12.260001935064793:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter']
copynode -11.745356649160385:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> 0_ter']
copynode -11.937853619456291:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr MemberReference member loc6 ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> MemberReference', 'MemberReference -> member', 'member -> loc6']
copynode -11.937853619456291:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr MemberReference member loc3 ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> MemberReference', 'MemberReference -> member', 'member -> loc3']
copynode -12.562307503074408:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> 0_ter']
before@24 batch0 x: -14.250070001929998: root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^  ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> 0_ter']
after@24 batch0 x: -14.250070001929998: root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^  ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> 0_ter']
copynode -12.023128688335419:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> End']
copynode -12.023128688335419:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ StatementExpression ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression']
copynode -12.824752029031515:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> End']
copynode -12.88929382711649:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> 0_ter', 'root -> End']
copynode -12.824752029031515:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ StatementExpression ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression']
copynode -12.88929382711649:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ StatementExpression ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> 0_ter', 'root -> StatementExpression']
copynode -13.373474329710007:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> 0_ter', 'root -> End']
copynode -13.295923508703709:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> End']
before@25 batch0 x: -14.236622668802738: root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^  ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> End']
after@25 batch0 x: -14.236622668802738: root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^  ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> End']
copynode -13.193599879741669:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ StatementExpression expression ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression', 'StatementExpression -> expression']
copynode -13.993538554757833:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ StatementExpression expression ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression', 'StatementExpression -> expression']
copynode -14.00843707472086:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ StatementExpression expression ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> 0_ter', 'root -> StatementExpression', 'StatementExpression -> expression']
before@26 batch0 x: -14.322487659752369: root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ StatementExpression expression ^ ^ ^  ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> 0_ter', 'root -> StatementExpression', 'StatementExpression -> expression']
after@26 batch0 x: -14.322487659752369: root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ StatementExpression expression ^ ^ ^  ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> 0_ter', 'root -> StatementExpression', 'StatementExpression -> expression']
copynode -13.504762828350067:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment']
copynode -14.322487659752369:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> 0_ter', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment']
copynode -14.309700038284063:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment']
before@27 batch0 x: -14.700232293456793: root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment ^ ^ ^ ^  ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment']
after@27 batch0 x: -14.700232293456793: root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment ^ ^ ^ ^  ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment']
copynode -13.899154871702194:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type']
copynode -14.696229554712772:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> 0_ter', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type']
copynode -14.700232293456793:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type']
before@28 batch0 x: -14.702014509937726: root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl ^ value ^ type ^ ^ ^ ^ ^  ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type']
after@28 batch0 x: -14.702014509937726: root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl ^ value ^ type ^ ^ ^ ^ ^  ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type']
copynode -13.900924011482857:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference']
copynode -14.702014509937726:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc5', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference']
copynode -14.697921551880427:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc6 ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> null_ter', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> loc6', 'operandr -> Literal', 'Literal -> value', 'value -> 0_ter', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference']
6 length_ter
6 i_ter
6 length_ter
6 length_ter
6 length_ter
6 length_ter
6 length_ter
6 i_ter
6 length_ter
6 i_ter
6 length_ter
6 length_ter
6 length_ter
6 length_ter
method
7 
None  increment 
double  getResult 
long  getN 
None  clear 
double  evaluate 
double  evaluate 
double  evaluate 
double  evaluate 
double  evaluate 
double  evaluate 
double  evaluate 
double  evaluate 
boolean  isBiasCorrected 
None  setBiasCorrected 
Variance  copy 
None  copy 
6 length_ter
6 length_ter
6 length_ter
6 i_ter
6 length_ter
6 length_ter
6 i_ter
6 length_ter
6 length_ter
6 length_ter
6 length_ter
6 length_ter
6 length_ter
6 i_ter
6 length_ter
method
7 
6 length_ter
6 length_ter
stderr: Check out 882556ea to /root/projects/Recoder-bwk/buggy/Math-41............. OK
Init local repository...................................................... OK
Tag post-fix revision...................................................... OK
Initialize fixed program version........................................... OK
Apply patch................................................................ OK
Initialize buggy program version........................................... OK
Diff 882556ea:91e6ac58..................................................... OK
Apply patch................................................................ OK
Tag pre-fix revision....................................................... OK
Check out program version: Math-41b........................................ OK
OpenJDK 64-Bit Server VM warning: ignoring option MaxPermSize=1G; support was removed in 8.0
Running ant (export.dir.src.classes)....................................... OK

  0%|          | 0/1 [00:00<?, ?it/s]/root/projects/Recoder-bwk/run.py:527: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  tmpdepth = np.array(tmpdepth)
/root/envs/recoder/lib/python3.7/site-packages/torch/nn/functional.py:1340: UserWarning: nn.functional.tanh is deprecated. Use torch.tanh instead.
  warnings.warn("nn.functional.tanh is deprecated. Use torch.tanh instead.")
100%|██████████| 1/1 [00:14<00:00, 14.58s/it]100%|██████████| 1/1 [00:14<00:00, 14.58s/it]
