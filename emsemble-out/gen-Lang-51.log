stdout: else_statement -> BlockStatement
using GPU
p
path org.apache.commons.lang.BooleanUtils
toBoolean
Position(line=649, column=19)
FOUND IT!
[{'bugid': 'Lang-51', 'treeroot': <Searchnode.Node object at 0x7ffa894f3350>, 'troot': <Searchnode.Node object at 0x7ffa8bb3dc90>, 'oldcode': "                if (ch == 'Y') {", 'filepath': 'buggy/Lang-51/src/java/org/apache/commons/lang/BooleanUtils.java', 'subroot': <Searchnode.Node object at 0x7ffa89496110>, 'vardic': {'toBoolean_ter': 'meth0', 'ch_ter': 'loc0', 'ch0_ter': 'loc3', 'ch1_ter': 'loc4'}, 'typedic': {'ch_ter': 'char', 'ch0_ter': 'char', 'ch1_ter': 'char'}, 'idss': 'Lang-51', 'classname': 'org.apache.commons.lang.BooleanUtils', 'precode': '/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the "License"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n * \n *      http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.lang;\n\nimport org.apache.commons.lang.math.NumberUtils;\n\n/**\n * <p>Operations on boolean primitives and Boolean objects.</p>\n *\n * <p>This class tries to handle <code>null</code> input gracefully.\n * An exception will not be thrown for a <code>null</code> input.\n * Each method documents its behaviour in more detail.</p>\n * \n * @author Stephen Colebourne\n * @author Matthew Hawthorne\n * @author Gary Gregory\n * @since 2.0\n * @version $Id$\n */\npublic class BooleanUtils {\n\n    /**\n     * <p><code>BooleanUtils</code> instances should NOT be constructed in standard programming.\n     * Instead, the class should be used as <code>BooleanUtils.toBooleanObject(true);</code>.</p>\n     *\n     * <p>This constructor is public to permit tools that require a JavaBean instance\n     * to operate.</p>\n     */\n    public BooleanUtils() {\n      super();\n    }\n\n    // Boolean utilities\n    //--------------------------------------------------------------------------\n    /**\n     * <p>Negates the specified boolean.</p>\n     * \n     * <p>If <code>null</code> is passed in, <code>null</code> will be returned.</p>\n     *\n     * <pre>\n     *   BooleanUtils.negate(Boolean.TRUE)  = Boolean.FALSE;\n     *   BooleanUtils.negate(Boolean.FALSE) = Boolean.TRUE;\n     *   BooleanUtils.negate(null)          = null;\n     * </pre>\n     * \n     * @param bool  the Boolean to negate, may be null\n     * @return the negated Boolean, or <code>null</code> if <code>null</code> input\n     */\n    public static Boolean negate(Boolean bool) {\n        if (bool == null) {\n            return null;\n        }\n        return (bool.booleanValue() ? Boolean.FALSE : Boolean.TRUE);\n    }\n    \n    // boolean Boolean methods\n    //-----------------------------------------------------------------------\n    /**\n     * <p>Checks if a <code>Boolean</code> value is <code>true</code>,\n     * handling <code>null</code> by returning <code>false</code>.</p>\n     *\n     * <pre>\n     *   BooleanUtils.isTrue(Boolean.TRUE)  = true\n     *   BooleanUtils.isTrue(Boolean.FALSE) = false\n     *   BooleanUtils.isTrue(null)          = false\n     * </pre>\n     *\n     * @param bool  the boolean to check, null returns <code>false</code>\n     * @return <code>true</code> only if the input is non-null and true\n     * @since 2.1\n     */\n    public static boolean isTrue(Boolean bool) {\n        if (bool == null) {\n            return false;\n        }\n        return bool.booleanValue() ? true : false;\n    }\n\n    /**\n     * <p>Checks if a <code>Boolean</code> value is <i>not</i> <code>true</code>,\n     * handling <code>null</code> by returning <code>true</code>.</p>\n     *\n     * <pre>\n     *   BooleanUtils.isNotTrue(Boolean.TRUE)  = false\n     *   BooleanUtils.isNotTrue(Boolean.FALSE) = true\n     *   BooleanUtils.isNotTrue(null)          = true\n     * </pre>\n     *\n     * @param bool  the boolean to check, null returns <code>true</code>\n     * @return <code>true</code> if the input is null or false\n     * @since 2.3\n     */\n    public static boolean isNotTrue(Boolean bool) {\n        return !isTrue(bool);\n    }\n\n    /**\n     * <p>Checks if a <code>Boolean</code> value is <code>false</code>,\n     * handling <code>null</code> by returning <code>false</code>.</p>\n     *\n     * <pre>\n     *   BooleanUtils.isFalse(Boolean.TRUE)  = false\n     *   BooleanUtils.isFalse(Boolean.FALSE) = true\n     *   BooleanUtils.isFalse(null)          = false\n     * </pre>\n     *\n     * @param bool  the boolean to check, null returns <code>false</code>\n     * @return <code>true</code> only if the input is non-null and false\n     * @since 2.1\n     */\n    public static boolean isFalse(Boolean bool) {\n        if (bool == null) {\n            return false;\n        }\n        return bool.booleanValue() ? false : true;\n    }\n\n    /**\n     * <p>Checks if a <code>Boolean</code> value is <i>not</i> <code>false</code>,\n     * handling <code>null</code> by returning <code>true</code>.</p>\n     *\n     * <pre>\n     *   BooleanUtils.isNotFalse(Boolean.TRUE)  = true\n     *   BooleanUtils.isNotFalse(Boolean.FALSE) = false\n     *   BooleanUtils.isNotFalse(null)          = true\n     * </pre>\n     *\n     * @param bool  the boolean to check, null returns <code>true</code>\n     * @return <code>true</code> if the input is null or true\n     * @since 2.3\n     */\n    public static boolean isNotFalse(Boolean bool) {\n        return !isFalse(bool);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * <p>Boolean factory that avoids creating new Boolean objecs all the time.</p>\n     * \n     * <p>This method was added to JDK1.4 but is available here for earlier JDKs.</p>\n     *\n     * <pre>\n     *   BooleanUtils.toBooleanObject(false) = Boolean.FALSE\n     *   BooleanUtils.toBooleanObject(true)  = Boolean.TRUE\n     * </pre>\n     *\n     * @param bool  the boolean to convert\n     * @return Boolean.TRUE or Boolean.FALSE as appropriate\n     */\n    public static Boolean toBooleanObject(boolean bool) {\n        return bool ? Boolean.TRUE : Boolean.FALSE;\n    }\n    \n    /**\n     * <p>Converts a Boolean to a boolean handling <code>null</code>\n     * by returning <code>false</code>.</p>\n     *\n     * <pre>\n     *   BooleanUtils.toBoolean(Boolean.TRUE)  = true\n     *   BooleanUtils.toBoolean(Boolean.FALSE) = false\n     *   BooleanUtils.toBoolean(null)          = false\n     * </pre>\n     *\n     * @param bool  the boolean to convert\n     * @return <code>true</code> or <code>false</code>, \n     *  <code>null</code> returns <code>false</code>\n     */\n    public static boolean toBoolean(Boolean bool) {\n        if (bool == null) {\n            return false;\n        }\n        return bool.booleanValue() ? true : false;\n    }\n    \n    /**\n     * <p>Converts a Boolean to a boolean handling <code>null</code>.</p>\n     * \n     * <pre>\n     *   BooleanUtils.toBooleanDefaultIfNull(Boolean.TRUE, false) = true\n     *   BooleanUtils.toBooleanDefaultIfNull(Boolean.FALSE, true) = false\n     *   BooleanUtils.toBooleanDefaultIfNull(null, true)          = true\n     * </pre>\n     *\n     * @param bool  the boolean to convert\n     * @param valueIfNull  the boolean value to return if <code>null</code>\n     * @return <code>true</code> or <code>false</code>\n     */\n    public static boolean toBooleanDefaultIfNull(Boolean bool, boolean valueIfNull) {\n        if (bool == null) {\n            return valueIfNull;\n        }\n        return bool.booleanValue() ? true : false;\n    }\n    \n    // Integer to Boolean methods\n    //-----------------------------------------------------------------------\n    /**\n     * <p>Converts an int to a boolean using the convention that <code>zero</code>\n     * is <code>false</code>.</p>\n     * \n     * <pre>\n     *   BooleanUtils.toBoolean(0) = false\n     *   BooleanUtils.toBoolean(1) = true\n     *   BooleanUtils.toBoolean(2) = true\n     * </pre>\n     *\n     * @param value  the int to convert\n     * @return <code>true</code> if non-zero, <code>false</code>\n     *  if zero\n     */\n    public static boolean toBoolean(int value) {\n        return value == 0 ? false : true;\n    }\n    \n    /**\n     * <p>Converts an int to a Boolean using the convention that <code>zero</code>\n     * is <code>false</code>.</p>\n     * \n     * <pre>\n     *   BooleanUtils.toBoolean(0) = Boolean.FALSE\n     *   BooleanUtils.toBoolean(1) = Boolean.TRUE\n     *   BooleanUtils.toBoolean(2) = Boolean.TRUE\n     * </pre>\n     *\n     * @param value  the int to convert\n     * @return Boolean.TRUE if non-zero, Boolean.FALSE if zero,\n     *  <code>null</code> if <code>null</code>\n     */\n    public static Boolean toBooleanObject(int value) {\n        return value == 0 ? Boolean.FALSE : Boolean.TRUE;\n    }\n    \n    /**\n     * <p>Converts an Integer to a Boolean using the convention that <code>zero</code>\n     * is <code>false</code>.</p>\n     * \n     * <p><code>null</code> will be converted to <code>null</code>.</p>\n     *\n     * <pre>\n     *   BooleanUtils.toBoolean(new Integer(0))    = Boolean.FALSE\n     *   BooleanUtils.toBoolean(new Integer(1))    = Boolean.TRUE\n     *   BooleanUtils.toBoolean(new Integer(null)) = null\n     * </pre>\n     *\n     * @param value  the Integer to convert\n     * @return Boolean.TRUE if non-zero, Boolean.FALSE if zero,\n     *  <code>null</code> if <code>null</code> input\n     */\n    public static Boolean toBooleanObject(Integer value) {\n        if (value == null) {\n            return null;\n        }\n        return value.intValue() == 0 ? Boolean.FALSE : Boolean.TRUE;\n    }\n    \n    /**\n     * <p>Converts an int to a boolean specifying the conversion values.</p>\n     * \n     * <pre>\n     *   BooleanUtils.toBoolean(0, 1, 0) = false\n     *   BooleanUtils.toBoolean(1, 1, 0) = true\n     *   BooleanUtils.toBoolean(2, 1, 2) = false\n     *   BooleanUtils.toBoolean(2, 2, 0) = true\n     * </pre>\n     *\n     * @param value  the Integer to convert\n     * @param trueValue  the value to match for <code>true</code>\n     * @param falseValue  the value to match for <code>false</code>\n     * @return <code>true</code> or <code>false</code>\n     * @throws IllegalArgumentException if no match\n     */\n    public static boolean toBoolean(int value, int trueValue, int falseValue) {\n        if (value == trueValue) {\n            return true;\n        } else if (value == falseValue) {\n            return false;\n        }\n        // no match\n        throw new IllegalArgumentException("The Integer did not match either specified value");\n    }\n    \n    /**\n     * <p>Converts an Integer to a boolean specifying the conversion values.</p>\n     * \n     * <pre>\n     *   BooleanUtils.toBoolean(new Integer(0), new Integer(1), new Integer(0)) = false\n     *   BooleanUtils.toBoolean(new Integer(1), new Integer(1), new Integer(0)) = true\n     *   BooleanUtils.toBoolean(new Integer(2), new Integer(1), new Integer(2)) = false\n     *   BooleanUtils.toBoolean(new Integer(2), new Integer(2), new Integer(0)) = true\n     *   BooleanUtils.toBoolean(null, null, new Integer(0))                     = true\n     * </pre>\n     *\n     * @param value  the Integer to convert\n     * @param trueValue  the value to match for <code>true</code>,\n     *  may be <code>null</code>\n     * @param falseValue  the value to match for <code>false</code>,\n     *  may be <code>null</code>\n     * @return <code>true</code> or <code>false</code>\n     * @throws IllegalArgumentException if no match\n     */\n    public static boolean toBoolean(Integer value, Integer trueValue, Integer falseValue) {\n        if (value == null) {\n            if (trueValue == null) {\n                return true;\n            } else if (falseValue == null) {\n                return false;\n            }\n        } else if (value.equals(trueValue)) {\n            return true;\n        } else if (value.equals(falseValue)) {\n            return false;\n        }\n        // no match\n        throw new IllegalArgumentException("The Integer did not match either specified value");\n    }\n    \n    /**\n     * <p>Converts an int to a Boolean specifying the conversion values.</p>\n     * \n     * <pre>\n     *   BooleanUtils.toBooleanObject(0, 0, 2, 3) = Boolean.TRUE\n     *   BooleanUtils.toBooleanObject(2, 1, 2, 3) = Boolean.FALSE\n     *   BooleanUtils.toBooleanObject(3, 1, 2, 3) = null\n     * </pre>\n     *\n     * @param value  the Integer to convert\n     * @param trueValue  the value to match for <code>true</code>\n     * @param falseValue  the value to match for <code>false</code>\n     * @param nullValue  the value to to match for <code>null</code>\n     * @return Boolean.TRUE, Boolean.FALSE, or <code>null</code>\n     * @throws IllegalArgumentException if no match\n     */\n    public static Boolean toBooleanObject(int value, int trueValue, int falseValue, int nullValue) {\n        if (value == trueValue) {\n            return Boolean.TRUE;\n        } else if (value == falseValue) {\n            return Boolean.FALSE;\n        } else if (value == nullValue) {\n            return null;\n        }\n        // no match\n        throw new IllegalArgumentException("The Integer did not match any specified value");\n    }\n    \n    /**\n     * <p>Converts an Integer to a Boolean specifying the conversion values.</p>\n     * \n     * <pre>\n     *   BooleanUtils.toBooleanObject(new Integer(0), new Integer(0), new Integer(2), new Integer(3)) = Boolean.TRUE\n     *   BooleanUtils.toBooleanObject(new Integer(2), new Integer(1), new Integer(2), new Integer(3)) = Boolean.FALSE\n     *   BooleanUtils.toBooleanObject(new Integer(3), new Integer(1), new Integer(2), new Integer(3)) = null\n     * </pre>\n     *\n     * @param value  the Integer to convert\n     * @param trueValue  the value to match for <code>true</code>,\n     *  may be <code>null</code>\n     * @param falseValue  the value to match for <code>false</code>,\n     *  may be <code>null</code>\n     * @param nullValue  the value to to match for <code>null</code>,\n     *  may be <code>null</code>\n     * @return Boolean.TRUE, Boolean.FALSE, or <code>null</code>\n     * @throws IllegalArgumentException if no match\n     */\n    public static Boolean toBooleanObject(Integer value, Integer trueValue, Integer falseValue, Integer nullValue) {\n        if (value == null) {\n            if (trueValue == null) {\n                return Boolean.TRUE;\n            } else if (falseValue == null) {\n                return Boolean.FALSE;\n            } else if (nullValue == null) {\n                return null;\n            }\n        } else if (value.equals(trueValue)) {\n            return Boolean.TRUE;\n        } else if (value.equals(falseValue)) {\n            return Boolean.FALSE;\n        } else if (value.equals(nullValue)) {\n            return null;\n        }\n        // no match\n        throw new IllegalArgumentException("The Integer did not match any specified value");\n    }\n    \n    // Boolean to Integer methods\n    //-----------------------------------------------------------------------\n    /**\n     * <p>Converts a boolean to an int using the convention that\n     * <code>zero</code> is <code>false</code>.</p>\n     *\n     * <pre>\n     *   BooleanUtils.toInteger(true)  = 1\n     *   BooleanUtils.toInteger(false) = 0\n     * </pre>\n     *\n     * @param bool  the boolean to convert\n     * @return one if <code>true</code>, zero if <code>false</code>\n     */\n    public static int toInteger(boolean bool) {\n        return bool ? 1 : 0;\n    }\n    \n    /**\n     * <p>Converts a boolean to an Integer using the convention that\n     * <code>zero</code> is <code>false</code>.</p>\n     * \n     * <pre>\n     *   BooleanUtils.toIntegerObject(true)  = new Integer(1)\n     *   BooleanUtils.toIntegerObject(false) = new Integer(0)\n     * </pre>\n     *\n     * @param bool  the boolean to convert\n     * @return one if <code>true</code>, zero if <code>false</code>\n     */\n    public static Integer toIntegerObject(boolean bool) {\n        return bool ? NumberUtils.INTEGER_ONE : NumberUtils.INTEGER_ZERO;\n    }\n    \n    /**\n     * <p>Converts a Boolean to a Integer using the convention that\n     * <code>zero</code> is <code>false</code>.</p>\n     *\n     * <p><code>null</code> will be converted to <code>null</code>.</p>\n     *\n     * <pre>\n     *   BooleanUtils.toIntegerObject(Boolean.TRUE)  = new Integer(1)\n     *   BooleanUtils.toIntegerObject(Boolean.FALSE) = new Integer(0)\n     * </pre>\n     *\n     * @param bool  the Boolean to convert\n     * @return one if Boolean.TRUE, zero if Boolean.FALSE, <code>null</code> if <code>null</code>\n     */\n    public static Integer toIntegerObject(Boolean bool) {\n        if (bool == null) {\n            return null;\n        }\n        return bool.booleanValue() ? NumberUtils.INTEGER_ONE : NumberUtils.INTEGER_ZERO;\n    }\n    \n    /**\n     * <p>Converts a boolean to an int specifying the conversion values.</p>\n     * \n     * <pre>\n     *   BooleanUtils.toInteger(true, 1, 0)  = 1\n     *   BooleanUtils.toInteger(false, 1, 0) = 0\n     * </pre>\n     *\n     * @param bool  the to convert\n     * @param trueValue  the value to return if <code>true</code>\n     * @param falseValue  the value to return if <code>false</code>\n     * @return the appropriate value\n     */\n    public static int toInteger(boolean bool, int trueValue, int falseValue) {\n        return bool ? trueValue : falseValue;\n    }\n    \n    /**\n     * <p>Converts a Boolean to an int specifying the conversion values.</p>\n     * \n     * <pre>\n     *   BooleanUtils.toInteger(Boolean.TRUE, 1, 0, 2)  = 1\n     *   BooleanUtils.toInteger(Boolean.FALSE, 1, 0, 2) = 0\n     *   BooleanUtils.toInteger(null, 1, 0, 2)          = 2\n     * </pre>\n     *\n     * @param bool  the Boolean to convert\n     * @param trueValue  the value to return if <code>true</code>\n     * @param falseValue  the value to return if <code>false</code>\n     * @param nullValue  the value to return if <code>null</code>\n     * @return the appropriate value\n     */\n    public static int toInteger(Boolean bool, int trueValue, int falseValue, int nullValue) {\n        if (bool == null) {\n            return nullValue;\n        }\n        return bool.booleanValue() ? trueValue : falseValue;\n    }\n    \n    /**\n     * <p>Converts a boolean to an Integer specifying the conversion values.</p>\n     * \n     * <pre>\n     *   BooleanUtils.toIntegerObject(true, new Integer(1), new Integer(0))  = new Integer(1)\n     *   BooleanUtils.toIntegerObject(false, new Integer(1), new Integer(0)) = new Integer(0)\n     * </pre>\n     *\n     * @param bool  the to convert\n     * @param trueValue  the value to return if <code>true</code>,\n     *  may be <code>null</code>\n     * @param falseValue  the value to return if <code>false</code>,\n     *  may be <code>null</code>\n     * @return the appropriate value\n     */\n    public static Integer toIntegerObject(boolean bool, Integer trueValue, Integer falseValue) {\n        return bool ? trueValue : falseValue;\n    }\n    \n    /**\n     * <p>Converts a Boolean to an Integer specifying the conversion values.</p>\n     * \n     * <pre>\n     *   BooleanUtils.toIntegerObject(Boolean.TRUE, new Integer(1), new Integer(0), new Integer(2))  = new Integer(1)\n     *   BooleanUtils.toIntegerObject(Boolean.FALSE, new Integer(1), new Integer(0), new Integer(2)) = new Integer(0)\n     *   BooleanUtils.toIntegerObject(null, new Integer(1), new Integer(0), new Integer(2))          = new Integer(2)\n     * </pre>\n     *\n     * @param bool  the Boolean to convert\n     * @param trueValue  the value to return if <code>true</code>,\n     *  may be <code>null</code>\n     * @param falseValue  the value to return if <code>false</code>,\n     *  may be <code>null</code>\n     * @param nullValue  the value to return if <code>null</code>,\n     *  may be <code>null</code>\n     * @return the appropriate value\n     */\n    public static Integer toIntegerObject(Boolean bool, Integer trueValue, Integer falseValue, Integer nullValue) {\n        if (bool == null) {\n            return nullValue;\n        }\n        return bool.booleanValue() ? trueValue : falseValue;\n    }\n    \n    // String to Boolean methods\n    //-----------------------------------------------------------------------\n    /**\n     * <p>Converts a String to a Boolean.</p>\n     * \n     * <p><code>\'true\'</code>, <code>\'on\'</code> or <code>\'yes\'</code>\n     * (case insensitive) will return <code>true</code>.\n     * <code>\'false\'</code>, <code>\'off\'</code> or <code>\'no\'</code>\n     * (case insensitive) will return <code>false</code>.\n     * Otherwise, <code>null</code> is returned.</p>\n     *\n     * <pre>\n     *   BooleanUtils.toBooleanObject(null)    = null\n     *   BooleanUtils.toBooleanObject("true")  = Boolean.TRUE\n     *   BooleanUtils.toBooleanObject("false") = Boolean.FALSE\n     *   BooleanUtils.toBooleanObject("on")    = Boolean.TRUE\n     *   BooleanUtils.toBooleanObject("ON")    = Boolean.TRUE\n     *   BooleanUtils.toBooleanObject("off")   = Boolean.FALSE\n     *   BooleanUtils.toBooleanObject("oFf")   = Boolean.FALSE\n     *   BooleanUtils.toBooleanObject("blue")  = null\n     * </pre>\n     *\n     * @param str  the String to check\n     * @return the Boolean value of the string,\n     *  <code>null</code> if no match or <code>null</code> input\n     */\n    public static Boolean toBooleanObject(String str) {\n        if ("true".equalsIgnoreCase(str)) {\n            return Boolean.TRUE;\n        } else if ("false".equalsIgnoreCase(str)) {\n            return Boolean.FALSE;\n        } else if ("on".equalsIgnoreCase(str)) {\n            return Boolean.TRUE;\n        } else if ("off".equalsIgnoreCase(str)) {\n            return Boolean.FALSE;\n        } else if ("yes".equalsIgnoreCase(str)) {\n            return Boolean.TRUE;\n        } else if ("no".equalsIgnoreCase(str)) {\n            return Boolean.FALSE;\n        }\n        // no match\n        return null;\n    }\n\n    /**\n     * <p>Converts a String to a Boolean throwing an exception if no match.</p>\n     *\n     * <pre>\n     *   BooleanUtils.toBooleanObject("true", "true", "false", "null")  = Boolean.TRUE\n     *   BooleanUtils.toBooleanObject("false", "true", "false", "null") = Boolean.FALSE\n     *   BooleanUtils.toBooleanObject("null", "true", "false", "null")  = null\n     * </pre>\n     *\n     * @param str  the String to check\n     * @param trueString  the String to match for <code>true</code>\n     *  (case sensitive), may be <code>null</code>\n     * @param falseString  the String to match for <code>false</code>\n     *  (case sensitive), may be <code>null</code>\n     * @param nullString  the String to match for <code>null</code>\n     *  (case sensitive), may be <code>null</code>\n     * @return the Boolean value of the string,\n     *  <code>null</code> if either the String matches <code>nullString</code>\n     *  or if <code>null</code> input and <code>nullString</code> is\n     *  <code>null</code>\n     * @throws IllegalArgumentException if the String doesn\'t match\n     */\n    public static Boolean toBooleanObject(String str, String trueString, String falseString, String nullString) {\n        if (str == null) {\n            if (trueString == null) {\n                return Boolean.TRUE;\n            } else if (falseString == null) {\n                return Boolean.FALSE;\n            } else if (nullString == null) {\n                return null;\n            }\n        } else if (str.equals(trueString)) {\n            return Boolean.TRUE;\n        } else if (str.equals(falseString)) {\n            return Boolean.FALSE;\n        } else if (str.equals(nullString)) {\n            return null;\n        }\n        // no match\n        throw new IllegalArgumentException("The String did not match any specified value");\n    }\n\n    // String to boolean methods\n    //-----------------------------------------------------------------------\n    /**\n     * <p>Converts a String to a boolean (optimised for performance).</p>\n     * \n     * <p><code>\'true\'</code>, <code>\'on\'</code> or <code>\'yes\'</code>\n     * (case insensitive) will return <code>true</code>. Otherwise,\n     * <code>false</code> is returned.</p>\n     * \n     * <p>This method performs 4 times faster (JDK1.4) than\n     * <code>Boolean.valueOf(String)</code>. However, this method accepts\n     * \'on\' and \'yes\' as true values.\n     *\n     * <pre>\n     *   BooleanUtils.toBoolean(null)    = false\n     *   BooleanUtils.toBoolean("true")  = true\n     *   BooleanUtils.toBoolean("TRUE")  = true\n     *   BooleanUtils.toBoolean("tRUe")  = true\n     *   BooleanUtils.toBoolean("on")    = true\n     *   BooleanUtils.toBoolean("yes")   = true\n     *   BooleanUtils.toBoolean("false") = false\n     *   BooleanUtils.toBoolean("x gti") = false\n     * </pre>\n     *\n     * @param str  the String to check\n     * @return the boolean value of the string, <code>false</code> if no match\n     */\n    public static boolean toBoolean(String str) {\n        // Previously used equalsIgnoreCase, which was fast for interned \'true\'.\n        // Non interned \'true\' matched 15 times slower.\n        // \n        // Optimisation provides same performance as before for interned \'true\'.\n        // Similar performance for null, \'false\', and other strings not length 2/3/4.\n        // \'true\'/\'TRUE\' match 4 times slower, \'tRUE\'/\'True\' 7 times slower.\n        if (str == "true") {\n            return true;\n        }\n        if (str == null) {\n            return false;\n        }\n        switch (str.length()) {\n            case 2: {\n                char ch0 = str.charAt(0);\n                char ch1 = str.charAt(1);\n                return \n                    (ch0 == \'o\' || ch0 == \'O\') &&\n                    (ch1 == \'n\' || ch1 == \'N\');\n            }\n            case 3: {\n                char ch = str.charAt(0);\n                if (ch == \'y\') {\n                    return \n                        (str.charAt(1) == \'e\' || str.charAt(1) == \'E\') &&\n                        (str.charAt(2) == \'s\' || str.charAt(2) == \'S\');\n                }', 'aftercode': '                    return \n                        (str.charAt(1) == \'E\' || str.charAt(1) == \'e\') &&\n                        (str.charAt(2) == \'S\' || str.charAt(2) == \'s\');\n                }\n            }\n            case 4: {\n                char ch = str.charAt(0);\n                if (ch == \'t\') {\n                    return \n                        (str.charAt(1) == \'r\' || str.charAt(1) == \'R\') &&\n                        (str.charAt(2) == \'u\' || str.charAt(2) == \'U\') &&\n                        (str.charAt(3) == \'e\' || str.charAt(3) == \'E\');\n                }\n                if (ch == \'T\') {\n                    return \n                        (str.charAt(1) == \'R\' || str.charAt(1) == \'r\') &&\n                        (str.charAt(2) == \'U\' || str.charAt(2) == \'u\') &&\n                        (str.charAt(3) == \'E\' || str.charAt(3) == \'e\');\n                }\n            }\n        }\n        return false;\n    }\n    \n//    public static void main(String[] args) {\n//        long start = System.currentTimeMillis();\n//        boolean flag = true;\n//        int count = 0;\n//        for (int i = 0; i < 100000000; i++) {\n//            flag = toBoolean("YES");\n//        }\n//        long end = System.currentTimeMillis();\n//        System.out.println((end - start) + " " + flag + " " + count);\n//    }\n    \n    /**\n     * <p>Converts a String to a Boolean throwing an exception if no match found.</p>\n     * \n     * <p>null is returned if there is no match.</p>\n     *\n     * <pre>\n     *   BooleanUtils.toBoolean("true", "true", "false")  = true\n     *   BooleanUtils.toBoolean("false", "true", "false") = false\n     * </pre>\n     *\n     * @param str  the String to check\n     * @param trueString  the String to match for <code>true</code>\n     *  (case sensitive), may be <code>null</code>\n     * @param falseString  the String to match for <code>false</code>\n     *  (case sensitive), may be <code>null</code>\n     * @return the boolean value of the string\n     * @throws IllegalArgumentException if the String doesn\'t match\n     */\n    public static boolean toBoolean(String str, String trueString, String falseString) {\n        if (str == null) {\n            if (trueString == null) {\n                return true;\n            } else if (falseString == null) {\n                return false;\n            }\n        } else if (str.equals(trueString)) {\n            return true;\n        } else if (str.equals(falseString)) {\n            return false;\n        }\n        // no match\n        throw new IllegalArgumentException("The String did not match either specified value");\n    }\n\n    // Boolean to String methods\n    //-----------------------------------------------------------------------\n    /**\n     * <p>Converts a Boolean to a String returning <code>\'true\'</code>,\n     * <code>\'false\'</code>, or <code>null</code>.</p>\n     * \n     * <pre>\n     *   BooleanUtils.toStringTrueFalse(Boolean.TRUE)  = "true"\n     *   BooleanUtils.toStringTrueFalse(Boolean.FALSE) = "false"\n     *   BooleanUtils.toStringTrueFalse(null)          = null;\n     * </pre>\n     *\n     * @param bool  the Boolean to check\n     * @return <code>\'true\'</code>, <code>\'false\'</code>,\n     *  or <code>null</code>\n     */\n    public static String toStringTrueFalse(Boolean bool) {\n        return toString(bool, "true", "false", null);\n    }\n    \n    /**\n     * <p>Converts a Boolean to a String returning <code>\'on\'</code>,\n     * <code>\'off\'</code>, or <code>null</code>.</p>\n     * \n     * <pre>\n     *   BooleanUtils.toStringOnOff(Boolean.TRUE)  = "on"\n     *   BooleanUtils.toStringOnOff(Boolean.FALSE) = "off"\n     *   BooleanUtils.toStringOnOff(null)          = null;\n     * </pre>\n     *\n     * @param bool  the Boolean to check\n     * @return <code>\'on\'</code>, <code>\'off\'</code>,\n     *  or <code>null</code>\n     */\n    public static String toStringOnOff(Boolean bool) {\n        return toString(bool, "on", "off", null);\n    }\n    \n    /**\n     * <p>Converts a Boolean to a String returning <code>\'yes\'</code>,\n     * <code>\'no\'</code>, or <code>null</code>.</p>\n     * \n     * <pre>\n     *   BooleanUtils.toStringYesNo(Boolean.TRUE)  = "yes"\n     *   BooleanUtils.toStringYesNo(Boolean.FALSE) = "no"\n     *   BooleanUtils.toStringYesNo(null)          = null;\n     * </pre>\n     *\n     * @param bool  the Boolean to check\n     * @return <code>\'yes\'</code>, <code>\'no\'</code>,\n     *  or <code>null</code>\n     */\n    public static String toStringYesNo(Boolean bool) {\n        return toString(bool, "yes", "no", null);\n    }\n    \n    /**\n     * <p>Converts a Boolean to a String returning one of the input Strings.</p>\n     * \n     * <pre>\n     *   BooleanUtils.toString(Boolean.TRUE, "true", "false", null)   = "true"\n     *   BooleanUtils.toString(Boolean.FALSE, "true", "false", null)  = "false"\n     *   BooleanUtils.toString(null, "true", "false", null)           = null;\n     * </pre>\n     *\n     * @param bool  the Boolean to check\n     * @param trueString  the String to return if <code>true</code>,\n     *  may be <code>null</code>\n     * @param falseString  the String to return if <code>false</code>,\n     *  may be <code>null</code>\n     * @param nullString  the String to return if <code>null</code>,\n     *  may be <code>null</code>\n     * @return one of the three input Strings\n     */\n    public static String toString(Boolean bool, String trueString, String falseString, String nullString) {\n        if (bool == null) {\n            return nullString;\n        }\n        return bool.booleanValue() ? trueString : falseString;\n    }\n    \n    // boolean to String methods\n    //-----------------------------------------------------------------------\n    /**\n     * <p>Converts a boolean to a String returning <code>\'true\'</code>\n     * or <code>\'false\'</code>.</p>\n     * \n     * <pre>\n     *   BooleanUtils.toStringTrueFalse(true)   = "true"\n     *   BooleanUtils.toStringTrueFalse(false)  = "false"\n     * </pre>\n     *\n     * @param bool  the Boolean to check\n     * @return <code>\'true\'</code>, <code>\'false\'</code>,\n     *  or <code>null</code>\n     */\n    public static String toStringTrueFalse(boolean bool) {\n        return toString(bool, "true", "false");\n    }\n    \n    /**\n     * <p>Converts a boolean to a String returning <code>\'on\'</code>\n     * or <code>\'off\'</code>.</p>\n     * \n     * <pre>\n     *   BooleanUtils.toStringOnOff(true)   = "on"\n     *   BooleanUtils.toStringOnOff(false)  = "off"\n     * </pre>\n     *\n     * @param bool  the Boolean to check\n     * @return <code>\'on\'</code>, <code>\'off\'</code>,\n     *  or <code>null</code>\n     */\n    public static String toStringOnOff(boolean bool) {\n        return toString(bool, "on", "off");\n    }\n    \n    /**\n     * <p>Converts a boolean to a String returning <code>\'yes\'</code>\n     * or <code>\'no\'</code>.</p>\n     * \n     * <pre>\n     *   BooleanUtils.toStringYesNo(true)   = "yes"\n     *   BooleanUtils.toStringYesNo(false)  = "no"\n     * </pre>\n     *\n     * @param bool  the Boolean to check\n     * @return <code>\'yes\'</code>, <code>\'no\'</code>,\n     *  or <code>null</code>\n     */\n    public static String toStringYesNo(boolean bool) {\n        return toString(bool, "yes", "no");\n    }\n    \n    /**\n     * <p>Converts a boolean to a String returning one of the input Strings.</p>\n     * \n     * <pre>\n     *   BooleanUtils.toString(true, "true", "false")   = "true"\n     *   BooleanUtils.toString(false, "true", "false")  = "false"\n     * </pre>\n     *\n     * @param bool  the Boolean to check\n     * @param trueString  the String to return if <code>true</code>,\n     *  may be <code>null</code>\n     * @param falseString  the String to return if <code>false</code>,\n     *  may be <code>null</code>\n     * @return one of the two input Strings\n     */\n    public static String toString(boolean bool, String trueString, String falseString) {\n        return bool ? trueString : falseString;\n    }\n    \n    // xor methods\n    // ----------------------------------------------------------------------\n    /**\n     * <p>Performs an xor on a set of booleans.</p>\n     *\n     * <pre>\n     *   BooleanUtils.xor(new boolean[] { true, true })   = false\n     *   BooleanUtils.xor(new boolean[] { false, false }) = false\n     *   BooleanUtils.xor(new boolean[] { true, false })  = true\n     * </pre>\n     *\n     * @param array  an array of <code>boolean<code>s\n     * @return <code>true</code> if the xor is successful.\n     * @throws IllegalArgumentException if <code>array</code> is <code>null</code>\n     * @throws IllegalArgumentException if <code>array</code> is empty.\n     */\n    public static boolean xor(boolean[] array) {\n        // Validates input\n        if (array == null) {\n            throw new IllegalArgumentException("The Array must not be null");\n        } else if (array.length == 0) {\n            throw new IllegalArgumentException("Array is empty");\n        }\n\n        // Loops through array, comparing each item\n        int trueCount = 0;\n        for (int i = 0; i < array.length; i++) {\n            // If item is true, and trueCount is < 1, increments count\n            // Else, xor fails\n            if (array[i]) {\n                if (trueCount < 1) {\n                    trueCount++;\n                } else {\n                    return false;\n                }\n            }\n        }\n\n        // Returns true if there was exactly 1 true item\n        return trueCount == 1;\n    }\n\n    /**\n     * <p>Performs an xor on an array of Booleans.</p>\n     * \n     * <pre>\n     *   BooleanUtils.xor(new Boolean[] { Boolean.TRUE, Boolean.TRUE })   = Boolean.FALSE\n     *   BooleanUtils.xor(new Boolean[] { Boolean.FALSE, Boolean.FALSE }) = Boolean.FALSE\n     *   BooleanUtils.xor(new Boolean[] { Boolean.TRUE, Boolean.FALSE })  = Boolean.TRUE\n     * </pre>\n     *\n     * @param array  an array of <code>Boolean<code>s\n     * @return <code>true</code> if the xor is successful.\n     * @throws IllegalArgumentException if <code>array</code> is <code>null</code>\n     * @throws IllegalArgumentException if <code>array</code> is empty.\n     * @throws IllegalArgumentException if <code>array</code> contains a <code>null</code>\n     */\n    public static Boolean xor(Boolean[] array) {\n        if (array == null) {\n            throw new IllegalArgumentException("The Array must not be null");\n        } else if (array.length == 0) {\n            throw new IllegalArgumentException("Array is empty");\n        }\n        boolean[] primitive = null;\n        try {\n            primitive = ArrayUtils.toPrimitive(array);\n        } catch (NullPointerException ex) {\n            throw new IllegalArgumentException("The array must not contain any null elements");\n        }\n        return xor(primitive) ? Boolean.TRUE : Boolean.FALSE;\n    }\n\n}', 'tree': 'cases SwitchStatementCase case Literal value 3_ter ^ ^ ^ ^ statements BlockStatement statements LocalVariableDeclaration type BasicType name char_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer MethodInvocation qualifier str_ter ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ ^ ^ ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc0 ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ then_statement BlockStatement statements ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier str_ter ^ ^ arguments Literal value 1_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier str_ter ^ ^ arguments Literal value 1_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier str_ter ^ ^ arguments Literal value 2_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier str_ter ^ ^ arguments Literal value 2_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc0 ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ then_statement BlockStatement statements ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier str_ter ^ ^ arguments Literal value 1_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier str_ter ^ ^ arguments Literal value 1_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier str_ter ^ ^ arguments Literal value 2_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier str_ter ^ ^ arguments Literal value 2_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ SwitchStatementCase case Literal value 2_ter ^ ^ ^ ^ statements BlockStatement statements LocalVariableDeclaration type BasicType name char_ter ^ ^ ^ ^ declarators VariableDeclarator name loc3 ^ ^ initializer MethodInvocation qualifier str_ter ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ ^ ^ ^ LocalVariableDeclaration type BasicType name char_ter ^ ^ ^ ^ declarators VariableDeclarator name loc4 ^ ^ initializer MethodInvocation qualifier str_ter ^ ^ arguments Literal value 1_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ ^ ^ ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc3 ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc3 ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc4 ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc4 ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ SwitchStatementCase case Literal value 2_ter ^ ^ ^ ^ statements BlockStatement statements LocalVariableDeclaration type BasicType name char_ter ^ ^ ^ ^ declarators VariableDeclarator name loc3 ^ ^ initializer MethodInvocation qualifier str_ter ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ ^ ^ ^ LocalVariableDeclaration type BasicType name char_ter ^ ^ ^ ^ declarators VariableDeclarator name loc4 ^ ^ initializer MethodInvocation qualifier str_ter ^ ^ arguments Literal value 1_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ ^ ^ ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc3 ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc3 ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc4 ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc4 ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ', 'prob': [0, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], 'mode': 0, 'line': 677, 'isa': False, 'fl_score': 1}]
before@0 batch0 x: 0: root ^  ; []
after@0 batch0 x: 0: root ^  ; []
copynode 0:  root modified ^ ^ ; ['root -> modified']
copynode 0:  root add ^ ^ ; ['root -> add']
copynode 0:  root return_type ^ ^ ; ['root -> return_type']
copynode 0:  root ReturnStatement ^ ^ ; ['root -> ReturnStatement']
copynode 0:  root ^ ; ['root -> End']
copynode 0:  root operator-operator ==_ter ^ ^  ^ ^ ; ['copy-operator']
copynode 0:  root StatementExpression ^ ^ ; ['root -> StatementExpression']
copynode 0:  root MemberReference-MemberReference member loc0 ^ ^ ^  ^ ^ ; ['copy-MemberReference']
copynode 0:  root IfStatement ^ ^ ; ['root -> IfStatement']
copynode 0:  root parameters ^ ^ ; ['root -> parameters']
before@1 batch0 x: -11.292105674743652: root parameters ^ ^  ; ['root -> parameters']
after@1 batch0 x: -11.292105674743652: root parameters ^ ^  ; ['root -> parameters']
copynode -0.3173117935657501:  root modified ^ IfStatement ^ ^ ; ['root -> modified', 'root -> IfStatement']
copynode -1.303678035736084:  root add ^ IfStatement ^ ^ ; ['root -> add', 'root -> IfStatement']
copynode -0.3173117935657501:  root modified ^ MemberReference-MemberReference member loc0 ^ ^ ^  ^ ^ ; ['root -> modified', 'copy-MemberReference']
copynode -0.3173117935657501:  root modified ^ ^ ; ['root -> modified', 'root -> End']
copynode -0.3173117935657501:  root modified ^ operator-operator ==_ter ^ ^  ^ ^ ; ['root -> modified', 'copy-operator']
copynode -1.303678035736084:  root add ^ StatementExpression ^ ^ ; ['root -> add', 'root -> StatementExpression']
copynode -1.303678035736084:  root add ^ ReturnStatement ^ ^ ; ['root -> add', 'root -> ReturnStatement']
copynode -1.303678035736084:  root add ^ BreakStatement_ter ^ ^ ; ['root -> add', 'root -> BreakStatement_ter']
copynode -0.3173117935657501:  root modified ^ BreakStatement_ter ^ ^ ; ['root -> modified', 'root -> BreakStatement_ter']
copynode -1.303678035736084:  root add ^ control ^ ^ ; ['root -> add', 'root -> control']
copynode -0.3173117935657501:  root modified ^ StatementExpression ^ ^ ; ['root -> modified', 'root -> StatementExpression']
copynode -0.3173117935657501:  root modified ^ control ^ ^ ; ['root -> modified', 'root -> control']
copynode -0.3173117935657501:  root modified ^ WhileStatement ^ ^ ; ['root -> modified', 'root -> WhileStatement']
copynode -1.303678035736084:  root add ^ LocalVariableDeclaration ^ ^ ; ['root -> add', 'root -> LocalVariableDeclaration']
copynode -0.3173117935657501:  root modified ^ Literal-Literal value <string>_ter ^ ^ ^  ^ ^ ; ['root -> modified', 'copy-Literal']
copynode -0.3173117935657501:  root modified ^ ContinueStatement_ter ^ ^ ; ['root -> modified', 'root -> ContinueStatement_ter']
copynode -1.303678035736084:  root add ^ ContinueStatement_ter ^ ^ ; ['root -> add', 'root -> ContinueStatement_ter']
copynode -1.303678035736084:  root add ^ WhileStatement ^ ^ ; ['root -> add', 'root -> WhileStatement']
copynode -1.303678035736084:  root add ^ ReturnStatement_ter ^ ^ ; ['root -> add', 'root -> ReturnStatement_ter']
copynode -1.303678035736084:  root add ^ operator-operator ==_ter ^ ^  ^ ^ ; ['root -> add', 'copy-operator']
copynode -9.814947128295898:  root ReturnStatement expression ^ ^ ^ ; ['root -> ReturnStatement', 'ReturnStatement -> expression']
copynode -9.722991943359375:  root return_type ReferenceType ^ ^ ^ ; ['root -> return_type', 'return_type -> ReferenceType']
copynode -10.723077774047852:  root MemberReference-MemberReference member loc0 ^ ^ ^  member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> member']
copynode -11.283041000366211:  root IfStatement condition ^ ^ ^ ; ['root -> IfStatement', 'IfStatement -> condition']
copynode -9.722991943359375:  root return_type BasicType ^ ^ ^ ; ['root -> return_type', 'return_type -> BasicType']
copynode -10.685283660888672:  root StatementExpression expression ^ ^ ^ ; ['root -> StatementExpression', 'StatementExpression -> expression']
copynode -11.292105674743652:  root parameters FormalParameter ^ ^ ^ ; ['root -> parameters', 'parameters -> FormalParameter']
copynode -10.502573013305664:  root operator-operator ==_ter ^ ^  <=_ter ^ ^ ^ ; ['copy-operator', 'operator -> <=_ter']
copynode -10.502573013305664:  root operator-operator ==_ter ^ ^  ==_ter ^ ^ ^ ; ['copy-operator', 'operator -> ==_ter']
copynode -10.502573013305664:  root operator-operator ==_ter ^ ^  >=_ter ^ ^ ^ ; ['copy-operator', 'operator -> >=_ter']
copynode -10.502573013305664:  root operator-operator ==_ter ^ ^  >_ter ^ ^ ^ ; ['copy-operator', 'operator -> >_ter']
copynode -9.814947128295898:  root ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc3 ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc3 ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc4 ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc4 ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> ReturnStatement', 'copy-ReturnStatement']
copynode -10.502573013305664:  root operator-operator ==_ter ^ ^  -_ter ^ ^ ^ ; ['copy-operator', 'operator -> -_ter']
copynode -10.502573013305664:  root operator-operator ==_ter ^ ^  <_ter ^ ^ ^ ; ['copy-operator', 'operator -> <_ter']
copynode -11.292105674743652:  root parameters ^ ^ ; ['root -> parameters', 'parameters -> End']
copynode -9.814947128295898:  root ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc3 ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc3 ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc4 ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc4 ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> ReturnStatement', 'copy-ReturnStatement']
copynode -9.814947128295898:  root ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier str_ter ^ ^ arguments Literal value 1_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier str_ter ^ ^ arguments Literal value 1_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier str_ter ^ ^ arguments Literal value 2_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier str_ter ^ ^ arguments Literal value 2_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> ReturnStatement', 'copy-ReturnStatement']
copynode -9.814947128295898:  root ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier str_ter ^ ^ arguments Literal value 1_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier str_ter ^ ^ arguments Literal value 1_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier str_ter ^ ^ arguments Literal value 2_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier str_ter ^ ^ arguments Literal value 2_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> ReturnStatement', 'copy-ReturnStatement']
copynode -10.502573013305664:  root operator-operator ==_ter ^ ^  !=_ter ^ ^ ^ ; ['copy-operator', 'operator -> !=_ter']
copynode -10.502573013305664:  root operator-operator ==_ter ^ ^  +_ter ^ ^ ^ ; ['copy-operator', 'operator -> +_ter']
copynode -10.723077774047852:  root MemberReference-MemberReference member loc0 ^ ^ ^  prefix_operators ^ member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> prefix_operators member']
copynode -10.502573013305664:  root operator-operator ==_ter ^ ^  *_ter ^ ^ ^ ; ['copy-operator', 'operator -> *_ter']
copynode -10.502573013305664:  root operator-operator ==_ter ^ ^  /_ter ^ ^ ^ ; ['copy-operator', 'operator -> /_ter']
copynode -11.292105674743652:  root parameters MemberReference ^ ^ ^ ; ['root -> parameters', 'parameters -> MemberReference']
copynode -10.723077774047852:  root MemberReference-MemberReference member loc0 ^ ^ ^  qualifier ^ member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> qualifier member']
copynode -10.723077774047852:  root MemberReference-MemberReference member loc0 ^ ^ ^  postfix_operators ^ member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> postfix_operators member']
copynode -11.292105674743652:  root parameters InferredFormalParameter ^ ^ ^ ; ['root -> parameters', 'parameters -> InferredFormalParameter']
copynode -10.723077774047852:  root MemberReference-MemberReference member loc0 ^ ^ ^  selectors ^ member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> selectors member']
copynode -10.723077774047852:  root MemberReference-MemberReference member loc0 ^ ^ ^  prefix_operators ^ qualifier ^ member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> prefix_operators qualifier member']
copynode -11.283041000366211:  root IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc0 ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ then_statement BlockStatement statements ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier str_ter ^ ^ arguments Literal value 1_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier str_ter ^ ^ arguments Literal value 1_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier str_ter ^ ^ arguments Literal value 2_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier str_ter ^ ^ arguments Literal value 2_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> IfStatement', 'copy-IfStatement']
copynode -11.283041000366211:  root IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc0 ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ then_statement BlockStatement statements ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier str_ter ^ ^ arguments Literal value 1_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier str_ter ^ ^ arguments Literal value 1_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier str_ter ^ ^ arguments Literal value 2_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier str_ter ^ ^ arguments Literal value 2_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> IfStatement', 'copy-IfStatement']
copynode -10.723077774047852:  root MemberReference-MemberReference member loc0 ^ ^ ^  qualifier ^ selectors ^ member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> qualifier selectors member']
copynode -10.723077774047852:  root MemberReference-MemberReference member loc0 ^ ^ ^  prefix_operators ^ selectors ^ member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> prefix_operators selectors member']
copynode -11.292105674743652:  root parameters Cast ^ ^ ^ ; ['root -> parameters', 'parameters -> Cast']
copynode -10.685283660888672:  root StatementExpression unknown ^ ^ ^ ; ['root -> StatementExpression', 'start -> unknown']
copynode -10.723077774047852:  root MemberReference-MemberReference member loc0 ^ ^ ^  postfix_operators ^ selectors ^ member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> postfix_operators selectors member']
copynode -10.723077774047852:  root MemberReference-MemberReference member loc0 ^ ^ ^  postfix_operators ^ qualifier ^ member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> postfix_operators qualifier member']
copynode -11.292105674743652:  root parameters loc0 ^ ^ ^ ; ['root -> parameters', 'copy-VariableDeclarator']
copynode -11.283041000366211:  root IfStatement condition ^ then_statement ^ ^ ^ ; ['root -> IfStatement', 'IfStatement -> condition then_statement']
copynode -11.292105674743652:  root parameters loc3 ^ ^ ^ ; ['root -> parameters', 'copy-VariableDeclarator']
copynode -11.292105674743652:  root parameters loc4 ^ ^ ^ ; ['root -> parameters', 'copy-VariableDeclarator']
copynode -11.292105674743652:  root parameters loc3 ^ ^ ^ ; ['root -> parameters', 'copy-VariableDeclarator']
copynode -11.292105674743652:  root parameters loc4 ^ ^ ^ ; ['root -> parameters', 'copy-VariableDeclarator']
copynode -11.283041000366211:  root IfStatement unknown ^ ^ ^ ; ['root -> IfStatement', 'start -> unknown']
copynode -10.685283660888672:  root StatementExpression loc3 ^ ^ ^ ; ['root -> StatementExpression', 'copy-VariableDeclarator']
copynode -10.685283660888672:  root StatementExpression loc4 ^ ^ ^ ; ['root -> StatementExpression', 'copy-VariableDeclarator']
copynode -9.722991943359375:  root return_type unknown ^ ^ ^ ; ['root -> return_type', 'start -> unknown']
copynode -11.283041000366211:  root IfStatement condition ^ then_statement ^ else_statement ^ ^ ^ ; ['root -> IfStatement', 'IfStatement -> condition then_statement else_statement']
copynode -10.685283660888672:  root StatementExpression loc3 ^ ^ ^ ; ['root -> StatementExpression', 'copy-VariableDeclarator']
copynode -9.814947128295898:  root ReturnStatement unknown ^ ^ ^ ; ['root -> ReturnStatement', 'start -> unknown']
copynode -10.685283660888672:  root StatementExpression loc4 ^ ^ ^ ; ['root -> StatementExpression', 'copy-VariableDeclarator']
copynode -10.685283660888672:  root StatementExpression loc0 ^ ^ ^ ; ['root -> StatementExpression', 'copy-VariableDeclarator']
copynode -9.722991943359375:  root return_type loc3 ^ ^ ^ ; ['root -> return_type', 'copy-VariableDeclarator']
copynode -9.722991943359375:  root return_type loc4 ^ ^ ^ ; ['root -> return_type', 'copy-VariableDeclarator']
copynode -9.722991943359375:  root return_type loc0 ^ ^ ^ ; ['root -> return_type', 'copy-VariableDeclarator']
copynode -9.722991943359375:  root return_type loc3 ^ ^ ^ ; ['root -> return_type', 'copy-VariableDeclarator']
copynode -9.722991943359375:  root return_type loc4 ^ ^ ^ ; ['root -> return_type', 'copy-VariableDeclarator']
copynode -10.685283660888672:  root StatementExpression label ^ expression ^ ^ ^ ; ['root -> StatementExpression', 'StatementExpression -> label expression']
copynode -9.814947128295898:  root ReturnStatement loc3 ^ ^ ^ ; ['root -> ReturnStatement', 'copy-VariableDeclarator']
copynode -9.814947128295898:  root ReturnStatement loc4 ^ ^ ^ ; ['root -> ReturnStatement', 'copy-VariableDeclarator']
copynode -9.814947128295898:  root ReturnStatement loc3 ^ ^ ^ ; ['root -> ReturnStatement', 'copy-VariableDeclarator']
copynode -9.814947128295898:  root ReturnStatement loc4 ^ ^ ^ ; ['root -> ReturnStatement', 'copy-VariableDeclarator']
copynode -11.283041000366211:  root IfStatement loc3 ^ ^ ^ ; ['root -> IfStatement', 'copy-VariableDeclarator']
copynode -11.283041000366211:  root IfStatement loc3 ^ ^ ^ ; ['root -> IfStatement', 'copy-VariableDeclarator']
copynode -11.283041000366211:  root IfStatement loc4 ^ ^ ^ ; ['root -> IfStatement', 'copy-VariableDeclarator']
copynode -11.283041000366211:  root IfStatement loc4 ^ ^ ^ ; ['root -> IfStatement', 'copy-VariableDeclarator']
before@2 batch0 x: -34.24082374572754: root IfStatement loc4 ^ ^ ^  ; ['root -> IfStatement', 'copy-VariableDeclarator']
after@2 batch0 x: -34.24082374572754: root IfStatement loc4 ^ ^ ^  ; ['root -> IfStatement', 'copy-VariableDeclarator']
copynode -0.9235974848270416:  root modified ^ IfStatement condition ^ ^ ^ ; ['root -> modified', 'root -> IfStatement', 'IfStatement -> condition']
copynode -1.7222158014774323:  root add ^ IfStatement condition ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition']
copynode -2.0810978710651398:  root modified ^ MemberReference-MemberReference member loc0 ^ ^ ^  member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member']
copynode -2.3989465534687042:  root modified ^ operator-operator ==_ter ^ ^  >=_ter ^ ^ ^ ; ['root -> modified', 'copy-operator', 'operator -> >=_ter']
copynode -2.3989465534687042:  root modified ^ operator-operator ==_ter ^ ^  ==_ter ^ ^ ^ ; ['root -> modified', 'copy-operator', 'operator -> ==_ter']
copynode -3.513042688369751:  root add ^ ReturnStatement expression ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'ReturnStatement -> expression']
copynode -3.213817834854126:  root add ^ StatementExpression expression ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression']
copynode -2.3989465534687042:  root modified ^ operator-operator ==_ter ^ ^  !=_ter ^ ^ ^ ; ['root -> modified', 'copy-operator', 'operator -> !=_ter']
copynode -2.3989465534687042:  root modified ^ operator-operator ==_ter ^ ^  <=_ter ^ ^ ^ ; ['root -> modified', 'copy-operator', 'operator -> <=_ter']
copynode -2.3989465534687042:  root modified ^ operator-operator ==_ter ^ ^  >_ter ^ ^ ^ ; ['root -> modified', 'copy-operator', 'operator -> >_ter']
copynode -4.585907220840454:  root add ^ BreakStatement_ter ^ ^ ; ['root -> add', 'root -> BreakStatement_ter', 'root -> End']
copynode -4.748268634080887:  root modified ^ BreakStatement_ter ^ ^ ; ['root -> modified', 'root -> BreakStatement_ter', 'root -> End']
copynode -4.946714639663696:  root add ^ control EnhancedForControl ^ ^ ^ ; ['root -> add', 'root -> control', 'control -> EnhancedForControl']
copynode -3.513042688369751:  root add ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc3 ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc3 ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc4 ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc4 ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'copy-ReturnStatement']
copynode -2.3989465534687042:  root modified ^ operator-operator ==_ter ^ ^  <_ter ^ ^ ^ ; ['root -> modified', 'copy-operator', 'operator -> <_ter']
copynode -2.0810978710651398:  root modified ^ MemberReference-MemberReference member loc0 ^ ^ ^  prefix_operators ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> prefix_operators member']
copynode -2.0810978710651398:  root modified ^ MemberReference-MemberReference member loc0 ^ ^ ^  qualifier ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member']
copynode -3.513042688369751:  root add ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc3 ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc3 ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc4 ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc4 ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'copy-ReturnStatement']
copynode -6.219585448503494:  root modified ^ control EnhancedForControl ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> EnhancedForControl']
copynode -6.342247515916824:  root modified ^ WhileStatement condition ^ ^ ^ ; ['root -> modified', 'root -> WhileStatement', 'WhileStatement -> condition']
copynode -6.070332080125809:  root modified ^ StatementExpression expression ^ ^ ^ ; ['root -> modified', 'root -> StatementExpression', 'StatementExpression -> expression']
copynode -6.429851531982422:  root add ^ LocalVariableDeclaration type ^ declarators ^ ^ ^ ; ['root -> add', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators']
copynode -3.513042688369751:  root add ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier str_ter ^ ^ arguments Literal value 1_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier str_ter ^ ^ arguments Literal value 1_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier str_ter ^ ^ arguments Literal value 2_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier str_ter ^ ^ arguments Literal value 2_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'copy-ReturnStatement']
copynode -3.513042688369751:  root add ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier str_ter ^ ^ arguments Literal value 1_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier str_ter ^ ^ arguments Literal value 1_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier str_ter ^ ^ arguments Literal value 2_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier str_ter ^ ^ arguments Literal value 2_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'copy-ReturnStatement']
copynode -6.945794612169266:  root modified ^ ContinueStatement_ter ^ ^ ; ['root -> modified', 'root -> ContinueStatement_ter', 'root -> End']
copynode -7.01373291015625:  root add ^ ContinueStatement_ter ^ ^ ; ['root -> add', 'root -> ContinueStatement_ter', 'root -> End']
copynode -6.727501422166824:  root modified ^ Literal-Literal value <string>_ter ^ ^ ^  value ^ ^ ^ ; ['root -> modified', 'copy-Literal', 'Literal -> value']
copynode -7.148193359375:  root add ^ WhileStatement condition ^ ^ ^ ; ['root -> add', 'root -> WhileStatement', 'WhileStatement -> condition']
copynode -2.0810978710651398:  root modified ^ MemberReference-MemberReference member loc0 ^ ^ ^  postfix_operators ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> postfix_operators member']
copynode -7.810701370239258:  root add ^ ReturnStatement_ter ^ ^ ; ['root -> add', 'root -> ReturnStatement_ter', 'root -> End']
copynode -4.946714639663696:  root add ^ control ForControl ^ ^ ^ ; ['root -> add', 'root -> control', 'control -> ForControl']
copynode -2.0810978710651398:  root modified ^ MemberReference-MemberReference member loc0 ^ ^ ^  selectors ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> selectors member']
copynode -6.727501422166824:  root modified ^ Literal-Literal value <string>_ter ^ ^ ^  prefix_operators ^ value ^ ^ ^ ; ['root -> modified', 'copy-Literal', 'Literal -> prefix_operators value']
copynode -2.3989465534687042:  root modified ^ operator-operator ==_ter ^ ^  &&_ter ^ ^ ^ ; ['root -> modified', 'copy-operator', 'operator -> &&_ter']
copynode -6.727501422166824:  root modified ^ Literal-Literal value <string>_ter ^ ^ ^  selectors ^ value ^ ^ ^ ; ['root -> modified', 'copy-Literal', 'Literal -> selectors value']
copynode -2.3989465534687042:  root modified ^ operator-operator ==_ter ^ ^  &_ter ^ ^ ^ ; ['root -> modified', 'copy-operator', 'operator -> &_ter']
copynode -6.429851531982422:  root add ^ LocalVariableDeclaration type BasicType name char_ter ^ ^ ^ ^ declarators VariableDeclarator name loc3 ^ ^ initializer MethodInvocation qualifier str_ter ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> LocalVariableDeclaration', 'copy-LocalVariableDeclaration']
copynode -2.3989465534687042:  root modified ^ operator-operator ==_ter ^ ^  -_ter ^ ^ ^ ; ['root -> modified', 'copy-operator', 'operator -> -_ter']
copynode -2.3989465534687042:  root modified ^ operator-operator ==_ter ^ ^  >>>_ter ^ ^ ^ ; ['root -> modified', 'copy-operator', 'operator -> >>>_ter']
copynode -6.429851531982422:  root add ^ LocalVariableDeclaration type BasicType name char_ter ^ ^ ^ ^ declarators VariableDeclarator name loc4 ^ ^ initializer MethodInvocation qualifier str_ter ^ ^ arguments Literal value 1_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> LocalVariableDeclaration', 'copy-LocalVariableDeclaration']
copynode -6.727501422166824:  root modified ^ Literal-Literal value <string>_ter ^ ^ ^  prefix_operators ^ selectors ^ value ^ ^ ^ ; ['root -> modified', 'copy-Literal', 'Literal -> prefix_operators selectors value']
copynode -6.429851531982422:  root add ^ LocalVariableDeclaration type BasicType name char_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer MethodInvocation qualifier str_ter ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> LocalVariableDeclaration', 'copy-LocalVariableDeclaration']
copynode -4.946714639663696:  root add ^ control ForControl_ter ^ ^ ^ ; ['root -> add', 'root -> control', 'control -> ForControl_ter']
copynode -6.429851531982422:  root add ^ LocalVariableDeclaration type BasicType name char_ter ^ ^ ^ ^ declarators VariableDeclarator name loc3 ^ ^ initializer MethodInvocation qualifier str_ter ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> LocalVariableDeclaration', 'copy-LocalVariableDeclaration']
copynode -8.483633041381836:  root add ^ operator-operator ==_ter ^ ^  >_ter ^ ^ ^ ; ['root -> add', 'copy-operator', 'operator -> >_ter']
copynode -9.969884380698204:  root ReturnStatement expression BinaryOperation ^ ^ ^ ^ ; ['root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation']
copynode -8.483633041381836:  root add ^ operator-operator ==_ter ^ ^  <=_ter ^ ^ ^ ; ['root -> add', 'copy-operator', 'operator -> <=_ter']
copynode -6.429851531982422:  root add ^ LocalVariableDeclaration type BasicType name char_ter ^ ^ ^ ^ declarators VariableDeclarator name loc4 ^ ^ initializer MethodInvocation qualifier str_ter ^ ^ arguments Literal value 1_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> LocalVariableDeclaration', 'copy-LocalVariableDeclaration']
copynode -8.483633041381836:  root add ^ operator-operator ==_ter ^ ^  ==_ter ^ ^ ^ ; ['root -> add', 'copy-operator', 'operator -> ==_ter']
copynode -8.483633041381836:  root add ^ operator-operator ==_ter ^ ^  >=_ter ^ ^ ^ ; ['root -> add', 'copy-operator', 'operator -> >=_ter']
copynode -4.585907220840454:  root add ^ BreakStatement_ter ^ BreakStatement_ter ^ ^ ; ['root -> add', 'root -> BreakStatement_ter', 'root -> BreakStatement_ter']
copynode -8.483633041381836:  root add ^ operator-operator ==_ter ^ ^  <_ter ^ ^ ^ ; ['root -> add', 'copy-operator', 'operator -> <_ter']
copynode -1.7222158014774323:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc0 ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ then_statement BlockStatement statements ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier str_ter ^ ^ arguments Literal value 1_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier str_ter ^ ^ arguments Literal value 1_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier str_ter ^ ^ arguments Literal value 2_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier str_ter ^ ^ arguments Literal value 2_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'copy-IfStatement']
copynode -0.9235974848270416:  root modified ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc0 ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ then_statement BlockStatement statements ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier str_ter ^ ^ arguments Literal value 1_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier str_ter ^ ^ arguments Literal value 1_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier str_ter ^ ^ arguments Literal value 2_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier str_ter ^ ^ arguments Literal value 2_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> IfStatement', 'copy-IfStatement']
copynode -1.7222158014774323:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc0 ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ then_statement BlockStatement statements ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier str_ter ^ ^ arguments Literal value 1_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier str_ter ^ ^ arguments Literal value 1_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier str_ter ^ ^ arguments Literal value 2_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier str_ter ^ ^ arguments Literal value 2_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'copy-IfStatement']
copynode -4.585907220840454:  root add ^ BreakStatement_ter ^ StatementExpression ^ ^ ; ['root -> add', 'root -> BreakStatement_ter', 'root -> StatementExpression']
copynode -4.585907220840454:  root add ^ BreakStatement_ter ^ IfStatement ^ ^ ; ['root -> add', 'root -> BreakStatement_ter', 'root -> IfStatement']
copynode -10.78088154271245:  root MemberReference-MemberReference member loc0 ^ ^ ^  member loc0 ^ ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> member', 'member -> loc0']
copynode -0.9235974848270416:  root modified ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc0 ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ then_statement BlockStatement statements ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier str_ter ^ ^ arguments Literal value 1_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier str_ter ^ ^ arguments Literal value 1_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier str_ter ^ ^ arguments Literal value 2_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier str_ter ^ ^ arguments Literal value 2_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> IfStatement', 'copy-IfStatement']
copynode -4.585907220840454:  root add ^ BreakStatement_ter ^ ReturnStatement ^ ^ ; ['root -> add', 'root -> BreakStatement_ter', 'root -> ReturnStatement']
copynode -2.0810978710651398:  root modified ^ MemberReference-MemberReference member loc0 ^ ^ ^  prefix_operators ^ qualifier ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> prefix_operators qualifier member']
copynode -8.483633041381836:  root add ^ operator-operator ==_ter ^ ^  !=_ter ^ ^ ^ ; ['root -> add', 'copy-operator', 'operator -> !=_ter']
copynode -6.429851531982422:  root add ^ LocalVariableDeclaration modifiers ^ type ^ declarators ^ ^ ^ ; ['root -> add', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators']
copynode -6.219585448503494:  root modified ^ control ForControl ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> ForControl']
copynode -11.283554387744516:  root IfStatement condition BinaryOperation ^ ^ ^ ^ ; ['root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation']
copynode -11.424962937831879:  root StatementExpression expression MethodInvocation ^ ^ ^ ^ ; ['root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation']
copynode -8.483633041381836:  root add ^ operator-operator ==_ter ^ ^  -_ter ^ ^ ^ ; ['root -> add', 'copy-operator', 'operator -> -_ter']
copynode -4.585907220840454:  root add ^ BreakStatement_ter ^ ContinueStatement_ter ^ ^ ; ['root -> add', 'root -> BreakStatement_ter', 'root -> ContinueStatement_ter']
copynode -2.0810978710651398:  root modified ^ MemberReference-MemberReference member loc0 ^ ^ ^  prefix_operators ^ selectors ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> prefix_operators selectors member']
copynode -2.0810978710651398:  root modified ^ MemberReference-MemberReference member loc0 ^ ^ ^  qualifier ^ selectors ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier selectors member']
copynode -6.727501422166824:  root modified ^ Literal-Literal value <string>_ter ^ ^ ^  value 2_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-Literal', 'copy-Literal']
copynode -6.727501422166824:  root modified ^ Literal-Literal value <string>_ter ^ ^ ^  value 1_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-Literal', 'copy-Literal']
copynode -6.727501422166824:  root modified ^ Literal-Literal value <string>_ter ^ ^ ^  value 2_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-Literal', 'copy-Literal']
copynode -6.727501422166824:  root modified ^ Literal-Literal value <string>_ter ^ ^ ^  value 1_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-Literal', 'copy-Literal']
copynode -8.483633041381836:  root add ^ operator-operator ==_ter ^ ^  +_ter ^ ^ ^ ; ['root -> add', 'copy-operator', 'operator -> +_ter']
copynode -6.727501422166824:  root modified ^ Literal-Literal value <string>_ter ^ ^ ^  value 1_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-Literal', 'copy-Literal']
copynode -6.727501422166824:  root modified ^ Literal-Literal value <string>_ter ^ ^ ^  value 1_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-Literal', 'copy-Literal']
copynode -4.748268634080887:  root modified ^ BreakStatement_ter ^ StatementExpression ^ ^ ; ['root -> modified', 'root -> BreakStatement_ter', 'root -> StatementExpression']
copynode -11.532864719629288:  root parameters FormalParameter type ^ name ^ ^ ^ ^ ; ['root -> parameters', 'parameters -> FormalParameter', 'FormalParameter -> type name']
copynode -8.483633041381836:  root add ^ operator-operator ==_ter ^ ^  &_ter ^ ^ ^ ; ['root -> add', 'copy-operator', 'operator -> &_ter']
copynode -9.969884380698204:  root ReturnStatement expression MemberReference ^ ^ ^ ^ ; ['root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MemberReference']
copynode -11.532864719629288:  root parameters FormalParameter modifiers ^ type ^ name ^ ^ ^ ^ ; ['root -> parameters', 'parameters -> FormalParameter', 'FormalParameter -> modifiers type name']
copynode -11.305564641952515:  root return_type BasicType name ^ ^ ^ ^ ; ['root -> return_type', 'return_type -> BasicType', 'BasicType -> name']
copynode -11.305564641952515:  root return_type BasicType name char_ter ^ ^ ^ ^ ^ ; ['root -> return_type', 'return_type -> BasicType', 'copy-BasicType']
copynode -11.305564641952515:  root return_type BasicType name char_ter ^ ^ ^ ^ ^ ; ['root -> return_type', 'return_type -> BasicType', 'copy-BasicType']
copynode -11.305564641952515:  root return_type BasicType name char_ter ^ ^ ^ ^ ^ ; ['root -> return_type', 'return_type -> BasicType', 'copy-BasicType']
copynode -12.613842725753784:  root ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc3 ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc3 ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc4 ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc4 ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> ReturnStatement', 'copy-ReturnStatement', 'root -> End']
copynode -8.483633041381836:  root add ^ operator-operator ==_ter ^ ^  *_ter ^ ^ ^ ; ['root -> add', 'copy-operator', 'operator -> *_ter']
copynode -4.585907220840454:  root add ^ BreakStatement_ter ^ control ^ ^ ; ['root -> add', 'root -> BreakStatement_ter', 'root -> control']
copynode -10.0323446393013:  root return_type ReferenceType name ^ arguments ^ ^ ^ ^ ; ['root -> return_type', 'return_type -> ReferenceType', 'ReferenceType -> name arguments']
copynode -7.01373291015625:  root add ^ ContinueStatement_ter ^ IfStatement ^ ^ ; ['root -> add', 'root -> ContinueStatement_ter', 'root -> IfStatement']
copynode -11.283554387744516:  root IfStatement condition MethodInvocation ^ ^ ^ ^ ; ['root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation']
copynode -11.982337713241577:  root operator-operator ==_ter ^ ^  <=_ter ^ ^ ^ ; ['copy-operator', 'operator -> <=_ter', 'root -> End']
copynode -10.78088154271245:  root MemberReference-MemberReference member loc0 ^ ^ ^  member unknown ^ ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> member', 'start -> unknown']
copynode -4.585907220840454:  root add ^ BreakStatement_ter ^ ReturnStatement_ter ^ ^ ; ['root -> add', 'root -> BreakStatement_ter', 'root -> ReturnStatement_ter']
copynode -10.0323446393013:  root return_type ReferenceType name ^ ^ ^ ^ ; ['root -> return_type', 'return_type -> ReferenceType', 'ReferenceType -> name']
copynode -9.969884380698204:  root ReturnStatement expression Literal ^ ^ ^ ^ ; ['root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> Literal']
copynode -7.810701370239258:  root add ^ ReturnStatement_ter ^ StatementExpression ^ ^ ; ['root -> add', 'root -> ReturnStatement_ter', 'root -> StatementExpression']
before@3 batch0 x: -13.337429523468018: root add ^ ReturnStatement_ter ^ StatementExpression ^ ^  ; ['root -> add', 'root -> ReturnStatement_ter', 'root -> StatementExpression']
after@3 batch0 x: -13.337429523468018: root add ^ ReturnStatement_ter ^ StatementExpression ^ ^  ; ['root -> add', 'root -> ReturnStatement_ter', 'root -> StatementExpression']
copynode -0.9238720018765889:  root modified ^ IfStatement condition BinaryOperation ^ ^ ^ ^ ; ['root -> modified', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation']
copynode -1.7227138626622036:  root add ^ IfStatement condition BinaryOperation ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation']
copynode -2.13207770511508:  root modified ^ MemberReference-MemberReference member loc0 ^ ^ ^  member loc0 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> loc0']
copynode -3.6083636581897736:  root modified ^ operator-operator ==_ter ^ ^  >=_ter ^ ^ ^ ; ['root -> modified', 'copy-operator', 'operator -> >=_ter', 'root -> End']
copynode -0.9238720018765889:  root modified ^ IfStatement condition MethodInvocation ^ ^ ^ ^ ; ['root -> modified', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation']
copynode -1.7227138626622036:  root add ^ IfStatement condition MethodInvocation ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation']
copynode -3.8281035721302032:  root modified ^ operator-operator ==_ter ^ ^  ==_ter ^ ^ ^ ; ['root -> modified', 'copy-operator', 'operator -> ==_ter', 'root -> End']
copynode -3.8687665462493896:  root add ^ ReturnStatement expression BinaryOperation ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation']
copynode -4.205043345689774:  root modified ^ operator-operator ==_ter ^ ^  !=_ter ^ ^ ^ ; ['root -> modified', 'copy-operator', 'operator -> !=_ter', 'root -> End']
copynode -4.000917494297028:  root add ^ StatementExpression expression MethodInvocation ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation']
copynode -1.7227138626622036:  root add ^ IfStatement condition MemberReference ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference']
copynode -4.395322352647781:  root modified ^ operator-operator ==_ter ^ ^  <=_ter ^ ^ ^ ; ['root -> modified', 'copy-operator', 'operator -> <=_ter', 'root -> End']
copynode -4.453532487154007:  root modified ^ operator-operator ==_ter ^ ^  >_ter ^ ^ ^ ; ['root -> modified', 'copy-operator', 'operator -> >_ter', 'root -> End']
copynode -2.13207770511508:  root modified ^ MemberReference-MemberReference member loc0 ^ ^ ^  member unknown ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'start -> unknown']
copynode -2.13207770511508:  root modified ^ MemberReference-MemberReference member loc0 ^ ^ ^  member loc1 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> loc1']
copynode -5.255691260099411:  root add ^ control EnhancedForControl var ^ iterable ^ ^ ^ ^ ; ['root -> add', 'root -> control', 'control -> EnhancedForControl', 'EnhancedForControl -> var iterable']
copynode -5.443264961242676:  root add ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc3 ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc3 ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc4 ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc4 ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'copy-ReturnStatement', 'root -> End']
copynode -0.9238720018765889:  root modified ^ IfStatement condition MemberReference ^ ^ ^ ^ ; ['root -> modified', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference']
copynode -1.7227138626622036:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc0 ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'copy-condition']
copynode -3.8687665462493896:  root add ^ ReturnStatement expression MemberReference ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MemberReference']
copynode -5.99060395359993:  root modified ^ operator-operator ==_ter ^ ^  <_ter ^ ^ ^ ; ['root -> modified', 'copy-operator', 'operator -> <_ter', 'root -> End']
copynode -4.000917494297028:  root add ^ StatementExpression expression MemberReference ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MemberReference']
copynode -6.172896385192871:  root add ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc3 ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc3 ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc4 ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc4 ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'copy-ReturnStatement', 'root -> End']
copynode -6.24783493950963:  root modified ^ control EnhancedForControl var ^ iterable ^ ^ ^ ^ ; ['root -> modified', 'root -> control', 'control -> EnhancedForControl', 'EnhancedForControl -> var iterable']
copynode -4.000917494297028:  root add ^ StatementExpression expression Assignment ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment']
copynode -6.347611692268401:  root modified ^ WhileStatement condition BinaryOperation ^ ^ ^ ^ ; ['root -> modified', 'root -> WhileStatement', 'WhileStatement -> condition', 'condition -> BinaryOperation']
copynode -6.405408620834351:  root modified ^ StatementExpression expression MethodInvocation ^ ^ ^ ^ ; ['root -> modified', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation']
copynode -3.8687665462493896:  root add ^ ReturnStatement expression Literal ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> Literal']
copynode -5.994227916002274:  root modified ^ MemberReference-MemberReference member loc0 ^ ^ ^  prefix_operators -_ter ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> prefix_operators member', 'prefix_operators -> -_ter']
copynode -6.048812419176102:  root modified ^ MemberReference-MemberReference member loc0 ^ ^ ^  qualifier loc0 ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'qualifier -> loc0']
copynode -6.633953094482422:  root add ^ LocalVariableDeclaration type BasicType ^ ^ declarators ^ ^ ^ ; ['root -> add', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType']
copynode -6.694443702697754:  root add ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier str_ter ^ ^ arguments Literal value 1_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier str_ter ^ ^ arguments Literal value 1_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier str_ter ^ ^ arguments Literal value 2_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier str_ter ^ ^ arguments Literal value 2_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'copy-ReturnStatement', 'root -> End']
copynode -6.694573402404785:  root add ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier str_ter ^ ^ arguments Literal value 1_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier str_ter ^ ^ arguments Literal value 1_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier str_ter ^ ^ arguments Literal value 2_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier str_ter ^ ^ arguments Literal value 2_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'copy-ReturnStatement', 'root -> End']
copynode -0.9238720018765889:  root modified ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc0 ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> IfStatement', 'IfStatement -> condition', 'copy-condition']
copynode -5.994227916002274:  root modified ^ MemberReference-MemberReference member loc0 ^ ^ ^  prefix_operators !_ter ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> prefix_operators member', 'prefix_operators -> !_ter']
copynode -2.13207770511508:  root modified ^ MemberReference-MemberReference member loc0 ^ ^ ^  member par0 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> par0']
copynode -7.167654123157263:  root add ^ WhileStatement condition BinaryOperation ^ ^ ^ ^ ; ['root -> add', 'root -> WhileStatement', 'WhileStatement -> condition', 'condition -> BinaryOperation']
copynode -7.139741122722626:  root modified ^ Literal-Literal value <string>_ter ^ ^ ^  value 0_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-Literal', 'Literal -> value', 'value -> 0_ter']
copynode -3.8687665462493896:  root add ^ ReturnStatement expression MethodInvocation ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation']
copynode -7.327006608247757:  root modified ^ MemberReference-MemberReference member loc0 ^ ^ ^  postfix_operators ++_ter ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> postfix_operators member', 'postfix_operators -> ++_ter']
copynode -2.13207770511508:  root modified ^ MemberReference-MemberReference member loc0 ^ ^ ^  member loc3 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> loc3']
copynode -1.7227138626622036:  root add ^ IfStatement condition Literal ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> Literal']
copynode -2.13207770511508:  root modified ^ MemberReference-MemberReference member loc0 ^ ^ ^  member loc4 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> loc4']
copynode -2.13207770511508:  root modified ^ MemberReference-MemberReference member loc0 ^ ^ ^  member loc3 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'copy-member']
copynode -7.139741122722626:  root modified ^ Literal-Literal value <string>_ter ^ ^ ^  value null_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-Literal', 'Literal -> value', 'value -> null_ter']
copynode -2.13207770511508:  root modified ^ MemberReference-MemberReference member loc0 ^ ^ ^  member par1 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> par1']
copynode -7.327006608247757:  root modified ^ MemberReference-MemberReference member loc0 ^ ^ ^  postfix_operators --_ter ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> postfix_operators member', 'postfix_operators -> --_ter']
copynode -8.731858521699905:  root modified ^ Literal-Literal value <string>_ter ^ ^ ^  prefix_operators -_ter ^ ^ value ^ ^ ^ ; ['root -> modified', 'copy-Literal', 'Literal -> prefix_operators value', 'prefix_operators -> -_ter']
copynode -2.13207770511508:  root modified ^ MemberReference-MemberReference member loc0 ^ ^ ^  member loc3 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'copy-member']
copynode -6.048812419176102:  root modified ^ MemberReference-MemberReference member loc0 ^ ^ ^  qualifier str_ter ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'copy-qualifier']
copynode -5.443264961242676:  root add ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc3 ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc3 ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc4 ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc4 ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ReturnStatement ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'copy-ReturnStatement', 'root -> ReturnStatement']
copynode -2.13207770511508:  root modified ^ MemberReference-MemberReference member loc0 ^ ^ ^  member charAt_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'copy-member']
copynode -5.994227916002274:  root modified ^ MemberReference-MemberReference member loc0 ^ ^ ^  prefix_operators ++_ter ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> prefix_operators member', 'prefix_operators -> ++_ter']
copynode -8.419198781251907:  root modified ^ MemberReference-MemberReference member loc0 ^ ^ ^  selectors ArraySelector ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> selectors member', 'selectors -> ArraySelector']
copynode -6.048812419176102:  root modified ^ MemberReference-MemberReference member loc0 ^ ^ ^  qualifier str_ter ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'copy-qualifier']
copynode -7.167654123157263:  root add ^ WhileStatement condition MemberReference ^ ^ ^ ^ ; ['root -> add', 'root -> WhileStatement', 'WhileStatement -> condition', 'condition -> MemberReference']
copynode -9.050574570894241:  root modified ^ operator-operator ==_ter ^ ^  &&_ter ^ ^ ^ ; ['root -> modified', 'copy-operator', 'operator -> &&_ter', 'root -> End']
copynode -8.193504095077515:  root add ^ control ForControl init ^ condition ^ update ^ ^ ^ ^ ; ['root -> add', 'root -> control', 'control -> ForControl', 'ForControl -> init condition update']
copynode -5.994227916002274:  root modified ^ MemberReference-MemberReference member loc0 ^ ^ ^  prefix_operators ~_ter ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> prefix_operators member', 'prefix_operators -> ~_ter']
copynode -6.347611692268401:  root modified ^ WhileStatement condition MethodInvocation ^ ^ ^ ^ ; ['root -> modified', 'root -> WhileStatement', 'WhileStatement -> condition', 'condition -> MethodInvocation']
copynode -0.9238720018765889:  root modified ^ IfStatement condition Literal ^ ^ ^ ^ ; ['root -> modified', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> Literal']
copynode -6.048812419176102:  root modified ^ MemberReference-MemberReference member loc0 ^ ^ ^  qualifier str_ter ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'copy-qualifier']
copynode -4.000917494297028:  root add ^ StatementExpression expression This ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> This']
copynode -6.048812419176102:  root modified ^ MemberReference-MemberReference member loc0 ^ ^ ^  qualifier str_ter ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'copy-qualifier']
copynode -6.048812419176102:  root modified ^ MemberReference-MemberReference member loc0 ^ ^ ^  qualifier str_ter ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'copy-qualifier']
copynode -7.167654123157263:  root add ^ WhileStatement condition MethodInvocation ^ ^ ^ ^ ; ['root -> add', 'root -> WhileStatement', 'WhileStatement -> condition', 'condition -> MethodInvocation']
copynode -6.633953094482422:  root add ^ LocalVariableDeclaration type ReferenceType ^ ^ declarators ^ ^ ^ ; ['root -> add', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType']
copynode -5.443264961242676:  root add ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc3 ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc3 ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc4 ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc4 ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ BreakStatement_ter ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'copy-ReturnStatement', 'root -> BreakStatement_ter']
copynode -9.359210759401321:  root modified ^ operator-operator ==_ter ^ ^  &_ter ^ ^ ^ ; ['root -> modified', 'copy-operator', 'operator -> &_ter', 'root -> End']
copynode -8.193504095077515:  root add ^ control ForControl condition ^ update ^ ^ ^ ^ ; ['root -> add', 'root -> control', 'control -> ForControl', 'ForControl -> condition update']
copynode -4.000917494297028:  root add ^ StatementExpression expression BinaryOperation ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> BinaryOperation']
copynode -6.048812419176102:  root modified ^ MemberReference-MemberReference member loc0 ^ ^ ^  qualifier str_ter ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'copy-qualifier']
copynode -9.492179661989212:  root modified ^ operator-operator ==_ter ^ ^  -_ter ^ ^ ^ ; ['root -> modified', 'copy-operator', 'operator -> -_ter', 'root -> End']
copynode -5.994227916002274:  root modified ^ MemberReference-MemberReference member loc0 ^ ^ ^  prefix_operators --_ter ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> prefix_operators member', 'prefix_operators -> --_ter']
copynode -7.327006608247757:  root modified ^ MemberReference-MemberReference member loc0 ^ ^ ^  postfix_operators ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> postfix_operators member', 'postfix_operators -> End']
copynode -6.048812419176102:  root modified ^ MemberReference-MemberReference member loc0 ^ ^ ^  qualifier str_ter ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'copy-qualifier']
copynode -9.201142579317093:  root modified ^ Literal-Literal value <string>_ter ^ ^ ^  selectors MethodInvocation ^ ^ value ^ ^ ^ ; ['root -> modified', 'copy-Literal', 'Literal -> selectors value', 'selectors -> MethodInvocation']
copynode -9.576093465089798:  root modified ^ operator-operator ==_ter ^ ^  >>>_ter ^ ^ ^ ; ['root -> modified', 'copy-operator', 'operator -> >>>_ter', 'root -> End']
copynode -6.048812419176102:  root modified ^ MemberReference-MemberReference member loc0 ^ ^ ^  qualifier unknown ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'start -> unknown']
copynode -6.048812419176102:  root modified ^ MemberReference-MemberReference member loc0 ^ ^ ^  qualifier str_ter ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'copy-qualifier']
copynode -7.139741122722626:  root modified ^ Literal-Literal value <string>_ter ^ ^ ^  value 1_ter ^ ^ ^ ^ ; ['root -> modified', 'copy-Literal', 'Literal -> value', 'value -> 1_ter']
copynode -1.7227138626622036:  root add ^ IfStatement condition This ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> This']
copynode -9.67997482419014:  root modified ^ Literal-Literal value <string>_ter ^ ^ ^  prefix_operators -_ter ^ ^ selectors ^ value ^ ^ ^ ; ['root -> modified', 'copy-Literal', 'Literal -> prefix_operators selectors value', 'prefix_operators -> -_ter']
copynode -6.405408620834351:  root modified ^ StatementExpression expression Assignment ^ ^ ^ ^ ; ['root -> modified', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment']
copynode -6.172896385192871:  root add ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc3 ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc3 ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc4 ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc4 ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ReturnStatement ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'copy-ReturnStatement', 'root -> ReturnStatement']
copynode -5.443264961242676:  root add ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc3 ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc3 ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc4 ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc4 ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ StatementExpression ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'copy-ReturnStatement', 'root -> StatementExpression']
copynode -8.419198781251907:  root modified ^ MemberReference-MemberReference member loc0 ^ ^ ^  selectors MethodInvocation ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> selectors member', 'selectors -> MethodInvocation']
copynode -6.172896385192871:  root add ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc3 ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc3 ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc4 ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member loc4 ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ BreakStatement_ter ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'copy-ReturnStatement', 'root -> BreakStatement_ter']
copynode -8.419198781251907:  root modified ^ MemberReference-MemberReference member loc0 ^ ^ ^  selectors MemberReference ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> selectors member', 'selectors -> MemberReference']
copynode -10.091519713401794:  root add ^ operator-operator ==_ter ^ ^  >_ter ^ ^ ^ ; ['root -> add', 'copy-operator', 'operator -> >_ter', 'root -> End']
copynode -0.9238720018765889:  root modified ^ IfStatement condition This ^ ^ ^ ^ ; ['root -> modified', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> This']
copynode -10.259694457054138:  root add ^ operator-operator ==_ter ^ ^  <=_ter ^ ^ ^ ; ['root -> add', 'copy-operator', 'operator -> <=_ter', 'root -> End']
copynode -6.694573402404785:  root add ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier str_ter ^ ^ arguments Literal value 1_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier str_ter ^ ^ arguments Literal value 1_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier str_ter ^ ^ arguments Literal value 2_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier str_ter ^ ^ arguments Literal value 2_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ReturnStatement ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'copy-ReturnStatement', 'root -> ReturnStatement']
before@4 batch0 x: -10.386352062225342: root add ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier str_ter ^ ^ arguments Literal value 1_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier str_ter ^ ^ arguments Literal value 1_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier str_ter ^ ^ arguments Literal value 2_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier str_ter ^ ^ arguments Literal value 2_ter ^ ^ ^ ^ member charAt_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ReturnStatement ^ ^  ; ['root -> add', 'root -> ReturnStatement', 'copy-ReturnStatement', 'root -> ReturnStatement']
stderr: Check out program version: Lang-51b........................................ OK
OpenJDK 64-Bit Server VM warning: ignoring option MaxPermSize=1G; support was removed in 8.0
Running ant (export.dir.src.classes)....................................... OK

  0%|          | 0/1 [00:00<?, ?it/s]/root/projects/Recoder-bwk/run.py:527: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  tmpdepth = np.array(tmpdepth)
/root/envs/recoder/lib/python3.7/site-packages/torch/nn/functional.py:1340: UserWarning: nn.functional.tanh is deprecated. Use torch.tanh instead.
  warnings.warn("nn.functional.tanh is deprecated. Use torch.tanh instead.")
  0%|          | 0/1 [00:06<?, ?it/s]
Traceback (most recent call last):
  File "testDefect4j.py", line 638, in <module>
    ans = solveone(data, model)
  File "/root/projects/Recoder-bwk/run.py", line 1100, in solveone
    ans = BeamSearch((x[0], x[1], None, None, None, None, None, None, x[2], x[3]), dev_set, model, 100, args.batch_size, indexs)
  File "/root/projects/Recoder-bwk/run.py", line 541, in BeamSearch
    result = model(gVar(tmpnl), gVar(tmpnlad), gVar(tmprule), gVar(tmpruleparent), gVar(tmprulechild), gVar(tmpAd), gVar(tmptreepath), gVar(tmpnl8), gVar(tmpnl9), tmpf, tmpc, tmpindex, tmpchar, tmpindex2, rulead, antimasks, None, "test")
  File "/root/envs/recoder/lib/python3.7/site-packages/torch/nn/modules/module.py", line 541, in __call__
    result = self.forward(*input, **kwargs)
  File "/root/projects/Recoder-bwk/Model.py", line 172, in forward
    genP1, _ = self.copy2(rulenoter.unsqueeze(0), decode)
  File "/root/envs/recoder/lib/python3.7/site-packages/torch/nn/modules/module.py", line 541, in __call__
    result = self.forward(*input, **kwargs)
  File "/root/projects/Recoder-bwk/Model.py", line 79, in forward
    genP = self.LinearRes(F.tanh(sourceLinear.unsqueeze(1) + targetLinear.unsqueeze(2))).squeeze(-1)
  File "/root/envs/recoder/lib/python3.7/site-packages/torch/nn/functional.py", line 1341, in tanh
    return input.tanh()
RuntimeError: CUDA out of memory. Tried to allocate 1.68 GiB (GPU 0; 23.65 GiB total capacity; 2.48 GiB already allocated; 771.31 MiB free; 3.99 GiB cached)
