stdout: ReturnStatement expression MemberReference member actual_ter ^ ^ ^ ^ ^ 
return actual;
IfStatement condition BinaryOperation operator instanceof_ter ^ ^ operandl MemberReference member actual_ter ^ ^ ^ ^ operandr ReferenceType name Class_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
if((actual instanceof Class)){

ReturnStatement expression Cast type ReferenceType name Class_ter ^ ^ ^ ^ expression MemberReference member actual_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
return (Class)actual;
ReturnStatement expression Cast type ReferenceType name ParameterizedType_ter ^ ^ ^ ^ expression MemberReference member generic_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
return (ParameterizedType)generic;
IfStatement condition BinaryOperation operator instanceof_ter ^ ^ operandl MemberReference member actual_ter ^ ^ ^ ^ operandr ReferenceType name ParameterizedType_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
if((actual instanceof ParameterizedType)){

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member actual_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((actual != null)){

ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
return null;
ReturnStatement expression Cast type ReferenceType name Class_ter ^ ^ ^ ^ expression MemberReference member generic_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
return (Class)generic;
ReturnStatement expression Cast type ReferenceType name Class_ter ^ ^ ^ ^ expression MethodInvocation qualifier actual_ter ^ ^ member getGenericType_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
return (Class)actual.getGenericType();
ReturnStatement expression Cast type ReferenceType name Type_ter ^ ^ ^ ^ expression MemberReference member actual_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
return (Type)actual;
ReturnStatement expression This_ter ^ ^ ^ 
return this;
ReturnStatement expression MethodInvocation qualifier actual_ter ^ ^ member getGenericType_ter ^ ^ ^ ^ ^ 
return actual.getGenericType();
IfStatement condition BinaryOperation operator instanceof_ter ^ ^ operandl MemberReference member actual_ter ^ ^ ^ ^ operandr ReferenceType name Class_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if((actual instanceof Class)){
return null;}
ReturnStatement expression Cast type ReferenceType name Class_ter ^ ^ ^ ^ expression Cast type ReferenceType name Class_ter ^ ^ ^ ^ expression MemberReference member actual_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
arg 
arg 
return (Class)(Class)actual;
ReturnStatement expression ClassReference type ReferenceType name Object_ter ^ ^ ^ ^ ^ ^ ^ 
ClassReference type ReferenceType name Object_ter ^ ^ ^ ^ ^ 
arg 
ClassReference type ReferenceType name Object_ter ^ ^ ^ ^ ^ 
arg 
return Object;
ReturnStatement expression Cast type ReferenceType name ParameterizedType_ter ^ ^ ^ ^ expression MemberReference member actual_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
return (ParameterizedType)actual;
IfStatement condition BinaryOperation operator instanceof_ter ^ ^ operandl MemberReference member actual_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((actual instanceof null)){


ReturnStatement expression Cast type ReferenceType name Field_ter ^ ^ ^ ^ expression MemberReference member actual_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
return (Field)actual;
IfStatement condition BinaryOperation operator instanceof_ter ^ ^ operandl Cast type ReferenceType name Class_ter ^ ^ ^ ^ expression MemberReference member actual_ter ^ ^ ^ ^ ^ ^ operandr ReferenceType name Class_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
arg 
arg 
if(((Class)actual instanceof Class)){

ReturnStatement expression MemberReference member generic_ter ^ ^ ^ ^ ^ 
return generic;
IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member generic_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((generic != null)){

ReturnStatement expression Cast type ReferenceType name Class_ter ^ ^ ^ ^ expression MemberReference member field_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
return (Class)field;
ReturnStatement expression Cast type ReferenceType name Class_ter ^ ^ ^ ^ expression MethodInvocation arguments MemberReference member actual_ter ^ ^ ^ ^ member getGenericType_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
return (Class)getGenericType(actual);
IfStatement condition BinaryOperation operator instanceof_ter ^ ^ operandl MemberReference member actual_ter ^ ^ ^ ^ operandr ReferenceType name Class_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
ContinueStatement_ter ^ 
if((actual instanceof Class)){
continue;
}
IfStatement condition BinaryOperation operator instanceof_ter ^ ^ operandl MemberReference member generic_ter ^ ^ ^ ^ operandr ReferenceType name ParameterizedType_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
if((generic instanceof ParameterizedType)){

IfStatement condition BinaryOperation operator instanceof_ter ^ ^ operandl MemberReference member actual_ter ^ ^ ^ ^ operandr ReferenceType name Class_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
ReturnStatement expression ClassReference type ReferenceType name Object_ter ^ ^ ^ ^ ^ ^ ^ 
ClassReference type ReferenceType name Object_ter ^ ^ ^ ^ ^ 
arg 
ClassReference type ReferenceType name Object_ter ^ ^ ^ ^ ^ 
arg 
if((actual instanceof Class)){
return Object;}
ReturnStatement expression Cast type ReferenceType name Class_ter ^ ^ ^ ^ expression MethodInvocation member getGenericType_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
return (Class)getGenericType();
ReturnStatement expression MethodInvocation qualifier actual_ter ^ ^ arguments MemberReference member actual_ter ^ ^ ^ ^ member getGenericType_ter ^ ^ ^ ^ ^ 
return actual.getGenericType(actual);
ReturnStatement expression MethodInvocation qualifier field_ter ^ ^ member getGenericType_ter ^ ^ ^ ^ ^ 
return field.getGenericType();
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if (true) { return null; }

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member actual_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((actual == null)){

ReturnStatement expression Cast type ReferenceType name Class_ter ^ ^ ^ ^ expression MethodInvocation qualifier field_ter ^ ^ member getGenericType_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
return (Class)field.getGenericType();
ReturnStatement expression MethodInvocation arguments MemberReference member actual_ter ^ ^ ^ ^ member getGenericType_ter ^ ^ ^ ^ ^ 
return getGenericType(actual);
ContinueStatement_ter ^ 
continue;

IfStatement condition BinaryOperation operator instanceof_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member generic_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr ReferenceType name Class_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
if(((generic != null) instanceof Class)){

ReturnStatement_ter ^ 
return;

IfStatement condition BinaryOperation operator instanceof_ter ^ ^ operandl MemberReference member loc2 ^ ^ ^ ^ operandr ReferenceType name Class_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
if(( instanceof Class)){


IfStatement condition BinaryOperation operator instanceof_ter ^ ^ operandl MemberReference member generic_ter ^ ^ ^ ^ operandr ReferenceType name Class_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
if((generic instanceof Class)){

ReturnStatement_ter ^ 
if (true) { return;
 }

stderr: 