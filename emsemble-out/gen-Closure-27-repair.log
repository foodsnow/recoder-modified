stdout: StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier tryBody_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(tryBody.hasChildren());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier tryBody_ter ^ ^ member isFromExterns_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(tryBody.isFromExterns());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier tryBody_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(tryBody.hasOneChild());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier tryBody_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(tryBody.hasMoreThanOneChild());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier tryBody_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(tryBody.isQualifiedName());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier tryBody_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(tryBody.isUnscopedQualifiedName());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier tryBody_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(tryBody.isVarArgs());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier tryBody_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(tryBody.isOptionalArg());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier tryBody_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(tryBody.isSyntheticBlock());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier tryBody_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(tryBody.wasEmptyNode());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier tryBody_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(tryBody.isOnlyModifiesThisCall());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier tryBody_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(tryBody.isNoSideEffectsCall());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier tryBody_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(tryBody.isLocalResultCall());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier tryBody_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(tryBody.isQuotedString());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier tryBody_ter ^ ^ member isAdd_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(tryBody.isAdd());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier tryBody_ter ^ ^ member isAnd_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(tryBody.isAnd());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier tryBody_ter ^ ^ member isArrayLit_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(tryBody.isArrayLit());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier tryBody_ter ^ ^ member isAssign_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(tryBody.isAssign());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier tryBody_ter ^ ^ member isAssignAdd_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(tryBody.isAssignAdd());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier tryBody_ter ^ ^ member isBlock_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(tryBody.isBlock());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier tryBody_ter ^ ^ member isBreak_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(tryBody.isBreak());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier tryBody_ter ^ ^ member isCall_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(tryBody.isCall());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier tryBody_ter ^ ^ member isCase_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(tryBody.isCase());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier tryBody_ter ^ ^ member isCatch_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(tryBody.isCatch());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier tryBody_ter ^ ^ member isComma_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(tryBody.isComma());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier tryBody_ter ^ ^ member isContinue_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(tryBody.isContinue());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier tryBody_ter ^ ^ member isDebugger_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(tryBody.isDebugger());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier tryBody_ter ^ ^ member isDec_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(tryBody.isDec());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier tryBody_ter ^ ^ member isDefaultCase_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(tryBody.isDefaultCase());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier tryBody_ter ^ ^ member isDelProp_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(tryBody.isDelProp());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier tryBody_ter ^ ^ member isDo_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(tryBody.isDo());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier tryBody_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(tryBody.isEmpty());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier tryBody_ter ^ ^ member isExprResult_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(tryBody.isExprResult());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier tryBody_ter ^ ^ member isFalse_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(tryBody.isFalse());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier tryBody_ter ^ ^ member isFor_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(tryBody.isFor());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier tryBody_ter ^ ^ member isFunction_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(tryBody.isFunction());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier tryBody_ter ^ ^ member isGetterDef_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(tryBody.isGetterDef());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier tryBody_ter ^ ^ member isGetElem_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(tryBody.isGetElem());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier tryBody_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(tryBody.isGetProp());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier tryBody_ter ^ ^ member isHook_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(tryBody.isHook());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier tryBody_ter ^ ^ member isIf_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(tryBody.isIf());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier tryBody_ter ^ ^ member isIn_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(tryBody.isIn());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier tryBody_ter ^ ^ member isInc_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(tryBody.isInc());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier tryBody_ter ^ ^ member isInstanceOf_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(tryBody.isInstanceOf());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier tryBody_ter ^ ^ member isLabel_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(tryBody.isLabel());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier tryBody_ter ^ ^ member isLabelName_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(tryBody.isLabelName());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier tryBody_ter ^ ^ member isName_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(tryBody.isName());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier tryBody_ter ^ ^ member isNE_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(tryBody.isNE());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier tryBody_ter ^ ^ member isNew_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(tryBody.isNew());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier tryBody_ter ^ ^ member isNot_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(tryBody.isNot());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier tryBody_ter ^ ^ member isNull_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(tryBody.isNull());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier tryBody_ter ^ ^ member isNumber_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(tryBody.isNumber());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier tryBody_ter ^ ^ member isObjectLit_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(tryBody.isObjectLit());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier tryBody_ter ^ ^ member isOr_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(tryBody.isOr());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier tryBody_ter ^ ^ member isParamList_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(tryBody.isParamList());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier tryBody_ter ^ ^ member isRegExp_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(tryBody.isRegExp());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier tryBody_ter ^ ^ member isReturn_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(tryBody.isReturn());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier tryBody_ter ^ ^ member isScript_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(tryBody.isScript());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier tryBody_ter ^ ^ member isSetterDef_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(tryBody.isSetterDef());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier tryBody_ter ^ ^ member isString_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(tryBody.isString());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier tryBody_ter ^ ^ member isStringKey_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(tryBody.isStringKey());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier tryBody_ter ^ ^ member isSwitch_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(tryBody.isSwitch());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier tryBody_ter ^ ^ member isThis_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(tryBody.isThis());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier tryBody_ter ^ ^ member isThrow_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(tryBody.isThrow());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier tryBody_ter ^ ^ member isTrue_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(tryBody.isTrue());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier tryBody_ter ^ ^ member isTry_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(tryBody.isTry());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier tryBody_ter ^ ^ member isTypeOf_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(tryBody.isTypeOf());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier tryBody_ter ^ ^ member isVar_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(tryBody.isVar());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier tryBody_ter ^ ^ member isVoid_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(tryBody.isVoid());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier tryBody_ter ^ ^ member isWhile_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(tryBody.isWhile());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier tryBody_ter ^ ^ member isWith_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(tryBody.isWith());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier tryBody_ter ^ ^ member tryFinally_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(tryBody.tryFinally());

StatementExpression expression MethodInvocation arguments MethodInvocation qualifier tryBody_ter ^ ^ member isLabelName_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
checkState(tryBody.isLabelName());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier tryBody_ter ^ ^ member block_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(tryBody.block());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState();

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MemberReference member finallyBody_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(finallyBody);

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member finallyBody_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((finallyBody != null)){

StatementExpression expression MethodInvocation member checkState_ter ^ ^ ^ ^ ^ 
checkState();

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier tryBody_ter ^ ^ member isLabelName_ter ^ ^ ^ MemberReference member finallyBody_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(tryBody.isLabelName(), finallyBody);

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MemberReference member tryBody_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(tryBody);

StatementExpression expression MethodInvocation arguments MemberReference member tryBody_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
checkState(tryBody);

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member tryBody_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((tryBody != null)){

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier tryBody_ter ^ ^ member getName_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(tryBody.getName());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier tryBody_ter ^ ^ member isLabelName_ter ^ ^ ^ Literal value false_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(tryBody.isLabelName(), false);

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier tryBody_ter ^ ^ member copyInformationFrom_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(tryBody.copyInformationFrom());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier tryBody_ter ^ ^ member isLabelName_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(tryBody.isLabelName(), true);

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member finallyBody_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if((finallyBody == null)){
return null;}
IfStatement condition MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier tryBody_ter ^ ^ member isLabelName_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
if(Preconditions.checkState(tryBody.isLabelName())){


StatementExpression expression MethodInvocation qualifier finallyBody_ter ^ ^ member detachChildren_ter ^ ^ ^ ^ ^ 
finallyBody.detachChildren();

StatementExpression expression MethodInvocation qualifier finallyBody_ter ^ ^ member setQuotedString_ter ^ ^ ^ ^ ^ 
finallyBody.setQuotedString();

StatementExpression expression MethodInvocation qualifier tryBody_ter ^ ^ member detachChildren_ter ^ ^ ^ ^ ^ 
tryBody.detachChildren();

StatementExpression expression MethodInvocation qualifier tryBody_ter ^ ^ member setQuotedString_ter ^ ^ ^ ^ ^ 
tryBody.setQuotedString();

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member tryBody_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if((tryBody == null)){
return null;}
IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member finallyBody_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((finallyBody == null)){

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier finallyBody_ter ^ ^ member isLabelName_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(finallyBody.isLabelName());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments Literal value false_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(false);

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments Literal value true_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(true);

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier tryBody_ter ^ ^ member detachChildren_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(tryBody.detachChildren());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier tryBody_ter ^ ^ member setQuotedString_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(tryBody.setQuotedString());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier tryBody_ter ^ ^ member get_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(tryBody.get());

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier tryBody_ter ^ ^ member isLabelName_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((tryBody.isLabelName() != null)){

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member tryBody_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((tryBody == null)){

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier tryBody_ter ^ ^ member toString_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(tryBody.toString());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier tryBody_ter ^ ^ member isLabelName_ter ^ ^ ^ Literal value null_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(tryBody.isLabelName(), null);

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member finallyBody_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
ReturnStatement expression ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member TRY_ter ^ ^ ^ MemberReference member tryBody_ter ^ ^ ^ MemberReference member catchBody_ter ^ ^ ^ MemberReference member finallyBody_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
if((finallyBody == null)){
return new Node(Token.TRY, tryBody, catchBody, finallyBody);}
LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name catchBody_ter ^ ^ initializer MethodInvocation selectors MethodInvocation arguments MemberReference member catchNode_ter ^ ^ ^ ^ member copyInformationFrom_ter ^ ^ ^ ^ arguments MemberReference member catchNode_ter ^ ^ ^ ^ member empty_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node catchBody = empty(catchNode).copyInformationFrom(catchNode);

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name catchBody_ter ^ ^ initializer MethodInvocation selectors MethodInvocation arguments MemberReference member catchNode_ter ^ ^ ^ ^ member copyInformationFrom_ter ^ ^ ^ ^ arguments MemberReference member catchNode_ter ^ ^ ^ ^ member paramList_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node catchBody = paramList(catchNode).copyInformationFrom(catchNode);

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name catchBody_ter ^ ^ initializer MethodInvocation selectors MethodInvocation arguments MemberReference member catchNode_ter ^ ^ ^ ^ member copyInformationFrom_ter ^ ^ ^ ^ arguments MemberReference member catchNode_ter ^ ^ ^ ^ member block_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node catchBody = block(catchNode).copyInformationFrom(catchNode);

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name catchBody_ter ^ ^ initializer MethodInvocation selectors MethodInvocation arguments MemberReference member catchNode_ter ^ ^ ^ ^ member copyInformationFrom_ter ^ ^ ^ ^ arguments MemberReference member catchNode_ter ^ ^ ^ ^ member returnNode_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node catchBody = returnNode(catchNode).copyInformationFrom(catchNode);

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name catchBody_ter ^ ^ initializer MethodInvocation selectors MethodInvocation arguments MemberReference member catchNode_ter ^ ^ ^ ^ member copyInformationFrom_ter ^ ^ ^ ^ arguments MemberReference member catchNode_ter ^ ^ ^ ^ member breakNode_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node catchBody = breakNode(catchNode).copyInformationFrom(catchNode);

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name catchBody_ter ^ ^ initializer MethodInvocation selectors MethodInvocation arguments MemberReference member catchNode_ter ^ ^ ^ ^ member copyInformationFrom_ter ^ ^ ^ ^ arguments MemberReference member catchNode_ter ^ ^ ^ ^ member continueNode_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node catchBody = continueNode(catchNode).copyInformationFrom(catchNode);

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name catchBody_ter ^ ^ initializer MethodInvocation selectors MethodInvocation arguments MemberReference member catchNode_ter ^ ^ ^ ^ member copyInformationFrom_ter ^ ^ ^ ^ arguments MemberReference member catchNode_ter ^ ^ ^ ^ member thisNode_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node catchBody = thisNode(catchNode).copyInformationFrom(catchNode);

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name catchBody_ter ^ ^ initializer MethodInvocation selectors MethodInvocation arguments MemberReference member catchNode_ter ^ ^ ^ ^ member copyInformationFrom_ter ^ ^ ^ ^ arguments MemberReference member catchNode_ter ^ ^ ^ ^ member trueNode_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node catchBody = trueNode(catchNode).copyInformationFrom(catchNode);

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name catchBody_ter ^ ^ initializer MethodInvocation selectors MethodInvocation arguments MemberReference member catchNode_ter ^ ^ ^ ^ member copyInformationFrom_ter ^ ^ ^ ^ arguments MemberReference member catchNode_ter ^ ^ ^ ^ member falseNode_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node catchBody = falseNode(catchNode).copyInformationFrom(catchNode);

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name catchBody_ter ^ ^ initializer MethodInvocation selectors MethodInvocation arguments MemberReference member catchNode_ter ^ ^ ^ ^ member copyInformationFrom_ter ^ ^ ^ ^ arguments MemberReference member catchNode_ter ^ ^ ^ ^ member nullNode_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node catchBody = nullNode(catchNode).copyInformationFrom(catchNode);

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name catchBody_ter ^ ^ initializer MethodInvocation selectors MethodInvocation arguments MemberReference member catchBody_ter ^ ^ ^ ^ member copyInformationFrom_ter ^ ^ ^ ^ arguments MemberReference member catchNode_ter ^ ^ ^ ^ member block_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node catchBody = block(catchNode).copyInformationFrom(catchBody);

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name catchBody_ter ^ ^ initializer MethodInvocation arguments MemberReference member catchNode_ter ^ ^ ^ ^ member block_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node catchBody = block(catchNode);

LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name catchBody_ter ^ ^ initializer MethodInvocation selectors MethodInvocation arguments MemberReference member catchNode_ter ^ ^ ^ ^ member copyInformationFrom_ter ^ ^ ^ ^ arguments MemberReference member catchNode_ter ^ ^ ^ ^ member block_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
final Node catchBody = block(catchNode).copyInformationFrom(catchNode);

StatementExpression expression MethodInvocation selectors MethodInvocation arguments MemberReference member catchNode_ter ^ ^ ^ ^ member copyInformationFrom_ter ^ ^ ^ ^ arguments MemberReference member catchNode_ter ^ ^ ^ ^ member block_ter ^ ^ ^ ^ ^ 
block(catchNode).copyInformationFrom(catchNode);

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name catchBody_ter ^ ^ initializer MethodInvocation selectors MethodInvocation arguments MemberReference member catchNode_ter ^ ^ ^ ^ member copyInformationFrom_ter ^ ^ ^ ^ member block_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node catchBody = block().copyInformationFrom(catchNode);

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name catchBody_ter ^ ^ initializer MethodInvocation selectors MethodInvocation arguments MemberReference member catchNode_ter ^ ^ ^ ^ member tryCatch_ter ^ ^ ^ ^ arguments MemberReference member catchNode_ter ^ ^ ^ ^ member block_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node catchBody = block(catchNode).tryCatch(catchNode);

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name catchBody_ter ^ ^ initializer MethodInvocation arguments MemberReference member catchNode_ter ^ ^ ^ ^ member copyInformationFrom_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node catchBody = copyInformationFrom(catchNode);

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name catchBody_ter ^ ^ initializer MethodInvocation selectors MethodInvocation arguments MemberReference member catchNode_ter ^ ^ ^ ^ member copyInformationFrom_ter ^ ^ ^ ^ arguments MemberReference member par2 ^ ^ ^ ^ member block_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node catchBody = block().copyInformationFrom(catchNode);

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier catchNode_ter ^ ^ member isCatch_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(catchNode.isCatch());

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name catchBody_ter ^ ^ initializer MethodInvocation selectors MethodInvocation arguments MemberReference member tryBody_ter ^ ^ ^ ^ member copyInformationFrom_ter ^ ^ ^ ^ arguments MemberReference member catchNode_ter ^ ^ ^ ^ member block_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node catchBody = block(catchNode).copyInformationFrom(tryBody);

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name catchBody_ter ^ ^ initializer MethodInvocation selectors MethodInvocation arguments MemberReference member catchNode_ter ^ ^ ^ ^ member isCatch_ter ^ ^ ^ ^ arguments MemberReference member catchNode_ter ^ ^ ^ ^ member block_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node catchBody = block(catchNode).isCatch(catchNode);

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member catchNode_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((catchNode != null)){

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier catchNode_ter ^ ^ member detachChildren_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(catchNode.detachChildren());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier catchNode_ter ^ ^ member setQuotedString_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(catchNode.setQuotedString());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier tryBody_ter ^ ^ member isBlock_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState(tryBody.isBlock());

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name catchBody_ter ^ ^ initializer Cast type ReferenceType name Node_ter ^ ^ ^ ^ expression MethodInvocation selectors MethodInvocation arguments MemberReference member catchNode_ter ^ ^ ^ ^ member copyInformationFrom_ter ^ ^ ^ ^ arguments MemberReference member catchNode_ter ^ ^ ^ ^ member block_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
arg 
arg 
Node catchBody = (Node)block(catchNode).copyInformationFrom(catchNode);

StatementExpression expression MethodInvocation qualifier catchNode_ter ^ ^ member detachChildren_ter ^ ^ ^ ^ ^ 
catchNode.detachChildren();

StatementExpression expression MethodInvocation qualifier catchNode_ter ^ ^ member setQuotedString_ter ^ ^ ^ ^ ^ 
catchNode.setQuotedString();

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name catchBody_ter ^ ^ initializer MethodInvocation selectors MethodInvocation arguments MemberReference member loc1 ^ ^ ^ ^ member copyInformationFrom_ter ^ ^ ^ ^ arguments MemberReference member catchNode_ter ^ ^ ^ ^ member block_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node catchBody = block(catchNode).copyInformationFrom();

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name catchBody_ter ^ ^ initializer MethodInvocation arguments MemberReference member catchNode_ter ^ ^ ^ MemberReference member catchNode_ter ^ ^ ^ ^ member block_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node catchBody = block(catchNode, catchNode);

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name catchBody_ter ^ ^ initializer MethodInvocation member block_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node catchBody = block();

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ arguments MemberReference member catchNode_ter ^ ^ ^ ^ ^ ^ declarators VariableDeclarator name catchBody_ter ^ ^ initializer MethodInvocation selectors MethodInvocation arguments MemberReference member catchNode_ter ^ ^ ^ ^ member copyInformationFrom_ter ^ ^ ^ ^ arguments MemberReference member catchNode_ter ^ ^ ^ ^ member block_ter ^ ^ ^ ^ ^ ^ ^ 
arg catchNode
arg catchNode
Node<catchNode> catchBody = block(catchNode).copyInformationFrom(catchNode);

StatementExpression expression MethodInvocation qualifier tryBody_ter ^ ^ member detachChildren_ter ^ ^ ^ ^ ^ 
tryBody.detachChildren();

StatementExpression expression MethodInvocation qualifier tryBody_ter ^ ^ member setQuotedString_ter ^ ^ ^ ^ ^ 
tryBody.setQuotedString();

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier catchNode_ter ^ ^ member detachChildren_ter ^ ^ ^ ^ member debug_ter ^ ^ ^ ^ ^ 
Preconditions.debug(catchNode.detachChildren());

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation qualifier catchNode_ter ^ ^ member setQuotedString_ter ^ ^ ^ ^ member debug_ter ^ ^ ^ ^ ^ 
Preconditions.debug(catchNode.setQuotedString());

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name catchBody_ter ^ ^ initializer MethodInvocation qualifier Preconditions_ter ^ ^ arguments MemberReference member catchNode_ter ^ ^ ^ ^ member block_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node catchBody = Preconditions.block(catchNode);

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name catchBody_ter ^ ^ initializer MethodInvocation selectors MethodInvocation arguments MemberReference member catchNode_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ arguments MemberReference member catchNode_ter ^ ^ ^ ^ member block_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node catchBody = block(catchNode).checkState(catchNode);

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name catchBody_ter ^ ^ initializer MethodInvocation selectors MethodInvocation arguments MemberReference member catchNode_ter ^ ^ ^ ^ member copyInformationFrom_ter ^ ^ ^ ^ arguments MemberReference member catchNode_ter ^ ^ ^ ^ member tryCatch_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node catchBody = tryCatch(catchNode).copyInformationFrom(catchNode);

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MemberReference member catchNode_ter ^ ^ ^ ^ member debug_ter ^ ^ ^ ^ ^ 
Preconditions.debug(catchNode);

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name catchBody_ter ^ ^ initializer MethodInvocation arguments MemberReference member catchNode_ter ^ ^ ^ Literal value false_ter ^ ^ ^ ^ member block_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node catchBody = block(catchNode, false);

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name catchBody_ter ^ ^ initializer MethodInvocation arguments MemberReference member catchNode_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member block_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node catchBody = block(catchNode, true);

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name catchBody_ter ^ ^ initializer MethodInvocation selectors MethodInvocation arguments MemberReference member catchNode_ter ^ ^ ^ ^ member isBlock_ter ^ ^ ^ ^ arguments MemberReference member catchNode_ter ^ ^ ^ ^ member block_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node catchBody = block(catchNode).isBlock(catchNode);

stderr: 