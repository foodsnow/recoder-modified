stdout: IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ 
if((leftType.isConstructor() || leftType.isEnumType())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ 
if((rightType.isConstructor() || rightType.isEnumType())){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member hasDisplayName_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.hasDisplayName()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isNoType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isNoType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isNoResolvedType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isNoResolvedType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isNoObjectType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isNoObjectType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEmptyType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEmptyType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isNumberObjectType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isNumberObjectType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isNumberValueType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isNumberValueType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isFunctionPrototypeType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isStringObjectType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isStringObjectType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isTheObjectType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isTheObjectType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isStringValueType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isStringValueType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isString()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isNumber()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isArrayType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isArrayType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isBooleanObjectType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isBooleanObjectType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isBooleanValueType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isBooleanValueType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isRegexpType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isRegexpType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isDateType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isDateType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isNullType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isNullType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isVoidType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isVoidType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isAllType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isAllType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isUnknownType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isUnknownType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isCheckedUnknownType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isCheckedUnknownType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isUnionType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isStruct_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isStruct()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isDict_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isDict()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isGlobalThisType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isGlobalThisType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isFunctionType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isFunctionType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumElementType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumElementType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isNamedType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isNamedType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isRecordType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isRecordType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isParameterizedType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isParameterizedType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isTemplateType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isTemplateType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member hasAnyTemplateTypes_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.hasAnyTemplateTypes()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member hasAnyTemplateTypesInternal_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.hasAnyTemplateTypesInternal()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isTemplatized_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isTemplatized()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isObject_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isObject()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isConstructor()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isNominalType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isNominalType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isNominalConstructor_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isNominalConstructor()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isInstanceType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isInstanceType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isInterface_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isInterface()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isOrdinaryFunction_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isOrdinaryFunction()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member matchesInt32Context_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.matchesInt32Context()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member matchesUint32Context_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.matchesUint32Context()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member matchesNumberContext_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.matchesNumberContext()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member matchesStringContext_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.matchesStringContext()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member matchesObjectContext_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.matchesObjectContext()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member canBeCalled_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.canBeCalled()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isNullable_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isNullable()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isResolved_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isResolved()))){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((leftType.isConstructor() && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType()))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member hasDisplayName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.hasDisplayName() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isNoType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isNoType() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isNoResolvedType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isNoResolvedType() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isNoObjectType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isNoObjectType() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isEmptyType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isEmptyType() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isNumberObjectType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isNumberObjectType() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isNumberValueType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isNumberValueType() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isFunctionPrototypeType() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isStringObjectType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isStringObjectType() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isTheObjectType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isTheObjectType() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isStringValueType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isStringValueType() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isString_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isString() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isNumber_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isNumber() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isArrayType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isArrayType() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isBooleanObjectType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isBooleanObjectType() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isBooleanValueType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isBooleanValueType() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isRegexpType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isRegexpType() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isDateType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isDateType() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isNullType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isNullType() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isVoidType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isVoidType() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isAllType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isAllType() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isUnknownType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isUnknownType() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isCheckedUnknownType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isCheckedUnknownType() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isUnionType() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isStruct_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isStruct() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isDict_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isDict() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isGlobalThisType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isGlobalThisType() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isFunctionType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isFunctionType() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isEnumElementType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isEnumElementType() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isEnumType() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isNamedType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isNamedType() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isRecordType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isRecordType() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isParameterizedType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isParameterizedType() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isTemplateType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isTemplateType() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member hasAnyTemplateTypes_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.hasAnyTemplateTypes() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member hasAnyTemplateTypesInternal_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.hasAnyTemplateTypesInternal() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isTemplatized_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isTemplatized() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isObject_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isObject() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isNominalType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isNominalType() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isNominalConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isNominalConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isInstanceType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isInstanceType() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isInterface_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isInterface() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isOrdinaryFunction_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isOrdinaryFunction() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member matchesInt32Context_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.matchesInt32Context() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member matchesUint32Context_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.matchesUint32Context() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member matchesNumberContext_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.matchesNumberContext() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member matchesStringContext_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.matchesStringContext() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member matchesObjectContext_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.matchesObjectContext() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member canBeCalled_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.canBeCalled() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isNullable_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isNullable() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isResolved_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isResolved() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType()))){
IfStatement condition MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ ^ 
if(leftType.isConstructor()){

IfStatement condition MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ ^ 
if(rightType.isConstructor()){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member getName_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.getName()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member getOwnerFunction_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.getOwnerFunction()))){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((rightType.isConstructor() && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ 
if(leftType.isEnumType()){

IfStatement condition MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ 
if(rightType.isEnumType()){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member hasDisplayName_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && leftType.hasDisplayName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isNoType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && leftType.isNoType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isNoResolvedType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && leftType.isNoResolvedType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isNoObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && leftType.isNoObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEmptyType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && leftType.isEmptyType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isNumberObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && leftType.isNumberObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isNumberValueType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && leftType.isNumberValueType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && leftType.isFunctionPrototypeType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isStringObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && leftType.isStringObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isTheObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && leftType.isTheObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isStringValueType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && leftType.isStringValueType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && leftType.isString())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && leftType.isNumber())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isArrayType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && leftType.isArrayType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isBooleanObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && leftType.isBooleanObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isBooleanValueType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && leftType.isBooleanValueType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isRegexpType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && leftType.isRegexpType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isDateType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && leftType.isDateType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isNullType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && leftType.isNullType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isVoidType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && leftType.isVoidType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isAllType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && leftType.isAllType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isUnknownType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && leftType.isUnknownType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isCheckedUnknownType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && leftType.isCheckedUnknownType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && leftType.isUnionType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isStruct_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && leftType.isStruct())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isDict_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && leftType.isDict())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isGlobalThisType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && leftType.isGlobalThisType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isFunctionType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && leftType.isFunctionType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumElementType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && leftType.isEnumElementType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && leftType.isEnumType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isNamedType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && leftType.isNamedType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isRecordType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && leftType.isRecordType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isParameterizedType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && leftType.isParameterizedType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isTemplateType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && leftType.isTemplateType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member hasAnyTemplateTypes_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && leftType.hasAnyTemplateTypes())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member hasAnyTemplateTypesInternal_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && leftType.hasAnyTemplateTypesInternal())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isTemplatized_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && leftType.isTemplatized())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isObject_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && leftType.isObject())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && leftType.isConstructor())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isNominalType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && leftType.isNominalType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isNominalConstructor_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && leftType.isNominalConstructor())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isInstanceType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && leftType.isInstanceType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isInterface_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && leftType.isInterface())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isOrdinaryFunction_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && leftType.isOrdinaryFunction())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member matchesInt32Context_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && leftType.matchesInt32Context())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member matchesUint32Context_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && leftType.matchesUint32Context())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member matchesNumberContext_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && leftType.matchesNumberContext())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member matchesStringContext_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && leftType.matchesStringContext())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member matchesObjectContext_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && leftType.matchesObjectContext())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member canBeCalled_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && leftType.canBeCalled())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isNullable_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && leftType.isNullable())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isResolved_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && leftType.isResolved())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member hasDisplayName_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && rightType.hasDisplayName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isNoType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && rightType.isNoType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isNoResolvedType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && rightType.isNoResolvedType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isNoObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && rightType.isNoObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEmptyType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && rightType.isEmptyType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isNumberObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && rightType.isNumberObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isNumberValueType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && rightType.isNumberValueType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && rightType.isFunctionPrototypeType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isStringObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && rightType.isStringObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isTheObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && rightType.isTheObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isStringValueType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && rightType.isStringValueType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && rightType.isString())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && rightType.isNumber())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isArrayType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && rightType.isArrayType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isBooleanObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && rightType.isBooleanObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isBooleanValueType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && rightType.isBooleanValueType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isRegexpType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && rightType.isRegexpType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isDateType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && rightType.isDateType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isNullType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && rightType.isNullType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isVoidType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && rightType.isVoidType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isAllType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && rightType.isAllType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isUnknownType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && rightType.isUnknownType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isCheckedUnknownType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && rightType.isCheckedUnknownType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && rightType.isUnionType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isStruct_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && rightType.isStruct())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isDict_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && rightType.isDict())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isGlobalThisType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && rightType.isGlobalThisType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isFunctionType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && rightType.isFunctionType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumElementType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && rightType.isEnumElementType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && rightType.isEnumType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isNamedType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && rightType.isNamedType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isRecordType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && rightType.isRecordType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isParameterizedType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && rightType.isParameterizedType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isTemplateType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && rightType.isTemplateType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member hasAnyTemplateTypes_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && rightType.hasAnyTemplateTypes())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member hasAnyTemplateTypesInternal_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && rightType.hasAnyTemplateTypesInternal())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isTemplatized_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && rightType.isTemplatized())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isObject_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && rightType.isObject())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && rightType.isConstructor())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isNominalType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && rightType.isNominalType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isNominalConstructor_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && rightType.isNominalConstructor())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isInstanceType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && rightType.isInstanceType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isInterface_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && rightType.isInterface())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isOrdinaryFunction_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && rightType.isOrdinaryFunction())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member matchesInt32Context_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && rightType.matchesInt32Context())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member matchesUint32Context_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && rightType.matchesUint32Context())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member matchesNumberContext_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && rightType.matchesNumberContext())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member matchesStringContext_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && rightType.matchesStringContext())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member matchesObjectContext_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && rightType.matchesObjectContext())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member canBeCalled_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && rightType.canBeCalled())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isNullable_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && rightType.isNullable())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isResolved_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && rightType.isResolved())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() && leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType()))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member toObjectType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.toObjectType()))){
condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) || (rightType.isConstructor() || rightType.isEnumType()))){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member hasDisplayName_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && leftType.hasDisplayName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isNoType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && leftType.isNoType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isNoResolvedType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && leftType.isNoResolvedType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isNoObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && leftType.isNoObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEmptyType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && leftType.isEmptyType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isNumberObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && leftType.isNumberObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isNumberValueType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && leftType.isNumberValueType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && leftType.isFunctionPrototypeType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isStringObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && leftType.isStringObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isTheObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && leftType.isTheObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isStringValueType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && leftType.isStringValueType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && leftType.isString())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && leftType.isNumber())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isArrayType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && leftType.isArrayType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isBooleanObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && leftType.isBooleanObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isBooleanValueType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && leftType.isBooleanValueType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isRegexpType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && leftType.isRegexpType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isDateType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && leftType.isDateType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isNullType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && leftType.isNullType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isVoidType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && leftType.isVoidType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isAllType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && leftType.isAllType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isUnknownType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && leftType.isUnknownType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isCheckedUnknownType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && leftType.isCheckedUnknownType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && leftType.isUnionType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isStruct_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && leftType.isStruct())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isDict_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && leftType.isDict())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isGlobalThisType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && leftType.isGlobalThisType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isFunctionType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && leftType.isFunctionType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumElementType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && leftType.isEnumElementType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && leftType.isEnumType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isNamedType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && leftType.isNamedType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isRecordType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && leftType.isRecordType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isParameterizedType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && leftType.isParameterizedType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isTemplateType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && leftType.isTemplateType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member hasAnyTemplateTypes_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && leftType.hasAnyTemplateTypes())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member hasAnyTemplateTypesInternal_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && leftType.hasAnyTemplateTypesInternal())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isTemplatized_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && leftType.isTemplatized())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isObject_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && leftType.isObject())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && leftType.isConstructor())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isNominalType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && leftType.isNominalType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isNominalConstructor_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && leftType.isNominalConstructor())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isInstanceType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && leftType.isInstanceType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isInterface_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && leftType.isInterface())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isOrdinaryFunction_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && leftType.isOrdinaryFunction())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member matchesInt32Context_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && leftType.matchesInt32Context())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member matchesUint32Context_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && leftType.matchesUint32Context())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member matchesNumberContext_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && leftType.matchesNumberContext())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member matchesStringContext_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && leftType.matchesStringContext())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member matchesObjectContext_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && leftType.matchesObjectContext())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member canBeCalled_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && leftType.canBeCalled())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isNullable_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && leftType.isNullable())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isResolved_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && leftType.isResolved())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() && rightType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member hasDisplayName_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && rightType.hasDisplayName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isNoType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && rightType.isNoType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isNoResolvedType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && rightType.isNoResolvedType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isNoObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && rightType.isNoObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEmptyType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && rightType.isEmptyType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isNumberObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && rightType.isNumberObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isNumberValueType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && rightType.isNumberValueType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && rightType.isFunctionPrototypeType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isStringObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && rightType.isStringObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isTheObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && rightType.isTheObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isStringValueType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && rightType.isStringValueType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && rightType.isString())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && rightType.isNumber())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isArrayType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && rightType.isArrayType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isBooleanObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && rightType.isBooleanObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isBooleanValueType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && rightType.isBooleanValueType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isRegexpType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && rightType.isRegexpType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isDateType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && rightType.isDateType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isNullType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && rightType.isNullType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isVoidType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && rightType.isVoidType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isAllType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && rightType.isAllType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isUnknownType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && rightType.isUnknownType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isCheckedUnknownType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && rightType.isCheckedUnknownType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && rightType.isUnionType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isStruct_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && rightType.isStruct())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isDict_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && rightType.isDict())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isGlobalThisType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && rightType.isGlobalThisType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isFunctionType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && rightType.isFunctionType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumElementType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && rightType.isEnumElementType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && rightType.isEnumType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isNamedType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && rightType.isNamedType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isRecordType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && rightType.isRecordType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isParameterizedType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && rightType.isParameterizedType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isTemplateType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && rightType.isTemplateType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member hasAnyTemplateTypes_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && rightType.hasAnyTemplateTypes())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member hasAnyTemplateTypesInternal_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && rightType.hasAnyTemplateTypesInternal())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isTemplatized_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && rightType.isTemplatized())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isObject_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && rightType.isObject())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && rightType.isConstructor())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isNominalType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && rightType.isNominalType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isNominalConstructor_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && rightType.isNominalConstructor())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isInstanceType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && rightType.isInstanceType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isInterface_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && rightType.isInterface())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isOrdinaryFunction_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && rightType.isOrdinaryFunction())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member matchesInt32Context_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && rightType.matchesInt32Context())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member matchesUint32Context_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && rightType.matchesUint32Context())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member matchesNumberContext_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && rightType.matchesNumberContext())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member matchesStringContext_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && rightType.matchesStringContext())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member matchesObjectContext_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && rightType.matchesObjectContext())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member canBeCalled_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && rightType.canBeCalled())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isNullable_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && rightType.isNullable())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isResolved_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && rightType.isResolved())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (leftType.isConstructor() || leftType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member hasDisplayName_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !leftType.hasDisplayName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isNoType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !leftType.isNoType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isNoResolvedType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !leftType.isNoResolvedType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isNoObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !leftType.isNoObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isEmptyType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !leftType.isEmptyType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isNumberObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !leftType.isNumberObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isNumberValueType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !leftType.isNumberValueType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !leftType.isFunctionPrototypeType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isStringObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !leftType.isStringObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isTheObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !leftType.isTheObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isStringValueType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !leftType.isStringValueType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !leftType.isString())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !leftType.isNumber())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isArrayType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !leftType.isArrayType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isBooleanObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !leftType.isBooleanObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isBooleanValueType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !leftType.isBooleanValueType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isRegexpType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !leftType.isRegexpType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isDateType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !leftType.isDateType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isNullType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !leftType.isNullType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isVoidType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !leftType.isVoidType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isAllType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !leftType.isAllType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isUnknownType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !leftType.isUnknownType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isCheckedUnknownType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !leftType.isCheckedUnknownType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !leftType.isUnionType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isStruct_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !leftType.isStruct())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isDict_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !leftType.isDict())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isGlobalThisType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !leftType.isGlobalThisType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isFunctionType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !leftType.isFunctionType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isEnumElementType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !leftType.isEnumElementType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !leftType.isEnumType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isNamedType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !leftType.isNamedType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isRecordType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !leftType.isRecordType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isParameterizedType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !leftType.isParameterizedType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isTemplateType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !leftType.isTemplateType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member hasAnyTemplateTypes_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !leftType.hasAnyTemplateTypes())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member hasAnyTemplateTypesInternal_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !leftType.hasAnyTemplateTypesInternal())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isTemplatized_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !leftType.isTemplatized())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isObject_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !leftType.isObject())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !leftType.isConstructor())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isNominalType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !leftType.isNominalType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isNominalConstructor_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !leftType.isNominalConstructor())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isInstanceType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !leftType.isInstanceType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isInterface_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !leftType.isInterface())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isOrdinaryFunction_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !leftType.isOrdinaryFunction())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member matchesInt32Context_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !leftType.matchesInt32Context())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member matchesUint32Context_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !leftType.matchesUint32Context())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member matchesNumberContext_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !leftType.matchesNumberContext())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member matchesStringContext_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !leftType.matchesStringContext())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member matchesObjectContext_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !leftType.matchesObjectContext())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member canBeCalled_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !leftType.canBeCalled())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isNullable_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !leftType.isNullable())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isResolved_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !leftType.isResolved())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() && (rightType.isConstructor() || rightType.isEnumType())) && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier rightType_ter ^ ^ member hasDisplayName_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !rightType.hasDisplayName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier rightType_ter ^ ^ member isNoType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !rightType.isNoType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier rightType_ter ^ ^ member isNoResolvedType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !rightType.isNoResolvedType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier rightType_ter ^ ^ member isNoObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !rightType.isNoObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier rightType_ter ^ ^ member isEmptyType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !rightType.isEmptyType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier rightType_ter ^ ^ member isNumberObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !rightType.isNumberObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier rightType_ter ^ ^ member isNumberValueType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !rightType.isNumberValueType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier rightType_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !rightType.isFunctionPrototypeType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier rightType_ter ^ ^ member isStringObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !rightType.isStringObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier rightType_ter ^ ^ member isTheObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !rightType.isTheObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier rightType_ter ^ ^ member isStringValueType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !rightType.isStringValueType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier rightType_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !rightType.isString())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier rightType_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !rightType.isNumber())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier rightType_ter ^ ^ member isArrayType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !rightType.isArrayType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier rightType_ter ^ ^ member isBooleanObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !rightType.isBooleanObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier rightType_ter ^ ^ member isBooleanValueType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !rightType.isBooleanValueType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier rightType_ter ^ ^ member isRegexpType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !rightType.isRegexpType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier rightType_ter ^ ^ member isDateType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !rightType.isDateType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier rightType_ter ^ ^ member isNullType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !rightType.isNullType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier rightType_ter ^ ^ member isVoidType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !rightType.isVoidType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier rightType_ter ^ ^ member isAllType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !rightType.isAllType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier rightType_ter ^ ^ member isUnknownType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !rightType.isUnknownType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier rightType_ter ^ ^ member isCheckedUnknownType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !rightType.isCheckedUnknownType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier rightType_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !rightType.isUnionType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier rightType_ter ^ ^ member isStruct_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !rightType.isStruct())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier rightType_ter ^ ^ member isDict_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !rightType.isDict())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier rightType_ter ^ ^ member isGlobalThisType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !rightType.isGlobalThisType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier rightType_ter ^ ^ member isFunctionType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !rightType.isFunctionType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier rightType_ter ^ ^ member isEnumElementType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !rightType.isEnumElementType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !rightType.isEnumType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier rightType_ter ^ ^ member isNamedType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !rightType.isNamedType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier rightType_ter ^ ^ member isRecordType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !rightType.isRecordType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier rightType_ter ^ ^ member isParameterizedType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !rightType.isParameterizedType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier rightType_ter ^ ^ member isTemplateType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !rightType.isTemplateType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier rightType_ter ^ ^ member hasAnyTemplateTypes_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !rightType.hasAnyTemplateTypes())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier rightType_ter ^ ^ member hasAnyTemplateTypesInternal_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !rightType.hasAnyTemplateTypesInternal())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier rightType_ter ^ ^ member isTemplatized_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !rightType.isTemplatized())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier rightType_ter ^ ^ member isObject_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !rightType.isObject())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !rightType.isConstructor())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier rightType_ter ^ ^ member isNominalType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !rightType.isNominalType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier rightType_ter ^ ^ member isNominalConstructor_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !rightType.isNominalConstructor())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier rightType_ter ^ ^ member isInstanceType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !rightType.isInstanceType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier rightType_ter ^ ^ member isInterface_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !rightType.isInterface())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier rightType_ter ^ ^ member isOrdinaryFunction_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !rightType.isOrdinaryFunction())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier rightType_ter ^ ^ member matchesInt32Context_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !rightType.matchesInt32Context())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier rightType_ter ^ ^ member matchesUint32Context_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !rightType.matchesUint32Context())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier rightType_ter ^ ^ member matchesNumberContext_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !rightType.matchesNumberContext())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier rightType_ter ^ ^ member matchesStringContext_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !rightType.matchesStringContext())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier rightType_ter ^ ^ member matchesObjectContext_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !rightType.matchesObjectContext())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier rightType_ter ^ ^ member canBeCalled_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !rightType.canBeCalled())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier rightType_ter ^ ^ member isNullable_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !rightType.isNullable())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier rightType_ter ^ ^ member isResolved_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !rightType.isResolved())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && (rightType.isConstructor() || rightType.isEnumType())) && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && n.hasChildren())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isFromExterns_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && n.isFromExterns())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && n.hasOneChild())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && n.hasMoreThanOneChild())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && n.isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && n.isUnscopedQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && n.isVarArgs())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && n.isOptionalArg())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && n.isSyntheticBlock())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && n.wasEmptyNode())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && n.isOnlyModifiesThisCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && n.isNoSideEffectsCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && n.isLocalResultCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && n.isQuotedString())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isAdd_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && n.isAdd())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isAnd_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && n.isAnd())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isArrayLit_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && n.isArrayLit())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isAssign_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && n.isAssign())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isAssignAdd_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && n.isAssignAdd())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isBlock_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && n.isBlock())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isBreak_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && n.isBreak())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isCall_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && n.isCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isCase_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && n.isCase())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isCatch_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && n.isCatch())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isComma_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && n.isComma())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isContinue_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && n.isContinue())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isDebugger_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && n.isDebugger())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isDec_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && n.isDec())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isDefaultCase_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && n.isDefaultCase())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isDelProp_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && n.isDelProp())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isDo_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && n.isDo())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && n.isEmpty())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isExprResult_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && n.isExprResult())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isFalse_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && n.isFalse())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isFor_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && n.isFor())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isFunction_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && n.isFunction())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isGetterDef_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && n.isGetterDef())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isGetElem_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && n.isGetElem())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && n.isGetProp())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isHook_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && n.isHook())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isIf_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && n.isIf())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isIn_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && n.isIn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isInc_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && n.isInc())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isInstanceOf_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && n.isInstanceOf())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isLabel_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && n.isLabel())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isLabelName_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && n.isLabelName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && n.isName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isNE_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && n.isNE())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isNew_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && n.isNew())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isNot_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && n.isNot())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isNull_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && n.isNull())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && n.isNumber())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isObjectLit_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && n.isObjectLit())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isOr_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && n.isOr())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isParamList_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && n.isParamList())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isRegExp_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && n.isRegExp())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && n.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isScript_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && n.isScript())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isSetterDef_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && n.isSetterDef())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && n.isString())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isStringKey_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && n.isStringKey())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isSwitch_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && n.isSwitch())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isThis_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && n.isThis())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isThrow_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && n.isThrow())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isTrue_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && n.isTrue())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isTry_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && n.isTry())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isTypeOf_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && n.isTypeOf())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isVar_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && n.isVar())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isVoid_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && n.isVoid())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isWhile_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && n.isWhile())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isWith_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && n.isWith())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((leftType.isConstructor() || (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition MethodInvocation qualifier leftType_ter ^ ^ member hasDisplayName_ter ^ ^ ^ ^ ^ 
if(leftType.hasDisplayName()){

IfStatement condition MethodInvocation qualifier leftType_ter ^ ^ member isNoType_ter ^ ^ ^ ^ ^ 
if(leftType.isNoType()){

IfStatement condition MethodInvocation qualifier leftType_ter ^ ^ member isNoResolvedType_ter ^ ^ ^ ^ ^ 
if(leftType.isNoResolvedType()){

IfStatement condition MethodInvocation qualifier leftType_ter ^ ^ member isNoObjectType_ter ^ ^ ^ ^ ^ 
if(leftType.isNoObjectType()){

IfStatement condition MethodInvocation qualifier leftType_ter ^ ^ member isEmptyType_ter ^ ^ ^ ^ ^ 
if(leftType.isEmptyType()){

IfStatement condition MethodInvocation qualifier leftType_ter ^ ^ member isNumberObjectType_ter ^ ^ ^ ^ ^ 
if(leftType.isNumberObjectType()){

IfStatement condition MethodInvocation qualifier leftType_ter ^ ^ member isNumberValueType_ter ^ ^ ^ ^ ^ 
if(leftType.isNumberValueType()){

IfStatement condition MethodInvocation qualifier leftType_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ ^ 
if(leftType.isFunctionPrototypeType()){

IfStatement condition MethodInvocation qualifier leftType_ter ^ ^ member isStringObjectType_ter ^ ^ ^ ^ ^ 
if(leftType.isStringObjectType()){

IfStatement condition MethodInvocation qualifier leftType_ter ^ ^ member isTheObjectType_ter ^ ^ ^ ^ ^ 
if(leftType.isTheObjectType()){

IfStatement condition MethodInvocation qualifier leftType_ter ^ ^ member isStringValueType_ter ^ ^ ^ ^ ^ 
if(leftType.isStringValueType()){

IfStatement condition MethodInvocation qualifier leftType_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ 
if(leftType.isString()){

IfStatement condition MethodInvocation qualifier leftType_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ 
if(leftType.isNumber()){

IfStatement condition MethodInvocation qualifier leftType_ter ^ ^ member isArrayType_ter ^ ^ ^ ^ ^ 
if(leftType.isArrayType()){

IfStatement condition MethodInvocation qualifier leftType_ter ^ ^ member isBooleanObjectType_ter ^ ^ ^ ^ ^ 
if(leftType.isBooleanObjectType()){

IfStatement condition MethodInvocation qualifier leftType_ter ^ ^ member isBooleanValueType_ter ^ ^ ^ ^ ^ 
if(leftType.isBooleanValueType()){

IfStatement condition MethodInvocation qualifier leftType_ter ^ ^ member isRegexpType_ter ^ ^ ^ ^ ^ 
if(leftType.isRegexpType()){

IfStatement condition MethodInvocation qualifier leftType_ter ^ ^ member isDateType_ter ^ ^ ^ ^ ^ 
if(leftType.isDateType()){

IfStatement condition MethodInvocation qualifier leftType_ter ^ ^ member isNullType_ter ^ ^ ^ ^ ^ 
if(leftType.isNullType()){

IfStatement condition MethodInvocation qualifier leftType_ter ^ ^ member isVoidType_ter ^ ^ ^ ^ ^ 
if(leftType.isVoidType()){

IfStatement condition MethodInvocation qualifier leftType_ter ^ ^ member isAllType_ter ^ ^ ^ ^ ^ 
if(leftType.isAllType()){

IfStatement condition MethodInvocation qualifier leftType_ter ^ ^ member isUnknownType_ter ^ ^ ^ ^ ^ 
if(leftType.isUnknownType()){

IfStatement condition MethodInvocation qualifier leftType_ter ^ ^ member isCheckedUnknownType_ter ^ ^ ^ ^ ^ 
if(leftType.isCheckedUnknownType()){

IfStatement condition MethodInvocation qualifier leftType_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
if(leftType.isUnionType()){

IfStatement condition MethodInvocation qualifier leftType_ter ^ ^ member isStruct_ter ^ ^ ^ ^ ^ 
if(leftType.isStruct()){

IfStatement condition MethodInvocation qualifier leftType_ter ^ ^ member isDict_ter ^ ^ ^ ^ ^ 
if(leftType.isDict()){

IfStatement condition MethodInvocation qualifier leftType_ter ^ ^ member isGlobalThisType_ter ^ ^ ^ ^ ^ 
if(leftType.isGlobalThisType()){

IfStatement condition MethodInvocation qualifier leftType_ter ^ ^ member isFunctionType_ter ^ ^ ^ ^ ^ 
if(leftType.isFunctionType()){

IfStatement condition MethodInvocation qualifier leftType_ter ^ ^ member isEnumElementType_ter ^ ^ ^ ^ ^ 
if(leftType.isEnumElementType()){

IfStatement condition MethodInvocation qualifier leftType_ter ^ ^ member isNamedType_ter ^ ^ ^ ^ ^ 
if(leftType.isNamedType()){

IfStatement condition MethodInvocation qualifier leftType_ter ^ ^ member isRecordType_ter ^ ^ ^ ^ ^ 
if(leftType.isRecordType()){

IfStatement condition MethodInvocation qualifier leftType_ter ^ ^ member isParameterizedType_ter ^ ^ ^ ^ ^ 
if(leftType.isParameterizedType()){

IfStatement condition MethodInvocation qualifier leftType_ter ^ ^ member isTemplateType_ter ^ ^ ^ ^ ^ 
if(leftType.isTemplateType()){

IfStatement condition MethodInvocation qualifier leftType_ter ^ ^ member hasAnyTemplateTypes_ter ^ ^ ^ ^ ^ 
if(leftType.hasAnyTemplateTypes()){

IfStatement condition MethodInvocation qualifier leftType_ter ^ ^ member hasAnyTemplateTypesInternal_ter ^ ^ ^ ^ ^ 
if(leftType.hasAnyTemplateTypesInternal()){

IfStatement condition MethodInvocation qualifier leftType_ter ^ ^ member isTemplatized_ter ^ ^ ^ ^ ^ 
if(leftType.isTemplatized()){

IfStatement condition MethodInvocation qualifier leftType_ter ^ ^ member isObject_ter ^ ^ ^ ^ ^ 
if(leftType.isObject()){

IfStatement condition MethodInvocation qualifier leftType_ter ^ ^ member isNominalType_ter ^ ^ ^ ^ ^ 
if(leftType.isNominalType()){

IfStatement condition MethodInvocation qualifier leftType_ter ^ ^ member isNominalConstructor_ter ^ ^ ^ ^ ^ 
if(leftType.isNominalConstructor()){

IfStatement condition MethodInvocation qualifier leftType_ter ^ ^ member isInstanceType_ter ^ ^ ^ ^ ^ 
if(leftType.isInstanceType()){

IfStatement condition MethodInvocation qualifier leftType_ter ^ ^ member isInterface_ter ^ ^ ^ ^ ^ 
if(leftType.isInterface()){

IfStatement condition MethodInvocation qualifier leftType_ter ^ ^ member isOrdinaryFunction_ter ^ ^ ^ ^ ^ 
if(leftType.isOrdinaryFunction()){

IfStatement condition MethodInvocation qualifier leftType_ter ^ ^ member matchesInt32Context_ter ^ ^ ^ ^ ^ 
if(leftType.matchesInt32Context()){

IfStatement condition MethodInvocation qualifier leftType_ter ^ ^ member matchesUint32Context_ter ^ ^ ^ ^ ^ 
if(leftType.matchesUint32Context()){

IfStatement condition MethodInvocation qualifier leftType_ter ^ ^ member matchesNumberContext_ter ^ ^ ^ ^ ^ 
if(leftType.matchesNumberContext()){

IfStatement condition MethodInvocation qualifier leftType_ter ^ ^ member matchesStringContext_ter ^ ^ ^ ^ ^ 
if(leftType.matchesStringContext()){

IfStatement condition MethodInvocation qualifier leftType_ter ^ ^ member matchesObjectContext_ter ^ ^ ^ ^ ^ 
if(leftType.matchesObjectContext()){

IfStatement condition MethodInvocation qualifier leftType_ter ^ ^ member canBeCalled_ter ^ ^ ^ ^ ^ 
if(leftType.canBeCalled()){

IfStatement condition MethodInvocation qualifier leftType_ter ^ ^ member isNullable_ter ^ ^ ^ ^ ^ 
if(leftType.isNullable()){

IfStatement condition MethodInvocation qualifier leftType_ter ^ ^ member isResolved_ter ^ ^ ^ ^ ^ 
if(leftType.isResolved()){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((rightType.isConstructor() && leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member hasDisplayName_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && !leftType.hasDisplayName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isNoType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && !leftType.isNoType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isNoResolvedType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && !leftType.isNoResolvedType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isNoObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && !leftType.isNoObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isEmptyType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && !leftType.isEmptyType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isNumberObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && !leftType.isNumberObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isNumberValueType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && !leftType.isNumberValueType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && !leftType.isFunctionPrototypeType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isStringObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && !leftType.isStringObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isTheObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && !leftType.isTheObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isStringValueType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && !leftType.isStringValueType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && !leftType.isString())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && !leftType.isNumber())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isArrayType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && !leftType.isArrayType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isBooleanObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && !leftType.isBooleanObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isBooleanValueType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && !leftType.isBooleanValueType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isRegexpType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && !leftType.isRegexpType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isDateType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && !leftType.isDateType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isNullType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && !leftType.isNullType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isVoidType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && !leftType.isVoidType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isAllType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && !leftType.isAllType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isUnknownType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && !leftType.isUnknownType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isCheckedUnknownType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && !leftType.isCheckedUnknownType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && !leftType.isUnionType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isStruct_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && !leftType.isStruct())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isDict_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && !leftType.isDict())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isGlobalThisType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && !leftType.isGlobalThisType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isFunctionType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && !leftType.isFunctionType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isEnumElementType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && !leftType.isEnumElementType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && !leftType.isEnumType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isNamedType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && !leftType.isNamedType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isRecordType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && !leftType.isRecordType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isParameterizedType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && !leftType.isParameterizedType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isTemplateType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && !leftType.isTemplateType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member hasAnyTemplateTypes_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && !leftType.hasAnyTemplateTypes())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member hasAnyTemplateTypesInternal_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && !leftType.hasAnyTemplateTypesInternal())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isTemplatized_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && !leftType.isTemplatized())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isObject_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && !leftType.isObject())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && !leftType.isConstructor())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isNominalType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && !leftType.isNominalType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isNominalConstructor_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && !leftType.isNominalConstructor())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isInstanceType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && !leftType.isInstanceType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isInterface_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && !leftType.isInterface())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isOrdinaryFunction_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && !leftType.isOrdinaryFunction())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member matchesInt32Context_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && !leftType.matchesInt32Context())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member matchesUint32Context_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && !leftType.matchesUint32Context())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member matchesNumberContext_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && !leftType.matchesNumberContext())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member matchesStringContext_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && !leftType.matchesStringContext())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member matchesObjectContext_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && !leftType.matchesObjectContext())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member canBeCalled_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && !leftType.canBeCalled())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isNullable_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && !leftType.isNullable())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isResolved_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && !leftType.isResolved())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || rightType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) || (rightType.isConstructor() || rightType.isEnumType()))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || rightType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType()))){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && ((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ 
if((leftType.isConstructor() && leftType.isEnumType())){

StatementExpression expression MethodInvocation arguments MemberReference member rightType_ter ^ ^ ^ MemberReference member leftType_ter ^ ^ ^ Literal value null_ter ^ ^ ^ ^ member registerMismatch_ter ^ ^ ^ ^ ^ 
registerMismatch(rightType, leftType, null);

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || leftType.isEnumType()))){
IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) || (rightType.isConstructor() || rightType.isEnumType()))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier t_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || t.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || n.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType()))){
ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ 
if (true) { return true; }

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member hasDisplayName_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && leftType.hasDisplayName()) && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isNoType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && leftType.isNoType()) && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isNoResolvedType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && leftType.isNoResolvedType()) && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isNoObjectType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && leftType.isNoObjectType()) && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEmptyType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && leftType.isEmptyType()) && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isNumberObjectType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && leftType.isNumberObjectType()) && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isNumberValueType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && leftType.isNumberValueType()) && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && leftType.isFunctionPrototypeType()) && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isStringObjectType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && leftType.isStringObjectType()) && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isTheObjectType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && leftType.isTheObjectType()) && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isStringValueType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && leftType.isStringValueType()) && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && leftType.isString()) && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && leftType.isNumber()) && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isArrayType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && leftType.isArrayType()) && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isBooleanObjectType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && leftType.isBooleanObjectType()) && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isBooleanValueType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && leftType.isBooleanValueType()) && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isRegexpType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && leftType.isRegexpType()) && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isDateType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && leftType.isDateType()) && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isNullType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && leftType.isNullType()) && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isVoidType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && leftType.isVoidType()) && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isAllType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && leftType.isAllType()) && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isUnknownType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && leftType.isUnknownType()) && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isCheckedUnknownType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && leftType.isCheckedUnknownType()) && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && leftType.isUnionType()) && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isStruct_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && leftType.isStruct()) && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isDict_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && leftType.isDict()) && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isGlobalThisType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && leftType.isGlobalThisType()) && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isFunctionType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && leftType.isFunctionType()) && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumElementType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && leftType.isEnumElementType()) && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isNamedType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && leftType.isNamedType()) && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isRecordType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && leftType.isRecordType()) && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isParameterizedType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && leftType.isParameterizedType()) && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isTemplateType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && leftType.isTemplateType()) && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member hasAnyTemplateTypes_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && leftType.hasAnyTemplateTypes()) && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member hasAnyTemplateTypesInternal_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && leftType.hasAnyTemplateTypesInternal()) && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isTemplatized_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && leftType.isTemplatized()) && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isObject_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && leftType.isObject()) && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && leftType.isConstructor()) && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isNominalType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && leftType.isNominalType()) && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isNominalConstructor_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && leftType.isNominalConstructor()) && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isInstanceType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && leftType.isInstanceType()) && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isInterface_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && leftType.isInterface()) && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isOrdinaryFunction_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && leftType.isOrdinaryFunction()) && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member matchesInt32Context_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && leftType.matchesInt32Context()) && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member matchesUint32Context_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && leftType.matchesUint32Context()) && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member matchesNumberContext_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && leftType.matchesNumberContext()) && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member matchesStringContext_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && leftType.matchesStringContext()) && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member matchesObjectContext_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && leftType.matchesObjectContext()) && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member canBeCalled_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && leftType.canBeCalled()) && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isNullable_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && leftType.isNullable()) && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isResolved_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && leftType.isResolved()) && (rightType.isConstructor() || rightType.isEnumType()))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member getOwnerFunction_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.getOwnerFunction() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType()))){
StatementExpression expression MethodInvocation arguments MemberReference member rightType_ter ^ ^ ^ MemberReference member leftType_ter ^ ^ ^ Literal value null_ter ^ ^ ^ ^ member registerMismatch_ter ^ ^ ^ ^ ^ 
registerMismatch(rightType, leftType, null);

StatementExpression expression MethodInvocation arguments MemberReference member rightType_ter ^ ^ ^ MemberReference member leftType_ter ^ ^ ^ Literal value null_ter ^ ^ ^ ^ member registerIfMismatch_ter ^ ^ ^ ^ ^ 
registerIfMismatch(rightType, leftType, null);

ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ 
return true;
ReturnStatement expression MethodInvocation arguments MemberReference member rightType_ter ^ ^ ^ MemberReference member leftType_ter ^ ^ ^ Literal value null_ter ^ ^ ^ ^ member registerMismatch_ter ^ ^ ^ ^ ^ 
return registerMismatch(rightType, leftType, null);
StatementExpression expression MethodInvocation arguments MemberReference member rightType_ter ^ ^ ^ MemberReference member rightType_ter ^ ^ ^ Literal value null_ter ^ ^ ^ ^ member registerMismatch_ter ^ ^ ^ ^ ^ 
registerMismatch(rightType, rightType, null);

StatementExpression expression MethodInvocation arguments MemberReference member t_ter ^ ^ ^ MemberReference member n_ter ^ ^ ^ BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl Literal value <string>_ter ^ ^ ^ ^ operandr MemberReference member propName_ter ^ ^ ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation arguments MemberReference member owner_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member getReadableJSTypeName_ter ^ ^ ^ ^ ^ MemberReference member rightType_ter ^ ^ ^ MemberReference member leftType_ter ^ ^ ^ ^ member mismatch_ter ^ ^ ^ ^ ^ 
mismatch(t, n, ((("null" + propName) + "null") + getReadableJSTypeName(owner, true)), rightType, leftType);

StatementExpression expression MethodInvocation arguments MemberReference member leftType_ter ^ ^ ^ MemberReference member leftType_ter ^ ^ ^ Literal value null_ter ^ ^ ^ ^ member registerMismatch_ter ^ ^ ^ ^ ^ 
registerMismatch(leftType, leftType, null);

StatementExpression expression MethodInvocation arguments MemberReference member rightType_ter ^ ^ ^ MemberReference member leftType_ter ^ ^ ^ Literal value false_ter ^ ^ ^ ^ member registerMismatch_ter ^ ^ ^ ^ ^ 
registerMismatch(rightType, leftType, false);

StatementExpression expression MethodInvocation arguments MemberReference member rightType_ter ^ ^ ^ MemberReference member leftType_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member registerMismatch_ter ^ ^ ^ ^ ^ 
registerMismatch(rightType, leftType, true);

ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
return false;
StatementExpression expression MethodInvocation arguments MemberReference member rightType_ter ^ ^ ^ MemberReference member owner_ter ^ ^ ^ Literal value null_ter ^ ^ ^ ^ member registerMismatch_ter ^ ^ ^ ^ ^ 
registerMismatch(rightType, owner, null);

StatementExpression expression MethodInvocation arguments MemberReference member t_ter ^ ^ ^ MemberReference member n_ter ^ ^ ^ BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl Literal value <string>_ter ^ ^ ^ ^ operandr MemberReference member propName_ter ^ ^ ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation arguments MemberReference member owner_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member getReadableJSTypeName_ter ^ ^ ^ ^ ^ MemberReference member rightType_ter ^ ^ ^ MemberReference member leftType_ter ^ ^ ^ ^ member mismatch_ter ^ ^ ^ ^ ^ 
mismatch(t, n, ((("null" + propName) + "null") + getReadableJSTypeName(owner, true)), rightType, leftType);

StatementExpression expression MethodInvocation arguments MemberReference member rightType_ter ^ ^ ^ ^ member registerMismatch_ter ^ ^ ^ ^ ^ 
registerMismatch(rightType);

StatementExpression expression MethodInvocation arguments MemberReference member owner_ter ^ ^ ^ MemberReference member leftType_ter ^ ^ ^ Literal value null_ter ^ ^ ^ ^ member registerMismatch_ter ^ ^ ^ ^ ^ 
registerMismatch(owner, leftType, null);

StatementExpression expression MethodInvocation member registerMismatch_ter ^ ^ ^ ^ ^ 
registerMismatch();

StatementExpression expression MethodInvocation arguments MemberReference member leftType_ter ^ ^ ^ ^ member registerMismatch_ter ^ ^ ^ ^ ^ 
registerMismatch(leftType);

StatementExpression expression MethodInvocation arguments MemberReference member rightType_ter ^ ^ ^ MemberReference member leftType_ter ^ ^ ^ ^ member registerMismatch_ter ^ ^ ^ ^ ^ 
registerMismatch(rightType, leftType);

StatementExpression expression MethodInvocation arguments MemberReference member rightType_ter ^ ^ ^ MemberReference member leftType_ter ^ ^ ^ MemberReference member owner_ter ^ ^ ^ ^ member registerMismatch_ter ^ ^ ^ ^ ^ 
registerMismatch(rightType, leftType, owner);

StatementExpression expression MethodInvocation arguments MemberReference member rightType_ter ^ ^ ^ Literal value null_ter ^ ^ ^ MemberReference member leftType_ter ^ ^ ^ ^ member registerMismatch_ter ^ ^ ^ ^ ^ 
registerMismatch(rightType, null, leftType);

StatementExpression expression MethodInvocation arguments MemberReference member owner_ter ^ ^ ^ ^ member registerMismatch_ter ^ ^ ^ ^ ^ 
registerMismatch(owner);

StatementExpression expression MethodInvocation arguments MemberReference member n_ter ^ ^ ^ ^ member registerMismatch_ter ^ ^ ^ ^ ^ 
registerMismatch(n);

StatementExpression expression MethodInvocation arguments MemberReference member rightType_ter ^ ^ ^ MemberReference member ownerType_ter ^ ^ ^ Literal value null_ter ^ ^ ^ ^ member registerMismatch_ter ^ ^ ^ ^ ^ 
registerMismatch(rightType, ownerType, null);

StatementExpression expression MethodInvocation arguments MemberReference member rightType_ter ^ ^ ^ MemberReference member n_ter ^ ^ ^ Literal value null_ter ^ ^ ^ ^ member registerMismatch_ter ^ ^ ^ ^ ^ 
registerMismatch(rightType, n, null);

StatementExpression expression MethodInvocation arguments MemberReference member rightType_ter ^ ^ ^ MemberReference member leftType_ter ^ ^ ^ Literal value null_ter ^ ^ ^ ^ member mismatch_ter ^ ^ ^ ^ ^ 
mismatch(rightType, leftType, null);

StatementExpression expression MethodInvocation arguments MemberReference member rightType_ter ^ ^ ^ MemberReference member propName_ter ^ ^ ^ Literal value null_ter ^ ^ ^ ^ member registerMismatch_ter ^ ^ ^ ^ ^ 
registerMismatch(rightType, propName, null);

StatementExpression expression MethodInvocation arguments MemberReference member rightType_ter ^ ^ ^ MemberReference member leftType_ter ^ ^ ^ Literal value null_ter ^ ^ ^ ^ member getJSType_ter ^ ^ ^ ^ ^ 
getJSType(rightType, leftType, null);

StatementExpression expression MethodInvocation arguments MemberReference member rightType_ter ^ ^ ^ MemberReference member leftType_ter ^ ^ ^ Literal value null_ter ^ ^ ^ Literal value null_ter ^ ^ ^ ^ member registerMismatch_ter ^ ^ ^ ^ ^ 
registerMismatch(rightType, leftType, null, null);

StatementExpression expression MethodInvocation arguments MemberReference member ownerType_ter ^ ^ ^ MemberReference member leftType_ter ^ ^ ^ Literal value null_ter ^ ^ ^ ^ member registerMismatch_ter ^ ^ ^ ^ ^ 
registerMismatch(ownerType, leftType, null);

StatementExpression expression MethodInvocation arguments MemberReference member rightType_ter ^ ^ ^ MemberReference member leftType_ter ^ ^ ^ MemberReference member leftType_ter ^ ^ ^ ^ member registerMismatch_ter ^ ^ ^ ^ ^ 
registerMismatch(rightType, leftType, leftType);


StatementExpression expression MethodInvocation arguments MemberReference member n_ter ^ ^ ^ MemberReference member leftType_ter ^ ^ ^ Literal value null_ter ^ ^ ^ ^ member registerMismatch_ter ^ ^ ^ ^ ^ 
registerMismatch(n, leftType, null);

StatementExpression expression MethodInvocation arguments MemberReference member rightType_ter ^ ^ ^ MemberReference member t_ter ^ ^ ^ Literal value null_ter ^ ^ ^ ^ member registerMismatch_ter ^ ^ ^ ^ ^ 
registerMismatch(rightType, t, null);

StatementExpression expression MethodInvocation arguments MemberReference member rightType_ter ^ ^ ^ MemberReference member rightType_ter ^ ^ ^ MemberReference member owner_ter ^ ^ ^ ^ member registerMismatch_ter ^ ^ ^ ^ ^ 
registerMismatch(rightType, rightType, owner);

StatementExpression expression MethodInvocation arguments MemberReference member owner_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member registerMismatch_ter ^ ^ ^ ^ ^ 
registerMismatch(owner, true);

StatementExpression expression MethodInvocation arguments MemberReference member n_ter ^ ^ ^ MemberReference member leftType_ter ^ ^ ^ ^ member registerMismatch_ter ^ ^ ^ ^ ^ 
registerMismatch(n, leftType);

StatementExpression expression MethodInvocation arguments MemberReference member propName_ter ^ ^ ^ MemberReference member leftType_ter ^ ^ ^ Literal value null_ter ^ ^ ^ ^ member registerMismatch_ter ^ ^ ^ ^ ^ 
registerMismatch(propName, leftType, null);

ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ 
if (true) { return true; }

StatementExpression expression MethodInvocation arguments MemberReference member rightType_ter ^ ^ ^ MemberReference member leftType_ter ^ ^ ^ Literal value null_ter ^ ^ ^ MemberReference member owner_ter ^ ^ ^ ^ member registerMismatch_ter ^ ^ ^ ^ ^ 
registerMismatch(rightType, leftType, null, owner);

StatementExpression expression MethodInvocation arguments MemberReference member n_ter ^ ^ ^ MemberReference member leftType_ter ^ ^ ^ MemberReference member owner_ter ^ ^ ^ ^ member registerMismatch_ter ^ ^ ^ ^ ^ 
registerMismatch(n, leftType, owner);

StatementExpression expression MethodInvocation arguments MemberReference member rightType_ter ^ ^ ^ MemberReference member rightType_ter ^ ^ ^ ^ member registerMismatch_ter ^ ^ ^ ^ ^ 
registerMismatch(rightType, rightType);

StatementExpression expression MethodInvocation arguments MemberReference member rightType_ter ^ ^ ^ Literal value null_ter ^ ^ ^ ^ member registerMismatch_ter ^ ^ ^ ^ ^ 
registerMismatch(rightType, null);

StatementExpression expression MethodInvocation arguments MemberReference member rightType_ter ^ ^ ^ MemberReference member rightType_ter ^ ^ ^ MemberReference member leftType_ter ^ ^ ^ ^ member registerMismatch_ter ^ ^ ^ ^ ^ 
registerMismatch(rightType, rightType, leftType);

StatementExpression expression MethodInvocation arguments MemberReference member rightType_ter ^ ^ ^ Literal value null_ter ^ ^ ^ MemberReference member owner_ter ^ ^ ^ ^ member registerMismatch_ter ^ ^ ^ ^ ^ 
registerMismatch(rightType, null, owner);

StatementExpression expression MethodInvocation arguments MemberReference member rightType_ter ^ ^ ^ Literal value null_ter ^ ^ ^ MemberReference member rightType_ter ^ ^ ^ ^ member registerMismatch_ter ^ ^ ^ ^ ^ 
registerMismatch(rightType, null, rightType);

IfStatement condition MethodInvocation arguments MemberReference member rightType_ter ^ ^ ^ MemberReference member leftType_ter ^ ^ ^ Literal value null_ter ^ ^ ^ ^ member registerMismatch_ter ^ ^ ^ ^ ^ 
if(registerMismatch(rightType, leftType, null)){


StatementExpression expression MethodInvocation arguments MemberReference member t_ter ^ ^ ^ MemberReference member leftType_ter ^ ^ ^ Literal value null_ter ^ ^ ^ ^ member registerMismatch_ter ^ ^ ^ ^ ^ 
registerMismatch(t, leftType, null);

StatementExpression expression MethodInvocation arguments MemberReference member n_ter ^ ^ ^ MemberReference member rightType_ter ^ ^ ^ MemberReference member leftType_ter ^ ^ ^ ^ member registerMismatch_ter ^ ^ ^ ^ ^ 
registerMismatch(n, rightType, leftType);

StatementExpression expression MethodInvocation arguments MemberReference member rightType_ter ^ ^ ^ MemberReference member leftType_ter ^ ^ ^ Literal value null_ter ^ ^ ^ MemberReference member leftType_ter ^ ^ ^ ^ member registerMismatch_ter ^ ^ ^ ^ ^ 
registerMismatch(rightType, leftType, null, leftType);

StatementExpression expression MethodInvocation arguments MemberReference member rightType_ter ^ ^ ^ MemberReference member e_ter ^ ^ ^ Literal value null_ter ^ ^ ^ ^ member registerMismatch_ter ^ ^ ^ ^ ^ 
registerMismatch(rightType, e, null);

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ 
if((leftType.isConstructor() || leftType.isEnumType())){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member hasDisplayName_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.hasDisplayName()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isNoType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isNoType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isNoResolvedType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isNoResolvedType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isNoObjectType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isNoObjectType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEmptyType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEmptyType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isNumberObjectType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isNumberObjectType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isNumberValueType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isNumberValueType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isFunctionPrototypeType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isStringObjectType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isStringObjectType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isTheObjectType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isTheObjectType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isStringValueType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isStringValueType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isString()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isNumber()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isArrayType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isArrayType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isBooleanObjectType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isBooleanObjectType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isBooleanValueType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isBooleanValueType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isRegexpType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isRegexpType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isDateType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isDateType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isNullType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isNullType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isVoidType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isVoidType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isAllType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isAllType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isUnknownType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isUnknownType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isCheckedUnknownType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isCheckedUnknownType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isUnionType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isStruct_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isStruct()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isDict_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isDict()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isGlobalThisType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isGlobalThisType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isFunctionType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isFunctionType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumElementType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumElementType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isNamedType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isNamedType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isRecordType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isRecordType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isParameterizedType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isParameterizedType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isTemplateType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isTemplateType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member hasAnyTemplateTypes_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.hasAnyTemplateTypes()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member hasAnyTemplateTypesInternal_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.hasAnyTemplateTypesInternal()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isTemplatized_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isTemplatized()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isObject_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isObject()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isConstructor()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isNominalType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isNominalType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isNominalConstructor_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isNominalConstructor()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isInstanceType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isInstanceType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isInterface_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isInterface()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isOrdinaryFunction_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isOrdinaryFunction()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member matchesInt32Context_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.matchesInt32Context()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member matchesUint32Context_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.matchesUint32Context()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member matchesNumberContext_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.matchesNumberContext()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member matchesStringContext_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.matchesStringContext()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member matchesObjectContext_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.matchesObjectContext()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member canBeCalled_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.canBeCalled()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isNullable_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isNullable()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isResolved_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isResolved()))){
IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ 
if((rightType.isConstructor() || rightType.isEnumType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((leftType.isConstructor() && (rightType.isConstructor() || rightType.isEnumType()))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member hasDisplayName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.hasDisplayName() || rightType.isEnumType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isNoType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isNoType() || rightType.isEnumType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isNoResolvedType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isNoResolvedType() || rightType.isEnumType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isNoObjectType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isNoObjectType() || rightType.isEnumType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isEmptyType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isEmptyType() || rightType.isEnumType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isNumberObjectType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isNumberObjectType() || rightType.isEnumType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isNumberValueType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isNumberValueType() || rightType.isEnumType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isFunctionPrototypeType() || rightType.isEnumType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isStringObjectType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isStringObjectType() || rightType.isEnumType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isTheObjectType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isTheObjectType() || rightType.isEnumType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isStringValueType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isStringValueType() || rightType.isEnumType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isString_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isString() || rightType.isEnumType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isNumber_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isNumber() || rightType.isEnumType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isArrayType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isArrayType() || rightType.isEnumType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isBooleanObjectType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isBooleanObjectType() || rightType.isEnumType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isBooleanValueType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isBooleanValueType() || rightType.isEnumType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isRegexpType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isRegexpType() || rightType.isEnumType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isDateType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isDateType() || rightType.isEnumType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isNullType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isNullType() || rightType.isEnumType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isVoidType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isVoidType() || rightType.isEnumType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isAllType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isAllType() || rightType.isEnumType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isUnknownType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isUnknownType() || rightType.isEnumType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isCheckedUnknownType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isCheckedUnknownType() || rightType.isEnumType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isUnionType() || rightType.isEnumType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isStruct_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isStruct() || rightType.isEnumType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isDict_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isDict() || rightType.isEnumType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isGlobalThisType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isGlobalThisType() || rightType.isEnumType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isFunctionType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isFunctionType() || rightType.isEnumType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isEnumElementType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isEnumElementType() || rightType.isEnumType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isEnumType() || rightType.isEnumType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isNamedType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isNamedType() || rightType.isEnumType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isRecordType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isRecordType() || rightType.isEnumType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isParameterizedType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isParameterizedType() || rightType.isEnumType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isTemplateType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isTemplateType() || rightType.isEnumType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member hasAnyTemplateTypes_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.hasAnyTemplateTypes() || rightType.isEnumType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member hasAnyTemplateTypesInternal_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.hasAnyTemplateTypesInternal() || rightType.isEnumType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isTemplatized_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isTemplatized() || rightType.isEnumType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isObject_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isObject() || rightType.isEnumType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isNominalType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isNominalType() || rightType.isEnumType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isNominalConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isNominalConstructor() || rightType.isEnumType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isInstanceType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isInstanceType() || rightType.isEnumType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isInterface_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isInterface() || rightType.isEnumType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isOrdinaryFunction_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isOrdinaryFunction() || rightType.isEnumType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member matchesInt32Context_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.matchesInt32Context() || rightType.isEnumType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member matchesUint32Context_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.matchesUint32Context() || rightType.isEnumType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member matchesNumberContext_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.matchesNumberContext() || rightType.isEnumType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member matchesStringContext_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.matchesStringContext() || rightType.isEnumType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member matchesObjectContext_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.matchesObjectContext() || rightType.isEnumType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member canBeCalled_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.canBeCalled() || rightType.isEnumType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isNullable_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isNullable() || rightType.isEnumType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isResolved_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isResolved() || rightType.isEnumType()))){
IfStatement condition MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ ^ 
if(leftType.isConstructor()){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member getName_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.getName()))){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() && leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ 
if(leftType.isEnumType()){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (leftType.isConstructor() || leftType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() && rightType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member hasDisplayName_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && leftType.hasDisplayName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isNoType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && leftType.isNoType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isNoResolvedType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && leftType.isNoResolvedType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isNoObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && leftType.isNoObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEmptyType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && leftType.isEmptyType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isNumberObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && leftType.isNumberObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isNumberValueType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && leftType.isNumberValueType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && leftType.isFunctionPrototypeType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isStringObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && leftType.isStringObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isTheObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && leftType.isTheObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isStringValueType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && leftType.isStringValueType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && leftType.isString())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && leftType.isNumber())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isArrayType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && leftType.isArrayType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isBooleanObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && leftType.isBooleanObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isBooleanValueType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && leftType.isBooleanValueType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isRegexpType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && leftType.isRegexpType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isDateType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && leftType.isDateType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isNullType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && leftType.isNullType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isVoidType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && leftType.isVoidType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isAllType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && leftType.isAllType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isUnknownType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && leftType.isUnknownType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isCheckedUnknownType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && leftType.isCheckedUnknownType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && leftType.isUnionType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isStruct_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && leftType.isStruct())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isDict_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && leftType.isDict())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isGlobalThisType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && leftType.isGlobalThisType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isFunctionType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && leftType.isFunctionType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumElementType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && leftType.isEnumElementType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && leftType.isEnumType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isNamedType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && leftType.isNamedType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isRecordType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && leftType.isRecordType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isParameterizedType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && leftType.isParameterizedType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isTemplateType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && leftType.isTemplateType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member hasAnyTemplateTypes_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && leftType.hasAnyTemplateTypes())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member hasAnyTemplateTypesInternal_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && leftType.hasAnyTemplateTypesInternal())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isTemplatized_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && leftType.isTemplatized())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isObject_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && leftType.isObject())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && leftType.isConstructor())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isNominalType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && leftType.isNominalType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isNominalConstructor_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && leftType.isNominalConstructor())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isInstanceType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && leftType.isInstanceType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isInterface_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && leftType.isInterface())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isOrdinaryFunction_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && leftType.isOrdinaryFunction())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member matchesInt32Context_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && leftType.matchesInt32Context())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member matchesUint32Context_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && leftType.matchesUint32Context())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member matchesNumberContext_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && leftType.matchesNumberContext())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member matchesStringContext_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && leftType.matchesStringContext())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member matchesObjectContext_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && leftType.matchesObjectContext())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member canBeCalled_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && leftType.canBeCalled())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isNullable_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && leftType.isNullable())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isResolved_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && leftType.isResolved())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member hasDisplayName_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && leftType.hasDisplayName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isNoType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && leftType.isNoType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isNoResolvedType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && leftType.isNoResolvedType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isNoObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && leftType.isNoObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEmptyType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && leftType.isEmptyType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isNumberObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && leftType.isNumberObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isNumberValueType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && leftType.isNumberValueType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && leftType.isFunctionPrototypeType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isStringObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && leftType.isStringObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isTheObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && leftType.isTheObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isStringValueType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && leftType.isStringValueType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && leftType.isString())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && leftType.isNumber())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isArrayType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && leftType.isArrayType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isBooleanObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && leftType.isBooleanObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isBooleanValueType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && leftType.isBooleanValueType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isRegexpType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && leftType.isRegexpType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isDateType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && leftType.isDateType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isNullType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && leftType.isNullType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isVoidType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && leftType.isVoidType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isAllType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && leftType.isAllType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isUnknownType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && leftType.isUnknownType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isCheckedUnknownType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && leftType.isCheckedUnknownType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && leftType.isUnionType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isStruct_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && leftType.isStruct())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isDict_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && leftType.isDict())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isGlobalThisType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && leftType.isGlobalThisType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isFunctionType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && leftType.isFunctionType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumElementType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && leftType.isEnumElementType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && leftType.isEnumType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isNamedType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && leftType.isNamedType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isRecordType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && leftType.isRecordType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isParameterizedType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && leftType.isParameterizedType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isTemplateType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && leftType.isTemplateType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member hasAnyTemplateTypes_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && leftType.hasAnyTemplateTypes())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member hasAnyTemplateTypesInternal_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && leftType.hasAnyTemplateTypesInternal())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isTemplatized_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && leftType.isTemplatized())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isObject_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && leftType.isObject())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && leftType.isConstructor())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isNominalType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && leftType.isNominalType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isNominalConstructor_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && leftType.isNominalConstructor())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isInstanceType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && leftType.isInstanceType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isInterface_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && leftType.isInterface())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isOrdinaryFunction_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && leftType.isOrdinaryFunction())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member matchesInt32Context_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && leftType.matchesInt32Context())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member matchesUint32Context_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && leftType.matchesUint32Context())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member matchesNumberContext_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && leftType.matchesNumberContext())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member matchesStringContext_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && leftType.matchesStringContext())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member matchesObjectContext_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && leftType.matchesObjectContext())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member canBeCalled_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && leftType.canBeCalled())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isNullable_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && leftType.isNullable())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isResolved_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && leftType.isResolved())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() && (rightType.isConstructor() || rightType.isEnumType())) && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && (rightType.isConstructor() || rightType.isEnumType())) && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ 
if((leftType.isConstructor() && leftType.isEnumType())){

IfStatement condition MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ ^ 
if(rightType.isConstructor()){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((rightType.isConstructor() && (rightType.isConstructor() || rightType.isEnumType()))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() && rightType.isEnumType()))){
IfStatement condition MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ 
if(rightType.isEnumType()){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && ((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member hasDisplayName_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && rightType.hasDisplayName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isNoType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && rightType.isNoType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isNoResolvedType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && rightType.isNoResolvedType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isNoObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && rightType.isNoObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEmptyType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && rightType.isEmptyType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isNumberObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && rightType.isNumberObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isNumberValueType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && rightType.isNumberValueType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && rightType.isFunctionPrototypeType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isStringObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && rightType.isStringObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isTheObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && rightType.isTheObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isStringValueType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && rightType.isStringValueType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && rightType.isString())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && rightType.isNumber())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isArrayType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && rightType.isArrayType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isBooleanObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && rightType.isBooleanObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isBooleanValueType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && rightType.isBooleanValueType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isRegexpType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && rightType.isRegexpType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isDateType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && rightType.isDateType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isNullType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && rightType.isNullType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isVoidType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && rightType.isVoidType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isAllType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && rightType.isAllType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isUnknownType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && rightType.isUnknownType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isCheckedUnknownType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && rightType.isCheckedUnknownType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && rightType.isUnionType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isStruct_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && rightType.isStruct())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isDict_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && rightType.isDict())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isGlobalThisType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && rightType.isGlobalThisType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isFunctionType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && rightType.isFunctionType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumElementType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && rightType.isEnumElementType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && rightType.isEnumType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isNamedType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && rightType.isNamedType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isRecordType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && rightType.isRecordType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isParameterizedType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && rightType.isParameterizedType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isTemplateType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && rightType.isTemplateType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member hasAnyTemplateTypes_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && rightType.hasAnyTemplateTypes())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member hasAnyTemplateTypesInternal_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && rightType.hasAnyTemplateTypesInternal())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isTemplatized_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && rightType.isTemplatized())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isObject_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && rightType.isObject())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && rightType.isConstructor())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isNominalType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && rightType.isNominalType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isNominalConstructor_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && rightType.isNominalConstructor())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isInstanceType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && rightType.isInstanceType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isInterface_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && rightType.isInterface())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isOrdinaryFunction_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && rightType.isOrdinaryFunction())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member matchesInt32Context_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && rightType.matchesInt32Context())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member matchesUint32Context_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && rightType.matchesUint32Context())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member matchesNumberContext_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && rightType.matchesNumberContext())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member matchesStringContext_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && rightType.matchesStringContext())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member matchesObjectContext_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && rightType.matchesObjectContext())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member canBeCalled_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && rightType.canBeCalled())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isNullable_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && rightType.isNullable())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isResolved_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && rightType.isResolved())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member hasDisplayName_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && rightType.hasDisplayName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isNoType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && rightType.isNoType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isNoResolvedType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && rightType.isNoResolvedType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isNoObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && rightType.isNoObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEmptyType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && rightType.isEmptyType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isNumberObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && rightType.isNumberObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isNumberValueType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && rightType.isNumberValueType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && rightType.isFunctionPrototypeType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isStringObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && rightType.isStringObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isTheObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && rightType.isTheObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isStringValueType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && rightType.isStringValueType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && rightType.isString())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && rightType.isNumber())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isArrayType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && rightType.isArrayType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isBooleanObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && rightType.isBooleanObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isBooleanValueType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && rightType.isBooleanValueType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isRegexpType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && rightType.isRegexpType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isDateType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && rightType.isDateType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isNullType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && rightType.isNullType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isVoidType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && rightType.isVoidType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isAllType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && rightType.isAllType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isUnknownType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && rightType.isUnknownType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isCheckedUnknownType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && rightType.isCheckedUnknownType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && rightType.isUnionType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isStruct_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && rightType.isStruct())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isDict_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && rightType.isDict())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isGlobalThisType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && rightType.isGlobalThisType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isFunctionType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && rightType.isFunctionType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumElementType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && rightType.isEnumElementType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && rightType.isEnumType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isNamedType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && rightType.isNamedType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isRecordType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && rightType.isRecordType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isParameterizedType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && rightType.isParameterizedType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isTemplateType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && rightType.isTemplateType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member hasAnyTemplateTypes_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && rightType.hasAnyTemplateTypes())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member hasAnyTemplateTypesInternal_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && rightType.hasAnyTemplateTypesInternal())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isTemplatized_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && rightType.isTemplatized())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isObject_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && rightType.isObject())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && rightType.isConstructor())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isNominalType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && rightType.isNominalType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isNominalConstructor_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && rightType.isNominalConstructor())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isInstanceType_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && rightType.isInstanceType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isInterface_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && rightType.isInterface())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isOrdinaryFunction_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && rightType.isOrdinaryFunction())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member matchesInt32Context_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && rightType.matchesInt32Context())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member matchesUint32Context_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && rightType.matchesUint32Context())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member matchesNumberContext_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && rightType.matchesNumberContext())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member matchesStringContext_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && rightType.matchesStringContext())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member matchesObjectContext_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && rightType.matchesObjectContext())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member canBeCalled_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && rightType.canBeCalled())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isNullable_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && rightType.isNullable())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isResolved_ter ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && rightType.isResolved())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && (leftType.isConstructor() || leftType.isEnumType()))){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) || (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((leftType.isConstructor() || (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) || (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member hasDisplayName_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !leftType.hasDisplayName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isNoType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !leftType.isNoType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isNoResolvedType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !leftType.isNoResolvedType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isNoObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !leftType.isNoObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isEmptyType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !leftType.isEmptyType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isNumberObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !leftType.isNumberObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isNumberValueType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !leftType.isNumberValueType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !leftType.isFunctionPrototypeType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isStringObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !leftType.isStringObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isTheObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !leftType.isTheObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isStringValueType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !leftType.isStringValueType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !leftType.isString())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !leftType.isNumber())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isArrayType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !leftType.isArrayType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isBooleanObjectType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !leftType.isBooleanObjectType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isBooleanValueType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !leftType.isBooleanValueType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isRegexpType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !leftType.isRegexpType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isDateType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !leftType.isDateType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isNullType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !leftType.isNullType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isVoidType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !leftType.isVoidType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isAllType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !leftType.isAllType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isUnknownType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !leftType.isUnknownType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isCheckedUnknownType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !leftType.isCheckedUnknownType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !leftType.isUnionType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isStruct_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !leftType.isStruct())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isDict_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !leftType.isDict())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isGlobalThisType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !leftType.isGlobalThisType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isFunctionType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !leftType.isFunctionType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isEnumElementType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !leftType.isEnumElementType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !leftType.isEnumType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isNamedType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !leftType.isNamedType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isRecordType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !leftType.isRecordType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isParameterizedType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !leftType.isParameterizedType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isTemplateType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !leftType.isTemplateType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member hasAnyTemplateTypes_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !leftType.hasAnyTemplateTypes())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member hasAnyTemplateTypesInternal_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !leftType.hasAnyTemplateTypesInternal())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isTemplatized_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !leftType.isTemplatized())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isObject_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !leftType.isObject())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !leftType.isConstructor())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isNominalType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !leftType.isNominalType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isNominalConstructor_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !leftType.isNominalConstructor())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isInstanceType_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !leftType.isInstanceType())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isInterface_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !leftType.isInterface())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isOrdinaryFunction_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !leftType.isOrdinaryFunction())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member matchesInt32Context_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !leftType.matchesInt32Context())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member matchesUint32Context_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !leftType.matchesUint32Context())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member matchesNumberContext_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !leftType.matchesNumberContext())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member matchesStringContext_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !leftType.matchesStringContext())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member matchesObjectContext_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !leftType.matchesObjectContext())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member canBeCalled_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !leftType.canBeCalled())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isNullable_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !leftType.isNullable())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier leftType_ter ^ ^ member isResolved_ter ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && !leftType.isResolved())){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member expectCanAssignTo_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.expectCanAssignTo()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member toString_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.toString()))){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && ((rightType.isConstructor() || rightType.isEnumType()) || (rightType.isConstructor() || rightType.isEnumType())))){

IfStatement condition MethodInvocation qualifier leftType_ter ^ ^ member hasDisplayName_ter ^ ^ ^ ^ ^ 
if(leftType.hasDisplayName()){

IfStatement condition MethodInvocation qualifier leftType_ter ^ ^ member isNoType_ter ^ ^ ^ ^ ^ 
if(leftType.isNoType()){

IfStatement condition MethodInvocation qualifier leftType_ter ^ ^ member isNoResolvedType_ter ^ ^ ^ ^ ^ 
if(leftType.isNoResolvedType()){

IfStatement condition MethodInvocation qualifier leftType_ter ^ ^ member isNoObjectType_ter ^ ^ ^ ^ ^ 
if(leftType.isNoObjectType()){

IfStatement condition MethodInvocation qualifier leftType_ter ^ ^ member isEmptyType_ter ^ ^ ^ ^ ^ 
if(leftType.isEmptyType()){

IfStatement condition MethodInvocation qualifier leftType_ter ^ ^ member isNumberObjectType_ter ^ ^ ^ ^ ^ 
if(leftType.isNumberObjectType()){

IfStatement condition MethodInvocation qualifier leftType_ter ^ ^ member isNumberValueType_ter ^ ^ ^ ^ ^ 
if(leftType.isNumberValueType()){

IfStatement condition MethodInvocation qualifier leftType_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ ^ 
if(leftType.isFunctionPrototypeType()){

IfStatement condition MethodInvocation qualifier leftType_ter ^ ^ member isStringObjectType_ter ^ ^ ^ ^ ^ 
if(leftType.isStringObjectType()){

IfStatement condition MethodInvocation qualifier leftType_ter ^ ^ member isTheObjectType_ter ^ ^ ^ ^ ^ 
if(leftType.isTheObjectType()){

IfStatement condition MethodInvocation qualifier leftType_ter ^ ^ member isStringValueType_ter ^ ^ ^ ^ ^ 
if(leftType.isStringValueType()){

IfStatement condition MethodInvocation qualifier leftType_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ 
if(leftType.isString()){

IfStatement condition MethodInvocation qualifier leftType_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ 
if(leftType.isNumber()){

IfStatement condition MethodInvocation qualifier leftType_ter ^ ^ member isArrayType_ter ^ ^ ^ ^ ^ 
if(leftType.isArrayType()){

IfStatement condition MethodInvocation qualifier leftType_ter ^ ^ member isBooleanObjectType_ter ^ ^ ^ ^ ^ 
if(leftType.isBooleanObjectType()){

IfStatement condition MethodInvocation qualifier leftType_ter ^ ^ member isBooleanValueType_ter ^ ^ ^ ^ ^ 
if(leftType.isBooleanValueType()){

IfStatement condition MethodInvocation qualifier leftType_ter ^ ^ member isRegexpType_ter ^ ^ ^ ^ ^ 
if(leftType.isRegexpType()){

IfStatement condition MethodInvocation qualifier leftType_ter ^ ^ member isDateType_ter ^ ^ ^ ^ ^ 
if(leftType.isDateType()){

IfStatement condition MethodInvocation qualifier leftType_ter ^ ^ member isNullType_ter ^ ^ ^ ^ ^ 
if(leftType.isNullType()){

IfStatement condition MethodInvocation qualifier leftType_ter ^ ^ member isVoidType_ter ^ ^ ^ ^ ^ 
if(leftType.isVoidType()){

IfStatement condition MethodInvocation qualifier leftType_ter ^ ^ member isAllType_ter ^ ^ ^ ^ ^ 
if(leftType.isAllType()){

IfStatement condition MethodInvocation qualifier leftType_ter ^ ^ member isUnknownType_ter ^ ^ ^ ^ ^ 
if(leftType.isUnknownType()){

IfStatement condition MethodInvocation qualifier leftType_ter ^ ^ member isCheckedUnknownType_ter ^ ^ ^ ^ ^ 
if(leftType.isCheckedUnknownType()){

IfStatement condition MethodInvocation qualifier leftType_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ 
if(leftType.isUnionType()){

IfStatement condition MethodInvocation qualifier leftType_ter ^ ^ member isStruct_ter ^ ^ ^ ^ ^ 
if(leftType.isStruct()){

IfStatement condition MethodInvocation qualifier leftType_ter ^ ^ member isDict_ter ^ ^ ^ ^ ^ 
if(leftType.isDict()){

IfStatement condition MethodInvocation qualifier leftType_ter ^ ^ member isGlobalThisType_ter ^ ^ ^ ^ ^ 
if(leftType.isGlobalThisType()){

IfStatement condition MethodInvocation qualifier leftType_ter ^ ^ member isFunctionType_ter ^ ^ ^ ^ ^ 
if(leftType.isFunctionType()){

IfStatement condition MethodInvocation qualifier leftType_ter ^ ^ member isEnumElementType_ter ^ ^ ^ ^ ^ 
if(leftType.isEnumElementType()){

IfStatement condition MethodInvocation qualifier leftType_ter ^ ^ member isNamedType_ter ^ ^ ^ ^ ^ 
if(leftType.isNamedType()){

IfStatement condition MethodInvocation qualifier leftType_ter ^ ^ member isRecordType_ter ^ ^ ^ ^ ^ 
if(leftType.isRecordType()){

IfStatement condition MethodInvocation qualifier leftType_ter ^ ^ member isParameterizedType_ter ^ ^ ^ ^ ^ 
if(leftType.isParameterizedType()){

IfStatement condition MethodInvocation qualifier leftType_ter ^ ^ member isTemplateType_ter ^ ^ ^ ^ ^ 
if(leftType.isTemplateType()){

IfStatement condition MethodInvocation qualifier leftType_ter ^ ^ member hasAnyTemplateTypes_ter ^ ^ ^ ^ ^ 
if(leftType.hasAnyTemplateTypes()){

IfStatement condition MethodInvocation qualifier leftType_ter ^ ^ member hasAnyTemplateTypesInternal_ter ^ ^ ^ ^ ^ 
if(leftType.hasAnyTemplateTypesInternal()){

IfStatement condition MethodInvocation qualifier leftType_ter ^ ^ member isTemplatized_ter ^ ^ ^ ^ ^ 
if(leftType.isTemplatized()){

IfStatement condition MethodInvocation qualifier leftType_ter ^ ^ member isObject_ter ^ ^ ^ ^ ^ 
if(leftType.isObject()){

IfStatement condition MethodInvocation qualifier leftType_ter ^ ^ member isNominalType_ter ^ ^ ^ ^ ^ 
if(leftType.isNominalType()){

IfStatement condition MethodInvocation qualifier leftType_ter ^ ^ member isNominalConstructor_ter ^ ^ ^ ^ ^ 
if(leftType.isNominalConstructor()){

IfStatement condition MethodInvocation qualifier leftType_ter ^ ^ member isInstanceType_ter ^ ^ ^ ^ ^ 
if(leftType.isInstanceType()){

IfStatement condition MethodInvocation qualifier leftType_ter ^ ^ member isInterface_ter ^ ^ ^ ^ ^ 
if(leftType.isInterface()){

IfStatement condition MethodInvocation qualifier leftType_ter ^ ^ member isOrdinaryFunction_ter ^ ^ ^ ^ ^ 
if(leftType.isOrdinaryFunction()){

IfStatement condition MethodInvocation qualifier leftType_ter ^ ^ member matchesInt32Context_ter ^ ^ ^ ^ ^ 
if(leftType.matchesInt32Context()){

IfStatement condition MethodInvocation qualifier leftType_ter ^ ^ member matchesUint32Context_ter ^ ^ ^ ^ ^ 
if(leftType.matchesUint32Context()){

IfStatement condition MethodInvocation qualifier leftType_ter ^ ^ member matchesNumberContext_ter ^ ^ ^ ^ ^ 
if(leftType.matchesNumberContext()){

IfStatement condition MethodInvocation qualifier leftType_ter ^ ^ member matchesStringContext_ter ^ ^ ^ ^ ^ 
if(leftType.matchesStringContext()){

IfStatement condition MethodInvocation qualifier leftType_ter ^ ^ member matchesObjectContext_ter ^ ^ ^ ^ ^ 
if(leftType.matchesObjectContext()){

IfStatement condition MethodInvocation qualifier leftType_ter ^ ^ member canBeCalled_ter ^ ^ ^ ^ ^ 
if(leftType.canBeCalled()){

IfStatement condition MethodInvocation qualifier leftType_ter ^ ^ member isNullable_ter ^ ^ ^ ^ ^ 
if(leftType.isNullable()){

IfStatement condition MethodInvocation qualifier leftType_ter ^ ^ member isResolved_ter ^ ^ ^ ^ ^ 
if(leftType.isResolved()){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((rightType.isConstructor() || rightType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((leftType.isConstructor() && ((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member hasDisplayName_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && leftType.hasDisplayName()) && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isNoType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && leftType.isNoType()) && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isNoResolvedType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && leftType.isNoResolvedType()) && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isNoObjectType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && leftType.isNoObjectType()) && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEmptyType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && leftType.isEmptyType()) && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isNumberObjectType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && leftType.isNumberObjectType()) && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isNumberValueType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && leftType.isNumberValueType()) && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isFunctionPrototypeType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && leftType.isFunctionPrototypeType()) && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isStringObjectType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && leftType.isStringObjectType()) && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isTheObjectType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && leftType.isTheObjectType()) && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isStringValueType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && leftType.isStringValueType()) && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && leftType.isString()) && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && leftType.isNumber()) && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isArrayType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && leftType.isArrayType()) && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isBooleanObjectType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && leftType.isBooleanObjectType()) && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isBooleanValueType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && leftType.isBooleanValueType()) && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isRegexpType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && leftType.isRegexpType()) && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isDateType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && leftType.isDateType()) && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isNullType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && leftType.isNullType()) && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isVoidType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && leftType.isVoidType()) && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isAllType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && leftType.isAllType()) && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isUnknownType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && leftType.isUnknownType()) && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isCheckedUnknownType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && leftType.isCheckedUnknownType()) && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isUnionType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && leftType.isUnionType()) && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isStruct_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && leftType.isStruct()) && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isDict_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && leftType.isDict()) && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isGlobalThisType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && leftType.isGlobalThisType()) && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isFunctionType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && leftType.isFunctionType()) && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumElementType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && leftType.isEnumElementType()) && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isNamedType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && leftType.isNamedType()) && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isRecordType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && leftType.isRecordType()) && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isParameterizedType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && leftType.isParameterizedType()) && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isTemplateType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && leftType.isTemplateType()) && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member hasAnyTemplateTypes_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && leftType.hasAnyTemplateTypes()) && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member hasAnyTemplateTypesInternal_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && leftType.hasAnyTemplateTypesInternal()) && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isTemplatized_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && leftType.isTemplatized()) && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isObject_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && leftType.isObject()) && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && leftType.isConstructor()) && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isNominalType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && leftType.isNominalType()) && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isNominalConstructor_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && leftType.isNominalConstructor()) && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isInstanceType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && leftType.isInstanceType()) && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isInterface_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && leftType.isInterface()) && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isOrdinaryFunction_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && leftType.isOrdinaryFunction()) && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member matchesInt32Context_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && leftType.matchesInt32Context()) && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member matchesUint32Context_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && leftType.matchesUint32Context()) && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member matchesNumberContext_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && leftType.matchesNumberContext()) && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member matchesStringContext_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && leftType.matchesStringContext()) && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member matchesObjectContext_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && leftType.matchesObjectContext()) && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member canBeCalled_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && leftType.canBeCalled()) && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isNullable_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && leftType.isNullable()) && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isResolved_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() || leftType.isEnumType()) && leftType.isResolved()) && (rightType.isConstructor() || rightType.isEnumType()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((leftType.isConstructor() && (leftType.isConstructor() || leftType.isEnumType()))){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier rightType_ter ^ ^ arguments MemberReference member leftType_ter ^ ^ ^ ^ member canAssignTo_ter ^ ^ ^ ^ ^ 
if(!rightType.canAssignTo(leftType)){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() && leftType.isEnumType()) && leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType()))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || rightType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || leftType.isEnumType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || n.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType()))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member getName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((leftType.isConstructor() || leftType.isEnumType()) && (rightType.getName() || rightType.isEnumType()))){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier leftType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier leftType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier rightType_ter ^ ^ member isConstructor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier rightType_ter ^ ^ member isEnumType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((leftType.isConstructor() && rightType.isEnumType()) && leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType()))){

StatementExpression expression MethodInvocation arguments MemberReference member rightType_ter ^ ^ ^ MemberReference member leftType_ter ^ ^ ^ Literal value null_ter ^ ^ ^ ^ member registerMismatch_ter ^ ^ ^ ^ ^ 
registerMismatch(rightType, leftType, null);

StatementExpression expression MethodInvocation arguments MemberReference member rightType_ter ^ ^ ^ MemberReference member leftType_ter ^ ^ ^ Literal value null_ter ^ ^ ^ ^ member registerIfMismatch_ter ^ ^ ^ ^ ^ 
registerIfMismatch(rightType, leftType, null);

ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ 
return true;
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
return false;
ReturnStatement expression MethodInvocation arguments MemberReference member rightType_ter ^ ^ ^ MemberReference member leftType_ter ^ ^ ^ Literal value null_ter ^ ^ ^ ^ member registerMismatch_ter ^ ^ ^ ^ ^ 
return registerMismatch(rightType, leftType, null);
StatementExpression expression MethodInvocation arguments MemberReference member rightType_ter ^ ^ ^ MemberReference member rightType_ter ^ ^ ^ Literal value null_ter ^ ^ ^ ^ member registerMismatch_ter ^ ^ ^ ^ ^ 
registerMismatch(rightType, rightType, null);

StatementExpression expression MethodInvocation arguments MemberReference member t_ter ^ ^ ^ MemberReference member n_ter ^ ^ ^ MemberReference member msg_ter ^ ^ ^ MemberReference member rightType_ter ^ ^ ^ MemberReference member leftType_ter ^ ^ ^ ^ member mismatch_ter ^ ^ ^ ^ ^ 
mismatch(t, n, msg, rightType, leftType);

StatementExpression expression MethodInvocation arguments MemberReference member rightType_ter ^ ^ ^ ^ member registerMismatch_ter ^ ^ ^ ^ ^ 
registerMismatch(rightType);

StatementExpression expression MethodInvocation arguments MemberReference member t_ter ^ ^ ^ MemberReference member n_ter ^ ^ ^ MemberReference member msg_ter ^ ^ ^ MemberReference member rightType_ter ^ ^ ^ MemberReference member leftType_ter ^ ^ ^ ^ member mismatch_ter ^ ^ ^ ^ ^ 
mismatch(t, n, msg, rightType, leftType);

StatementExpression expression MethodInvocation arguments MemberReference member rightType_ter ^ ^ ^ MemberReference member msg_ter ^ ^ ^ Literal value null_ter ^ ^ ^ ^ member registerMismatch_ter ^ ^ ^ ^ ^ 
registerMismatch(rightType, msg, null);

StatementExpression expression MethodInvocation arguments MemberReference member leftType_ter ^ ^ ^ MemberReference member leftType_ter ^ ^ ^ Literal value null_ter ^ ^ ^ ^ member registerMismatch_ter ^ ^ ^ ^ ^ 
registerMismatch(leftType, leftType, null);

StatementExpression expression MethodInvocation arguments MemberReference member n_ter ^ ^ ^ ^ member registerMismatch_ter ^ ^ ^ ^ ^ 
registerMismatch(n);

StatementExpression expression MethodInvocation member registerMismatch_ter ^ ^ ^ ^ ^ 
registerMismatch();

StatementExpression expression MethodInvocation arguments MemberReference member msg_ter ^ ^ ^ MemberReference member leftType_ter ^ ^ ^ Literal value null_ter ^ ^ ^ ^ member registerMismatch_ter ^ ^ ^ ^ ^ 
registerMismatch(msg, leftType, null);

StatementExpression expression MethodInvocation arguments MemberReference member rightType_ter ^ ^ ^ MemberReference member leftType_ter ^ ^ ^ Literal value null_ter ^ ^ ^ ^ member mismatch_ter ^ ^ ^ ^ ^ 
mismatch(rightType, leftType, null);

StatementExpression expression MethodInvocation arguments MemberReference member rightType_ter ^ ^ ^ MemberReference member leftType_ter ^ ^ ^ ^ member registerMismatch_ter ^ ^ ^ ^ ^ 
registerMismatch(rightType, leftType);

StatementExpression expression MethodInvocation arguments MemberReference member leftType_ter ^ ^ ^ ^ member registerMismatch_ter ^ ^ ^ ^ ^ 
registerMismatch(leftType);

StatementExpression expression MethodInvocation arguments MemberReference member rightType_ter ^ ^ ^ MemberReference member leftType_ter ^ ^ ^ Literal value null_ter ^ ^ ^ Literal value null_ter ^ ^ ^ ^ member registerMismatch_ter ^ ^ ^ ^ ^ 
registerMismatch(rightType, leftType, null, null);

StatementExpression expression MethodInvocation arguments MemberReference member rightType_ter ^ ^ ^ MemberReference member n_ter ^ ^ ^ Literal value null_ter ^ ^ ^ ^ member registerMismatch_ter ^ ^ ^ ^ ^ 
registerMismatch(rightType, n, null);

StatementExpression expression MethodInvocation arguments MemberReference member n_ter ^ ^ ^ MemberReference member leftType_ter ^ ^ ^ ^ member registerMismatch_ter ^ ^ ^ ^ ^ 
registerMismatch(n, leftType);

StatementExpression expression MethodInvocation arguments MemberReference member t_ter ^ ^ ^ MemberReference member n_ter ^ ^ ^ MemberReference member msg_ter ^ ^ ^ MemberReference member rightType_ter ^ ^ ^ MemberReference member leftType_ter ^ ^ ^ ^ member registerMismatch_ter ^ ^ ^ ^ ^ 
registerMismatch(t, n, msg, rightType, leftType);

StatementExpression expression MethodInvocation arguments MemberReference member rightType_ter ^ ^ ^ MemberReference member leftType_ter ^ ^ ^ Literal value null_ter ^ ^ ^ ^ member expectCanAssignTo_ter ^ ^ ^ ^ ^ 
expectCanAssignTo(rightType, leftType, null);

StatementExpression expression MethodInvocation arguments MemberReference member n_ter ^ ^ ^ MemberReference member rightType_ter ^ ^ ^ ^ member registerMismatch_ter ^ ^ ^ ^ ^ 
registerMismatch(n, rightType);

StatementExpression expression MethodInvocation arguments MemberReference member rightType_ter ^ ^ ^ MemberReference member leftType_ter ^ ^ ^ Literal value false_ter ^ ^ ^ ^ member registerMismatch_ter ^ ^ ^ ^ ^ 
registerMismatch(rightType, leftType, false);

StatementExpression expression MethodInvocation arguments MemberReference member n_ter ^ ^ ^ MemberReference member leftType_ter ^ ^ ^ Literal value null_ter ^ ^ ^ ^ member registerMismatch_ter ^ ^ ^ ^ ^ 
registerMismatch(n, leftType, null);

StatementExpression expression MethodInvocation arguments MemberReference member rightType_ter ^ ^ ^ MemberReference member leftType_ter ^ ^ ^ MemberReference member msg_ter ^ ^ ^ ^ member registerMismatch_ter ^ ^ ^ ^ ^ 
registerMismatch(rightType, leftType, msg);

StatementExpression expression MethodInvocation arguments MemberReference member n_ter ^ ^ ^ MemberReference member leftType_ter ^ ^ ^ Literal value null_ter ^ ^ ^ Literal value null_ter ^ ^ ^ ^ member registerMismatch_ter ^ ^ ^ ^ ^ 
registerMismatch(n, leftType, null, null);

StatementExpression expression MethodInvocation arguments MemberReference member rightType_ter ^ ^ ^ MemberReference member leftType_ter ^ ^ ^ Literal value null_ter ^ ^ ^ ^ member canAssignTo_ter ^ ^ ^ ^ ^ 
canAssignTo(rightType, leftType, null);

StatementExpression expression MethodInvocation arguments MemberReference member rightType_ter ^ ^ ^ MemberReference member t_ter ^ ^ ^ Literal value null_ter ^ ^ ^ ^ member registerMismatch_ter ^ ^ ^ ^ ^ 
registerMismatch(rightType, t, null);

StatementExpression expression MethodInvocation arguments MemberReference member rightType_ter ^ ^ ^ MemberReference member leftType_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member registerMismatch_ter ^ ^ ^ ^ ^ 
registerMismatch(rightType, leftType, true);

StatementExpression expression MethodInvocation arguments MemberReference member rightType_ter ^ ^ ^ MemberReference member rightType_ter ^ ^ ^ ^ member registerMismatch_ter ^ ^ ^ ^ ^ 
registerMismatch(rightType, rightType);

StatementExpression expression MethodInvocation arguments MemberReference member rightType_ter ^ ^ ^ Literal value null_ter ^ ^ ^ MemberReference member leftType_ter ^ ^ ^ ^ member registerMismatch_ter ^ ^ ^ ^ ^ 
registerMismatch(rightType, null, leftType);

StatementExpression expression MethodInvocation arguments MemberReference member rightType_ter ^ ^ ^ MemberReference member leftType_ter ^ ^ ^ Literal value null_ter ^ ^ ^ MemberReference member leftType_ter ^ ^ ^ ^ member registerMismatch_ter ^ ^ ^ ^ ^ 
registerMismatch(rightType, leftType, null, leftType);

StatementExpression expression MethodInvocation arguments MemberReference member rightType_ter ^ ^ ^ MemberReference member leftType_ter ^ ^ ^ Literal value null_ter ^ ^ ^ MemberReference member msg_ter ^ ^ ^ ^ member registerMismatch_ter ^ ^ ^ ^ ^ 
registerMismatch(rightType, leftType, null, msg);

StatementExpression expression MethodInvocation arguments MemberReference member rightType_ter ^ ^ ^ MemberReference member leftType_ter ^ ^ ^ MemberReference member leftType_ter ^ ^ ^ ^ member registerMismatch_ter ^ ^ ^ ^ ^ 
registerMismatch(rightType, leftType, leftType);

StatementExpression expression MethodInvocation arguments MemberReference member rightType_ter ^ ^ ^ MemberReference member leftType_ter ^ ^ ^ MemberReference member msg_ter ^ ^ ^ Literal value null_ter ^ ^ ^ ^ member registerMismatch_ter ^ ^ ^ ^ ^ 
registerMismatch(rightType, leftType, msg, null);

StatementExpression expression MethodInvocation arguments MemberReference member n_ter ^ ^ ^ MemberReference member leftType_ter ^ ^ ^ Literal value null_ter ^ ^ ^ MemberReference member leftType_ter ^ ^ ^ ^ member registerMismatch_ter ^ ^ ^ ^ ^ 
registerMismatch(n, leftType, null, leftType);

ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ 
if (true) { return true; }

StatementExpression expression MethodInvocation arguments MemberReference member rightType_ter ^ ^ ^ MemberReference member leftType_ter ^ ^ ^ MemberReference member leftType_ter ^ ^ ^ Literal value null_ter ^ ^ ^ ^ member registerMismatch_ter ^ ^ ^ ^ ^ 
registerMismatch(rightType, leftType, leftType, null);

StatementExpression expression MethodInvocation arguments MemberReference member n_ter ^ ^ ^ MemberReference member leftType_ter ^ ^ ^ MemberReference member msg_ter ^ ^ ^ ^ member registerMismatch_ter ^ ^ ^ ^ ^ 
registerMismatch(n, leftType, msg);

StatementExpression expression MethodInvocation arguments MemberReference member rightType_ter ^ ^ ^ MemberReference member rightType_ter ^ ^ ^ Literal value null_ter ^ ^ ^ Literal value null_ter ^ ^ ^ ^ member registerMismatch_ter ^ ^ ^ ^ ^ 
registerMismatch(rightType, rightType, null, null);

StatementExpression expression MethodInvocation arguments MemberReference member n_ter ^ ^ ^ MemberReference member rightType_ter ^ ^ ^ Literal value null_ter ^ ^ ^ Literal value null_ter ^ ^ ^ ^ member registerMismatch_ter ^ ^ ^ ^ ^ 
registerMismatch(n, rightType, null, null);

StatementExpression expression MethodInvocation arguments MemberReference member n_ter ^ ^ ^ MemberReference member rightType_ter ^ ^ ^ MemberReference member leftType_ter ^ ^ ^ ^ member registerMismatch_ter ^ ^ ^ ^ ^ 
registerMismatch(n, rightType, leftType);

StatementExpression expression MethodInvocation arguments MemberReference member rightType_ter ^ ^ ^ Literal value null_ter ^ ^ ^ ^ member registerMismatch_ter ^ ^ ^ ^ ^ 
registerMismatch(rightType, null);

StatementExpression expression MethodInvocation arguments MemberReference member rightType_ter ^ ^ ^ MemberReference member loc0 ^ ^ ^ Literal value null_ter ^ ^ ^ ^ member registerMismatch_ter ^ ^ ^ ^ ^ 
registerMismatch(rightType, , null);


StatementExpression expression MethodInvocation arguments MemberReference member t_ter ^ ^ ^ MemberReference member leftType_ter ^ ^ ^ Literal value null_ter ^ ^ ^ ^ member registerMismatch_ter ^ ^ ^ ^ ^ 
registerMismatch(t, leftType, null);

ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if (true) { return false; }

StatementExpression expression MethodInvocation arguments MemberReference member n_ter ^ ^ ^ MemberReference member leftType_ter ^ ^ ^ Literal value null_ter ^ ^ ^ MemberReference member msg_ter ^ ^ ^ ^ member registerMismatch_ter ^ ^ ^ ^ ^ 
registerMismatch(n, leftType, null, msg);

StatementExpression expression MethodInvocation arguments MemberReference member rightType_ter ^ ^ ^ MemberReference member par5 ^ ^ ^ Literal value null_ter ^ ^ ^ ^ member registerMismatch_ter ^ ^ ^ ^ ^ 
registerMismatch(rightType, , null);


StatementExpression expression MethodInvocation arguments MemberReference member n_ter ^ ^ ^ MemberReference member rightType_ter ^ ^ ^ Literal value null_ter ^ ^ ^ MemberReference member leftType_ter ^ ^ ^ ^ member registerMismatch_ter ^ ^ ^ ^ ^ 
registerMismatch(n, rightType, null, leftType);

StatementExpression expression MethodInvocation arguments MemberReference member rightType_ter ^ ^ ^ MemberReference member msg_ter ^ ^ ^ ^ member registerMismatch_ter ^ ^ ^ ^ ^ 
registerMismatch(rightType, msg);

stderr: 