stdout: StatementExpression expression Assignment expressionl MemberReference member resetOccurred_ter ^ ^ ^ ^ value Literal value true_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
resetOccurred = true;

StatementExpression expression Assignment expressionl MemberReference member isLastStep_ter ^ ^ ^ ^ value Literal value false_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
isLastStep = false;

StatementExpression expression Assignment expressionl MemberReference member resetOccurred_ter ^ ^ ^ ^ value Literal value false_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
resetOccurred = false;

StatementExpression expression Assignment expressionl MemberReference member statesInitialized_ter ^ ^ ^ ^ value Literal value false_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
statesInitialized = false;

StatementExpression expression Assignment expressionl MemberReference member resetOccurred_ter ^ ^ ^ ^ value Literal value null_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
resetOccurred = null;

StatementExpression expression Assignment expressionl MemberReference member resetOccurred_ter ^ ^ ^ ^ value Literal value <string>_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
resetOccurred = "null";

StatementExpression expression Assignment expressionl MemberReference member resetOccurred_ter ^ ^ ^ ^ value Literal value 0_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
resetOccurred = 0;

StatementExpression expression MethodInvocation arguments Literal value true_ter ^ ^ ^ ^ member setMaxEvaluations_ter ^ ^ ^ ^ ^ 
setMaxEvaluations(true);

StatementExpression expression Assignment expressionl MemberReference member interpolator_ter ^ ^ ^ ^ value Literal value false_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
interpolator = false;

StatementExpression expression Assignment expressionl MemberReference member eventsStates_ter ^ ^ ^ ^ value Literal value false_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
eventsStates = false;

StatementExpression expression Assignment expressionl MemberReference member resetOccurred_ter ^ ^ ^ ^ value Literal value 1_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
resetOccurred = 1;


StatementExpression expression MethodInvocation arguments Literal value false_ter ^ ^ ^ ^ member setMaxEvaluations_ter ^ ^ ^ ^ ^ 
setMaxEvaluations(false);

StatementExpression expression Assignment expressionl MemberReference member getGlobalCurrentTime_ter ^ ^ ^ ^ value Literal value false_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
getGlobalCurrentTime = false;

StatementExpression expression Assignment expressionl MemberReference qualifier isLastStep_ter ^ ^ member resetOccurred_ter ^ ^ ^ ^ value Literal value false_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
isLastStep.resetOccurred = false;

StatementExpression expression Assignment expressionl MemberReference qualifier resetOccurred_ter ^ ^ member resetOccurred_ter ^ ^ ^ ^ value Literal value false_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
resetOccurred.resetOccurred = false;

StatementExpression expression Assignment expressionl MemberReference qualifier statesInitialized_ter ^ ^ member resetOccurred_ter ^ ^ ^ ^ value Literal value false_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
statesInitialized.resetOccurred = false;

StatementExpression expression MethodInvocation arguments MemberReference member resetOccurred_ter ^ ^ ^ ^ member setMaxEvaluations_ter ^ ^ ^ ^ ^ 
setMaxEvaluations(resetOccurred);

StatementExpression expression Assignment expressionl MemberReference member state_ter ^ ^ ^ ^ value Literal value false_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
state = false;

StatementExpression expression Assignment expressionl MemberReference member resetOccurred_ter ^ ^ ^ ^ value Literal prefix_operators -_ter ^ ^ value 1_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
resetOccurred = -1;

StatementExpression expression MethodInvocation arguments Literal value null_ter ^ ^ ^ ^ member setMaxEvaluations_ter ^ ^ ^ ^ ^ 
setMaxEvaluations(null);

StatementExpression expression Assignment expressionl MemberReference member resetOccurred_ter ^ ^ ^ ^ value Literal prefix_operators -_ter ^ ^ value true_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
resetOccurred = -true;

StatementExpression expression Assignment expressionl MemberReference member resetOccurred_ter ^ ^ ^ ^ value Literal prefix_operators -_ter ^ ^ value false_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
resetOccurred = -false;

StatementExpression expression Assignment expressionl MemberReference member resetOccurred_ter ^ ^ ^ ^ value Literal value 2_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
resetOccurred = 2;

StatementExpression expression MethodInvocation member clearStepHandlers_ter ^ ^ ^ ^ ^ 
clearStepHandlers();

StatementExpression expression MethodInvocation member clearEventHandlers_ter ^ ^ ^ ^ ^ 
clearEventHandlers();

StatementExpression expression MethodInvocation member resetEvaluations_ter ^ ^ ^ ^ ^ 
resetEvaluations();

StatementExpression expression SuperMethodInvocation member acceptStep_ter ^ ^ ^ ^ ^ 
super.acceptStep();

StatementExpression expression Assignment expressionl MemberReference member resetOccurred_ter ^ ^ ^ ^ value Literal prefix_operators -_ter ^ ^ value <string>_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
resetOccurred = -"null";

StatementExpression expression MethodInvocation qualifier interpolator_ter ^ ^ member getGlobalCurrentTime_ter ^ ^ ^ ^ ^ 
interpolator.getGlobalCurrentTime();

StatementExpression expression Assignment expressionl MemberReference member resetOccurred_ter ^ ^ ^ ^ value Literal prefix_operators -_ter ^ ^ value 2_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
resetOccurred = -2;

StatementExpression expression Assignment expressionl MemberReference member statesInitialized_ter ^ ^ ^ ^ value Literal value true_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
statesInitialized = true;

StatementExpression expression MethodInvocation qualifier state_ter ^ ^ arguments MemberReference member interpolator_ter ^ ^ ^ ^ member reinitializeBegin_ter ^ ^ ^ ^ ^ 
state.reinitializeBegin(interpolator);

ReturnStatement_ter ^ 
if (true) { return;
 }


BreakStatement_ter ^ 
break;

StatementExpression expression MethodInvocation qualifier occuringEvents_ter ^ ^ arguments MemberReference member state_ter ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
occuringEvents.add(state);

StatementExpression expression MethodInvocation qualifier System_ter ^ ^ arguments MemberReference member eventY_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ MemberReference member y_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ MemberReference qualifier y_ter ^ ^ member length_ter ^ ^ ^ ^ member arraycopy_ter ^ ^ ^ ^ ^ 
System.arraycopy(eventY, 0, y, 0, y.length);

StatementExpression expression Assignment expressionl MemberReference member resetOccurred_ter ^ ^ ^ ^ value Literal value true_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
resetOccurred = true;

StatementExpression expression MethodInvocation arguments MemberReference member eventT_ter ^ ^ ^ MemberReference member y_ter ^ ^ ^ MemberReference member yDot_ter ^ ^ ^ ^ member computeDerivatives_ter ^ ^ ^ ^ ^ 
computeDerivatives(eventT, y, yDot);

StatementExpression expression MethodInvocation qualifier handler_ter ^ ^ arguments MemberReference member interpolator_ter ^ ^ ^ MemberReference member isLastStep_ter ^ ^ ^ ^ member handleStep_ter ^ ^ ^ ^ ^ 
handler.handleStep(interpolator, isLastStep);

StatementExpression expression MethodInvocation qualifier interpolator_ter ^ ^ arguments MemberReference member currentT_ter ^ ^ ^ ^ member setInterpolatedTime_ter ^ ^ ^ ^ ^ 
interpolator.setInterpolatedTime(currentT);

StatementExpression expression MethodInvocation member clearStepHandlers_ter ^ ^ ^ ^ ^ 
clearStepHandlers();

StatementExpression expression MethodInvocation member clearEventHandlers_ter ^ ^ ^ ^ ^ 
clearEventHandlers();

StatementExpression expression MethodInvocation member resetEvaluations_ter ^ ^ ^ ^ ^ 
resetEvaluations();

StatementExpression expression MethodInvocation qualifier occuringEvents_ter ^ ^ arguments MemberReference member currentEvent_ter ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
occuringEvents.add(currentEvent);

ReturnStatement expression MemberReference member eventT_ter ^ ^ ^ ^ ^ 
if (true) { return eventT; }

StatementExpression expression MethodInvocation qualifier System_ter ^ ^ member clearStepHandlers_ter ^ ^ ^ ^ ^ 
System.clearStepHandlers();

StatementExpression expression MethodInvocation qualifier System_ter ^ ^ member clearEventHandlers_ter ^ ^ ^ ^ ^ 
System.clearEventHandlers();

StatementExpression expression MethodInvocation qualifier System_ter ^ ^ member resetEvaluations_ter ^ ^ ^ ^ ^ 
System.resetEvaluations();

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member eventT_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((eventT != null)){

StatementExpression expression MethodInvocation qualifier interpolator_ter ^ ^ member clearStepHandlers_ter ^ ^ ^ ^ ^ 
interpolator.clearStepHandlers();

StatementExpression expression MethodInvocation qualifier interpolator_ter ^ ^ member clearEventHandlers_ter ^ ^ ^ ^ ^ 
interpolator.clearEventHandlers();

StatementExpression expression MethodInvocation qualifier interpolator_ter ^ ^ member resetEvaluations_ter ^ ^ ^ ^ ^ 
interpolator.resetEvaluations();

ReturnStatement_ter ^ 
if (true) { return;
 }

IfStatement condition MethodInvocation qualifier state_ter ^ ^ arguments MemberReference member interpolator_ter ^ ^ ^ ^ member evaluateStep_ter ^ ^ ^ ^ ^ 
if(state.evaluateStep(interpolator)){

StatementExpression expression MethodInvocation qualifier occuringEvents_ter ^ ^ member clearStepHandlers_ter ^ ^ ^ ^ ^ 
occuringEvents.clearStepHandlers();

StatementExpression expression MethodInvocation qualifier occuringEvents_ter ^ ^ member clearEventHandlers_ter ^ ^ ^ ^ ^ 
occuringEvents.clearEventHandlers();

StatementExpression expression MethodInvocation qualifier occuringEvents_ter ^ ^ member resetEvaluations_ter ^ ^ ^ ^ ^ 
occuringEvents.resetEvaluations();

IfStatement condition MethodInvocation qualifier currentEvent_ter ^ ^ arguments MemberReference member interpolator_ter ^ ^ ^ ^ member evaluateStep_ter ^ ^ ^ ^ ^ 
if(currentEvent.evaluateStep(interpolator)){

ContinueStatement_ter ^ 
continue;

ContinueStatement_ter ^ 
continue;

IfStatement condition MemberReference member isLastStep_ter ^ ^ ^ ^ ^ 
if(isLastStep){

IfStatement condition MethodInvocation qualifier currentEvent_ter ^ ^ arguments MemberReference member eventT_ter ^ ^ ^ MemberReference member eventY_ter ^ ^ ^ ^ member reset_ter ^ ^ ^ ^ ^ 
if(currentEvent.reset(eventT, eventY)){

ReturnStatement expression MemberReference member eventT_ter ^ ^ ^ ^ ^ 
return eventT;


ReturnStatement expression MemberReference member eventY_ter ^ ^ ^ ^ ^ 
return eventY;
IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member eventY_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((eventY != null)){

control EnhancedForControl var VariableDeclaration modifiers final_ter ^ ^ type ReferenceType name EventState_ter ^ ^ ^ ^ declarators VariableDeclarator name state_ter ^ ^ ^ ^ ^ ^ iterable MemberReference member eventsStates_ter ^ ^ ^ ^ ^ ^ 
arg 
arg 
(final EventState state = ;
:eventsStates)

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member eventT_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((eventT == null)){

BreakStatement_ter ^ 
break;

StatementExpression expression MethodInvocation qualifier occuringEvents_ter ^ ^ arguments MemberReference member state_ter ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
occuringEvents.add(state);

StatementExpression expression MethodInvocation member clearStepHandlers_ter ^ ^ ^ ^ ^ 
clearStepHandlers();

StatementExpression expression MethodInvocation member clearEventHandlers_ter ^ ^ ^ ^ ^ 
clearEventHandlers();

StatementExpression expression MethodInvocation member resetEvaluations_ter ^ ^ ^ ^ ^ 
resetEvaluations();

StatementExpression expression MethodInvocation arguments MemberReference member eventT_ter ^ ^ ^ MemberReference member y_ter ^ ^ ^ MemberReference member yDot_ter ^ ^ ^ ^ member computeDerivatives_ter ^ ^ ^ ^ ^ 
computeDerivatives(eventT, y, yDot);

StatementExpression expression Assignment expressionl MemberReference member resetOccurred_ter ^ ^ ^ ^ value Literal value true_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
resetOccurred = true;

StatementExpression expression MethodInvocation qualifier System_ter ^ ^ arguments MemberReference member eventY_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ MemberReference member y_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ MemberReference qualifier y_ter ^ ^ member length_ter ^ ^ ^ ^ member arraycopy_ter ^ ^ ^ ^ ^ 
System.arraycopy(eventY, 0, y, 0, y.length);

StatementExpression expression MethodInvocation qualifier handler_ter ^ ^ arguments MemberReference member interpolator_ter ^ ^ ^ MemberReference member isLastStep_ter ^ ^ ^ ^ member handleStep_ter ^ ^ ^ ^ ^ 
handler.handleStep(interpolator, isLastStep);

StatementExpression expression MethodInvocation qualifier interpolator_ter ^ ^ arguments MemberReference member currentT_ter ^ ^ ^ ^ member setInterpolatedTime_ter ^ ^ ^ ^ ^ 
interpolator.setInterpolatedTime(currentT);

StatementExpression expression MethodInvocation qualifier occuringEvents_ter ^ ^ arguments MemberReference member currentEvent_ter ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
occuringEvents.add(currentEvent);

ReturnStatement expression MemberReference member eventT_ter ^ ^ ^ ^ ^ 
if (true) { return eventT; }

StatementExpression expression MethodInvocation qualifier System_ter ^ ^ member clearStepHandlers_ter ^ ^ ^ ^ ^ 
System.clearStepHandlers();

StatementExpression expression MethodInvocation qualifier System_ter ^ ^ member clearEventHandlers_ter ^ ^ ^ ^ ^ 
System.clearEventHandlers();

StatementExpression expression MethodInvocation qualifier System_ter ^ ^ member resetEvaluations_ter ^ ^ ^ ^ ^ 
System.resetEvaluations();

StatementExpression expression MethodInvocation qualifier interpolator_ter ^ ^ member clearStepHandlers_ter ^ ^ ^ ^ ^ 
interpolator.clearStepHandlers();

StatementExpression expression MethodInvocation qualifier interpolator_ter ^ ^ member clearEventHandlers_ter ^ ^ ^ ^ ^ 
interpolator.clearEventHandlers();

StatementExpression expression MethodInvocation qualifier interpolator_ter ^ ^ member resetEvaluations_ter ^ ^ ^ ^ ^ 
interpolator.resetEvaluations();

StatementExpression expression MethodInvocation qualifier occuringEvents_ter ^ ^ member clearStepHandlers_ter ^ ^ ^ ^ ^ 
occuringEvents.clearStepHandlers();

StatementExpression expression MethodInvocation qualifier occuringEvents_ter ^ ^ member clearEventHandlers_ter ^ ^ ^ ^ ^ 
occuringEvents.clearEventHandlers();

StatementExpression expression MethodInvocation qualifier occuringEvents_ter ^ ^ member resetEvaluations_ter ^ ^ ^ ^ ^ 
occuringEvents.resetEvaluations();

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member eventT_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((eventT != null)){

ReturnStatement_ter ^ 
if (true) { return;
 }

IfStatement condition MethodInvocation qualifier state_ter ^ ^ arguments MemberReference member interpolator_ter ^ ^ ^ ^ member evaluateStep_ter ^ ^ ^ ^ ^ 
if(state.evaluateStep(interpolator)){

ContinueStatement_ter ^ 
continue;

IfStatement condition MethodInvocation qualifier currentEvent_ter ^ ^ arguments MemberReference member interpolator_ter ^ ^ ^ ^ member evaluateStep_ter ^ ^ ^ ^ ^ 
if(currentEvent.evaluateStep(interpolator)){

ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if (true) { return null; }


ReturnStatement expression MemberReference member eventT_ter ^ ^ ^ ^ ^ 
return eventT;
IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member eventY_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((eventY != null)){


IfStatement condition MemberReference member isLastStep_ter ^ ^ ^ ^ ^ 
if(isLastStep){

IfStatement condition MethodInvocation qualifier currentEvent_ter ^ ^ arguments MemberReference member eventT_ter ^ ^ ^ MemberReference member eventY_ter ^ ^ ^ ^ member reset_ter ^ ^ ^ ^ ^ 
if(currentEvent.reset(eventT, eventY)){

ContinueStatement_ter ^ 
continue;

control EnhancedForControl var VariableDeclaration modifiers final_ter ^ ^ type ReferenceType name EventState_ter ^ ^ ^ ^ declarators VariableDeclarator name state_ter ^ ^ ^ ^ ^ ^ iterable MemberReference member eventsStates_ter ^ ^ ^ ^ ^ ^ 
arg 
arg 
(final EventState state = ;
:eventsStates)

ReturnStatement expression MemberReference member eventY_ter ^ ^ ^ ^ ^ 
return eventY;
IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member currentEvent_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((currentEvent != null)){

stderr: 