stdout: StatementExpression expression Assignment expressionl MemberReference member type_ter ^ ^ ^ ^ value MethodInvocation qualifier array_ter ^ ^ member getClass_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
type = array.getClass();

StatementExpression expression Assignment expressionl MemberReference member type_ter ^ ^ ^ ^ value MethodInvocation qualifier element_ter ^ ^ member getClass_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
type = element.getClass();

ReturnStatement expression MemberReference member newArray_ter ^ ^ ^ ^ ^ 
if (true) { return newArray; }

StatementExpression expression Assignment expressionl MemberReference selectors ArraySelector index BinaryOperation operator -_ter ^ ^ operandl MemberReference qualifier newArray_ter ^ ^ member length_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ member newArray_ter ^ ^ ^ ^ value MemberReference member element_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
newArray[(newArray.length - 1)] = element;


StatementExpression expression Assignment expressionl MemberReference member type_ter ^ ^ ^ ^ value MethodInvocation qualifier array_ter ^ ^ member getClass_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
type = array.getClass();

StatementExpression expression Assignment expressionl MemberReference member type_ter ^ ^ ^ ^ value Cast type ReferenceType name T_ter ^ ^ dimensions None_ter ^ ^ ^ ^ expression MethodInvocation arguments MemberReference member array_ter ^ ^ ^ MemberReference member type_ter ^ ^ ^ ^ member copyArrayGrow1_ter ^ ^ ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
arg 
arg 
type = (T [])copyArrayGrow1(array, type);

StatementExpression expression Assignment expressionl MemberReference member type_ter ^ ^ ^ ^ value MethodInvocation qualifier element_ter ^ ^ member getClass_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
type = element.getClass();

ReturnStatement_ter ^ 
if (true) { return;
 }

ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if (true) { return null; }

StatementExpression expression Assignment expressionl MemberReference member type_ter ^ ^ ^ ^ value MemberReference member type_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
type = type;

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member element_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((element != null)){

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member array_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((array != null)){

IfStatement condition BinaryOperation operator -_ter ^ ^ operandl MemberReference qualifier newArray_ter ^ ^ member length_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ 
if((newArray.length - 1)){

StatementExpression expression Assignment expressionl MemberReference selectors ArraySelector index BinaryOperation operator -_ter ^ ^ operandl MemberReference qualifier newArray_ter ^ ^ member length_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ member newArray_ter ^ ^ ^ ^ value MemberReference member element_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
newArray[(newArray.length - 1)] = element;

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member type_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((type != null)){

BreakStatement_ter ^ 
break;

StatementExpression expression Assignment expressionl MemberReference member type_ter ^ ^ ^ ^ value Literal value null_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
type = null;

ReturnStatement expression MemberReference member type_ter ^ ^ ^ ^ ^ 
if (true) { return type; }

ReturnStatement expression This_ter ^ ^ ^ 
if (true) { return this; }

IfStatement condition BinaryOperation operator instanceof_ter ^ ^ operandl MemberReference member type_ter ^ ^ ^ ^ operandr ReferenceType name T_ter ^ ^ dimensions None_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
if((type instanceof T [])){

ReturnStatement expression MemberReference member newArray_ter ^ ^ ^ ^ ^ 
return newArray;
IfStatement condition BinaryOperation operator instanceof_ter ^ ^ operandl MemberReference member type_ter ^ ^ ^ ^ operandr ReferenceType name Object_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
if((type instanceof Object)){

ReturnStatement expression MemberReference member type_ter ^ ^ ^ ^ ^ 
return type;
StatementExpression expression Assignment expressionl MemberReference member type_ter ^ ^ ^ ^ value SuperMethodInvocation member add_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
type = super.add();

ReturnStatement expression This_ter ^ ^ ^ 
return this;
StatementExpression expression Assignment expressionl MemberReference member type_ter ^ ^ ^ ^ value ClassReference type ReferenceType name Object_ter ^ ^ ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
ClassReference type ReferenceType name Object_ter ^ ^ ^ ^ ^ 
arg 
ClassReference type ReferenceType name Object_ter ^ ^ ^ ^ ^ 
arg 
type = Object;

StatementExpression expression Assignment expressionl MemberReference member type_ter ^ ^ ^ ^ value MemberReference member array_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
type = array;

ReturnStatement expression MemberReference member element_ter ^ ^ ^ ^ ^ 
if (true) { return element; }

ReturnStatement_ter ^ 
return;

StatementExpression expression Assignment expressionl MemberReference member type_ter ^ ^ ^ ^ value ClassCreator type ReferenceType name Object_ter ^ ^ ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
arg 
arg 
type = new Object();

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member type_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((type == null)){

StatementExpression expression Assignment expressionl MemberReference member type_ter ^ ^ ^ ^ value Literal value null_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
type = null;

StatementExpression expression Assignment expressionl MemberReference member type_ter ^ ^ ^ ^ value MemberReference member element_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
type = element;

StatementExpression expression Assignment expressionl MemberReference member type_ter ^ ^ ^ ^ value Cast type ReferenceType name Object_ter ^ ^ ^ ^ expression MemberReference member type_ter ^ ^ ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
arg 
arg 
type = (Object)type;

IfStatement condition BinaryOperation operator instanceof_ter ^ ^ operandl MemberReference member type_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ 
if((type instanceof 1)){


StatementExpression expression Assignment expressionl MemberReference member type_ter ^ ^ ^ ^ value MemberReference member element_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
type = element;

StatementExpression expression Assignment expressionl MemberReference member type_ter ^ ^ ^ ^ value Cast type ReferenceType name T_ter ^ ^ dimensions None_ter ^ ^ ^ ^ expression MethodInvocation arguments MemberReference member array_ter ^ ^ ^ MemberReference member type_ter ^ ^ ^ ^ member copyArrayGrow1_ter ^ ^ ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
arg 
arg 
type = (T [])copyArrayGrow1(array, type);

ReturnStatement expression ArrayCreator type ReferenceType name Object_ter ^ ^ ^ ^ dimensions None_ter ^ ^ initializer ArrayInitializer initializers Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
return new Object[[]]{null};

ReturnStatement expression Cast type ReferenceType name T_ter ^ ^ dimensions None_ter ^ ^ ^ ^ expression ArrayCreator type ReferenceType name Object_ter ^ ^ ^ ^ dimensions None_ter ^ ^ initializer ArrayInitializer initializers Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
arg 
arg 
return (T [])new Object[[]]{0};

ReturnStatement expression Cast type ReferenceType name T_ter ^ ^ dimensions None_ter ^ ^ ^ ^ expression ArrayCreator type ReferenceType name Object_ter ^ ^ ^ ^ dimensions None_ter ^ ^ initializer ArrayInitializer initializers Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
arg 
arg 
return (T [])new Object[[]]{"null"};

StatementExpression expression Assignment expressionl MemberReference member clss_ter ^ ^ ^ ^ value MethodInvocation qualifier array_ter ^ ^ selectors MethodInvocation member getComponentType_ter ^ ^ ^ ^ member getClass_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
clss = array.getClass().getComponentType();

ReturnStatement expression Cast type ReferenceType name T_ter ^ ^ dimensions None_ter ^ ^ ^ ^ expression ArrayCreator type ReferenceType name Object_ter ^ ^ ^ ^ dimensions None_ter ^ ^ initializer ArrayInitializer initializers Literal value true_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
arg 
arg 
return (T [])new Object[[]]{true};

StatementExpression expression Assignment expressionl MemberReference member clss_ter ^ ^ ^ ^ value MethodInvocation qualifier element_ter ^ ^ member getClass_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
clss = element.getClass();

ReturnStatement expression Cast type ReferenceType name T_ter ^ ^ dimensions None_ter ^ ^ ^ ^ expression ArrayCreator type ReferenceType name Object_ter ^ ^ ^ ^ dimensions None_ter ^ ^ initializer ArrayInitializer initializers Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
arg 
arg 
return (T [])new Object[[]]{1};

ReturnStatement expression MemberReference member clss_ter ^ ^ ^ ^ ^ 
return clss;
ReturnStatement expression Cast type ReferenceType name T_ter ^ ^ dimensions None_ter ^ ^ ^ ^ expression ArrayCreator type ReferenceType name Object_ter ^ ^ ^ ^ dimensions None_ter ^ ^ initializer ArrayInitializer initializers Literal value 2_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
arg 
arg 
return (T [])new Object[[]]{2};

ReturnStatement expression Cast type ReferenceType name Object_ter ^ ^ ^ ^ expression ArrayCreator type ReferenceType name Object_ter ^ ^ ^ ^ dimensions None_ter ^ ^ initializer ArrayInitializer initializers Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
arg 
arg 
return (Object)new Object[[]]{null};

ReturnStatement expression This_ter ^ ^ ^ 
return this;
ReturnStatement expression MemberReference member index_ter ^ ^ ^ ^ ^ 
return index;
ReturnStatement expression MemberReference member newArray_ter ^ ^ ^ ^ ^ 
if (true) { return newArray; }

ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
return null;
ReturnStatement expression MemberReference member newArray_ter ^ ^ ^ ^ ^ 
return newArray;
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if (true) { return null; }

ReturnStatement expression Cast type ReferenceType name T_ter ^ ^ dimensions None_ter ^ ^ ^ ^ expression ArrayCreator type ReferenceType name Object_ter ^ ^ ^ ^ dimensions None_ter ^ ^ initializer ArrayInitializer initializers Literal value false_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
arg 
arg 
return (T [])new Object[[]]{false};

ReturnStatement expression Cast type ReferenceType name T_ter ^ ^ dimensions None_ter ^ ^ ^ ^ expression MethodInvocation arguments MemberReference member array_ter ^ ^ ^ MemberReference member index_ter ^ ^ ^ MemberReference member element_ter ^ ^ ^ MemberReference member clss_ter ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
return (T [])add(array, index, element, clss);
ReturnStatement expression This_ter ^ ^ ^ 
if (true) { return this; }

ReturnStatement expression MemberReference member array_ter ^ ^ ^ ^ ^ 
return array;
ReturnStatement expression MemberReference member element_ter ^ ^ ^ ^ ^ 
return element;
ReturnStatement expression MemberReference member clss_ter ^ ^ ^ ^ ^ 
if (true) { return clss; }

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member element_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((element != null)){

BreakStatement_ter ^ 
break;

ReturnStatement expression Cast type ReferenceType name T_ter ^ ^ dimensions None_ter ^ ^ ^ ^ expression MemberReference member index_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
return (T [])index;
ReturnStatement_ter ^ 
if (true) { return;
 }

ReturnStatement expression MethodInvocation arguments MemberReference member array_ter ^ ^ ^ MemberReference member index_ter ^ ^ ^ MemberReference member element_ter ^ ^ ^ MemberReference member clss_ter ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
if (true) { return add(array, index, element, clss); }

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member array_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((array != null)){

ReturnStatement expression Cast type ReferenceType name T_ter ^ ^ dimensions None_ter ^ ^ ^ ^ expression MemberReference member clss_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
return (T [])clss;
ReturnStatement expression Cast type ReferenceType name Object_ter ^ ^ ^ ^ expression MemberReference member index_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
return (Object)index;
ReturnStatement expression Cast type ReferenceType name Object_ter ^ ^ ^ ^ expression MemberReference member clss_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
return (Object)clss;
ReturnStatement expression Cast type ReferenceType name Class_ter ^ ^ arguments TypeArgument pattern_type ?_ter ^ ^ ^ ^ ^ ^ expression ArrayCreator type ReferenceType name Object_ter ^ ^ ^ ^ dimensions None_ter ^ ^ initializer ArrayInitializer initializers Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
arg ?
arg 
arg ?
arg 
return (Class<?>)new Object[[]]{null};

ReturnStatement expression Cast type ReferenceType name T_ter ^ ^ dimensions None_ter ^ ^ ^ ^ expression ArrayCreator type ReferenceType name Object_ter ^ ^ ^ ^ dimensions None_ter ^ ^ initializer ArrayInitializer initializers Literal prefix_operators -_ter ^ ^ value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
arg 
arg 
return (T [])new Object[[]]{-1};

ReturnStatement expression MemberReference member element_ter ^ ^ ^ ^ ^ 
if (true) { return element; }

ReturnStatement expression ArrayCreator type ReferenceType name Object_ter ^ ^ ^ ^ dimensions None_ter ^ ^ initializer ArrayInitializer initializers Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
if (true) { return new Object[[]]{null}; }


ReturnStatement expression MemberReference member index_ter ^ ^ ^ ^ ^ 
if (true) { return index; }

ReturnStatement expression Cast type ReferenceType name T_ter ^ ^ dimensions None_ter ^ ^ ^ ^ expression MemberReference member element_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
return (T [])element;
StatementExpression expression Assignment expressionl MemberReference member clss_ter ^ ^ ^ ^ value Literal value null_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
clss = null;

ReturnStatement expression MemberReference member array_ter ^ ^ ^ ^ ^ 
if (true) { return array; }

ReturnStatement expression Cast type ReferenceType name Object_ter ^ ^ ^ ^ expression MemberReference member element_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
return (Object)element;
ReturnStatement expression MemberReference member par3 ^ ^ ^ ^ ^ 
return ;
IfStatement condition BinaryOperation operator instanceof_ter ^ ^ operandl MemberReference member clss_ter ^ ^ ^ ^ operandr ReferenceType name Object_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
if((clss instanceof Object)){

StatementExpression expression MemberReference postfix_operators ++_ter ^ ^ member clss_ter ^ ^ ^ ^ ^ 
clss++;


IfStatement condition BinaryOperation operator instanceof_ter ^ ^ operandl MemberReference member clss_ter ^ ^ ^ ^ operandr ReferenceType name T_ter ^ ^ dimensions None_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
if((clss instanceof T [])){

StatementExpression expression Assignment expressionl MemberReference member clss_ter ^ ^ ^ ^ value MemberReference member clss_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
clss = clss;

ReturnStatement expression Cast type ReferenceType name T_ter ^ ^ dimensions None_ter ^ ^ ^ ^ expression MemberReference member array_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
return (T [])array;
ReturnStatement expression Cast type ReferenceType name Object_ter ^ ^ ^ ^ expression MemberReference member array_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
return (Object)array;
ContinueStatement_ter ^ 
continue;

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member clss_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((clss != null)){

IfStatement condition BinaryOperation operator instanceof_ter ^ ^ operandl MemberReference member index_ter ^ ^ ^ ^ operandr ReferenceType name Object_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
if((index instanceof Object)){

stderr: 