stdout: LocalVariableDeclaration type ReferenceType name Class_ter ^ ^ arguments TypeArgument pattern_type ?_ter ^ ^ ^ ^ ^ ^ declarators VariableDeclarator name rawType_ter ^ ^ initializer MethodInvocation qualifier returnTypeGenericMetadata_ter ^ ^ member rawType_ter ^ ^ ^ ^ ^ ^ ^ 
arg ?
arg ?
Class<?> rawType = returnTypeGenericMetadata.rawType();

LocalVariableDeclaration type ReferenceType name Class_ter ^ ^ arguments TypeArgument pattern_type ?_ter ^ ^ ^ ^ ^ ^ declarators VariableDeclarator name rawType_ter ^ ^ initializer MethodInvocation qualifier returnTypeGenericMetadata_ter ^ ^ member rawExtraInterfaces_ter ^ ^ ^ ^ ^ ^ ^ 
arg ?
arg ?
Class<?> rawType = returnTypeGenericMetadata.rawExtraInterfaces();

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member returnTypeGenericMetadata_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if((returnTypeGenericMetadata == null)){
return null;}
IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member returnTypeGenericMetadata_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((returnTypeGenericMetadata != null)){

LocalVariableDeclaration type ReferenceType name Class_ter ^ ^ arguments TypeArgument pattern_type ?_ter ^ ^ ^ ^ ^ ^ declarators VariableDeclarator name rawType_ter ^ ^ ^ ^ ^ 
arg ?
arg ?
Class<?> rawType = ;


LocalVariableDeclaration type ReferenceType name Class_ter ^ ^ ^ ^ declarators VariableDeclarator name rawType_ter ^ ^ initializer MethodInvocation qualifier returnTypeGenericMetadata_ter ^ ^ member rawType_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Class rawType = returnTypeGenericMetadata.rawType();

LocalVariableDeclaration type ReferenceType name Class_ter ^ ^ arguments TypeArgument pattern_type ?_ter ^ ^ ^ ^ ^ ^ declarators VariableDeclarator name rawType_ter ^ ^ initializer MethodInvocation qualifier returnTypeGenericMetadata_ter ^ ^ member answer_ter ^ ^ ^ ^ ^ ^ ^ 
arg ?
arg ?
Class<?> rawType = returnTypeGenericMetadata.answer();

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member returnTypeGenericMetadata_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
ReturnStatement expression MethodInvocation qualifier delegate_ter ^ ^ arguments MemberReference member rawType_ter ^ ^ ^ ^ member returnValueFor_ter ^ ^ ^ ^ ^ 
if((returnTypeGenericMetadata == null)){
return delegate.returnValueFor(rawType);}
IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member returnTypeGenericMetadata_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
ReturnStatement expression MethodInvocation arguments MemberReference member invocation_ter ^ ^ ^ MemberReference member returnTypeGenericMetadata_ter ^ ^ ^ ^ member getMock_ter ^ ^ ^ ^ ^ 
if((returnTypeGenericMetadata == null)){
return getMock(invocation, returnTypeGenericMetadata);}
LocalVariableDeclaration type ReferenceType name Class_ter ^ ^ arguments TypeArgument pattern_type ?_ter ^ ^ ^ ^ ^ ^ declarators VariableDeclarator name rawType_ter ^ ^ initializer MethodInvocation qualifier returnTypeGenericMetadata_ter ^ ^ member returnTypeGenericMetadata_ter ^ ^ ^ ^ ^ ^ ^ 
arg ?
arg ?
Class<?> rawType = returnTypeGenericMetadata.returnTypeGenericMetadata();

LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name Class_ter ^ ^ arguments TypeArgument pattern_type ?_ter ^ ^ ^ ^ ^ ^ declarators VariableDeclarator name rawType_ter ^ ^ initializer MethodInvocation qualifier returnTypeGenericMetadata_ter ^ ^ member rawType_ter ^ ^ ^ ^ ^ ^ ^ 
arg ?
arg ?
final Class<?> rawType = returnTypeGenericMetadata.rawType();

LocalVariableDeclaration type ReferenceType name Class_ter ^ ^ arguments TypeArgument pattern_type ?_ter ^ ^ ^ ^ ^ ^ declarators VariableDeclarator name rawType_ter ^ ^ initializer Cast type ReferenceType name Class_ter ^ ^ arguments TypeArgument pattern_type ?_ter ^ ^ ^ ^ ^ ^ expression MethodInvocation qualifier returnTypeGenericMetadata_ter ^ ^ member rawType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
arg ?
arg ?
arg ?
arg ?
Class<?> rawType = (Class<?>)returnTypeGenericMetadata.rawType();

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member returnTypeGenericMetadata_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((returnTypeGenericMetadata == null)){

StatementExpression expression MethodInvocation qualifier returnTypeGenericMetadata_ter ^ ^ member rawType_ter ^ ^ ^ ^ ^ 
returnTypeGenericMetadata.rawType();

LocalVariableDeclaration type ReferenceType name Class_ter ^ ^ arguments TypeArgument pattern_type ?_ter ^ ^ ^ ^ ^ ^ declarators VariableDeclarator name rawType_ter ^ ^ initializer MethodInvocation qualifier returnTypeGenericMetadata_ter ^ ^ arguments MemberReference member invocation_ter ^ ^ ^ ^ member rawType_ter ^ ^ ^ ^ ^ ^ ^ 
arg ?
arg ?
Class<?> rawType = returnTypeGenericMetadata.rawType(invocation);

LocalVariableDeclaration type ReferenceType name Class_ter ^ ^ arguments TypeArgument pattern_type ?_ter ^ ^ ^ ^ ^ ^ declarators VariableDeclarator name rawType_ter ^ ^ initializer MethodInvocation arguments MemberReference member returnTypeGenericMetadata_ter ^ ^ ^ ^ member rawType_ter ^ ^ ^ ^ ^ ^ ^ 
arg ?
arg ?
Class<?> rawType = rawType(returnTypeGenericMetadata);

LocalVariableDeclaration type ReferenceType name Class_ter ^ ^ arguments TypeArgument pattern_type ?_ter ^ ^ ^ ^ ^ ^ declarators VariableDeclarator name rawType_ter ^ ^ initializer MethodInvocation qualifier returnTypeGenericMetadata_ter ^ ^ member getMock_ter ^ ^ ^ ^ ^ ^ ^ 
arg ?
arg ?
Class<?> rawType = returnTypeGenericMetadata.getMock();

LocalVariableDeclaration type ReferenceType name Class_ter ^ ^ arguments TypeArgument pattern_type ?_ter ^ ^ ^ ^ ^ ^ declarators VariableDeclarator name rawType_ter ^ ^ initializer MethodInvocation qualifier returnTypeGenericMetadata_ter ^ ^ member getMethod_ter ^ ^ ^ ^ ^ ^ ^ 
arg ?
arg ?
Class<?> rawType = returnTypeGenericMetadata.getMethod();

LocalVariableDeclaration type ReferenceType name Class_ter ^ ^ arguments TypeArgument pattern_type ?_ter ^ ^ ^ TypeArgument pattern_type ?_ter ^ ^ ^ ^ ^ ^ declarators VariableDeclarator name rawType_ter ^ ^ initializer MethodInvocation qualifier returnTypeGenericMetadata_ter ^ ^ member rawType_ter ^ ^ ^ ^ ^ ^ ^ 
arg ?, ?
arg ?, ?
Class<?, ?> rawType = returnTypeGenericMetadata.rawType();

LocalVariableDeclaration type ReferenceType name Class_ter ^ ^ arguments TypeArgument pattern_type ?_ter ^ ^ ^ ^ ^ ^ declarators VariableDeclarator name rawType_ter ^ ^ initializer MethodInvocation member returnTypeGenericMetadata_ter ^ ^ ^ ^ ^ ^ ^ 
arg ?
arg ?
Class<?> rawType = returnTypeGenericMetadata();

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier returnTypeGenericMetadata_ter ^ ^ member rawType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if((returnTypeGenericMetadata.rawType() == null)){
return null;}
LocalVariableDeclaration type ReferenceType name Class_ter ^ ^ arguments TypeArgument pattern_type ?_ter ^ ^ ^ ^ ^ ^ declarators VariableDeclarator name rawType_ter ^ ^ initializer MethodInvocation arguments MemberReference member rawType_ter ^ ^ ^ ^ member rawType_ter ^ ^ ^ ^ ^ ^ ^ 
arg ?
arg ?
Class<?> rawType = rawType(rawType);

LocalVariableDeclaration type ReferenceType name Class_ter ^ ^ arguments TypeArgument pattern_type ?_ter ^ ^ ^ ^ ^ ^ declarators VariableDeclarator name rawType_ter ^ ^ initializer MethodInvocation qualifier returnTypeGenericMetadata_ter ^ ^ arguments MemberReference member returnTypeGenericMetadata_ter ^ ^ ^ ^ member rawType_ter ^ ^ ^ ^ ^ ^ ^ 
arg ?
arg ?
Class<?> rawType = returnTypeGenericMetadata.rawType(returnTypeGenericMetadata);

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier returnTypeGenericMetadata_ter ^ ^ member rawType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((returnTypeGenericMetadata.rawType() == null)){

LocalVariableDeclaration type ReferenceType name Class_ter ^ ^ arguments TypeArgument pattern_type ?_ter ^ ^ ^ ^ ^ ^ declarators VariableDeclarator name rawType_ter ^ ^ initializer MethodInvocation qualifier returnTypeGenericMetadata_ter ^ ^ member invocation_ter ^ ^ ^ ^ ^ ^ ^ 
arg ?
arg ?
Class<?> rawType = returnTypeGenericMetadata.invocation();

LocalVariableDeclaration type ReferenceType name Class_ter ^ ^ arguments TypeArgument pattern_type ?_ter ^ ^ ^ ^ ^ ^ declarators VariableDeclarator name rawType_ter ^ ^ initializer MethodInvocation qualifier invocation_ter ^ ^ member rawType_ter ^ ^ ^ ^ ^ ^ ^ 
arg ?
arg ?
Class<?> rawType = invocation.rawType();

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member returnTypeGenericMetadata_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if((returnTypeGenericMetadata != null)){
return null;}
LocalVariableDeclaration type ReferenceType name Class_ter ^ ^ arguments TypeArgument pattern_type ?_ter ^ ^ ^ ^ ^ ^ declarators VariableDeclarator name rawType_ter ^ ^ initializer MethodInvocation member rawType_ter ^ ^ ^ ^ ^ ^ ^ 
arg ?
arg ?
Class<?> rawType = rawType();

LocalVariableDeclaration type ReferenceType name Class_ter ^ ^ arguments TypeArgument pattern_type ?_ter ^ ^ ^ ^ ^ ^ declarators VariableDeclarator name rawType_ter ^ ^ initializer MethodInvocation qualifier returnTypeGenericMetadata_ter ^ ^ member resolveGenericReturnType_ter ^ ^ ^ ^ ^ ^ ^ 
arg ?
arg ?
Class<?> rawType = returnTypeGenericMetadata.resolveGenericReturnType();

LocalVariableDeclaration type ReferenceType name Object_ter ^ ^ ^ ^ declarators VariableDeclarator name rawType_ter ^ ^ initializer MethodInvocation qualifier returnTypeGenericMetadata_ter ^ ^ member rawType_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Object rawType = returnTypeGenericMetadata.rawType();

LocalVariableDeclaration type ReferenceType name Class_ter ^ ^ arguments TypeArgument pattern_type ?_ter ^ ^ ^ ^ ^ ^ declarators VariableDeclarator name rawType_ter ^ ^ initializer MethodInvocation qualifier returnTypeGenericMetadata_ter ^ ^ member debug_ter ^ ^ ^ ^ ^ ^ ^ 
arg ?
arg ?
Class<?> rawType = returnTypeGenericMetadata.debug();

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier returnTypeGenericMetadata_ter ^ ^ member rawType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((returnTypeGenericMetadata.rawType() != null)){

LocalVariableDeclaration type ReferenceType name Class_ter ^ ^ arguments TypeArgument pattern_type ?_ter ^ ^ ^ ^ ^ ^ declarators VariableDeclarator name rawType_ter ^ ^ initializer MethodInvocation qualifier mockitoCore_ter ^ ^ member rawType_ter ^ ^ ^ ^ ^ ^ ^ 
arg ?
arg ?
Class<?> rawType = mockitoCore.rawType();

LocalVariableDeclaration type ReferenceType name Class_ter ^ ^ arguments TypeArgument pattern_type ?_ter ^ ^ ^ ^ ^ ^ declarators VariableDeclarator name rawType_ter ^ ^ initializer MethodInvocation qualifier returnTypeGenericMetadata_ter ^ ^ member getName_ter ^ ^ ^ ^ ^ ^ ^ 
arg ?
arg ?
Class<?> rawType = returnTypeGenericMetadata.getName();

LocalVariableDeclaration type ReferenceType name List_ter ^ ^ arguments TypeArgument pattern_type ?_ter ^ ^ ^ ^ ^ ^ declarators VariableDeclarator name rawType_ter ^ ^ initializer MethodInvocation qualifier returnTypeGenericMetadata_ter ^ ^ member rawType_ter ^ ^ ^ ^ ^ ^ ^ 
arg ?
arg ?
List<?> rawType = returnTypeGenericMetadata.rawType();

LocalVariableDeclaration type ReferenceType name Class_ter ^ ^ arguments TypeArgument pattern_type ?_ter ^ ^ ^ ^ ^ ^ declarators VariableDeclarator name rawType_ter ^ ^ initializer MethodInvocation qualifier returnTypeGenericMetadata_ter ^ ^ member isTypeMockable_ter ^ ^ ^ ^ ^ ^ ^ 
arg ?
arg ?
Class<?> rawType = returnTypeGenericMetadata.isTypeMockable();

LocalVariableDeclaration type ReferenceType name Class_ter ^ ^ arguments TypeArgument pattern_type ?_ter ^ ^ ^ ^ ^ ^ declarators VariableDeclarator name rawType_ter ^ ^ initializer MethodInvocation qualifier returnTypeGenericMetadata_ter ^ ^ arguments MethodInvocation qualifier returnTypeGenericMetadata_ter ^ ^ member rawType_ter ^ ^ ^ ^ member rawType_ter ^ ^ ^ ^ ^ ^ ^ 
arg ?
arg ?
Class<?> rawType = returnTypeGenericMetadata.rawType(returnTypeGenericMetadata.rawType());

LocalVariableDeclaration type ReferenceType name GenericMetadataSupport_ter ^ ^ ^ ^ declarators VariableDeclarator name rawType_ter ^ ^ initializer MethodInvocation qualifier returnTypeGenericMetadata_ter ^ ^ member rawType_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
GenericMetadataSupport rawType = returnTypeGenericMetadata.rawType();

LocalVariableDeclaration type ReferenceType name Class_ter ^ ^ arguments TypeArgument pattern_type ?_ter ^ ^ ^ ^ ^ ^ declarators VariableDeclarator name rawType_ter ^ ^ initializer MethodInvocation qualifier returnTypeGenericMetadata_ter ^ ^ member add_ter ^ ^ ^ ^ ^ ^ ^ 
arg ?
arg ?
Class<?> rawType = returnTypeGenericMetadata.add();

LocalVariableDeclaration type ReferenceType name Class_ter ^ ^ arguments TypeArgument pattern_type ?_ter ^ ^ ^ ^ ^ ^ declarators VariableDeclarator name rawType_ter ^ ^ initializer MethodInvocation qualifier returnTypeGenericMetadata_ter ^ ^ arguments Literal value false_ter ^ ^ ^ ^ member rawType_ter ^ ^ ^ ^ ^ ^ ^ 
arg ?
arg ?
Class<?> rawType = returnTypeGenericMetadata.rawType(false);

StatementExpression expression MethodInvocation qualifier mockitoCore_ter ^ ^ member validateMockitoUsage_ter ^ ^ ^ ^ ^ 
mockitoCore.validateMockitoUsage();

LocalVariableDeclaration type ReferenceType name Class_ter ^ ^ arguments TypeArgument type ReferenceType name Object_ter ^ ^ ^ ^ ^ ^ ^ ^ declarators VariableDeclarator name rawType_ter ^ ^ initializer MethodInvocation qualifier returnTypeGenericMetadata_ter ^ ^ member rawType_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg Object
arg 
arg Object
Class<Object> rawType = returnTypeGenericMetadata.rawType();

LocalVariableDeclaration type ReferenceType name Class_ter ^ ^ arguments TypeArgument pattern_type ?_ter ^ ^ ^ ^ ^ ^ declarators VariableDeclarator name rawType_ter ^ ^ initializer MethodInvocation qualifier returnTypeGenericMetadata_ter ^ ^ arguments MemberReference member rawType_ter ^ ^ ^ ^ member returnTypeGenericMetadata_ter ^ ^ ^ ^ ^ ^ ^ 
arg ?
arg ?
Class<?> rawType = returnTypeGenericMetadata.returnTypeGenericMetadata(rawType);

condition MethodInvocation prefix_operators !_ter ^ ^ qualifier mockitoCore_ter ^ ^ arguments MemberReference member rawType_ter ^ ^ ^ ^ member isTypeMockable_ter ^ ^ ^ ^ 
if(!mockitoCore.isTypeMockable(rawType)){
IfStatement condition MethodInvocation qualifier mockitoCore_ter ^ ^ arguments MemberReference member rawType_ter ^ ^ ^ ^ member isTypeMockable_ter ^ ^ ^ ^ ^ 
if(mockitoCore.isTypeMockable(rawType)){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier mockitoCore_ter ^ ^ arguments MemberReference member rawType_ter ^ ^ ^ ^ member isTypeMockable_ter ^ ^ ^ ^ ^ 
if(!mockitoCore.isTypeMockable(rawType)){

condition MethodInvocation prefix_operators !_ter ^ ^ qualifier delegate_ter ^ ^ arguments MemberReference member rawType_ter ^ ^ ^ ^ member isTypeMockable_ter ^ ^ ^ ^ 
if(!delegate.isTypeMockable(rawType)){
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ arguments MemberReference member rawType_ter ^ ^ ^ ^ member isTypeMockable_ter ^ ^ ^ ^ ^ 
if(!isTypeMockable(rawType)){

condition MethodInvocation prefix_operators !_ter ^ ^ qualifier mockitoCore_ter ^ ^ arguments MemberReference member returnTypeGenericMetadata_ter ^ ^ ^ ^ member isTypeMockable_ter ^ ^ ^ ^ 
if(!mockitoCore.isTypeMockable(returnTypeGenericMetadata)){
IfStatement condition MethodInvocation arguments MemberReference member rawType_ter ^ ^ ^ ^ member isTypeMockable_ter ^ ^ ^ ^ ^ 
if(isTypeMockable(rawType)){

IfStatement condition MethodInvocation qualifier mockitoCore_ter ^ ^ arguments MemberReference member rawType_ter ^ ^ ^ MemberReference member rawType_ter ^ ^ ^ ^ member isTypeMockable_ter ^ ^ ^ ^ ^ 
if(mockitoCore.isTypeMockable(rawType, rawType)){

condition MethodInvocation prefix_operators !_ter ^ ^ qualifier invocation_ter ^ ^ arguments MemberReference member rawType_ter ^ ^ ^ ^ member isTypeMockable_ter ^ ^ ^ ^ 
if(!invocation.isTypeMockable(rawType)){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member rawType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier mockitoCore_ter ^ ^ arguments MemberReference member rawType_ter ^ ^ ^ ^ member isTypeMockable_ter ^ ^ ^ ^ ^ ^ ^ 
if(((rawType != null) && !mockitoCore.isTypeMockable(rawType))){

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member rawType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((rawType != null)){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member rawType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier mockitoCore_ter ^ ^ arguments MemberReference member rawType_ter ^ ^ ^ ^ member isTypeMockable_ter ^ ^ ^ ^ ^ ^ ^ 
if(((rawType == null) && !mockitoCore.isTypeMockable(rawType))){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier mockitoCore_ter ^ ^ arguments MemberReference member rawType_ter ^ ^ ^ MemberReference member rawType_ter ^ ^ ^ ^ member isTypeMockable_ter ^ ^ ^ ^ ^ 
if(!mockitoCore.isTypeMockable(rawType, rawType)){

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member rawType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((rawType == null)){

IfStatement condition MemberReference member rawType_ter ^ ^ ^ ^ ^ 
if(rawType){

IfStatement condition MethodInvocation qualifier mockitoCore_ter ^ ^ arguments MemberReference member invocation_ter ^ ^ ^ MemberReference member returnTypeGenericMetadata_ter ^ ^ ^ ^ member isTypeMockable_ter ^ ^ ^ ^ ^ 
if(mockitoCore.isTypeMockable(invocation, returnTypeGenericMetadata)){

condition MethodInvocation prefix_operators !_ter ^ ^ qualifier returnTypeGenericMetadata_ter ^ ^ arguments MemberReference member rawType_ter ^ ^ ^ ^ member isTypeMockable_ter ^ ^ ^ ^ 
if(!returnTypeGenericMetadata.isTypeMockable(rawType)){
condition MethodInvocation prefix_operators !_ter ^ ^ qualifier mockitoCore_ter ^ ^ arguments MemberReference member rawType_ter ^ ^ ^ ^ member answer_ter ^ ^ ^ ^ 
if(!mockitoCore.answer(rawType)){
IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member rawType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
ReturnStatement expression MethodInvocation qualifier delegate_ter ^ ^ arguments MemberReference member rawType_ter ^ ^ ^ ^ member returnValueFor_ter ^ ^ ^ ^ ^ 
if((rawType == null)){
return delegate.returnValueFor(rawType);}
IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member rawType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if((rawType == null)){
return null;}
IfStatement condition MemberReference prefix_operators !_ter ^ ^ member rawType_ter ^ ^ ^ ^ ^ 
if(!rawType){

StatementExpression expression MethodInvocation prefix_operators !_ter ^ ^ qualifier mockitoCore_ter ^ ^ arguments MemberReference member rawType_ter ^ ^ ^ ^ member isTypeMockable_ter ^ ^ ^ ^ ^ 
!mockitoCore.isTypeMockable(rawType);


IfStatement condition MethodInvocation qualifier mockitoCore_ter ^ ^ selectors MethodInvocation arguments MethodInvocation qualifier invocation_ter ^ ^ member getMethod_ter ^ ^ ^ ^ member resolveGenericReturnType_ter ^ ^ ^ ^ arguments MemberReference member rawType_ter ^ ^ ^ ^ member isTypeMockable_ter ^ ^ ^ ^ ^ 
if(mockitoCore.isTypeMockable(rawType).resolveGenericReturnType(invocation.getMethod())){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier mockitoCore_ter ^ ^ arguments MemberReference member invocation_ter ^ ^ ^ MemberReference member returnTypeGenericMetadata_ter ^ ^ ^ ^ member isTypeMockable_ter ^ ^ ^ ^ ^ 
if(!mockitoCore.isTypeMockable(invocation, returnTypeGenericMetadata)){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member rawType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier mockitoCore_ter ^ ^ arguments MemberReference member rawType_ter ^ ^ ^ ^ member isTypeMockable_ter ^ ^ ^ ^ ^ ^ ^ 
if(((rawType == null) || !mockitoCore.isTypeMockable(rawType))){

condition MethodInvocation prefix_operators !_ter ^ ^ qualifier mockitoCore_ter ^ ^ arguments MemberReference member invocation_ter ^ ^ ^ ^ member isTypeMockable_ter ^ ^ ^ ^ 
if(!mockitoCore.isTypeMockable(invocation)){
IfStatement condition MethodInvocation qualifier rawType_ter ^ ^ member isTypeMockable_ter ^ ^ ^ ^ ^ 
if(rawType.isTypeMockable()){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member rawType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier mockitoCore_ter ^ ^ arguments MemberReference member rawType_ter ^ ^ ^ ^ member isTypeMockable_ter ^ ^ ^ ^ ^ ^ ^ 
if(((rawType != null) || !mockitoCore.isTypeMockable(rawType))){

IfStatement condition MethodInvocation qualifier mockitoCore_ter ^ ^ arguments MethodInvocation qualifier invocation_ter ^ ^ member getMock_ter ^ ^ ^ ^ member isTypeMockable_ter ^ ^ ^ ^ ^ 
if(mockitoCore.isTypeMockable(invocation.getMock())){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier mockitoCore_ter ^ ^ arguments MethodInvocation qualifier invocation_ter ^ ^ member getMock_ter ^ ^ ^ ^ member isTypeMockable_ter ^ ^ ^ ^ ^ 
if(!mockitoCore.isTypeMockable(invocation.getMock())){

condition MethodInvocation prefix_operators !_ter ^ ^ qualifier mockitoCore_ter ^ ^ arguments MemberReference member loc2 ^ ^ ^ ^ member isTypeMockable_ter ^ ^ ^ ^ 
if(!mockitoCore.isTypeMockable()){
IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member rawType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if((rawType == null)){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier rawType_ter ^ ^ member isTypeMockable_ter ^ ^ ^ ^ ^ 
if(!rawType.isTypeMockable()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier mockitoCore_ter ^ ^ member isTypeMockable_ter ^ ^ ^ ^ ^ 
if(!mockitoCore.isTypeMockable()){

condition MethodInvocation prefix_operators !_ter ^ ^ qualifier mockitoCore_ter ^ ^ arguments MemberReference member rawType_ter ^ ^ ^ ^ member actualParameterizedType_ter ^ ^ ^ ^ 
if(!mockitoCore.actualParameterizedType(rawType)){
condition MethodInvocation prefix_operators !_ter ^ ^ qualifier mockitoCore_ter ^ ^ arguments MemberReference member rawType_ter ^ ^ ^ ^ member getMock_ter ^ ^ ^ ^ 
if(!mockitoCore.getMock(rawType)){
ReturnStatement expression MethodInvocation qualifier mockSettings_ter ^ ^ arguments MethodInvocation arguments MemberReference member returnTypeGenericMetadata_ter ^ ^ ^ ^ member returnsDeepStubsAnswerUsing_ter ^ ^ ^ ^ member defaultAnswer_ter ^ ^ ^ ^ ^ 
return mockSettings.defaultAnswer(returnsDeepStubsAnswerUsing(returnTypeGenericMetadata));
ReturnStatement expression MethodInvocation qualifier mockSettings_ter ^ ^ arguments MemberReference member returnTypeGenericMetadata_ter ^ ^ ^ ^ member defaultAnswer_ter ^ ^ ^ ^ ^ 
return mockSettings.defaultAnswer(returnTypeGenericMetadata);
ReturnStatement expression MethodInvocation qualifier mockSettings_ter ^ ^ arguments MethodInvocation arguments MemberReference member returnTypeGenericMetadata_ter ^ ^ ^ ^ member withSettingsUsing_ter ^ ^ ^ ^ member defaultAnswer_ter ^ ^ ^ ^ ^ 
return mockSettings.defaultAnswer(withSettingsUsing(returnTypeGenericMetadata));
ReturnStatement expression MethodInvocation qualifier mockSettings_ter ^ ^ arguments MethodInvocation arguments MemberReference member mockSettings_ter ^ ^ ^ ^ member returnsDeepStubsAnswerUsing_ter ^ ^ ^ ^ member defaultAnswer_ter ^ ^ ^ ^ ^ 
return mockSettings.defaultAnswer(returnsDeepStubsAnswerUsing(mockSettings));
ReturnStatement expression MethodInvocation qualifier mockSettings_ter ^ ^ arguments MethodInvocation arguments MemberReference member returnTypeGenericMetadata_ter ^ ^ ^ ^ member extraInterfaces_ter ^ ^ ^ ^ member defaultAnswer_ter ^ ^ ^ ^ ^ 
return mockSettings.defaultAnswer(extraInterfaces(returnTypeGenericMetadata));
ReturnStatement expression MethodInvocation qualifier mockSettings_ter ^ ^ arguments MethodInvocation arguments MemberReference member returnTypeGenericMetadata_ter ^ ^ ^ ^ member withSettings_ter ^ ^ ^ ^ member defaultAnswer_ter ^ ^ ^ ^ ^ 
return mockSettings.defaultAnswer(withSettings(returnTypeGenericMetadata));
ReturnStatement expression MethodInvocation arguments MemberReference member returnTypeGenericMetadata_ter ^ ^ ^ ^ member returnsDeepStubsAnswerUsing_ter ^ ^ ^ ^ ^ 
return returnsDeepStubsAnswerUsing(returnTypeGenericMetadata);
ReturnStatement expression MethodInvocation qualifier mockSettings_ter ^ ^ arguments MethodInvocation qualifier returnTypeGenericMetadata_ter ^ ^ arguments MemberReference member returnTypeGenericMetadata_ter ^ ^ ^ ^ member returnsDeepStubsAnswerUsing_ter ^ ^ ^ ^ member defaultAnswer_ter ^ ^ ^ ^ ^ 
return mockSettings.defaultAnswer(returnTypeGenericMetadata.returnsDeepStubsAnswerUsing(returnTypeGenericMetadata));
ReturnStatement expression MethodInvocation qualifier mockSettings_ter ^ ^ arguments MemberReference member length_ter ^ ^ ^ ^ member defaultAnswer_ter ^ ^ ^ ^ ^ 
return mockSettings.defaultAnswer(length);
ReturnStatement expression MethodInvocation qualifier mockSettings_ter ^ ^ arguments MethodInvocation member returnsDeepStubsAnswerUsing_ter ^ ^ ^ ^ member defaultAnswer_ter ^ ^ ^ ^ ^ 
return mockSettings.defaultAnswer(returnsDeepStubsAnswerUsing());
ReturnStatement expression MethodInvocation qualifier mockSettings_ter ^ ^ arguments MethodInvocation arguments MethodInvocation qualifier returnTypeGenericMetadata_ter ^ ^ member rawExtraInterfaces_ter ^ ^ ^ ^ member returnsDeepStubsAnswerUsing_ter ^ ^ ^ ^ member defaultAnswer_ter ^ ^ ^ ^ ^ 
return mockSettings.defaultAnswer(returnsDeepStubsAnswerUsing(returnTypeGenericMetadata.rawExtraInterfaces()));
ReturnStatement expression MethodInvocation qualifier mockSettings_ter ^ ^ arguments MethodInvocation arguments MemberReference member returnTypeGenericMetadata_ter ^ ^ ^ ^ member rawExtraInterfaces_ter ^ ^ ^ ^ member defaultAnswer_ter ^ ^ ^ ^ ^ 
return mockSettings.defaultAnswer(rawExtraInterfaces(returnTypeGenericMetadata));
ReturnStatement expression MethodInvocation arguments MemberReference member returnTypeGenericMetadata_ter ^ ^ ^ ^ member defaultAnswer_ter ^ ^ ^ ^ ^ 
return defaultAnswer(returnTypeGenericMetadata);
ReturnStatement expression MethodInvocation qualifier mockSettings_ter ^ ^ arguments MethodInvocation qualifier returnTypeGenericMetadata_ter ^ ^ member rawExtraInterfaces_ter ^ ^ ^ ^ member defaultAnswer_ter ^ ^ ^ ^ ^ 
return mockSettings.defaultAnswer(returnTypeGenericMetadata.rawExtraInterfaces());
ReturnStatement expression MethodInvocation qualifier mockSettings_ter ^ ^ arguments MethodInvocation arguments MemberReference member length_ter ^ ^ ^ ^ member returnsDeepStubsAnswerUsing_ter ^ ^ ^ ^ member defaultAnswer_ter ^ ^ ^ ^ ^ 
return mockSettings.defaultAnswer(returnsDeepStubsAnswerUsing(length));
IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member mockSettings_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((mockSettings != null)){


ReturnStatement expression MethodInvocation qualifier mockSettings_ter ^ ^ arguments MethodInvocation qualifier returnTypeGenericMetadata_ter ^ ^ member returnsDeepStubsAnswerUsing_ter ^ ^ ^ ^ member defaultAnswer_ter ^ ^ ^ ^ ^ 
return mockSettings.defaultAnswer(returnTypeGenericMetadata.returnsDeepStubsAnswerUsing());
ReturnStatement expression MethodInvocation qualifier mockSettings_ter ^ ^ arguments MethodInvocation member rawExtraInterfaces_ter ^ ^ ^ ^ member defaultAnswer_ter ^ ^ ^ ^ ^ 
return mockSettings.defaultAnswer(rawExtraInterfaces());
ReturnStatement expression MethodInvocation qualifier mockSettings_ter ^ ^ arguments MethodInvocation member withSettings_ter ^ ^ ^ ^ member defaultAnswer_ter ^ ^ ^ ^ ^ 
return mockSettings.defaultAnswer(withSettings());
ReturnStatement expression MethodInvocation qualifier mockSettings_ter ^ ^ member defaultAnswer_ter ^ ^ ^ ^ ^ 
return mockSettings.defaultAnswer();
IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member mockSettings_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if((mockSettings == null)){
return null;}
ReturnStatement expression MethodInvocation qualifier mockSettings_ter ^ ^ arguments MethodInvocation arguments MethodInvocation arguments MemberReference member returnTypeGenericMetadata_ter ^ ^ ^ ^ member returnsDeepStubsAnswerUsing_ter ^ ^ ^ ^ member returnsDeepStubsAnswerUsing_ter ^ ^ ^ ^ member defaultAnswer_ter ^ ^ ^ ^ ^ 
return mockSettings.defaultAnswer(returnsDeepStubsAnswerUsing(returnsDeepStubsAnswerUsing(returnTypeGenericMetadata)));
ReturnStatement expression MethodInvocation qualifier mockSettings_ter ^ ^ arguments MethodInvocation qualifier mockSettings_ter ^ ^ arguments MethodInvocation arguments MemberReference member returnTypeGenericMetadata_ter ^ ^ ^ ^ member returnsDeepStubsAnswerUsing_ter ^ ^ ^ ^ member defaultAnswer_ter ^ ^ ^ ^ member defaultAnswer_ter ^ ^ ^ ^ ^ 
return mockSettings.defaultAnswer(mockSettings.defaultAnswer(returnsDeepStubsAnswerUsing(returnTypeGenericMetadata)));
ReturnStatement expression MethodInvocation qualifier mockSettings_ter ^ ^ arguments MethodInvocation arguments MemberReference member returnTypeGenericMetadata_ter ^ ^ ^ ^ member returnsDeepStubsAnswerUsing_ter ^ ^ ^ ^ member debug_ter ^ ^ ^ ^ ^ 
return mockSettings.debug(returnsDeepStubsAnswerUsing(returnTypeGenericMetadata));
ReturnStatement expression MethodInvocation qualifier mockSettings_ter ^ ^ arguments MethodInvocation arguments MemberReference member returnTypeGenericMetadata_ter ^ ^ ^ MemberReference member returnTypeGenericMetadata_ter ^ ^ ^ ^ member returnsDeepStubsAnswerUsing_ter ^ ^ ^ ^ member defaultAnswer_ter ^ ^ ^ ^ ^ 
return mockSettings.defaultAnswer(returnsDeepStubsAnswerUsing(returnTypeGenericMetadata, returnTypeGenericMetadata));
ReturnStatement expression MemberReference member mockSettings_ter ^ ^ ^ ^ ^ 
return mockSettings;
ReturnStatement expression MethodInvocation qualifier mockSettings_ter ^ ^ arguments MethodInvocation arguments MemberReference member returnTypeGenericMetadata_ter ^ ^ ^ ^ member returnsDeepStubsAnswerUsing_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ ^ member defaultAnswer_ter ^ ^ ^ ^ ^ 
return mockSettings.defaultAnswer(returnsDeepStubsAnswerUsing(returnTypeGenericMetadata), 0);
ReturnStatement expression MethodInvocation qualifier mockSettings_ter ^ ^ arguments MethodInvocation arguments MemberReference member returnTypeGenericMetadata_ter ^ ^ ^ ^ member returnsDeepStubsAnswerUsing_ter ^ ^ ^ Literal value false_ter ^ ^ ^ ^ member defaultAnswer_ter ^ ^ ^ ^ ^ 
return mockSettings.defaultAnswer(returnsDeepStubsAnswerUsing(returnTypeGenericMetadata), false);
ReturnStatement expression MethodInvocation qualifier mockSettings_ter ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member defaultAnswer_ter ^ ^ ^ ^ ^ 
return mockSettings.defaultAnswer();
ReturnStatement expression MethodInvocation arguments MethodInvocation arguments MemberReference member returnTypeGenericMetadata_ter ^ ^ ^ ^ member returnsDeepStubsAnswerUsing_ter ^ ^ ^ ^ member defaultAnswer_ter ^ ^ ^ ^ ^ 
return defaultAnswer(returnsDeepStubsAnswerUsing(returnTypeGenericMetadata));
ReturnStatement expression MethodInvocation qualifier returnTypeGenericMetadata_ter ^ ^ arguments MethodInvocation arguments MemberReference member returnTypeGenericMetadata_ter ^ ^ ^ ^ member returnsDeepStubsAnswerUsing_ter ^ ^ ^ ^ member defaultAnswer_ter ^ ^ ^ ^ ^ 
return returnTypeGenericMetadata.defaultAnswer(returnsDeepStubsAnswerUsing(returnTypeGenericMetadata));
ReturnStatement expression MethodInvocation qualifier mockSettings_ter ^ ^ arguments MethodInvocation arguments MemberReference member returnTypeGenericMetadata_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ member defaultAnswer_ter ^ ^ ^ ^ ^ 
return mockSettings.defaultAnswer(get(returnTypeGenericMetadata));
ReturnStatement expression MethodInvocation qualifier mockSettings_ter ^ ^ arguments MethodInvocation arguments MethodInvocation member withSettings_ter ^ ^ ^ ^ member returnsDeepStubsAnswerUsing_ter ^ ^ ^ ^ member defaultAnswer_ter ^ ^ ^ ^ ^ 
return mockSettings.defaultAnswer(returnsDeepStubsAnswerUsing(withSettings()));
ReturnStatement expression MethodInvocation qualifier mockSettings_ter ^ ^ arguments MethodInvocation arguments MemberReference member returnTypeGenericMetadata_ter ^ ^ ^ MemberReference member mockSettings_ter ^ ^ ^ ^ member returnsDeepStubsAnswerUsing_ter ^ ^ ^ ^ member defaultAnswer_ter ^ ^ ^ ^ ^ 
return mockSettings.defaultAnswer(returnsDeepStubsAnswerUsing(returnTypeGenericMetadata, mockSettings));
ReturnStatement expression MethodInvocation qualifier mockSettings_ter ^ ^ arguments MethodInvocation arguments MemberReference member returnTypeGenericMetadata_ter ^ ^ ^ ^ member returnsDeepStubsAnswerUsing_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member defaultAnswer_ter ^ ^ ^ ^ ^ 
return mockSettings.defaultAnswer(returnsDeepStubsAnswerUsing(returnTypeGenericMetadata), true);
ReturnStatement expression MethodInvocation qualifier mockSettings_ter ^ ^ arguments MethodInvocation arguments MemberReference member returnTypeGenericMetadata_ter ^ ^ ^ ^ member returnsDeepStubsAnswerUsing_ter ^ ^ ^ ^ member withSettingsUsing_ter ^ ^ ^ ^ ^ 
return mockSettings.withSettingsUsing(returnsDeepStubsAnswerUsing(returnTypeGenericMetadata));
ReturnStatement expression MethodInvocation qualifier mockSettings_ter ^ ^ arguments MethodInvocation arguments MemberReference member returnTypeGenericMetadata_ter ^ ^ ^ ^ member debug_ter ^ ^ ^ ^ member defaultAnswer_ter ^ ^ ^ ^ ^ 
return mockSettings.defaultAnswer(debug(returnTypeGenericMetadata));
ReturnStatement expression MethodInvocation qualifier mockSettings_ter ^ ^ arguments MethodInvocation arguments MemberReference member returnTypeGenericMetadata_ter ^ ^ ^ ^ member returnsDeepStubsAnswerUsing_ter ^ ^ ^ ^ member defaultAnswer_ter ^ ^ ^ ^ ^ 
return mockSettings.defaultAnswer(returnsDeepStubsAnswerUsing(returnTypeGenericMetadata));
ReturnStatement expression MethodInvocation qualifier mockSettings_ter ^ ^ arguments MemberReference member returnTypeGenericMetadata_ter ^ ^ ^ ^ member defaultAnswer_ter ^ ^ ^ ^ ^ 
return mockSettings.defaultAnswer(returnTypeGenericMetadata);
ReturnStatement expression MethodInvocation qualifier mockSettings_ter ^ ^ arguments MethodInvocation arguments MemberReference member returnTypeGenericMetadata_ter ^ ^ ^ ^ member withSettingsUsing_ter ^ ^ ^ ^ member defaultAnswer_ter ^ ^ ^ ^ ^ 
return mockSettings.defaultAnswer(withSettingsUsing(returnTypeGenericMetadata));
ReturnStatement expression MethodInvocation qualifier mockSettings_ter ^ ^ arguments MethodInvocation arguments MemberReference member mockSettings_ter ^ ^ ^ ^ member returnsDeepStubsAnswerUsing_ter ^ ^ ^ ^ member defaultAnswer_ter ^ ^ ^ ^ ^ 
return mockSettings.defaultAnswer(returnsDeepStubsAnswerUsing(mockSettings));
ReturnStatement expression MethodInvocation qualifier mockSettings_ter ^ ^ arguments MethodInvocation arguments MemberReference member returnTypeGenericMetadata_ter ^ ^ ^ ^ member extraInterfaces_ter ^ ^ ^ ^ member defaultAnswer_ter ^ ^ ^ ^ ^ 
return mockSettings.defaultAnswer(extraInterfaces(returnTypeGenericMetadata));
ReturnStatement expression MethodInvocation qualifier mockSettings_ter ^ ^ arguments MethodInvocation arguments MemberReference member returnTypeGenericMetadata_ter ^ ^ ^ ^ member withSettings_ter ^ ^ ^ ^ member defaultAnswer_ter ^ ^ ^ ^ ^ 
return mockSettings.defaultAnswer(withSettings(returnTypeGenericMetadata));
ReturnStatement expression MethodInvocation arguments MemberReference member returnTypeGenericMetadata_ter ^ ^ ^ ^ member returnsDeepStubsAnswerUsing_ter ^ ^ ^ ^ ^ 
return returnsDeepStubsAnswerUsing(returnTypeGenericMetadata);
ReturnStatement expression MethodInvocation qualifier mockSettings_ter ^ ^ arguments MethodInvocation qualifier returnTypeGenericMetadata_ter ^ ^ arguments MemberReference member returnTypeGenericMetadata_ter ^ ^ ^ ^ member returnsDeepStubsAnswerUsing_ter ^ ^ ^ ^ member defaultAnswer_ter ^ ^ ^ ^ ^ 
return mockSettings.defaultAnswer(returnTypeGenericMetadata.returnsDeepStubsAnswerUsing(returnTypeGenericMetadata));
ReturnStatement expression MethodInvocation qualifier mockSettings_ter ^ ^ arguments MemberReference member length_ter ^ ^ ^ ^ member defaultAnswer_ter ^ ^ ^ ^ ^ 
return mockSettings.defaultAnswer(length);
ReturnStatement expression MethodInvocation qualifier mockSettings_ter ^ ^ arguments MethodInvocation member returnsDeepStubsAnswerUsing_ter ^ ^ ^ ^ member defaultAnswer_ter ^ ^ ^ ^ ^ 
return mockSettings.defaultAnswer(returnsDeepStubsAnswerUsing());
ReturnStatement expression MethodInvocation qualifier mockSettings_ter ^ ^ arguments MethodInvocation arguments MethodInvocation qualifier returnTypeGenericMetadata_ter ^ ^ member rawExtraInterfaces_ter ^ ^ ^ ^ member returnsDeepStubsAnswerUsing_ter ^ ^ ^ ^ member defaultAnswer_ter ^ ^ ^ ^ ^ 
return mockSettings.defaultAnswer(returnsDeepStubsAnswerUsing(returnTypeGenericMetadata.rawExtraInterfaces()));
ReturnStatement expression MethodInvocation qualifier mockSettings_ter ^ ^ arguments MethodInvocation arguments MemberReference member returnTypeGenericMetadata_ter ^ ^ ^ ^ member rawExtraInterfaces_ter ^ ^ ^ ^ member defaultAnswer_ter ^ ^ ^ ^ ^ 
return mockSettings.defaultAnswer(rawExtraInterfaces(returnTypeGenericMetadata));
ReturnStatement expression MethodInvocation arguments MemberReference member returnTypeGenericMetadata_ter ^ ^ ^ ^ member defaultAnswer_ter ^ ^ ^ ^ ^ 
return defaultAnswer(returnTypeGenericMetadata);
ReturnStatement expression MethodInvocation qualifier mockSettings_ter ^ ^ arguments MethodInvocation qualifier returnTypeGenericMetadata_ter ^ ^ member rawExtraInterfaces_ter ^ ^ ^ ^ member defaultAnswer_ter ^ ^ ^ ^ ^ 
return mockSettings.defaultAnswer(returnTypeGenericMetadata.rawExtraInterfaces());
ReturnStatement expression MethodInvocation qualifier mockSettings_ter ^ ^ arguments MethodInvocation arguments MemberReference member length_ter ^ ^ ^ ^ member returnsDeepStubsAnswerUsing_ter ^ ^ ^ ^ member defaultAnswer_ter ^ ^ ^ ^ ^ 
return mockSettings.defaultAnswer(returnsDeepStubsAnswerUsing(length));
IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member mockSettings_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((mockSettings != null)){


ReturnStatement expression MethodInvocation qualifier mockSettings_ter ^ ^ arguments MethodInvocation qualifier returnTypeGenericMetadata_ter ^ ^ member returnsDeepStubsAnswerUsing_ter ^ ^ ^ ^ member defaultAnswer_ter ^ ^ ^ ^ ^ 
return mockSettings.defaultAnswer(returnTypeGenericMetadata.returnsDeepStubsAnswerUsing());
ReturnStatement expression MethodInvocation qualifier mockSettings_ter ^ ^ arguments MethodInvocation member rawExtraInterfaces_ter ^ ^ ^ ^ member defaultAnswer_ter ^ ^ ^ ^ ^ 
return mockSettings.defaultAnswer(rawExtraInterfaces());
ReturnStatement expression MethodInvocation qualifier mockSettings_ter ^ ^ arguments MethodInvocation member withSettings_ter ^ ^ ^ ^ member defaultAnswer_ter ^ ^ ^ ^ ^ 
return mockSettings.defaultAnswer(withSettings());
ReturnStatement expression MethodInvocation qualifier mockSettings_ter ^ ^ member defaultAnswer_ter ^ ^ ^ ^ ^ 
return mockSettings.defaultAnswer();
IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member mockSettings_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if((mockSettings == null)){
return null;}
ReturnStatement expression MethodInvocation qualifier mockSettings_ter ^ ^ arguments MethodInvocation arguments MethodInvocation arguments MemberReference member returnTypeGenericMetadata_ter ^ ^ ^ ^ member returnsDeepStubsAnswerUsing_ter ^ ^ ^ ^ member returnsDeepStubsAnswerUsing_ter ^ ^ ^ ^ member defaultAnswer_ter ^ ^ ^ ^ ^ 
return mockSettings.defaultAnswer(returnsDeepStubsAnswerUsing(returnsDeepStubsAnswerUsing(returnTypeGenericMetadata)));
ReturnStatement expression MethodInvocation qualifier mockSettings_ter ^ ^ arguments MethodInvocation qualifier mockSettings_ter ^ ^ arguments MethodInvocation arguments MemberReference member returnTypeGenericMetadata_ter ^ ^ ^ ^ member returnsDeepStubsAnswerUsing_ter ^ ^ ^ ^ member defaultAnswer_ter ^ ^ ^ ^ member defaultAnswer_ter ^ ^ ^ ^ ^ 
return mockSettings.defaultAnswer(mockSettings.defaultAnswer(returnsDeepStubsAnswerUsing(returnTypeGenericMetadata)));
ReturnStatement expression MethodInvocation qualifier mockSettings_ter ^ ^ arguments MethodInvocation arguments MemberReference member returnTypeGenericMetadata_ter ^ ^ ^ ^ member returnsDeepStubsAnswerUsing_ter ^ ^ ^ ^ member debug_ter ^ ^ ^ ^ ^ 
return mockSettings.debug(returnsDeepStubsAnswerUsing(returnTypeGenericMetadata));
ReturnStatement expression MethodInvocation qualifier mockSettings_ter ^ ^ arguments MethodInvocation arguments MemberReference member returnTypeGenericMetadata_ter ^ ^ ^ MemberReference member returnTypeGenericMetadata_ter ^ ^ ^ ^ member returnsDeepStubsAnswerUsing_ter ^ ^ ^ ^ member defaultAnswer_ter ^ ^ ^ ^ ^ 
return mockSettings.defaultAnswer(returnsDeepStubsAnswerUsing(returnTypeGenericMetadata, returnTypeGenericMetadata));
ReturnStatement expression MemberReference member mockSettings_ter ^ ^ ^ ^ ^ 
return mockSettings;
ReturnStatement expression MethodInvocation qualifier mockSettings_ter ^ ^ arguments MethodInvocation arguments MemberReference member returnTypeGenericMetadata_ter ^ ^ ^ ^ member returnsDeepStubsAnswerUsing_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ ^ member defaultAnswer_ter ^ ^ ^ ^ ^ 
return mockSettings.defaultAnswer(returnsDeepStubsAnswerUsing(returnTypeGenericMetadata), 0);
ReturnStatement expression MethodInvocation qualifier mockSettings_ter ^ ^ arguments MethodInvocation arguments MemberReference member returnTypeGenericMetadata_ter ^ ^ ^ ^ member returnsDeepStubsAnswerUsing_ter ^ ^ ^ Literal value false_ter ^ ^ ^ ^ member defaultAnswer_ter ^ ^ ^ ^ ^ 
return mockSettings.defaultAnswer(returnsDeepStubsAnswerUsing(returnTypeGenericMetadata), false);
ReturnStatement expression MethodInvocation qualifier mockSettings_ter ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member defaultAnswer_ter ^ ^ ^ ^ ^ 
return mockSettings.defaultAnswer();
ReturnStatement expression MethodInvocation arguments MethodInvocation arguments MemberReference member returnTypeGenericMetadata_ter ^ ^ ^ ^ member returnsDeepStubsAnswerUsing_ter ^ ^ ^ ^ member defaultAnswer_ter ^ ^ ^ ^ ^ 
return defaultAnswer(returnsDeepStubsAnswerUsing(returnTypeGenericMetadata));
ReturnStatement expression MethodInvocation qualifier returnTypeGenericMetadata_ter ^ ^ arguments MethodInvocation arguments MemberReference member returnTypeGenericMetadata_ter ^ ^ ^ ^ member returnsDeepStubsAnswerUsing_ter ^ ^ ^ ^ member defaultAnswer_ter ^ ^ ^ ^ ^ 
return returnTypeGenericMetadata.defaultAnswer(returnsDeepStubsAnswerUsing(returnTypeGenericMetadata));
ReturnStatement expression MethodInvocation qualifier mockSettings_ter ^ ^ arguments MethodInvocation arguments MemberReference member returnTypeGenericMetadata_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ member defaultAnswer_ter ^ ^ ^ ^ ^ 
return mockSettings.defaultAnswer(get(returnTypeGenericMetadata));
ReturnStatement expression MethodInvocation qualifier mockSettings_ter ^ ^ arguments MethodInvocation arguments MethodInvocation member withSettings_ter ^ ^ ^ ^ member returnsDeepStubsAnswerUsing_ter ^ ^ ^ ^ member defaultAnswer_ter ^ ^ ^ ^ ^ 
return mockSettings.defaultAnswer(returnsDeepStubsAnswerUsing(withSettings()));
ReturnStatement expression MethodInvocation qualifier mockSettings_ter ^ ^ arguments MethodInvocation arguments MemberReference member returnTypeGenericMetadata_ter ^ ^ ^ MemberReference member mockSettings_ter ^ ^ ^ ^ member returnsDeepStubsAnswerUsing_ter ^ ^ ^ ^ member defaultAnswer_ter ^ ^ ^ ^ ^ 
return mockSettings.defaultAnswer(returnsDeepStubsAnswerUsing(returnTypeGenericMetadata, mockSettings));
ReturnStatement expression MethodInvocation qualifier mockSettings_ter ^ ^ arguments MethodInvocation arguments MemberReference member returnTypeGenericMetadata_ter ^ ^ ^ ^ member returnsDeepStubsAnswerUsing_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member defaultAnswer_ter ^ ^ ^ ^ ^ 
return mockSettings.defaultAnswer(returnsDeepStubsAnswerUsing(returnTypeGenericMetadata), true);
ReturnStatement expression MethodInvocation qualifier mockSettings_ter ^ ^ arguments MethodInvocation arguments MemberReference member returnTypeGenericMetadata_ter ^ ^ ^ ^ member returnsDeepStubsAnswerUsing_ter ^ ^ ^ ^ member withSettingsUsing_ter ^ ^ ^ ^ ^ 
return mockSettings.withSettingsUsing(returnsDeepStubsAnswerUsing(returnTypeGenericMetadata));
ReturnStatement expression MethodInvocation qualifier mockSettings_ter ^ ^ arguments MethodInvocation arguments MemberReference member returnTypeGenericMetadata_ter ^ ^ ^ ^ member debug_ter ^ ^ ^ ^ member defaultAnswer_ter ^ ^ ^ ^ ^ 
return mockSettings.defaultAnswer(debug(returnTypeGenericMetadata));
StatementExpression expression MethodInvocation qualifier container_ter ^ ^ arguments ClassCreator type ReferenceType name Answer_ter ^ ^ arguments TypeArgument type ReferenceType name Object_ter ^ ^ ^ ^ ^ ^ ^ ^ body MethodDeclaration modifiers public_ter ^ ^ return_type ReferenceType name Object_ter ^ ^ ^ ^ name answer_ter ^ ^ parameters FormalParameter type ReferenceType name InvocationOnMock_ter ^ ^ ^ ^ name invocation_ter ^ ^ ^ ^ throws Throwable_ter ^ ^ body ReturnStatement expression MemberReference member mock_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member addAnswer_ter ^ ^ ^ ^ ^ 
arg 
arg Object
arg 
arg Object
container.addAnswer(new Answer<Object>(), true);

StatementExpression expression MethodInvocation qualifier container_ter ^ ^ arguments ClassCreator type ReferenceType name Answer_ter ^ ^ arguments TypeArgument type ReferenceType name Object_ter ^ ^ ^ ^ ^ ^ ^ ^ body MethodDeclaration modifiers public_ter ^ ^ return_type ReferenceType name Object_ter ^ ^ ^ ^ name answer_ter ^ ^ parameters FormalParameter type ReferenceType name InvocationOnMock_ter ^ ^ ^ ^ name invocation_ter ^ ^ ^ ^ throws Throwable_ter ^ ^ body ReturnStatement expression MemberReference member mock_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ member addAnswer_ter ^ ^ ^ ^ ^ 
arg 
arg Object
arg 
arg Object
container.addAnswer(new Answer<Object>());

StatementExpression expression MethodInvocation qualifier container_ter ^ ^ arguments MemberReference member mock_ter ^ ^ ^ ^ member addAnswer_ter ^ ^ ^ ^ ^ 
container.addAnswer(mock);

StatementExpression expression MethodInvocation qualifier container_ter ^ ^ arguments MemberReference member mock_ter ^ ^ ^ ClassCreator type ReferenceType name Answer_ter ^ ^ arguments TypeArgument type ReferenceType name Object_ter ^ ^ ^ ^ ^ ^ ^ ^ body MethodDeclaration modifiers public_ter ^ ^ return_type ReferenceType name Object_ter ^ ^ ^ ^ name answer_ter ^ ^ parameters FormalParameter type ReferenceType name InvocationOnMock_ter ^ ^ ^ ^ name invocation_ter ^ ^ ^ ^ throws Throwable_ter ^ ^ body ReturnStatement expression MemberReference member mock_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ member addAnswer_ter ^ ^ ^ ^ ^ 
arg 
arg Object
arg 
arg Object
container.addAnswer(mock, new Answer<Object>());

StatementExpression expression MethodInvocation qualifier container_ter ^ ^ arguments Literal value true_ter ^ ^ ^ ClassCreator type ReferenceType name Answer_ter ^ ^ arguments TypeArgument type ReferenceType name Object_ter ^ ^ ^ ^ ^ ^ ^ ^ body MethodDeclaration modifiers public_ter ^ ^ return_type ReferenceType name Object_ter ^ ^ ^ ^ name answer_ter ^ ^ parameters FormalParameter type ReferenceType name InvocationOnMock_ter ^ ^ ^ ^ name invocation_ter ^ ^ ^ ^ throws Throwable_ter ^ ^ body ReturnStatement expression MemberReference member mock_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ member addAnswer_ter ^ ^ ^ ^ ^ 
arg 
arg Object
arg 
arg Object
container.addAnswer(true, new Answer<Object>());

StatementExpression expression MethodInvocation qualifier container_ter ^ ^ arguments ClassCreator type ReferenceType name Answer_ter ^ ^ arguments TypeArgument type ReferenceType name Object_ter ^ ^ ^ ^ ^ ^ ^ ^ body MethodDeclaration modifiers public_ter ^ ^ return_type ReferenceType name Object_ter ^ ^ ^ ^ name answer_ter ^ ^ parameters FormalParameter type ReferenceType name InvocationOnMock_ter ^ ^ ^ ^ name invocation_ter ^ ^ ^ ^ body ReturnStatement expression MemberReference member mock_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ member addAnswer_ter ^ ^ ^ ^ ^ 
arg 
arg Object
arg 
arg Object
container.addAnswer(new Answer<Object>());

StatementExpression expression MethodInvocation qualifier container_ter ^ ^ arguments Literal value false_ter ^ ^ ^ ClassCreator type ReferenceType name Answer_ter ^ ^ arguments TypeArgument type ReferenceType name Object_ter ^ ^ ^ ^ ^ ^ ^ ^ body MethodDeclaration modifiers public_ter ^ ^ return_type ReferenceType name Object_ter ^ ^ ^ ^ name answer_ter ^ ^ parameters FormalParameter type ReferenceType name InvocationOnMock_ter ^ ^ ^ ^ name invocation_ter ^ ^ ^ ^ throws Throwable_ter ^ ^ body ReturnStatement expression MemberReference member mock_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ member addAnswer_ter ^ ^ ^ ^ ^ 
arg 
arg Object
arg 
arg Object
container.addAnswer(false, new Answer<Object>());

StatementExpression expression MethodInvocation qualifier container_ter ^ ^ arguments Literal value null_ter ^ ^ ^ ClassCreator type ReferenceType name Answer_ter ^ ^ arguments TypeArgument type ReferenceType name Object_ter ^ ^ ^ ^ ^ ^ ^ ^ body MethodDeclaration modifiers public_ter ^ ^ return_type ReferenceType name Object_ter ^ ^ ^ ^ name answer_ter ^ ^ parameters FormalParameter type ReferenceType name InvocationOnMock_ter ^ ^ ^ ^ name invocation_ter ^ ^ ^ ^ throws Throwable_ter ^ ^ body ReturnStatement expression MemberReference member mock_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ member addAnswer_ter ^ ^ ^ ^ ^ 
arg 
arg Object
arg 
arg Object
container.addAnswer(null, new Answer<Object>());

StatementExpression expression MethodInvocation qualifier container_ter ^ ^ arguments ClassCreator type ReferenceType name Answer_ter ^ ^ arguments TypeArgument type ReferenceType name Object_ter ^ ^ ^ ^ ^ ^ ^ ^ body MethodDeclaration modifiers public_ter ^ ^ return_type ReferenceType name Object_ter ^ ^ ^ ^ name answer_ter ^ ^ parameters FormalParameter type ReferenceType name InvocationOnMock_ter ^ ^ ^ ^ name invocation_ter ^ ^ ^ ^ throws Throwable_ter ^ ^ body ReturnStatement expression MemberReference member mock_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ Literal value false_ter ^ ^ ^ ^ member addAnswer_ter ^ ^ ^ ^ ^ 
arg 
arg Object
arg 
arg Object
container.addAnswer(new Answer<Object>(), false);

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member container_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((container != null)){

StatementExpression expression MethodInvocation qualifier container_ter ^ ^ arguments ClassCreator type ReferenceType name Answer_ter ^ ^ arguments TypeArgument type ReferenceType name Object_ter ^ ^ ^ ^ ^ ^ ^ ^ body MethodDeclaration modifiers public_ter ^ ^ return_type ReferenceType name Object_ter ^ ^ ^ ^ name answer_ter ^ ^ parameters FormalParameter type ReferenceType name InvocationOnMock_ter ^ ^ ^ ^ name invocation_ter ^ ^ ^ ^ throws Throwable_ter ^ ^ body ReturnStatement expression MemberReference member mock_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ClassCreator type ReferenceType name Answer_ter ^ ^ arguments TypeArgument type ReferenceType name Object_ter ^ ^ ^ ^ ^ ^ ^ ^ body MethodDeclaration modifiers public_ter ^ ^ return_type ReferenceType name Object_ter ^ ^ ^ ^ name answer_ter ^ ^ parameters FormalParameter type ReferenceType name InvocationOnMock_ter ^ ^ ^ ^ name invocation_ter ^ ^ ^ ^ throws Throwable_ter ^ ^ body ReturnStatement expression MemberReference member mock_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ member addAnswer_ter ^ ^ ^ ^ ^ 
arg 
arg Object
arg 
arg Object
arg 
arg Object
arg 
arg Object
container.addAnswer(new Answer<Object>(), new Answer<Object>());

StatementExpression expression MethodInvocation qualifier container_ter ^ ^ arguments ClassCreator type ReferenceType name Answer_ter ^ ^ arguments TypeArgument type ReferenceType name Object_ter ^ ^ ^ ^ ^ ^ ^ ^ body MethodDeclaration modifiers public_ter ^ ^ return_type ReferenceType name Object_ter ^ ^ ^ ^ name answer_ter ^ ^ body ReturnStatement expression MemberReference member mock_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ member addAnswer_ter ^ ^ ^ ^ ^ 
arg 
arg Object
arg 
arg Object
container.addAnswer(new Answer<Object>());

StatementExpression expression MethodInvocation qualifier container_ter ^ ^ arguments ClassCreator type ReferenceType name Answer_ter ^ ^ arguments TypeArgument type ReferenceType name Object_ter ^ ^ ^ ^ ^ ^ ^ ^ body MethodDeclaration modifiers public_ter ^ ^ return_type ReferenceType name Object_ter ^ ^ ^ ^ name answer_ter ^ ^ parameters FormalParameter type ReferenceType name InvocationOnMock_ter ^ ^ ^ ^ name invocation_ter ^ ^ ^ ^ throws Throwable_ter ^ ^ body ReturnStatement expression MemberReference member mock_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ Literal value <string>_ter ^ ^ ^ ^ member addAnswer_ter ^ ^ ^ ^ ^ 
arg 
arg Object
arg 
arg Object
container.addAnswer(new Answer<Object>(), "null");

StatementExpression expression MethodInvocation qualifier container_ter ^ ^ arguments Literal value true_ter ^ ^ ^ ^ member addAnswer_ter ^ ^ ^ ^ ^ 
container.addAnswer(true);

StatementExpression expression MethodInvocation qualifier container_ter ^ ^ arguments MemberReference member container_ter ^ ^ ^ ^ member addAnswer_ter ^ ^ ^ ^ ^ 
container.addAnswer(container);

StatementExpression expression MethodInvocation qualifier container_ter ^ ^ arguments MethodInvocation qualifier container_ter ^ ^ arguments ClassCreator type ReferenceType name Answer_ter ^ ^ arguments TypeArgument type ReferenceType name Object_ter ^ ^ ^ ^ ^ ^ ^ ^ body MethodDeclaration modifiers public_ter ^ ^ return_type ReferenceType name Object_ter ^ ^ ^ ^ name answer_ter ^ ^ parameters FormalParameter type ReferenceType name InvocationOnMock_ter ^ ^ ^ ^ name invocation_ter ^ ^ ^ ^ throws Throwable_ter ^ ^ body ReturnStatement expression MemberReference member mock_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ Literal value false_ter ^ ^ ^ ^ member addAnswer_ter ^ ^ ^ ^ member addAnswer_ter ^ ^ ^ ^ ^ 
arg 
arg Object
arg 
arg Object
container.addAnswer(container.addAnswer(new Answer<Object>(), false));

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member mock_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((mock != null)){

StatementExpression expression MethodInvocation qualifier container_ter ^ ^ arguments MemberReference member container_ter ^ ^ ^ ClassCreator type ReferenceType name Answer_ter ^ ^ arguments TypeArgument type ReferenceType name Object_ter ^ ^ ^ ^ ^ ^ ^ ^ body MethodDeclaration modifiers public_ter ^ ^ return_type ReferenceType name Object_ter ^ ^ ^ ^ name answer_ter ^ ^ parameters FormalParameter type ReferenceType name InvocationOnMock_ter ^ ^ ^ ^ name invocation_ter ^ ^ ^ ^ throws Throwable_ter ^ ^ body ReturnStatement expression MemberReference member mock_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ member addAnswer_ter ^ ^ ^ ^ ^ 
arg 
arg Object
arg 
arg Object
container.addAnswer(container, new Answer<Object>());

StatementExpression expression MethodInvocation qualifier container_ter ^ ^ arguments ClassCreator type ReferenceType name Answer_ter ^ ^ arguments TypeArgument type ReferenceType name Object_ter ^ ^ ^ ^ ^ ^ ^ ^ body MethodDeclaration modifiers public_ter ^ ^ return_type ReferenceType name Object_ter ^ ^ ^ ^ name answer_ter ^ ^ parameters FormalParameter type ReferenceType name InvocationOnMock_ter ^ ^ ^ ^ name invocation_ter ^ ^ ^ ^ throws Throwable_ter ^ ^ body ReturnStatement expression MemberReference member container_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ Literal value false_ter ^ ^ ^ ^ member addAnswer_ter ^ ^ ^ ^ ^ 
arg 
arg Object
arg 
arg Object
container.addAnswer(new Answer<Object>(), false);

StatementExpression expression MethodInvocation qualifier container_ter ^ ^ arguments ClassCreator type ReferenceType name Answer_ter ^ ^ arguments TypeArgument type ReferenceType name Object_ter ^ ^ ^ ^ ^ ^ ^ ^ body MethodDeclaration modifiers public_ter ^ ^ return_type ReferenceType name Object_ter ^ ^ ^ ^ name answer_ter ^ ^ parameters FormalParameter type ReferenceType name InvocationOnMock_ter ^ ^ ^ ^ name invocation_ter ^ ^ ^ ^ throws Throwable_ter ^ ^ body ReturnStatement expression MemberReference member mock_ter ^ ^ ^ ^ ^ ^ ^ MethodDeclaration modifiers public_ter ^ ^ return_type ReferenceType name Object_ter ^ ^ ^ ^ name answer_ter ^ ^ parameters FormalParameter type ReferenceType name InvocationOnMock_ter ^ ^ ^ ^ name invocation_ter ^ ^ ^ ^ throws Throwable_ter ^ ^ body ReturnStatement expression MemberReference member mock_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ member addAnswer_ter ^ ^ ^ ^ ^ 
arg 
arg Object
arg 
arg Object
container.addAnswer(new Answer<Object>());

StatementExpression expression MethodInvocation qualifier container_ter ^ ^ arguments Literal value <string>_ter ^ ^ ^ ^ member addAnswer_ter ^ ^ ^ ^ ^ 
container.addAnswer("null");

StatementExpression expression MethodInvocation qualifier container_ter ^ ^ arguments MemberReference member container_ter ^ ^ ^ ^ member addAnswer_ter ^ ^ ^ ^ ^ 
container.addAnswer(container);

StatementExpression expression MethodInvocation qualifier container_ter ^ ^ arguments Literal value <string>_ter ^ ^ ^ ClassCreator type ReferenceType name Answer_ter ^ ^ arguments TypeArgument type ReferenceType name Object_ter ^ ^ ^ ^ ^ ^ ^ ^ body MethodDeclaration modifiers public_ter ^ ^ return_type ReferenceType name Object_ter ^ ^ ^ ^ name answer_ter ^ ^ parameters FormalParameter type ReferenceType name InvocationOnMock_ter ^ ^ ^ ^ name invocation_ter ^ ^ ^ ^ throws Throwable_ter ^ ^ body ReturnStatement expression MemberReference member mock_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ member addAnswer_ter ^ ^ ^ ^ ^ 
arg 
arg Object
arg 
arg Object
container.addAnswer("null", new Answer<Object>());

StatementExpression expression MethodInvocation qualifier container_ter ^ ^ arguments Literal value true_ter ^ ^ ^ ^ member addAnswer_ter ^ ^ ^ ^ ^ 
container.addAnswer(true);

StatementExpression expression MethodInvocation qualifier container_ter ^ ^ arguments MemberReference member mock_ter ^ ^ ^ MemberReference member container_ter ^ ^ ^ ^ member addAnswer_ter ^ ^ ^ ^ ^ 
container.addAnswer(mock, container);

StatementExpression expression MethodInvocation qualifier container_ter ^ ^ arguments ClassCreator type ReferenceType name Answer_ter ^ ^ arguments TypeArgument type ReferenceType name Object_ter ^ ^ ^ ^ ^ ^ ^ ^ body MethodDeclaration modifiers public_ter ^ ^ return_type ReferenceType name Object_ter ^ ^ ^ ^ name answer_ter ^ ^ throws Throwable_ter ^ ^ body ReturnStatement expression MemberReference member mock_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ member addAnswer_ter ^ ^ ^ ^ ^ 
arg 
arg Object
arg 
arg Object
container.addAnswer(new Answer<Object>());

StatementExpression expression MethodInvocation qualifier container_ter ^ ^ arguments Literal value false_ter ^ ^ ^ ^ member addAnswer_ter ^ ^ ^ ^ ^ 
container.addAnswer(false);

StatementExpression expression MethodInvocation qualifier container_ter ^ ^ arguments MemberReference member mock_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member addAnswer_ter ^ ^ ^ ^ ^ 
container.addAnswer(mock, true);

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member container_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((container == null)){

StatementExpression expression MethodInvocation qualifier container_ter ^ ^ arguments MemberReference member mock_ter ^ ^ ^ Literal value false_ter ^ ^ ^ ^ member addAnswer_ter ^ ^ ^ ^ ^ 
container.addAnswer(mock, false);

StatementExpression expression MethodInvocation qualifier container_ter ^ ^ arguments Literal value true_ter ^ ^ ^ Literal value false_ter ^ ^ ^ ^ member addAnswer_ter ^ ^ ^ ^ ^ 
container.addAnswer(true, false);

StatementExpression expression MethodInvocation qualifier container_ter ^ ^ arguments Literal value true_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member addAnswer_ter ^ ^ ^ ^ ^ 
container.addAnswer(true, true);

StatementExpression expression MethodInvocation qualifier container_ter ^ ^ arguments ClassCreator type ReferenceType name Answer_ter ^ ^ arguments TypeArgument type ReferenceType name Object_ter ^ ^ ^ ^ ^ ^ ^ ^ body MethodDeclaration modifiers public_ter ^ ^ return_type ReferenceType name Object_ter ^ ^ ^ ^ name answer_ter ^ ^ parameters FormalParameter type ReferenceType name InvocationOnMock_ter ^ ^ ^ ^ name invocation_ter ^ ^ ^ ^ throws Throwable_ter ^ ^ body ReturnStatement expression MemberReference member mock_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ MemberReference member container_ter ^ ^ ^ ^ member addAnswer_ter ^ ^ ^ ^ ^ 
arg 
arg Object
arg 
arg Object
container.addAnswer(new Answer<Object>(), container);

StatementExpression expression MethodInvocation qualifier container_ter ^ ^ arguments ClassCreator type ReferenceType name Answer_ter ^ ^ arguments TypeArgument type ReferenceType name Object_ter ^ ^ ^ ^ ^ ^ ^ ^ body ReturnStatement expression MemberReference member mock_ter ^ ^ ^ ^ ^ ^ ^ ^ member addAnswer_ter ^ ^ ^ ^ ^ 
arg 
arg Object
arg 
arg Object
container.addAnswer(new Answer<Object>());

StatementExpression expression MethodInvocation qualifier container_ter ^ ^ arguments Literal value false_ter ^ ^ ^ Literal value false_ter ^ ^ ^ ^ member addAnswer_ter ^ ^ ^ ^ ^ 
container.addAnswer(false, false);

StatementExpression expression MethodInvocation qualifier container_ter ^ ^ arguments Literal value false_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member addAnswer_ter ^ ^ ^ ^ ^ 
container.addAnswer(false, true);

StatementExpression expression MethodInvocation qualifier container_ter ^ ^ arguments Literal value false_ter ^ ^ ^ ^ member addAnswer_ter ^ ^ ^ ^ ^ 
container.addAnswer(false);

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member container_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if((container == null)){
return null;}
StatementExpression expression MethodInvocation qualifier container_ter ^ ^ arguments Literal value true_ter ^ ^ ^ MemberReference member container_ter ^ ^ ^ ^ member addAnswer_ter ^ ^ ^ ^ ^ 
container.addAnswer(true, container);

StatementExpression expression MethodInvocation qualifier container_ter ^ ^ arguments ClassCreator type ReferenceType name Answer_ter ^ ^ arguments TypeArgument type ReferenceType name Object_ter ^ ^ ^ ^ ^ ^ ^ ^ body MethodDeclaration modifiers public_ter ^ ^ return_type ReferenceType name Object_ter ^ ^ ^ ^ name answer_ter ^ ^ parameters FormalParameter type ReferenceType name InvocationOnMock_ter ^ ^ ^ ^ name invocation_ter ^ ^ ^ ^ body StatementExpression expression MethodInvocation qualifier container_ter ^ ^ arguments ClassCreator type ReferenceType name Answer_ter ^ ^ arguments TypeArgument type ReferenceType name Object_ter ^ ^ ^ ^ ^ ^ ^ ^ body MethodDeclaration modifiers public_ter ^ ^ return_type ReferenceType name Object_ter ^ ^ ^ ^ name answer_ter ^ ^ parameters FormalParameter type ReferenceType name InvocationOnMock_ter ^ ^ ^ ^ name invocation_ter ^ ^ ^ ^ throws Throwable_ter ^ ^ body ReturnStatement expression MemberReference member mock_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ Literal value false_ter ^ ^ ^ ^ member addAnswer_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ member addAnswer_ter ^ ^ ^ ^ ^ 
arg 
arg Object
arg 
arg Object
container.addAnswer(new Answer<Object>());

stderr: 