stdout: condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member len_ter ^ ^ ^ ^ operandr MemberReference qualifier b_ter ^ ^ member length_ter ^ ^ ^ ^ ^ ^ 
if((len == b.length)){
condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member len_ter ^ ^ ^ ^ operandr MemberReference qualifier b_ter ^ ^ member length_ter ^ ^ ^ ^ ^ ^ 
if((len != b.length)){
condition BinaryOperation operator >_ter ^ ^ operandl MemberReference member len_ter ^ ^ ^ ^ operandr MemberReference qualifier b_ter ^ ^ member length_ter ^ ^ ^ ^ ^ ^ 
if((len > b.length)){
condition BinaryOperation operator >=_ter ^ ^ operandl MemberReference member len_ter ^ ^ ^ ^ operandr MemberReference qualifier b_ter ^ ^ member length_ter ^ ^ ^ ^ ^ ^ 
if((len >= b.length)){
condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member len_ter ^ ^ ^ ^ operandr MemberReference qualifier b_ter ^ ^ member length_ter ^ ^ ^ ^ ^ ^ 
if((len && b.length)){
condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member len_ter ^ ^ ^ ^ operandr MemberReference qualifier b_ter ^ ^ member length_ter ^ ^ ^ ^ ^ ^ 
if((len < b.length)){
condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member len_ter ^ ^ ^ ^ operandr MemberReference member len_ter ^ ^ ^ ^ ^ ^ 
if((len != len)){
condition BinaryOperation operator <=_ter ^ ^ operandl MemberReference member len_ter ^ ^ ^ ^ operandr MemberReference qualifier b_ter ^ ^ member length_ter ^ ^ ^ ^ ^ ^ 
if((len <= b.length)){
condition BinaryOperation operator ||_ter ^ ^ operandl MemberReference member len_ter ^ ^ ^ ^ operandr MemberReference qualifier b_ter ^ ^ member length_ter ^ ^ ^ ^ ^ ^ 
if((len || b.length)){
condition BinaryOperation operator instanceof_ter ^ ^ operandl MemberReference member len_ter ^ ^ ^ ^ operandr MemberReference qualifier b_ter ^ ^ member length_ter ^ ^ ^ ^ ^ ^ 
if((len instanceof b.length)){
IfStatement condition MemberReference member len_ter ^ ^ ^ ^ ^ 
if(len){

condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member len_ter ^ ^ ^ ^ operandr MemberReference member e_ter ^ ^ ^ ^ ^ ^ 
if((len != e)){
condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member len_ter ^ ^ ^ ^ operandr MemberReference member debug_ter ^ ^ ^ ^ ^ ^ 
if((len != debug)){
IfStatement condition MemberReference prefix_operators !_ter ^ ^ member len_ter ^ ^ ^ ^ ^ 
if(!len){

condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member e_ter ^ ^ ^ ^ operandr MemberReference qualifier b_ter ^ ^ member length_ter ^ ^ ^ ^ ^ ^ 
if((e != b.length)){
condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member len_ter ^ ^ ^ ^ operandr MemberReference member i_ter ^ ^ ^ ^ ^ ^ 
if((len != i)){
IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member len_ter ^ ^ ^ ^ operandr MemberReference qualifier b_ter ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ 
if((len != b.length)){

condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member len_ter ^ ^ ^ ^ operandr MemberReference member prodHigh_ter ^ ^ ^ ^ ^ ^ 
if((len != prodHigh)){
condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member len_ter ^ ^ ^ ^ operandr MemberReference member length_ter ^ ^ ^ ^ ^ ^ 
if((len != length)){
condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member len_ter ^ ^ ^ ^ operandr MemberReference qualifier a_ter ^ ^ member length_ter ^ ^ ^ ^ ^ ^ 
if((len != a.length)){
condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member debug_ter ^ ^ ^ ^ operandr MemberReference qualifier b_ter ^ ^ member length_ter ^ ^ ^ ^ ^ ^ 
if((debug != b.length)){
condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member prodHigh_ter ^ ^ ^ ^ operandr MemberReference qualifier b_ter ^ ^ member length_ter ^ ^ ^ ^ ^ ^ 
if((prodHigh != b.length)){
IfStatement condition MemberReference member prodHigh_ter ^ ^ ^ ^ ^ 
if(prodHigh){

IfStatement condition MemberReference member loc8 ^ ^ ^ ^ ^ 
if(){


IfStatement condition MemberReference member debug_ter ^ ^ ^ ^ ^ 
if(debug){

IfStatement condition MemberReference member length_ter ^ ^ ^ ^ ^ 
if(length){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member len_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member len_ter ^ ^ ^ ^ operandr MemberReference qualifier b_ter ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((len != null) && (len != b.length))){

condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc8 ^ ^ ^ ^ operandr MemberReference qualifier b_ter ^ ^ member length_ter ^ ^ ^ ^ ^ ^ 
if(( != b.length)){

condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member i_ter ^ ^ ^ ^ operandr MemberReference qualifier b_ter ^ ^ member length_ter ^ ^ ^ ^ ^ ^ 
if((i != b.length)){


IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member len_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member len_ter ^ ^ ^ ^ operandr MemberReference qualifier b_ter ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((len == null) && (len != b.length))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member len_ter ^ ^ ^ ^ operandr MemberReference qualifier b_ter ^ ^ member length_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member len_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((len != b.length) && (len == 0))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member len_ter ^ ^ ^ ^ operandr MemberReference qualifier b_ter ^ ^ member length_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member len_ter ^ ^ ^ ^ operandr MemberReference member len_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((len != b.length) && (len == len))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member len_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member len_ter ^ ^ ^ ^ operandr MemberReference qualifier b_ter ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((len == 0) && (len != b.length))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member len_ter ^ ^ ^ ^ operandr MemberReference qualifier b_ter ^ ^ member length_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member len_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((len != b.length) && (len != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member len_ter ^ ^ ^ ^ operandr MemberReference qualifier b_ter ^ ^ member length_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member len_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((len != b.length) && (len != 0))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member len_ter ^ ^ ^ ^ operandr MemberReference qualifier b_ter ^ ^ member length_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member len_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((len != b.length) && (len == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member len_ter ^ ^ ^ ^ operandr MemberReference qualifier b_ter ^ ^ member length_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member len_ter ^ ^ ^ ^ operandr MemberReference member len_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((len != b.length) && (len != len))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member len_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member len_ter ^ ^ ^ ^ operandr MemberReference qualifier b_ter ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member len_ter ^ ^ ^ ^ operandr MemberReference qualifier b_ter ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((len != null) && (len != b.length)) && (len != b.length))){

stderr: 