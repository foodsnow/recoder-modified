stdout: IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ qualifier options_ter ^ ^ member skipAllPasses_ter ^ ^ ^ ^ ^ ^ ^ 
if((options.dependencyOptions.needsManagement() && !options.skipAllPasses)){

IfStatement condition MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ ^ 
if(options.dependencyOptions.needsManagement()){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ qualifier options_ter ^ ^ member skipAllPasses_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member manageClosureDependencies_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && !options.skipAllPasses) && options.manageClosureDependencies)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ qualifier options_ter ^ ^ member skipAllPasses_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member acceptConstKeyword_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && !options.skipAllPasses) && options.acceptConstKeyword)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ qualifier options_ter ^ ^ member skipAllPasses_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member assumeStrictThis_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && !options.skipAllPasses) && options.assumeStrictThis)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ qualifier options_ter ^ ^ member skipAllPasses_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member ideMode_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && !options.skipAllPasses) && options.ideMode)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ qualifier options_ter ^ ^ member skipAllPasses_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member inferTypes_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && !options.skipAllPasses) && options.inferTypes)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ qualifier options_ter ^ ^ member skipAllPasses_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member skipAllPasses_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && !options.skipAllPasses) && options.skipAllPasses)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ qualifier options_ter ^ ^ member skipAllPasses_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member nameAnonymousFunctionsOnly_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && !options.skipAllPasses) && options.nameAnonymousFunctionsOnly)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ qualifier options_ter ^ ^ member skipAllPasses_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member checkSymbols_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && !options.skipAllPasses) && options.checkSymbols)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ qualifier options_ter ^ ^ member skipAllPasses_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member checkSuspiciousCode_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && !options.skipAllPasses) && options.checkSuspiciousCode)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ qualifier options_ter ^ ^ member skipAllPasses_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member checkControlStructures_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && !options.skipAllPasses) && options.checkControlStructures)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ qualifier options_ter ^ ^ member skipAllPasses_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member checkTypes_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && !options.skipAllPasses) && options.checkTypes)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ qualifier options_ter ^ ^ member skipAllPasses_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member tightenTypes_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && !options.skipAllPasses) && options.tightenTypes)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ qualifier options_ter ^ ^ member skipAllPasses_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member checkCaja_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && !options.skipAllPasses) && options.checkCaja)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ qualifier options_ter ^ ^ member skipAllPasses_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member foldConstants_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && !options.skipAllPasses) && options.foldConstants)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ qualifier options_ter ^ ^ member skipAllPasses_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member deadAssignmentElimination_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && !options.skipAllPasses) && options.deadAssignmentElimination)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ qualifier options_ter ^ ^ member skipAllPasses_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member inlineConstantVars_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && !options.skipAllPasses) && options.inlineConstantVars)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ qualifier options_ter ^ ^ member skipAllPasses_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member inlineFunctions_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && !options.skipAllPasses) && options.inlineFunctions)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ qualifier options_ter ^ ^ member skipAllPasses_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member inlineLocalFunctions_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && !options.skipAllPasses) && options.inlineLocalFunctions)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ qualifier options_ter ^ ^ member skipAllPasses_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member assumeClosuresOnlyCaptureReferences_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && !options.skipAllPasses) && options.assumeClosuresOnlyCaptureReferences)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ qualifier options_ter ^ ^ member skipAllPasses_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member crossModuleCodeMotion_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && !options.skipAllPasses) && options.crossModuleCodeMotion)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ qualifier options_ter ^ ^ member skipAllPasses_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member coalesceVariableNames_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && !options.skipAllPasses) && options.coalesceVariableNames)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ qualifier options_ter ^ ^ member skipAllPasses_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member crossModuleMethodMotion_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && !options.skipAllPasses) && options.crossModuleMethodMotion)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ qualifier options_ter ^ ^ member skipAllPasses_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member inlineGetters_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && !options.skipAllPasses) && options.inlineGetters)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ qualifier options_ter ^ ^ member skipAllPasses_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member inlineVariables_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && !options.skipAllPasses) && options.inlineVariables)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ qualifier options_ter ^ ^ member skipAllPasses_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member inlineLocalVariables_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && !options.skipAllPasses) && options.inlineLocalVariables)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ qualifier options_ter ^ ^ member skipAllPasses_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member flowSensitiveInlineVariables_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && !options.skipAllPasses) && options.flowSensitiveInlineVariables)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ qualifier options_ter ^ ^ member skipAllPasses_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member smartNameRemoval_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && !options.skipAllPasses) && options.smartNameRemoval)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ qualifier options_ter ^ ^ member skipAllPasses_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member removeDeadCode_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && !options.skipAllPasses) && options.removeDeadCode)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ qualifier options_ter ^ ^ member skipAllPasses_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member extractPrototypeMemberDeclarations_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && !options.skipAllPasses) && options.extractPrototypeMemberDeclarations)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ qualifier options_ter ^ ^ member skipAllPasses_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member removeUnusedPrototypeProperties_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && !options.skipAllPasses) && options.removeUnusedPrototypeProperties)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ qualifier options_ter ^ ^ member skipAllPasses_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member removeUnusedPrototypePropertiesInExterns_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && !options.skipAllPasses) && options.removeUnusedPrototypePropertiesInExterns)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ qualifier options_ter ^ ^ member skipAllPasses_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member removeUnusedVars_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && !options.skipAllPasses) && options.removeUnusedVars)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ qualifier options_ter ^ ^ member skipAllPasses_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member removeUnusedLocalVars_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && !options.skipAllPasses) && options.removeUnusedLocalVars)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ qualifier options_ter ^ ^ member skipAllPasses_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member aliasExternals_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && !options.skipAllPasses) && options.aliasExternals)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ qualifier options_ter ^ ^ member skipAllPasses_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member collapseVariableDeclarations_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && !options.skipAllPasses) && options.collapseVariableDeclarations)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ qualifier options_ter ^ ^ member skipAllPasses_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member groupVariableDeclarations_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && !options.skipAllPasses) && options.groupVariableDeclarations)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ qualifier options_ter ^ ^ member skipAllPasses_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member collapseAnonymousFunctions_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && !options.skipAllPasses) && options.collapseAnonymousFunctions)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ qualifier options_ter ^ ^ member skipAllPasses_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member aliasAllStrings_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && !options.skipAllPasses) && options.aliasAllStrings)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ qualifier options_ter ^ ^ member skipAllPasses_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member outputJsStringUsage_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && !options.skipAllPasses) && options.outputJsStringUsage)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ qualifier options_ter ^ ^ member skipAllPasses_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member convertToDottedProperties_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && !options.skipAllPasses) && options.convertToDottedProperties)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ qualifier options_ter ^ ^ member skipAllPasses_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member rewriteFunctionExpressions_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && !options.skipAllPasses) && options.rewriteFunctionExpressions)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ qualifier options_ter ^ ^ member skipAllPasses_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member optimizeParameters_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && !options.skipAllPasses) && options.optimizeParameters)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ qualifier options_ter ^ ^ member skipAllPasses_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member optimizeReturns_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && !options.skipAllPasses) && options.optimizeReturns)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ qualifier options_ter ^ ^ member skipAllPasses_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member optimizeCalls_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && !options.skipAllPasses) && options.optimizeCalls)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ qualifier options_ter ^ ^ member skipAllPasses_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member optimizeArgumentsArray_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && !options.skipAllPasses) && options.optimizeArgumentsArray)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ qualifier options_ter ^ ^ member skipAllPasses_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member chainCalls_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && !options.skipAllPasses) && options.chainCalls)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ qualifier options_ter ^ ^ member skipAllPasses_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member propertyAffinity_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && !options.skipAllPasses) && options.propertyAffinity)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ qualifier options_ter ^ ^ member skipAllPasses_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member labelRenaming_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && !options.skipAllPasses) && options.labelRenaming)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ qualifier options_ter ^ ^ member skipAllPasses_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member reserveRawExports_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && !options.skipAllPasses) && options.reserveRawExports)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ qualifier options_ter ^ ^ member skipAllPasses_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member shadowVariables_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && !options.skipAllPasses) && options.shadowVariables)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ qualifier options_ter ^ ^ member skipAllPasses_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member generatePseudoNames_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && !options.skipAllPasses) && options.generatePseudoNames)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ qualifier options_ter ^ ^ member skipAllPasses_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member aliasKeywords_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && !options.skipAllPasses) && options.aliasKeywords)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ qualifier options_ter ^ ^ member skipAllPasses_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member collapseProperties_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && !options.skipAllPasses) && options.collapseProperties)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ qualifier options_ter ^ ^ member skipAllPasses_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member collapseObjectLiterals_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && !options.skipAllPasses) && options.collapseObjectLiterals)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ qualifier options_ter ^ ^ member skipAllPasses_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member collapsePropertiesOnExternTypes_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && !options.skipAllPasses) && options.collapsePropertiesOnExternTypes)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ qualifier options_ter ^ ^ member skipAllPasses_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member devirtualizePrototypeMethods_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && !options.skipAllPasses) && options.devirtualizePrototypeMethods)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ qualifier options_ter ^ ^ member skipAllPasses_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member computeFunctionSideEffects_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && !options.skipAllPasses) && options.computeFunctionSideEffects)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ qualifier options_ter ^ ^ member skipAllPasses_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member disambiguateProperties_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && !options.skipAllPasses) && options.disambiguateProperties)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ qualifier options_ter ^ ^ member skipAllPasses_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member ambiguateProperties_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && !options.skipAllPasses) && options.ambiguateProperties)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ qualifier options_ter ^ ^ member skipAllPasses_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member exportTestFunctions_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && !options.skipAllPasses) && options.exportTestFunctions)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ qualifier options_ter ^ ^ member skipAllPasses_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member specializeInitialModule_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && !options.skipAllPasses) && options.specializeInitialModule)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ qualifier options_ter ^ ^ member skipAllPasses_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member runtimeTypeCheck_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && !options.skipAllPasses) && options.runtimeTypeCheck)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ qualifier options_ter ^ ^ member skipAllPasses_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member ignoreCajaProperties_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && !options.skipAllPasses) && options.ignoreCajaProperties)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ qualifier options_ter ^ ^ member skipAllPasses_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member markAsCompiled_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && !options.skipAllPasses) && options.markAsCompiled)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ qualifier options_ter ^ ^ member skipAllPasses_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member removeTryCatchFinally_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && !options.skipAllPasses) && options.removeTryCatchFinally)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ qualifier options_ter ^ ^ member skipAllPasses_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && !options.skipAllPasses) && options.closurePass)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ qualifier options_ter ^ ^ member skipAllPasses_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member jqueryPass_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && !options.skipAllPasses) && options.jqueryPass)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ qualifier options_ter ^ ^ member skipAllPasses_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member rewriteNewDateGoogNow_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && !options.skipAllPasses) && options.rewriteNewDateGoogNow)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ qualifier options_ter ^ ^ member skipAllPasses_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member removeAbstractMethods_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && !options.skipAllPasses) && options.removeAbstractMethods)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ qualifier options_ter ^ ^ member skipAllPasses_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member removeClosureAsserts_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && !options.skipAllPasses) && options.removeClosureAsserts)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ qualifier options_ter ^ ^ member skipAllPasses_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member gatherCssNames_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && !options.skipAllPasses) && options.gatherCssNames)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ qualifier options_ter ^ ^ member skipAllPasses_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member markNoSideEffectCalls_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && !options.skipAllPasses) && options.markNoSideEffectCalls)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ qualifier options_ter ^ ^ member skipAllPasses_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member moveFunctionDeclarations_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && !options.skipAllPasses) && options.moveFunctionDeclarations)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ qualifier options_ter ^ ^ member skipAllPasses_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member recordFunctionInformation_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && !options.skipAllPasses) && options.recordFunctionInformation)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ qualifier options_ter ^ ^ member skipAllPasses_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member generateExports_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && !options.skipAllPasses) && options.generateExports)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ qualifier options_ter ^ ^ member skipAllPasses_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member processObjectPropertyString_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && !options.skipAllPasses) && options.processObjectPropertyString)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ qualifier options_ter ^ ^ member skipAllPasses_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member replaceIdGenerators_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && !options.skipAllPasses) && options.replaceIdGenerators)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ qualifier options_ter ^ ^ member skipAllPasses_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member transformAMDToCJSModules_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && !options.skipAllPasses) && options.transformAMDToCJSModules)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ qualifier options_ter ^ ^ member skipAllPasses_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member processCommonJSModules_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && !options.skipAllPasses) && options.processCommonJSModules)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ qualifier options_ter ^ ^ member skipAllPasses_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member prettyPrint_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && !options.skipAllPasses) && options.prettyPrint)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ qualifier options_ter ^ ^ member skipAllPasses_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member lineBreak_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && !options.skipAllPasses) && options.lineBreak)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ qualifier options_ter ^ ^ member skipAllPasses_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member preferLineBreakAtEndOfFile_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && !options.skipAllPasses) && options.preferLineBreakAtEndOfFile)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ qualifier options_ter ^ ^ member skipAllPasses_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member printInputDelimiter_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && !options.skipAllPasses) && options.printInputDelimiter)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ qualifier options_ter ^ ^ member skipAllPasses_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member colorizeErrorOutput_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && !options.skipAllPasses) && options.colorizeErrorOutput)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ qualifier options_ter ^ ^ member skipAllPasses_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member externExports_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && !options.skipAllPasses) && options.externExports)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ qualifier options_ter ^ ^ member skipAllPasses_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member looseTypes_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && !options.skipAllPasses) && options.looseTypes)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ qualifier options_ter ^ ^ member skipAllPasses_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member protectHiddenSideEffects_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && !options.skipAllPasses) && options.protectHiddenSideEffects)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ qualifier options_ter ^ ^ member skipAllPasses_ter ^ ^ ^ ^ ^ ^ operandr MemberReference member e_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && !options.skipAllPasses) && e)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference member e_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && e) && options.closurePass)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ qualifier options_ter ^ ^ member skipAllPasses_ter ^ ^ ^ ^ ^ ^ operandr MemberReference member staleInputs_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && !options.skipAllPasses) && staleInputs)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference member staleInputs_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && staleInputs) && options.closurePass)){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ qualifier options_ter ^ ^ member skipAllPasses_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ ^ 
if((((options.dependencyOptions.needsManagement() && !options.skipAllPasses) && options.closurePass) && options.closurePass)){

IfStatement condition MethodInvocation member precheck_ter ^ ^ ^ ^ ^ 
if(precheck()){

IfStatement condition MethodInvocation member isInliningForbidden_ter ^ ^ ^ ^ ^ 
if(isInliningForbidden()){

IfStatement condition MethodInvocation member isIdeMode_ter ^ ^ ^ ^ ^ 
if(isIdeMode()){

IfStatement condition MethodInvocation member acceptEcmaScript5_ter ^ ^ ^ ^ ^ 
if(acceptEcmaScript5()){

IfStatement condition MethodInvocation member acceptConstKeyword_ter ^ ^ ^ ^ ^ 
if(acceptConstKeyword()){

IfStatement condition MethodInvocation member isTypeCheckingEnabled_ter ^ ^ ^ ^ ^ 
if(isTypeCheckingEnabled()){

IfStatement condition MethodInvocation member hasHaltingErrors_ter ^ ^ ^ ^ ^ 
if(hasHaltingErrors()){

IfStatement condition MethodInvocation member hasErrors_ter ^ ^ ^ ^ ^ 
if(hasErrors()){

IfStatement condition MethodInvocation member hasRegExpGlobalReferences_ter ^ ^ ^ ^ ^ 
if(hasRegExpGlobalReferences()){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ ^ 
if((options.dependencyOptions.needsManagement() && options.closurePass)){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ qualifier options_ter ^ ^ member skipAllPasses_ter ^ ^ ^ ^ ^ ^ operandr MemberReference member loc0 ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && !options.skipAllPasses) && )){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ qualifier options_ter ^ ^ member skipAllPasses_ter ^ ^ ^ ^ ^ ^ operandr MemberReference member inputs_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && !options.skipAllPasses) && inputs)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference member loc0 ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && ) && options.closurePass)){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member manageClosureDependencies_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && options.manageClosureDependencies) && options.closurePass)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member acceptConstKeyword_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && options.acceptConstKeyword) && options.closurePass)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member assumeStrictThis_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && options.assumeStrictThis) && options.closurePass)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member ideMode_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && options.ideMode) && options.closurePass)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member inferTypes_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && options.inferTypes) && options.closurePass)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member skipAllPasses_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && options.skipAllPasses) && options.closurePass)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member nameAnonymousFunctionsOnly_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && options.nameAnonymousFunctionsOnly) && options.closurePass)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member checkSymbols_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && options.checkSymbols) && options.closurePass)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member checkSuspiciousCode_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && options.checkSuspiciousCode) && options.closurePass)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member checkControlStructures_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && options.checkControlStructures) && options.closurePass)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member checkTypes_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && options.checkTypes) && options.closurePass)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member tightenTypes_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && options.tightenTypes) && options.closurePass)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member checkCaja_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && options.checkCaja) && options.closurePass)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member foldConstants_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && options.foldConstants) && options.closurePass)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member deadAssignmentElimination_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && options.deadAssignmentElimination) && options.closurePass)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member inlineConstantVars_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && options.inlineConstantVars) && options.closurePass)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member inlineFunctions_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && options.inlineFunctions) && options.closurePass)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member inlineLocalFunctions_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && options.inlineLocalFunctions) && options.closurePass)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member assumeClosuresOnlyCaptureReferences_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && options.assumeClosuresOnlyCaptureReferences) && options.closurePass)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member crossModuleCodeMotion_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && options.crossModuleCodeMotion) && options.closurePass)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member coalesceVariableNames_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && options.coalesceVariableNames) && options.closurePass)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member crossModuleMethodMotion_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && options.crossModuleMethodMotion) && options.closurePass)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member inlineGetters_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && options.inlineGetters) && options.closurePass)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member inlineVariables_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && options.inlineVariables) && options.closurePass)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member inlineLocalVariables_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && options.inlineLocalVariables) && options.closurePass)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member flowSensitiveInlineVariables_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && options.flowSensitiveInlineVariables) && options.closurePass)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member smartNameRemoval_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && options.smartNameRemoval) && options.closurePass)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member removeDeadCode_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && options.removeDeadCode) && options.closurePass)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member extractPrototypeMemberDeclarations_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && options.extractPrototypeMemberDeclarations) && options.closurePass)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member removeUnusedPrototypeProperties_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && options.removeUnusedPrototypeProperties) && options.closurePass)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member removeUnusedPrototypePropertiesInExterns_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && options.removeUnusedPrototypePropertiesInExterns) && options.closurePass)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member removeUnusedVars_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && options.removeUnusedVars) && options.closurePass)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member removeUnusedLocalVars_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && options.removeUnusedLocalVars) && options.closurePass)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member aliasExternals_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && options.aliasExternals) && options.closurePass)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member collapseVariableDeclarations_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && options.collapseVariableDeclarations) && options.closurePass)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member groupVariableDeclarations_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && options.groupVariableDeclarations) && options.closurePass)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member collapseAnonymousFunctions_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && options.collapseAnonymousFunctions) && options.closurePass)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member aliasAllStrings_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && options.aliasAllStrings) && options.closurePass)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member outputJsStringUsage_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && options.outputJsStringUsage) && options.closurePass)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member convertToDottedProperties_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && options.convertToDottedProperties) && options.closurePass)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member rewriteFunctionExpressions_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && options.rewriteFunctionExpressions) && options.closurePass)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member optimizeParameters_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && options.optimizeParameters) && options.closurePass)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member optimizeReturns_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && options.optimizeReturns) && options.closurePass)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member optimizeCalls_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && options.optimizeCalls) && options.closurePass)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member optimizeArgumentsArray_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && options.optimizeArgumentsArray) && options.closurePass)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member chainCalls_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && options.chainCalls) && options.closurePass)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member propertyAffinity_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && options.propertyAffinity) && options.closurePass)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member labelRenaming_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && options.labelRenaming) && options.closurePass)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member reserveRawExports_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && options.reserveRawExports) && options.closurePass)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member shadowVariables_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && options.shadowVariables) && options.closurePass)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member generatePseudoNames_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && options.generatePseudoNames) && options.closurePass)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member aliasKeywords_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && options.aliasKeywords) && options.closurePass)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member collapseProperties_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && options.collapseProperties) && options.closurePass)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member collapseObjectLiterals_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && options.collapseObjectLiterals) && options.closurePass)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member collapsePropertiesOnExternTypes_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && options.collapsePropertiesOnExternTypes) && options.closurePass)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member devirtualizePrototypeMethods_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && options.devirtualizePrototypeMethods) && options.closurePass)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member computeFunctionSideEffects_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && options.computeFunctionSideEffects) && options.closurePass)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member disambiguateProperties_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && options.disambiguateProperties) && options.closurePass)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member ambiguateProperties_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && options.ambiguateProperties) && options.closurePass)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member exportTestFunctions_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && options.exportTestFunctions) && options.closurePass)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member specializeInitialModule_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && options.specializeInitialModule) && options.closurePass)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member runtimeTypeCheck_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && options.runtimeTypeCheck) && options.closurePass)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member ignoreCajaProperties_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && options.ignoreCajaProperties) && options.closurePass)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member markAsCompiled_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && options.markAsCompiled) && options.closurePass)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member removeTryCatchFinally_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && options.removeTryCatchFinally) && options.closurePass)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && options.closurePass) && options.closurePass)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member jqueryPass_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && options.jqueryPass) && options.closurePass)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member rewriteNewDateGoogNow_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && options.rewriteNewDateGoogNow) && options.closurePass)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member removeAbstractMethods_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && options.removeAbstractMethods) && options.closurePass)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member removeClosureAsserts_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && options.removeClosureAsserts) && options.closurePass)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member gatherCssNames_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && options.gatherCssNames) && options.closurePass)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member markNoSideEffectCalls_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && options.markNoSideEffectCalls) && options.closurePass)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member moveFunctionDeclarations_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && options.moveFunctionDeclarations) && options.closurePass)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member recordFunctionInformation_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && options.recordFunctionInformation) && options.closurePass)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member generateExports_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && options.generateExports) && options.closurePass)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member processObjectPropertyString_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && options.processObjectPropertyString) && options.closurePass)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member replaceIdGenerators_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && options.replaceIdGenerators) && options.closurePass)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member transformAMDToCJSModules_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && options.transformAMDToCJSModules) && options.closurePass)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member processCommonJSModules_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && options.processCommonJSModules) && options.closurePass)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member prettyPrint_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && options.prettyPrint) && options.closurePass)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member lineBreak_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && options.lineBreak) && options.closurePass)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member preferLineBreakAtEndOfFile_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && options.preferLineBreakAtEndOfFile) && options.closurePass)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member printInputDelimiter_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && options.printInputDelimiter) && options.closurePass)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member colorizeErrorOutput_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && options.colorizeErrorOutput) && options.closurePass)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member externExports_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && options.externExports) && options.closurePass)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member looseTypes_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && options.looseTypes) && options.closurePass)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member protectHiddenSideEffects_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && options.protectHiddenSideEffects) && options.closurePass)){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ qualifier options_ter ^ ^ member skipAllPasses_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && !options.skipAllPasses) && options.closurePass)){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ qualifier options_ter ^ ^ member skipAllPasses_ter ^ ^ ^ ^ ^ ^ operandr MemberReference member debug_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && !options.skipAllPasses) && debug)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ qualifier options_ter ^ ^ member skipAllPasses_ter ^ ^ ^ ^ ^ ^ operandr MemberReference member moduleGraph_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && !options.skipAllPasses) && moduleGraph)){
IfStatement condition MethodInvocation qualifier input_ter ^ ^ member getProvides_ter ^ ^ ^ ^ ^ 
if(input.getProvides()){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference member inputs_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && inputs) && options.closurePass)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ qualifier options_ter ^ ^ member skipAllPasses_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier JSModule_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && !options.skipAllPasses) && JSModule.closurePass)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ qualifier options_ter ^ ^ member skipAllPasses_ter ^ ^ ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ member skipAllPasses_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && !options.skipAllPasses) && !skipAllPasses)){
IfStatement condition MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member precheck_ter ^ ^ ^ ^ ^ 
if(options.dependencyOptions.precheck()){

IfStatement condition MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member isInliningForbidden_ter ^ ^ ^ ^ ^ 
if(options.dependencyOptions.isInliningForbidden()){

IfStatement condition MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member isIdeMode_ter ^ ^ ^ ^ ^ 
if(options.dependencyOptions.isIdeMode()){

IfStatement condition MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member acceptEcmaScript5_ter ^ ^ ^ ^ ^ 
if(options.dependencyOptions.acceptEcmaScript5()){

IfStatement condition MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member acceptConstKeyword_ter ^ ^ ^ ^ ^ 
if(options.dependencyOptions.acceptConstKeyword()){

IfStatement condition MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member isTypeCheckingEnabled_ter ^ ^ ^ ^ ^ 
if(options.dependencyOptions.isTypeCheckingEnabled()){

IfStatement condition MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member hasHaltingErrors_ter ^ ^ ^ ^ ^ 
if(options.dependencyOptions.hasHaltingErrors()){

IfStatement condition MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member hasErrors_ter ^ ^ ^ ^ ^ 
if(options.dependencyOptions.hasErrors()){

IfStatement condition MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member hasRegExpGlobalReferences_ter ^ ^ ^ ^ ^ 
if(options.dependencyOptions.hasRegExpGlobalReferences()){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ qualifier options_ter ^ ^ member skipAllPasses_ter ^ ^ ^ ^ ^ ^ operandr MemberReference member modules_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && !options.skipAllPasses) && modules)){
condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ qualifier options_ter ^ ^ member skipAllPasses_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && !options.skipAllPasses) || options.closurePass)){
IfStatement condition MethodInvocation qualifier e_ter ^ ^ member getMessage_ter ^ ^ ^ ^ ^ 
if(e.getMessage()){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference member debug_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && debug) && options.closurePass)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference member moduleGraph_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && moduleGraph) && options.closurePass)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference member modules_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && modules) && options.closurePass)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ member skipAllPasses_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && !skipAllPasses) && options.closurePass)){
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member getJSDocInfo_ter ^ ^ ^ ^ ^ 
if(n.getJSDocInfo()){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ qualifier options_ter ^ ^ member skipAllPasses_ter ^ ^ ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ member moduleGraph_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && !options.skipAllPasses) && !moduleGraph)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ member inputs_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && !inputs) && options.closurePass)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ qualifier options_ter ^ ^ member skipAllPasses_ter ^ ^ ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ member inputs_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && !options.skipAllPasses) && !inputs)){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ qualifier options_ter ^ ^ member skipAllPasses_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ qualifier options_ter ^ ^ member skipAllPasses_ter ^ ^ ^ ^ ^ ^ ^ 
if((((options.dependencyOptions.needsManagement() && !options.skipAllPasses) && options.closurePass) && !options.skipAllPasses)){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ member moduleGraph_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && !moduleGraph) && options.closurePass)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ qualifier options_ter ^ ^ member skipAllPasses_ter ^ ^ ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ member modules_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && !options.skipAllPasses) && !modules)){
IfStatement condition MethodInvocation qualifier JSError_ter ^ ^ member precheck_ter ^ ^ ^ ^ ^ 
if(JSError.precheck()){

IfStatement condition MethodInvocation qualifier JSError_ter ^ ^ member isInliningForbidden_ter ^ ^ ^ ^ ^ 
if(JSError.isInliningForbidden()){

IfStatement condition MethodInvocation qualifier JSError_ter ^ ^ member isIdeMode_ter ^ ^ ^ ^ ^ 
if(JSError.isIdeMode()){

IfStatement condition MethodInvocation qualifier JSError_ter ^ ^ member acceptEcmaScript5_ter ^ ^ ^ ^ ^ 
if(JSError.acceptEcmaScript5()){

IfStatement condition MethodInvocation qualifier JSError_ter ^ ^ member acceptConstKeyword_ter ^ ^ ^ ^ ^ 
if(JSError.acceptConstKeyword()){

IfStatement condition MethodInvocation qualifier JSError_ter ^ ^ member isTypeCheckingEnabled_ter ^ ^ ^ ^ ^ 
if(JSError.isTypeCheckingEnabled()){

IfStatement condition MethodInvocation qualifier JSError_ter ^ ^ member hasHaltingErrors_ter ^ ^ ^ ^ ^ 
if(JSError.hasHaltingErrors()){

IfStatement condition MethodInvocation qualifier JSError_ter ^ ^ member hasErrors_ter ^ ^ ^ ^ ^ 
if(JSError.hasErrors()){

IfStatement condition MethodInvocation qualifier JSError_ter ^ ^ member hasRegExpGlobalReferences_ter ^ ^ ^ ^ ^ 
if(JSError.hasRegExpGlobalReferences()){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ member modules_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && !modules) && options.closurePass)){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ qualifier options_ter ^ ^ member skipAllPasses_ter ^ ^ ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && !options.skipAllPasses) && !closurePass)){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && options.closurePass) && options.closurePass)){

IfStatement condition MethodInvocation qualifier e_ter ^ ^ member precheck_ter ^ ^ ^ ^ ^ 
if(e.precheck()){

IfStatement condition MethodInvocation qualifier e_ter ^ ^ member isInliningForbidden_ter ^ ^ ^ ^ ^ 
if(e.isInliningForbidden()){

IfStatement condition MethodInvocation qualifier e_ter ^ ^ member isIdeMode_ter ^ ^ ^ ^ ^ 
if(e.isIdeMode()){

IfStatement condition MethodInvocation qualifier e_ter ^ ^ member acceptEcmaScript5_ter ^ ^ ^ ^ ^ 
if(e.acceptEcmaScript5()){

IfStatement condition MethodInvocation qualifier e_ter ^ ^ member acceptConstKeyword_ter ^ ^ ^ ^ ^ 
if(e.acceptConstKeyword()){

IfStatement condition MethodInvocation qualifier e_ter ^ ^ member isTypeCheckingEnabled_ter ^ ^ ^ ^ ^ 
if(e.isTypeCheckingEnabled()){

IfStatement condition MethodInvocation qualifier e_ter ^ ^ member hasHaltingErrors_ter ^ ^ ^ ^ ^ 
if(e.hasHaltingErrors()){

IfStatement condition MethodInvocation qualifier e_ter ^ ^ member hasErrors_ter ^ ^ ^ ^ ^ 
if(e.hasErrors()){

IfStatement condition MethodInvocation qualifier e_ter ^ ^ member hasRegExpGlobalReferences_ter ^ ^ ^ ^ ^ 
if(e.hasRegExpGlobalReferences()){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ qualifier options_ter ^ ^ member skipAllPasses_ter ^ ^ ^ ^ ^ ^ operandr MemberReference prefix_operators !_ter ^ ^ qualifier options_ter ^ ^ member skipAllPasses_ter ^ ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && !options.skipAllPasses) && !options.skipAllPasses)){

stderr: 