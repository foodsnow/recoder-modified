stdout: LocalVariableDeclaration type BasicType name long_ter ^ ^ ^ ^ declarators VariableDeclarator name strLen_ter ^ ^ initializer MethodInvocation qualifier str_ter ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ 
long strLen = str.length();

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name strLen_ter ^ ^ initializer MethodInvocation qualifier str_ter ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ 
int strLen = str.length();

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name strLen_ter ^ ^ initializer MethodInvocation qualifier width_ter ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ 
int strLen = width.length();

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name strLen_ter ^ ^ initializer MethodInvocation qualifier obj_ter ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ 
int strLen = obj.length();

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member str_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((str != null)){

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name strLen_ter ^ ^ initializer MethodInvocation qualifier padChar_ter ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ 
int strLen = padChar.length();

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member str_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ 
if((str != 0)){

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name strLen_ter ^ ^ initializer MethodInvocation qualifier str_ter ^ ^ member toString_ter ^ ^ ^ ^ ^ ^ ^ 
int strLen = str.toString();

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name strLen_ter ^ ^ initializer MethodInvocation qualifier par3 ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ 
int strLen = .length();


LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name strLen_ter ^ ^ initializer MethodInvocation qualifier str_ter ^ ^ member getNullText_ter ^ ^ ^ ^ ^ ^ ^ 
int strLen = str.getNullText();

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name strLen_ter ^ ^ initializer MethodInvocation qualifier str_ter ^ ^ member appendFixedWidthPadLeft_ter ^ ^ ^ ^ ^ ^ ^ 
int strLen = str.appendFixedWidthPadLeft();

LocalVariableDeclaration type BasicType name char_ter ^ ^ ^ ^ declarators VariableDeclarator name strLen_ter ^ ^ initializer MethodInvocation qualifier str_ter ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ 
char strLen = str.length();

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name strLen_ter ^ ^ initializer MethodInvocation qualifier strLen_ter ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ 
int strLen = strLen.length();

ReturnStatement_ter ^ 
if (true) { return;
 }

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name strLen_ter ^ ^ initializer MemberReference member str_ter ^ ^ ^ ^ ^ ^ ^ 
int strLen = str;

IfStatement condition BinaryOperation operator -_ter ^ ^ operandl MemberReference member strLen_ter ^ ^ ^ ^ operandr MemberReference member width_ter ^ ^ ^ ^ ^ ^ ^ 
if((strLen - width)){

LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name strLen_ter ^ ^ initializer MethodInvocation qualifier str_ter ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ 
final int strLen = str.length();

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member str_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
ReturnStatement expression This_ter ^ ^ ^ 
if((str == null)){
return this;}
IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member str_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((str == null)){

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name strLen_ter ^ ^ initializer MethodInvocation qualifier i_ter ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ 
int strLen = i.length();

IfStatement condition BinaryOperation operator +_ter ^ ^ operandl MemberReference member size_ter ^ ^ ^ ^ operandr MemberReference member i_ter ^ ^ ^ ^ ^ ^ ^ 
if((size + i)){

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member str_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if((str == null)){
continue;
}
LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name strLen_ter ^ ^ initializer MethodInvocation qualifier str_ter ^ ^ arguments MemberReference member width_ter ^ ^ ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ 
int strLen = str.length(width);

LocalVariableDeclaration type BasicType name boolean_ter ^ ^ ^ ^ declarators VariableDeclarator name strLen_ter ^ ^ initializer MethodInvocation qualifier str_ter ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ 
boolean strLen = str.length();

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member str_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if((str == null)){
return null;}
LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name strLen_ter ^ ^ ^ ^ ^ 
int strLen = ;


IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member str_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ 
if((str == 0)){

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member str_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ 
ReturnStatement expression This_ter ^ ^ ^ 
if((str == 0)){
return this;}
LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name strLen_ter ^ ^ initializer MethodInvocation qualifier str_ter ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ 
int strLen = str.length(0);

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name strLen_ter ^ ^ initializer MethodInvocation member length_ter ^ ^ ^ ^ ^ ^ ^ 
int strLen = length();

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name strLen_ter ^ ^ initializer MethodInvocation arguments MemberReference member str_ter ^ ^ ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ 
int strLen = length(str);

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member obj_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((obj != null)){

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member str_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if((str == 0)){
continue;
}
IfStatement condition BinaryOperation operator +_ter ^ ^ operandl MemberReference member size_ter ^ ^ ^ ^ operandr MemberReference member padLen_ter ^ ^ ^ ^ ^ ^ ^ 
if((size + padLen)){

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member str_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if((str == 0)){
return null;}
LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name strLen_ter ^ ^ initializer Cast type BasicType name int_ter ^ ^ ^ ^ expression MethodInvocation qualifier str_ter ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
int strLen = (int)str.length();

StatementExpression expression MethodInvocation arguments BinaryOperation operator +_ter ^ ^ operandl MemberReference member size_ter ^ ^ ^ ^ operandr MemberReference member width_ter ^ ^ ^ ^ ^ ^ member ensureCapacity_ter ^ ^ ^ ^ ^ 
ensureCapacity((size + width));

StatementExpression expression MethodInvocation qualifier str_ter ^ ^ arguments BinaryOperation operator -_ter ^ ^ operandl MemberReference member strLen_ter ^ ^ ^ ^ operandr MemberReference member width_ter ^ ^ ^ ^ ^ MemberReference member strLen_ter ^ ^ ^ MemberReference member buffer_ter ^ ^ ^ MemberReference member size_ter ^ ^ ^ ^ member getChars_ter ^ ^ ^ ^ ^ 
str.getChars((strLen - width), strLen, buffer, size);

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member str_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if((str == null)){
return;
}
IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member obj_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((obj == null)){

LocalVariableDeclaration type BasicType name long_ter ^ ^ ^ ^ declarators VariableDeclarator name strLen_ter ^ ^ initializer MethodInvocation qualifier str_ter ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ 
long strLen = str.length();

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name strLen_ter ^ ^ initializer MethodInvocation qualifier str_ter ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ 
int strLen = str.length();

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name strLen_ter ^ ^ initializer MethodInvocation qualifier width_ter ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ 
int strLen = width.length();

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name strLen_ter ^ ^ initializer MethodInvocation qualifier obj_ter ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ 
int strLen = obj.length();

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member str_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((str != null)){

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name strLen_ter ^ ^ initializer MethodInvocation qualifier padChar_ter ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ 
int strLen = padChar.length();

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member str_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ 
if((str != 0)){

LocalVariableDeclaration type BasicType name char_ter ^ ^ ^ ^ declarators VariableDeclarator name strLen_ter ^ ^ initializer MethodInvocation qualifier str_ter ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ 
char strLen = str.length();

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name strLen_ter ^ ^ initializer MethodInvocation qualifier par3 ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ 
int strLen = .length();


LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name strLen_ter ^ ^ initializer MethodInvocation qualifier strLen_ter ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ 
int strLen = strLen.length();

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name strLen_ter ^ ^ initializer MethodInvocation qualifier str_ter ^ ^ member toString_ter ^ ^ ^ ^ ^ ^ ^ 
int strLen = str.toString();

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name strLen_ter ^ ^ initializer MethodInvocation qualifier str_ter ^ ^ member appendFixedWidthPadRight_ter ^ ^ ^ ^ ^ ^ ^ 
int strLen = str.appendFixedWidthPadRight();

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member str_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
ReturnStatement expression This_ter ^ ^ ^ 
if((str == null)){
return this;}
LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name strLen_ter ^ ^ initializer MethodInvocation qualifier str_ter ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ 
final int strLen = str.length();

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name strLen_ter ^ ^ initializer MethodInvocation qualifier str_ter ^ ^ member getNullText_ter ^ ^ ^ ^ ^ ^ ^ 
int strLen = str.getNullText();

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name strLen_ter ^ ^ initializer MemberReference member str_ter ^ ^ ^ ^ ^ ^ ^ 
int strLen = str;

ReturnStatement_ter ^ 
if (true) { return;
 }

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name strLen_ter ^ ^ initializer MethodInvocation qualifier i_ter ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ 
int strLen = i.length();

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member str_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ 
ReturnStatement expression This_ter ^ ^ ^ 
if((str == 0)){
return this;}
IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member str_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((str == null)){

LocalVariableDeclaration type BasicType name boolean_ter ^ ^ ^ ^ declarators VariableDeclarator name strLen_ter ^ ^ initializer MethodInvocation qualifier str_ter ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ 
boolean strLen = str.length();

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name strLen_ter ^ ^ ^ ^ ^ 
int strLen = ;


IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member str_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ 
if((str == 0)){

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member str_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if((str == null)){
return null;}
IfStatement condition BinaryOperation operator +_ter ^ ^ operandl MemberReference member size_ter ^ ^ ^ ^ operandr MemberReference member strLen_ter ^ ^ ^ ^ ^ ^ ^ 
if((size + strLen)){

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name strLen_ter ^ ^ initializer MethodInvocation qualifier str_ter ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ 
int strLen = str.length(0);

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name strLen_ter ^ ^ initializer MethodInvocation arguments MemberReference member str_ter ^ ^ ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ 
int strLen = length(str);

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name strLen_ter ^ ^ initializer MethodInvocation qualifier str_ter ^ ^ arguments MemberReference member width_ter ^ ^ ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ 
int strLen = str.length(width);

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member str_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if((str == 0)){
return null;}
IfStatement condition BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl MemberReference member size_ter ^ ^ ^ ^ operandr MemberReference member strLen_ter ^ ^ ^ ^ ^ ^ operandr MemberReference member i_ter ^ ^ ^ ^ ^ ^ ^ 
if(((size + strLen) + i)){

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name strLen_ter ^ ^ initializer MethodInvocation member length_ter ^ ^ ^ ^ ^ ^ ^ 
int strLen = length();

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member str_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if((str == null)){
continue;
}
LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name strLen_ter ^ ^ initializer Cast type BasicType name int_ter ^ ^ ^ ^ expression MethodInvocation qualifier str_ter ^ ^ member length_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
int strLen = (int)str.length();

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member obj_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((obj != null)){

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member str_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if((str == 0)){
continue;
}
StatementExpression expression MethodInvocation arguments BinaryOperation operator +_ter ^ ^ operandl MemberReference member size_ter ^ ^ ^ ^ operandr MemberReference member width_ter ^ ^ ^ ^ ^ ^ member ensureCapacity_ter ^ ^ ^ ^ ^ 
ensureCapacity((size + width));

StatementExpression expression MethodInvocation qualifier str_ter ^ ^ arguments Literal value 0_ter ^ ^ ^ MemberReference member width_ter ^ ^ ^ MemberReference member buffer_ter ^ ^ ^ MemberReference member size_ter ^ ^ ^ ^ member getChars_ter ^ ^ ^ ^ ^ 
str.getChars(0, width, buffer, size);

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member obj_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ 
if((obj != 0)){

StatementExpression expression MethodInvocation qualifier str_ter ^ ^ arguments Literal value 0_ter ^ ^ ^ MemberReference member strLen_ter ^ ^ ^ MemberReference member buffer_ter ^ ^ ^ MemberReference member size_ter ^ ^ ^ ^ member getChars_ter ^ ^ ^ ^ ^ 
str.getChars(0, strLen, buffer, size);

stderr: 