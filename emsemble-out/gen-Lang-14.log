stdout: else_statement -> BlockStatement
using GPU
p
path org.apache.commons.lang3.StringUtils
equals
Position(line=781, column=19)
FOUND IT!
[{'bugid': 'Lang-14', 'treeroot': <Searchnode.Node object at 0x7fd13c9f8790>, 'troot': <Searchnode.Node object at 0x7fd13c9f8790>, 'oldcode': '            return cs1.equals(cs2);', 'filepath': 'buggy/Lang-14/src/main/java/org/apache/commons/lang3/StringUtils.java', 'subroot': <Searchnode.Node object at 0x7fd13c981d10>, 'vardic': {'equals_ter': 'meth0', 'cs1_ter': 'par0', 'cs2_ter': 'par1'}, 'typedic': {'cs1_ter': 'CharSequence', 'cs2_ter': 'CharSequence'}, 'idss': 'Lang-14', 'classname': 'org.apache.commons.lang3.StringUtils', 'precode': '/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the "License"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.lang3;\n\nimport java.io.UnsupportedEncodingException;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.regex.Pattern;\n\n/**\n * <p>Operations on {@link java.lang.String} that are\n * {@code null} safe.</p>\n *\n * <ul>\n *  <li><b>IsEmpty/IsBlank</b>\n *      - checks if a String contains text</li>\n *  <li><b>Trim/Strip</b>\n *      - removes leading and trailing whitespace</li>\n *  <li><b>Equals</b>\n *      - compares two strings null-safe</li>\n *  <li><b>startsWith</b>\n *      - check if a String starts with a prefix null-safe</li>\n *  <li><b>endsWith</b>\n *      - check if a String ends with a suffix null-safe</li>\n *  <li><b>IndexOf/LastIndexOf/Contains</b>\n *      - null-safe index-of checks\n *  <li><b>IndexOfAny/LastIndexOfAny/IndexOfAnyBut/LastIndexOfAnyBut</b>\n *      - index-of any of a set of Strings</li>\n *  <li><b>ContainsOnly/ContainsNone/ContainsAny</b>\n *      - does String contains only/none/any of these characters</li>\n *  <li><b>Substring/Left/Right/Mid</b>\n *      - null-safe substring extractions</li>\n *  <li><b>SubstringBefore/SubstringAfter/SubstringBetween</b>\n *      - substring extraction relative to other strings</li>\n *  <li><b>Split/Join</b>\n *      - splits a String into an array of substrings and vice versa</li>\n *  <li><b>Remove/Delete</b>\n *      - removes part of a String</li>\n *  <li><b>Replace/Overlay</b>\n *      - Searches a String and replaces one String with another</li>\n *  <li><b>Chomp/Chop</b>\n *      - removes the last part of a String</li>\n *  <li><b>LeftPad/RightPad/Center/Repeat</b>\n *      - pads a String</li>\n *  <li><b>UpperCase/LowerCase/SwapCase/Capitalize/Uncapitalize</b>\n *      - changes the case of a String</li>\n *  <li><b>CountMatches</b>\n *      - counts the number of occurrences of one String in another</li>\n *  <li><b>IsAlpha/IsNumeric/IsWhitespace/IsAsciiPrintable</b>\n *      - checks the characters in a String</li>\n *  <li><b>DefaultString</b>\n *      - protects against a null input String</li>\n *  <li><b>Reverse/ReverseDelimited</b>\n *      - reverses a String</li>\n *  <li><b>Abbreviate</b>\n *      - abbreviates a string using ellipsis</li>\n *  <li><b>Difference</b>\n *      - compares Strings and reports on their differences</li>\n *  <li><b>LevenshteinDistance</b>\n *      - the number of changes needed to change one String into another</li>\n * </ul>\n *\n * <p>The {@code StringUtils} class defines certain words related to\n * String handling.</p>\n *\n * <ul>\n *  <li>null - {@code null}</li>\n *  <li>empty - a zero-length string ({@code ""})</li>\n *  <li>space - the space character ({@code \' \'}, char 32)</li>\n *  <li>whitespace - the characters defined by {@link Character#isWhitespace(char)}</li>\n *  <li>trim - the characters &lt;= 32 as in {@link String#trim()}</li>\n * </ul>\n *\n * <p>{@code StringUtils} handles {@code null} input Strings quietly.\n * That is to say that a {@code null} input will return {@code null}.\n * Where a {@code boolean} or {@code int} is being returned\n * details vary by method.</p>\n *\n * <p>A side effect of the {@code null} handling is that a\n * {@code NullPointerException} should be considered a bug in\n * {@code StringUtils}.</p>\n *\n * <p>Methods in this class give sample code to explain their operation.\n * The symbol {@code *} is used to indicate any input including {@code null}.</p>\n *\n * <p>#ThreadSafe#</p>\n * @see java.lang.String\n * @since 1.0\n * @version $Id$\n */\n//@Immutable\npublic class StringUtils {\n    // Performance testing notes (JDK 1.4, Jul03, scolebourne)\n    // Whitespace:\n    // Character.isWhitespace() is faster than WHITESPACE.indexOf()\n    // where WHITESPACE is a string of all whitespace characters\n    //\n    // Character access:\n    // String.charAt(n) versus toCharArray(), then array[n]\n    // String.charAt(n) is about 15% worse for a 10K string\n    // They are about equal for a length 50 string\n    // String.charAt(n) is about 4 times better for a length 3 string\n    // String.charAt(n) is best bet overall\n    //\n    // Append:\n    // String.concat about twice as fast as StringBuffer.append\n    // (not sure who tested this)\n\n    /**\n     * The empty String {@code ""}.\n     * @since 2.0\n     */\n    public static final String EMPTY = "";\n\n    /**\n     * Represents a failed index search.\n     * @since 2.1\n     */\n    public static final int INDEX_NOT_FOUND = -1;\n\n    /**\n     * <p>The maximum size to which the padding constant(s) can expand.</p>\n     */\n    private static final int PAD_LIMIT = 8192;\n\n    /**\n     * A regex pattern for recognizing blocks of whitespace characters.\n     */\n    private static final Pattern WHITESPACE_BLOCK = Pattern.compile("\\\\s+");\n\n    /**\n     * <p>{@code StringUtils} instances should NOT be constructed in\n     * standard programming. Instead, the class should be used as\n     * {@code StringUtils.trim(" foo ");}.</p>\n     *\n     * <p>This constructor is public to permit tools that require a JavaBean\n     * instance to operate.</p>\n     */\n    public StringUtils() {\n        super();\n    }\n\n    // Empty checks\n    //-----------------------------------------------------------------------\n    /**\n     * <p>Checks if a CharSequence is empty ("") or null.</p>\n     *\n     * <pre>\n     * StringUtils.isEmpty(null)      = true\n     * StringUtils.isEmpty("")        = true\n     * StringUtils.isEmpty(" ")       = false\n     * StringUtils.isEmpty("bob")     = false\n     * StringUtils.isEmpty("  bob  ") = false\n     * </pre>\n     *\n     * <p>NOTE: This method changed in Lang version 2.0.\n     * It no longer trims the CharSequence.\n     * That functionality is available in isBlank().</p>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @return {@code true} if the CharSequence is empty or null\n     * @since 3.0 Changed signature from isEmpty(String) to isEmpty(CharSequence)\n     */\n    public static boolean isEmpty(CharSequence cs) {\n        return cs == null || cs.length() == 0;\n    }\n\n    /**\n     * <p>Checks if a CharSequence is not empty ("") and not null.</p>\n     *\n     * <pre>\n     * StringUtils.isNotEmpty(null)      = false\n     * StringUtils.isNotEmpty("")        = false\n     * StringUtils.isNotEmpty(" ")       = true\n     * StringUtils.isNotEmpty("bob")     = true\n     * StringUtils.isNotEmpty("  bob  ") = true\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @return {@code true} if the CharSequence is not empty and not null\n     * @since 3.0 Changed signature from isNotEmpty(String) to isNotEmpty(CharSequence)\n     */\n    public static boolean isNotEmpty(CharSequence cs) {\n        return !StringUtils.isEmpty(cs);\n    }\n\n    /**\n     * <p>Checks if a CharSequence is whitespace, empty ("") or null.</p>\n     *\n     * <pre>\n     * StringUtils.isBlank(null)      = true\n     * StringUtils.isBlank("")        = true\n     * StringUtils.isBlank(" ")       = true\n     * StringUtils.isBlank("bob")     = false\n     * StringUtils.isBlank("  bob  ") = false\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @return {@code true} if the CharSequence is null, empty or whitespace\n     * @since 2.0\n     * @since 3.0 Changed signature from isBlank(String) to isBlank(CharSequence)\n     */\n    public static boolean isBlank(CharSequence cs) {\n        int strLen;\n        if (cs == null || (strLen = cs.length()) == 0) {\n            return true;\n        }\n        for (int i = 0; i < strLen; i++) {\n            if (Character.isWhitespace(cs.charAt(i)) == false) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * <p>Checks if a CharSequence is not empty (""), not null and not whitespace only.</p>\n     *\n     * <pre>\n     * StringUtils.isNotBlank(null)      = false\n     * StringUtils.isNotBlank("")        = false\n     * StringUtils.isNotBlank(" ")       = false\n     * StringUtils.isNotBlank("bob")     = true\n     * StringUtils.isNotBlank("  bob  ") = true\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @return {@code true} if the CharSequence is\n     *  not empty and not null and not whitespace\n     * @since 2.0\n     * @since 3.0 Changed signature from isNotBlank(String) to isNotBlank(CharSequence)\n     */\n    public static boolean isNotBlank(CharSequence cs) {\n        return !StringUtils.isBlank(cs);\n    }\n\n    // Trim\n    //-----------------------------------------------------------------------\n    /**\n     * <p>Removes control characters (char &lt;= 32) from both\n     * ends of this String, handling {@code null} by returning\n     * {@code null}.</p>\n     *\n     * <p>The String is trimmed using {@link String#trim()}.\n     * Trim removes start and end characters &lt;= 32.\n     * To strip whitespace use {@link #strip(String)}.</p>\n     *\n     * <p>To trim your choice of characters, use the\n     * {@link #strip(String, String)} methods.</p>\n     *\n     * <pre>\n     * StringUtils.trim(null)          = null\n     * StringUtils.trim("")            = ""\n     * StringUtils.trim("     ")       = ""\n     * StringUtils.trim("abc")         = "abc"\n     * StringUtils.trim("    abc    ") = "abc"\n     * </pre>\n     *\n     * @param str  the String to be trimmed, may be null\n     * @return the trimmed string, {@code null} if null String input\n     */\n    public static String trim(String str) {\n        return str == null ? null : str.trim();\n    }\n\n    /**\n     * <p>Removes control characters (char &lt;= 32) from both\n     * ends of this String returning {@code null} if the String is\n     * empty ("") after the trim or if it is {@code null}.\n     *\n     * <p>The String is trimmed using {@link String#trim()}.\n     * Trim removes start and end characters &lt;= 32.\n     * To strip whitespace use {@link #stripToNull(String)}.</p>\n     *\n     * <pre>\n     * StringUtils.trimToNull(null)          = null\n     * StringUtils.trimToNull("")            = null\n     * StringUtils.trimToNull("     ")       = null\n     * StringUtils.trimToNull("abc")         = "abc"\n     * StringUtils.trimToNull("    abc    ") = "abc"\n     * </pre>\n     *\n     * @param str  the String to be trimmed, may be null\n     * @return the trimmed String,\n     *  {@code null} if only chars &lt;= 32, empty or null String input\n     * @since 2.0\n     */\n    public static String trimToNull(String str) {\n        String ts = trim(str);\n        return isEmpty(ts) ? null : ts;\n    }\n\n    /**\n     * <p>Removes control characters (char &lt;= 32) from both\n     * ends of this String returning an empty String ("") if the String\n     * is empty ("") after the trim or if it is {@code null}.\n     *\n     * <p>The String is trimmed using {@link String#trim()}.\n     * Trim removes start and end characters &lt;= 32.\n     * To strip whitespace use {@link #stripToEmpty(String)}.</p>\n     *\n     * <pre>\n     * StringUtils.trimToEmpty(null)          = ""\n     * StringUtils.trimToEmpty("")            = ""\n     * StringUtils.trimToEmpty("     ")       = ""\n     * StringUtils.trimToEmpty("abc")         = "abc"\n     * StringUtils.trimToEmpty("    abc    ") = "abc"\n     * </pre>\n     *\n     * @param str  the String to be trimmed, may be null\n     * @return the trimmed String, or an empty String if {@code null} input\n     * @since 2.0\n     */\n    public static String trimToEmpty(String str) {\n        return str == null ? EMPTY : str.trim();\n    }\n\n    // Stripping\n    //-----------------------------------------------------------------------\n    /**\n     * <p>Strips whitespace from the start and end of a String.</p>\n     *\n     * <p>This is similar to {@link #trim(String)} but removes whitespace.\n     * Whitespace is defined by {@link Character#isWhitespace(char)}.</p>\n     *\n     * <p>A {@code null} input String returns {@code null}.</p>\n     *\n     * <pre>\n     * StringUtils.strip(null)     = null\n     * StringUtils.strip("")       = ""\n     * StringUtils.strip("   ")    = ""\n     * StringUtils.strip("abc")    = "abc"\n     * StringUtils.strip("  abc")  = "abc"\n     * StringUtils.strip("abc  ")  = "abc"\n     * StringUtils.strip(" abc ")  = "abc"\n     * StringUtils.strip(" ab c ") = "ab c"\n     * </pre>\n     *\n     * @param str  the String to remove whitespace from, may be null\n     * @return the stripped String, {@code null} if null String input\n     */\n    public static String strip(String str) {\n        return strip(str, null);\n    }\n\n    /**\n     * <p>Strips whitespace from the start and end of a String  returning\n     * {@code null} if the String is empty ("") after the strip.</p>\n     *\n     * <p>This is similar to {@link #trimToNull(String)} but removes whitespace.\n     * Whitespace is defined by {@link Character#isWhitespace(char)}.</p>\n     *\n     * <pre>\n     * StringUtils.stripToNull(null)     = null\n     * StringUtils.stripToNull("")       = null\n     * StringUtils.stripToNull("   ")    = null\n     * StringUtils.stripToNull("abc")    = "abc"\n     * StringUtils.stripToNull("  abc")  = "abc"\n     * StringUtils.stripToNull("abc  ")  = "abc"\n     * StringUtils.stripToNull(" abc ")  = "abc"\n     * StringUtils.stripToNull(" ab c ") = "ab c"\n     * </pre>\n     *\n     * @param str  the String to be stripped, may be null\n     * @return the stripped String,\n     *  {@code null} if whitespace, empty or null String input\n     * @since 2.0\n     */\n    public static String stripToNull(String str) {\n        if (str == null) {\n            return null;\n        }\n        str = strip(str, null);\n        return str.length() == 0 ? null : str;\n    }\n\n    /**\n     * <p>Strips whitespace from the start and end of a String  returning\n     * an empty String if {@code null} input.</p>\n     *\n     * <p>This is similar to {@link #trimToEmpty(String)} but removes whitespace.\n     * Whitespace is defined by {@link Character#isWhitespace(char)}.</p>\n     *\n     * <pre>\n     * StringUtils.stripToEmpty(null)     = ""\n     * StringUtils.stripToEmpty("")       = ""\n     * StringUtils.stripToEmpty("   ")    = ""\n     * StringUtils.stripToEmpty("abc")    = "abc"\n     * StringUtils.stripToEmpty("  abc")  = "abc"\n     * StringUtils.stripToEmpty("abc  ")  = "abc"\n     * StringUtils.stripToEmpty(" abc ")  = "abc"\n     * StringUtils.stripToEmpty(" ab c ") = "ab c"\n     * </pre>\n     *\n     * @param str  the String to be stripped, may be null\n     * @return the trimmed String, or an empty String if {@code null} input\n     * @since 2.0\n     */\n    public static String stripToEmpty(String str) {\n        return str == null ? EMPTY : strip(str, null);\n    }\n\n    /**\n     * <p>Strips any of a set of characters from the start and end of a String.\n     * This is similar to {@link String#trim()} but allows the characters\n     * to be stripped to be controlled.</p>\n     *\n     * <p>A {@code null} input String returns {@code null}.\n     * An empty string ("") input returns the empty string.</p>\n     *\n     * <p>If the stripChars String is {@code null}, whitespace is\n     * stripped as defined by {@link Character#isWhitespace(char)}.\n     * Alternatively use {@link #strip(String)}.</p>\n     *\n     * <pre>\n     * StringUtils.strip(null, *)          = null\n     * StringUtils.strip("", *)            = ""\n     * StringUtils.strip("abc", null)      = "abc"\n     * StringUtils.strip("  abc", null)    = "abc"\n     * StringUtils.strip("abc  ", null)    = "abc"\n     * StringUtils.strip(" abc ", null)    = "abc"\n     * StringUtils.strip("  abcyx", "xyz") = "  abc"\n     * </pre>\n     *\n     * @param str  the String to remove characters from, may be null\n     * @param stripChars  the characters to remove, null treated as whitespace\n     * @return the stripped String, {@code null} if null String input\n     */\n    public static String strip(String str, String stripChars) {\n        if (isEmpty(str)) {\n            return str;\n        }\n        str = stripStart(str, stripChars);\n        return stripEnd(str, stripChars);\n    }\n\n    /**\n     * <p>Strips any of a set of characters from the start of a String.</p>\n     *\n     * <p>A {@code null} input String returns {@code null}.\n     * An empty string ("") input returns the empty string.</p>\n     *\n     * <p>If the stripChars String is {@code null}, whitespace is\n     * stripped as defined by {@link Character#isWhitespace(char)}.</p>\n     *\n     * <pre>\n     * StringUtils.stripStart(null, *)          = null\n     * StringUtils.stripStart("", *)            = ""\n     * StringUtils.stripStart("abc", "")        = "abc"\n     * StringUtils.stripStart("abc", null)      = "abc"\n     * StringUtils.stripStart("  abc", null)    = "abc"\n     * StringUtils.stripStart("abc  ", null)    = "abc  "\n     * StringUtils.stripStart(" abc ", null)    = "abc "\n     * StringUtils.stripStart("yxabc  ", "xyz") = "abc  "\n     * </pre>\n     *\n     * @param str  the String to remove characters from, may be null\n     * @param stripChars  the characters to remove, null treated as whitespace\n     * @return the stripped String, {@code null} if null String input\n     */\n    public static String stripStart(String str, String stripChars) {\n        int strLen;\n        if (str == null || (strLen = str.length()) == 0) {\n            return str;\n        }\n        int start = 0;\n        if (stripChars == null) {\n            while (start != strLen && Character.isWhitespace(str.charAt(start))) {\n                start++;\n            }\n        } else if (stripChars.length() == 0) {\n            return str;\n        } else {\n            while (start != strLen && stripChars.indexOf(str.charAt(start)) != INDEX_NOT_FOUND) {\n                start++;\n            }\n        }\n        return str.substring(start);\n    }\n\n    /**\n     * <p>Strips any of a set of characters from the end of a String.</p>\n     *\n     * <p>A {@code null} input String returns {@code null}.\n     * An empty string ("") input returns the empty string.</p>\n     *\n     * <p>If the stripChars String is {@code null}, whitespace is\n     * stripped as defined by {@link Character#isWhitespace(char)}.</p>\n     *\n     * <pre>\n     * StringUtils.stripEnd(null, *)          = null\n     * StringUtils.stripEnd("", *)            = ""\n     * StringUtils.stripEnd("abc", "")        = "abc"\n     * StringUtils.stripEnd("abc", null)      = "abc"\n     * StringUtils.stripEnd("  abc", null)    = "  abc"\n     * StringUtils.stripEnd("abc  ", null)    = "abc"\n     * StringUtils.stripEnd(" abc ", null)    = " abc"\n     * StringUtils.stripEnd("  abcyx", "xyz") = "  abc"\n     * StringUtils.stripEnd("120.00", ".0")   = "12"\n     * </pre>\n     *\n     * @param str  the String to remove characters from, may be null\n     * @param stripChars  the set of characters to remove, null treated as whitespace\n     * @return the stripped String, {@code null} if null String input\n     */\n    public static String stripEnd(String str, String stripChars) {\n        int end;\n        if (str == null || (end = str.length()) == 0) {\n            return str;\n        }\n\n        if (stripChars == null) {\n            while (end != 0 && Character.isWhitespace(str.charAt(end - 1))) {\n                end--;\n            }\n        } else if (stripChars.length() == 0) {\n            return str;\n        } else {\n            while (end != 0 && stripChars.indexOf(str.charAt(end - 1)) != INDEX_NOT_FOUND) {\n                end--;\n            }\n        }\n        return str.substring(0, end);\n    }\n\n    // StripAll\n    //-----------------------------------------------------------------------\n    /**\n     * <p>Strips whitespace from the start and end of every String in an array.\n     * Whitespace is defined by {@link Character#isWhitespace(char)}.</p>\n     *\n     * <p>A new array is returned each time, except for length zero.\n     * A {@code null} array will return {@code null}.\n     * An empty array will return itself.\n     * A {@code null} array entry will be ignored.</p>\n     *\n     * <pre>\n     * StringUtils.stripAll(null)             = null\n     * StringUtils.stripAll([])               = []\n     * StringUtils.stripAll(["abc", "  abc"]) = ["abc", "abc"]\n     * StringUtils.stripAll(["abc  ", null])  = ["abc", null]\n     * </pre>\n     *\n     * @param strs  the array to remove whitespace from, may be null\n     * @return the stripped Strings, {@code null} if null array input\n     */\n    public static String[] stripAll(String... strs) {\n        return stripAll(strs, null);\n    }\n\n    /**\n     * <p>Strips any of a set of characters from the start and end of every\n     * String in an array.</p>\n     * Whitespace is defined by {@link Character#isWhitespace(char)}.</p>\n     *\n     * <p>A new array is returned each time, except for length zero.\n     * A {@code null} array will return {@code null}.\n     * An empty array will return itself.\n     * A {@code null} array entry will be ignored.\n     * A {@code null} stripChars will strip whitespace as defined by\n     * {@link Character#isWhitespace(char)}.</p>\n     *\n     * <pre>\n     * StringUtils.stripAll(null, *)                = null\n     * StringUtils.stripAll([], *)                  = []\n     * StringUtils.stripAll(["abc", "  abc"], null) = ["abc", "abc"]\n     * StringUtils.stripAll(["abc  ", null], null)  = ["abc", null]\n     * StringUtils.stripAll(["abc  ", null], "yz")  = ["abc  ", null]\n     * StringUtils.stripAll(["yabcz", null], "yz")  = ["abc", null]\n     * </pre>\n     *\n     * @param strs  the array to remove characters from, may be null\n     * @param stripChars  the characters to remove, null treated as whitespace\n     * @return the stripped Strings, {@code null} if null array input\n     */\n    public static String[] stripAll(String[] strs, String stripChars) {\n        int strsLen;\n        if (strs == null || (strsLen = strs.length) == 0) {\n            return strs;\n        }\n        String[] newArr = new String[strsLen];\n        for (int i = 0; i < strsLen; i++) {\n            newArr[i] = strip(strs[i], stripChars);\n        }\n        return newArr;\n    }\n\n    /**\n     * <p>Removes diacritics (~= accents) from a string. The case will not be altered.</p>\n     * <p>For instance, \'&agrave;\' will be replaced by \'a\'.</p>\n     * <p>Note that ligatures will be left as is.</p>\n     *\n     * <p>This method will use the first available implementation of:\n     * Java 6\'s {@link java.text.Normalizer}, Java 1.3&ndash;1.5\'s {@code sun.text.Normalizer}</p>\n     *\n     * <pre>\n     * StringUtils.stripAccents(null)                = null\n     * StringUtils.stripAccents("")                  = ""\n     * StringUtils.stripAccents("control")           = "control"\n     * StringUtils.stripAccents("&eacute;clair")     = "eclair"\n     * </pre>\n     *\n     * @param input String to be stripped\n     * @return input text with diacritics removed\n     *\n     * @since 3.0\n     */\n    // See also Lucene\'s ASCIIFoldingFilter (Lucene 2.9) that replaces accented characters by their unaccented equivalent (and uncommitted bug fix: https://issues.apache.org/jira/browse/LUCENE-1343?focusedCommentId=12858907&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#action_12858907).\n    public static String stripAccents(String input) {\n        if(input == null) {\n            return null;\n        }\n        try {\n            String result = null;\n            if (InitStripAccents.java6NormalizeMethod != null) {\n                result = removeAccentsJava6(input);\n            } else if (InitStripAccents.sunDecomposeMethod != null) {\n                result = removeAccentsSUN(input);\n            } else {\n                throw new UnsupportedOperationException(\n                    "The stripAccents(CharSequence) method requires at least"\n                        +" Java6, but got: "+InitStripAccents.java6Exception\n                        +"; or a Sun JVM: "+InitStripAccents.sunException);\n            }\n            // Note that none of the above methods correctly remove ligatures...\n            return result;\n        } catch(IllegalArgumentException iae) {\n            throw new RuntimeException("IllegalArgumentException occurred", iae);\n        } catch(IllegalAccessException iae) {\n            throw new RuntimeException("IllegalAccessException occurred", iae);\n        } catch(InvocationTargetException ite) {\n            throw new RuntimeException("InvocationTargetException occurred", ite);\n        } catch(SecurityException se) {\n            throw new RuntimeException("SecurityException occurred", se);\n        }\n    }\n\n    /**\n     * Use {@code java.text.Normalizer#normalize(CharSequence, Normalizer.Form)}\n     * (but be careful, this class exists in Java 1.3, with an entirely different meaning!)\n     *\n     * @param text the text to be processed\n     * @return the processed string\n     * @throws IllegalAccessException may be thrown by a reflection call\n     * @throws InvocationTargetException if a reflection call throws an exception\n     * @throws IllegalStateException if the {@code Normalizer} class is not available\n     */\n    private static String removeAccentsJava6(CharSequence text)\n        throws IllegalAccessException, InvocationTargetException {\n        /*\n        String decomposed = java.text.Normalizer.normalize(CharSequence, Normalizer.Form.NFD);\n        return java6Pattern.matcher(decomposed).replaceAll("");//$NON-NLS-1$\n        */\n        if (InitStripAccents.java6NormalizeMethod == null || InitStripAccents.java6NormalizerFormNFD == null) {\n            throw new IllegalStateException("java.text.Normalizer is not available", InitStripAccents.java6Exception);\n        }\n        String result;\n        result = (String) InitStripAccents.java6NormalizeMethod.invoke(null, new Object[] {text, InitStripAccents.java6NormalizerFormNFD});\n        result = InitStripAccents.java6Pattern.matcher(result).replaceAll("");//$NON-NLS-1$\n        return result;\n    }\n\n    /**\n     * Use {@code sun.text.Normalizer#decompose(String, boolean, int)}\n     *\n     * @param text the text to be processed\n     * @return the processed string\n     * @throws IllegalAccessException may be thrown by a reflection call\n     * @throws InvocationTargetException if a reflection call throws an exception\n     * @throws IllegalStateException if the {@code Normalizer} class is not available\n     */\n    private static String removeAccentsSUN(CharSequence text)\n        throws IllegalAccessException, InvocationTargetException {\n        /*\n        String decomposed = sun.text.Normalizer.decompose(text, false, 0);\n        return sunPattern.matcher(decomposed).replaceAll("");//$NON-NLS-1$\n        */\n        if (InitStripAccents.sunDecomposeMethod == null) {\n            throw new IllegalStateException("sun.text.Normalizer is not available", InitStripAccents.sunException);\n        }\n        String result;\n        result = (String) InitStripAccents.sunDecomposeMethod.invoke(null, new Object[] {text, Boolean.FALSE, Integer.valueOf(0)});\n        result = InitStripAccents.sunPattern.matcher(result).replaceAll("");//$NON-NLS-1$\n        return result;\n    }\n\n    // IOD container for stripAccent() initialisation\n    private static class InitStripAccents {\n        // SUN internal, Java 1.3 -> Java 5\n        private static final Throwable sunException;\n        private static final Method  sunDecomposeMethod;\n        private static final Pattern sunPattern = Pattern.compile("\\\\p{InCombiningDiacriticalMarks}+");//$NON-NLS-1$\n        // Java 6+\n        private static final Throwable java6Exception;\n        private static final Method  java6NormalizeMethod;\n        private static final Object  java6NormalizerFormNFD;\n        private static final Pattern java6Pattern = sunPattern;\n    \n        static {\n            // Set up defaults for final static fields\n            Object _java6NormalizerFormNFD = null;\n            Method _java6NormalizeMethod = null;\n            Method _sunDecomposeMethod = null;\n            Throwable _java6Exception = null;\n            Throwable _sunException = null;\n            try {\n                // java.text.Normalizer.normalize(CharSequence, Normalizer.Form.NFD);\n                // Be careful not to get Java 1.3 java.text.Normalizer!\n                Class<?> normalizerFormClass = Thread.currentThread().getContextClassLoader()\n                    .loadClass("java.text.Normalizer$Form");//$NON-NLS-1$\n                _java6NormalizerFormNFD = normalizerFormClass.getField("NFD").get(null);//$NON-NLS-1$\n                Class<?> normalizerClass = Thread.currentThread().getContextClassLoader()\n                    .loadClass("java.text.Normalizer");//$NON-NLS-1$\n                _java6NormalizeMethod = normalizerClass.getMethod("normalize",//$NON-NLS-1$\n                        new Class[] {CharSequence.class, normalizerFormClass});//$NON-NLS-1$\n            } catch (Exception e1) {\n                // Only check for Sun method if Java 6 method is not available\n                _java6Exception = e1;\n                try {\n                    // sun.text.Normalizer.decompose(text, false, 0);\n                    Class<?> normalizerClass = Thread.currentThread().getContextClassLoader()\n                        .loadClass("sun.text.Normalizer");//$NON-NLS-1$\n                    _sunDecomposeMethod = normalizerClass.getMethod("decompose",//$NON-NLS-1$\n                            new Class[] {String.class, Boolean.TYPE, Integer.TYPE});//$NON-NLS-1$\n                } catch (Exception e2) {\n                    _sunException = e2;\n                }\n            }\n    \n            // Set up final static fields\n            java6Exception = _java6Exception;\n            java6NormalizerFormNFD = _java6NormalizerFormNFD;\n            java6NormalizeMethod = _java6NormalizeMethod;\n            sunException = _sunException;\n            sunDecomposeMethod = _sunDecomposeMethod;\n        }\n    }\n\n    // Equals\n    //-----------------------------------------------------------------------\n    /**\n     * <p>Compares two CharSequences, returning {@code true} if they represent\n     * equal sequences of characters.</p>\n     *\n     * <p>{@code null}s are handled without exceptions. Two {@code null}\n     * references are considered to be equal. The comparison is case sensitive.</p>\n     *\n     * <pre>\n     * StringUtils.equals(null, null)   = true\n     * StringUtils.equals(null, "abc")  = false\n     * StringUtils.equals("abc", null)  = false\n     * StringUtils.equals("abc", "abc") = true\n     * StringUtils.equals("abc", "ABC") = false\n     * </pre>\n     *\n     * @see java.lang.CharSequence#equals(Object)\n     * @param cs1  the first CharSequence, may be {@code null}\n     * @param cs2  the second CharSequence, may be {@code null}\n     * @return {@code true} if the CharSequences are equal (case-sensitive), or both {@code null}\n     * @since 3.0 Changed signature from equals(String, String) to equals(CharSequence, CharSequence)\n     */\n    public static boolean equals(CharSequence cs1, CharSequence cs2) {\n        if (cs1 == cs2) {\n            return true;\n        }\n        if (cs1 == null || cs2 == null) {\n            return false;\n        }', 'aftercode': '    }\n\n    /**\n     * <p>Compares two CharSequences, returning {@code true} if they represent\n     * equal sequences of characters, ignoring case.</p>\n     *\n     * <p>{@code null}s are handled without exceptions. Two {@code null}\n     * references are considered equal. Comparison is case insensitive.</p>\n     *\n     * <pre>\n     * StringUtils.equalsIgnoreCase(null, null)   = true\n     * StringUtils.equalsIgnoreCase(null, "abc")  = false\n     * StringUtils.equalsIgnoreCase("abc", null)  = false\n     * StringUtils.equalsIgnoreCase("abc", "abc") = true\n     * StringUtils.equalsIgnoreCase("abc", "ABC") = true\n     * </pre>\n     *\n     * @param str1  the first CharSequence, may be null\n     * @param str2  the second CharSequence, may be null\n     * @return {@code true} if the CharSequence are equal, case insensitive, or\n     *  both {@code null}\n     * @since 3.0 Changed signature from equalsIgnoreCase(String, String) to equalsIgnoreCase(CharSequence, CharSequence)\n     */\n    public static boolean equalsIgnoreCase(CharSequence str1, CharSequence str2) {\n        if (str1 == null || str2 == null) {\n            return str1 == str2;\n        } else {\n            return CharSequenceUtils.regionMatches(str1, true, 0, str2, 0, Math.max(str1.length(), str2.length()));\n        }\n    }\n\n    // IndexOf\n    //-----------------------------------------------------------------------\n    /**\n     * <p>Finds the first index within a CharSequence, handling {@code null}.\n     * This method uses {@link String#indexOf(int, int)} if possible.</p>\n     *\n     * <p>A {@code null} or empty ("") CharSequence will return {@code INDEX_NOT_FOUND (-1)}.</p>\n     *\n     * <pre>\n     * StringUtils.indexOf(null, *)         = -1\n     * StringUtils.indexOf("", *)           = -1\n     * StringUtils.indexOf("aabaabaa", \'a\') = 0\n     * StringUtils.indexOf("aabaabaa", \'b\') = 2\n     * </pre>\n     *\n     * @param seq  the CharSequence to check, may be null\n     * @param searchChar  the character to find\n     * @return the first index of the search character,\n     *  -1 if no match or {@code null} string input\n     * @since 2.0\n     * @since 3.0 Changed signature from indexOf(String, int) to indexOf(CharSequence, int)\n     */\n    public static int indexOf(CharSequence seq, int searchChar) {\n        if (isEmpty(seq)) {\n            return INDEX_NOT_FOUND;\n        }\n        return CharSequenceUtils.indexOf(seq, searchChar, 0);\n    }\n\n    /**\n     * <p>Finds the first index within a CharSequence from a start position,\n     * handling {@code null}.\n     * This method uses {@link String#indexOf(int, int)} if possible.</p>\n     *\n     * <p>A {@code null} or empty ("") CharSequence will return {@code (INDEX_NOT_FOUND) -1}.\n     * A negative start position is treated as zero.\n     * A start position greater than the string length returns {@code -1}.</p>\n     *\n     * <pre>\n     * StringUtils.indexOf(null, *, *)          = -1\n     * StringUtils.indexOf("", *, *)            = -1\n     * StringUtils.indexOf("aabaabaa", \'b\', 0)  = 2\n     * StringUtils.indexOf("aabaabaa", \'b\', 3)  = 5\n     * StringUtils.indexOf("aabaabaa", \'b\', 9)  = -1\n     * StringUtils.indexOf("aabaabaa", \'b\', -1) = 2\n     * </pre>\n     *\n     * @param seq  the CharSequence to check, may be null\n     * @param searchChar  the character to find\n     * @param startPos  the start position, negative treated as zero\n     * @return the first index of the search character,\n     *  -1 if no match or {@code null} string input\n     * @since 2.0\n     * @since 3.0 Changed signature from indexOf(String, int, int) to indexOf(CharSequence, int, int)\n     */\n    public static int indexOf(CharSequence seq, int searchChar, int startPos) {\n        if (isEmpty(seq)) {\n            return INDEX_NOT_FOUND;\n        }\n        return CharSequenceUtils.indexOf(seq, searchChar, startPos);\n    }\n\n    /**\n     * <p>Finds the first index within a CharSequence, handling {@code null}.\n     * This method uses {@link String#indexOf(String, int)} if possible.</p>\n     *\n     * <p>A {@code null} CharSequence will return {@code -1}.</p>\n     *\n     * <pre>\n     * StringUtils.indexOf(null, *)          = -1\n     * StringUtils.indexOf(*, null)          = -1\n     * StringUtils.indexOf("", "")           = 0\n     * StringUtils.indexOf("", *)            = -1 (except when * = "")\n     * StringUtils.indexOf("aabaabaa", "a")  = 0\n     * StringUtils.indexOf("aabaabaa", "b")  = 2\n     * StringUtils.indexOf("aabaabaa", "ab") = 1\n     * StringUtils.indexOf("aabaabaa", "")   = 0\n     * </pre>\n     *\n     * @param seq  the CharSequence to check, may be null\n     * @param searchSeq  the CharSequence to find, may be null\n     * @return the first index of the search CharSequence,\n     *  -1 if no match or {@code null} string input\n     * @since 2.0\n     * @since 3.0 Changed signature from indexOf(String, String) to indexOf(CharSequence, CharSequence)\n     */\n    public static int indexOf(CharSequence seq, CharSequence searchSeq) {\n        if (seq == null || searchSeq == null) {\n            return INDEX_NOT_FOUND;\n        }\n        return CharSequenceUtils.indexOf(seq, searchSeq, 0);\n    }\n\n    /**\n     * <p>Finds the first index within a CharSequence, handling {@code null}.\n     * This method uses {@link String#indexOf(String, int)} if possible.</p>\n     *\n     * <p>A {@code null} CharSequence will return {@code -1}.\n     * A negative start position is treated as zero.\n     * An empty ("") search CharSequence always matches.\n     * A start position greater than the string length only matches\n     * an empty search CharSequence.</p>\n     *\n     * <pre>\n     * StringUtils.indexOf(null, *, *)          = -1\n     * StringUtils.indexOf(*, null, *)          = -1\n     * StringUtils.indexOf("", "", 0)           = 0\n     * StringUtils.indexOf("", *, 0)            = -1 (except when * = "")\n     * StringUtils.indexOf("aabaabaa", "a", 0)  = 0\n     * StringUtils.indexOf("aabaabaa", "b", 0)  = 2\n     * StringUtils.indexOf("aabaabaa", "ab", 0) = 1\n     * StringUtils.indexOf("aabaabaa", "b", 3)  = 5\n     * StringUtils.indexOf("aabaabaa", "b", 9)  = -1\n     * StringUtils.indexOf("aabaabaa", "b", -1) = 2\n     * StringUtils.indexOf("aabaabaa", "", 2)   = 2\n     * StringUtils.indexOf("abc", "", 9)        = 3\n     * </pre>\n     *\n     * @param seq  the CharSequence to check, may be null\n     * @param searchSeq  the CharSequence to find, may be null\n     * @param startPos  the start position, negative treated as zero\n     * @return the first index of the search CharSequence,\n     *  -1 if no match or {@code null} string input\n     * @since 2.0\n     * @since 3.0 Changed signature from indexOf(String, String, int) to indexOf(CharSequence, CharSequence, int)\n     */\n    public static int indexOf(CharSequence seq, CharSequence searchSeq, int startPos) {\n        if (seq == null || searchSeq == null) {\n            return INDEX_NOT_FOUND;\n        }\n        return CharSequenceUtils.indexOf(seq, searchSeq, startPos);\n    }\n\n    /**\n     * <p>Finds the n-th index within a CharSequence, handling {@code null}.\n     * This method uses {@link String#indexOf(String)} if possible.</p>\n     *\n     * <p>A {@code null} CharSequence will return {@code -1}.</p>\n     *\n     * <pre>\n     * StringUtils.ordinalIndexOf(null, *, *)          = -1\n     * StringUtils.ordinalIndexOf(*, null, *)          = -1\n     * StringUtils.ordinalIndexOf("", "", *)           = 0\n     * StringUtils.ordinalIndexOf("aabaabaa", "a", 1)  = 0\n     * StringUtils.ordinalIndexOf("aabaabaa", "a", 2)  = 1\n     * StringUtils.ordinalIndexOf("aabaabaa", "b", 1)  = 2\n     * StringUtils.ordinalIndexOf("aabaabaa", "b", 2)  = 5\n     * StringUtils.ordinalIndexOf("aabaabaa", "ab", 1) = 1\n     * StringUtils.ordinalIndexOf("aabaabaa", "ab", 2) = 4\n     * StringUtils.ordinalIndexOf("aabaabaa", "", 1)   = 0\n     * StringUtils.ordinalIndexOf("aabaabaa", "", 2)   = 0\n     * </pre>\n     *\n     * <p>Note that \'head(CharSequence str, int n)\' may be implemented as: </p>\n     *\n     * <pre>\n     *   str.substring(0, lastOrdinalIndexOf(str, "\\n", n))\n     * </pre>\n     *\n     * @param str  the CharSequence to check, may be null\n     * @param searchStr  the CharSequence to find, may be null\n     * @param ordinal  the n-th {@code searchStr} to find\n     * @return the n-th index of the search CharSequence,\n     *  {@code -1} ({@code INDEX_NOT_FOUND}) if no match or {@code null} string input\n     * @since 2.1\n     * @since 3.0 Changed signature from ordinalIndexOf(String, String, int) to ordinalIndexOf(CharSequence, CharSequence, int)\n     */\n    public static int ordinalIndexOf(CharSequence str, CharSequence searchStr, int ordinal) {\n        return ordinalIndexOf(str, searchStr, ordinal, false);\n    }\n\n    /**\n     * <p>Finds the n-th index within a String, handling {@code null}.\n     * This method uses {@link String#indexOf(String)} if possible.</p>\n     *\n     * <p>A {@code null} CharSequence will return {@code -1}.</p>\n     *\n     * @param str  the CharSequence to check, may be null\n     * @param searchStr  the CharSequence to find, may be null\n     * @param ordinal  the n-th {@code searchStr} to find\n     * @param lastIndex true if lastOrdinalIndexOf() otherwise false if ordinalIndexOf()\n     * @return the n-th index of the search CharSequence,\n     *  {@code -1} ({@code INDEX_NOT_FOUND}) if no match or {@code null} string input\n     */\n    // Shared code between ordinalIndexOf(String,String,int) and lastOrdinalIndexOf(String,String,int)\n    private static int ordinalIndexOf(CharSequence str, CharSequence searchStr, int ordinal, boolean lastIndex) {\n        if (str == null || searchStr == null || ordinal <= 0) {\n            return INDEX_NOT_FOUND;\n        }\n        if (searchStr.length() == 0) {\n            return lastIndex ? str.length() : 0;\n        }\n        int found = 0;\n        int index = lastIndex ? str.length() : INDEX_NOT_FOUND;\n        do {\n            if (lastIndex) {\n                index = CharSequenceUtils.lastIndexOf(str, searchStr, index - 1);\n            } else {\n                index = CharSequenceUtils.indexOf(str, searchStr, index + 1);\n            }\n            if (index < 0) {\n                return index;\n            }\n            found++;\n        } while (found < ordinal);\n        return index;\n    }\n\n    /**\n     * <p>Case in-sensitive find of the first index within a CharSequence.</p>\n     *\n     * <p>A {@code null} CharSequence will return {@code -1}.\n     * A negative start position is treated as zero.\n     * An empty ("") search CharSequence always matches.\n     * A start position greater than the string length only matches\n     * an empty search CharSequence.</p>\n     *\n     * <pre>\n     * StringUtils.indexOfIgnoreCase(null, *)          = -1\n     * StringUtils.indexOfIgnoreCase(*, null)          = -1\n     * StringUtils.indexOfIgnoreCase("", "")           = 0\n     * StringUtils.indexOfIgnoreCase("aabaabaa", "a")  = 0\n     * StringUtils.indexOfIgnoreCase("aabaabaa", "b")  = 2\n     * StringUtils.indexOfIgnoreCase("aabaabaa", "ab") = 1\n     * </pre>\n     *\n     * @param str  the CharSequence to check, may be null\n     * @param searchStr  the CharSequence to find, may be null\n     * @return the first index of the search CharSequence,\n     *  -1 if no match or {@code null} string input\n     * @since 2.5\n     * @since 3.0 Changed signature from indexOfIgnoreCase(String, String) to indexOfIgnoreCase(CharSequence, CharSequence)\n     */\n    public static int indexOfIgnoreCase(CharSequence str, CharSequence searchStr) {\n        return indexOfIgnoreCase(str, searchStr, 0);\n    }\n\n    /**\n     * <p>Case in-sensitive find of the first index within a CharSequence\n     * from the specified position.</p>\n     *\n     * <p>A {@code null} CharSequence will return {@code -1}.\n     * A negative start position is treated as zero.\n     * An empty ("") search CharSequence always matches.\n     * A start position greater than the string length only matches\n     * an empty search CharSequence.</p>\n     *\n     * <pre>\n     * StringUtils.indexOfIgnoreCase(null, *, *)          = -1\n     * StringUtils.indexOfIgnoreCase(*, null, *)          = -1\n     * StringUtils.indexOfIgnoreCase("", "", 0)           = 0\n     * StringUtils.indexOfIgnoreCase("aabaabaa", "A", 0)  = 0\n     * StringUtils.indexOfIgnoreCase("aabaabaa", "B", 0)  = 2\n     * StringUtils.indexOfIgnoreCase("aabaabaa", "AB", 0) = 1\n     * StringUtils.indexOfIgnoreCase("aabaabaa", "B", 3)  = 5\n     * StringUtils.indexOfIgnoreCase("aabaabaa", "B", 9)  = -1\n     * StringUtils.indexOfIgnoreCase("aabaabaa", "B", -1) = 2\n     * StringUtils.indexOfIgnoreCase("aabaabaa", "", 2)   = 2\n     * StringUtils.indexOfIgnoreCase("abc", "", 9)        = 3\n     * </pre>\n     *\n     * @param str  the CharSequence to check, may be null\n     * @param searchStr  the CharSequence to find, may be null\n     * @param startPos  the start position, negative treated as zero\n     * @return the first index of the search CharSequence,\n     *  -1 if no match or {@code null} string input\n     * @since 2.5\n     * @since 3.0 Changed signature from indexOfIgnoreCase(String, String, int) to indexOfIgnoreCase(CharSequence, CharSequence, int)\n     */\n    public static int indexOfIgnoreCase(CharSequence str, CharSequence searchStr, int startPos) {\n        if (str == null || searchStr == null) {\n            return INDEX_NOT_FOUND;\n        }\n        if (startPos < 0) {\n            startPos = 0;\n        }\n        int endLimit = str.length() - searchStr.length() + 1;\n        if (startPos > endLimit) {\n            return INDEX_NOT_FOUND;\n        }\n        if (searchStr.length() == 0) {\n            return startPos;\n        }\n        for (int i = startPos; i < endLimit; i++) {\n            if (CharSequenceUtils.regionMatches(str, true, i, searchStr, 0, searchStr.length())) {\n                return i;\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }\n\n    // LastIndexOf\n    //-----------------------------------------------------------------------\n    /**\n     * <p>Finds the last index within a CharSequence, handling {@code null}.\n     * This method uses {@link String#lastIndexOf(int)} if possible.</p>\n     *\n     * <p>A {@code null} or empty ("") CharSequence will return {@code -1}.</p>\n     *\n     * <pre>\n     * StringUtils.lastIndexOf(null, *)         = -1\n     * StringUtils.lastIndexOf("", *)           = -1\n     * StringUtils.lastIndexOf("aabaabaa", \'a\') = 7\n     * StringUtils.lastIndexOf("aabaabaa", \'b\') = 5\n     * </pre>\n     *\n     * @param seq  the CharSequence to check, may be null\n     * @param searchChar  the character to find\n     * @return the last index of the search character,\n     *  -1 if no match or {@code null} string input\n     * @since 2.0\n     * @since 3.0 Changed signature from lastIndexOf(String, int) to lastIndexOf(CharSequence, int)\n     */\n    public static int lastIndexOf(CharSequence seq, int searchChar) {\n        if (isEmpty(seq)) {\n            return INDEX_NOT_FOUND;\n        }\n        return CharSequenceUtils.lastIndexOf(seq, searchChar, seq.length());\n    }\n\n    /**\n     * <p>Finds the last index within a CharSequence from a start position,\n     * handling {@code null}.\n     * This method uses {@link String#lastIndexOf(int, int)} if possible.</p>\n     *\n     * <p>A {@code null} or empty ("") CharSequence will return {@code -1}.\n     * A negative start position returns {@code -1}.\n     * A start position greater than the string length searches the whole string.</p>\n     *\n     * <pre>\n     * StringUtils.lastIndexOf(null, *, *)          = -1\n     * StringUtils.lastIndexOf("", *,  *)           = -1\n     * StringUtils.lastIndexOf("aabaabaa", \'b\', 8)  = 5\n     * StringUtils.lastIndexOf("aabaabaa", \'b\', 4)  = 2\n     * StringUtils.lastIndexOf("aabaabaa", \'b\', 0)  = -1\n     * StringUtils.lastIndexOf("aabaabaa", \'b\', 9)  = 5\n     * StringUtils.lastIndexOf("aabaabaa", \'b\', -1) = -1\n     * StringUtils.lastIndexOf("aabaabaa", \'a\', 0)  = 0\n     * </pre>\n     *\n     * @param seq  the CharSequence to check, may be null\n     * @param searchChar  the character to find\n     * @param startPos  the start position\n     * @return the last index of the search character,\n     *  -1 if no match or {@code null} string input\n     * @since 2.0\n     * @since 3.0 Changed signature from lastIndexOf(String, int, int) to lastIndexOf(CharSequence, int, int)\n     */\n    public static int lastIndexOf(CharSequence seq, int searchChar, int startPos) {\n        if (isEmpty(seq)) {\n            return INDEX_NOT_FOUND;\n        }\n        return CharSequenceUtils.lastIndexOf(seq, searchChar, startPos);\n    }\n\n    /**\n     * <p>Finds the last index within a CharSequence, handling {@code null}.\n     * This method uses {@link String#lastIndexOf(String)} if possible.</p>\n     *\n     * <p>A {@code null} CharSequence will return {@code -1}.</p>\n     *\n     * <pre>\n     * StringUtils.lastIndexOf(null, *)          = -1\n     * StringUtils.lastIndexOf(*, null)          = -1\n     * StringUtils.lastIndexOf("", "")           = 0\n     * StringUtils.lastIndexOf("aabaabaa", "a")  = 7\n     * StringUtils.lastIndexOf("aabaabaa", "b")  = 5\n     * StringUtils.lastIndexOf("aabaabaa", "ab") = 4\n     * StringUtils.lastIndexOf("aabaabaa", "")   = 8\n     * </pre>\n     *\n     * @param seq  the CharSequence to check, may be null\n     * @param searchSeq  the CharSequence to find, may be null\n     * @return the last index of the search String,\n     *  -1 if no match or {@code null} string input\n     * @since 2.0\n     * @since 3.0 Changed signature from lastIndexOf(String, String) to lastIndexOf(CharSequence, CharSequence)\n     */\n    public static int lastIndexOf(CharSequence seq, CharSequence searchSeq) {\n        if (seq == null || searchSeq == null) {\n            return INDEX_NOT_FOUND;\n        }\n        return CharSequenceUtils.lastIndexOf(seq, searchSeq, seq.length());\n    }\n\n    /**\n     * <p>Finds the n-th last index within a String, handling {@code null}.\n     * This method uses {@link String#lastIndexOf(String)}.</p>\n     *\n     * <p>A {@code null} String will return {@code -1}.</p>\n     *\n     * <pre>\n     * StringUtils.lastOrdinalIndexOf(null, *, *)          = -1\n     * StringUtils.lastOrdinalIndexOf(*, null, *)          = -1\n     * StringUtils.lastOrdinalIndexOf("", "", *)           = 0\n     * StringUtils.lastOrdinalIndexOf("aabaabaa", "a", 1)  = 7\n     * StringUtils.lastOrdinalIndexOf("aabaabaa", "a", 2)  = 6\n     * StringUtils.lastOrdinalIndexOf("aabaabaa", "b", 1)  = 5\n     * StringUtils.lastOrdinalIndexOf("aabaabaa", "b", 2)  = 2\n     * StringUtils.lastOrdinalIndexOf("aabaabaa", "ab", 1) = 4\n     * StringUtils.lastOrdinalIndexOf("aabaabaa", "ab", 2) = 1\n     * StringUtils.lastOrdinalIndexOf("aabaabaa", "", 1)   = 8\n     * StringUtils.lastOrdinalIndexOf("aabaabaa", "", 2)   = 8\n     * </pre>\n     *\n     * <p>Note that \'tail(CharSequence str, int n)\' may be implemented as: </p>\n     *\n     * <pre>\n     *   str.substring(lastOrdinalIndexOf(str, "\\n", n) + 1)\n     * </pre>\n     *\n     * @param str  the CharSequence to check, may be null\n     * @param searchStr  the CharSequence to find, may be null\n     * @param ordinal  the n-th last {@code searchStr} to find\n     * @return the n-th last index of the search CharSequence,\n     *  {@code -1} ({@code INDEX_NOT_FOUND}) if no match or {@code null} string input\n     * @since 2.5\n     * @since 3.0 Changed signature from lastOrdinalIndexOf(String, String, int) to lastOrdinalIndexOf(CharSequence, CharSequence, int)\n     */\n    public static int lastOrdinalIndexOf(CharSequence str, CharSequence searchStr, int ordinal) {\n        return ordinalIndexOf(str, searchStr, ordinal, true);\n    }\n\n    /**\n     * <p>Finds the first index within a CharSequence, handling {@code null}.\n     * This method uses {@link String#lastIndexOf(String, int)} if possible.</p>\n     *\n     * <p>A {@code null} CharSequence will return {@code -1}.\n     * A negative start position returns {@code -1}.\n     * An empty ("") search CharSequence always matches unless the start position is negative.\n     * A start position greater than the string length searches the whole string.</p>\n     *\n     * <pre>\n     * StringUtils.lastIndexOf(null, *, *)          = -1\n     * StringUtils.lastIndexOf(*, null, *)          = -1\n     * StringUtils.lastIndexOf("aabaabaa", "a", 8)  = 7\n     * StringUtils.lastIndexOf("aabaabaa", "b", 8)  = 5\n     * StringUtils.lastIndexOf("aabaabaa", "ab", 8) = 4\n     * StringUtils.lastIndexOf("aabaabaa", "b", 9)  = 5\n     * StringUtils.lastIndexOf("aabaabaa", "b", -1) = -1\n     * StringUtils.lastIndexOf("aabaabaa", "a", 0)  = 0\n     * StringUtils.lastIndexOf("aabaabaa", "b", 0)  = -1\n     * </pre>\n     *\n     * @param seq  the CharSequence to check, may be null\n     * @param searchSeq  the CharSequence to find, may be null\n     * @param startPos  the start position, negative treated as zero\n     * @return the first index of the search CharSequence,\n     *  -1 if no match or {@code null} string input\n     * @since 2.0\n     * @since 3.0 Changed signature from lastIndexOf(String, String, int) to lastIndexOf(CharSequence, CharSequence, int)\n     */\n    public static int lastIndexOf(CharSequence seq, CharSequence searchSeq, int startPos) {\n        if (seq == null || searchSeq == null) {\n            return INDEX_NOT_FOUND;\n        }\n        return CharSequenceUtils.lastIndexOf(seq, searchSeq, startPos);\n    }\n\n    /**\n     * <p>Case in-sensitive find of the last index within a CharSequence.</p>\n     *\n     * <p>A {@code null} CharSequence will return {@code -1}.\n     * A negative start position returns {@code -1}.\n     * An empty ("") search CharSequence always matches unless the start position is negative.\n     * A start position greater than the string length searches the whole string.</p>\n     *\n     * <pre>\n     * StringUtils.lastIndexOfIgnoreCase(null, *)          = -1\n     * StringUtils.lastIndexOfIgnoreCase(*, null)          = -1\n     * StringUtils.lastIndexOfIgnoreCase("aabaabaa", "A")  = 7\n     * StringUtils.lastIndexOfIgnoreCase("aabaabaa", "B")  = 5\n     * StringUtils.lastIndexOfIgnoreCase("aabaabaa", "AB") = 4\n     * </pre>\n     *\n     * @param str  the CharSequence to check, may be null\n     * @param searchStr  the CharSequence to find, may be null\n     * @return the first index of the search CharSequence,\n     *  -1 if no match or {@code null} string input\n     * @since 2.5\n     * @since 3.0 Changed signature from lastIndexOfIgnoreCase(String, String) to lastIndexOfIgnoreCase(CharSequence, CharSequence)\n     */\n    public static int lastIndexOfIgnoreCase(CharSequence str, CharSequence searchStr) {\n        if (str == null || searchStr == null) {\n            return INDEX_NOT_FOUND;\n        }\n        return lastIndexOfIgnoreCase(str, searchStr, str.length());\n    }\n\n    /**\n     * <p>Case in-sensitive find of the last index within a CharSequence\n     * from the specified position.</p>\n     *\n     * <p>A {@code null} CharSequence will return {@code -1}.\n     * A negative start position returns {@code -1}.\n     * An empty ("") search CharSequence always matches unless the start position is negative.\n     * A start position greater than the string length searches the whole string.</p>\n     *\n     * <pre>\n     * StringUtils.lastIndexOfIgnoreCase(null, *, *)          = -1\n     * StringUtils.lastIndexOfIgnoreCase(*, null, *)          = -1\n     * StringUtils.lastIndexOfIgnoreCase("aabaabaa", "A", 8)  = 7\n     * StringUtils.lastIndexOfIgnoreCase("aabaabaa", "B", 8)  = 5\n     * StringUtils.lastIndexOfIgnoreCase("aabaabaa", "AB", 8) = 4\n     * StringUtils.lastIndexOfIgnoreCase("aabaabaa", "B", 9)  = 5\n     * StringUtils.lastIndexOfIgnoreCase("aabaabaa", "B", -1) = -1\n     * StringUtils.lastIndexOfIgnoreCase("aabaabaa", "A", 0)  = 0\n     * StringUtils.lastIndexOfIgnoreCase("aabaabaa", "B", 0)  = -1\n     * </pre>\n     *\n     * @param str  the CharSequence to check, may be null\n     * @param searchStr  the CharSequence to find, may be null\n     * @param startPos  the start position\n     * @return the first index of the search CharSequence,\n     *  -1 if no match or {@code null} input\n     * @since 2.5\n     * @since 3.0 Changed signature from lastIndexOfIgnoreCase(String, String, int) to lastIndexOfIgnoreCase(CharSequence, CharSequence, int)\n     */\n    public static int lastIndexOfIgnoreCase(CharSequence str, CharSequence searchStr, int startPos) {\n        if (str == null || searchStr == null) {\n            return INDEX_NOT_FOUND;\n        }\n        if (startPos > str.length() - searchStr.length()) {\n            startPos = str.length() - searchStr.length();\n        }\n        if (startPos < 0) {\n            return INDEX_NOT_FOUND;\n        }\n        if (searchStr.length() == 0) {\n            return startPos;\n        }\n\n        for (int i = startPos; i >= 0; i--) {\n            if (CharSequenceUtils.regionMatches(str, true, i, searchStr, 0, searchStr.length())) {\n                return i;\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }\n\n    // Contains\n    //-----------------------------------------------------------------------\n    /**\n     * <p>Checks if CharSequence contains a search character, handling {@code null}.\n     * This method uses {@link String#indexOf(int)} if possible.</p>\n     *\n     * <p>A {@code null} or empty ("") CharSequence will return {@code false}.</p>\n     *\n     * <pre>\n     * StringUtils.contains(null, *)    = false\n     * StringUtils.contains("", *)      = false\n     * StringUtils.contains("abc", \'a\') = true\n     * StringUtils.contains("abc", \'z\') = false\n     * </pre>\n     *\n     * @param seq  the CharSequence to check, may be null\n     * @param searchChar  the character to find\n     * @return true if the CharSequence contains the search character,\n     *  false if not or {@code null} string input\n     * @since 2.0\n     * @since 3.0 Changed signature from contains(String, int) to contains(CharSequence, int)\n     */\n    public static boolean contains(CharSequence seq, int searchChar) {\n        if (isEmpty(seq)) {\n            return false;\n        }\n        return CharSequenceUtils.indexOf(seq, searchChar, 0) >= 0;\n    }\n\n    /**\n     * <p>Checks if CharSequence contains a search CharSequence, handling {@code null}.\n     * This method uses {@link String#indexOf(String)} if possible.</p>\n     *\n     * <p>A {@code null} CharSequence will return {@code false}.</p>\n     *\n     * <pre>\n     * StringUtils.contains(null, *)     = false\n     * StringUtils.contains(*, null)     = false\n     * StringUtils.contains("", "")      = true\n     * StringUtils.contains("abc", "")   = true\n     * StringUtils.contains("abc", "a")  = true\n     * StringUtils.contains("abc", "z")  = false\n     * </pre>\n     *\n     * @param seq  the CharSequence to check, may be null\n     * @param searchSeq  the CharSequence to find, may be null\n     * @return true if the CharSequence contains the search CharSequence,\n     *  false if not or {@code null} string input\n     * @since 2.0\n     * @since 3.0 Changed signature from contains(String, String) to contains(CharSequence, CharSequence)\n     */\n    public static boolean contains(CharSequence seq, CharSequence searchSeq) {\n        if (seq == null || searchSeq == null) {\n            return false;\n        }\n        return CharSequenceUtils.indexOf(seq, searchSeq, 0) >= 0;\n    }\n\n    /**\n     * <p>Checks if CharSequence contains a search CharSequence irrespective of case,\n     * handling {@code null}. Case-insensitivity is defined as by\n     * {@link String#equalsIgnoreCase(String)}.\n     *\n     * <p>A {@code null} CharSequence will return {@code false}.</p>\n     *\n     * <pre>\n     * StringUtils.contains(null, *) = false\n     * StringUtils.contains(*, null) = false\n     * StringUtils.contains("", "") = true\n     * StringUtils.contains("abc", "") = true\n     * StringUtils.contains("abc", "a") = true\n     * StringUtils.contains("abc", "z") = false\n     * StringUtils.contains("abc", "A") = true\n     * StringUtils.contains("abc", "Z") = false\n     * </pre>\n     *\n     * @param str  the CharSequence to check, may be null\n     * @param searchStr  the CharSequence to find, may be null\n     * @return true if the CharSequence contains the search CharSequence irrespective of\n     * case or false if not or {@code null} string input\n     * @since 3.0 Changed signature from containsIgnoreCase(String, String) to containsIgnoreCase(CharSequence, CharSequence)\n     */\n    public static boolean containsIgnoreCase(CharSequence str, CharSequence searchStr) {\n        if (str == null || searchStr == null) {\n            return false;\n        }\n        int len = searchStr.length();\n        int max = str.length() - len;\n        for (int i = 0; i <= max; i++) {\n            if (CharSequenceUtils.regionMatches(str, true, i, searchStr, 0, len)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Check whether the given CharSequence contains any whitespace characters.\n     * @param seq the CharSequence to check (may be {@code null})\n     * @return {@code true} if the CharSequence is not empty and\n     * contains at least 1 whitespace character\n     * @see java.lang.Character#isWhitespace\n     * @since 3.0\n     */\n    // From org.springframework.util.StringUtils, under Apache License 2.0\n    public static boolean containsWhitespace(CharSequence seq) {\n        if (isEmpty(seq)) {\n            return false;\n        }\n        int strLen = seq.length();\n        for (int i = 0; i < strLen; i++) {\n            if (Character.isWhitespace(seq.charAt(i))) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    // IndexOfAny chars\n    //-----------------------------------------------------------------------\n    /**\n     * <p>Search a CharSequence to find the first index of any\n     * character in the given set of characters.</p>\n     *\n     * <p>A {@code null} String will return {@code -1}.\n     * A {@code null} or zero length search array will return {@code -1}.</p>\n     *\n     * <pre>\n     * StringUtils.indexOfAny(null, *)                = -1\n     * StringUtils.indexOfAny("", *)                  = -1\n     * StringUtils.indexOfAny(*, null)                = -1\n     * StringUtils.indexOfAny(*, [])                  = -1\n     * StringUtils.indexOfAny("zzabyycdxx",[\'z\',\'a\']) = 0\n     * StringUtils.indexOfAny("zzabyycdxx",[\'b\',\'y\']) = 3\n     * StringUtils.indexOfAny("aba", [\'z\'])           = -1\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @param searchChars  the chars to search for, may be null\n     * @return the index of any of the chars, -1 if no match or null input\n     * @since 2.0\n     * @since 3.0 Changed signature from indexOfAny(String, char[]) to indexOfAny(CharSequence, char...)\n     */\n    public static int indexOfAny(CharSequence cs, char... searchChars) {\n        if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n            return INDEX_NOT_FOUND;\n        }\n        int csLen = cs.length();\n        int csLast = csLen - 1;\n        int searchLen = searchChars.length;\n        int searchLast = searchLen - 1;\n        for (int i = 0; i < csLen; i++) {\n            char ch = cs.charAt(i);\n            for (int j = 0; j < searchLen; j++) {\n                if (searchChars[j] == ch) {\n                    if (i < csLast && j < searchLast && Character.isHighSurrogate(ch)) {\n                        // ch is a supplementary character\n                        if (searchChars[j + 1] == cs.charAt(i + 1)) {\n                            return i;\n                        }\n                    } else {\n                        return i;\n                    }\n                }\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }\n\n    /**\n     * <p>Search a CharSequence to find the first index of any\n     * character in the given set of characters.</p>\n     *\n     * <p>A {@code null} String will return {@code -1}.\n     * A {@code null} search string will return {@code -1}.</p>\n     *\n     * <pre>\n     * StringUtils.indexOfAny(null, *)            = -1\n     * StringUtils.indexOfAny("", *)              = -1\n     * StringUtils.indexOfAny(*, null)            = -1\n     * StringUtils.indexOfAny(*, "")              = -1\n     * StringUtils.indexOfAny("zzabyycdxx", "za") = 0\n     * StringUtils.indexOfAny("zzabyycdxx", "by") = 3\n     * StringUtils.indexOfAny("aba","z")          = -1\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @param searchChars  the chars to search for, may be null\n     * @return the index of any of the chars, -1 if no match or null input\n     * @since 2.0\n     * @since 3.0 Changed signature from indexOfAny(String, String) to indexOfAny(CharSequence, String)\n     */\n    public static int indexOfAny(CharSequence cs, String searchChars) {\n        if (isEmpty(cs) || isEmpty(searchChars)) {\n            return INDEX_NOT_FOUND;\n        }\n        return indexOfAny(cs, searchChars.toCharArray());\n    }\n\n    // ContainsAny\n    //-----------------------------------------------------------------------\n    /**\n     * <p>Checks if the CharSequence contains any character in the given\n     * set of characters.</p>\n     *\n     * <p>A {@code null} CharSequence will return {@code false}.\n     * A {@code null} or zero length search array will return {@code false}.</p>\n     *\n     * <pre>\n     * StringUtils.containsAny(null, *)                = false\n     * StringUtils.containsAny("", *)                  = false\n     * StringUtils.containsAny(*, null)                = false\n     * StringUtils.containsAny(*, [])                  = false\n     * StringUtils.containsAny("zzabyycdxx",[\'z\',\'a\']) = true\n     * StringUtils.containsAny("zzabyycdxx",[\'b\',\'y\']) = true\n     * StringUtils.containsAny("aba", [\'z\'])           = false\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @param searchChars  the chars to search for, may be null\n     * @return the {@code true} if any of the chars are found,\n     * {@code false} if no match or null input\n     * @since 2.4\n     * @since 3.0 Changed signature from containsAny(String, char[]) to containsAny(CharSequence, char...)\n     */\n    public static boolean containsAny(CharSequence cs, char... searchChars) {\n        if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n            return false;\n        }\n        int csLength = cs.length();\n        int searchLength = searchChars.length;\n        int csLast = csLength - 1;\n        int searchLast = searchLength - 1;\n        for (int i = 0; i < csLength; i++) {\n            char ch = cs.charAt(i);\n            for (int j = 0; j < searchLength; j++) {\n                if (searchChars[j] == ch) {\n                    if (Character.isHighSurrogate(ch)) {\n                        if (j == searchLast) {\n                            // missing low surrogate, fine, like String.indexOf(String)\n                            return true;\n                        }\n                        if (i < csLast && searchChars[j + 1] == cs.charAt(i + 1)) {\n                            return true;\n                        }\n                    } else {\n                        // ch is in the Basic Multilingual Plane\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n\n    /**\n     * <p>\n     * Checks if the CharSequence contains any character in the given set of characters.\n     * </p>\n     *\n     * <p>\n     * A {@code null} CharSequence will return {@code false}. A {@code null} search CharSequence will return\n     * {@code false}.\n     * </p>\n     *\n     * <pre>\n     * StringUtils.containsAny(null, *)            = false\n     * StringUtils.containsAny("", *)              = false\n     * StringUtils.containsAny(*, null)            = false\n     * StringUtils.containsAny(*, "")              = false\n     * StringUtils.containsAny("zzabyycdxx", "za") = true\n     * StringUtils.containsAny("zzabyycdxx", "by") = true\n     * StringUtils.containsAny("aba","z")          = false\n     * </pre>\n     *\n     * @param cs\n     *            the CharSequence to check, may be null\n     * @param searchChars\n     *            the chars to search for, may be null\n     * @return the {@code true} if any of the chars are found, {@code false} if no match or null input\n     * @since 2.4\n     * @since 3.0 Changed signature from containsAny(String, String) to containsAny(CharSequence, CharSequence)\n     */\n    public static boolean containsAny(CharSequence cs, CharSequence searchChars) {\n        if (searchChars == null) {\n            return false;\n        }\n        return containsAny(cs, CharSequenceUtils.toCharArray(searchChars));\n    }\n\n    // IndexOfAnyBut chars\n    //-----------------------------------------------------------------------\n    /**\n     * <p>Searches a CharSequence to find the first index of any\n     * character not in the given set of characters.</p>\n     *\n     * <p>A {@code null} CharSequence will return {@code -1}.\n     * A {@code null} or zero length search array will return {@code -1}.</p>\n     *\n     * <pre>\n     * StringUtils.indexOfAnyBut(null, *)                              = -1\n     * StringUtils.indexOfAnyBut("", *)                                = -1\n     * StringUtils.indexOfAnyBut(*, null)                              = -1\n     * StringUtils.indexOfAnyBut(*, [])                                = -1\n     * StringUtils.indexOfAnyBut("zzabyycdxx", new char[] {\'z\', \'a\'} ) = 3\n     * StringUtils.indexOfAnyBut("aba", new char[] {\'z\'} )             = 0\n     * StringUtils.indexOfAnyBut("aba", new char[] {\'a\', \'b\'} )        = -1\n\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @param searchChars  the chars to search for, may be null\n     * @return the index of any of the chars, -1 if no match or null input\n     * @since 2.0\n     * @since 3.0 Changed signature from indexOfAnyBut(String, char[]) to indexOfAnyBut(CharSequence, char...)\n     */\n    public static int indexOfAnyBut(CharSequence cs, char... searchChars) {\n        if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n            return INDEX_NOT_FOUND;\n        }\n        int csLen = cs.length();\n        int csLast = csLen - 1;\n        int searchLen = searchChars.length;\n        int searchLast = searchLen - 1;\n        outer:\n        for (int i = 0; i < csLen; i++) {\n            char ch = cs.charAt(i);\n            for (int j = 0; j < searchLen; j++) {\n                if (searchChars[j] == ch) {\n                    if (i < csLast && j < searchLast && Character.isHighSurrogate(ch)) {\n                        if (searchChars[j + 1] == cs.charAt(i + 1)) {\n                            continue outer;\n                        }\n                    } else {\n                        continue outer;\n                    }\n                }\n            }\n            return i;\n        }\n        return INDEX_NOT_FOUND;\n    }\n\n    /**\n     * <p>Search a CharSequence to find the first index of any\n     * character not in the given set of characters.</p>\n     *\n     * <p>A {@code null} CharSequence will return {@code -1}.\n     * A {@code null} or empty search string will return {@code -1}.</p>\n     *\n     * <pre>\n     * StringUtils.indexOfAnyBut(null, *)            = -1\n     * StringUtils.indexOfAnyBut("", *)              = -1\n     * StringUtils.indexOfAnyBut(*, null)            = -1\n     * StringUtils.indexOfAnyBut(*, "")              = -1\n     * StringUtils.indexOfAnyBut("zzabyycdxx", "za") = 3\n     * StringUtils.indexOfAnyBut("zzabyycdxx", "")   = -1\n     * StringUtils.indexOfAnyBut("aba","ab")         = -1\n     * </pre>\n     *\n     * @param seq  the CharSequence to check, may be null\n     * @param searchChars  the chars to search for, may be null\n     * @return the index of any of the chars, -1 if no match or null input\n     * @since 2.0\n     * @since 3.0 Changed signature from indexOfAnyBut(String, String) to indexOfAnyBut(CharSequence, CharSequence)\n     */\n    public static int indexOfAnyBut(CharSequence seq, CharSequence searchChars) {\n        if (isEmpty(seq) || isEmpty(searchChars)) {\n            return INDEX_NOT_FOUND;\n        }\n        int strLen = seq.length();\n        for (int i = 0; i < strLen; i++) {\n            char ch = seq.charAt(i);\n            boolean chFound = CharSequenceUtils.indexOf(searchChars, ch, 0) >= 0;\n            if (i + 1 < strLen && Character.isHighSurrogate(ch)) {\n                char ch2 = seq.charAt(i + 1);\n                if (chFound && CharSequenceUtils.indexOf(searchChars, ch2, 0) < 0) {\n                    return i;\n                }\n            } else {\n                if (!chFound) {\n                    return i;\n                }\n            }\n        }\n        return INDEX_NOT_FOUND;\n    }\n\n    // ContainsOnly\n    //-----------------------------------------------------------------------\n    /**\n     * <p>Checks if the CharSequence contains only certain characters.</p>\n     *\n     * <p>A {@code null} CharSequence will return {@code false}.\n     * A {@code null} valid character array will return {@code false}.\n     * An empty CharSequence (length()=0) always returns {@code true}.</p>\n     *\n     * <pre>\n     * StringUtils.containsOnly(null, *)       = false\n     * StringUtils.containsOnly(*, null)       = false\n     * StringUtils.containsOnly("", *)         = true\n     * StringUtils.containsOnly("ab", \'\')      = false\n     * StringUtils.containsOnly("abab", \'abc\') = true\n     * StringUtils.containsOnly("ab1", \'abc\')  = false\n     * StringUtils.containsOnly("abz", \'abc\')  = false\n     * </pre>\n     *\n     * @param cs  the String to check, may be null\n     * @param valid  an array of valid chars, may be null\n     * @return true if it only contains valid chars and is non-null\n     * @since 3.0 Changed signature from containsOnly(String, char[]) to containsOnly(CharSequence, char...)\n     */\n    public static boolean containsOnly(CharSequence cs, char... valid) {\n        // All these pre-checks are to maintain API with an older version\n        if (valid == null || cs == null) {\n            return false;\n        }\n        if (cs.length() == 0) {\n            return true;\n        }\n        if (valid.length == 0) {\n            return false;\n        }\n        return indexOfAnyBut(cs, valid) == INDEX_NOT_FOUND;\n    }\n\n    /**\n     * <p>Checks if the CharSequence contains only certain characters.</p>\n     *\n     * <p>A {@code null} CharSequence will return {@code false}.\n     * A {@code null} valid character String will return {@code false}.\n     * An empty String (length()=0) always returns {@code true}.</p>\n     *\n     * <pre>\n     * StringUtils.containsOnly(null, *)       = false\n     * StringUtils.containsOnly(*, null)       = false\n     * StringUtils.containsOnly("", *)         = true\n     * StringUtils.containsOnly("ab", "")      = false\n     * StringUtils.containsOnly("abab", "abc") = true\n     * StringUtils.containsOnly("ab1", "abc")  = false\n     * StringUtils.containsOnly("abz", "abc")  = false\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @param validChars  a String of valid chars, may be null\n     * @return true if it only contains valid chars and is non-null\n     * @since 2.0\n     * @since 3.0 Changed signature from containsOnly(String, String) to containsOnly(CharSequence, String)\n     */\n    public static boolean containsOnly(CharSequence cs, String validChars) {\n        if (cs == null || validChars == null) {\n            return false;\n        }\n        return containsOnly(cs, validChars.toCharArray());\n    }\n\n    // ContainsNone\n    //-----------------------------------------------------------------------\n    /**\n     * <p>Checks that the CharSequence does not contain certain characters.</p>\n     *\n     * <p>A {@code null} CharSequence will return {@code true}.\n     * A {@code null} invalid character array will return {@code true}.\n     * An empty CharSequence (length()=0) always returns true.</p>\n     *\n     * <pre>\n     * StringUtils.containsNone(null, *)       = true\n     * StringUtils.containsNone(*, null)       = true\n     * StringUtils.containsNone("", *)         = true\n     * StringUtils.containsNone("ab", \'\')      = true\n     * StringUtils.containsNone("abab", \'xyz\') = true\n     * StringUtils.containsNone("ab1", \'xyz\')  = true\n     * StringUtils.containsNone("abz", \'xyz\')  = false\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @param searchChars  an array of invalid chars, may be null\n     * @return true if it contains none of the invalid chars, or is null\n     * @since 2.0\n     * @since 3.0 Changed signature from containsNone(String, char[]) to containsNone(CharSequence, char...)\n     */\n    public static boolean containsNone(CharSequence cs, char... searchChars) {\n        if (cs == null || searchChars == null) {\n            return true;\n        }\n        int csLen = cs.length();\n        int csLast = csLen - 1;\n        int searchLen = searchChars.length;\n        int searchLast = searchLen - 1;\n        for (int i = 0; i < csLen; i++) {\n            char ch = cs.charAt(i);\n            for (int j = 0; j < searchLen; j++) {\n                if (searchChars[j] == ch) {\n                    if (Character.isHighSurrogate(ch)) {\n                        if (j == searchLast) {\n                            // missing low surrogate, fine, like String.indexOf(String)\n                            return false;\n                        }\n                        if (i < csLast && searchChars[j + 1] == cs.charAt(i + 1)) {\n                            return false;\n                        }\n                    } else {\n                        // ch is in the Basic Multilingual Plane\n                        return false;\n                    }\n                }\n            }\n        }\n        return true;\n    }\n\n    /**\n     * <p>Checks that the CharSequence does not contain certain characters.</p>\n     *\n     * <p>A {@code null} CharSequence will return {@code true}.\n     * A {@code null} invalid character array will return {@code true}.\n     * An empty String ("") always returns true.</p>\n     *\n     * <pre>\n     * StringUtils.containsNone(null, *)       = true\n     * StringUtils.containsNone(*, null)       = true\n     * StringUtils.containsNone("", *)         = true\n     * StringUtils.containsNone("ab", "")      = true\n     * StringUtils.containsNone("abab", "xyz") = true\n     * StringUtils.containsNone("ab1", "xyz")  = true\n     * StringUtils.containsNone("abz", "xyz")  = false\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @param invalidChars  a String of invalid chars, may be null\n     * @return true if it contains none of the invalid chars, or is null\n     * @since 2.0\n     * @since 3.0 Changed signature from containsNone(String, String) to containsNone(CharSequence, String)\n     */\n    public static boolean containsNone(CharSequence cs, String invalidChars) {\n        if (cs == null || invalidChars == null) {\n            return true;\n        }\n        return containsNone(cs, invalidChars.toCharArray());\n    }\n\n    // IndexOfAny strings\n    //-----------------------------------------------------------------------\n    /**\n     * <p>Find the first index of any of a set of potential substrings.</p>\n     *\n     * <p>A {@code null} CharSequence will return {@code -1}.\n     * A {@code null} or zero length search array will return {@code -1}.\n     * A {@code null} search array entry will be ignored, but a search\n     * array containing "" will return {@code 0} if {@code str} is not\n     * null. This method uses {@link String#indexOf(String)} if possible.</p>\n     *\n     * <pre>\n     * StringUtils.indexOfAny(null, *)                     = -1\n     * StringUtils.indexOfAny(*, null)                     = -1\n     * StringUtils.indexOfAny(*, [])                       = -1\n     * StringUtils.indexOfAny("zzabyycdxx", ["ab","cd"])   = 2\n     * StringUtils.indexOfAny("zzabyycdxx", ["cd","ab"])   = 2\n     * StringUtils.indexOfAny("zzabyycdxx", ["mn","op"])   = -1\n     * StringUtils.indexOfAny("zzabyycdxx", ["zab","aby"]) = 1\n     * StringUtils.indexOfAny("zzabyycdxx", [""])          = 0\n     * StringUtils.indexOfAny("", [""])                    = 0\n     * StringUtils.indexOfAny("", ["a"])                   = -1\n     * </pre>\n     *\n     * @param str  the CharSequence to check, may be null\n     * @param searchStrs  the CharSequences to search for, may be null\n     * @return the first index of any of the searchStrs in str, -1 if no match\n     * @since 3.0 Changed signature from indexOfAny(String, String[]) to indexOfAny(CharSequence, CharSequence...)\n     */\n    public static int indexOfAny(CharSequence str, CharSequence... searchStrs) {\n        if (str == null || searchStrs == null) {\n            return INDEX_NOT_FOUND;\n        }\n        int sz = searchStrs.length;\n\n        // String\'s can\'t have a MAX_VALUEth index.\n        int ret = Integer.MAX_VALUE;\n\n        int tmp = 0;\n        for (int i = 0; i < sz; i++) {\n            CharSequence search = searchStrs[i];\n            if (search == null) {\n                continue;\n            }\n            tmp = CharSequenceUtils.indexOf(str, search, 0);\n            if (tmp == INDEX_NOT_FOUND) {\n                continue;\n            }\n\n            if (tmp < ret) {\n                ret = tmp;\n            }\n        }\n\n        return ret == Integer.MAX_VALUE ? INDEX_NOT_FOUND : ret;\n    }\n\n    /**\n     * <p>Find the latest index of any of a set of potential substrings.</p>\n     *\n     * <p>A {@code null} CharSequence will return {@code -1}.\n     * A {@code null} search array will return {@code -1}.\n     * A {@code null} or zero length search array entry will be ignored,\n     * but a search array containing "" will return the length of {@code str}\n     * if {@code str} is not null. This method uses {@link String#indexOf(String)} if possible</p>\n     *\n     * <pre>\n     * StringUtils.lastIndexOfAny(null, *)                   = -1\n     * StringUtils.lastIndexOfAny(*, null)                   = -1\n     * StringUtils.lastIndexOfAny(*, [])                     = -1\n     * StringUtils.lastIndexOfAny(*, [null])                 = -1\n     * StringUtils.lastIndexOfAny("zzabyycdxx", ["ab","cd"]) = 6\n     * StringUtils.lastIndexOfAny("zzabyycdxx", ["cd","ab"]) = 6\n     * StringUtils.lastIndexOfAny("zzabyycdxx", ["mn","op"]) = -1\n     * StringUtils.lastIndexOfAny("zzabyycdxx", ["mn","op"]) = -1\n     * StringUtils.lastIndexOfAny("zzabyycdxx", ["mn",""])   = 10\n     * </pre>\n     *\n     * @param str  the CharSequence to check, may be null\n     * @param searchStrs  the CharSequences to search for, may be null\n     * @return the last index of any of the CharSequences, -1 if no match\n     * @since 3.0 Changed signature from lastIndexOfAny(String, String[]) to lastIndexOfAny(CharSequence, CharSequence)\n     */\n    public static int lastIndexOfAny(CharSequence str, CharSequence... searchStrs) {\n        if (str == null || searchStrs == null) {\n            return INDEX_NOT_FOUND;\n        }\n        int sz = searchStrs.length;\n        int ret = INDEX_NOT_FOUND;\n        int tmp = 0;\n        for (int i = 0; i < sz; i++) {\n            CharSequence search = searchStrs[i];\n            if (search == null) {\n                continue;\n            }\n            tmp = CharSequenceUtils.lastIndexOf(str, search, str.length());\n            if (tmp > ret) {\n                ret = tmp;\n            }\n        }\n        return ret;\n    }\n\n    // Substring\n    //-----------------------------------------------------------------------\n    /**\n     * <p>Gets a substring from the specified String avoiding exceptions.</p>\n     *\n     * <p>A negative start position can be used to start {@code n}\n     * characters from the end of the String.</p>\n     *\n     * <p>A {@code null} String will return {@code null}.\n     * An empty ("") String will return "".</p>\n     *\n     * <pre>\n     * StringUtils.substring(null, *)   = null\n     * StringUtils.substring("", *)     = ""\n     * StringUtils.substring("abc", 0)  = "abc"\n     * StringUtils.substring("abc", 2)  = "c"\n     * StringUtils.substring("abc", 4)  = ""\n     * StringUtils.substring("abc", -2) = "bc"\n     * StringUtils.substring("abc", -4) = "abc"\n     * </pre>\n     *\n     * @param str  the String to get the substring from, may be null\n     * @param start  the position to start from, negative means\n     *  count back from the end of the String by this many characters\n     * @return substring from start position, {@code null} if null String input\n     */\n    public static String substring(String str, int start) {\n        if (str == null) {\n            return null;\n        }\n\n        // handle negatives, which means last n characters\n        if (start < 0) {\n            start = str.length() + start; // remember start is negative\n        }\n\n        if (start < 0) {\n            start = 0;\n        }\n        if (start > str.length()) {\n            return EMPTY;\n        }\n\n        return str.substring(start);\n    }\n\n    /**\n     * <p>Gets a substring from the specified String avoiding exceptions.</p>\n     *\n     * <p>A negative start position can be used to start/end {@code n}\n     * characters from the end of the String.</p>\n     *\n     * <p>The returned substring starts with the character in the {@code start}\n     * position and ends before the {@code end} position. All position counting is\n     * zero-based -- i.e., to start at the beginning of the string use\n     * {@code start = 0}. Negative start and end positions can be used to\n     * specify offsets relative to the end of the String.</p>\n     *\n     * <p>If {@code start} is not strictly to the left of {@code end}, ""\n     * is returned.</p>\n     *\n     * <pre>\n     * StringUtils.substring(null, *, *)    = null\n     * StringUtils.substring("", * ,  *)    = "";\n     * StringUtils.substring("abc", 0, 2)   = "ab"\n     * StringUtils.substring("abc", 2, 0)   = ""\n     * StringUtils.substring("abc", 2, 4)   = "c"\n     * StringUtils.substring("abc", 4, 6)   = ""\n     * StringUtils.substring("abc", 2, 2)   = ""\n     * StringUtils.substring("abc", -2, -1) = "b"\n     * StringUtils.substring("abc", -4, 2)  = "ab"\n     * </pre>\n     *\n     * @param str  the String to get the substring from, may be null\n     * @param start  the position to start from, negative means\n     *  count back from the end of the String by this many characters\n     * @param end  the position to end at (exclusive), negative means\n     *  count back from the end of the String by this many characters\n     * @return substring from start position to end position,\n     *  {@code null} if null String input\n     */\n    public static String substring(String str, int start, int end) {\n        if (str == null) {\n            return null;\n        }\n\n        // handle negatives\n        if (end < 0) {\n            end = str.length() + end; // remember end is negative\n        }\n        if (start < 0) {\n            start = str.length() + start; // remember start is negative\n        }\n\n        // check length next\n        if (end > str.length()) {\n            end = str.length();\n        }\n\n        // if start is greater than end, return ""\n        if (start > end) {\n            return EMPTY;\n        }\n\n        if (start < 0) {\n            start = 0;\n        }\n        if (end < 0) {\n            end = 0;\n        }\n\n        return str.substring(start, end);\n    }\n\n    // Left/Right/Mid\n    //-----------------------------------------------------------------------\n    /**\n     * <p>Gets the leftmost {@code len} characters of a String.</p>\n     *\n     * <p>If {@code len} characters are not available, or the\n     * String is {@code null}, the String will be returned without\n     * an exception. An empty String is returned if len is negative.</p>\n     *\n     * <pre>\n     * StringUtils.left(null, *)    = null\n     * StringUtils.left(*, -ve)     = ""\n     * StringUtils.left("", *)      = ""\n     * StringUtils.left("abc", 0)   = ""\n     * StringUtils.left("abc", 2)   = "ab"\n     * StringUtils.left("abc", 4)   = "abc"\n     * </pre>\n     *\n     * @param str  the String to get the leftmost characters from, may be null\n     * @param len  the length of the required String\n     * @return the leftmost characters, {@code null} if null String input\n     */\n    public static String left(String str, int len) {\n        if (str == null) {\n            return null;\n        }\n        if (len < 0) {\n            return EMPTY;\n        }\n        if (str.length() <= len) {\n            return str;\n        }\n        return str.substring(0, len);\n    }\n\n    /**\n     * <p>Gets the rightmost {@code len} characters of a String.</p>\n     *\n     * <p>If {@code len} characters are not available, or the String\n     * is {@code null}, the String will be returned without an\n     * an exception. An empty String is returned if len is negative.</p>\n     *\n     * <pre>\n     * StringUtils.right(null, *)    = null\n     * StringUtils.right(*, -ve)     = ""\n     * StringUtils.right("", *)      = ""\n     * StringUtils.right("abc", 0)   = ""\n     * StringUtils.right("abc", 2)   = "bc"\n     * StringUtils.right("abc", 4)   = "abc"\n     * </pre>\n     *\n     * @param str  the String to get the rightmost characters from, may be null\n     * @param len  the length of the required String\n     * @return the rightmost characters, {@code null} if null String input\n     */\n    public static String right(String str, int len) {\n        if (str == null) {\n            return null;\n        }\n        if (len < 0) {\n            return EMPTY;\n        }\n        if (str.length() <= len) {\n            return str;\n        }\n        return str.substring(str.length() - len);\n    }\n\n    /**\n     * <p>Gets {@code len} characters from the middle of a String.</p>\n     *\n     * <p>If {@code len} characters are not available, the remainder\n     * of the String will be returned without an exception. If the\n     * String is {@code null}, {@code null} will be returned.\n     * An empty String is returned if len is negative or exceeds the\n     * length of {@code str}.</p>\n     *\n     * <pre>\n     * StringUtils.mid(null, *, *)    = null\n     * StringUtils.mid(*, *, -ve)     = ""\n     * StringUtils.mid("", 0, *)      = ""\n     * StringUtils.mid("abc", 0, 2)   = "ab"\n     * StringUtils.mid("abc", 0, 4)   = "abc"\n     * StringUtils.mid("abc", 2, 4)   = "c"\n     * StringUtils.mid("abc", 4, 2)   = ""\n     * StringUtils.mid("abc", -2, 2)  = "ab"\n     * </pre>\n     *\n     * @param str  the String to get the characters from, may be null\n     * @param pos  the position to start from, negative treated as zero\n     * @param len  the length of the required String\n     * @return the middle characters, {@code null} if null String input\n     */\n    public static String mid(String str, int pos, int len) {\n        if (str == null) {\n            return null;\n        }\n        if (len < 0 || pos > str.length()) {\n            return EMPTY;\n        }\n        if (pos < 0) {\n            pos = 0;\n        }\n        if (str.length() <= pos + len) {\n            return str.substring(pos);\n        }\n        return str.substring(pos, pos + len);\n    }\n\n    // SubStringAfter/SubStringBefore\n    //-----------------------------------------------------------------------\n    /**\n     * <p>Gets the substring before the first occurrence of a separator.\n     * The separator is not returned.</p>\n     *\n     * <p>A {@code null} string input will return {@code null}.\n     * An empty ("") string input will return the empty string.\n     * A {@code null} separator will return the input string.</p>\n     *\n     * <p>If nothing is found, the string input is returned.</p>\n     *\n     * <pre>\n     * StringUtils.substringBefore(null, *)      = null\n     * StringUtils.substringBefore("", *)        = ""\n     * StringUtils.substringBefore("abc", "a")   = ""\n     * StringUtils.substringBefore("abcba", "b") = "a"\n     * StringUtils.substringBefore("abc", "c")   = "ab"\n     * StringUtils.substringBefore("abc", "d")   = "abc"\n     * StringUtils.substringBefore("abc", "")    = ""\n     * StringUtils.substringBefore("abc", null)  = "abc"\n     * </pre>\n     *\n     * @param str  the String to get a substring from, may be null\n     * @param separator  the String to search for, may be null\n     * @return the substring before the first occurrence of the separator,\n     *  {@code null} if null String input\n     * @since 2.0\n     */\n    public static String substringBefore(String str, String separator) {\n        if (isEmpty(str) || separator == null) {\n            return str;\n        }\n        if (separator.length() == 0) {\n            return EMPTY;\n        }\n        int pos = str.indexOf(separator);\n        if (pos == INDEX_NOT_FOUND) {\n            return str;\n        }\n        return str.substring(0, pos);\n    }\n\n    /**\n     * <p>Gets the substring after the first occurrence of a separator.\n     * The separator is not returned.</p>\n     *\n     * <p>A {@code null} string input will return {@code null}.\n     * An empty ("") string input will return the empty string.\n     * A {@code null} separator will return the empty string if the\n     * input string is not {@code null}.</p>\n     *\n     * <p>If nothing is found, the empty string is returned.</p>\n     *\n     * <pre>\n     * StringUtils.substringAfter(null, *)      = null\n     * StringUtils.substringAfter("", *)        = ""\n     * StringUtils.substringAfter(*, null)      = ""\n     * StringUtils.substringAfter("abc", "a")   = "bc"\n     * StringUtils.substringAfter("abcba", "b") = "cba"\n     * StringUtils.substringAfter("abc", "c")   = ""\n     * StringUtils.substringAfter("abc", "d")   = ""\n     * StringUtils.substringAfter("abc", "")    = "abc"\n     * </pre>\n     *\n     * @param str  the String to get a substring from, may be null\n     * @param separator  the String to search for, may be null\n     * @return the substring after the first occurrence of the separator,\n     *  {@code null} if null String input\n     * @since 2.0\n     */\n    public static String substringAfter(String str, String separator) {\n        if (isEmpty(str)) {\n            return str;\n        }\n        if (separator == null) {\n            return EMPTY;\n        }\n        int pos = str.indexOf(separator);\n        if (pos == INDEX_NOT_FOUND) {\n            return EMPTY;\n        }\n        return str.substring(pos + separator.length());\n    }\n\n    /**\n     * <p>Gets the substring before the last occurrence of a separator.\n     * The separator is not returned.</p>\n     *\n     * <p>A {@code null} string input will return {@code null}.\n     * An empty ("") string input will return the empty string.\n     * An empty or {@code null} separator will return the input string.</p>\n     *\n     * <p>If nothing is found, the string input is returned.</p>\n     *\n     * <pre>\n     * StringUtils.substringBeforeLast(null, *)      = null\n     * StringUtils.substringBeforeLast("", *)        = ""\n     * StringUtils.substringBeforeLast("abcba", "b") = "abc"\n     * StringUtils.substringBeforeLast("abc", "c")   = "ab"\n     * StringUtils.substringBeforeLast("a", "a")     = ""\n     * StringUtils.substringBeforeLast("a", "z")     = "a"\n     * StringUtils.substringBeforeLast("a", null)    = "a"\n     * StringUtils.substringBeforeLast("a", "")      = "a"\n     * </pre>\n     *\n     * @param str  the String to get a substring from, may be null\n     * @param separator  the String to search for, may be null\n     * @return the substring before the last occurrence of the separator,\n     *  {@code null} if null String input\n     * @since 2.0\n     */\n    public static String substringBeforeLast(String str, String separator) {\n        if (isEmpty(str) || isEmpty(separator)) {\n            return str;\n        }\n        int pos = str.lastIndexOf(separator);\n        if (pos == INDEX_NOT_FOUND) {\n            return str;\n        }\n        return str.substring(0, pos);\n    }\n\n    /**\n     * <p>Gets the substring after the last occurrence of a separator.\n     * The separator is not returned.</p>\n     *\n     * <p>A {@code null} string input will return {@code null}.\n     * An empty ("") string input will return the empty string.\n     * An empty or {@code null} separator will return the empty string if\n     * the input string is not {@code null}.</p>\n     *\n     * <p>If nothing is found, the empty string is returned.</p>\n     *\n     * <pre>\n     * StringUtils.substringAfterLast(null, *)      = null\n     * StringUtils.substringAfterLast("", *)        = ""\n     * StringUtils.substringAfterLast(*, "")        = ""\n     * StringUtils.substringAfterLast(*, null)      = ""\n     * StringUtils.substringAfterLast("abc", "a")   = "bc"\n     * StringUtils.substringAfterLast("abcba", "b") = "a"\n     * StringUtils.substringAfterLast("abc", "c")   = ""\n     * StringUtils.substringAfterLast("a", "a")     = ""\n     * StringUtils.substringAfterLast("a", "z")     = ""\n     * </pre>\n     *\n     * @param str  the String to get a substring from, may be null\n     * @param separator  the String to search for, may be null\n     * @return the substring after the last occurrence of the separator,\n     *  {@code null} if null String input\n     * @since 2.0\n     */\n    public static String substringAfterLast(String str, String separator) {\n        if (isEmpty(str)) {\n            return str;\n        }\n        if (isEmpty(separator)) {\n            return EMPTY;\n        }\n        int pos = str.lastIndexOf(separator);\n        if (pos == INDEX_NOT_FOUND || pos == str.length() - separator.length()) {\n            return EMPTY;\n        }\n        return str.substring(pos + separator.length());\n    }\n\n    // Substring between\n    //-----------------------------------------------------------------------\n    /**\n     * <p>Gets the String that is nested in between two instances of the\n     * same String.</p>\n     *\n     * <p>A {@code null} input String returns {@code null}.\n     * A {@code null} tag returns {@code null}.</p>\n     *\n     * <pre>\n     * StringUtils.substringBetween(null, *)            = null\n     * StringUtils.substringBetween("", "")             = ""\n     * StringUtils.substringBetween("", "tag")          = null\n     * StringUtils.substringBetween("tagabctag", null)  = null\n     * StringUtils.substringBetween("tagabctag", "")    = ""\n     * StringUtils.substringBetween("tagabctag", "tag") = "abc"\n     * </pre>\n     *\n     * @param str  the String containing the substring, may be null\n     * @param tag  the String before and after the substring, may be null\n     * @return the substring, {@code null} if no match\n     * @since 2.0\n     */\n    public static String substringBetween(String str, String tag) {\n        return substringBetween(str, tag, tag);\n    }\n\n    /**\n     * <p>Gets the String that is nested in between two Strings.\n     * Only the first match is returned.</p>\n     *\n     * <p>A {@code null} input String returns {@code null}.\n     * A {@code null} open/close returns {@code null} (no match).\n     * An empty ("") open and close returns an empty string.</p>\n     *\n     * <pre>\n     * StringUtils.substringBetween("wx[b]yz", "[", "]") = "b"\n     * StringUtils.substringBetween(null, *, *)          = null\n     * StringUtils.substringBetween(*, null, *)          = null\n     * StringUtils.substringBetween(*, *, null)          = null\n     * StringUtils.substringBetween("", "", "")          = ""\n     * StringUtils.substringBetween("", "", "]")         = null\n     * StringUtils.substringBetween("", "[", "]")        = null\n     * StringUtils.substringBetween("yabcz", "", "")     = ""\n     * StringUtils.substringBetween("yabcz", "y", "z")   = "abc"\n     * StringUtils.substringBetween("yabczyabcz", "y", "z")   = "abc"\n     * </pre>\n     *\n     * @param str  the String containing the substring, may be null\n     * @param open  the String before the substring, may be null\n     * @param close  the String after the substring, may be null\n     * @return the substring, {@code null} if no match\n     * @since 2.0\n     */\n    public static String substringBetween(String str, String open, String close) {\n        if (str == null || open == null || close == null) {\n            return null;\n        }\n        int start = str.indexOf(open);\n        if (start != INDEX_NOT_FOUND) {\n            int end = str.indexOf(close, start + open.length());\n            if (end != INDEX_NOT_FOUND) {\n                return str.substring(start + open.length(), end);\n            }\n        }\n        return null;\n    }\n\n    /**\n     * <p>Searches a String for substrings delimited by a start and end tag,\n     * returning all matching substrings in an array.</p>\n     *\n     * <p>A {@code null} input String returns {@code null}.\n     * A {@code null} open/close returns {@code null} (no match).\n     * An empty ("") open/close returns {@code null} (no match).</p>\n     *\n     * <pre>\n     * StringUtils.substringsBetween("[a][b][c]", "[", "]") = ["a","b","c"]\n     * StringUtils.substringsBetween(null, *, *)            = null\n     * StringUtils.substringsBetween(*, null, *)            = null\n     * StringUtils.substringsBetween(*, *, null)            = null\n     * StringUtils.substringsBetween("", "[", "]")          = []\n     * </pre>\n     *\n     * @param str  the String containing the substrings, null returns null, empty returns empty\n     * @param open  the String identifying the start of the substring, empty returns null\n     * @param close  the String identifying the end of the substring, empty returns null\n     * @return a String Array of substrings, or {@code null} if no match\n     * @since 2.3\n     */\n    public static String[] substringsBetween(String str, String open, String close) {\n        if (str == null || isEmpty(open) || isEmpty(close)) {\n            return null;\n        }\n        int strLen = str.length();\n        if (strLen == 0) {\n            return ArrayUtils.EMPTY_STRING_ARRAY;\n        }\n        int closeLen = close.length();\n        int openLen = open.length();\n        List<String> list = new ArrayList<String>();\n        int pos = 0;\n        while (pos < strLen - closeLen) {\n            int start = str.indexOf(open, pos);\n            if (start < 0) {\n                break;\n            }\n            start += openLen;\n            int end = str.indexOf(close, start);\n            if (end < 0) {\n                break;\n            }\n            list.add(str.substring(start, end));\n            pos = end + closeLen;\n        }\n        if (list.isEmpty()) {\n            return null;\n        }\n        return list.toArray(new String [list.size()]);\n    }\n\n    // Nested extraction\n    //-----------------------------------------------------------------------\n\n    // Splitting\n    //-----------------------------------------------------------------------\n    /**\n     * <p>Splits the provided text into an array, using whitespace as the\n     * separator.\n     * Whitespace is defined by {@link Character#isWhitespace(char)}.</p>\n     *\n     * <p>The separator is not included in the returned String array.\n     * Adjacent separators are treated as one separator.\n     * For more control over the split use the StrTokenizer class.</p>\n     *\n     * <p>A {@code null} input String returns {@code null}.</p>\n     *\n     * <pre>\n     * StringUtils.split(null)       = null\n     * StringUtils.split("")         = []\n     * StringUtils.split("abc def")  = ["abc", "def"]\n     * StringUtils.split("abc  def") = ["abc", "def"]\n     * StringUtils.split(" abc ")    = ["abc"]\n     * </pre>\n     *\n     * @param str  the String to parse, may be null\n     * @return an array of parsed Strings, {@code null} if null String input\n     */\n    public static String[] split(String str) {\n        return split(str, null, -1);\n    }\n\n    /**\n     * <p>Splits the provided text into an array, separator specified.\n     * This is an alternative to using StringTokenizer.</p>\n     *\n     * <p>The separator is not included in the returned String array.\n     * Adjacent separators are treated as one separator.\n     * For more control over the split use the StrTokenizer class.</p>\n     *\n     * <p>A {@code null} input String returns {@code null}.</p>\n     *\n     * <pre>\n     * StringUtils.split(null, *)         = null\n     * StringUtils.split("", *)           = []\n     * StringUtils.split("a.b.c", \'.\')    = ["a", "b", "c"]\n     * StringUtils.split("a..b.c", \'.\')   = ["a", "b", "c"]\n     * StringUtils.split("a:b:c", \'.\')    = ["a:b:c"]\n     * StringUtils.split("a b c", \' \')    = ["a", "b", "c"]\n     * </pre>\n     *\n     * @param str  the String to parse, may be null\n     * @param separatorChar  the character used as the delimiter\n     * @return an array of parsed Strings, {@code null} if null String input\n     * @since 2.0\n     */\n    public static String[] split(String str, char separatorChar) {\n        return splitWorker(str, separatorChar, false);\n    }\n\n    /**\n     * <p>Splits the provided text into an array, separators specified.\n     * This is an alternative to using StringTokenizer.</p>\n     *\n     * <p>The separator is not included in the returned String array.\n     * Adjacent separators are treated as one separator.\n     * For more control over the split use the StrTokenizer class.</p>\n     *\n     * <p>A {@code null} input String returns {@code null}.\n     * A {@code null} separatorChars splits on whitespace.</p>\n     *\n     * <pre>\n     * StringUtils.split(null, *)         = null\n     * StringUtils.split("", *)           = []\n     * StringUtils.split("abc def", null) = ["abc", "def"]\n     * StringUtils.split("abc def", " ")  = ["abc", "def"]\n     * StringUtils.split("abc  def", " ") = ["abc", "def"]\n     * StringUtils.split("ab:cd:ef", ":") = ["ab", "cd", "ef"]\n     * </pre>\n     *\n     * @param str  the String to parse, may be null\n     * @param separatorChars  the characters used as the delimiters,\n     *  {@code null} splits on whitespace\n     * @return an array of parsed Strings, {@code null} if null String input\n     */\n    public static String[] split(String str, String separatorChars) {\n        return splitWorker(str, separatorChars, -1, false);\n    }\n\n    /**\n     * <p>Splits the provided text into an array with a maximum length,\n     * separators specified.</p>\n     *\n     * <p>The separator is not included in the returned String array.\n     * Adjacent separators are treated as one separator.</p>\n     *\n     * <p>A {@code null} input String returns {@code null}.\n     * A {@code null} separatorChars splits on whitespace.</p>\n     *\n     * <p>If more than {@code max} delimited substrings are found, the last\n     * returned string includes all characters after the first {@code max - 1}\n     * returned strings (including separator characters).</p>\n     *\n     * <pre>\n     * StringUtils.split(null, *, *)            = null\n     * StringUtils.split("", *, *)              = []\n     * StringUtils.split("ab cd ef", null, 0)   = ["ab", "cd", "ef"]\n     * StringUtils.split("ab   cd ef", null, 0) = ["ab", "cd", "ef"]\n     * StringUtils.split("ab:cd:ef", ":", 0)    = ["ab", "cd", "ef"]\n     * StringUtils.split("ab:cd:ef", ":", 2)    = ["ab", "cd:ef"]\n     * </pre>\n     *\n     * @param str  the String to parse, may be null\n     * @param separatorChars  the characters used as the delimiters,\n     *  {@code null} splits on whitespace\n     * @param max  the maximum number of elements to include in the\n     *  array. A zero or negative value implies no limit\n     * @return an array of parsed Strings, {@code null} if null String input\n     */\n    public static String[] split(String str, String separatorChars, int max) {\n        return splitWorker(str, separatorChars, max, false);\n    }\n\n    /**\n     * <p>Splits the provided text into an array, separator string specified.</p>\n     *\n     * <p>The separator(s) will not be included in the returned String array.\n     * Adjacent separators are treated as one separator.</p>\n     *\n     * <p>A {@code null} input String returns {@code null}.\n     * A {@code null} separator splits on whitespace.</p>\n     *\n     * <pre>\n     * StringUtils.splitByWholeSeparator(null, *)               = null\n     * StringUtils.splitByWholeSeparator("", *)                 = []\n     * StringUtils.splitByWholeSeparator("ab de fg", null)      = ["ab", "de", "fg"]\n     * StringUtils.splitByWholeSeparator("ab   de fg", null)    = ["ab", "de", "fg"]\n     * StringUtils.splitByWholeSeparator("ab:cd:ef", ":")       = ["ab", "cd", "ef"]\n     * StringUtils.splitByWholeSeparator("ab-!-cd-!-ef", "-!-") = ["ab", "cd", "ef"]\n     * </pre>\n     *\n     * @param str  the String to parse, may be null\n     * @param separator  String containing the String to be used as a delimiter,\n     *  {@code null} splits on whitespace\n     * @return an array of parsed Strings, {@code null} if null String was input\n     */\n    public static String[] splitByWholeSeparator(String str, String separator) {\n        return splitByWholeSeparatorWorker( str, separator, -1, false ) ;\n    }\n\n    /**\n     * <p>Splits the provided text into an array, separator string specified.\n     * Returns a maximum of {@code max} substrings.</p>\n     *\n     * <p>The separator(s) will not be included in the returned String array.\n     * Adjacent separators are treated as one separator.</p>\n     *\n     * <p>A {@code null} input String returns {@code null}.\n     * A {@code null} separator splits on whitespace.</p>\n     *\n     * <pre>\n     * StringUtils.splitByWholeSeparator(null, *, *)               = null\n     * StringUtils.splitByWholeSeparator("", *, *)                 = []\n     * StringUtils.splitByWholeSeparator("ab de fg", null, 0)      = ["ab", "de", "fg"]\n     * StringUtils.splitByWholeSeparator("ab   de fg", null, 0)    = ["ab", "de", "fg"]\n     * StringUtils.splitByWholeSeparator("ab:cd:ef", ":", 2)       = ["ab", "cd:ef"]\n     * StringUtils.splitByWholeSeparator("ab-!-cd-!-ef", "-!-", 5) = ["ab", "cd", "ef"]\n     * StringUtils.splitByWholeSeparator("ab-!-cd-!-ef", "-!-", 2) = ["ab", "cd-!-ef"]\n     * </pre>\n     *\n     * @param str  the String to parse, may be null\n     * @param separator  String containing the String to be used as a delimiter,\n     *  {@code null} splits on whitespace\n     * @param max  the maximum number of elements to include in the returned\n     *  array. A zero or negative value implies no limit.\n     * @return an array of parsed Strings, {@code null} if null String was input\n     */\n    public static String[] splitByWholeSeparator( String str, String separator, int max ) {\n        return splitByWholeSeparatorWorker(str, separator, max, false);\n    }\n\n    /**\n     * <p>Splits the provided text into an array, separator string specified. </p>\n     *\n     * <p>The separator is not included in the returned String array.\n     * Adjacent separators are treated as separators for empty tokens.\n     * For more control over the split use the StrTokenizer class.</p>\n     *\n     * <p>A {@code null} input String returns {@code null}.\n     * A {@code null} separator splits on whitespace.</p>\n     *\n     * <pre>\n     * StringUtils.splitByWholeSeparatorPreserveAllTokens(null, *)               = null\n     * StringUtils.splitByWholeSeparatorPreserveAllTokens("", *)                 = []\n     * StringUtils.splitByWholeSeparatorPreserveAllTokens("ab de fg", null)      = ["ab", "de", "fg"]\n     * StringUtils.splitByWholeSeparatorPreserveAllTokens("ab   de fg", null)    = ["ab", "", "", "de", "fg"]\n     * StringUtils.splitByWholeSeparatorPreserveAllTokens("ab:cd:ef", ":")       = ["ab", "cd", "ef"]\n     * StringUtils.splitByWholeSeparatorPreserveAllTokens("ab-!-cd-!-ef", "-!-") = ["ab", "cd", "ef"]\n     * </pre>\n     *\n     * @param str  the String to parse, may be null\n     * @param separator  String containing the String to be used as a delimiter,\n     *  {@code null} splits on whitespace\n     * @return an array of parsed Strings, {@code null} if null String was input\n     * @since 2.4\n     */\n    public static String[] splitByWholeSeparatorPreserveAllTokens(String str, String separator) {\n        return splitByWholeSeparatorWorker(str, separator, -1, true);\n    }\n\n    /**\n     * <p>Splits the provided text into an array, separator string specified.\n     * Returns a maximum of {@code max} substrings.</p>\n     *\n     * <p>The separator is not included in the returned String array.\n     * Adjacent separators are treated as separators for empty tokens.\n     * For more control over the split use the StrTokenizer class.</p>\n     *\n     * <p>A {@code null} input String returns {@code null}.\n     * A {@code null} separator splits on whitespace.</p>\n     *\n     * <pre>\n     * StringUtils.splitByWholeSeparatorPreserveAllTokens(null, *, *)               = null\n     * StringUtils.splitByWholeSeparatorPreserveAllTokens("", *, *)                 = []\n     * StringUtils.splitByWholeSeparatorPreserveAllTokens("ab de fg", null, 0)      = ["ab", "de", "fg"]\n     * StringUtils.splitByWholeSeparatorPreserveAllTokens("ab   de fg", null, 0)    = ["ab", "", "", "de", "fg"]\n     * StringUtils.splitByWholeSeparatorPreserveAllTokens("ab:cd:ef", ":", 2)       = ["ab", "cd:ef"]\n     * StringUtils.splitByWholeSeparatorPreserveAllTokens("ab-!-cd-!-ef", "-!-", 5) = ["ab", "cd", "ef"]\n     * StringUtils.splitByWholeSeparatorPreserveAllTokens("ab-!-cd-!-ef", "-!-", 2) = ["ab", "cd-!-ef"]\n     * </pre>\n     *\n     * @param str  the String to parse, may be null\n     * @param separator  String containing the String to be used as a delimiter,\n     *  {@code null} splits on whitespace\n     * @param max  the maximum number of elements to include in the returned\n     *  array. A zero or negative value implies no limit.\n     * @return an array of parsed Strings, {@code null} if null String was input\n     * @since 2.4\n     */\n    public static String[] splitByWholeSeparatorPreserveAllTokens(String str, String separator, int max) {\n        return splitByWholeSeparatorWorker(str, separator, max, true);\n    }\n\n    /**\n     * Performs the logic for the {@code splitByWholeSeparatorPreserveAllTokens} methods.\n     *\n     * @param str  the String to parse, may be {@code null}\n     * @param separator  String containing the String to be used as a delimiter,\n     *  {@code null} splits on whitespace\n     * @param max  the maximum number of elements to include in the returned\n     *  array. A zero or negative value implies no limit.\n     * @param preserveAllTokens if {@code true}, adjacent separators are\n     * treated as empty token separators; if {@code false}, adjacent\n     * separators are treated as one separator.\n     * @return an array of parsed Strings, {@code null} if null String input\n     * @since 2.4\n     */\n    private static String[] splitByWholeSeparatorWorker(\n            String str, String separator, int max, boolean preserveAllTokens) {\n        if (str == null) {\n            return null;\n        }\n\n        int len = str.length();\n\n        if (len == 0) {\n            return ArrayUtils.EMPTY_STRING_ARRAY;\n        }\n\n        if (separator == null || EMPTY.equals(separator)) {\n            // Split on whitespace.\n            return splitWorker(str, null, max, preserveAllTokens);\n        }\n\n        int separatorLength = separator.length();\n\n        ArrayList<String> substrings = new ArrayList<String>();\n        int numberOfSubstrings = 0;\n        int beg = 0;\n        int end = 0;\n        while (end < len) {\n            end = str.indexOf(separator, beg);\n\n            if (end > -1) {\n                if (end > beg) {\n                    numberOfSubstrings += 1;\n\n                    if (numberOfSubstrings == max) {\n                        end = len;\n                        substrings.add(str.substring(beg));\n                    } else {\n                        // The following is OK, because String.substring( beg, end ) excludes\n                        // the character at the position \'end\'.\n                        substrings.add(str.substring(beg, end));\n\n                        // Set the starting point for the next search.\n                        // The following is equivalent to beg = end + (separatorLength - 1) + 1,\n                        // which is the right calculation:\n                        beg = end + separatorLength;\n                    }\n                } else {\n                    // We found a consecutive occurrence of the separator, so skip it.\n                    if (preserveAllTokens) {\n                        numberOfSubstrings += 1;\n                        if (numberOfSubstrings == max) {\n                            end = len;\n                            substrings.add(str.substring(beg));\n                        } else {\n                            substrings.add(EMPTY);\n                        }\n                    }\n                    beg = end + separatorLength;\n                }\n            } else {\n                // String.substring( beg ) goes from \'beg\' to the end of the String.\n                substrings.add(str.substring(beg));\n                end = len;\n            }\n        }\n\n        return substrings.toArray(new String[substrings.size()]);\n    }\n\n    // -----------------------------------------------------------------------\n    /**\n     * <p>Splits the provided text into an array, using whitespace as the\n     * separator, preserving all tokens, including empty tokens created by\n     * adjacent separators. This is an alternative to using StringTokenizer.\n     * Whitespace is defined by {@link Character#isWhitespace(char)}.</p>\n     *\n     * <p>The separator is not included in the returned String array.\n     * Adjacent separators are treated as separators for empty tokens.\n     * For more control over the split use the StrTokenizer class.</p>\n     *\n     * <p>A {@code null} input String returns {@code null}.</p>\n     *\n     * <pre>\n     * StringUtils.splitPreserveAllTokens(null)       = null\n     * StringUtils.splitPreserveAllTokens("")         = []\n     * StringUtils.splitPreserveAllTokens("abc def")  = ["abc", "def"]\n     * StringUtils.splitPreserveAllTokens("abc  def") = ["abc", "", "def"]\n     * StringUtils.splitPreserveAllTokens(" abc ")    = ["", "abc", ""]\n     * </pre>\n     *\n     * @param str  the String to parse, may be {@code null}\n     * @return an array of parsed Strings, {@code null} if null String input\n     * @since 2.1\n     */\n    public static String[] splitPreserveAllTokens(String str) {\n        return splitWorker(str, null, -1, true);\n    }\n\n    /**\n     * <p>Splits the provided text into an array, separator specified,\n     * preserving all tokens, including empty tokens created by adjacent\n     * separators. This is an alternative to using StringTokenizer.</p>\n     *\n     * <p>The separator is not included in the returned String array.\n     * Adjacent separators are treated as separators for empty tokens.\n     * For more control over the split use the StrTokenizer class.</p>\n     *\n     * <p>A {@code null} input String returns {@code null}.</p>\n     *\n     * <pre>\n     * StringUtils.splitPreserveAllTokens(null, *)         = null\n     * StringUtils.splitPreserveAllTokens("", *)           = []\n     * StringUtils.splitPreserveAllTokens("a.b.c", \'.\')    = ["a", "b", "c"]\n     * StringUtils.splitPreserveAllTokens("a..b.c", \'.\')   = ["a", "", "b", "c"]\n     * StringUtils.splitPreserveAllTokens("a:b:c", \'.\')    = ["a:b:c"]\n     * StringUtils.splitPreserveAllTokens("a\\tb\\nc", null) = ["a", "b", "c"]\n     * StringUtils.splitPreserveAllTokens("a b c", \' \')    = ["a", "b", "c"]\n     * StringUtils.splitPreserveAllTokens("a b c ", \' \')   = ["a", "b", "c", ""]\n     * StringUtils.splitPreserveAllTokens("a b c  ", \' \')   = ["a", "b", "c", "", ""]\n     * StringUtils.splitPreserveAllTokens(" a b c", \' \')   = ["", a", "b", "c"]\n     * StringUtils.splitPreserveAllTokens("  a b c", \' \')  = ["", "", a", "b", "c"]\n     * StringUtils.splitPreserveAllTokens(" a b c ", \' \')  = ["", a", "b", "c", ""]\n     * </pre>\n     *\n     * @param str  the String to parse, may be {@code null}\n     * @param separatorChar  the character used as the delimiter,\n     *  {@code null} splits on whitespace\n     * @return an array of parsed Strings, {@code null} if null String input\n     * @since 2.1\n     */\n    public static String[] splitPreserveAllTokens(String str, char separatorChar) {\n        return splitWorker(str, separatorChar, true);\n    }\n\n    /**\n     * Performs the logic for the {@code split} and\n     * {@code splitPreserveAllTokens} methods that do not return a\n     * maximum array length.\n     *\n     * @param str  the String to parse, may be {@code null}\n     * @param separatorChar the separate character\n     * @param preserveAllTokens if {@code true}, adjacent separators are\n     * treated as empty token separators; if {@code false}, adjacent\n     * separators are treated as one separator.\n     * @return an array of parsed Strings, {@code null} if null String input\n     */\n    private static String[] splitWorker(String str, char separatorChar, boolean preserveAllTokens) {\n        // Performance tuned for 2.0 (JDK1.4)\n\n        if (str == null) {\n            return null;\n        }\n        int len = str.length();\n        if (len == 0) {\n            return ArrayUtils.EMPTY_STRING_ARRAY;\n        }\n        List<String> list = new ArrayList<String>();\n        int i = 0, start = 0;\n        boolean match = false;\n        boolean lastMatch = false;\n        while (i < len) {\n            if (str.charAt(i) == separatorChar) {\n                if (match || preserveAllTokens) {\n                    list.add(str.substring(start, i));\n                    match = false;\n                    lastMatch = true;\n                }\n                start = ++i;\n                continue;\n            }\n            lastMatch = false;\n            match = true;\n            i++;\n        }\n        if (match || preserveAllTokens && lastMatch) {\n            list.add(str.substring(start, i));\n        }\n        return list.toArray(new String[list.size()]);\n    }\n\n    /**\n     * <p>Splits the provided text into an array, separators specified,\n     * preserving all tokens, including empty tokens created by adjacent\n     * separators. This is an alternative to using StringTokenizer.</p>\n     *\n     * <p>The separator is not included in the returned String array.\n     * Adjacent separators are treated as separators for empty tokens.\n     * For more control over the split use the StrTokenizer class.</p>\n     *\n     * <p>A {@code null} input String returns {@code null}.\n     * A {@code null} separatorChars splits on whitespace.</p>\n     *\n     * <pre>\n     * StringUtils.splitPreserveAllTokens(null, *)           = null\n     * StringUtils.splitPreserveAllTokens("", *)             = []\n     * StringUtils.splitPreserveAllTokens("abc def", null)   = ["abc", "def"]\n     * StringUtils.splitPreserveAllTokens("abc def", " ")    = ["abc", "def"]\n     * StringUtils.splitPreserveAllTokens("abc  def", " ")   = ["abc", "", def"]\n     * StringUtils.splitPreserveAllTokens("ab:cd:ef", ":")   = ["ab", "cd", "ef"]\n     * StringUtils.splitPreserveAllTokens("ab:cd:ef:", ":")  = ["ab", "cd", "ef", ""]\n     * StringUtils.splitPreserveAllTokens("ab:cd:ef::", ":") = ["ab", "cd", "ef", "", ""]\n     * StringUtils.splitPreserveAllTokens("ab::cd:ef", ":")  = ["ab", "", cd", "ef"]\n     * StringUtils.splitPreserveAllTokens(":cd:ef", ":")     = ["", cd", "ef"]\n     * StringUtils.splitPreserveAllTokens("::cd:ef", ":")    = ["", "", cd", "ef"]\n     * StringUtils.splitPreserveAllTokens(":cd:ef:", ":")    = ["", cd", "ef", ""]\n     * </pre>\n     *\n     * @param str  the String to parse, may be {@code null}\n     * @param separatorChars  the characters used as the delimiters,\n     *  {@code null} splits on whitespace\n     * @return an array of parsed Strings, {@code null} if null String input\n     * @since 2.1\n     */\n    public static String[] splitPreserveAllTokens(String str, String separatorChars) {\n        return splitWorker(str, separatorChars, -1, true);\n    }\n\n    /**\n     * <p>Splits the provided text into an array with a maximum length,\n     * separators specified, preserving all tokens, including empty tokens\n     * created by adjacent separators.</p>\n     *\n     * <p>The separator is not included in the returned String array.\n     * Adjacent separators are treated as separators for empty tokens.\n     * Adjacent separators are treated as one separator.</p>\n     *\n     * <p>A {@code null} input String returns {@code null}.\n     * A {@code null} separatorChars splits on whitespace.</p>\n     *\n     * <p>If more than {@code max} delimited substrings are found, the last\n     * returned string includes all characters after the first {@code max - 1}\n     * returned strings (including separator characters).</p>\n     *\n     * <pre>\n     * StringUtils.splitPreserveAllTokens(null, *, *)            = null\n     * StringUtils.splitPreserveAllTokens("", *, *)              = []\n     * StringUtils.splitPreserveAllTokens("ab de fg", null, 0)   = ["ab", "cd", "ef"]\n     * StringUtils.splitPreserveAllTokens("ab   de fg", null, 0) = ["ab", "cd", "ef"]\n     * StringUtils.splitPreserveAllTokens("ab:cd:ef", ":", 0)    = ["ab", "cd", "ef"]\n     * StringUtils.splitPreserveAllTokens("ab:cd:ef", ":", 2)    = ["ab", "cd:ef"]\n     * StringUtils.splitPreserveAllTokens("ab   de fg", null, 2) = ["ab", "  de fg"]\n     * StringUtils.splitPreserveAllTokens("ab   de fg", null, 3) = ["ab", "", " de fg"]\n     * StringUtils.splitPreserveAllTokens("ab   de fg", null, 4) = ["ab", "", "", "de fg"]\n     * </pre>\n     *\n     * @param str  the String to parse, may be {@code null}\n     * @param separatorChars  the characters used as the delimiters,\n     *  {@code null} splits on whitespace\n     * @param max  the maximum number of elements to include in the\n     *  array. A zero or negative value implies no limit\n     * @return an array of parsed Strings, {@code null} if null String input\n     * @since 2.1\n     */\n    public static String[] splitPreserveAllTokens(String str, String separatorChars, int max) {\n        return splitWorker(str, separatorChars, max, true);\n    }\n\n    /**\n     * Performs the logic for the {@code split} and\n     * {@code splitPreserveAllTokens} methods that return a maximum array\n     * length.\n     *\n     * @param str  the String to parse, may be {@code null}\n     * @param separatorChars the separate character\n     * @param max  the maximum number of elements to include in the\n     *  array. A zero or negative value implies no limit.\n     * @param preserveAllTokens if {@code true}, adjacent separators are\n     * treated as empty token separators; if {@code false}, adjacent\n     * separators are treated as one separator.\n     * @return an array of parsed Strings, {@code null} if null String input\n     */\n    private static String[] splitWorker(String str, String separatorChars, int max, boolean preserveAllTokens) {\n        // Performance tuned for 2.0 (JDK1.4)\n        // Direct code is quicker than StringTokenizer.\n        // Also, StringTokenizer uses isSpace() not isWhitespace()\n\n        if (str == null) {\n            return null;\n        }\n        int len = str.length();\n        if (len == 0) {\n            return ArrayUtils.EMPTY_STRING_ARRAY;\n        }\n        List<String> list = new ArrayList<String>();\n        int sizePlus1 = 1;\n        int i = 0, start = 0;\n        boolean match = false;\n        boolean lastMatch = false;\n        if (separatorChars == null) {\n            // Null separator means use whitespace\n            while (i < len) {\n                if (Character.isWhitespace(str.charAt(i))) {\n                    if (match || preserveAllTokens) {\n                        lastMatch = true;\n                        if (sizePlus1++ == max) {\n                            i = len;\n                            lastMatch = false;\n                        }\n                        list.add(str.substring(start, i));\n                        match = false;\n                    }\n                    start = ++i;\n                    continue;\n                }\n                lastMatch = false;\n                match = true;\n                i++;\n            }\n        } else if (separatorChars.length() == 1) {\n            // Optimise 1 character case\n            char sep = separatorChars.charAt(0);\n            while (i < len) {\n                if (str.charAt(i) == sep) {\n                    if (match || preserveAllTokens) {\n                        lastMatch = true;\n                        if (sizePlus1++ == max) {\n                            i = len;\n                            lastMatch = false;\n                        }\n                        list.add(str.substring(start, i));\n                        match = false;\n                    }\n                    start = ++i;\n                    continue;\n                }\n                lastMatch = false;\n                match = true;\n                i++;\n            }\n        } else {\n            // standard case\n            while (i < len) {\n                if (separatorChars.indexOf(str.charAt(i)) >= 0) {\n                    if (match || preserveAllTokens) {\n                        lastMatch = true;\n                        if (sizePlus1++ == max) {\n                            i = len;\n                            lastMatch = false;\n                        }\n                        list.add(str.substring(start, i));\n                        match = false;\n                    }\n                    start = ++i;\n                    continue;\n                }\n                lastMatch = false;\n                match = true;\n                i++;\n            }\n        }\n        if (match || preserveAllTokens && lastMatch) {\n            list.add(str.substring(start, i));\n        }\n        return list.toArray(new String[list.size()]);\n    }\n\n    /**\n     * <p>Splits a String by Character type as returned by\n     * {@code java.lang.Character.getType(char)}. Groups of contiguous\n     * characters of the same type are returned as complete tokens.\n     * <pre>\n     * StringUtils.splitByCharacterType(null)         = null\n     * StringUtils.splitByCharacterType("")           = []\n     * StringUtils.splitByCharacterType("ab de fg")   = ["ab", " ", "de", " ", "fg"]\n     * StringUtils.splitByCharacterType("ab   de fg") = ["ab", "   ", "de", " ", "fg"]\n     * StringUtils.splitByCharacterType("ab:cd:ef")   = ["ab", ":", "cd", ":", "ef"]\n     * StringUtils.splitByCharacterType("number5")    = ["number", "5"]\n     * StringUtils.splitByCharacterType("fooBar")     = ["foo", "B", "ar"]\n     * StringUtils.splitByCharacterType("foo200Bar")  = ["foo", "200", "B", "ar"]\n     * StringUtils.splitByCharacterType("ASFRules")   = ["ASFR", "ules"]\n     * </pre>\n     * @param str the String to split, may be {@code null}\n     * @return an array of parsed Strings, {@code null} if null String input\n     * @since 2.4\n     */\n    public static String[] splitByCharacterType(String str) {\n        return splitByCharacterType(str, false);\n    }\n\n    /**\n     * <p>Splits a String by Character type as returned by\n     * {@code java.lang.Character.getType(char)}. Groups of contiguous\n     * characters of the same type are returned as complete tokens, with the\n     * following exception: the character of type\n     * {@code Character.UPPERCASE_LETTER}, if any, immediately\n     * preceding a token of type {@code Character.LOWERCASE_LETTER}\n     * will belong to the following token rather than to the preceding, if any,\n     * {@code Character.UPPERCASE_LETTER} token.\n     * <pre>\n     * StringUtils.splitByCharacterTypeCamelCase(null)         = null\n     * StringUtils.splitByCharacterTypeCamelCase("")           = []\n     * StringUtils.splitByCharacterTypeCamelCase("ab de fg")   = ["ab", " ", "de", " ", "fg"]\n     * StringUtils.splitByCharacterTypeCamelCase("ab   de fg") = ["ab", "   ", "de", " ", "fg"]\n     * StringUtils.splitByCharacterTypeCamelCase("ab:cd:ef")   = ["ab", ":", "cd", ":", "ef"]\n     * StringUtils.splitByCharacterTypeCamelCase("number5")    = ["number", "5"]\n     * StringUtils.splitByCharacterTypeCamelCase("fooBar")     = ["foo", "Bar"]\n     * StringUtils.splitByCharacterTypeCamelCase("foo200Bar")  = ["foo", "200", "Bar"]\n     * StringUtils.splitByCharacterTypeCamelCase("ASFRules")   = ["ASF", "Rules"]\n     * </pre>\n     * @param str the String to split, may be {@code null}\n     * @return an array of parsed Strings, {@code null} if null String input\n     * @since 2.4\n     */\n    public static String[] splitByCharacterTypeCamelCase(String str) {\n        return splitByCharacterType(str, true);\n    }\n\n    /**\n     * <p>Splits a String by Character type as returned by\n     * {@code java.lang.Character.getType(char)}. Groups of contiguous\n     * characters of the same type are returned as complete tokens, with the\n     * following exception: if {@code camelCase} is {@code true},\n     * the character of type {@code Character.UPPERCASE_LETTER}, if any,\n     * immediately preceding a token of type {@code Character.LOWERCASE_LETTER}\n     * will belong to the following token rather than to the preceding, if any,\n     * {@code Character.UPPERCASE_LETTER} token.\n     * @param str the String to split, may be {@code null}\n     * @param camelCase whether to use so-called "camel-case" for letter types\n     * @return an array of parsed Strings, {@code null} if null String input\n     * @since 2.4\n     */\n    private static String[] splitByCharacterType(String str, boolean camelCase) {\n        if (str == null) {\n            return null;\n        }\n        if (str.length() == 0) {\n            return ArrayUtils.EMPTY_STRING_ARRAY;\n        }\n        char[] c = str.toCharArray();\n        List<String> list = new ArrayList<String>();\n        int tokenStart = 0;\n        int currentType = Character.getType(c[tokenStart]);\n        for (int pos = tokenStart + 1; pos < c.length; pos++) {\n            int type = Character.getType(c[pos]);\n            if (type == currentType) {\n                continue;\n            }\n            if (camelCase && type == Character.LOWERCASE_LETTER && currentType == Character.UPPERCASE_LETTER) {\n                int newTokenStart = pos - 1;\n                if (newTokenStart != tokenStart) {\n                    list.add(new String(c, tokenStart, newTokenStart - tokenStart));\n                    tokenStart = newTokenStart;\n                }\n            } else {\n                list.add(new String(c, tokenStart, pos - tokenStart));\n                tokenStart = pos;\n            }\n            currentType = type;\n        }\n        list.add(new String(c, tokenStart, c.length - tokenStart));\n        return list.toArray(new String[list.size()]);\n    }\n\n    // Joining\n    //-----------------------------------------------------------------------\n    /**\n     * <p>Joins the elements of the provided array into a single String\n     * containing the provided list of elements.</p>\n     *\n     * <p>No separator is added to the joined String.\n     * Null objects or empty strings within the array are represented by\n     * empty strings.</p>\n     *\n     * <pre>\n     * StringUtils.join(null)            = null\n     * StringUtils.join([])              = ""\n     * StringUtils.join([null])          = ""\n     * StringUtils.join(["a", "b", "c"]) = "abc"\n     * StringUtils.join([null, "", "a"]) = "a"\n     * </pre>\n     *\n     * @param <T> the specific type of values to join together\n     * @param elements  the values to join together, may be null\n     * @return the joined String, {@code null} if null array input\n     * @since 2.0\n     * @since 3.0 Changed signature to use varargs\n     */\n    public static <T> String join(T... elements) {\n        return join(elements, null);\n    }\n\n    /**\n     * <p>Joins the elements of the provided array into a single String\n     * containing the provided list of elements.</p>\n     *\n     * <p>No delimiter is added before or after the list.\n     * Null objects or empty strings within the array are represented by\n     * empty strings.</p>\n     *\n     * <pre>\n     * StringUtils.join(null, *)               = null\n     * StringUtils.join([], *)                 = ""\n     * StringUtils.join([null], *)             = ""\n     * StringUtils.join(["a", "b", "c"], \';\')  = "a;b;c"\n     * StringUtils.join(["a", "b", "c"], null) = "abc"\n     * StringUtils.join([null, "", "a"], \';\')  = ";;a"\n     * </pre>\n     *\n     * @param array  the array of values to join together, may be null\n     * @param separator  the separator character to use\n     * @return the joined String, {@code null} if null array input\n     * @since 2.0\n     */\n    public static String join(Object[] array, char separator) {\n        if (array == null) {\n            return null;\n        }\n\n        return join(array, separator, 0, array.length);\n    }\n\n    /**\n     * <p>Joins the elements of the provided array into a single String\n     * containing the provided list of elements.</p>\n     *\n     * <p>No delimiter is added before or after the list.\n     * Null objects or empty strings within the array are represented by\n     * empty strings.</p>\n     *\n     * <pre>\n     * StringUtils.join(null, *)               = null\n     * StringUtils.join([], *)                 = ""\n     * StringUtils.join([null], *)             = ""\n     * StringUtils.join(["a", "b", "c"], \';\')  = "a;b;c"\n     * StringUtils.join(["a", "b", "c"], null) = "abc"\n     * StringUtils.join([null, "", "a"], \';\')  = ";;a"\n     * </pre>\n     *\n     * @param array  the array of values to join together, may be null\n     * @param separator  the separator character to use\n     * @param startIndex the first index to start joining from.  It is\n     * an error to pass in an end index past the end of the array\n     * @param endIndex the index to stop joining from (exclusive). It is\n     * an error to pass in an end index past the end of the array\n     * @return the joined String, {@code null} if null array input\n     * @since 2.0\n     */\n    public static String join(Object[] array, char separator, int startIndex, int endIndex) {\n        if (array == null) {\n            return null;\n        }\n        int noOfItems = endIndex - startIndex;\n        if (noOfItems <= 0) {\n            return EMPTY;\n        }\n        \n        StringBuilder buf = new StringBuilder(noOfItems * 16);\n\n        for (int i = startIndex; i < endIndex; i++) {\n            if (i > startIndex) {\n                buf.append(separator);\n            }\n            if (array[i] != null) {\n                buf.append(array[i]);\n            }\n        }\n        return buf.toString();\n    }\n\n    /**\n     * <p>Joins the elements of the provided array into a single String\n     * containing the provided list of elements.</p>\n     *\n     * <p>No delimiter is added before or after the list.\n     * A {@code null} separator is the same as an empty String ("").\n     * Null objects or empty strings within the array are represented by\n     * empty strings.</p>\n     *\n     * <pre>\n     * StringUtils.join(null, *)                = null\n     * StringUtils.join([], *)                  = ""\n     * StringUtils.join([null], *)              = ""\n     * StringUtils.join(["a", "b", "c"], "--")  = "a--b--c"\n     * StringUtils.join(["a", "b", "c"], null)  = "abc"\n     * StringUtils.join(["a", "b", "c"], "")    = "abc"\n     * StringUtils.join([null, "", "a"], \',\')   = ",,a"\n     * </pre>\n     *\n     * @param array  the array of values to join together, may be null\n     * @param separator  the separator character to use, null treated as ""\n     * @return the joined String, {@code null} if null array input\n     */\n    public static String join(Object[] array, String separator) {\n        if (array == null) {\n            return null;\n        }\n        return join(array, separator, 0, array.length);\n    }\n\n    /**\n     * <p>Joins the elements of the provided array into a single String\n     * containing the provided list of elements.</p>\n     *\n     * <p>No delimiter is added before or after the list.\n     * A {@code null} separator is the same as an empty String ("").\n     * Null objects or empty strings within the array are represented by\n     * empty strings.</p>\n     *\n     * <pre>\n     * StringUtils.join(null, *)                = null\n     * StringUtils.join([], *)                  = ""\n     * StringUtils.join([null], *)              = ""\n     * StringUtils.join(["a", "b", "c"], "--")  = "a--b--c"\n     * StringUtils.join(["a", "b", "c"], null)  = "abc"\n     * StringUtils.join(["a", "b", "c"], "")    = "abc"\n     * StringUtils.join([null, "", "a"], \',\')   = ",,a"\n     * </pre>\n     *\n     * @param array  the array of values to join together, may be null\n     * @param separator  the separator character to use, null treated as ""\n     * @param startIndex the first index to start joining from.  It is\n     * an error to pass in an end index past the end of the array\n     * @param endIndex the index to stop joining from (exclusive). It is\n     * an error to pass in an end index past the end of the array\n     * @return the joined String, {@code null} if null array input\n     */\n    public static String join(Object[] array, String separator, int startIndex, int endIndex) {\n        if (array == null) {\n            return null;\n        }\n        if (separator == null) {\n            separator = EMPTY;\n        }\n\n        // endIndex - startIndex > 0:   Len = NofStrings *(len(firstString) + len(separator))\n        //           (Assuming that all Strings are roughly equally long)\n        int noOfItems = endIndex - startIndex;\n        if (noOfItems <= 0) {\n            return EMPTY;\n        }\n\n        StringBuilder buf = new StringBuilder(noOfItems * 16);\n\n        for (int i = startIndex; i < endIndex; i++) {\n            if (i > startIndex) {\n                buf.append(separator);\n            }\n            if (array[i] != null) {\n                buf.append(array[i]);\n            }\n        }\n        return buf.toString();\n    }\n\n    /**\n     * <p>Joins the elements of the provided {@code Iterator} into\n     * a single String containing the provided elements.</p>\n     *\n     * <p>No delimiter is added before or after the list. Null objects or empty\n     * strings within the iteration are represented by empty strings.</p>\n     *\n     * <p>See the examples here: {@link #join(Object[],char)}. </p>\n     *\n     * @param iterator  the {@code Iterator} of values to join together, may be null\n     * @param separator  the separator character to use\n     * @return the joined String, {@code null} if null iterator input\n     * @since 2.0\n     */\n    public static String join(Iterator<?> iterator, char separator) {\n\n        // handle null, zero and one elements before building a buffer\n        if (iterator == null) {\n            return null;\n        }\n        if (!iterator.hasNext()) {\n            return EMPTY;\n        }\n        Object first = iterator.next();\n        if (!iterator.hasNext()) {\n            return ObjectUtils.toString(first);\n        }\n\n        // two or more elements\n        StringBuilder buf = new StringBuilder(256); // Java default is 16, probably too small\n        if (first != null) {\n            buf.append(first);\n        }\n\n        while (iterator.hasNext()) {\n            buf.append(separator);\n            Object obj = iterator.next();\n            if (obj != null) {\n                buf.append(obj);\n            }\n        }\n\n        return buf.toString();\n    }\n\n    /**\n     * <p>Joins the elements of the provided {@code Iterator} into\n     * a single String containing the provided elements.</p>\n     *\n     * <p>No delimiter is added before or after the list.\n     * A {@code null} separator is the same as an empty String ("").</p>\n     *\n     * <p>See the examples here: {@link #join(Object[],String)}. </p>\n     *\n     * @param iterator  the {@code Iterator} of values to join together, may be null\n     * @param separator  the separator character to use, null treated as ""\n     * @return the joined String, {@code null} if null iterator input\n     */\n    public static String join(Iterator<?> iterator, String separator) {\n\n        // handle null, zero and one elements before building a buffer\n        if (iterator == null) {\n            return null;\n        }\n        if (!iterator.hasNext()) {\n            return EMPTY;\n        }\n        Object first = iterator.next();\n        if (!iterator.hasNext()) {\n            return ObjectUtils.toString(first);\n        }\n\n        // two or more elements\n        StringBuilder buf = new StringBuilder(256); // Java default is 16, probably too small\n        if (first != null) {\n            buf.append(first);\n        }\n\n        while (iterator.hasNext()) {\n            if (separator != null) {\n                buf.append(separator);\n            }\n            Object obj = iterator.next();\n            if (obj != null) {\n                buf.append(obj);\n            }\n        }\n        return buf.toString();\n    }\n\n    /**\n     * <p>Joins the elements of the provided {@code Iterable} into\n     * a single String containing the provided elements.</p>\n     *\n     * <p>No delimiter is added before or after the list. Null objects or empty\n     * strings within the iteration are represented by empty strings.</p>\n     *\n     * <p>See the examples here: {@link #join(Object[],char)}. </p>\n     *\n     * @param iterable  the {@code Iterable} providing the values to join together, may be null\n     * @param separator  the separator character to use\n     * @return the joined String, {@code null} if null iterator input\n     * @since 2.3\n     */\n    public static String join(Iterable<?> iterable, char separator) {\n        if (iterable == null) {\n            return null;\n        }\n        return join(iterable.iterator(), separator);\n    }\n\n    /**\n     * <p>Joins the elements of the provided {@code Iterable} into\n     * a single String containing the provided elements.</p>\n     *\n     * <p>No delimiter is added before or after the list.\n     * A {@code null} separator is the same as an empty String ("").</p>\n     *\n     * <p>See the examples here: {@link #join(Object[],String)}. </p>\n     *\n     * @param iterable  the {@code Iterable} providing the values to join together, may be null\n     * @param separator  the separator character to use, null treated as ""\n     * @return the joined String, {@code null} if null iterator input\n     * @since 2.3\n     */\n    public static String join(Iterable<?> iterable, String separator) {\n        if (iterable == null) {\n            return null;\n        }\n        return join(iterable.iterator(), separator);\n    }\n\n    // Delete\n    //-----------------------------------------------------------------------\n    /**\n     * <p>Deletes all whitespaces from a String as defined by\n     * {@link Character#isWhitespace(char)}.</p>\n     *\n     * <pre>\n     * StringUtils.deleteWhitespace(null)         = null\n     * StringUtils.deleteWhitespace("")           = ""\n     * StringUtils.deleteWhitespace("abc")        = "abc"\n     * StringUtils.deleteWhitespace("   ab  c  ") = "abc"\n     * </pre>\n     *\n     * @param str  the String to delete whitespace from, may be null\n     * @return the String without whitespaces, {@code null} if null String input\n     */\n    public static String deleteWhitespace(String str) {\n        if (isEmpty(str)) {\n            return str;\n        }\n        int sz = str.length();\n        char[] chs = new char[sz];\n        int count = 0;\n        for (int i = 0; i < sz; i++) {\n            if (!Character.isWhitespace(str.charAt(i))) {\n                chs[count++] = str.charAt(i);\n            }\n        }\n        if (count == sz) {\n            return str;\n        }\n        return new String(chs, 0, count);\n    }\n\n    // Remove\n    //-----------------------------------------------------------------------\n    /**\n     * <p>Removes a substring only if it is at the beginning of a source string,\n     * otherwise returns the source string.</p>\n     *\n     * <p>A {@code null} source string will return {@code null}.\n     * An empty ("") source string will return the empty string.\n     * A {@code null} search string will return the source string.</p>\n     *\n     * <pre>\n     * StringUtils.removeStart(null, *)      = null\n     * StringUtils.removeStart("", *)        = ""\n     * StringUtils.removeStart(*, null)      = *\n     * StringUtils.removeStart("www.domain.com", "www.")   = "domain.com"\n     * StringUtils.removeStart("domain.com", "www.")       = "domain.com"\n     * StringUtils.removeStart("www.domain.com", "domain") = "www.domain.com"\n     * StringUtils.removeStart("abc", "")    = "abc"\n     * </pre>\n     *\n     * @param str  the source String to search, may be null\n     * @param remove  the String to search for and remove, may be null\n     * @return the substring with the string removed if found,\n     *  {@code null} if null String input\n     * @since 2.1\n     */\n    public static String removeStart(String str, String remove) {\n        if (isEmpty(str) || isEmpty(remove)) {\n            return str;\n        }\n        if (str.startsWith(remove)){\n            return str.substring(remove.length());\n        }\n        return str;\n    }\n\n    /**\n     * <p>Case insensitive removal of a substring if it is at the beginning of a source string,\n     * otherwise returns the source string.</p>\n     *\n     * <p>A {@code null} source string will return {@code null}.\n     * An empty ("") source string will return the empty string.\n     * A {@code null} search string will return the source string.</p>\n     *\n     * <pre>\n     * StringUtils.removeStartIgnoreCase(null, *)      = null\n     * StringUtils.removeStartIgnoreCase("", *)        = ""\n     * StringUtils.removeStartIgnoreCase(*, null)      = *\n     * StringUtils.removeStartIgnoreCase("www.domain.com", "www.")   = "domain.com"\n     * StringUtils.removeStartIgnoreCase("www.domain.com", "WWW.")   = "domain.com"\n     * StringUtils.removeStartIgnoreCase("domain.com", "www.")       = "domain.com"\n     * StringUtils.removeStartIgnoreCase("www.domain.com", "domain") = "www.domain.com"\n     * StringUtils.removeStartIgnoreCase("abc", "")    = "abc"\n     * </pre>\n     *\n     * @param str  the source String to search, may be null\n     * @param remove  the String to search for (case insensitive) and remove, may be null\n     * @return the substring with the string removed if found,\n     *  {@code null} if null String input\n     * @since 2.4\n     */\n    public static String removeStartIgnoreCase(String str, String remove) {\n        if (isEmpty(str) || isEmpty(remove)) {\n            return str;\n        }\n        if (startsWithIgnoreCase(str, remove)) {\n            return str.substring(remove.length());\n        }\n        return str;\n    }\n\n    /**\n     * <p>Removes a substring only if it is at the end of a source string,\n     * otherwise returns the source string.</p>\n     *\n     * <p>A {@code null} source string will return {@code null}.\n     * An empty ("") source string will return the empty string.\n     * A {@code null} search string will return the source string.</p>\n     *\n     * <pre>\n     * StringUtils.removeEnd(null, *)      = null\n     * StringUtils.removeEnd("", *)        = ""\n     * StringUtils.removeEnd(*, null)      = *\n     * StringUtils.removeEnd("www.domain.com", ".com.")  = "www.domain.com"\n     * StringUtils.removeEnd("www.domain.com", ".com")   = "www.domain"\n     * StringUtils.removeEnd("www.domain.com", "domain") = "www.domain.com"\n     * StringUtils.removeEnd("abc", "")    = "abc"\n     * </pre>\n     *\n     * @param str  the source String to search, may be null\n     * @param remove  the String to search for and remove, may be null\n     * @return the substring with the string removed if found,\n     *  {@code null} if null String input\n     * @since 2.1\n     */\n    public static String removeEnd(String str, String remove) {\n        if (isEmpty(str) || isEmpty(remove)) {\n            return str;\n        }\n        if (str.endsWith(remove)) {\n            return str.substring(0, str.length() - remove.length());\n        }\n        return str;\n    }\n\n    /**\n     * <p>Case insensitive removal of a substring if it is at the end of a source string,\n     * otherwise returns the source string.</p>\n     *\n     * <p>A {@code null} source string will return {@code null}.\n     * An empty ("") source string will return the empty string.\n     * A {@code null} search string will return the source string.</p>\n     *\n     * <pre>\n     * StringUtils.removeEndIgnoreCase(null, *)      = null\n     * StringUtils.removeEndIgnoreCase("", *)        = ""\n     * StringUtils.removeEndIgnoreCase(*, null)      = *\n     * StringUtils.removeEndIgnoreCase("www.domain.com", ".com.")  = "www.domain.com"\n     * StringUtils.removeEndIgnoreCase("www.domain.com", ".com")   = "www.domain"\n     * StringUtils.removeEndIgnoreCase("www.domain.com", "domain") = "www.domain.com"\n     * StringUtils.removeEndIgnoreCase("abc", "")    = "abc"\n     * StringUtils.removeEndIgnoreCase("www.domain.com", ".COM") = "www.domain")\n     * StringUtils.removeEndIgnoreCase("www.domain.COM", ".com") = "www.domain")\n     * </pre>\n     *\n     * @param str  the source String to search, may be null\n     * @param remove  the String to search for (case insensitive) and remove, may be null\n     * @return the substring with the string removed if found,\n     *  {@code null} if null String input\n     * @since 2.4\n     */\n    public static String removeEndIgnoreCase(String str, String remove) {\n        if (isEmpty(str) || isEmpty(remove)) {\n            return str;\n        }\n        if (endsWithIgnoreCase(str, remove)) {\n            return str.substring(0, str.length() - remove.length());\n        }\n        return str;\n    }\n\n    /**\n     * <p>Removes all occurrences of a substring from within the source string.</p>\n     *\n     * <p>A {@code null} source string will return {@code null}.\n     * An empty ("") source string will return the empty string.\n     * A {@code null} remove string will return the source string.\n     * An empty ("") remove string will return the source string.</p>\n     *\n     * <pre>\n     * StringUtils.remove(null, *)        = null\n     * StringUtils.remove("", *)          = ""\n     * StringUtils.remove(*, null)        = *\n     * StringUtils.remove(*, "")          = *\n     * StringUtils.remove("queued", "ue") = "qd"\n     * StringUtils.remove("queued", "zz") = "queued"\n     * </pre>\n     *\n     * @param str  the source String to search, may be null\n     * @param remove  the String to search for and remove, may be null\n     * @return the substring with the string removed if found,\n     *  {@code null} if null String input\n     * @since 2.1\n     */\n    public static String remove(String str, String remove) {\n        if (isEmpty(str) || isEmpty(remove)) {\n            return str;\n        }\n        return replace(str, remove, EMPTY, -1);\n    }\n\n    /**\n     * <p>Removes all occurrences of a character from within the source string.</p>\n     *\n     * <p>A {@code null} source string will return {@code null}.\n     * An empty ("") source string will return the empty string.</p>\n     *\n     * <pre>\n     * StringUtils.remove(null, *)       = null\n     * StringUtils.remove("", *)         = ""\n     * StringUtils.remove("queued", \'u\') = "qeed"\n     * StringUtils.remove("queued", \'z\') = "queued"\n     * </pre>\n     *\n     * @param str  the source String to search, may be null\n     * @param remove  the char to search for and remove, may be null\n     * @return the substring with the char removed if found,\n     *  {@code null} if null String input\n     * @since 2.1\n     */\n    public static String remove(String str, char remove) {\n        if (isEmpty(str) || str.indexOf(remove) == INDEX_NOT_FOUND) {\n            return str;\n        }\n        char[] chars = str.toCharArray();\n        int pos = 0;\n        for (int i = 0; i < chars.length; i++) {\n            if (chars[i] != remove) {\n                chars[pos++] = chars[i];\n            }\n        }\n        return new String(chars, 0, pos);\n    }\n\n    // Replacing\n    //-----------------------------------------------------------------------\n    /**\n     * <p>Replaces a String with another String inside a larger String, once.</p>\n     *\n     * <p>A {@code null} reference passed to this method is a no-op.</p>\n     *\n     * <pre>\n     * StringUtils.replaceOnce(null, *, *)        = null\n     * StringUtils.replaceOnce("", *, *)          = ""\n     * StringUtils.replaceOnce("any", null, *)    = "any"\n     * StringUtils.replaceOnce("any", *, null)    = "any"\n     * StringUtils.replaceOnce("any", "", *)      = "any"\n     * StringUtils.replaceOnce("aba", "a", null)  = "aba"\n     * StringUtils.replaceOnce("aba", "a", "")    = "ba"\n     * StringUtils.replaceOnce("aba", "a", "z")   = "zba"\n     * </pre>\n     *\n     * @see #replace(String text, String searchString, String replacement, int max)\n     * @param text  text to search and replace in, may be null\n     * @param searchString  the String to search for, may be null\n     * @param replacement  the String to replace with, may be null\n     * @return the text with any replacements processed,\n     *  {@code null} if null String input\n     */\n    public static String replaceOnce(String text, String searchString, String replacement) {\n        return replace(text, searchString, replacement, 1);\n    }\n\n    /**\n     * <p>Replaces all occurrences of a String within another String.</p>\n     *\n     * <p>A {@code null} reference passed to this method is a no-op.</p>\n     *\n     * <pre>\n     * StringUtils.replace(null, *, *)        = null\n     * StringUtils.replace("", *, *)          = ""\n     * StringUtils.replace("any", null, *)    = "any"\n     * StringUtils.replace("any", *, null)    = "any"\n     * StringUtils.replace("any", "", *)      = "any"\n     * StringUtils.replace("aba", "a", null)  = "aba"\n     * StringUtils.replace("aba", "a", "")    = "b"\n     * StringUtils.replace("aba", "a", "z")   = "zbz"\n     * </pre>\n     *\n     * @see #replace(String text, String searchString, String replacement, int max)\n     * @param text  text to search and replace in, may be null\n     * @param searchString  the String to search for, may be null\n     * @param replacement  the String to replace it with, may be null\n     * @return the text with any replacements processed,\n     *  {@code null} if null String input\n     */\n    public static String replace(String text, String searchString, String replacement) {\n        return replace(text, searchString, replacement, -1);\n    }\n\n    /**\n     * <p>Replaces a String with another String inside a larger String,\n     * for the first {@code max} values of the search String.</p>\n     *\n     * <p>A {@code null} reference passed to this method is a no-op.</p>\n     *\n     * <pre>\n     * StringUtils.replace(null, *, *, *)         = null\n     * StringUtils.replace("", *, *, *)           = ""\n     * StringUtils.replace("any", null, *, *)     = "any"\n     * StringUtils.replace("any", *, null, *)     = "any"\n     * StringUtils.replace("any", "", *, *)       = "any"\n     * StringUtils.replace("any", *, *, 0)        = "any"\n     * StringUtils.replace("abaa", "a", null, -1) = "abaa"\n     * StringUtils.replace("abaa", "a", "", -1)   = "b"\n     * StringUtils.replace("abaa", "a", "z", 0)   = "abaa"\n     * StringUtils.replace("abaa", "a", "z", 1)   = "zbaa"\n     * StringUtils.replace("abaa", "a", "z", 2)   = "zbza"\n     * StringUtils.replace("abaa", "a", "z", -1)  = "zbzz"\n     * </pre>\n     *\n     * @param text  text to search and replace in, may be null\n     * @param searchString  the String to search for, may be null\n     * @param replacement  the String to replace it with, may be null\n     * @param max  maximum number of values to replace, or {@code -1} if no maximum\n     * @return the text with any replacements processed,\n     *  {@code null} if null String input\n     */\n    public static String replace(String text, String searchString, String replacement, int max) {\n        if (isEmpty(text) || isEmpty(searchString) || replacement == null || max == 0) {\n            return text;\n        }\n        int start = 0;\n        int end = text.indexOf(searchString, start);\n        if (end == INDEX_NOT_FOUND) {\n            return text;\n        }\n        int replLength = searchString.length();\n        int increase = replacement.length() - replLength;\n        increase = increase < 0 ? 0 : increase;\n        increase *= max < 0 ? 16 : max > 64 ? 64 : max;\n        StringBuilder buf = new StringBuilder(text.length() + increase);\n        while (end != INDEX_NOT_FOUND) {\n            buf.append(text.substring(start, end)).append(replacement);\n            start = end + replLength;\n            if (--max == 0) {\n                break;\n            }\n            end = text.indexOf(searchString, start);\n        }\n        buf.append(text.substring(start));\n        return buf.toString();\n    }\n\n    /**\n     * <p>\n     * Replaces all occurrences of Strings within another String.\n     * </p>\n     *\n     * <p>\n     * A {@code null} reference passed to this method is a no-op, or if\n     * any "search string" or "string to replace" is null, that replace will be\n     * ignored. This will not repeat. For repeating replaces, call the\n     * overloaded method.\n     * </p>\n     *\n     * <pre>\n     *  StringUtils.replaceEach(null, *, *)        = null\n     *  StringUtils.replaceEach("", *, *)          = ""\n     *  StringUtils.replaceEach("aba", null, null) = "aba"\n     *  StringUtils.replaceEach("aba", new String[0], null) = "aba"\n     *  StringUtils.replaceEach("aba", null, new String[0]) = "aba"\n     *  StringUtils.replaceEach("aba", new String[]{"a"}, null)  = "aba"\n     *  StringUtils.replaceEach("aba", new String[]{"a"}, new String[]{""})  = "b"\n     *  StringUtils.replaceEach("aba", new String[]{null}, new String[]{"a"})  = "aba"\n     *  StringUtils.replaceEach("abcde", new String[]{"ab", "d"}, new String[]{"w", "t"})  = "wcte"\n     *  (example of how it does not repeat)\n     *  StringUtils.replaceEach("abcde", new String[]{"ab", "d"}, new String[]{"d", "t"})  = "dcte"\n     * </pre>\n     *\n     * @param text\n     *            text to search and replace in, no-op if null\n     * @param searchList\n     *            the Strings to search for, no-op if null\n     * @param replacementList\n     *            the Strings to replace them with, no-op if null\n     * @return the text with any replacements processed, {@code null} if\n     *         null String input\n     * @throws IllegalArgumentException\n     *             if the lengths of the arrays are not the same (null is ok,\n     *             and/or size 0)\n     * @since 2.4\n     */\n    public static String replaceEach(String text, String[] searchList, String[] replacementList) {\n        return replaceEach(text, searchList, replacementList, false, 0);\n    }\n\n    /**\n     * <p>\n     * Replaces all occurrences of Strings within another String.\n     * </p>\n     *\n     * <p>\n     * A {@code null} reference passed to this method is a no-op, or if\n     * any "search string" or "string to replace" is null, that replace will be\n     * ignored. \n     * </p>\n     *\n     * <pre>\n     *  StringUtils.replaceEach(null, *, *, *) = null\n     *  StringUtils.replaceEach("", *, *, *) = ""\n     *  StringUtils.replaceEach("aba", null, null, *) = "aba"\n     *  StringUtils.replaceEach("aba", new String[0], null, *) = "aba"\n     *  StringUtils.replaceEach("aba", null, new String[0], *) = "aba"\n     *  StringUtils.replaceEach("aba", new String[]{"a"}, null, *) = "aba"\n     *  StringUtils.replaceEach("aba", new String[]{"a"}, new String[]{""}, *) = "b"\n     *  StringUtils.replaceEach("aba", new String[]{null}, new String[]{"a"}, *) = "aba"\n     *  StringUtils.replaceEach("abcde", new String[]{"ab", "d"}, new String[]{"w", "t"}, *) = "wcte"\n     *  (example of how it repeats)\n     *  StringUtils.replaceEach("abcde", new String[]{"ab", "d"}, new String[]{"d", "t"}, false) = "dcte"\n     *  StringUtils.replaceEach("abcde", new String[]{"ab", "d"}, new String[]{"d", "t"}, true) = "tcte"\n     *  StringUtils.replaceEach("abcde", new String[]{"ab", "d"}, new String[]{"d", "ab"}, true) = IllegalStateException\n     *  StringUtils.replaceEach("abcde", new String[]{"ab", "d"}, new String[]{"d", "ab"}, false) = "dcabe"\n     * </pre>\n     *\n     * @param text\n     *            text to search and replace in, no-op if null\n     * @param searchList\n     *            the Strings to search for, no-op if null\n     * @param replacementList\n     *            the Strings to replace them with, no-op if null\n     * @return the text with any replacements processed, {@code null} if\n     *         null String input\n     * @throws IllegalStateException\n     *             if the search is repeating and there is an endless loop due\n     *             to outputs of one being inputs to another\n     * @throws IllegalArgumentException\n     *             if the lengths of the arrays are not the same (null is ok,\n     *             and/or size 0)\n     * @since 2.4\n     */\n    public static String replaceEachRepeatedly(String text, String[] searchList, String[] replacementList) {\n        // timeToLive should be 0 if not used or nothing to replace, else it\'s\n        // the length of the replace array\n        int timeToLive = searchList == null ? 0 : searchList.length;\n        return replaceEach(text, searchList, replacementList, true, timeToLive);\n    }\n\n    /**\n     * <p>\n     * Replaces all occurrences of Strings within another String.\n     * </p>\n     *\n     * <p>\n     * A {@code null} reference passed to this method is a no-op, or if\n     * any "search string" or "string to replace" is null, that replace will be\n     * ignored.\n     * </p>\n     *\n     * <pre>\n     *  StringUtils.replaceEach(null, *, *, *) = null\n     *  StringUtils.replaceEach("", *, *, *) = ""\n     *  StringUtils.replaceEach("aba", null, null, *) = "aba"\n     *  StringUtils.replaceEach("aba", new String[0], null, *) = "aba"\n     *  StringUtils.replaceEach("aba", null, new String[0], *) = "aba"\n     *  StringUtils.replaceEach("aba", new String[]{"a"}, null, *) = "aba"\n     *  StringUtils.replaceEach("aba", new String[]{"a"}, new String[]{""}, *) = "b"\n     *  StringUtils.replaceEach("aba", new String[]{null}, new String[]{"a"}, *) = "aba"\n     *  StringUtils.replaceEach("abcde", new String[]{"ab", "d"}, new String[]{"w", "t"}, *) = "wcte"\n     *  (example of how it repeats)\n     *  StringUtils.replaceEach("abcde", new String[]{"ab", "d"}, new String[]{"d", "t"}, false) = "dcte"\n     *  StringUtils.replaceEach("abcde", new String[]{"ab", "d"}, new String[]{"d", "t"}, true) = "tcte"\n     *  StringUtils.replaceEach("abcde", new String[]{"ab", "d"}, new String[]{"d", "ab"}, *) = IllegalStateException\n     * </pre>\n     *\n     * @param text\n     *            text to search and replace in, no-op if null\n     * @param searchList\n     *            the Strings to search for, no-op if null\n     * @param replacementList\n     *            the Strings to replace them with, no-op if null\n     * @param repeat if true, then replace repeatedly\n     *       until there are no more possible replacements or timeToLive < 0\n     * @param timeToLive\n     *            if less than 0 then there is a circular reference and endless\n     *            loop\n     * @return the text with any replacements processed, {@code null} if\n     *         null String input\n     * @throws IllegalStateException\n     *             if the search is repeating and there is an endless loop due\n     *             to outputs of one being inputs to another\n     * @throws IllegalArgumentException\n     *             if the lengths of the arrays are not the same (null is ok,\n     *             and/or size 0)\n     * @since 2.4\n     */\n    private static String replaceEach(\n            String text, String[] searchList, String[] replacementList, boolean repeat, int timeToLive) {\n\n        // mchyzer Performance note: This creates very few new objects (one major goal)\n        // let me know if there are performance requests, we can create a harness to measure\n\n        if (text == null || text.length() == 0 || searchList == null ||\n                searchList.length == 0 || replacementList == null || replacementList.length == 0) {\n            return text;\n        }\n\n        // if recursing, this shouldn\'t be less than 0\n        if (timeToLive < 0) {\n            throw new IllegalStateException("Aborting to protect against StackOverflowError - " +\n                                            "output of one loop is the input of another");\n        }\n\n        int searchLength = searchList.length;\n        int replacementLength = replacementList.length;\n\n        // make sure lengths are ok, these need to be equal\n        if (searchLength != replacementLength) {\n            throw new IllegalArgumentException("Search and Replace array lengths don\'t match: "\n                + searchLength\n                + " vs "\n                + replacementLength);\n        }\n\n        // keep track of which still have matches\n        boolean[] noMoreMatchesForReplIndex = new boolean[searchLength];\n\n        // index on index that the match was found\n        int textIndex = -1;\n        int replaceIndex = -1;\n        int tempIndex = -1;\n\n        // index of replace array that will replace the search string found\n        // NOTE: logic duplicated below START\n        for (int i = 0; i < searchLength; i++) {\n            if (noMoreMatchesForReplIndex[i] || searchList[i] == null ||\n                    searchList[i].length() == 0 || replacementList[i] == null) {\n                continue;\n            }\n            tempIndex = text.indexOf(searchList[i]);\n\n            // see if we need to keep searching for this\n            if (tempIndex == -1) {\n                noMoreMatchesForReplIndex[i] = true;\n            } else {\n                if (textIndex == -1 || tempIndex < textIndex) {\n                    textIndex = tempIndex;\n                    replaceIndex = i;\n                }\n            }\n        }\n        // NOTE: logic mostly below END\n\n        // no search strings found, we are done\n        if (textIndex == -1) {\n            return text;\n        }\n\n        int start = 0;\n\n        // get a good guess on the size of the result buffer so it doesn\'t have to double if it goes over a bit\n        int increase = 0;\n\n        // count the replacement text elements that are larger than their corresponding text being replaced\n        for (int i = 0; i < searchList.length; i++) {\n            if (searchList[i] == null || replacementList[i] == null) {\n                continue;\n            }\n            int greater = replacementList[i].length() - searchList[i].length();\n            if (greater > 0) {\n                increase += 3 * greater; // assume 3 matches\n            }\n        }\n        // have upper-bound at 20% increase, then let Java take over\n        increase = Math.min(increase, text.length() / 5);\n\n        StringBuilder buf = new StringBuilder(text.length() + increase);\n\n        while (textIndex != -1) {\n\n            for (int i = start; i < textIndex; i++) {\n                buf.append(text.charAt(i));\n            }\n            buf.append(replacementList[replaceIndex]);\n\n            start = textIndex + searchList[replaceIndex].length();\n\n            textIndex = -1;\n            replaceIndex = -1;\n            tempIndex = -1;\n            // find the next earliest match\n            // NOTE: logic mostly duplicated above START\n            for (int i = 0; i < searchLength; i++) {\n                if (noMoreMatchesForReplIndex[i] || searchList[i] == null ||\n                        searchList[i].length() == 0 || replacementList[i] == null) {\n                    continue;\n                }\n                tempIndex = text.indexOf(searchList[i], start);\n\n                // see if we need to keep searching for this\n                if (tempIndex == -1) {\n                    noMoreMatchesForReplIndex[i] = true;\n                } else {\n                    if (textIndex == -1 || tempIndex < textIndex) {\n                        textIndex = tempIndex;\n                        replaceIndex = i;\n                    }\n                }\n            }\n            // NOTE: logic duplicated above END\n\n        }\n        int textLength = text.length();\n        for (int i = start; i < textLength; i++) {\n            buf.append(text.charAt(i));\n        }\n        String result = buf.toString();\n        if (!repeat) {\n            return result;\n        }\n\n        return replaceEach(result, searchList, replacementList, repeat, timeToLive - 1);\n    }\n\n    // Replace, character based\n    //-----------------------------------------------------------------------\n    /**\n     * <p>Replaces all occurrences of a character in a String with another.\n     * This is a null-safe version of {@link String#replace(char, char)}.</p>\n     *\n     * <p>A {@code null} string input returns {@code null}.\n     * An empty ("") string input returns an empty string.</p>\n     *\n     * <pre>\n     * StringUtils.replaceChars(null, *, *)        = null\n     * StringUtils.replaceChars("", *, *)          = ""\n     * StringUtils.replaceChars("abcba", \'b\', \'y\') = "aycya"\n     * StringUtils.replaceChars("abcba", \'z\', \'y\') = "abcba"\n     * </pre>\n     *\n     * @param str  String to replace characters in, may be null\n     * @param searchChar  the character to search for, may be null\n     * @param replaceChar  the character to replace, may be null\n     * @return modified String, {@code null} if null string input\n     * @since 2.0\n     */\n    public static String replaceChars(String str, char searchChar, char replaceChar) {\n        if (str == null) {\n            return null;\n        }\n        return str.replace(searchChar, replaceChar);\n    }\n\n    /**\n     * <p>Replaces multiple characters in a String in one go.\n     * This method can also be used to delete characters.</p>\n     *\n     * <p>For example:<br />\n     * <code>replaceChars(&quot;hello&quot;, &quot;ho&quot;, &quot;jy&quot;) = jelly</code>.</p>\n     *\n     * <p>A {@code null} string input returns {@code null}.\n     * An empty ("") string input returns an empty string.\n     * A null or empty set of search characters returns the input string.</p>\n     *\n     * <p>The length of the search characters should normally equal the length\n     * of the replace characters.\n     * If the search characters is longer, then the extra search characters\n     * are deleted.\n     * If the search characters is shorter, then the extra replace characters\n     * are ignored.</p>\n     *\n     * <pre>\n     * StringUtils.replaceChars(null, *, *)           = null\n     * StringUtils.replaceChars("", *, *)             = ""\n     * StringUtils.replaceChars("abc", null, *)       = "abc"\n     * StringUtils.replaceChars("abc", "", *)         = "abc"\n     * StringUtils.replaceChars("abc", "b", null)     = "ac"\n     * StringUtils.replaceChars("abc", "b", "")       = "ac"\n     * StringUtils.replaceChars("abcba", "bc", "yz")  = "ayzya"\n     * StringUtils.replaceChars("abcba", "bc", "y")   = "ayya"\n     * StringUtils.replaceChars("abcba", "bc", "yzx") = "ayzya"\n     * </pre>\n     *\n     * @param str  String to replace characters in, may be null\n     * @param searchChars  a set of characters to search for, may be null\n     * @param replaceChars  a set of characters to replace, may be null\n     * @return modified String, {@code null} if null string input\n     * @since 2.0\n     */\n    public static String replaceChars(String str, String searchChars, String replaceChars) {\n        if (isEmpty(str) || isEmpty(searchChars)) {\n            return str;\n        }\n        if (replaceChars == null) {\n            replaceChars = EMPTY;\n        }\n        boolean modified = false;\n        int replaceCharsLength = replaceChars.length();\n        int strLength = str.length();\n        StringBuilder buf = new StringBuilder(strLength);\n        for (int i = 0; i < strLength; i++) {\n            char ch = str.charAt(i);\n            int index = searchChars.indexOf(ch);\n            if (index >= 0) {\n                modified = true;\n                if (index < replaceCharsLength) {\n                    buf.append(replaceChars.charAt(index));\n                }\n            } else {\n                buf.append(ch);\n            }\n        }\n        if (modified) {\n            return buf.toString();\n        }\n        return str;\n    }\n\n    // Overlay\n    //-----------------------------------------------------------------------\n    /**\n     * <p>Overlays part of a String with another String.</p>\n     *\n     * <p>A {@code null} string input returns {@code null}.\n     * A negative index is treated as zero.\n     * An index greater than the string length is treated as the string length.\n     * The start index is always the smaller of the two indices.</p>\n     *\n     * <pre>\n     * StringUtils.overlay(null, *, *, *)            = null\n     * StringUtils.overlay("", "abc", 0, 0)          = "abc"\n     * StringUtils.overlay("abcdef", null, 2, 4)     = "abef"\n     * StringUtils.overlay("abcdef", "", 2, 4)       = "abef"\n     * StringUtils.overlay("abcdef", "", 4, 2)       = "abef"\n     * StringUtils.overlay("abcdef", "zzzz", 2, 4)   = "abzzzzef"\n     * StringUtils.overlay("abcdef", "zzzz", 4, 2)   = "abzzzzef"\n     * StringUtils.overlay("abcdef", "zzzz", -1, 4)  = "zzzzef"\n     * StringUtils.overlay("abcdef", "zzzz", 2, 8)   = "abzzzz"\n     * StringUtils.overlay("abcdef", "zzzz", -2, -3) = "zzzzabcdef"\n     * StringUtils.overlay("abcdef", "zzzz", 8, 10)  = "abcdefzzzz"\n     * </pre>\n     *\n     * @param str  the String to do overlaying in, may be null\n     * @param overlay  the String to overlay, may be null\n     * @param start  the position to start overlaying at\n     * @param end  the position to stop overlaying before\n     * @return overlayed String, {@code null} if null String input\n     * @since 2.0\n     */\n    public static String overlay(String str, String overlay, int start, int end) {\n        if (str == null) {\n            return null;\n        }\n        if (overlay == null) {\n            overlay = EMPTY;\n        }\n        int len = str.length();\n        if (start < 0) {\n            start = 0;\n        }\n        if (start > len) {\n            start = len;\n        }\n        if (end < 0) {\n            end = 0;\n        }\n        if (end > len) {\n            end = len;\n        }\n        if (start > end) {\n            int temp = start;\n            start = end;\n            end = temp;\n        }\n        return new StringBuilder(len + start - end + overlay.length() + 1)\n            .append(str.substring(0, start))\n            .append(overlay)\n            .append(str.substring(end))\n            .toString();\n    }\n\n    // Chomping\n    //-----------------------------------------------------------------------\n    /**\n     * <p>Removes one newline from end of a String if it\'s there,\n     * otherwise leave it alone.  A newline is &quot;{@code \\n}&quot;,\n     * &quot;{@code \\r}&quot;, or &quot;{@code \\r\\n}&quot;.</p>\n     *\n     * <p>NOTE: This method changed in 2.0.\n     * It now more closely matches Perl chomp.</p>\n     *\n     * <pre>\n     * StringUtils.chomp(null)          = null\n     * StringUtils.chomp("")            = ""\n     * StringUtils.chomp("abc \\r")      = "abc "\n     * StringUtils.chomp("abc\\n")       = "abc"\n     * StringUtils.chomp("abc\\r\\n")     = "abc"\n     * StringUtils.chomp("abc\\r\\n\\r\\n") = "abc\\r\\n"\n     * StringUtils.chomp("abc\\n\\r")     = "abc\\n"\n     * StringUtils.chomp("abc\\n\\rabc")  = "abc\\n\\rabc"\n     * StringUtils.chomp("\\r")          = ""\n     * StringUtils.chomp("\\n")          = ""\n     * StringUtils.chomp("\\r\\n")        = ""\n     * </pre>\n     *\n     * @param str  the String to chomp a newline from, may be null\n     * @return String without newline, {@code null} if null String input\n     */\n    public static String chomp(String str) {\n        if (isEmpty(str)) {\n            return str;\n        }\n\n        if (str.length() == 1) {\n            char ch = str.charAt(0);\n            if (ch == CharUtils.CR || ch == CharUtils.LF) {\n                return EMPTY;\n            }\n            return str;\n        }\n\n        int lastIdx = str.length() - 1;\n        char last = str.charAt(lastIdx);\n\n        if (last == CharUtils.LF) {\n            if (str.charAt(lastIdx - 1) == CharUtils.CR) {\n                lastIdx--;\n            }\n        } else if (last != CharUtils.CR) {\n            lastIdx++;\n        }\n        return str.substring(0, lastIdx);\n    }\n\n    /**\n     * <p>Removes {@code separator} from the end of\n     * {@code str} if it\'s there, otherwise leave it alone.</p>\n     *\n     * <p>NOTE: This method changed in version 2.0.\n     * It now more closely matches Perl chomp.\n     * For the previous behavior, use {@link #substringBeforeLast(String, String)}.\n     * This method uses {@link String#endsWith(String)}.</p>\n     *\n     * <pre>\n     * StringUtils.chomp(null, *)         = null\n     * StringUtils.chomp("", *)           = ""\n     * StringUtils.chomp("foobar", "bar") = "foo"\n     * StringUtils.chomp("foobar", "baz") = "foobar"\n     * StringUtils.chomp("foo", "foo")    = ""\n     * StringUtils.chomp("foo ", "foo")   = "foo "\n     * StringUtils.chomp(" foo", "foo")   = " "\n     * StringUtils.chomp("foo", "foooo")  = "foo"\n     * StringUtils.chomp("foo", "")       = "foo"\n     * StringUtils.chomp("foo", null)     = "foo"\n     * </pre>\n     *\n     * @param str  the String to chomp from, may be null\n     * @param separator  separator String, may be null\n     * @return String without trailing separator, {@code null} if null String input\n     * @deprecated This feature will be removed in Lang 4.0, use {@link StringUtils#removeEnd(String, String)} instead\n     */\n    @Deprecated\n    public static String chomp(String str, String separator) {\n        return removeEnd(str,separator);\n    }\n\n    // Chopping\n    //-----------------------------------------------------------------------\n    /**\n     * <p>Remove the last character from a String.</p>\n     *\n     * <p>If the String ends in {@code \\r\\n}, then remove both\n     * of them.</p>\n     *\n     * <pre>\n     * StringUtils.chop(null)          = null\n     * StringUtils.chop("")            = ""\n     * StringUtils.chop("abc \\r")      = "abc "\n     * StringUtils.chop("abc\\n")       = "abc"\n     * StringUtils.chop("abc\\r\\n")     = "abc"\n     * StringUtils.chop("abc")         = "ab"\n     * StringUtils.chop("abc\\nabc")    = "abc\\nab"\n     * StringUtils.chop("a")           = ""\n     * StringUtils.chop("\\r")          = ""\n     * StringUtils.chop("\\n")          = ""\n     * StringUtils.chop("\\r\\n")        = ""\n     * </pre>\n     *\n     * @param str  the String to chop last character from, may be null\n     * @return String without last character, {@code null} if null String input\n     */\n    public static String chop(String str) {\n        if (str == null) {\n            return null;\n        }\n        int strLen = str.length();\n        if (strLen < 2) {\n            return EMPTY;\n        }\n        int lastIdx = strLen - 1;\n        String ret = str.substring(0, lastIdx);\n        char last = str.charAt(lastIdx);\n        if (last == CharUtils.LF && ret.charAt(lastIdx - 1) == CharUtils.CR) {\n            return ret.substring(0, lastIdx - 1);\n        }\n        return ret;\n    }\n\n    // Conversion\n    //-----------------------------------------------------------------------\n\n    // Padding\n    //-----------------------------------------------------------------------\n    /**\n     * <p>Repeat a String {@code repeat} times to form a\n     * new String.</p>\n     *\n     * <pre>\n     * StringUtils.repeat(null, 2) = null\n     * StringUtils.repeat("", 0)   = ""\n     * StringUtils.repeat("", 2)   = ""\n     * StringUtils.repeat("a", 3)  = "aaa"\n     * StringUtils.repeat("ab", 2) = "abab"\n     * StringUtils.repeat("a", -2) = ""\n     * </pre>\n     *\n     * @param str  the String to repeat, may be null\n     * @param repeat  number of times to repeat str, negative treated as zero\n     * @return a new String consisting of the original String repeated,\n     *  {@code null} if null String input\n     */\n    public static String repeat(String str, int repeat) {\n        // Performance tuned for 2.0 (JDK1.4)\n\n        if (str == null) {\n            return null;\n        }\n        if (repeat <= 0) {\n            return EMPTY;\n        }\n        int inputLength = str.length();\n        if (repeat == 1 || inputLength == 0) {\n            return str;\n        }\n        if (inputLength == 1 && repeat <= PAD_LIMIT) {\n            return repeat(str.charAt(0), repeat);\n        }\n\n        int outputLength = inputLength * repeat;\n        switch (inputLength) {\n            case 1 :\n                return repeat(str.charAt(0), repeat);\n            case 2 :\n                char ch0 = str.charAt(0);\n                char ch1 = str.charAt(1);\n                char[] output2 = new char[outputLength];\n                for (int i = repeat * 2 - 2; i >= 0; i--, i--) {\n                    output2[i] = ch0;\n                    output2[i + 1] = ch1;\n                }\n                return new String(output2);\n            default :\n                StringBuilder buf = new StringBuilder(outputLength);\n                for (int i = 0; i < repeat; i++) {\n                    buf.append(str);\n                }\n                return buf.toString();\n        }\n    }\n\n    /**\n     * <p>Repeat a String {@code repeat} times to form a\n     * new String, with a String separator injected each time. </p>\n     *\n     * <pre>\n     * StringUtils.repeat(null, null, 2) = null\n     * StringUtils.repeat(null, "x", 2)  = null\n     * StringUtils.repeat("", null, 0)   = ""\n     * StringUtils.repeat("", "", 2)     = ""\n     * StringUtils.repeat("", "x", 3)    = "xxx"\n     * StringUtils.repeat("?", ", ", 3)  = "?, ?, ?"\n     * </pre>\n     *\n     * @param str        the String to repeat, may be null\n     * @param separator  the String to inject, may be null\n     * @param repeat     number of times to repeat str, negative treated as zero\n     * @return a new String consisting of the original String repeated,\n     *  {@code null} if null String input\n     * @since 2.5\n     */\n    public static String repeat(String str, String separator, int repeat) {\n        if(str == null || separator == null) {\n            return repeat(str, repeat);\n        } else {\n            // given that repeat(String, int) is quite optimized, better to rely on it than try and splice this into it\n            String result = repeat(str + separator, repeat);\n            return removeEnd(result, separator);\n        }\n    }\n\n    /**\n     * <p>Returns padding using the specified delimiter repeated\n     * to a given length.</p>\n     *\n     * <pre>\n     * StringUtils.repeat(0, \'e\')  = ""\n     * StringUtils.repeat(3, \'e\')  = "eee"\n     * StringUtils.repeat(-2, \'e\') = ""\n     * </pre>\n     *\n     * <p>Note: this method doesn\'t not support padding with\n     * <a href="http://www.unicode.org/glossary/#supplementary_character">Unicode Supplementary Characters</a>\n     * as they require a pair of {@code char}s to be represented.\n     * If you are needing to support full I18N of your applications\n     * consider using {@link #repeat(String, int)} instead.\n     * </p>\n     *\n     * @param ch  character to repeat\n     * @param repeat  number of times to repeat char, negative treated as zero\n     * @return String with repeated character\n     * @see #repeat(String, int)\n     */\n    public static String repeat(char ch, int repeat) {\n        char[] buf = new char[repeat];\n        for (int i = repeat - 1; i >= 0; i--) {\n            buf[i] = ch;\n        }\n        return new String(buf);\n    }\n\n    /**\n     * <p>Right pad a String with spaces (\' \').</p>\n     *\n     * <p>The String is padded to the size of {@code size}.</p>\n     *\n     * <pre>\n     * StringUtils.rightPad(null, *)   = null\n     * StringUtils.rightPad("", 3)     = "   "\n     * StringUtils.rightPad("bat", 3)  = "bat"\n     * StringUtils.rightPad("bat", 5)  = "bat  "\n     * StringUtils.rightPad("bat", 1)  = "bat"\n     * StringUtils.rightPad("bat", -1) = "bat"\n     * </pre>\n     *\n     * @param str  the String to pad out, may be null\n     * @param size  the size to pad to\n     * @return right padded String or original String if no padding is necessary,\n     *  {@code null} if null String input\n     */\n    public static String rightPad(String str, int size) {\n        return rightPad(str, size, \' \');\n    }\n\n    /**\n     * <p>Right pad a String with a specified character.</p>\n     *\n     * <p>The String is padded to the size of {@code size}.</p>\n     *\n     * <pre>\n     * StringUtils.rightPad(null, *, *)     = null\n     * StringUtils.rightPad("", 3, \'z\')     = "zzz"\n     * StringUtils.rightPad("bat", 3, \'z\')  = "bat"\n     * StringUtils.rightPad("bat", 5, \'z\')  = "batzz"\n     * StringUtils.rightPad("bat", 1, \'z\')  = "bat"\n     * StringUtils.rightPad("bat", -1, \'z\') = "bat"\n     * </pre>\n     *\n     * @param str  the String to pad out, may be null\n     * @param size  the size to pad to\n     * @param padChar  the character to pad with\n     * @return right padded String or original String if no padding is necessary,\n     *  {@code null} if null String input\n     * @since 2.0\n     */\n    public static String rightPad(String str, int size, char padChar) {\n        if (str == null) {\n            return null;\n        }\n        int pads = size - str.length();\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (pads > PAD_LIMIT) {\n            return rightPad(str, size, String.valueOf(padChar));\n        }\n        return str.concat(repeat(padChar, pads));\n    }\n\n    /**\n     * <p>Right pad a String with a specified String.</p>\n     *\n     * <p>The String is padded to the size of {@code size}.</p>\n     *\n     * <pre>\n     * StringUtils.rightPad(null, *, *)      = null\n     * StringUtils.rightPad("", 3, "z")      = "zzz"\n     * StringUtils.rightPad("bat", 3, "yz")  = "bat"\n     * StringUtils.rightPad("bat", 5, "yz")  = "batyz"\n     * StringUtils.rightPad("bat", 8, "yz")  = "batyzyzy"\n     * StringUtils.rightPad("bat", 1, "yz")  = "bat"\n     * StringUtils.rightPad("bat", -1, "yz") = "bat"\n     * StringUtils.rightPad("bat", 5, null)  = "bat  "\n     * StringUtils.rightPad("bat", 5, "")    = "bat  "\n     * </pre>\n     *\n     * @param str  the String to pad out, may be null\n     * @param size  the size to pad to\n     * @param padStr  the String to pad with, null or empty treated as single space\n     * @return right padded String or original String if no padding is necessary,\n     *  {@code null} if null String input\n     */\n    public static String rightPad(String str, int size, String padStr) {\n        if (str == null) {\n            return null;\n        }\n        if (isEmpty(padStr)) {\n            padStr = " ";\n        }\n        int padLen = padStr.length();\n        int strLen = str.length();\n        int pads = size - strLen;\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (padLen == 1 && pads <= PAD_LIMIT) {\n            return rightPad(str, size, padStr.charAt(0));\n        }\n\n        if (pads == padLen) {\n            return str.concat(padStr);\n        } else if (pads < padLen) {\n            return str.concat(padStr.substring(0, pads));\n        } else {\n            char[] padding = new char[pads];\n            char[] padChars = padStr.toCharArray();\n            for (int i = 0; i < pads; i++) {\n                padding[i] = padChars[i % padLen];\n            }\n            return str.concat(new String(padding));\n        }\n    }\n\n    /**\n     * <p>Left pad a String with spaces (\' \').</p>\n     *\n     * <p>The String is padded to the size of {@code size}.</p>\n     *\n     * <pre>\n     * StringUtils.leftPad(null, *)   = null\n     * StringUtils.leftPad("", 3)     = "   "\n     * StringUtils.leftPad("bat", 3)  = "bat"\n     * StringUtils.leftPad("bat", 5)  = "  bat"\n     * StringUtils.leftPad("bat", 1)  = "bat"\n     * StringUtils.leftPad("bat", -1) = "bat"\n     * </pre>\n     *\n     * @param str  the String to pad out, may be null\n     * @param size  the size to pad to\n     * @return left padded String or original String if no padding is necessary,\n     *  {@code null} if null String input\n     */\n    public static String leftPad(String str, int size) {\n        return leftPad(str, size, \' \');\n    }\n\n    /**\n     * <p>Left pad a String with a specified character.</p>\n     *\n     * <p>Pad to a size of {@code size}.</p>\n     *\n     * <pre>\n     * StringUtils.leftPad(null, *, *)     = null\n     * StringUtils.leftPad("", 3, \'z\')     = "zzz"\n     * StringUtils.leftPad("bat", 3, \'z\')  = "bat"\n     * StringUtils.leftPad("bat", 5, \'z\')  = "zzbat"\n     * StringUtils.leftPad("bat", 1, \'z\')  = "bat"\n     * StringUtils.leftPad("bat", -1, \'z\') = "bat"\n     * </pre>\n     *\n     * @param str  the String to pad out, may be null\n     * @param size  the size to pad to\n     * @param padChar  the character to pad with\n     * @return left padded String or original String if no padding is necessary,\n     *  {@code null} if null String input\n     * @since 2.0\n     */\n    public static String leftPad(String str, int size, char padChar) {\n        if (str == null) {\n            return null;\n        }\n        int pads = size - str.length();\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (pads > PAD_LIMIT) {\n            return leftPad(str, size, String.valueOf(padChar));\n        }\n        return repeat(padChar, pads).concat(str);\n    }\n\n    /**\n     * <p>Left pad a String with a specified String.</p>\n     *\n     * <p>Pad to a size of {@code size}.</p>\n     *\n     * <pre>\n     * StringUtils.leftPad(null, *, *)      = null\n     * StringUtils.leftPad("", 3, "z")      = "zzz"\n     * StringUtils.leftPad("bat", 3, "yz")  = "bat"\n     * StringUtils.leftPad("bat", 5, "yz")  = "yzbat"\n     * StringUtils.leftPad("bat", 8, "yz")  = "yzyzybat"\n     * StringUtils.leftPad("bat", 1, "yz")  = "bat"\n     * StringUtils.leftPad("bat", -1, "yz") = "bat"\n     * StringUtils.leftPad("bat", 5, null)  = "  bat"\n     * StringUtils.leftPad("bat", 5, "")    = "  bat"\n     * </pre>\n     *\n     * @param str  the String to pad out, may be null\n     * @param size  the size to pad to\n     * @param padStr  the String to pad with, null or empty treated as single space\n     * @return left padded String or original String if no padding is necessary,\n     *  {@code null} if null String input\n     */\n    public static String leftPad(String str, int size, String padStr) {\n        if (str == null) {\n            return null;\n        }\n        if (isEmpty(padStr)) {\n            padStr = " ";\n        }\n        int padLen = padStr.length();\n        int strLen = str.length();\n        int pads = size - strLen;\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (padLen == 1 && pads <= PAD_LIMIT) {\n            return leftPad(str, size, padStr.charAt(0));\n        }\n\n        if (pads == padLen) {\n            return padStr.concat(str);\n        } else if (pads < padLen) {\n            return padStr.substring(0, pads).concat(str);\n        } else {\n            char[] padding = new char[pads];\n            char[] padChars = padStr.toCharArray();\n            for (int i = 0; i < pads; i++) {\n                padding[i] = padChars[i % padLen];\n            }\n            return new String(padding).concat(str);\n        }\n    }\n\n    /**\n     * Gets a CharSequence length or {@code 0} if the CharSequence is\n     * {@code null}.\n     *\n     * @param cs\n     *            a CharSequence or {@code null}\n     * @return CharSequence length or {@code 0} if the CharSequence is\n     *         {@code null}.\n     * @since 2.4\n     * @since 3.0 Changed signature from length(String) to length(CharSequence)\n     */\n    public static int length(CharSequence cs) {\n        return cs == null ? 0 : cs.length();\n    }\n\n    // Centering\n    //-----------------------------------------------------------------------\n    /**\n     * <p>Centers a String in a larger String of size {@code size}\n     * using the space character (\' \').<p>\n     *\n     * <p>If the size is less than the String length, the String is returned.\n     * A {@code null} String returns {@code null}.\n     * A negative size is treated as zero.</p>\n     *\n     * <p>Equivalent to {@code center(str, size, " ")}.</p>\n     *\n     * <pre>\n     * StringUtils.center(null, *)   = null\n     * StringUtils.center("", 4)     = "    "\n     * StringUtils.center("ab", -1)  = "ab"\n     * StringUtils.center("ab", 4)   = " ab "\n     * StringUtils.center("abcd", 2) = "abcd"\n     * StringUtils.center("a", 4)    = " a  "\n     * </pre>\n     *\n     * @param str  the String to center, may be null\n     * @param size  the int size of new String, negative treated as zero\n     * @return centered String, {@code null} if null String input\n     */\n    public static String center(String str, int size) {\n        return center(str, size, \' \');\n    }\n\n    /**\n     * <p>Centers a String in a larger String of size {@code size}.\n     * Uses a supplied character as the value to pad the String with.</p>\n     *\n     * <p>If the size is less than the String length, the String is returned.\n     * A {@code null} String returns {@code null}.\n     * A negative size is treated as zero.</p>\n     *\n     * <pre>\n     * StringUtils.center(null, *, *)     = null\n     * StringUtils.center("", 4, \' \')     = "    "\n     * StringUtils.center("ab", -1, \' \')  = "ab"\n     * StringUtils.center("ab", 4, \' \')   = " ab"\n     * StringUtils.center("abcd", 2, \' \') = "abcd"\n     * StringUtils.center("a", 4, \' \')    = " a  "\n     * StringUtils.center("a", 4, \'y\')    = "yayy"\n     * </pre>\n     *\n     * @param str  the String to center, may be null\n     * @param size  the int size of new String, negative treated as zero\n     * @param padChar  the character to pad the new String with\n     * @return centered String, {@code null} if null String input\n     * @since 2.0\n     */\n    public static String center(String str, int size, char padChar) {\n        if (str == null || size <= 0) {\n            return str;\n        }\n        int strLen = str.length();\n        int pads = size - strLen;\n        if (pads <= 0) {\n            return str;\n        }\n        str = leftPad(str, strLen + pads / 2, padChar);\n        str = rightPad(str, size, padChar);\n        return str;\n    }\n\n    /**\n     * <p>Centers a String in a larger String of size {@code size}.\n     * Uses a supplied String as the value to pad the String with.</p>\n     *\n     * <p>If the size is less than the String length, the String is returned.\n     * A {@code null} String returns {@code null}.\n     * A negative size is treated as zero.</p>\n     *\n     * <pre>\n     * StringUtils.center(null, *, *)     = null\n     * StringUtils.center("", 4, " ")     = "    "\n     * StringUtils.center("ab", -1, " ")  = "ab"\n     * StringUtils.center("ab", 4, " ")   = " ab"\n     * StringUtils.center("abcd", 2, " ") = "abcd"\n     * StringUtils.center("a", 4, " ")    = " a  "\n     * StringUtils.center("a", 4, "yz")   = "yayz"\n     * StringUtils.center("abc", 7, null) = "  abc  "\n     * StringUtils.center("abc", 7, "")   = "  abc  "\n     * </pre>\n     *\n     * @param str  the String to center, may be null\n     * @param size  the int size of new String, negative treated as zero\n     * @param padStr  the String to pad the new String with, must not be null or empty\n     * @return centered String, {@code null} if null String input\n     * @throws IllegalArgumentException if padStr is {@code null} or empty\n     */\n    public static String center(String str, int size, String padStr) {\n        if (str == null || size <= 0) {\n            return str;\n        }\n        if (isEmpty(padStr)) {\n            padStr = " ";\n        }\n        int strLen = str.length();\n        int pads = size - strLen;\n        if (pads <= 0) {\n            return str;\n        }\n        str = leftPad(str, strLen + pads / 2, padStr);\n        str = rightPad(str, size, padStr);\n        return str;\n    }\n\n    // Case conversion\n    //-----------------------------------------------------------------------\n    /**\n     * <p>Converts a String to upper case as per {@link String#toUpperCase()}.</p>\n     *\n     * <p>A {@code null} input String returns {@code null}.</p>\n     *\n     * <pre>\n     * StringUtils.upperCase(null)  = null\n     * StringUtils.upperCase("")    = ""\n     * StringUtils.upperCase("aBc") = "ABC"\n     * </pre>\n     *\n     * <p><strong>Note:</strong> As described in the documentation for {@link String#toUpperCase()},\n     * the result of this method is affected by the current locale.\n     * For platform-independent case transformations, the method {@link #lowerCase(String, Locale)}\n     * should be used with a specific locale (e.g. {@link Locale#ENGLISH}).</p>\n     *\n     * @param str  the String to upper case, may be null\n     * @return the upper cased String, {@code null} if null String input\n     */\n    public static String upperCase(String str) {\n        if (str == null) {\n            return null;\n        }\n        return str.toUpperCase();\n    }\n\n    /**\n     * <p>Converts a String to upper case as per {@link String#toUpperCase(Locale)}.</p>\n     *\n     * <p>A {@code null} input String returns {@code null}.</p>\n     *\n     * <pre>\n     * StringUtils.upperCase(null, Locale.ENGLISH)  = null\n     * StringUtils.upperCase("", Locale.ENGLISH)    = ""\n     * StringUtils.upperCase("aBc", Locale.ENGLISH) = "ABC"\n     * </pre>\n     *\n     * @param str  the String to upper case, may be null\n     * @param locale  the locale that defines the case transformation rules, must not be null\n     * @return the upper cased String, {@code null} if null String input\n     * @since 2.5\n     */\n    public static String upperCase(String str, Locale locale) {\n        if (str == null) {\n            return null;\n        }\n        return str.toUpperCase(locale);\n    }\n\n    /**\n     * <p>Converts a String to lower case as per {@link String#toLowerCase()}.</p>\n     *\n     * <p>A {@code null} input String returns {@code null}.</p>\n     *\n     * <pre>\n     * StringUtils.lowerCase(null)  = null\n     * StringUtils.lowerCase("")    = ""\n     * StringUtils.lowerCase("aBc") = "abc"\n     * </pre>\n     *\n     * <p><strong>Note:</strong> As described in the documentation for {@link String#toLowerCase()},\n     * the result of this method is affected by the current locale.\n     * For platform-independent case transformations, the method {@link #lowerCase(String, Locale)}\n     * should be used with a specific locale (e.g. {@link Locale#ENGLISH}).</p>\n     *\n     * @param str  the String to lower case, may be null\n     * @return the lower cased String, {@code null} if null String input\n     */\n    public static String lowerCase(String str) {\n        if (str == null) {\n            return null;\n        }\n        return str.toLowerCase();\n    }\n\n    /**\n     * <p>Converts a String to lower case as per {@link String#toLowerCase(Locale)}.</p>\n     *\n     * <p>A {@code null} input String returns {@code null}.</p>\n     *\n     * <pre>\n     * StringUtils.lowerCase(null, Locale.ENGLISH)  = null\n     * StringUtils.lowerCase("", Locale.ENGLISH)    = ""\n     * StringUtils.lowerCase("aBc", Locale.ENGLISH) = "abc"\n     * </pre>\n     *\n     * @param str  the String to lower case, may be null\n     * @param locale  the locale that defines the case transformation rules, must not be null\n     * @return the lower cased String, {@code null} if null String input\n     * @since 2.5\n     */\n    public static String lowerCase(String str, Locale locale) {\n        if (str == null) {\n            return null;\n        }\n        return str.toLowerCase(locale);\n    }\n\n    /**\n     * <p>Capitalizes a String changing the first letter to title case as\n     * per {@link Character#toTitleCase(char)}. No other letters are changed.</p>\n     *\n     * <p>For a word based algorithm, see {@link org.apache.commons.lang3.text.WordUtils#capitalize(String)}.\n     * A {@code null} input String returns {@code null}.</p>\n     *\n     * <pre>\n     * StringUtils.capitalize(null)  = null\n     * StringUtils.capitalize("")    = ""\n     * StringUtils.capitalize("cat") = "Cat"\n     * StringUtils.capitalize("cAt") = "CAt"\n     * </pre>\n     *\n     * @param str the String to capitalize, may be null\n     * @return the capitalized String, {@code null} if null String input\n     * @see org.apache.commons.lang3.text.WordUtils#capitalize(String)\n     * @see #uncapitalize(String)\n     * @since 2.0\n     */\n    public static String capitalize(String str) {\n        int strLen;\n        if (str == null || (strLen = str.length()) == 0) {\n            return str;\n        }\n        return new StringBuilder(strLen)\n            .append(Character.toTitleCase(str.charAt(0)))\n            .append(str.substring(1))\n            .toString();\n    }\n\n    /**\n     * <p>Uncapitalizes a String changing the first letter to title case as\n     * per {@link Character#toLowerCase(char)}. No other letters are changed.</p>\n     *\n     * <p>For a word based algorithm, see {@link org.apache.commons.lang3.text.WordUtils#uncapitalize(String)}.\n     * A {@code null} input String returns {@code null}.</p>\n     *\n     * <pre>\n     * StringUtils.uncapitalize(null)  = null\n     * StringUtils.uncapitalize("")    = ""\n     * StringUtils.uncapitalize("Cat") = "cat"\n     * StringUtils.uncapitalize("CAT") = "cAT"\n     * </pre>\n     *\n     * @param str the String to uncapitalize, may be null\n     * @return the uncapitalized String, {@code null} if null String input\n     * @see org.apache.commons.lang3.text.WordUtils#uncapitalize(String)\n     * @see #capitalize(String)\n     * @since 2.0\n     */\n    public static String uncapitalize(String str) {\n        int strLen;\n        if (str == null || (strLen = str.length()) == 0) {\n            return str;\n        }\n        return new StringBuilder(strLen)\n            .append(Character.toLowerCase(str.charAt(0)))\n            .append(str.substring(1))\n            .toString();\n    }\n\n    /**\n     * <p>Swaps the case of a String changing upper and title case to\n     * lower case, and lower case to upper case.</p>\n     *\n     * <ul>\n     *  <li>Upper case character converts to Lower case</li>\n     *  <li>Title case character converts to Lower case</li>\n     *  <li>Lower case character converts to Upper case</li>\n     * </ul>\n     *\n     * <p>For a word based algorithm, see {@link org.apache.commons.lang3.text.WordUtils#swapCase(String)}.\n     * A {@code null} input String returns {@code null}.</p>\n     *\n     * <pre>\n     * StringUtils.swapCase(null)                 = null\n     * StringUtils.swapCase("")                   = ""\n     * StringUtils.swapCase("The dog has a BONE") = "tHE DOG HAS A bone"\n     * </pre>\n     *\n     * <p>NOTE: This method changed in Lang version 2.0.\n     * It no longer performs a word based algorithm.\n     * If you only use ASCII, you will notice no change.\n     * That functionality is available in org.apache.commons.lang3.text.WordUtils.</p>\n     *\n     * @param str  the String to swap case, may be null\n     * @return the changed String, {@code null} if null String input\n     */\n    public static String swapCase(String str) {\n        if (StringUtils.isEmpty(str)) {\n            return str;\n        }\n\n        char[] buffer = str.toCharArray();\n\n        for (int i = 0; i < buffer.length; i++) {\n            char ch = buffer[i];\n            if (Character.isUpperCase(ch)) {\n                buffer[i] = Character.toLowerCase(ch);\n            } else if (Character.isTitleCase(ch)) {\n                buffer[i] = Character.toLowerCase(ch);\n            } else if (Character.isLowerCase(ch)) {\n                buffer[i] = Character.toUpperCase(ch);\n            }\n        }\n        return new String(buffer);\n    }\n\n    // Count matches\n    //-----------------------------------------------------------------------\n    /**\n     * <p>Counts how many times the substring appears in the larger string.</p>\n     *\n     * <p>A {@code null} or empty ("") String input returns {@code 0}.</p>\n     *\n     * <pre>\n     * StringUtils.countMatches(null, *)       = 0\n     * StringUtils.countMatches("", *)         = 0\n     * StringUtils.countMatches("abba", null)  = 0\n     * StringUtils.countMatches("abba", "")    = 0\n     * StringUtils.countMatches("abba", "a")   = 2\n     * StringUtils.countMatches("abba", "ab")  = 1\n     * StringUtils.countMatches("abba", "xxx") = 0\n     * </pre>\n     *\n     * @param str  the CharSequence to check, may be null\n     * @param sub  the substring to count, may be null\n     * @return the number of occurrences, 0 if either CharSequence is {@code null}\n     * @since 3.0 Changed signature from countMatches(String, String) to countMatches(CharSequence, CharSequence)\n     */\n    public static int countMatches(CharSequence str, CharSequence sub) {\n        if (isEmpty(str) || isEmpty(sub)) {\n            return 0;\n        }\n        int count = 0;\n        int idx = 0;\n        while ((idx = CharSequenceUtils.indexOf(str, sub, idx)) != INDEX_NOT_FOUND) {\n            count++;\n            idx += sub.length();\n        }\n        return count;\n    }\n\n    // Character Tests\n    //-----------------------------------------------------------------------\n    /**\n     * <p>Checks if the CharSequence contains only Unicode letters.</p>\n     *\n     * <p>{@code null} will return {@code false}.\n     * An empty CharSequence (length()=0) will return {@code false}.</p>\n     *\n     * <pre>\n     * StringUtils.isAlpha(null)   = false\n     * StringUtils.isAlpha("")     = false\n     * StringUtils.isAlpha("  ")   = false\n     * StringUtils.isAlpha("abc")  = true\n     * StringUtils.isAlpha("ab2c") = false\n     * StringUtils.isAlpha("ab-c") = false\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @return {@code true} if only contains letters, and is non-null\n     * @since 3.0 Changed signature from isAlpha(String) to isAlpha(CharSequence)\n     * @since 3.0 Changed "" to return false and not true\n     */\n    public static boolean isAlpha(CharSequence cs) {\n        if (cs == null || cs.length() == 0) {\n            return false;\n        }\n        int sz = cs.length();\n        for (int i = 0; i < sz; i++) {\n            if (Character.isLetter(cs.charAt(i)) == false) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * <p>Checks if the CharSequence contains only Unicode letters and\n     * space (\' \').</p>\n     *\n     * <p>{@code null} will return {@code false}\n     * An empty CharSequence (length()=0) will return {@code true}.</p>\n     *\n     * <pre>\n     * StringUtils.isAlphaSpace(null)   = false\n     * StringUtils.isAlphaSpace("")     = true\n     * StringUtils.isAlphaSpace("  ")   = true\n     * StringUtils.isAlphaSpace("abc")  = true\n     * StringUtils.isAlphaSpace("ab c") = true\n     * StringUtils.isAlphaSpace("ab2c") = false\n     * StringUtils.isAlphaSpace("ab-c") = false\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @return {@code true} if only contains letters and space,\n     *  and is non-null\n     * @since 3.0 Changed signature from isAlphaSpace(String) to isAlphaSpace(CharSequence)\n     */\n    public static boolean isAlphaSpace(CharSequence cs) {\n        if (cs == null) {\n            return false;\n        }\n        int sz = cs.length();\n        for (int i = 0; i < sz; i++) {\n            if (Character.isLetter(cs.charAt(i)) == false && cs.charAt(i) != \' \') {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * <p>Checks if the CharSequence contains only Unicode letters or digits.</p>\n     *\n     * <p>{@code null} will return {@code false}.\n     * An empty CharSequence (length()=0) will return {@code false}.</p>\n     *\n     * <pre>\n     * StringUtils.isAlphanumeric(null)   = false\n     * StringUtils.isAlphanumeric("")     = false\n     * StringUtils.isAlphanumeric("  ")   = false\n     * StringUtils.isAlphanumeric("abc")  = true\n     * StringUtils.isAlphanumeric("ab c") = false\n     * StringUtils.isAlphanumeric("ab2c") = true\n     * StringUtils.isAlphanumeric("ab-c") = false\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @return {@code true} if only contains letters or digits,\n     *  and is non-null\n     * @since 3.0 Changed signature from isAlphanumeric(String) to isAlphanumeric(CharSequence)\n     * @since 3.0 Changed "" to return false and not true\n     */\n    public static boolean isAlphanumeric(CharSequence cs) {\n        if (cs == null || cs.length() == 0) {\n            return false;\n        }\n        int sz = cs.length();\n        for (int i = 0; i < sz; i++) {\n            if (Character.isLetterOrDigit(cs.charAt(i)) == false) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * <p>Checks if the CharSequence contains only Unicode letters, digits\n     * or space ({@code \' \'}).</p>\n     *\n     * <p>{@code null} will return {@code false}.\n     * An empty CharSequence (length()=0) will return {@code true}.</p>\n     *\n     * <pre>\n     * StringUtils.isAlphanumericSpace(null)   = false\n     * StringUtils.isAlphanumericSpace("")     = true\n     * StringUtils.isAlphanumericSpace("  ")   = true\n     * StringUtils.isAlphanumericSpace("abc")  = true\n     * StringUtils.isAlphanumericSpace("ab c") = true\n     * StringUtils.isAlphanumericSpace("ab2c") = true\n     * StringUtils.isAlphanumericSpace("ab-c") = false\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @return {@code true} if only contains letters, digits or space,\n     *  and is non-null\n     * @since 3.0 Changed signature from isAlphanumericSpace(String) to isAlphanumericSpace(CharSequence)\n     */\n    public static boolean isAlphanumericSpace(CharSequence cs) {\n        if (cs == null) {\n            return false;\n        }\n        int sz = cs.length();\n        for (int i = 0; i < sz; i++) {\n            if (Character.isLetterOrDigit(cs.charAt(i)) == false && cs.charAt(i) != \' \') {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * <p>Checks if the CharSequence contains only ASCII printable characters.</p>\n     *\n     * <p>{@code null} will return {@code false}.\n     * An empty CharSequence (length()=0) will return {@code true}.</p>\n     *\n     * <pre>\n     * StringUtils.isAsciiPrintable(null)     = false\n     * StringUtils.isAsciiPrintable("")       = true\n     * StringUtils.isAsciiPrintable(" ")      = true\n     * StringUtils.isAsciiPrintable("Ceki")   = true\n     * StringUtils.isAsciiPrintable("ab2c")   = true\n     * StringUtils.isAsciiPrintable("!ab-c~") = true\n     * StringUtils.isAsciiPrintable("\\u0020") = true\n     * StringUtils.isAsciiPrintable("\\u0021") = true\n     * StringUtils.isAsciiPrintable("\\u007e") = true\n     * StringUtils.isAsciiPrintable("\\u007f") = false\n     * StringUtils.isAsciiPrintable("Ceki G\\u00fclc\\u00fc") = false\n     * </pre>\n     *\n     * @param cs the CharSequence to check, may be null\n     * @return {@code true} if every character is in the range\n     *  32 thru 126\n     * @since 2.1\n     * @since 3.0 Changed signature from isAsciiPrintable(String) to isAsciiPrintable(CharSequence)\n     */\n    public static boolean isAsciiPrintable(CharSequence cs) {\n        if (cs == null) {\n            return false;\n        }\n        int sz = cs.length();\n        for (int i = 0; i < sz; i++) {\n            if (CharUtils.isAsciiPrintable(cs.charAt(i)) == false) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * <p>Checks if the CharSequence contains only Unicode digits.\n     * A decimal point is not a Unicode digit and returns false.</p>\n     *\n     * <p>{@code null} will return {@code false}.\n     * An empty CharSequence (length()=0) will return {@code false}.</p>\n     *\n     * <pre>\n     * StringUtils.isNumeric(null)   = false\n     * StringUtils.isNumeric("")     = false\n     * StringUtils.isNumeric("  ")   = false\n     * StringUtils.isNumeric("123")  = true\n     * StringUtils.isNumeric("12 3") = false\n     * StringUtils.isNumeric("ab2c") = false\n     * StringUtils.isNumeric("12-3") = false\n     * StringUtils.isNumeric("12.3") = false\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @return {@code true} if only contains digits, and is non-null\n     * @since 3.0 Changed signature from isNumeric(String) to isNumeric(CharSequence)\n     * @since 3.0 Changed "" to return false and not true\n     */\n    public static boolean isNumeric(CharSequence cs) {\n        if (cs == null || cs.length() == 0) {\n            return false;\n        }\n        int sz = cs.length();\n        for (int i = 0; i < sz; i++) {\n            if (Character.isDigit(cs.charAt(i)) == false) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * <p>Checks if the CharSequence contains only Unicode digits or space\n     * ({@code \' \'}).\n     * A decimal point is not a Unicode digit and returns false.</p>\n     *\n     * <p>{@code null} will return {@code false}.\n     * An empty CharSequence (length()=0) will return {@code true}.</p>\n     *\n     * <pre>\n     * StringUtils.isNumericSpace(null)   = false\n     * StringUtils.isNumericSpace("")     = true\n     * StringUtils.isNumericSpace("  ")   = true\n     * StringUtils.isNumericSpace("123")  = true\n     * StringUtils.isNumericSpace("12 3") = true\n     * StringUtils.isNumericSpace("ab2c") = false\n     * StringUtils.isNumericSpace("12-3") = false\n     * StringUtils.isNumericSpace("12.3") = false\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @return {@code true} if only contains digits or space,\n     *  and is non-null\n     * @since 3.0 Changed signature from isNumericSpace(String) to isNumericSpace(CharSequence)\n     */\n    public static boolean isNumericSpace(CharSequence cs) {\n        if (cs == null) {\n            return false;\n        }\n        int sz = cs.length();\n        for (int i = 0; i < sz; i++) {\n            if (Character.isDigit(cs.charAt(i)) == false && cs.charAt(i) != \' \') {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * <p>Checks if the CharSequence contains only whitespace.</p>\n     *\n     * <p>{@code null} will return {@code false}.\n     * An empty CharSequence (length()=0) will return {@code true}.</p>\n     *\n     * <pre>\n     * StringUtils.isWhitespace(null)   = false\n     * StringUtils.isWhitespace("")     = true\n     * StringUtils.isWhitespace("  ")   = true\n     * StringUtils.isWhitespace("abc")  = false\n     * StringUtils.isWhitespace("ab2c") = false\n     * StringUtils.isWhitespace("ab-c") = false\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @return {@code true} if only contains whitespace, and is non-null\n     * @since 2.0\n     * @since 3.0 Changed signature from isWhitespace(String) to isWhitespace(CharSequence)\n     */\n    public static boolean isWhitespace(CharSequence cs) {\n        if (cs == null) {\n            return false;\n        }\n        int sz = cs.length();\n        for (int i = 0; i < sz; i++) {\n            if (Character.isWhitespace(cs.charAt(i)) == false) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * <p>Checks if the CharSequence contains only lowercase characters.</p>\n     *\n     * <p>{@code null} will return {@code false}.\n     * An empty CharSequence (length()=0) will return {@code false}.</p>\n     *\n     * <pre>\n     * StringUtils.isAllLowerCase(null)   = false\n     * StringUtils.isAllLowerCase("")     = false\n     * StringUtils.isAllLowerCase("  ")   = false\n     * StringUtils.isAllLowerCase("abc")  = true\n     * StringUtils.isAllLowerCase("abC") = false\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @return {@code true} if only contains lowercase characters, and is non-null\n     * @since 2.5\n     * @since 3.0 Changed signature from isAllLowerCase(String) to isAllLowerCase(CharSequence)\n     */\n    public static boolean isAllLowerCase(CharSequence cs) {\n        if (cs == null || isEmpty(cs)) {\n            return false;\n        }\n        int sz = cs.length();\n        for (int i = 0; i < sz; i++) {\n            if (Character.isLowerCase(cs.charAt(i)) == false) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * <p>Checks if the CharSequence contains only uppercase characters.</p>\n     *\n     * <p>{@code null} will return {@code false}.\n     * An empty String (length()=0) will return {@code false}.</p>\n     *\n     * <pre>\n     * StringUtils.isAllUpperCase(null)   = false\n     * StringUtils.isAllUpperCase("")     = false\n     * StringUtils.isAllUpperCase("  ")   = false\n     * StringUtils.isAllUpperCase("ABC")  = true\n     * StringUtils.isAllUpperCase("aBC") = false\n     * </pre>\n     *\n     * @param cs the CharSequence to check, may be null\n     * @return {@code true} if only contains uppercase characters, and is non-null\n     * @since 2.5\n     * @since 3.0 Changed signature from isAllUpperCase(String) to isAllUpperCase(CharSequence)\n     */\n    public static boolean isAllUpperCase(CharSequence cs) {\n        if (cs == null || isEmpty(cs)) {\n            return false;\n        }\n        int sz = cs.length();\n        for (int i = 0; i < sz; i++) {\n            if (Character.isUpperCase(cs.charAt(i)) == false) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    // Defaults\n    //-----------------------------------------------------------------------\n    /**\n     * <p>Returns either the passed in String,\n     * or if the String is {@code null}, an empty String ("").</p>\n     *\n     * <pre>\n     * StringUtils.defaultString(null)  = ""\n     * StringUtils.defaultString("")    = ""\n     * StringUtils.defaultString("bat") = "bat"\n     * </pre>\n     *\n     * @see ObjectUtils#toString(Object)\n     * @see String#valueOf(Object)\n     * @param str  the String to check, may be null\n     * @return the passed in String, or the empty String if it\n     *  was {@code null}\n     */\n    public static String defaultString(String str) {\n        return str == null ? EMPTY : str;\n    }\n\n    /**\n     * <p>Returns either the passed in String, or if the String is\n     * {@code null}, the value of {@code defaultStr}.</p>\n     *\n     * <pre>\n     * StringUtils.defaultString(null, "NULL")  = "NULL"\n     * StringUtils.defaultString("", "NULL")    = ""\n     * StringUtils.defaultString("bat", "NULL") = "bat"\n     * </pre>\n     *\n     * @see ObjectUtils#toString(Object,String)\n     * @see String#valueOf(Object)\n     * @param str  the String to check, may be null\n     * @param defaultStr  the default String to return\n     *  if the input is {@code null}, may be null\n     * @return the passed in String, or the default if it was {@code null}\n     */\n    public static String defaultString(String str, String defaultStr) {\n        return str == null ? defaultStr : str;\n    }\n\n    /**\n     * <p>Returns either the passed in CharSequence, or if the CharSequence is\n     * whitespace, empty ("") or {@code null}, the value of {@code defaultStr}.</p>\n     *\n     * <pre>\n     * StringUtils.defaultIfBlank(null, "NULL")  = "NULL"\n     * StringUtils.defaultIfBlank("", "NULL")    = "NULL"\n     * StringUtils.defaultIfBlank(" ", "NULL")   = "NULL"\n     * StringUtils.defaultIfBlank("bat", "NULL") = "bat"\n     * StringUtils.defaultIfBlank("", null)      = null\n     * </pre>\n     * @param <T> the specific kind of CharSequence\n     * @param str the CharSequence to check, may be null\n     * @param defaultStr  the default CharSequence to return\n     *  if the input is whitespace, empty ("") or {@code null}, may be null\n     * @return the passed in CharSequence, or the default\n     * @see StringUtils#defaultString(String, String)\n     */\n    public static <T extends CharSequence> T defaultIfBlank(T str, T defaultStr) {\n        return StringUtils.isBlank(str) ? defaultStr : str;\n    }\n\n    /**\n     * <p>Returns either the passed in CharSequence, or if the CharSequence is\n     * empty or {@code null}, the value of {@code defaultStr}.</p>\n     *\n     * <pre>\n     * StringUtils.defaultIfEmpty(null, "NULL")  = "NULL"\n     * StringUtils.defaultIfEmpty("", "NULL")    = "NULL"\n     * StringUtils.defaultIfEmpty(" ", "NULL")   = " "\n     * StringUtils.defaultIfEmpty("bat", "NULL") = "bat"\n     * StringUtils.defaultIfEmpty("", null)      = null\n     * </pre>\n     * @param <T> the specific kind of CharSequence\n     * @param str  the CharSequence to check, may be null\n     * @param defaultStr  the default CharSequence to return\n     *  if the input is empty ("") or {@code null}, may be null\n     * @return the passed in CharSequence, or the default\n     * @see StringUtils#defaultString(String, String)\n     */\n    public static <T extends CharSequence> T defaultIfEmpty(T str, T defaultStr) {\n        return StringUtils.isEmpty(str) ? defaultStr : str;\n    }\n\n    // Reversing\n    //-----------------------------------------------------------------------\n    /**\n     * <p>Reverses a String as per {@link StringBuilder#reverse()}.</p>\n     *\n     * <p>A {@code null} String returns {@code null}.</p>\n     *\n     * <pre>\n     * StringUtils.reverse(null)  = null\n     * StringUtils.reverse("")    = ""\n     * StringUtils.reverse("bat") = "tab"\n     * </pre>\n     *\n     * @param str  the String to reverse, may be null\n     * @return the reversed String, {@code null} if null String input\n     */\n    public static String reverse(String str) {\n        if (str == null) {\n            return null;\n        }\n        return new StringBuilder(str).reverse().toString();\n    }\n\n    /**\n     * <p>Reverses a String that is delimited by a specific character.</p>\n     *\n     * <p>The Strings between the delimiters are not reversed.\n     * Thus java.lang.String becomes String.lang.java (if the delimiter\n     * is {@code \'.\'}).</p>\n     *\n     * <pre>\n     * StringUtils.reverseDelimited(null, *)      = null\n     * StringUtils.reverseDelimited("", *)        = ""\n     * StringUtils.reverseDelimited("a.b.c", \'x\') = "a.b.c"\n     * StringUtils.reverseDelimited("a.b.c", ".") = "c.b.a"\n     * </pre>\n     *\n     * @param str  the String to reverse, may be null\n     * @param separatorChar  the separator character to use\n     * @return the reversed String, {@code null} if null String input\n     * @since 2.0\n     */\n    public static String reverseDelimited(String str, char separatorChar) {\n        if (str == null) {\n            return null;\n        }\n        // could implement manually, but simple way is to reuse other,\n        // probably slower, methods.\n        String[] strs = split(str, separatorChar);\n        ArrayUtils.reverse(strs);\n        return join(strs, separatorChar);\n    }\n\n    // Abbreviating\n    //-----------------------------------------------------------------------\n    /**\n     * <p>Abbreviates a String using ellipses. This will turn\n     * "Now is the time for all good men" into "Now is the time for..."</p>\n     *\n     * <p>Specifically:\n     * <ul>\n     *   <li>If {@code str} is less than {@code maxWidth} characters\n     *       long, return it.</li>\n     *   <li>Else abbreviate it to {@code (substring(str, 0, max-3) + "...")}.</li>\n     *   <li>If {@code maxWidth} is less than {@code 4}, throw an\n     *       {@code IllegalArgumentException}.</li>\n     *   <li>In no case will it return a String of length greater than\n     *       {@code maxWidth}.</li>\n     * </ul>\n     * </p>\n     *\n     * <pre>\n     * StringUtils.abbreviate(null, *)      = null\n     * StringUtils.abbreviate("", 4)        = ""\n     * StringUtils.abbreviate("abcdefg", 6) = "abc..."\n     * StringUtils.abbreviate("abcdefg", 7) = "abcdefg"\n     * StringUtils.abbreviate("abcdefg", 8) = "abcdefg"\n     * StringUtils.abbreviate("abcdefg", 4) = "a..."\n     * StringUtils.abbreviate("abcdefg", 3) = IllegalArgumentException\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param maxWidth  maximum length of result String, must be at least 4\n     * @return abbreviated String, {@code null} if null String input\n     * @throws IllegalArgumentException if the width is too small\n     * @since 2.0\n     */\n    public static String abbreviate(String str, int maxWidth) {\n        return abbreviate(str, 0, maxWidth);\n    }\n\n    /**\n     * <p>Abbreviates a String using ellipses. This will turn\n     * "Now is the time for all good men" into "...is the time for..."</p>\n     *\n     * <p>Works like {@code abbreviate(String, int)}, but allows you to specify\n     * a "left edge" offset.  Note that this left edge is not necessarily going to\n     * be the leftmost character in the result, or the first character following the\n     * ellipses, but it will appear somewhere in the result.\n     *\n     * <p>In no case will it return a String of length greater than\n     * {@code maxWidth}.</p>\n     *\n     * <pre>\n     * StringUtils.abbreviate(null, *, *)                = null\n     * StringUtils.abbreviate("", 0, 4)                  = ""\n     * StringUtils.abbreviate("abcdefghijklmno", -1, 10) = "abcdefg..."\n     * StringUtils.abbreviate("abcdefghijklmno", 0, 10)  = "abcdefg..."\n     * StringUtils.abbreviate("abcdefghijklmno", 1, 10)  = "abcdefg..."\n     * StringUtils.abbreviate("abcdefghijklmno", 4, 10)  = "abcdefg..."\n     * StringUtils.abbreviate("abcdefghijklmno", 5, 10)  = "...fghi..."\n     * StringUtils.abbreviate("abcdefghijklmno", 6, 10)  = "...ghij..."\n     * StringUtils.abbreviate("abcdefghijklmno", 8, 10)  = "...ijklmno"\n     * StringUtils.abbreviate("abcdefghijklmno", 10, 10) = "...ijklmno"\n     * StringUtils.abbreviate("abcdefghijklmno", 12, 10) = "...ijklmno"\n     * StringUtils.abbreviate("abcdefghij", 0, 3)        = IllegalArgumentException\n     * StringUtils.abbreviate("abcdefghij", 5, 6)        = IllegalArgumentException\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param offset  left edge of source String\n     * @param maxWidth  maximum length of result String, must be at least 4\n     * @return abbreviated String, {@code null} if null String input\n     * @throws IllegalArgumentException if the width is too small\n     * @since 2.0\n     */\n    public static String abbreviate(String str, int offset, int maxWidth) {\n        if (str == null) {\n            return null;\n        }\n        if (maxWidth < 4) {\n            throw new IllegalArgumentException("Minimum abbreviation width is 4");\n        }\n        if (str.length() <= maxWidth) {\n            return str;\n        }\n        if (offset > str.length()) {\n            offset = str.length();\n        }\n        if (str.length() - offset < maxWidth - 3) {\n            offset = str.length() - (maxWidth - 3);\n        }\n        final String abrevMarker = "...";\n        if (offset <= 4) {\n            return str.substring(0, maxWidth - 3) + abrevMarker;\n        }\n        if (maxWidth < 7) {\n            throw new IllegalArgumentException("Minimum abbreviation width with offset is 7");\n        }\n        if (offset + maxWidth - 3 < str.length()) {\n            return abrevMarker + abbreviate(str.substring(offset), maxWidth - 3);\n        }\n        return abrevMarker + str.substring(str.length() - (maxWidth - 3));\n    }\n\n    /**\n     * <p>Abbreviates a String to the length passed, replacing the middle characters with the supplied\n     * replacement String.</p>\n     *\n     * <p>This abbreviation only occurs if the following criteria is met:\n     * <ul>\n     * <li>Neither the String for abbreviation nor the replacement String are null or empty </li>\n     * <li>The length to truncate to is less than the length of the supplied String</li>\n     * <li>The length to truncate to is greater than 0</li>\n     * <li>The abbreviated String will have enough room for the length supplied replacement String\n     * and the first and last characters of the supplied String for abbreviation</li>\n     * </ul>\n     * Otherwise, the returned String will be the same as the supplied String for abbreviation.\n     * </p>\n     *\n     * <pre>\n     * StringUtils.abbreviateMiddle(null, null, 0)      = null\n     * StringUtils.abbreviateMiddle("abc", null, 0)      = "abc"\n     * StringUtils.abbreviateMiddle("abc", ".", 0)      = "abc"\n     * StringUtils.abbreviateMiddle("abc", ".", 3)      = "abc"\n     * StringUtils.abbreviateMiddle("abcdef", ".", 4)     = "ab.f"\n     * </pre>\n     *\n     * @param str  the String to abbreviate, may be null\n     * @param middle the String to replace the middle characters with, may be null\n     * @param length the length to abbreviate {@code str} to.\n     * @return the abbreviated String if the above criteria is met, or the original String supplied for abbreviation.\n     * @since 2.5\n     */\n    public static String abbreviateMiddle(String str, String middle, int length) {\n        if (isEmpty(str) || isEmpty(middle)) {\n            return str;\n        }\n\n        if (length >= str.length() || length < middle.length()+2) {\n            return str;\n        }\n\n        int targetSting = length-middle.length();\n        int startOffset = targetSting/2+targetSting%2;\n        int endOffset = str.length()-targetSting/2;\n\n        StringBuilder builder = new StringBuilder(length);\n        builder.append(str.substring(0,startOffset));\n        builder.append(middle);\n        builder.append(str.substring(endOffset));\n\n        return builder.toString();\n    }\n\n    // Difference\n    //-----------------------------------------------------------------------\n    /**\n     * <p>Compares two Strings, and returns the portion where they differ.\n     * (More precisely, return the remainder of the second String,\n     * starting from where it\'s different from the first.)</p>\n     *\n     * <p>For example,\n     * {@code difference("i am a machine", "i am a robot") -> "robot"}.</p>\n     *\n     * <pre>\n     * StringUtils.difference(null, null) = null\n     * StringUtils.difference("", "") = ""\n     * StringUtils.difference("", "abc") = "abc"\n     * StringUtils.difference("abc", "") = ""\n     * StringUtils.difference("abc", "abc") = ""\n     * StringUtils.difference("ab", "abxyz") = "xyz"\n     * StringUtils.difference("abcde", "abxyz") = "xyz"\n     * StringUtils.difference("abcde", "xyz") = "xyz"\n     * </pre>\n     *\n     * @param str1  the first String, may be null\n     * @param str2  the second String, may be null\n     * @return the portion of str2 where it differs from str1; returns the\n     * empty String if they are equal\n     * @since 2.0\n     */\n    public static String difference(String str1, String str2) {\n        if (str1 == null) {\n            return str2;\n        }\n        if (str2 == null) {\n            return str1;\n        }\n        int at = indexOfDifference(str1, str2);\n        if (at == INDEX_NOT_FOUND) {\n            return EMPTY;\n        }\n        return str2.substring(at);\n    }\n\n    /**\n     * <p>Compares two CharSequences, and returns the index at which the\n     * CharSequences begin to differ.</p>\n     *\n     * <p>For example,\n     * {@code indexOfDifference("i am a machine", "i am a robot") -> 7}</p>\n     *\n     * <pre>\n     * StringUtils.indexOfDifference(null, null) = -1\n     * StringUtils.indexOfDifference("", "") = -1\n     * StringUtils.indexOfDifference("", "abc") = 0\n     * StringUtils.indexOfDifference("abc", "") = 0\n     * StringUtils.indexOfDifference("abc", "abc") = -1\n     * StringUtils.indexOfDifference("ab", "abxyz") = 2\n     * StringUtils.indexOfDifference("abcde", "abxyz") = 2\n     * StringUtils.indexOfDifference("abcde", "xyz") = 0\n     * </pre>\n     *\n     * @param cs1  the first CharSequence, may be null\n     * @param cs2  the second CharSequence, may be null\n     * @return the index where cs1 and cs2 begin to differ; -1 if they are equal\n     * @since 2.0\n     * @since 3.0 Changed signature from indexOfDifference(String, String) to\n     * indexOfDifference(CharSequence, CharSequence)\n     */\n    public static int indexOfDifference(CharSequence cs1, CharSequence cs2) {\n        if (cs1 == cs2) {\n            return INDEX_NOT_FOUND;\n        }\n        if (cs1 == null || cs2 == null) {\n            return 0;\n        }\n        int i;\n        for (i = 0; i < cs1.length() && i < cs2.length(); ++i) {\n            if (cs1.charAt(i) != cs2.charAt(i)) {\n                break;\n            }\n        }\n        if (i < cs2.length() || i < cs1.length()) {\n            return i;\n        }\n        return INDEX_NOT_FOUND;\n    }\n\n    /**\n     * <p>Compares all CharSequences in an array and returns the index at which the\n     * CharSequences begin to differ.</p>\n     *\n     * <p>For example,\n     * <code>indexOfDifference(new String[] {"i am a machine", "i am a robot"}) -> 7</code></p>\n     *\n     * <pre>\n     * StringUtils.indexOfDifference(null) = -1\n     * StringUtils.indexOfDifference(new String[] {}) = -1\n     * StringUtils.indexOfDifference(new String[] {"abc"}) = -1\n     * StringUtils.indexOfDifference(new String[] {null, null}) = -1\n     * StringUtils.indexOfDifference(new String[] {"", ""}) = -1\n     * StringUtils.indexOfDifference(new String[] {"", null}) = 0\n     * StringUtils.indexOfDifference(new String[] {"abc", null, null}) = 0\n     * StringUtils.indexOfDifference(new String[] {null, null, "abc"}) = 0\n     * StringUtils.indexOfDifference(new String[] {"", "abc"}) = 0\n     * StringUtils.indexOfDifference(new String[] {"abc", ""}) = 0\n     * StringUtils.indexOfDifference(new String[] {"abc", "abc"}) = -1\n     * StringUtils.indexOfDifference(new String[] {"abc", "a"}) = 1\n     * StringUtils.indexOfDifference(new String[] {"ab", "abxyz"}) = 2\n     * StringUtils.indexOfDifference(new String[] {"abcde", "abxyz"}) = 2\n     * StringUtils.indexOfDifference(new String[] {"abcde", "xyz"}) = 0\n     * StringUtils.indexOfDifference(new String[] {"xyz", "abcde"}) = 0\n     * StringUtils.indexOfDifference(new String[] {"i am a machine", "i am a robot"}) = 7\n     * </pre>\n     *\n     * @param css  array of CharSequences, entries may be null\n     * @return the index where the strings begin to differ; -1 if they are all equal\n     * @since 2.4\n     * @since 3.0 Changed signature from indexOfDifference(String...) to indexOfDifference(CharSequence...)\n     */\n    public static int indexOfDifference(CharSequence... css) {\n        if (css == null || css.length <= 1) {\n            return INDEX_NOT_FOUND;\n        }\n        boolean anyStringNull = false;\n        boolean allStringsNull = true;\n        int arrayLen = css.length;\n        int shortestStrLen = Integer.MAX_VALUE;\n        int longestStrLen = 0;\n\n        // find the min and max string lengths; this avoids checking to make\n        // sure we are not exceeding the length of the string each time through\n        // the bottom loop.\n        for (int i = 0; i < arrayLen; i++) {\n            if (css[i] == null) {\n                anyStringNull = true;\n                shortestStrLen = 0;\n            } else {\n                allStringsNull = false;\n                shortestStrLen = Math.min(css[i].length(), shortestStrLen);\n                longestStrLen = Math.max(css[i].length(), longestStrLen);\n            }\n        }\n\n        // handle lists containing all nulls or all empty strings\n        if (allStringsNull || longestStrLen == 0 && !anyStringNull) {\n            return INDEX_NOT_FOUND;\n        }\n\n        // handle lists containing some nulls or some empty strings\n        if (shortestStrLen == 0) {\n            return 0;\n        }\n\n        // find the position with the first difference across all strings\n        int firstDiff = -1;\n        for (int stringPos = 0; stringPos < shortestStrLen; stringPos++) {\n            char comparisonChar = css[0].charAt(stringPos);\n            for (int arrayPos = 1; arrayPos < arrayLen; arrayPos++) {\n                if (css[arrayPos].charAt(stringPos) != comparisonChar) {\n                    firstDiff = stringPos;\n                    break;\n                }\n            }\n            if (firstDiff != -1) {\n                break;\n            }\n        }\n\n        if (firstDiff == -1 && shortestStrLen != longestStrLen) {\n            // we compared all of the characters up to the length of the\n            // shortest string and didn\'t find a match, but the string lengths\n            // vary, so return the length of the shortest string.\n            return shortestStrLen;\n        }\n        return firstDiff;\n    }\n\n    /**\n     * <p>Compares all Strings in an array and returns the initial sequence of\n     * characters that is common to all of them.</p>\n     *\n     * <p>For example,\n     * <code>getCommonPrefix(new String[] {"i am a machine", "i am a robot"}) -> "i am a "</code></p>\n     *\n     * <pre>\n     * StringUtils.getCommonPrefix(null) = ""\n     * StringUtils.getCommonPrefix(new String[] {}) = ""\n     * StringUtils.getCommonPrefix(new String[] {"abc"}) = "abc"\n     * StringUtils.getCommonPrefix(new String[] {null, null}) = ""\n     * StringUtils.getCommonPrefix(new String[] {"", ""}) = ""\n     * StringUtils.getCommonPrefix(new String[] {"", null}) = ""\n     * StringUtils.getCommonPrefix(new String[] {"abc", null, null}) = ""\n     * StringUtils.getCommonPrefix(new String[] {null, null, "abc"}) = ""\n     * StringUtils.getCommonPrefix(new String[] {"", "abc"}) = ""\n     * StringUtils.getCommonPrefix(new String[] {"abc", ""}) = ""\n     * StringUtils.getCommonPrefix(new String[] {"abc", "abc"}) = "abc"\n     * StringUtils.getCommonPrefix(new String[] {"abc", "a"}) = "a"\n     * StringUtils.getCommonPrefix(new String[] {"ab", "abxyz"}) = "ab"\n     * StringUtils.getCommonPrefix(new String[] {"abcde", "abxyz"}) = "ab"\n     * StringUtils.getCommonPrefix(new String[] {"abcde", "xyz"}) = ""\n     * StringUtils.getCommonPrefix(new String[] {"xyz", "abcde"}) = ""\n     * StringUtils.getCommonPrefix(new String[] {"i am a machine", "i am a robot"}) = "i am a "\n     * </pre>\n     *\n     * @param strs  array of String objects, entries may be null\n     * @return the initial sequence of characters that are common to all Strings\n     * in the array; empty String if the array is null, the elements are all null\n     * or if there is no common prefix.\n     * @since 2.4\n     */\n    public static String getCommonPrefix(String... strs) {\n        if (strs == null || strs.length == 0) {\n            return EMPTY;\n        }\n        int smallestIndexOfDiff = indexOfDifference(strs);\n        if (smallestIndexOfDiff == INDEX_NOT_FOUND) {\n            // all strings were identical\n            if (strs[0] == null) {\n                return EMPTY;\n            }\n            return strs[0];\n        } else if (smallestIndexOfDiff == 0) {\n            // there were no common initial characters\n            return EMPTY;\n        } else {\n            // we found a common initial character sequence\n            return strs[0].substring(0, smallestIndexOfDiff);\n        }\n    }\n\n    // Misc\n    //-----------------------------------------------------------------------\n    /**\n     * <p>Find the Levenshtein distance between two Strings.</p>\n     *\n     * <p>This is the number of changes needed to change one String into\n     * another, where each change is a single character modification (deletion,\n     * insertion or substitution).</p>\n     *\n     * <p>The previous implementation of the Levenshtein distance algorithm\n     * was from <a href="http://www.merriampark.com/ld.htm">http://www.merriampark.com/ld.htm</a></p>\n     *\n     * <p>Chas Emerick has written an implementation in Java, which avoids an OutOfMemoryError\n     * which can occur when my Java implementation is used with very large strings.<br>\n     * This implementation of the Levenshtein distance algorithm\n     * is from <a href="http://www.merriampark.com/ldjava.htm">http://www.merriampark.com/ldjava.htm</a></p>\n     *\n     * <pre>\n     * StringUtils.getLevenshteinDistance(null, *)             = IllegalArgumentException\n     * StringUtils.getLevenshteinDistance(*, null)             = IllegalArgumentException\n     * StringUtils.getLevenshteinDistance("","")               = 0\n     * StringUtils.getLevenshteinDistance("","a")              = 1\n     * StringUtils.getLevenshteinDistance("aaapppp", "")       = 7\n     * StringUtils.getLevenshteinDistance("frog", "fog")       = 1\n     * StringUtils.getLevenshteinDistance("fly", "ant")        = 3\n     * StringUtils.getLevenshteinDistance("elephant", "hippo") = 7\n     * StringUtils.getLevenshteinDistance("hippo", "elephant") = 7\n     * StringUtils.getLevenshteinDistance("hippo", "zzzzzzzz") = 8\n     * StringUtils.getLevenshteinDistance("hello", "hallo")    = 1\n     * </pre>\n     *\n     * @param s  the first String, must not be null\n     * @param t  the second String, must not be null\n     * @return result distance\n     * @throws IllegalArgumentException if either String input {@code null}\n     * @since 3.0 Changed signature from getLevenshteinDistance(String, String) to\n     * getLevenshteinDistance(CharSequence, CharSequence)\n     */\n    public static int getLevenshteinDistance(CharSequence s, CharSequence t) {\n        if (s == null || t == null) {\n            throw new IllegalArgumentException("Strings must not be null");\n        }\n\n        /*\n           The difference between this impl. and the previous is that, rather\n           than creating and retaining a matrix of size s.length() + 1 by t.length() + 1,\n           we maintain two single-dimensional arrays of length s.length() + 1.  The first, d,\n           is the \'current working\' distance array that maintains the newest distance cost\n           counts as we iterate through the characters of String s.  Each time we increment\n           the index of String t we are comparing, d is copied to p, the second int[].  Doing so\n           allows us to retain the previous cost counts as required by the algorithm (taking\n           the minimum of the cost count to the left, up one, and diagonally up and to the left\n           of the current cost count being calculated).  (Note that the arrays aren\'t really\n           copied anymore, just switched...this is clearly much better than cloning an array\n           or doing a System.arraycopy() each time  through the outer loop.)\n\n           Effectively, the difference between the two implementations is this one does not\n           cause an out of memory condition when calculating the LD over two very large strings.\n         */\n\n        int n = s.length(); // length of s\n        int m = t.length(); // length of t\n\n        if (n == 0) {\n            return m;\n        } else if (m == 0) {\n            return n;\n        }\n\n        if (n > m) {\n            // swap the input strings to consume less memory\n            CharSequence tmp = s;\n            s = t;\n            t = tmp;\n            n = m;\n            m = t.length();\n        }\n\n        int p[] = new int[n + 1]; //\'previous\' cost array, horizontally\n        int d[] = new int[n + 1]; // cost array, horizontally\n        int _d[]; //placeholder to assist in swapping p and d\n\n        // indexes into strings s and t\n        int i; // iterates through s\n        int j; // iterates through t\n\n        char t_j; // jth character of t\n\n        int cost; // cost\n\n        for (i = 0; i <= n; i++) {\n            p[i] = i;\n        }\n\n        for (j = 1; j <= m; j++) {\n            t_j = t.charAt(j - 1);\n            d[0] = j;\n\n            for (i = 1; i <= n; i++) {\n                cost = s.charAt(i - 1) == t_j ? 0 : 1;\n                // minimum of cell to the left+1, to the top+1, diagonally left and up +cost\n                d[i] = Math.min(Math.min(d[i - 1] + 1, p[i] + 1), p[i - 1] + cost);\n            }\n\n            // copy current distance counts to \'previous row\' distance counts\n            _d = p;\n            p = d;\n            d = _d;\n        }\n\n        // our last action in the above loop was to switch d and p, so p now\n        // actually has the most recent cost counts\n        return p[n];\n    }\n\n    /**\n     * <p>Find the Levenshtein distance between two Strings if it\'s less than or equal to a given \n     * threshold.</p>\n     *\n     * <p>This is the number of changes needed to change one String into\n     * another, where each change is a single character modification (deletion,\n     * insertion or substitution).</p>\n     *\n     * <p>This implementation follows from Algorithms on Strings, Trees and Sequences by Dan Gusfield\n     * and Chas Emerick\'s implementation of the Levenshtein distance algorithm from\n     * <a href="http://www.merriampark.com/ld.htm">http://www.merriampark.com/ld.htm</a></p>\n     *\n     * <pre>\n     * StringUtils.getLevenshteinDistance(null, *, *)             = IllegalArgumentException\n     * StringUtils.getLevenshteinDistance(*, null, *)             = IllegalArgumentException\n     * StringUtils.getLevenshteinDistance(*, *, -1)               = IllegalArgumentException\n     * StringUtils.getLevenshteinDistance("","", 0)               = 0\n     * StringUtils.getLevenshteinDistance("aaapppp", "", 8)       = 7\n     * StringUtils.getLevenshteinDistance("aaapppp", "", 7)       = 7\n     * StringUtils.getLevenshteinDistance("aaapppp", "", 6))      = -1\n     * StringUtils.getLevenshteinDistance("elephant", "hippo", 7) = 7\n     * StringUtils.getLevenshteinDistance("elephant", "hippo", 6) = -1\n     * StringUtils.getLevenshteinDistance("hippo", "elephant", 7) = 7\n     * StringUtils.getLevenshteinDistance("hippo", "elephant", 6) = -1\n     * </pre>\n     *\n     * @param s  the first String, must not be null\n     * @param t  the second String, must not be null\n     * @param threshold the target threshold, must not be negative\n     * @return result distance, or {@code -1} if the distance would be greater than the threshold\n     * @throws IllegalArgumentException if either String input {@code null} or negative threshold\n     */\n    public static int getLevenshteinDistance(CharSequence s, CharSequence t, int threshold) {\n        if (s == null || t == null) {\n            throw new IllegalArgumentException("Strings must not be null");\n        }\n        if (threshold < 0) {\n            throw new IllegalArgumentException("Threshold must not be negative");\n        }\n\n        /*\n        This implementation only computes the distance if it\'s less than or equal to the\n        threshold value, returning -1 if it\'s greater.  The advantage is performance: unbounded\n        distance is O(nm), but a bound of k allows us to reduce it to O(km) time by only \n        computing a diagonal stripe of width 2k + 1 of the cost table.\n        It is also possible to use this to compute the unbounded Levenshtein distance by starting\n        the threshold at 1 and doubling each time until the distance is found; this is O(dm), where\n        d is the distance.\n        \n        One subtlety comes from needing to ignore entries on the border of our stripe\n        eg.\n        p[] = |#|#|#|*\n        d[] =  *|#|#|#|\n        We must ignore the entry to the left of the leftmost member\n        We must ignore the entry above the rightmost member\n        \n        Another subtlety comes from our stripe running off the matrix if the strings aren\'t\n        of the same size.  Since string s is always swapped to be the shorter of the two, \n        the stripe will always run off to the upper right instead of the lower left of the matrix.\n        \n        As a concrete example, suppose s is of length 5, t is of length 7, and our threshold is 1.\n        In this case we\'re going to walk a stripe of length 3.  The matrix would look like so:\n        \n           1 2 3 4 5\n        1 |#|#| | | |\n        2 |#|#|#| | |\n        3 | |#|#|#| |\n        4 | | |#|#|#|\n        5 | | | |#|#|\n        6 | | | | |#|\n        7 | | | | | |\n\n        Note how the stripe leads off the table as there is no possible way to turn a string of length 5\n        into one of length 7 in edit distance of 1.\n        \n        Additionally, this implementation decreases memory usage by using two \n        single-dimensional arrays and swapping them back and forth instead of allocating\n        an entire n by m matrix.  This requires a few minor changes, such as immediately returning \n        when it\'s detected that the stripe has run off the matrix and initially filling the arrays with\n        large values so that entries we don\'t compute are ignored.\n\n        See Algorithms on Strings, Trees and Sequences by Dan Gusfield for some discussion.\n         */\n\n        int n = s.length(); // length of s\n        int m = t.length(); // length of t\n\n        // if one string is empty, the edit distance is necessarily the length of the other\n        if (n == 0) {\n            return m <= threshold ? m : -1;\n        } else if (m == 0) {\n            return n <= threshold ? n : -1;\n        }\n\n        if (n > m) {\n            // swap the two strings to consume less memory\n            CharSequence tmp = s;\n            s = t;\n            t = tmp;\n            n = m;\n            m = t.length();\n        }\n\n        int p[] = new int[n + 1]; // \'previous\' cost array, horizontally\n        int d[] = new int[n + 1]; // cost array, horizontally\n        int _d[]; // placeholder to assist in swapping p and d\n\n        // fill in starting table values\n        int boundary = Math.min(n, threshold) + 1;\n        for (int i = 0; i < boundary; i++) {\n            p[i] = i;\n        }\n        // these fills ensure that the value above the rightmost entry of our \n        // stripe will be ignored in following loop iterations\n        Arrays.fill(p, boundary, p.length, Integer.MAX_VALUE);\n        Arrays.fill(d, Integer.MAX_VALUE);\n\n        // iterates through t\n        for (int j = 1; j <= m; j++) {\n            char t_j = t.charAt(j - 1); // jth character of t\n            d[0] = j;\n\n            // compute stripe indices, constrain to array size\n            int min = Math.max(1, j - threshold);\n            int max = Math.min(n, j + threshold);\n\n            // the stripe may lead off of the table if s and t are of different sizes\n            if (min > max) {\n                return -1;\n            }\n\n            // ignore entry left of leftmost\n            if (min > 1) {\n                d[min - 1] = Integer.MAX_VALUE;\n            }\n\n            // iterates through [min, max] in s\n            for (int i = min; i <= max; i++) {\n                if (s.charAt(i - 1) == t_j) {\n                    // diagonally left and up\n                    d[i] = p[i - 1];\n                } else {\n                    // 1 + minimum of cell to the left, to the top, diagonally left and up\n                    d[i] = 1 + Math.min(Math.min(d[i - 1], p[i]), p[i - 1]);\n                }\n            }\n\n            // copy current distance counts to \'previous row\' distance counts\n            _d = p;\n            p = d;\n            d = _d;\n        }\n\n        // if p[n] is greater than the threshold, there\'s no guarantee on it being the correct\n        // distance\n        if (p[n] <= threshold) {\n            return p[n];\n        } else {\n            return -1;\n        }\n    }\n\n    // startsWith\n    //-----------------------------------------------------------------------\n\n    /**\n     * <p>Check if a CharSequence starts with a specified prefix.</p>\n     *\n     * <p>{@code null}s are handled without exceptions. Two {@code null}\n     * references are considered to be equal. The comparison is case sensitive.</p>\n     *\n     * <pre>\n     * StringUtils.startsWith(null, null)      = true\n     * StringUtils.startsWith(null, "abc")     = false\n     * StringUtils.startsWith("abcdef", null)  = false\n     * StringUtils.startsWith("abcdef", "abc") = true\n     * StringUtils.startsWith("ABCDEF", "abc") = false\n     * </pre>\n     *\n     * @see java.lang.String#startsWith(String)\n     * @param str  the CharSequence to check, may be null\n     * @param prefix the prefix to find, may be null\n     * @return {@code true} if the CharSequence starts with the prefix, case sensitive, or\n     *  both {@code null}\n     * @since 2.4\n     * @since 3.0 Changed signature from startsWith(String, String) to startsWith(CharSequence, CharSequence)\n     */\n    public static boolean startsWith(CharSequence str, CharSequence prefix) {\n        return startsWith(str, prefix, false);\n    }\n\n    /**\n     * <p>Case insensitive check if a CharSequence starts with a specified prefix.</p>\n     *\n     * <p>{@code null}s are handled without exceptions. Two {@code null}\n     * references are considered to be equal. The comparison is case insensitive.</p>\n     *\n     * <pre>\n     * StringUtils.startsWithIgnoreCase(null, null)      = true\n     * StringUtils.startsWithIgnoreCase(null, "abc")     = false\n     * StringUtils.startsWithIgnoreCase("abcdef", null)  = false\n     * StringUtils.startsWithIgnoreCase("abcdef", "abc") = true\n     * StringUtils.startsWithIgnoreCase("ABCDEF", "abc") = true\n     * </pre>\n     *\n     * @see java.lang.String#startsWith(String)\n     * @param str  the CharSequence to check, may be null\n     * @param prefix the prefix to find, may be null\n     * @return {@code true} if the CharSequence starts with the prefix, case insensitive, or\n     *  both {@code null}\n     * @since 2.4\n     * @since 3.0 Changed signature from startsWithIgnoreCase(String, String) to startsWithIgnoreCase(CharSequence, CharSequence)\n     */\n    public static boolean startsWithIgnoreCase(CharSequence str, CharSequence prefix) {\n        return startsWith(str, prefix, true);\n    }\n\n    /**\n     * <p>Check if a CharSequence starts with a specified prefix (optionally case insensitive).</p>\n     *\n     * @see java.lang.String#startsWith(String)\n     * @param str  the CharSequence to check, may be null\n     * @param prefix the prefix to find, may be null\n     * @param ignoreCase indicates whether the compare should ignore case\n     *  (case insensitive) or not.\n     * @return {@code true} if the CharSequence starts with the prefix or\n     *  both {@code null}\n     */\n    private static boolean startsWith(CharSequence str, CharSequence prefix, boolean ignoreCase) {\n        if (str == null || prefix == null) {\n            return str == null && prefix == null;\n        }\n        if (prefix.length() > str.length()) {\n            return false;\n        }\n        return CharSequenceUtils.regionMatches(str, ignoreCase, 0, prefix, 0, prefix.length());\n    }\n\n    /**\n     * <p>Check if a CharSequence starts with any of an array of specified strings.</p>\n     *\n     * <pre>\n     * StringUtils.startsWithAny(null, null)      = false\n     * StringUtils.startsWithAny(null, new String[] {"abc"})  = false\n     * StringUtils.startsWithAny("abcxyz", null)     = false\n     * StringUtils.startsWithAny("abcxyz", new String[] {""}) = false\n     * StringUtils.startsWithAny("abcxyz", new String[] {"abc"}) = true\n     * StringUtils.startsWithAny("abcxyz", new String[] {null, "xyz", "abc"}) = true\n     * </pre>\n     *\n     * @param string  the CharSequence to check, may be null\n     * @param searchStrings the CharSequences to find, may be null or empty\n     * @return {@code true} if the CharSequence starts with any of the the prefixes, case insensitive, or\n     *  both {@code null}\n     * @since 2.5\n     * @since 3.0 Changed signature from startsWithAny(String, String[]) to startsWithAny(CharSequence, CharSequence...)\n     */\n    public static boolean startsWithAny(CharSequence string, CharSequence... searchStrings) {\n        if (isEmpty(string) || ArrayUtils.isEmpty(searchStrings)) {\n            return false;\n        }\n        for (CharSequence searchString : searchStrings) {\n            if (StringUtils.startsWith(string, searchString)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    // endsWith\n    //-----------------------------------------------------------------------\n\n    /**\n     * <p>Check if a CharSequence ends with a specified suffix.</p>\n     *\n     * <p>{@code null}s are handled without exceptions. Two {@code null}\n     * references are considered to be equal. The comparison is case sensitive.</p>\n     *\n     * <pre>\n     * StringUtils.endsWith(null, null)      = true\n     * StringUtils.endsWith(null, "def")     = false\n     * StringUtils.endsWith("abcdef", null)  = false\n     * StringUtils.endsWith("abcdef", "def") = true\n     * StringUtils.endsWith("ABCDEF", "def") = false\n     * StringUtils.endsWith("ABCDEF", "cde") = false\n     * </pre>\n     *\n     * @see java.lang.String#endsWith(String)\n     * @param str  the CharSequence to check, may be null\n     * @param suffix the suffix to find, may be null\n     * @return {@code true} if the CharSequence ends with the suffix, case sensitive, or\n     *  both {@code null}\n     * @since 2.4\n     * @since 3.0 Changed signature from endsWith(String, String) to endsWith(CharSequence, CharSequence)\n     */\n    public static boolean endsWith(CharSequence str, CharSequence suffix) {\n        return endsWith(str, suffix, false);\n    }\n\n    /**\n     * <p>Case insensitive check if a CharSequence ends with a specified suffix.</p>\n     *\n     * <p>{@code null}s are handled without exceptions. Two {@code null}\n     * references are considered to be equal. The comparison is case insensitive.</p>\n     *\n     * <pre>\n     * StringUtils.endsWithIgnoreCase(null, null)      = true\n     * StringUtils.endsWithIgnoreCase(null, "def")     = false\n     * StringUtils.endsWithIgnoreCase("abcdef", null)  = false\n     * StringUtils.endsWithIgnoreCase("abcdef", "def") = true\n     * StringUtils.endsWithIgnoreCase("ABCDEF", "def") = true\n     * StringUtils.endsWithIgnoreCase("ABCDEF", "cde") = false\n     * </pre>\n     *\n     * @see java.lang.String#endsWith(String)\n     * @param str  the CharSequence to check, may be null\n     * @param suffix the suffix to find, may be null\n     * @return {@code true} if the CharSequence ends with the suffix, case insensitive, or\n     *  both {@code null}\n     * @since 2.4\n     * @since 3.0 Changed signature from endsWithIgnoreCase(String, String) to endsWithIgnoreCase(CharSequence, CharSequence)\n     */\n    public static boolean endsWithIgnoreCase(CharSequence str, CharSequence suffix) {\n        return endsWith(str, suffix, true);\n    }\n\n    /**\n     * <p>Check if a CharSequence ends with a specified suffix (optionally case insensitive).</p>\n     *\n     * @see java.lang.String#endsWith(String)\n     * @param str  the CharSequence to check, may be null\n     * @param suffix the suffix to find, may be null\n     * @param ignoreCase indicates whether the compare should ignore case\n     *  (case insensitive) or not.\n     * @return {@code true} if the CharSequence starts with the prefix or\n     *  both {@code null}\n     */\n    private static boolean endsWith(CharSequence str, CharSequence suffix, boolean ignoreCase) {\n        if (str == null || suffix == null) {\n            return str == null && suffix == null;\n        }\n        if (suffix.length() > str.length()) {\n            return false;\n        }\n        int strOffset = str.length() - suffix.length();\n        return CharSequenceUtils.regionMatches(str, ignoreCase, strOffset, suffix, 0, suffix.length());\n    }\n\n    /**\n     * <p>\n     * Similar to <a\n     * href="http://www.w3.org/TR/xpath/#function-normalize-space">http://www.w3.org/TR/xpath/#function-normalize\n     * -space</a>\n     * </p>\n     * <p>\n     * The function returns the argument string with whitespace normalized by using\n     * <code>{@link #trim(String)}</code> to remove leading and trailing whitespace\n     * and then replacing sequences of whitespace characters by a single space.\n     * </p>\n     * In XML Whitespace characters are the same as those allowed by the <a\n     * href="http://www.w3.org/TR/REC-xml/#NT-S">S</a> production, which is S ::= (#x20 | #x9 | #xD | #xA)+\n     * <p>\n     * Java\'s regexp pattern \\s defines whitespace as [ \\t\\n\\x0B\\f\\r]\n     * <p>\n     * For reference:\n     * <ul>\n     * <li>\\x0B = vertical tab</li>\n     * <li>\\f = #xC = form feed</li>\n     * <li>#x20 = space</li>\n     * <li>#x9 = \\t</li>\n     * <li>#xA = \\n</li>\n     * <li>#xD = \\r</li>\n     * </ul>\n     * </p>\n     * <p>\n     * The difference is that Java\'s whitespace includes vertical tab and form feed, which this functional will also\n     * normalize. Additionally <code>{@link #trim(String)}</code> removes control characters (char &lt;= 32) from both\n     * ends of this String.\n     * </p>\n     *\n     * @see Pattern\n     * @see #trim(String)\n     * @see <a\n     *      href="http://www.w3.org/TR/xpath/#function-normalize-space">http://www.w3.org/TR/xpath/#function-normalize-space</a>\n     * @param str the source String to normalize whitespaces from, may be null\n     * @return the modified string with whitespace normalized, {@code null} if null String input\n     *\n     * @since 3.0\n     */\n    public static String normalizeSpace(String str) {\n        if (str == null) {\n            return null;\n        }\n        return WHITESPACE_BLOCK.matcher(trim(str)).replaceAll(" ");\n    }\n\n    /**\n     * <p>Check if a CharSequence ends with any of an array of specified strings.</p>\n     *\n     * <pre>\n     * StringUtils.endsWithAny(null, null)      = false\n     * StringUtils.endsWithAny(null, new String[] {"abc"})  = false\n     * StringUtils.endsWithAny("abcxyz", null)     = false\n     * StringUtils.endsWithAny("abcxyz", new String[] {""}) = true\n     * StringUtils.endsWithAny("abcxyz", new String[] {"xyz"}) = true\n     * StringUtils.endsWithAny("abcxyz", new String[] {null, "xyz", "abc"}) = true\n     * </pre>\n     *\n     * @param string  the CharSequence to check, may be null\n     * @param searchStrings the CharSequences to find, may be null or empty\n     * @return {@code true} if the CharSequence ends with any of the the prefixes, case insensitive, or\n     *  both {@code null}\n     * @since 3.0\n     */\n    public static boolean endsWithAny(CharSequence string, CharSequence... searchStrings) {\n        if (isEmpty(string) || ArrayUtils.isEmpty(searchStrings)) {\n            return false;\n        }\n        for (CharSequence searchString : searchStrings) {\n            if (StringUtils.endsWith(string, searchString)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Converts a <code>byte[]</code> to a String using the specified character encoding.\n     * \n     * @param bytes\n     *            the byte array to read from\n     * @param charsetName\n     *            the encoding to use, if null then use the platform default\n     * @return a new String\n     * @throws UnsupportedEncodingException\n     *             If the named charset is not supported\n     * @throws NullPointerException\n     *             if the input is null\n     * @since 3.1\n     */\n    public static String toString(byte[] bytes, String charsetName) throws UnsupportedEncodingException {\n        return charsetName == null ? new String(bytes) : new String(bytes, charsetName);\n    }\n\n}', 'tree': 'MethodDeclaration modifiers static_ter ^ public_ter ^ ^ return_type BasicType name boolean_ter ^ ^ ^ ^ name meth0 ^ ^ parameters FormalParameter type ReferenceType name CharSequence_ter ^ ^ ^ ^ name par0 ^ ^ ^ FormalParameter type ReferenceType name CharSequence_ter ^ ^ ^ ^ name par1 ^ ^ ^ ^ body IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr MemberReference member par1 ^ ^ ^ ^ ^ ^ then_statement BlockStatement statements ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ then_statement BlockStatement statements ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ ^ ^ ^ ', 'prob': [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 'mode': 0, 'line': 788, 'isa': False, 'fl_score': 1}]
before@0 batch0 x: 0: root ^  ; []
after@0 batch0 x: 0: root ^  ; []
copynode 0:  root modified ^ ^ ; ['root -> modified']
copynode 0:  root add ^ ^ ; ['root -> add']
copynode 0:  root ^ ; ['root -> End']
copynode 0:  root return_type ^ ^ ; ['root -> return_type']
copynode 0:  root ReturnStatement ^ ^ ; ['root -> ReturnStatement']
copynode 0:  root IfStatement ^ ^ ; ['root -> IfStatement']
copynode 0:  root StatementExpression ^ ^ ; ['root -> StatementExpression']
copynode 0:  root parameters ^ ^ ; ['root -> parameters']
copynode 0:  root member-member meth0 ^ ^  ^ ^ ; ['copy-member']
copynode 0:  root qualifier-qualifier par0 ^ ^  ^ ^ ; ['copy-qualifier']
before@1 batch0 x: -12.19802188873291: root qualifier-qualifier par0 ^ ^  ^ ^  ; ['copy-qualifier']
after@1 batch0 x: -12.19802188873291: root qualifier-qualifier par0 ^ ^  ^ ^  ; ['copy-qualifier']
copynode -0.1877073496580124:  root modified ^ member-member meth0 ^ ^  ^ ^ ; ['root -> modified', 'copy-member']
copynode -0.1877073496580124:  root modified ^ ReturnStatement ^ ^ ; ['root -> modified', 'root -> ReturnStatement']
copynode -1.7713923454284668:  root add ^ IfStatement ^ ^ ; ['root -> add', 'root -> IfStatement']
copynode -0.1877073496580124:  root modified ^ MemberReference-MemberReference member par1 ^ ^ ^  ^ ^ ; ['root -> modified', 'copy-MemberReference']
copynode -0.1877073496580124:  root modified ^ qualifier-qualifier par0 ^ ^  ^ ^ ; ['root -> modified', 'copy-qualifier']
copynode -1.7713923454284668:  root add ^ StatementExpression ^ ^ ; ['root -> add', 'root -> StatementExpression']
copynode -1.7713923454284668:  root add ^ ReturnStatement ^ ^ ; ['root -> add', 'root -> ReturnStatement']
copynode -1.7713923454284668:  root add ^ ReturnStatement_ter ^ ^ ; ['root -> add', 'root -> ReturnStatement_ter']
copynode -1.7713923454284668:  root add ^ control ^ ^ ; ['root -> add', 'root -> control']
copynode -1.7713923454284668:  root add ^ WhileStatement ^ ^ ; ['root -> add', 'root -> WhileStatement']
copynode -0.1877073496580124:  root modified ^ StatementExpression ^ ^ ; ['root -> modified', 'root -> StatementExpression']
copynode -1.7713923454284668:  root add ^ LocalVariableDeclaration ^ ^ ; ['root -> add', 'root -> LocalVariableDeclaration']
copynode -1.7713923454284668:  root add ^ AssertStatement ^ ^ ; ['root -> add', 'root -> AssertStatement']
copynode -0.1877073496580124:  root modified ^ IfStatement ^ ^ ; ['root -> modified', 'root -> IfStatement']
copynode -0.1877073496580124:  root modified ^ ReturnStatement_ter ^ ^ ; ['root -> modified', 'root -> ReturnStatement_ter']
copynode -1.7713923454284668:  root add ^ BreakStatement_ter ^ ^ ; ['root -> add', 'root -> BreakStatement_ter']
copynode -1.7713923454284668:  root add ^ member-member meth0 ^ ^  ^ ^ ; ['root -> add', 'copy-member']
copynode -8.516532897949219:  root return_type ReferenceType ^ ^ ^ ; ['root -> return_type', 'return_type -> ReferenceType']
copynode -8.735064506530762:  root ReturnStatement expression ^ ^ ^ ; ['root -> ReturnStatement', 'ReturnStatement -> expression']
copynode -0.1877073496580124:  root modified ^ ^ ; ['root -> modified', 'root -> End']
copynode -9.280529022216797:  root IfStatement condition ^ ^ ^ ; ['root -> IfStatement', 'IfStatement -> condition']
copynode -8.516532897949219:  root return_type BasicType ^ ^ ^ ; ['root -> return_type', 'return_type -> BasicType']
copynode -8.735064506530762:  root ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ ^ ; ['root -> ReturnStatement', 'copy-ReturnStatement']
copynode -10.148835182189941:  root StatementExpression expression ^ ^ ^ ; ['root -> StatementExpression', 'StatementExpression -> expression']
copynode -0.1877073496580124:  root modified ^ member-member par1 ^ ^  ^ ^ ; ['root -> modified', 'copy-member']
copynode -10.398266792297363:  root parameters FormalParameter ^ ^ ^ ; ['root -> parameters', 'parameters -> FormalParameter']
copynode -8.735064506530762:  root ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ ^ ; ['root -> ReturnStatement', 'copy-ReturnStatement']
copynode -0.1877073496580124:  root modified ^ ContinueStatement_ter ^ ^ ; ['root -> modified', 'root -> ContinueStatement_ter']
copynode -11.209035873413086:  root member-member meth0 ^ ^  unknown ^ ^ ^ ; ['copy-member', 'start -> unknown']
copynode -11.209035873413086:  root member-member meth0 ^ ^  meth0 ^ ^ ^ ; ['copy-member', 'member -> meth0']
copynode -10.398266792297363:  root parameters ^ ^ ; ['root -> parameters', 'parameters -> End']
copynode -12.19802188873291:  root qualifier-qualifier par0 ^ ^  par0 ^ ^ ^ ; ['copy-qualifier', 'qualifier -> par0']
copynode -12.19802188873291:  root qualifier-qualifier par0 ^ ^  unknown ^ ^ ^ ; ['copy-qualifier', 'start -> unknown']
copynode -12.19802188873291:  root qualifier-qualifier par0 ^ ^  par1 ^ ^ ^ ; ['copy-qualifier', 'qualifier -> par1']
copynode -11.209035873413086:  root member-member meth0 ^ ^  get_ter ^ ^ ^ ; ['copy-member', 'member -> get_ter']
copynode -11.209035873413086:  root member-member meth0 ^ ^  add_ter ^ ^ ^ ; ['copy-member', 'member -> add_ter']
copynode -10.398266792297363:  root parameters MemberReference ^ ^ ^ ; ['root -> parameters', 'parameters -> MemberReference']
copynode -12.19802188873291:  root qualifier-qualifier par0 ^ ^  loc0 ^ ^ ^ ; ['copy-qualifier', 'qualifier -> loc0']
copynode -12.19802188873291:  root qualifier-qualifier par0 ^ ^  par2 ^ ^ ^ ; ['copy-qualifier', 'qualifier -> par2']
copynode -11.209035873413086:  root member-member meth0 ^ ^  meth0 ^ ^ ^ ; ['copy-member', 'copy-member']
copynode -11.209035873413086:  root member-member meth0 ^ ^  debug_ter ^ ^ ^ ; ['copy-member', 'member -> debug_ter']
copynode -11.209035873413086:  root member-member meth0 ^ ^  toString_ter ^ ^ ^ ; ['copy-member', 'member -> toString_ter']
copynode -10.398266792297363:  root parameters InferredFormalParameter ^ ^ ^ ; ['root -> parameters', 'parameters -> InferredFormalParameter']
copynode -11.209035873413086:  root member-member meth0 ^ ^  put_ter ^ ^ ^ ; ['copy-member', 'member -> put_ter']
copynode -12.19802188873291:  root qualifier-qualifier par0 ^ ^  LOG_ter ^ ^ ^ ; ['copy-qualifier', 'qualifier -> LOG_ter']
copynode -11.209035873413086:  root member-member meth0 ^ ^  getName_ter ^ ^ ^ ; ['copy-member', 'member -> getName_ter']
copynode -11.209035873413086:  root member-member meth0 ^ ^  e_ter ^ ^ ^ ; ['copy-member', 'member -> e_ter']
copynode -12.19802188873291:  root qualifier-qualifier par0 ^ ^  Math_ter ^ ^ ^ ; ['copy-qualifier', 'qualifier -> Math_ter']
copynode -8.516532897949219:  root return_type BasicType name boolean_ter ^ ^ ^ ^ ^ ; ['root -> return_type', 'copy-return_type']
copynode -12.19802188873291:  root qualifier-qualifier par0 ^ ^  par3 ^ ^ ^ ; ['copy-qualifier', 'qualifier -> par3']
copynode -8.516532897949219:  root return_type par0 ^ ^ ^ ; ['root -> return_type', 'copy-FormalParameter']
copynode -8.735064506530762:  root ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ ^ ^ ; ['root -> ReturnStatement', 'copy-ReturnStatement']
copynode -8.516532897949219:  root return_type par1 ^ ^ ^ ; ['root -> return_type', 'copy-FormalParameter']
copynode -10.398266792297363:  root parameters FormalParameter type ReferenceType name CharSequence_ter ^ ^ ^ ^ name par0 ^ ^ ^ FormalParameter type ReferenceType name CharSequence_ter ^ ^ ^ ^ name par1 ^ ^ ^ ^ ^ ; ['root -> parameters', 'copy-parameters']
copynode -12.19802188873291:  root qualifier-qualifier par0 ^ ^  loc1 ^ ^ ^ ; ['copy-qualifier', 'qualifier -> loc1']
copynode -12.19802188873291:  root qualifier-qualifier par0 ^ ^  par4 ^ ^ ^ ; ['copy-qualifier', 'qualifier -> par4']
copynode -9.280529022216797:  root IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr MemberReference member par1 ^ ^ ^ ^ ^ ^ then_statement BlockStatement statements ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> IfStatement', 'copy-IfStatement']
copynode -9.280529022216797:  root IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ then_statement BlockStatement statements ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> IfStatement', 'copy-IfStatement']
copynode -10.398266792297363:  root parameters Cast ^ ^ ^ ; ['root -> parameters', 'parameters -> Cast']
copynode -10.148835182189941:  root StatementExpression par1 ^ ^ ^ ; ['root -> StatementExpression', 'copy-FormalParameter']
copynode -10.148835182189941:  root StatementExpression par0 ^ ^ ^ ; ['root -> StatementExpression', 'copy-FormalParameter']
copynode -8.735064506530762:  root ReturnStatement par1 ^ ^ ^ ; ['root -> ReturnStatement', 'copy-FormalParameter']
copynode -8.735064506530762:  root ReturnStatement par0 ^ ^ ^ ; ['root -> ReturnStatement', 'copy-FormalParameter']
copynode -10.398266792297363:  root parameters par0 ^ ^ ^ ; ['root -> parameters', 'copy-FormalParameter']
copynode -9.280529022216797:  root IfStatement par1 ^ ^ ^ ; ['root -> IfStatement', 'copy-FormalParameter']
copynode -10.398266792297363:  root parameters par1 ^ ^ ^ ; ['root -> parameters', 'copy-FormalParameter']
copynode -8.516532897949219:  root return_type unknown ^ ^ ^ ; ['root -> return_type', 'start -> unknown']
copynode -9.280529022216797:  root IfStatement par0 ^ ^ ^ ; ['root -> IfStatement', 'copy-FormalParameter']
copynode -9.280529022216797:  root IfStatement condition ^ then_statement ^ ^ ^ ; ['root -> IfStatement', 'IfStatement -> condition then_statement']
copynode -9.280529022216797:  root IfStatement unknown ^ ^ ^ ; ['root -> IfStatement', 'start -> unknown']
copynode -10.148835182189941:  root StatementExpression unknown ^ ^ ^ ; ['root -> StatementExpression', 'start -> unknown']
copynode -9.280529022216797:  root IfStatement condition ^ then_statement ^ else_statement ^ ^ ^ ; ['root -> IfStatement', 'IfStatement -> condition then_statement else_statement']
copynode -8.735064506530762:  root ReturnStatement unknown ^ ^ ^ ; ['root -> ReturnStatement', 'start -> unknown']
copynode -10.398266792297363:  root parameters unknown ^ ^ ^ ; ['root -> parameters', 'start -> unknown']
copynode -10.148835182189941:  root StatementExpression label ^ expression ^ ^ ^ ; ['root -> StatementExpression', 'StatementExpression -> label expression']
before@2 batch0 x: -30.07918071746826: root StatementExpression label ^ expression ^ ^ ^  ; ['root -> StatementExpression', 'StatementExpression -> label expression']
after@2 batch0 x: -30.07918071746826: root StatementExpression label ^ expression ^ ^ ^  ; ['root -> StatementExpression', 'StatementExpression -> label expression']
copynode -1.1711439341306686:  root modified ^ ReturnStatement expression ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression']
copynode -1.0626684874296188:  root modified ^ member-member meth0 ^ ^  unknown ^ ^ ^ ; ['root -> modified', 'copy-member', 'start -> unknown']
copynode -2.1221752166748047:  root add ^ IfStatement condition ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition']
copynode -2.238959953188896:  root modified ^ MemberReference-MemberReference member par1 ^ ^ ^  member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member']
copynode -2.7276155203580856:  root modified ^ qualifier-qualifier par0 ^ ^  unknown ^ ^ ^ ; ['root -> modified', 'copy-qualifier', 'start -> unknown']
copynode -1.0626684874296188:  root modified ^ member-member meth0 ^ ^  meth0 ^ ^ ^ ; ['root -> modified', 'copy-member', 'member -> meth0']
copynode -3.4614524841308594:  root add ^ StatementExpression expression ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression']
copynode -1.1711439341306686:  root modified ^ ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'copy-ReturnStatement']
copynode -4.138072967529297:  root add ^ ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'copy-ReturnStatement']
copynode -1.1711439341306686:  root modified ^ ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'copy-ReturnStatement']
copynode -2.7276155203580856:  root modified ^ qualifier-qualifier par0 ^ ^  par0 ^ ^ ^ ; ['root -> modified', 'copy-qualifier', 'qualifier -> par0']
copynode -2.238959953188896:  root modified ^ MemberReference-MemberReference member par1 ^ ^ ^  qualifier ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member']
copynode -1.0626684874296188:  root modified ^ member-member meth0 ^ ^  add_ter ^ ^ ^ ; ['root -> modified', 'copy-member', 'member -> add_ter']
copynode -4.138072967529297:  root add ^ ReturnStatement expression ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'ReturnStatement -> expression']
copynode -2.7276155203580856:  root modified ^ qualifier-qualifier par0 ^ ^  par1 ^ ^ ^ ; ['root -> modified', 'copy-qualifier', 'qualifier -> par1']
copynode -1.0626684874296188:  root modified ^ member-member meth0 ^ ^  debug_ter ^ ^ ^ ; ['root -> modified', 'copy-member', 'member -> debug_ter']
copynode -1.0626684874296188:  root modified ^ member-member meth0 ^ ^  meth0 ^ ^ ^ ; ['root -> modified', 'copy-member', 'copy-member']
copynode -4.138072967529297:  root add ^ ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'copy-ReturnStatement']
copynode -2.7276155203580856:  root modified ^ qualifier-qualifier par0 ^ ^  loc0 ^ ^ ^ ; ['root -> modified', 'copy-qualifier', 'qualifier -> loc0']
copynode -1.0626684874296188:  root modified ^ member-member meth0 ^ ^  e_ter ^ ^ ^ ; ['root -> modified', 'copy-member', 'member -> e_ter']
copynode -2.7276155203580856:  root modified ^ qualifier-qualifier par0 ^ ^  par2 ^ ^ ^ ; ['root -> modified', 'copy-qualifier', 'qualifier -> par2']
copynode -1.0626684874296188:  root modified ^ member-member meth0 ^ ^  max_ter ^ ^ ^ ; ['root -> modified', 'copy-member', 'member -> max_ter']
copynode -1.0626684874296188:  root modified ^ member-member meth0 ^ ^  put_ter ^ ^ ^ ; ['root -> modified', 'copy-member', 'member -> put_ter']
copynode -1.0626684874296188:  root modified ^ member-member meth0 ^ ^  get_ter ^ ^ ^ ; ['root -> modified', 'copy-member', 'member -> get_ter']
copynode -7.239509582519531:  root add ^ ReturnStatement_ter ^ ^ ; ['root -> add', 'root -> ReturnStatement_ter', 'root -> End']
copynode -7.562648773193359:  root add ^ control EnhancedForControl ^ ^ ^ ; ['root -> add', 'root -> control', 'control -> EnhancedForControl']
copynode -7.863433837890625:  root add ^ WhileStatement condition ^ ^ ^ ; ['root -> add', 'root -> WhileStatement', 'WhileStatement -> condition']
copynode -1.0626684874296188:  root modified ^ member-member meth0 ^ ^  i_ter ^ ^ ^ ; ['root -> modified', 'copy-member', 'member -> i_ter']
copynode -8.11508123576641:  root modified ^ StatementExpression expression ^ ^ ^ ; ['root -> modified', 'root -> StatementExpression', 'StatementExpression -> expression']
copynode -8.138507843017578:  root add ^ LocalVariableDeclaration type ^ declarators ^ ^ ^ ; ['root -> add', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators']
copynode -8.29975263774395:  root modified ^ IfStatement condition ^ ^ ^ ; ['root -> modified', 'root -> IfStatement', 'IfStatement -> condition']
copynode -8.24699592590332:  root add ^ AssertStatement condition ^ ^ ^ ; ['root -> add', 'root -> AssertStatement', 'AssertStatement -> condition']
copynode -2.7276155203580856:  root modified ^ qualifier-qualifier par0 ^ ^  par3 ^ ^ ^ ; ['root -> modified', 'copy-qualifier', 'qualifier -> par3']
copynode -8.659793302416801:  root modified ^ ReturnStatement_ter ^ ^ ; ['root -> modified', 'root -> ReturnStatement_ter', 'root -> End']
copynode -2.7276155203580856:  root modified ^ qualifier-qualifier par0 ^ ^  LOG_ter ^ ^ ^ ; ['root -> modified', 'copy-qualifier', 'qualifier -> LOG_ter']
copynode -8.718975067138672:  root add ^ BreakStatement_ter ^ ^ ; ['root -> add', 'root -> BreakStatement_ter', 'root -> End']
copynode -2.238959953188896:  root modified ^ MemberReference-MemberReference member par1 ^ ^ ^  postfix_operators ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> postfix_operators member']
copynode -2.7276155203580856:  root modified ^ qualifier-qualifier par0 ^ ^  Math_ter ^ ^ ^ ; ['root -> modified', 'copy-qualifier', 'qualifier -> Math_ter']
copynode -2.238959953188896:  root modified ^ MemberReference-MemberReference member par1 ^ ^ ^  prefix_operators ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> prefix_operators member']
copynode -8.83176851272583:  root add ^ member-member meth0 ^ ^  unknown ^ ^ ^ ; ['root -> add', 'copy-member', 'start -> unknown']
copynode -2.238959953188896:  root modified ^ MemberReference-MemberReference member par1 ^ ^ ^  selectors ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> selectors member']
copynode -2.7276155203580856:  root modified ^ qualifier-qualifier par0 ^ ^  loc1 ^ ^ ^ ; ['root -> modified', 'copy-qualifier', 'qualifier -> loc1']
copynode -2.7276155203580856:  root modified ^ qualifier-qualifier par0 ^ ^  par4 ^ ^ ^ ; ['root -> modified', 'copy-qualifier', 'qualifier -> par4']
copynode -9.95493733882904:  root ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ ^ ; ['root -> ReturnStatement', 'copy-ReturnStatement', 'root -> End']
copynode -9.839389085769653:  root return_type BasicType name ^ ^ ^ ^ ; ['root -> return_type', 'return_type -> BasicType', 'BasicType -> name']
copynode -9.280934296693886:  root IfStatement condition BinaryOperation ^ ^ ^ ^ ; ['root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation']
copynode -9.270123183727264:  root ReturnStatement expression BinaryOperation ^ ^ ^ ^ ; ['root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation']
copynode -8.83176851272583:  root add ^ member-member meth0 ^ ^  meth0 ^ ^ ^ ; ['root -> add', 'copy-member', 'member -> meth0']
copynode -9.012965500354767:  root return_type ReferenceType name CharSequence_ter ^ ^ ^ ^ ^ ; ['root -> return_type', 'return_type -> ReferenceType', 'copy-ReferenceType']
copynode -9.280934296693886:  root IfStatement condition MethodInvocation ^ ^ ^ ^ ; ['root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation']
copynode -9.012965500354767:  root return_type ReferenceType name CharSequence_ter ^ ^ ^ ^ ^ ; ['root -> return_type', 'return_type -> ReferenceType', 'copy-ReferenceType']
copynode -9.012965500354767:  root return_type ReferenceType name ^ arguments ^ ^ ^ ^ ; ['root -> return_type', 'return_type -> ReferenceType', 'ReferenceType -> name arguments']
copynode -10.192719474434853:  root StatementExpression expression MethodInvocation ^ ^ ^ ^ ; ['root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation']
copynode -10.287352964282036:  root modified ^ member-member par1 ^ ^  unknown ^ ^ ^ ; ['root -> modified', 'copy-member', 'start -> unknown']
copynode -7.562648773193359:  root add ^ control par1 ^ ^ ^ ; ['root -> add', 'root -> control', 'copy-FormalParameter']
copynode -7.562648773193359:  root add ^ control par0 ^ ^ ^ ; ['root -> add', 'root -> control', 'copy-FormalParameter']
copynode -9.270123183727264:  root ReturnStatement expression MethodInvocation ^ ^ ^ ^ ; ['root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation']
copynode -10.875481128692627:  root ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ ^ ; ['root -> ReturnStatement', 'copy-ReturnStatement', 'root -> End']
copynode -9.270123183727264:  root ReturnStatement expression Literal ^ ^ ^ ^ ; ['root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> Literal']
copynode -9.012965500354767:  root return_type ReferenceType name ^ ^ ^ ^ ; ['root -> return_type', 'return_type -> ReferenceType', 'ReferenceType -> name']
copynode -11.336793348193169:  root modified ^ ContinueStatement_ter ^ ^ ; ['root -> modified', 'root -> ContinueStatement_ter', 'root -> End']
copynode -9.270123183727264:  root ReturnStatement expression MemberReference ^ ^ ^ ^ ; ['root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MemberReference']
copynode -9.280934296693886:  root IfStatement condition MemberReference ^ ^ ^ ^ ; ['root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference']
copynode -10.502689465880394:  root parameters FormalParameter type ^ name ^ ^ ^ ^ ; ['root -> parameters', 'parameters -> FormalParameter', 'FormalParameter -> type name']
copynode -10.502689465880394:  root parameters FormalParameter modifiers ^ type ^ name ^ ^ ^ ^ ; ['root -> parameters', 'parameters -> FormalParameter', 'FormalParameter -> modifiers type name']
copynode -9.839389085769653:  root return_type BasicType name boolean_ter ^ ^ ^ ^ ^ ; ['root -> return_type', 'return_type -> BasicType', 'copy-BasicType']
copynode -7.239509582519531:  root add ^ ReturnStatement_ter ^ IfStatement ^ ^ ; ['root -> add', 'root -> ReturnStatement_ter', 'root -> IfStatement']
copynode -8.138507843017578:  root add ^ LocalVariableDeclaration modifiers ^ type ^ declarators ^ ^ ^ ; ['root -> add', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> modifiers type declarators']
copynode -11.743097186088562:  root member-member meth0 ^ ^  unknown ^ ^ ReturnStatement ^ ^ ; ['copy-member', 'start -> unknown', 'root -> ReturnStatement']
copynode -8.138507843017578:  root add ^ LocalVariableDeclaration par1 ^ ^ ^ ; ['root -> add', 'root -> LocalVariableDeclaration', 'copy-FormalParameter']
copynode -10.192719474434853:  root StatementExpression expression Assignment ^ ^ ^ ^ ; ['root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment']
copynode -8.138507843017578:  root add ^ LocalVariableDeclaration par0 ^ ^ ^ ; ['root -> add', 'root -> LocalVariableDeclaration', 'copy-FormalParameter']
copynode -7.239509582519531:  root add ^ ReturnStatement_ter ^ StatementExpression ^ ^ ; ['root -> add', 'root -> ReturnStatement_ter', 'root -> StatementExpression']
copynode -1.1711439341306686:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'copy-ReturnStatement']
copynode -7.562648773193359:  root add ^ control ForControl_ter ^ ^ ^ ; ['root -> add', 'root -> control', 'control -> ForControl_ter']
copynode -10.287352964282036:  root modified ^ member-member par1 ^ ^  meth0 ^ ^ ^ ; ['root -> modified', 'copy-member', 'member -> meth0']
copynode -8.718975067138672:  root add ^ BreakStatement_ter ^ IfStatement ^ ^ ; ['root -> add', 'root -> BreakStatement_ter', 'root -> IfStatement']
copynode -2.1221752166748047:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr MemberReference member par1 ^ ^ ^ ^ ^ ^ then_statement BlockStatement statements ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'copy-IfStatement']
copynode -7.562648773193359:  root add ^ control ForControl ^ ^ ^ ; ['root -> add', 'root -> control', 'control -> ForControl']
copynode -10.192719474434853:  root StatementExpression expression MemberReference ^ ^ ^ ^ ; ['root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MemberReference']
copynode -10.502689465880394:  root parameters FormalParameter type ReferenceType name CharSequence_ter ^ ^ ^ ^ name par1 ^ ^ ^ ^ ^ ; ['root -> parameters', 'parameters -> FormalParameter', 'copy-FormalParameter']
copynode -10.502689465880394:  root parameters FormalParameter type ReferenceType name CharSequence_ter ^ ^ ^ ^ name par0 ^ ^ ^ ^ ^ ; ['root -> parameters', 'parameters -> FormalParameter', 'copy-FormalParameter']
copynode -2.238959953188896:  root modified ^ MemberReference-MemberReference member par1 ^ ^ ^  qualifier ^ selectors ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier selectors member']
copynode -9.012965500354767:  root return_type ReferenceType name ^ dimensions ^ ^ ^ ^ ; ['root -> return_type', 'return_type -> ReferenceType', 'ReferenceType -> name dimensions']
copynode -12.333396673202515:  root member-member meth0 ^ ^  meth0 ^ ^ ^ ; ['copy-member', 'member -> meth0', 'root -> End']
copynode -9.839389085769653:  root return_type BasicType name ^ dimensions ^ ^ ^ ^ ; ['root -> return_type', 'return_type -> BasicType', 'BasicType -> name dimensions']
copynode -8.718975067138672:  root add ^ BreakStatement_ter ^ StatementExpression ^ ^ ; ['root -> add', 'root -> BreakStatement_ter', 'root -> StatementExpression']
copynode -9.012965500354767:  root return_type ReferenceType name ^ dimensions ^ arguments ^ ^ ^ ^ ; ['root -> return_type', 'return_type -> ReferenceType', 'ReferenceType -> name dimensions arguments']
copynode -7.239509582519531:  root add ^ ReturnStatement_ter ^ ReturnStatement ^ ^ ; ['root -> add', 'root -> ReturnStatement_ter', 'root -> ReturnStatement']
copynode -9.280934296693886:  root IfStatement condition This ^ ^ ^ ^ ; ['root -> IfStatement', 'IfStatement -> condition', 'condition -> This']
copynode -12.985051035881042:  root qualifier-qualifier par0 ^ ^  par0 ^ ^ ReturnStatement ^ ^ ; ['copy-qualifier', 'qualifier -> par0', 'root -> ReturnStatement']
copynode -8.138507843017578:  root add ^ LocalVariableDeclaration annotations ^ type ^ declarators ^ ^ ^ ; ['root -> add', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> annotations type declarators']
copynode -2.1221752166748047:  root add ^ IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ then_statement BlockStatement statements ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'copy-IfStatement']
copynode -12.333396673202515:  root member-member meth0 ^ ^  meth0 ^ ^ ReturnStatement ^ ^ ; ['copy-member', 'member -> meth0', 'root -> ReturnStatement']
copynode -8.83176851272583:  root add ^ member-member meth0 ^ ^  add_ter ^ ^ ^ ; ['root -> add', 'copy-member', 'member -> add_ter']
copynode -2.238959953188896:  root modified ^ MemberReference-MemberReference member par1 ^ ^ ^  prefix_operators ^ qualifier ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> prefix_operators qualifier member']
copynode -3.4614524841308594:  root add ^ StatementExpression par1 ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'copy-FormalParameter']
copynode -3.4614524841308594:  root add ^ StatementExpression par0 ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'copy-FormalParameter']
before@3 batch0 x: -13.534626960754395: root add ^ StatementExpression par0 ^ ^ ^  ; ['root -> add', 'root -> StatementExpression', 'copy-FormalParameter']
after@3 batch0 x: -13.534626960754395: root add ^ StatementExpression par0 ^ ^ ^  ; ['root -> add', 'root -> StatementExpression', 'copy-FormalParameter']
copynode -1.238129734992981:  root modified ^ member-member meth0 ^ ^  unknown ^ ^ ^ ; ['root -> modified', 'copy-member', 'start -> unknown', 'root -> End']
copynode -1.2301046140491962:  root modified ^ ReturnStatement expression MethodInvocation ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation']
copynode -1.2301046140491962:  root modified ^ ReturnStatement expression BinaryOperation ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation']
copynode -2.122515915252734:  root add ^ IfStatement condition BinaryOperation ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation']
copynode -2.9790771156549454:  root modified ^ qualifier-qualifier par0 ^ ^  unknown ^ ^ ^ ; ['root -> modified', 'copy-qualifier', 'start -> unknown', 'root -> End']
copynode -2.122515915252734:  root add ^ IfStatement condition MethodInvocation ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation']
copynode -2.3002876564860344:  root modified ^ MemberReference-MemberReference member par1 ^ ^ ^  member par1 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> par1']
copynode -3.33385007083416:  root modified ^ member-member meth0 ^ ^  meth0 ^ ^ ^ ; ['root -> modified', 'copy-member', 'member -> meth0', 'root -> End']
copynode -3.506349131464958:  root add ^ StatementExpression expression MethodInvocation ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation']
copynode -2.3002876564860344:  root modified ^ MemberReference-MemberReference member par1 ^ ^ ^  member par0 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> par0']
copynode -2.3002876564860344:  root modified ^ MemberReference-MemberReference member par1 ^ ^ ^  member par2 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> par2']
copynode -2.122515915252734:  root add ^ IfStatement condition MemberReference ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference']
copynode -1.2301046140491962:  root modified ^ ReturnStatement expression MemberReference ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MemberReference']
copynode -2.3002876564860344:  root modified ^ MemberReference-MemberReference member par1 ^ ^ ^  member unknown ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'start -> unknown']
copynode -4.705724403262138:  root modified ^ ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'copy-ReturnStatement', 'root -> End']
copynode -4.727611839771271:  root add ^ ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'copy-ReturnStatement', 'root -> End']
copynode -4.77076880633831:  root modified ^ ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'copy-ReturnStatement', 'root -> End']
copynode -5.025971338152885:  root modified ^ qualifier-qualifier par0 ^ ^  par0 ^ ^ ^ ; ['root -> modified', 'copy-qualifier', 'qualifier -> par0', 'root -> End']
copynode -2.3002876564860344:  root modified ^ MemberReference-MemberReference member par1 ^ ^ ^  member loc0 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> loc0']
copynode -1.2301046140491962:  root modified ^ ReturnStatement expression TernaryExpression ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression']
copynode -5.252757236361504:  root modified ^ member-member meth0 ^ ^  add_ter ^ ^ ^ ; ['root -> modified', 'copy-member', 'member -> add_ter', 'root -> End']
copynode -3.506349131464958:  root add ^ StatementExpression expression Assignment ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment']
copynode -1.2301046140491962:  root modified ^ ReturnStatement expression Literal ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> Literal']
copynode -1.2301046140491962:  root modified ^ ReturnStatement expression This ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> This']
copynode -5.549197122454643:  root modified ^ qualifier-qualifier par0 ^ ^  par1 ^ ^ ^ ; ['root -> modified', 'copy-qualifier', 'qualifier -> par1', 'root -> End']
copynode -5.606747791171074:  root modified ^ member-member meth0 ^ ^  debug_ter ^ ^ ^ ; ['root -> modified', 'copy-member', 'member -> debug_ter', 'root -> End']
copynode -5.124525472521782:  root modified ^ MemberReference-MemberReference member par1 ^ ^ ^  qualifier unknown ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'start -> unknown']
copynode -5.675348445773125:  root modified ^ member-member meth0 ^ ^  meth0 ^ ^ ^ ; ['root -> modified', 'copy-member', 'copy-member', 'root -> End']
copynode -5.992288827896118:  root add ^ ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'copy-ReturnStatement', 'root -> End']
copynode -2.3002876564860344:  root modified ^ MemberReference-MemberReference member par1 ^ ^ ^  member par3 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> par3']
copynode -3.506349131464958:  root add ^ StatementExpression expression MemberReference ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MemberReference']
copynode -2.122515915252734:  root add ^ IfStatement condition This ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> This']
copynode -6.390587493777275:  root modified ^ qualifier-qualifier par0 ^ ^  loc0 ^ ^ ^ ; ['root -> modified', 'copy-qualifier', 'qualifier -> loc0', 'root -> End']
copynode -5.3826799392700195:  root add ^ ReturnStatement expression Literal ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> Literal']
copynode -6.527241870760918:  root modified ^ member-member meth0 ^ ^  e_ter ^ ^ ^ ; ['root -> modified', 'copy-member', 'member -> e_ter', 'root -> End']
copynode -1.2301046140491962:  root modified ^ ReturnStatement expression Cast ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> Cast']
copynode -5.3826799392700195:  root add ^ ReturnStatement expression BinaryOperation ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation']
copynode -6.666477844119072:  root modified ^ qualifier-qualifier par0 ^ ^  par2 ^ ^ ^ ; ['root -> modified', 'copy-qualifier', 'qualifier -> par2', 'root -> End']
copynode -5.124525472521782:  root modified ^ MemberReference-MemberReference member par1 ^ ^ ^  qualifier par1 ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par1']
copynode -6.716567203402519:  root modified ^ member-member meth0 ^ ^  max_ter ^ ^ ^ ; ['root -> modified', 'copy-member', 'member -> max_ter', 'root -> End']
copynode -6.762332126498222:  root modified ^ member-member meth0 ^ ^  put_ter ^ ^ ^ ; ['root -> modified', 'copy-member', 'member -> put_ter', 'root -> End']
copynode -6.903422519564629:  root modified ^ member-member meth0 ^ ^  get_ter ^ ^ ^ ; ['root -> modified', 'copy-member', 'member -> get_ter', 'root -> End']
copynode -2.3002876564860344:  root modified ^ MemberReference-MemberReference member par1 ^ ^ ^  member loc1 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> loc1']
copynode -5.3826799392700195:  root add ^ ReturnStatement expression MethodInvocation ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation']
copynode -5.124525472521782:  root modified ^ MemberReference-MemberReference member par1 ^ ^ ^  qualifier par0 ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0']
copynode -1.2301046140491962:  root modified ^ ReturnStatement expression Assignment ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> Assignment']
copynode -5.3826799392700195:  root add ^ ReturnStatement expression MemberReference ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MemberReference']
copynode -3.506349131464958:  root add ^ StatementExpression expression This ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> This']
copynode -7.723518684506416:  root add ^ control EnhancedForControl var ^ iterable ^ ^ ^ ^ ; ['root -> add', 'root -> control', 'control -> EnhancedForControl', 'EnhancedForControl -> var iterable']
copynode -2.122515915252734:  root add ^ IfStatement condition Literal ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> Literal']
copynode -1.2301046140491962:  root modified ^ ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'copy-expression']
copynode -1.2301046140491962:  root modified ^ ReturnStatement expression ClassCreator ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> ClassCreator']
copynode -8.074446842074394:  root modified ^ member-member meth0 ^ ^  i_ter ^ ^ ^ ; ['root -> modified', 'copy-member', 'member -> i_ter', 'root -> End']
copynode -8.120490476954728:  root modified ^ StatementExpression expression MethodInvocation ^ ^ ^ ^ ; ['root -> modified', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation']
copynode -2.122515915252734:  root add ^ IfStatement condition Cast ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> Cast']
copynode -2.3002876564860344:  root modified ^ MemberReference-MemberReference member par1 ^ ^ ^  member loc2 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> loc2']
copynode -8.594290420413017:  root modified ^ qualifier-qualifier par0 ^ ^  par3 ^ ^ ^ ; ['root -> modified', 'copy-qualifier', 'qualifier -> par3', 'root -> End']
copynode -7.873028262518346:  root add ^ WhileStatement condition BinaryOperation ^ ^ ^ ^ ; ['root -> add', 'root -> WhileStatement', 'WhileStatement -> condition', 'condition -> BinaryOperation']
copynode -2.3002876564860344:  root modified ^ MemberReference-MemberReference member par1 ^ ^ ^  member par4 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> par4']
copynode -8.677364990115166:  root modified ^ qualifier-qualifier par0 ^ ^  LOG_ter ^ ^ ^ ; ['root -> modified', 'copy-qualifier', 'qualifier -> LOG_ter', 'root -> End']
copynode -8.21798887103796:  root add ^ LocalVariableDeclaration type BasicType ^ ^ declarators ^ ^ ^ ; ['root -> add', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> BasicType']
copynode -2.3002876564860344:  root modified ^ MemberReference-MemberReference member par1 ^ ^ ^  member loc3 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> loc3']
copynode -3.506349131464958:  root add ^ StatementExpression expression SuperMethodInvocation ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> SuperMethodInvocation']
copynode -7.873028262518346:  root add ^ WhileStatement condition MethodInvocation ^ ^ ^ ^ ; ['root -> add', 'root -> WhileStatement', 'WhileStatement -> condition', 'condition -> MethodInvocation']
copynode -8.329277254641056:  root add ^ AssertStatement condition BinaryOperation ^ ^ ^ ^ ; ['root -> add', 'root -> AssertStatement', 'AssertStatement -> condition', 'condition -> BinaryOperation']
copynode -2.122515915252734:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr MemberReference member par1 ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'copy-condition']
copynode -8.30014980272972:  root modified ^ IfStatement condition MethodInvocation ^ ^ ^ ^ ; ['root -> modified', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation']
copynode -9.047733947634697:  root modified ^ qualifier-qualifier par0 ^ ^  Math_ter ^ ^ ^ ; ['root -> modified', 'copy-qualifier', 'qualifier -> Math_ter', 'root -> End']
copynode -8.799547836184502:  root modified ^ MemberReference-MemberReference member par1 ^ ^ ^  postfix_operators ++_ter ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> postfix_operators member', 'postfix_operators -> ++_ter']
copynode -8.21798887103796:  root add ^ LocalVariableDeclaration type ReferenceType ^ ^ declarators ^ ^ ^ ; ['root -> add', 'root -> LocalVariableDeclaration', 'LocalVariableDeclaration -> type declarators', 'type -> ReferenceType']
copynode -8.30014980272972:  root modified ^ IfStatement condition BinaryOperation ^ ^ ^ ^ ; ['root -> modified', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation']
copynode -2.122515915252734:  root add ^ IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'copy-condition']
copynode -9.118259117007256:  root modified ^ MemberReference-MemberReference member par1 ^ ^ ^  prefix_operators -_ter ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> prefix_operators member', 'prefix_operators -> -_ter']
copynode -9.276549026370049:  root modified ^ MemberReference-MemberReference member par1 ^ ^ ^  selectors ArraySelector ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> selectors member', 'selectors -> ArraySelector']
copynode -9.195378869771957:  root add ^ member-member meth0 ^ ^  unknown ^ ^ ^ ; ['root -> add', 'copy-member', 'start -> unknown', 'root -> End']
copynode -9.495064422488213:  root modified ^ qualifier-qualifier par0 ^ ^  loc1 ^ ^ ^ ; ['root -> modified', 'copy-qualifier', 'qualifier -> loc1', 'root -> End']
copynode -5.124525472521782:  root modified ^ MemberReference-MemberReference member par1 ^ ^ ^  qualifier par2 ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par2']
copynode -8.329277254641056:  root add ^ AssertStatement condition MethodInvocation ^ ^ ^ ^ ; ['root -> add', 'root -> AssertStatement', 'AssertStatement -> condition', 'condition -> MethodInvocation']
copynode -4.727611839771271:  root add ^ ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ IfStatement ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'copy-ReturnStatement', 'root -> IfStatement']
copynode -2.122515915252734:  root add ^ IfStatement condition TernaryExpression ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> TernaryExpression']
copynode -5.124525472521782:  root modified ^ MemberReference-MemberReference member par1 ^ ^ ^  qualifier loc0 ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'qualifier -> loc0']
copynode -3.506349131464958:  root add ^ StatementExpression expression BinaryOperation ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> BinaryOperation']
copynode -7.873028262518346:  root add ^ WhileStatement condition MemberReference ^ ^ ^ ^ ; ['root -> add', 'root -> WhileStatement', 'WhileStatement -> condition', 'condition -> MemberReference']
copynode -9.894636794924736:  root modified ^ qualifier-qualifier par0 ^ ^  par4 ^ ^ ^ ; ['root -> modified', 'copy-qualifier', 'qualifier -> par4', 'root -> End']
copynode -4.727611839771271:  root add ^ ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ StatementExpression ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'copy-ReturnStatement', 'root -> StatementExpression']
copynode -5.3826799392700195:  root add ^ ReturnStatement expression This ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> This']
copynode -10.156190514564514:  root add ^ member-member meth0 ^ ^  meth0 ^ ^ ^ ; ['root -> add', 'copy-member', 'member -> meth0', 'root -> End']
copynode -10.104530058946693:  root IfStatement condition BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ ^ ^ ; ['root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
copynode -10.158632338047028:  root return_type ReferenceType name CharSequence_ter ^ ^ ^ ^ ^ ; ['root -> return_type', 'return_type -> ReferenceType', 'copy-ReferenceType', 'root -> End']
copynode -10.137742698192596:  root ReturnStatement expression BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ ^ ^ ; ['root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
copynode -8.329277254641056:  root add ^ AssertStatement condition MemberReference ^ ^ ^ ^ ; ['root -> add', 'root -> AssertStatement', 'AssertStatement -> condition', 'condition -> MemberReference']
copynode -3.506349131464958:  root add ^ StatementExpression expression Cast ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Cast']
copynode -1.238129734992981:  root modified ^ member-member meth0 ^ ^  unknown ^ ^ StatementExpression ^ ^ ; ['root -> modified', 'copy-member', 'start -> unknown', 'root -> StatementExpression']
copynode -8.799547836184502:  root modified ^ MemberReference-MemberReference member par1 ^ ^ ^  postfix_operators --_ter ^ ^ member ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> postfix_operators member', 'postfix_operators -> --_ter']
before@4 batch0 x: -10.381338521838188: root modified ^ MemberReference-MemberReference member par1 ^ ^ ^  postfix_operators --_ter ^ ^ member ^ ^ ^  ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> postfix_operators member', 'postfix_operators -> --_ter']
after@4 batch0 x: -10.381338521838188: root modified ^ MemberReference-MemberReference member par1 ^ ^ ^  postfix_operators --_ter ^ ^ member ^ ^ ^  ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> postfix_operators member', 'postfix_operators -> --_ter']
copynode -1.8600458391010761:  root modified ^ ReturnStatement expression MethodInvocation qualifier ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member']
copynode -2.241925645619631:  root modified ^ ReturnStatement expression BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
copynode -2.8589447124977596:  root add ^ IfStatement condition BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
copynode -3.2148756310343742:  root modified ^ MemberReference-MemberReference member par1 ^ ^ ^  member par1 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> par1', 'root -> End']
copynode -3.8539537712931633:  root modified ^ MemberReference-MemberReference member par1 ^ ^ ^  member par0 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> par0', 'root -> End']
copynode -3.943362645804882:  root modified ^ MemberReference-MemberReference member par1 ^ ^ ^  member par2 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> par2', 'root -> End']
copynode -3.1018838270683773:  root add ^ IfStatement condition MethodInvocation qualifier ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier arguments member']
copynode -3.803572788834572:  root add ^ StatementExpression expression MethodInvocation qualifier ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member']
copynode -1.8600458391010761:  root modified ^ ReturnStatement expression MethodInvocation arguments ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> arguments member']
copynode -4.488484788686037:  root modified ^ ReturnStatement expression MemberReference member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MemberReference', 'MemberReference -> member']
copynode -4.685008458793163:  root modified ^ MemberReference-MemberReference member par1 ^ ^ ^  member unknown ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'start -> unknown', 'root -> End']
copynode -3.1018838270683773:  root add ^ IfStatement condition MethodInvocation qualifier ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier member']
copynode -4.226797817565966:  root add ^ IfStatement condition MemberReference member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference', 'MemberReference -> member']
copynode -1.8600458391010761:  root modified ^ ReturnStatement expression MethodInvocation qualifier ^ selectors ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier selectors arguments member']
copynode -1.8600458391010761:  root modified ^ ReturnStatement expression MethodInvocation qualifier ^ selectors ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier selectors member']
copynode -5.057797841727734:  root modified ^ MemberReference-MemberReference member par1 ^ ^ ^  member loc0 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> loc0', 'root -> End']
copynode -3.1018838270683773:  root add ^ IfStatement condition MethodInvocation prefix_operators ^ qualifier ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> prefix_operators qualifier arguments member']
copynode -5.175063539296389:  root modified ^ ReturnStatement expression TernaryExpression condition ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false']
copynode -5.272423908114433:  root add ^ StatementExpression expression Assignment expressionl ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type']
copynode -4.226797817565966:  root add ^ IfStatement condition MemberReference prefix_operators ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference', 'MemberReference -> prefix_operators member']
copynode -5.3270408399403095:  root modified ^ ReturnStatement expression Literal value ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> Literal', 'Literal -> value']
copynode -5.392901588231325:  root modified ^ ReturnStatement expression This selectors ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> This', 'This -> selectors']
copynode -3.1018838270683773:  root add ^ IfStatement condition MethodInvocation prefix_operators ^ qualifier ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> prefix_operators qualifier member']
copynode -2.8589447124977596:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'copy-BinaryOperation']
copynode -3.803572788834572:  root add ^ StatementExpression expression MethodInvocation qualifier ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier member']
copynode -1.8600458391010761:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'copy-MethodInvocation']
copynode -3.803572788834572:  root add ^ StatementExpression expression MethodInvocation arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> arguments member']
copynode -3.1018838270683773:  root add ^ IfStatement condition MethodInvocation qualifier ^ selectors ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier selectors member']
copynode -3.1018838270683773:  root add ^ IfStatement condition MethodInvocation arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> arguments member']
copynode -2.8589447124977596:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'copy-BinaryOperation']
copynode -1.8600458391010761:  root modified ^ ReturnStatement expression MethodInvocation selectors ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> selectors member']
copynode -6.281215123832226:  root modified ^ MemberReference-MemberReference member par1 ^ ^ ^  member par3 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> par3', 'root -> End']
copynode -2.241925645619631:  root modified ^ ReturnStatement expression BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'copy-BinaryOperation']
copynode -2.241925645619631:  root modified ^ ReturnStatement expression BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'copy-BinaryOperation']
copynode -1.8600458391010761:  root modified ^ ReturnStatement expression MethodInvocation qualifier ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier member']
copynode -6.299061819911003:  root add ^ StatementExpression expression MemberReference postfix_operators ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MemberReference', 'MemberReference -> postfix_operators member']
copynode -3.1018838270683773:  root add ^ IfStatement condition MethodInvocation member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> member']
copynode -6.527318239212036:  root add ^ ReturnStatement expression Literal value ^ ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> Literal', 'Literal -> value']
copynode -6.56305043771863:  root modified ^ ReturnStatement expression Cast type ^ expression ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> Cast', 'Cast -> type expression']
copynode -6.587514162063599:  root add ^ ReturnStatement expression BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
copynode -3.803572788834572:  root add ^ StatementExpression expression MethodInvocation member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> member']
copynode -4.226797817565966:  root add ^ IfStatement condition MemberReference qualifier ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference', 'MemberReference -> qualifier member']
copynode -3.1018838270683773:  root add ^ IfStatement condition MethodInvocation prefix_operators ^ qualifier ^ selectors ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> prefix_operators qualifier selectors member']
copynode -1.8600458391010761:  root modified ^ ReturnStatement expression MethodInvocation prefix_operators ^ qualifier ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> prefix_operators qualifier arguments member']
copynode -1.8600458391010761:  root modified ^ ReturnStatement expression MethodInvocation selectors ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> selectors arguments member']
copynode -6.705902978777885:  root modified ^ MemberReference-MemberReference member par1 ^ ^ ^  qualifier par1 ^ ^ member unknown ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par1', 'start -> unknown']
copynode -6.927228383719921:  root modified ^ MemberReference-MemberReference member par1 ^ ^ ^  member loc1 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> loc1', 'root -> End']
copynode -3.1018838270683773:  root add ^ IfStatement condition MethodInvocation prefix_operators ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> prefix_operators arguments member']
copynode -6.3569953425903805:  root add ^ IfStatement condition This selectors ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> This', 'This -> selectors']
copynode -3.1018838270683773:  root add ^ IfStatement condition MethodInvocation qualifier ^ selectors ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier selectors arguments member']
copynode -4.488484788686037:  root modified ^ ReturnStatement expression MemberReference qualifier ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MemberReference', 'MemberReference -> qualifier member']
copynode -7.034638449549675:  root modified ^ MemberReference-MemberReference member par1 ^ ^ ^  qualifier par0 ^ ^ member unknown ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'start -> unknown']
copynode -7.233247924596071:  root modified ^ ReturnStatement expression Assignment expressionl ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type']
copynode -7.269253969192505:  root add ^ ReturnStatement expression MemberReference member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MemberReference', 'MemberReference -> member']
copynode -6.969714403152466:  root add ^ ReturnStatement expression MethodInvocation qualifier ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member']
copynode -1.8600458391010761:  root modified ^ ReturnStatement expression MethodInvocation member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> member']
copynode -6.3569953425903805:  root add ^ IfStatement condition This qualifier ^ selectors ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> This', 'This -> qualifier selectors']
copynode -7.731129691004753:  root add ^ StatementExpression expression This selectors ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> This', 'This -> selectors']
copynode -3.803572788834572:  root add ^ StatementExpression expression MethodInvocation qualifier ^ selectors ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier selectors member']
copynode -7.862583328038454:  root modified ^ ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'copy-expression', 'root -> End']
copynode -6.3569953425903805:  root add ^ IfStatement condition This prefix_operators ^ selectors ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> This', 'This -> prefix_operators selectors']
copynode -4.226797817565966:  root add ^ IfStatement condition MemberReference prefix_operators ^ qualifier ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference', 'MemberReference -> prefix_operators qualifier member']
copynode -5.392901588231325:  root modified ^ ReturnStatement expression This qualifier ^ selectors ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> This', 'This -> qualifier selectors']
copynode -7.826164959289599:  root add ^ IfStatement condition Literal selectors ^ value ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> Literal', 'Literal -> selectors value']
copynode -8.314800976135302:  root add ^ IfStatement condition Cast type ^ expression ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> Cast', 'Cast -> type expression']
copynode -3.803572788834572:  root add ^ StatementExpression expression MethodInvocation selectors ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> selectors member']
copynode -8.181683261413127:  root modified ^ StatementExpression expression MethodInvocation qualifier ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member']
copynode -8.002511192113161:  root modified ^ ReturnStatement expression ClassCreator type ^ arguments ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> ClassCreator', 'ClassCreator -> type arguments']
copynode -8.52236121147871:  root modified ^ MemberReference-MemberReference member par1 ^ ^ ^  member loc2 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> loc2', 'root -> End']
copynode -8.659673146903515:  root modified ^ MemberReference-MemberReference member par1 ^ ^ ^  member par4 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> par4', 'root -> End']
copynode -8.603911503218114:  root add ^ WhileStatement condition BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> WhileStatement', 'WhileStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
copynode -6.969714403152466:  root add ^ ReturnStatement expression MethodInvocation qualifier ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier member']
copynode -8.8430799767375:  root modified ^ MemberReference-MemberReference member par1 ^ ^ ^  member loc3 ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> loc3', 'root -> End']
copynode -7.740989498794079:  root add ^ control EnhancedForControl var VariableDeclaration ^ ^ iterable ^ ^ ^ ^ ; ['root -> add', 'root -> control', 'control -> EnhancedForControl', 'EnhancedForControl -> var iterable', 'var -> VariableDeclaration']
before@5 batch0 x: -9.047900496880175: root modified ^ qualifier-qualifier par0 ^ ^  Math_ter ^ ^ ^  ; ['root -> modified', 'copy-qualifier', 'qualifier -> Math_ter', 'root -> End']
after@5 batch0 x: -9.047900496880175: root modified ^ qualifier-qualifier par0 ^ ^  Math_ter ^ ^ ^  ; ['root -> modified', 'copy-qualifier', 'qualifier -> Math_ter', 'root -> End']
copynode -2.1180300302803516:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0']
copynode -2.2748518101871014:  root modified ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter']
copynode -2.2748518101871014:  root modified ^ ReturnStatement expression BinaryOperation operator ||_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter']
copynode -2.9476433455129154:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter']
copynode -4.1877505630254745:  root add ^ StatementExpression expression MethodInvocation qualifier par0 ^ ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0']
copynode -2.1180300302803516:  root modified ^ ReturnStatement expression MethodInvocation qualifier unknown ^ ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown']
copynode -2.9476433455129154:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter']
copynode -2.2748518101871014:  root modified ^ ReturnStatement expression BinaryOperation operator ==_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter']
copynode -4.898915696889162:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ selectors ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier selectors arguments member', 'qualifier -> par0']
copynode -4.571303855627775:  root modified ^ ReturnStatement expression MemberReference member par0 ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MemberReference', 'MemberReference -> member', 'member -> par0']
copynode -4.709333597042132:  root add ^ IfStatement condition MethodInvocation qualifier par1 ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> par1']
copynode -4.095165429927874:  root add ^ IfStatement condition MethodInvocation qualifier unknown ^ ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown']
copynode -2.9476433455129154:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter']
copynode -5.159559427120257:  root add ^ IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> prefix_operators qualifier arguments member', 'prefix_operators -> !_ter']
copynode -2.9476433455129154:  root add ^ IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter']
copynode -4.095165429927874:  root add ^ IfStatement condition MethodInvocation qualifier par1 ^ ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par1']
copynode -4.464396882802248:  root modified ^ ReturnStatement expression MethodInvocation arguments MemberReference ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference']
copynode -5.272730978787877:  root add ^ StatementExpression expression Assignment expressionl MemberReference ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference']
copynode -4.820494113781024:  root add ^ IfStatement condition MemberReference member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference', 'MemberReference -> member', 'start -> unknown']
copynode -5.3137155755539425:  root add ^ IfStatement condition MemberReference prefix_operators !_ter ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference', 'MemberReference -> prefix_operators member', 'prefix_operators -> !_ter']
copynode -4.464396882802248:  root modified ^ ReturnStatement expression MethodInvocation arguments MemberReference member par1 ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> arguments member', 'copy-arguments']
copynode -2.2748518101871014:  root modified ^ ReturnStatement expression BinaryOperation operator !=_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter']
copynode -5.007569719105959:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ selectors ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier selectors member', 'qualifier -> par0']
copynode -4.095165429927874:  root add ^ IfStatement condition MethodInvocation qualifier par0 ^ ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0']
copynode -5.4587623961269855:  root modified ^ ReturnStatement expression This selectors MemberReference ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> This', 'This -> selectors', 'selectors -> MemberReference']
copynode -5.707395730831195:  root add ^ IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> prefix_operators qualifier member', 'prefix_operators -> !_ter']
copynode -4.571303855627775:  root modified ^ ReturnStatement expression MemberReference member par1 ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MemberReference', 'MemberReference -> member', 'member -> par1']
copynode -2.9476433455129154:  root add ^ IfStatement condition BinaryOperation operator <_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter']
copynode -5.340284505859017:  root modified ^ ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> Literal', 'Literal -> value', 'value -> false_ter']
copynode -5.176895018434152:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation']
copynode -5.971140790730715:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'copy-MethodInvocation', 'root -> End']
copynode -2.9476433455129154:  root add ^ IfStatement condition BinaryOperation operator >_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >_ter']
copynode -4.820494113781024:  root add ^ IfStatement condition MemberReference member par1 ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference', 'MemberReference -> member', 'member -> par1']
copynode -5.007569719105959:  root modified ^ ReturnStatement expression MethodInvocation qualifier par1 ^ ^ selectors ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier selectors member', 'qualifier -> par1']
copynode -6.221758294850588:  root modified ^ ReturnStatement expression MethodInvocation selectors MethodInvocation ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> selectors member', 'selectors -> MethodInvocation']
copynode -4.1877505630254745:  root add ^ StatementExpression expression MethodInvocation qualifier unknown ^ ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown']
copynode -4.709333597042132:  root add ^ IfStatement condition MethodInvocation qualifier par0 ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> par0']
copynode -6.378445077687502:  root modified ^ ReturnStatement expression BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'copy-BinaryOperation', 'root -> End']
copynode -6.383766580373049:  root modified ^ ReturnStatement expression BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'copy-BinaryOperation', 'root -> End']
copynode -5.176895018434152:  root modified ^ ReturnStatement expression TernaryExpression condition MethodInvocation ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> MethodInvocation']
copynode -5.8923423870583065:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ReturnStatement ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'copy-BinaryOperation', 'root -> ReturnStatement']
copynode -6.130863366939593:  root add ^ IfStatement condition MethodInvocation qualifier par1 ^ ^ selectors ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier selectors member', 'qualifier -> par1']
copynode -5.340284505859017:  root modified ^ ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> Literal', 'Literal -> value', 'value -> true_ter']
copynode -4.464396882802248:  root modified ^ ReturnStatement expression MethodInvocation arguments MethodInvocation ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MethodInvocation']
copynode -6.475734887935687:  root add ^ IfStatement condition MethodInvocation member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown']
copynode -5.984385147690773:  root add ^ StatementExpression expression MethodInvocation arguments MemberReference member par1 ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> arguments member', 'copy-arguments']
copynode -6.183077035762835:  root add ^ IfStatement condition MethodInvocation arguments MemberReference member par1 ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> arguments member', 'copy-arguments']
copynode -2.2748518101871014:  root modified ^ ReturnStatement expression BinaryOperation operator <_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter']
copynode -5.176895018434152:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> MemberReference']
copynode -4.1877505630254745:  root add ^ StatementExpression expression MethodInvocation qualifier par1 ^ ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par1']
copynode -6.205101786472369:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ReturnStatement ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'copy-BinaryOperation', 'root -> ReturnStatement']
copynode -6.74066986143589:  root add ^ StatementExpression expression MethodInvocation member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown']
copynode -6.767185388423968:  root add ^ IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier ^ selectors ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> prefix_operators qualifier selectors member', 'prefix_operators -> !_ter']
copynode -5.93379844725132:  root add ^ StatementExpression expression MethodInvocation qualifier par1 ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> par1']
copynode -5.93379844725132:  root add ^ StatementExpression expression MethodInvocation qualifier par0 ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> par0']
copynode -6.87910470366478:  root modified ^ MemberReference-MemberReference member par1 ^ ^ ^  qualifier par1 ^ ^ member unknown ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par1', 'start -> unknown', 'root -> End']
copynode -6.431521821767092:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> par0']
copynode -6.8202776201069355:  root modified ^ ReturnStatement expression MethodInvocation selectors MethodInvocation ^ ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> selectors arguments member', 'selectors -> MethodInvocation']
copynode -2.2748518101871014:  root modified ^ ReturnStatement expression BinaryOperation operator >_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >_ter']
copynode -2.1180300302803516:  root modified ^ ReturnStatement expression MethodInvocation qualifier par1 ^ ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par1']
copynode -6.439159512519836:  root add ^ StatementExpression expression MemberReference postfix_operators ++_ter ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MemberReference', 'MemberReference -> postfix_operators member', 'postfix_operators -> ++_ter']
copynode -6.965648828365374:  root add ^ IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> prefix_operators arguments member', 'prefix_operators -> !_ter']
copynode -5.4587623961269855:  root modified ^ ReturnStatement expression This selectors MethodInvocation ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> This', 'This -> selectors', 'selectors -> MethodInvocation']
copynode -2.9476433455129154:  root add ^ IfStatement condition BinaryOperation operator >=_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >=_ter']
copynode -6.7861027009785175:  root modified ^ ReturnStatement expression MethodInvocation prefix_operators !_ter ^ ^ qualifier ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> prefix_operators qualifier arguments member', 'prefix_operators -> !_ter']
copynode -6.540722399018705:  root add ^ ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> Literal', 'Literal -> value', 'value -> false_ter']
copynode -5.984385147690773:  root add ^ StatementExpression expression MethodInvocation arguments MemberReference ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference']
copynode -6.576003021560609:  root modified ^ ReturnStatement expression Cast type BasicType ^ ^ expression ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> Cast', 'Cast -> type expression', 'type -> BasicType']
copynode -7.227004438638687:  root modified ^ MemberReference-MemberReference member par1 ^ ^ ^  qualifier par0 ^ ^ member unknown ^ ^ ^ ^ ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> qualifier member', 'qualifier -> par0', 'start -> unknown', 'root -> End']
copynode -7.016866622783709:  root add ^ IfStatement condition This selectors MemberReference ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> This', 'This -> selectors', 'selectors -> MemberReference']
copynode -5.8923423870583065:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'copy-BinaryOperation', 'root -> End']
copynode -4.898915696889162:  root modified ^ ReturnStatement expression MethodInvocation qualifier unknown ^ ^ selectors ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier selectors arguments member', 'start -> unknown']
copynode -4.820494113781024:  root add ^ IfStatement condition MemberReference member par0 ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference', 'MemberReference -> member', 'member -> par0']
copynode -7.233931942959316:  root modified ^ ReturnStatement expression Assignment expressionl MemberReference ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference']
before@6 batch0 x: -7.348149425466545: root modified ^ ReturnStatement expression Assignment expressionl MemberReference ^ ^ value ^ type ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference']
after@6 batch0 x: -7.348149425466545: root modified ^ ReturnStatement expression Assignment expressionl MemberReference ^ ^ value ^ type ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference']
copynode -2.22898805513978:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments MemberReference ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> MemberReference']
copynode -3.0028981678187847:  root modified ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation']
copynode -3.0028981678187847:  root modified ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> MethodInvocation']
copynode -2.22898805513978:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments MethodInvocation ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> MethodInvocation']
copynode -3.702072983898688:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference']
copynode -3.2836865298449993:  root modified ^ ReturnStatement expression BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> MethodInvocation']
copynode -2.22898805513978:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'copy-arguments']
copynode -3.2836865298449993:  root modified ^ ReturnStatement expression BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> BinaryOperation']
copynode -4.625155395187903:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference']
copynode -2.22898805513978:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments Literal ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> Literal']
copynode -5.012721698731184:  root modified ^ ReturnStatement expression MemberReference member par0 ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MemberReference', 'MemberReference -> member', 'member -> par0', 'root -> End']
copynode -5.0087463073432446:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ selectors MethodInvocation ^ ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier selectors arguments member', 'qualifier -> par0', 'selectors -> MethodInvocation']
copynode -5.052375791885424:  root add ^ IfStatement condition MethodInvocation qualifier par1 ^ ^ member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> par1', 'start -> unknown']
copynode -4.4294698387384415:  root add ^ StatementExpression expression MethodInvocation qualifier par0 ^ ^ arguments MemberReference ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> MemberReference']
copynode -5.30572359636426:  root modified ^ ReturnStatement expression MethodInvocation arguments MemberReference member ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> member']
copynode -5.313266313285567:  root add ^ StatementExpression expression Assignment expressionl MemberReference member ^ ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member']
copynode -4.527846533805132:  root modified ^ ReturnStatement expression MethodInvocation qualifier unknown ^ ^ arguments MemberReference ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown', 'arguments -> MemberReference']
copynode -4.80486012622714:  root modified ^ ReturnStatement expression BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MethodInvocation']
copynode -5.448689449578524:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ selectors MethodInvocation ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier selectors member', 'qualifier -> par0', 'selectors -> MethodInvocation']
copynode -5.3702582605183125:  root modified ^ ReturnStatement expression MethodInvocation arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> arguments member', 'copy-arguments', 'member -> meth0']
copynode -2.22898805513978:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments BinaryOperation ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> BinaryOperation']
copynode -5.160477465309668:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation']
copynode -4.527846533805132:  root modified ^ ReturnStatement expression MethodInvocation qualifier unknown ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown', 'copy-arguments']
copynode -5.318387029983569:  root add ^ IfStatement condition MemberReference member unknown ^ ^ ^ ^ ^ ReturnStatement ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'root -> ReturnStatement']
copynode -5.2603386103292:  root add ^ IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> BinaryOperation']
copynode -5.7057493813335896:  root modified ^ ReturnStatement expression This selectors MemberReference member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> This', 'This -> selectors', 'selectors -> MemberReference', 'MemberReference -> member']
copynode -5.327455605671275:  root add ^ IfStatement condition MemberReference prefix_operators !_ter ^ ^ member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference', 'MemberReference -> prefix_operators member', 'prefix_operators -> !_ter', 'start -> unknown']
copynode -5.78065849468112:  root modified ^ ReturnStatement expression MemberReference member par1 ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MemberReference', 'MemberReference -> member', 'member -> par1', 'root -> End']
copynode -5.8132045064121485:  root modified ^ ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> Literal', 'Literal -> value', 'value -> false_ter', 'root -> End']
copynode -3.702072983898688:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MethodInvocation']
copynode -2.22898805513978:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments This_ter ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> This_ter']
copynode -5.152646480419207:  root add ^ IfStatement condition MethodInvocation qualifier unknown ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown', 'copy-arguments']
copynode -4.4294698387384415:  root add ^ StatementExpression expression MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'copy-arguments']
copynode -5.92191457352601:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
copynode -4.80486012622714:  root modified ^ ReturnStatement expression BinaryOperation operator ==_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference']
copynode -3.2836865298449993:  root modified ^ ReturnStatement expression BinaryOperation operator ||_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> MemberReference']
copynode -3.0028981678187847:  root modified ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> MemberReference']
copynode -5.7121892821160145:  root add ^ IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier par1 ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> prefix_operators qualifier member', 'prefix_operators -> !_ter', 'qualifier -> par1']
copynode -5.1633174594608136:  root add ^ IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier unknown ^ ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> prefix_operators qualifier arguments member', 'prefix_operators -> !_ter', 'start -> unknown']
copynode -5.796374148048926:  root add ^ IfStatement condition BinaryOperation operator <_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference']
copynode -5.379244815558195:  root modified ^ ReturnStatement expression BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MethodInvocation']
copynode -4.527846533805132:  root modified ^ ReturnStatement expression MethodInvocation qualifier unknown ^ ^ arguments MethodInvocation ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown', 'arguments -> MethodInvocation']
copynode -5.152646480419207:  root add ^ IfStatement condition MethodInvocation qualifier unknown ^ ^ arguments MemberReference ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown', 'arguments -> MemberReference']
copynode -5.379244815558195:  root modified ^ ReturnStatement expression BinaryOperation operator !=_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference']
copynode -6.216462183743715:  root modified ^ ReturnStatement expression MethodInvocation qualifier par1 ^ ^ selectors MethodInvocation ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier selectors member', 'qualifier -> par1', 'selectors -> MethodInvocation']
copynode -3.0028981678187847:  root modified ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'copy-operandl']
copynode -5.27884250722127:  root add ^ IfStatement condition MethodInvocation qualifier par1 ^ ^ arguments MemberReference ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par1', 'arguments -> MemberReference']
copynode -5.27884250722127:  root add ^ IfStatement condition MethodInvocation qualifier par1 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par1', 'copy-arguments']
copynode -4.4294698387384415:  root add ^ StatementExpression expression MethodInvocation qualifier par0 ^ ^ arguments Literal ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> Literal']
copynode -3.2836865298449993:  root modified ^ ReturnStatement expression BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'copy-operandl']
copynode -6.25540217012167:  root modified ^ ReturnStatement expression MethodInvocation selectors MethodInvocation arguments ^ member ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> selectors member', 'selectors -> MethodInvocation', 'MethodInvocation -> arguments member']
copynode -6.20022672257619:  root add ^ IfStatement condition MemberReference member par1 ^ ^ ^ ^ ^ ReturnStatement ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference', 'MemberReference -> member', 'member -> par1', 'root -> ReturnStatement']
copynode -6.11005670420127:  root add ^ IfStatement condition BinaryOperation operator >_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >_ter', 'operandl -> MemberReference']
copynode -2.22898805513978:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments Cast ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> Cast']
copynode -6.505968967452645:  root modified ^ ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> Literal', 'Literal -> value', 'value -> true_ter', 'root -> End']
copynode -5.525334893085528:  root add ^ IfStatement condition MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'copy-arguments']
copynode -5.1633174594608136:  root add ^ IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier par1 ^ ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> prefix_operators qualifier arguments member', 'prefix_operators -> !_ter', 'qualifier -> par1']
copynode -5.525334893085528:  root add ^ IfStatement condition MethodInvocation qualifier par0 ^ ^ arguments MemberReference ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> MemberReference']
copynode -5.1633174594608136:  root add ^ IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier par0 ^ ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> prefix_operators qualifier arguments member', 'prefix_operators -> !_ter', 'qualifier -> par0']
copynode -4.4294698387384415:  root add ^ StatementExpression expression MethodInvocation qualifier par0 ^ ^ arguments MethodInvocation ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> MethodInvocation']
copynode -2.22898805513978:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments This ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> This']
copynode -6.375513015605975:  root add ^ IfStatement condition MethodInvocation qualifier par0 ^ ^ member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> par0', 'start -> unknown']
copynode -6.473409651138354:  root add ^ IfStatement condition MethodInvocation qualifier par1 ^ ^ selectors MethodInvocation ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier selectors member', 'qualifier -> par1', 'selectors -> MethodInvocation']
copynode -6.612045601010323:  root add ^ StatementExpression expression MethodInvocation arguments MemberReference member par1 ^ ^ ^ ^ member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> arguments member', 'copy-arguments', 'start -> unknown']
copynode -6.525420604564715:  root add ^ IfStatement condition MethodInvocation member unknown ^ ^ ^ ^ ^ ReturnStatement ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown', 'root -> ReturnStatement']
copynode -6.665928719856311:  root add ^ IfStatement condition MethodInvocation arguments MemberReference member par1 ^ ^ ^ ^ member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> arguments member', 'copy-arguments', 'start -> unknown']
copynode -6.437235890247393:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'copy-BinaryOperation', 'root -> ReturnStatement', 'copy-ReturnStatement']
copynode -6.7118353804107755:  root modified ^ ReturnStatement expression TernaryExpression condition MemberReference member ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> MemberReference', 'MemberReference -> member']
copynode -6.768092282116413:  root add ^ StatementExpression expression MethodInvocation member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown', 'root -> End']
copynode -6.811802878975868:  root add ^ StatementExpression expression MethodInvocation qualifier par1 ^ ^ member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> par1', 'start -> unknown']
copynode -6.831072822213173:  root add ^ StatementExpression expression MethodInvocation qualifier par0 ^ ^ member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> par0', 'start -> unknown']
before@7 batch0 x: -6.927511605492327: root modified ^ MemberReference-MemberReference member par1 ^ ^ ^  member loc1 ^ ^ ^ ^  ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> loc1', 'root -> End']
after@7 batch0 x: -6.927511605492327: root modified ^ MemberReference-MemberReference member par1 ^ ^ ^  member loc1 ^ ^ ^ ^  ; ['root -> modified', 'copy-MemberReference', 'MemberReference -> member', 'member -> loc1', 'root -> End']
copynode -2.9515581764280796:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments MemberReference member ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> MemberReference', 'MemberReference -> member']
copynode -3.9659544288297184:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -3.7735265605151653:  root modified ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
copynode -3.8297379724681377:  root modified ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> MethodInvocation', 'copy-MethodInvocation']
copynode -4.0696991719305515:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'copy-arguments', 'member -> meth0']
copynode -3.9801570884883404:  root modified ^ ReturnStatement expression BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> MethodInvocation', 'copy-MethodInvocation']
copynode -4.2713215462863445:  root modified ^ ReturnStatement expression BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
copynode -4.8074844985385425:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -3.921727303415537:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments MethodInvocation qualifier ^ member ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> MethodInvocation', 'MethodInvocation -> qualifier member']
copynode -4.960524681955576:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments Literal value ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> Literal', 'Literal -> value']
copynode -3.921727303415537:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments MethodInvocation qualifier ^ arguments ^ member ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> MethodInvocation', 'MethodInvocation -> qualifier arguments member']
copynode -5.2705332189798355:  root add ^ StatementExpression expression MethodInvocation qualifier par0 ^ ^ arguments MemberReference member ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> MemberReference', 'MemberReference -> member']
copynode -5.059868220239878:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ selectors MethodInvocation arguments ^ member ^ ^ ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier selectors arguments member', 'qualifier -> par0', 'selectors -> MethodInvocation', 'MethodInvocation -> arguments member']
copynode -5.243626265146304:  root add ^ IfStatement condition MethodInvocation qualifier par1 ^ ^ member unknown ^ ^ ^ ^ ^ ReturnStatement ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> par1', 'start -> unknown', 'root -> ReturnStatement']
copynode -5.4253330416977406:  root modified ^ ReturnStatement expression MethodInvocation qualifier unknown ^ ^ arguments MemberReference member ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown', 'arguments -> MemberReference', 'MemberReference -> member']
copynode -5.311751544941217:  root modified ^ ReturnStatement expression MethodInvocation arguments MemberReference member par0 ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par0']
copynode -5.543532852083445:  root modified ^ ReturnStatement expression MethodInvocation arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> arguments member', 'copy-arguments', 'member -> meth0', 'root -> End']
copynode -5.472995383664966:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ selectors MethodInvocation arguments ^ member ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier selectors member', 'qualifier -> par0', 'selectors -> MethodInvocation', 'MethodInvocation -> arguments member']
copynode -5.608389336615801:  root modified ^ ReturnStatement expression MethodInvocation qualifier unknown ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown', 'copy-arguments', 'member -> meth0']
copynode -5.563441282429267:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
copynode -5.660123890556861:  root add ^ IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
copynode -3.8297379724681377:  root modified ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier ^ arguments ^ member ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> MethodInvocation', 'MethodInvocation -> qualifier arguments member']
copynode -3.921727303415537:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments MethodInvocation member ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> MethodInvocation', 'MethodInvocation -> member']
copynode -5.560399178415537:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
copynode -3.9801570884883404:  root modified ^ ReturnStatement expression BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier ^ arguments ^ member ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> MethodInvocation', 'MethodInvocation -> qualifier arguments member']
copynode -5.343545403913595:  root add ^ StatementExpression expression Assignment expressionl MemberReference member par1 ^ ^ ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> par1']
copynode -6.05788017436862:  root modified ^ ReturnStatement expression BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -5.907662406563759:  root add ^ StatementExpression expression MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'copy-arguments', 'start -> unknown']
copynode -5.625632642128039:  root add ^ IfStatement condition MemberReference member unknown ^ ^ ^ ^ ^ ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'root -> ReturnStatement', 'copy-ReturnStatement']
copynode -6.139608746685553:  root add ^ IfStatement condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -5.451141010969877:  root modified ^ ReturnStatement expression BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier ^ arguments ^ member ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MethodInvocation', 'MethodInvocation -> qualifier arguments member']
copynode -5.721388484642375:  root add ^ IfStatement condition MemberReference prefix_operators !_ter ^ ^ member unknown ^ ^ ^ ^ ^ ReturnStatement ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference', 'MemberReference -> prefix_operators member', 'prefix_operators -> !_ter', 'start -> unknown', 'root -> ReturnStatement']
copynode -6.22677106782794:  root modified ^ ReturnStatement expression BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -6.210642991878558:  root add ^ IfStatement condition MethodInvocation qualifier unknown ^ ^ arguments MemberReference member ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown', 'arguments -> MemberReference', 'MemberReference -> member']
copynode -3.7735265605151653:  root modified ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'copy-BinaryOperation']
copynode -5.848936682858039:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier ^ member ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MethodInvocation', 'MethodInvocation -> qualifier member']
copynode -6.109851252287626:  root modified ^ ReturnStatement expression BinaryOperation operator ||_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -6.124945546325762:  root add ^ IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier par1 ^ ^ member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> prefix_operators qualifier member', 'prefix_operators -> !_ter', 'qualifier -> par1', 'start -> unknown']
copynode -5.059868220239878:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ selectors MethodInvocation member ^ ^ ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier selectors arguments member', 'qualifier -> par0', 'selectors -> MethodInvocation', 'MethodInvocation -> member']
copynode -6.33997406065464:  root add ^ StatementExpression expression MethodInvocation qualifier par0 ^ ^ arguments Literal value ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> Literal', 'Literal -> value']
copynode -6.241952255368233:  root modified ^ ReturnStatement expression MethodInvocation qualifier par1 ^ ^ selectors MethodInvocation arguments ^ member ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier selectors member', 'qualifier -> par1', 'selectors -> MethodInvocation', 'MethodInvocation -> arguments member']
copynode -6.119393777102232:  root modified ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -3.921727303415537:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> MethodInvocation', 'copy-MethodInvocation']
copynode -3.7735265605151653:  root modified ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr MemberReference member par1 ^ ^ ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'copy-BinaryOperation']
copynode -6.437220966734458:  root add ^ IfStatement condition BinaryOperation operator >_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -5.708460534689948:  root modified ^ ReturnStatement expression This selectors MemberReference member par0 ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> This', 'This -> selectors', 'selectors -> MemberReference', 'MemberReference -> member', 'member -> par0']
copynode -6.257351111620665:  root modified ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'copy-operandl', 'operandr -> MethodInvocation']
copynode -6.276205836154986:  root add ^ IfStatement condition MethodInvocation qualifier par1 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par1', 'copy-arguments', 'start -> unknown']
copynode -6.271404085971881:  root add ^ IfStatement condition MethodInvocation qualifier par1 ^ ^ arguments MemberReference member ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par1', 'arguments -> MemberReference', 'MemberReference -> member']
copynode -5.451141010969877:  root modified ^ ReturnStatement expression BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MethodInvocation', 'copy-MethodInvocation']
copynode -6.34581221267581:  root modified ^ ReturnStatement expression BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'copy-operandl', 'operandr -> MethodInvocation']
copynode -5.708460534689948:  root modified ^ ReturnStatement expression This selectors MemberReference member par1 ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> This', 'This -> selectors', 'selectors -> MemberReference', 'MemberReference -> member', 'member -> par1']
copynode -5.890822533518076:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments This_ter ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> This_ter', 'arguments -> End']
copynode -6.542933825403452:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments This selectors ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> This', 'This -> selectors']
copynode -6.349998906254768:  root modified ^ ReturnStatement expression MethodInvocation selectors MethodInvocation arguments MemberReference member par1 ^ ^ ^ ^ member ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> selectors member', 'selectors -> MethodInvocation', 'MethodInvocation -> arguments member', 'copy-arguments']
copynode -6.637616872787476:  root add ^ StatementExpression expression MethodInvocation arguments MemberReference member par1 ^ ^ ^ ^ member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> arguments member', 'copy-arguments', 'start -> unknown', 'root -> End']
copynode -6.17627914622426:  root modified ^ ReturnStatement expression MethodInvocation qualifier unknown ^ ^ arguments MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown', 'arguments -> MethodInvocation', 'copy-MethodInvocation']
copynode -4.2713215462863445:  root modified ^ ReturnStatement expression BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> BinaryOperation', 'copy-BinaryOperation']
copynode -6.551325766660739:  root add ^ IfStatement condition MethodInvocation qualifier par0 ^ ^ member unknown ^ ^ ^ ^ ^ ReturnStatement ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> par0', 'start -> unknown', 'root -> ReturnStatement']
copynode -6.524094758846331:  root add ^ IfStatement condition MethodInvocation qualifier par0 ^ ^ arguments MemberReference member ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> MemberReference', 'MemberReference -> member']
copynode -5.988311368739232:  root modified ^ ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl ^ operandr ^ ^ ^ if_true ^ if_false ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> TernaryExpression', 'TernaryExpression -> condition if_true if_false', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter']
copynode -6.507139979221392:  root add ^ IfStatement condition MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'copy-arguments', 'start -> unknown']
copynode -6.471227053552866:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments Cast type ^ expression ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> Cast', 'Cast -> type expression']
copynode -3.921727303415537:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments MethodInvocation arguments ^ member ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> MethodInvocation', 'MethodInvocation -> arguments member']
copynode -3.7735265605151653:  root modified ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'copy-BinaryOperation']
copynode -5.343545403913595:  root add ^ StatementExpression expression Assignment expressionl MemberReference member par0 ^ ^ ^ ^ value ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> par0']
copynode -6.782250939228106:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'copy-BinaryOperation', 'root -> ReturnStatement', 'copy-ReturnStatement', 'root -> End']
copynode -6.159958552569151:  root modified ^ ReturnStatement expression BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier ^ arguments ^ member ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MethodInvocation', 'MethodInvocation -> qualifier arguments member']
copynode -4.2713215462863445:  root modified ^ ReturnStatement expression BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr MemberReference member par1 ^ ^ ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> BinaryOperation', 'copy-BinaryOperation']
before@8 batch0 x: -6.864527713507414: root modified ^ ReturnStatement expression BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr MemberReference member par1 ^ ^ ^ ^ ^ ^ operandr ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> BinaryOperation', 'copy-BinaryOperation']
after@8 batch0 x: -6.864527713507414: root modified ^ ReturnStatement expression BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr MemberReference member par1 ^ ^ ^ ^ ^ ^ operandr ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> BinaryOperation', 'copy-BinaryOperation']
copynode -2.967665845528245:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par1']
copynode -4.1369739063084126:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'copy-arguments', 'member -> meth0', 'root -> End']
copynode -3.9800372108002193:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1']
copynode -4.07391519472003:  root modified ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ operandr MethodInvocation ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> MethodInvocation', 'copy-MethodInvocation', 'operandr -> MethodInvocation']
copynode -4.209657948464155:  root modified ^ ReturnStatement expression BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ operandr MethodInvocation ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> MethodInvocation', 'copy-MethodInvocation', 'operandr -> MethodInvocation']
copynode -2.967665845528245:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par0 ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par0']
copynode -4.052577894181013:  root modified ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter']
copynode -4.052577894181013:  root modified ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter']
copynode -4.07391519472003:  root modified ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ operandr BinaryOperation ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> MethodInvocation', 'copy-MethodInvocation', 'operandr -> BinaryOperation']
copynode -4.818505889095832:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1']
copynode -4.895810727030039:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments MethodInvocation qualifier par1 ^ ^ member ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> par1']
copynode -4.209657948464155:  root modified ^ ReturnStatement expression BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ operandr BinaryOperation ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> MethodInvocation', 'copy-MethodInvocation', 'operandr -> BinaryOperation']
copynode -4.565259795635939:  root modified ^ ReturnStatement expression BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter']
copynode -5.677236225455999:  root modified ^ ReturnStatement expression MethodInvocation qualifier unknown ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown', 'copy-arguments', 'member -> meth0', 'root -> End']
copynode -4.565259795635939:  root modified ^ ReturnStatement expression BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter']
copynode -5.410781635262538:  root add ^ IfStatement condition MethodInvocation qualifier par1 ^ ^ member unknown ^ ^ ^ ^ ^ ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> par1', 'start -> unknown', 'root -> ReturnStatement', 'copy-ReturnStatement']
copynode -5.8376116789877415:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments MethodInvocation member unknown ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown']
copynode -3.9800372108002193:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0']
copynode -5.816808056086302:  root modified ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier par0 ^ ^ arguments ^ member ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0']
copynode -4.974587939679623:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments Literal value false_ter ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> Literal', 'Literal -> value', 'value -> false_ter']
copynode -5.507825628388673:  root modified ^ ReturnStatement expression MethodInvocation arguments MemberReference member par0 ^ ^ ^ MemberReference ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par0', 'arguments -> MemberReference']
copynode -2.967665845528245:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments MemberReference member unknown ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> MemberReference', 'MemberReference -> member', 'start -> unknown']
copynode -5.199674252420664:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments MethodInvocation qualifier unknown ^ ^ arguments ^ member ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown']
copynode -5.334060080349445:  root add ^ StatementExpression expression MethodInvocation qualifier par0 ^ ^ arguments MemberReference member unknown ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> MemberReference', 'MemberReference -> member', 'start -> unknown']
copynode -5.433326776139438:  root modified ^ ReturnStatement expression MethodInvocation qualifier unknown ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par1']
copynode -6.103826209902763:  root add ^ StatementExpression expression MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member unknown ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'copy-arguments', 'start -> unknown', 'root -> End']
copynode -6.001526545733213:  root modified ^ ReturnStatement expression BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier par0 ^ ^ arguments ^ member ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0']
copynode -6.139029024459887:  root add ^ IfStatement condition MemberReference member unknown ^ ^ ^ ^ ^ ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'root -> ReturnStatement', 'copy-ReturnStatement', 'root -> End']
copynode -4.974587939679623:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments Literal value true_ter ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> Literal', 'Literal -> value', 'value -> true_ter']
copynode -5.433326776139438:  root modified ^ ReturnStatement expression MethodInvocation qualifier unknown ^ ^ arguments MemberReference member par0 ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par0']
copynode -5.199674252420664:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments MethodInvocation qualifier par1 ^ ^ arguments ^ member ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par1']
copynode -5.592540165409446:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ selectors MethodInvocation arguments MemberReference member par1 ^ ^ ^ ^ member ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier selectors member', 'qualifier -> par0', 'selectors -> MethodInvocation', 'MethodInvocation -> arguments member', 'copy-arguments']
copynode -6.077744813635945:  root modified ^ ReturnStatement expression BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1']
copynode -6.048302200273611:  root add ^ StatementExpression expression Assignment expressionl MemberReference member par1 ^ ^ ^ ^ value MethodInvocation ^ ^ type ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> Assignment', 'Assignment -> expressionl value type', 'expressionl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'value -> MethodInvocation']
copynode -4.052577894181013:  root modified ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter']
copynode -6.1540516943787225:  root add ^ IfStatement condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> <_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1']
copynode -5.40342590585351:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ selectors MethodInvocation arguments MemberReference ^ ^ member ^ ^ ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier selectors arguments member', 'qualifier -> par0', 'selectors -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference']
copynode -6.221584629267454:  root modified ^ ReturnStatement expression BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier par0 ^ ^ arguments ^ member ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0']
copynode -5.727667322673369:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter']
copynode -6.423736933618784:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> MethodInvocation', 'copy-MethodInvocation', 'arguments -> End']
copynode -5.334060080349445:  root add ^ StatementExpression expression MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par1']
copynode -6.273730169981718:  root modified ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'copy-BinaryOperation', 'operandr -> MethodInvocation']
copynode -5.808919078030158:  root add ^ IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter']
copynode -6.245452865958214:  root modified ^ ReturnStatement expression BinaryOperation operator !=_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1']
copynode -4.974587939679623:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments Literal value null_ter ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> Literal', 'Literal -> value', 'value -> null_ter']
copynode -6.316531057294924:  root add ^ IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier par1 ^ ^ member unknown ^ ^ ^ ^ ^ ReturnStatement ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> prefix_operators qualifier member', 'prefix_operators -> !_ter', 'qualifier -> par1', 'start -> unknown', 'root -> ReturnStatement']
copynode -3.9800372108002193:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member unknown ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'start -> unknown']
copynode -6.4485002041910775:  root add ^ IfStatement condition BinaryOperation operator >_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> >_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1']
copynode -4.895810727030039:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments MethodInvocation qualifier par0 ^ ^ member ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> par0']
copynode -4.209657948464155:  root modified ^ ReturnStatement expression BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> MethodInvocation', 'copy-MethodInvocation', 'copy-operandr']
copynode -6.428488861769438:  root modified ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr MemberReference member par1 ^ ^ ^ ^ ^ ^ operandr MethodInvocation ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'copy-BinaryOperation', 'operandr -> MethodInvocation']
copynode -6.540183465927839:  root modified ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'copy-operandl', 'operandr -> MethodInvocation', 'copy-MethodInvocation']
copynode -6.271930894174147:  root add ^ IfStatement condition MethodInvocation qualifier unknown ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par1']
copynode -6.276010847010184:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier par1 ^ ^ member ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> par1']
copynode -6.6776045598089695:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments This_ter ^ ^ member meth0 ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> This_ter', 'arguments -> End', 'member -> meth0']
copynode -6.233420278236736:  root add ^ IfStatement condition MemberReference prefix_operators !_ter ^ ^ member unknown ^ ^ ^ ^ ^ ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference', 'MemberReference -> prefix_operators member', 'prefix_operators -> !_ter', 'start -> unknown', 'root -> ReturnStatement', 'copy-ReturnStatement']
copynode -6.54138803324895:  root add ^ IfStatement condition MethodInvocation qualifier par1 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member unknown ^ ^ ^ ^ ^ ReturnStatement ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par1', 'copy-arguments', 'start -> unknown', 'root -> ReturnStatement']
copynode -4.07391519472003:  root modified ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> MethodInvocation', 'copy-MethodInvocation', 'copy-operandr']
copynode -6.596575390547514:  root modified ^ ReturnStatement expression BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'copy-operandl', 'operandr -> MethodInvocation', 'copy-MethodInvocation']
copynode -5.40342590585351:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ selectors MethodInvocation arguments MemberReference member par1 ^ ^ ^ ^ member ^ ^ ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier selectors arguments member', 'qualifier -> par0', 'selectors -> MethodInvocation', 'MethodInvocation -> arguments member', 'copy-arguments']
copynode -6.282295521348715:  root modified ^ ReturnStatement expression BinaryOperation operator ||_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1']
copynode -4.818505889095832:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0']
copynode -6.703456297516823:  root modified ^ ReturnStatement expression MethodInvocation selectors MethodInvocation arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> selectors member', 'selectors -> MethodInvocation', 'MethodInvocation -> arguments member', 'copy-arguments', 'member -> meth0']
copynode -5.592540165409446:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ selectors MethodInvocation arguments MemberReference ^ ^ member ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier selectors member', 'qualifier -> par0', 'selectors -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference']
copynode -4.565259795635939:  root modified ^ ReturnStatement expression BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter']
copynode -6.719599921256304:  root modified ^ ReturnStatement expression MethodInvocation qualifier unknown ^ ^ arguments MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown', 'arguments -> MethodInvocation', 'copy-MethodInvocation', 'arguments -> End']
before@9 batch0 x: -6.897398162633181: root modified ^ ReturnStatement expression MethodInvocation qualifier unknown ^ ^ arguments MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ member ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown', 'arguments -> MethodInvocation', 'copy-MethodInvocation', 'arguments -> End']
after@9 batch0 x: -6.897398162633181: root modified ^ ReturnStatement expression MethodInvocation qualifier unknown ^ ^ arguments MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ member ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown', 'arguments -> MethodInvocation', 'copy-MethodInvocation', 'arguments -> End']
copynode -3.2057878766208887:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ MemberReference ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par1', 'arguments -> MemberReference']
copynode -3.2057878766208887:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par1', 'arguments -> End']
copynode -3.2057878766208887:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ Literal ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par1', 'arguments -> Literal']
copynode -4.998097699135542:  root modified ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference']
copynode -4.994710247963667:  root modified ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference']
copynode -5.13949079439044:  root modified ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ operandr BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> MethodInvocation', 'copy-MethodInvocation', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
copynode -4.259227572300006:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'copy-operandr']
copynode -5.2487971521914005:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments MethodInvocation qualifier par1 ^ ^ member unknown ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> par1', 'start -> unknown']
copynode -5.348859112709761:  root modified ^ ReturnStatement expression BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ operandr BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> MethodInvocation', 'copy-MethodInvocation', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr']
copynode -4.259227572300006:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'copy-operandr']
copynode -4.729113232344389:  root modified ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ operandr MethodInvocation qualifier ^ arguments ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> MethodInvocation', 'copy-MethodInvocation', 'operandr -> MethodInvocation', 'MethodInvocation -> qualifier arguments member']
copynode -4.917766744270921:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par0 ^ ^ ^ MemberReference ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par0', 'arguments -> MemberReference']
copynode -5.409760694950819:  root modified ^ ReturnStatement expression BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference']
copynode -4.862157147377729:  root modified ^ ReturnStatement expression BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ operandr MethodInvocation qualifier ^ arguments ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> MethodInvocation', 'copy-MethodInvocation', 'operandr -> MethodInvocation', 'MethodInvocation -> qualifier arguments member']
copynode -4.259227572300006:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'operandr -> MemberReference']
copynode -3.2057878766208887:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ MethodInvocation ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par1', 'arguments -> MethodInvocation']
copynode -5.141076689877082:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'copy-operandr']
copynode -5.855394913174678:  root add ^ IfStatement condition MethodInvocation qualifier par1 ^ ^ member unknown ^ ^ ^ ^ ^ ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> par1', 'start -> unknown', 'root -> ReturnStatement', 'copy-ReturnStatement', 'root -> End']
copynode -5.729415159672499:  root modified ^ ReturnStatement expression BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference']
copynode -5.908779818564653:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments MethodInvocation member unknown ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown', 'arguments -> End']
copynode -6.014206901658326:  root modified ^ ReturnStatement expression MethodInvocation arguments MemberReference member par0 ^ ^ ^ MemberReference member ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par0', 'arguments -> MemberReference', 'MemberReference -> member']
copynode -5.141076689877082:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'copy-operandr']
copynode -6.037764795124531:  root add ^ StatementExpression expression MethodInvocation qualifier par0 ^ ^ arguments MemberReference member unknown ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'arguments -> End']
copynode -6.285442313179374:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ selectors MethodInvocation arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier selectors member', 'qualifier -> par0', 'selectors -> MethodInvocation', 'MethodInvocation -> arguments member', 'copy-arguments', 'member -> meth0']
copynode -6.424544785171747:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ selectors MethodInvocation arguments MemberReference member ^ ^ ^ member ^ ^ ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier selectors arguments member', 'qualifier -> par0', 'selectors -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> member']
copynode -4.917766744270921:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par0 ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par0', 'arguments -> End']
copynode -6.010905526578426:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments Literal value false_ter ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> Literal', 'Literal -> value', 'value -> false_ter', 'arguments -> End']
copynode -6.025381261482835:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments MemberReference member unknown ^ ^ ^ MemberReference ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'arguments -> MemberReference']
copynode -4.729113232344389:  root modified ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ operandr MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> MethodInvocation', 'copy-MethodInvocation', 'operandr -> MethodInvocation', 'copy-MethodInvocation']
copynode -6.178979180753231:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments Literal value true_ter ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> Literal', 'Literal -> value', 'value -> true_ter', 'arguments -> End']
copynode -4.862157147377729:  root modified ^ ReturnStatement expression BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ operandr MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> MethodInvocation', 'copy-MethodInvocation', 'operandr -> MethodInvocation', 'copy-MethodInvocation']
copynode -6.517763759940863:  root modified ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'copy-BinaryOperation', 'operandr -> MethodInvocation', 'copy-MethodInvocation']
copynode -6.660834591835737:  root modified ^ ReturnStatement expression BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> MethodInvocation', 'copy-MethodInvocation', 'copy-operandr', 'root -> End']
copynode -6.521294420876075:  root add ^ IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference']
copynode -6.498916974582244:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference']
copynode -6.516066797077656:  root add ^ StatementExpression expression MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par1', 'arguments -> End']
copynode -6.709424328058958:  root modified ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'copy-operandl', 'operandr -> MethodInvocation', 'copy-MethodInvocation', 'root -> End']
copynode -6.499931279569864:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> MethodInvocation', 'copy-MethodInvocation', 'arguments -> End', 'member -> meth0']
copynode -6.731067568063736:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments This_ter ^ ^ member meth0 ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> This_ter', 'arguments -> End', 'member -> meth0', 'root -> End']
copynode -6.754147242754698:  root modified ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> MethodInvocation', 'copy-MethodInvocation', 'copy-operandr', 'root -> End']
copynode -6.755254801362753:  root modified ^ ReturnStatement expression BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'copy-operandl', 'operandr -> MethodInvocation', 'copy-MethodInvocation', 'root -> End']
copynode -6.209953363053501:  root modified ^ ReturnStatement expression MethodInvocation qualifier unknown ^ ^ arguments MemberReference member par0 ^ ^ ^ MemberReference ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par0', 'arguments -> MemberReference']
copynode -6.744133795902599:  root add ^ IfStatement condition MemberReference prefix_operators !_ter ^ ^ member unknown ^ ^ ^ ^ ^ ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MemberReference', 'MemberReference -> prefix_operators member', 'prefix_operators -> !_ter', 'start -> unknown', 'root -> ReturnStatement', 'copy-ReturnStatement', 'root -> End']
copynode -5.975145842880011:  root modified ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier par0 ^ ^ arguments MemberReference ^ ^ member ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> MemberReference']
copynode -6.648914936929941:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments MethodInvocation qualifier par0 ^ ^ member unknown ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> par0', 'start -> unknown']
copynode -6.696545612066984:  root modified ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr MemberReference member par1 ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'copy-BinaryOperation', 'operandr -> MethodInvocation', 'copy-MethodInvocation']
copynode -6.807942092418671:  root modified ^ ReturnStatement expression MethodInvocation selectors MethodInvocation arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> selectors member', 'selectors -> MethodInvocation', 'MethodInvocation -> arguments member', 'copy-arguments', 'member -> meth0', 'selectors -> End']
copynode -6.836029669269919:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ selectors MethodInvocation arguments MemberReference member ^ ^ ^ member ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier selectors member', 'qualifier -> par0', 'selectors -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> member']
copynode -6.037577155977488:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments MethodInvocation qualifier unknown ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown', 'copy-arguments']
copynode -6.717402329959441:  root add ^ IfStatement condition MethodInvocation qualifier unknown ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par1', 'arguments -> End']
copynode -6.763609144836664:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ selectors MethodInvocation arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier selectors arguments member', 'qualifier -> par0', 'selectors -> MethodInvocation', 'MethodInvocation -> arguments member', 'copy-arguments', 'member -> meth0']
copynode -6.773020084947348:  root modified ^ ReturnStatement expression BinaryOperation operator ||_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr MethodInvocation ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'operandr -> MethodInvocation']
copynode -6.111188943497837:  root modified ^ ReturnStatement expression MethodInvocation qualifier unknown ^ ^ arguments MemberReference member par1 ^ ^ ^ MemberReference ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par1', 'arguments -> MemberReference']
copynode -4.917766744270921:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par0 ^ ^ ^ Literal ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par0', 'arguments -> Literal']
copynode -6.037577155977488:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments MethodInvocation qualifier unknown ^ ^ arguments MemberReference ^ ^ member ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown', 'arguments -> MemberReference']
copynode -6.171986993402243:  root modified ^ ReturnStatement expression BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier par0 ^ ^ arguments MemberReference ^ ^ member ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> MemberReference']
copynode -5.956415055610705:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'copy-operandr']
copynode -6.585040534671862:  root add ^ IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier par1 ^ ^ member unknown ^ ^ ^ ^ ^ ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> prefix_operators qualifier member', 'prefix_operators -> !_ter', 'qualifier -> par1', 'start -> unknown', 'root -> ReturnStatement', 'copy-ReturnStatement']
copynode -6.397462289780378:  root modified ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation']
copynode -4.729113232344389:  root modified ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ operandr MethodInvocation prefix_operators ^ qualifier ^ arguments ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> MethodInvocation', 'copy-MethodInvocation', 'operandr -> MethodInvocation', 'MethodInvocation -> prefix_operators qualifier arguments member']
copynode -6.111188943497837:  root modified ^ ReturnStatement expression MethodInvocation qualifier unknown ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par1', 'arguments -> End']
copynode -4.917766744270921:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par0 ^ ^ ^ MethodInvocation ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par0', 'arguments -> MethodInvocation']
before@10 batch0 x: -7.1211821381002665: root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par0 ^ ^ ^ MethodInvocation ^ ^ member ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par0', 'arguments -> MethodInvocation']
after@10 batch0 x: -7.1211821381002665: root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par0 ^ ^ ^ MethodInvocation ^ ^ member ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par0', 'arguments -> MethodInvocation']
copynode -4.174680748954415:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ MemberReference member ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par1', 'arguments -> MemberReference', 'MemberReference -> member']
copynode -4.298011878505349:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par1', 'arguments -> End', 'member -> meth0']
copynode -4.881399372592568:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ Literal value ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par1', 'arguments -> Literal', 'Literal -> value']
copynode -5.1938679330050945:  root modified ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -5.2428962998092175:  root modified ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -5.269809065677691:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ReturnStatement ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'copy-operandr', 'root -> ReturnStatement']
copynode -5.409453991800547:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments MethodInvocation qualifier par1 ^ ^ member unknown ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> par1', 'start -> unknown', 'arguments -> End']
copynode -5.576702708378434:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par0 ^ ^ ^ MemberReference member ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par0', 'arguments -> MemberReference', 'MemberReference -> member']
copynode -5.534856139041949:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ReturnStatement ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'copy-operandr', 'root -> ReturnStatement']
copynode -5.638034071773291:  root modified ^ ReturnStatement expression BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -5.920914899557829:  root modified ^ ReturnStatement expression BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -5.983049716800451:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments MethodInvocation member unknown ^ ^ ^ ^ member meth0 ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown', 'arguments -> End', 'member -> meth0']
copynode -5.247812177985907:  root modified ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> MethodInvocation', 'copy-MethodInvocation', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter']
copynode -5.728005824901629:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr MemberReference member ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'operandr -> MemberReference', 'MemberReference -> member']
copynode -6.030806601513177:  root modified ^ ReturnStatement expression MethodInvocation arguments MemberReference member par0 ^ ^ ^ MemberReference member par1 ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par0', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par1']
copynode -5.45928255841136:  root modified ^ ReturnStatement expression BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> MethodInvocation', 'copy-MethodInvocation', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter']
copynode -5.839389389671851:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ReturnStatement ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'copy-operandr', 'root -> ReturnStatement']
copynode -6.379540516063571:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ selectors MethodInvocation arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier selectors member', 'qualifier -> par0', 'selectors -> MethodInvocation', 'MethodInvocation -> arguments member', 'copy-arguments', 'member -> meth0', 'selectors -> End']
copynode -5.247812177985907:  root modified ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> MethodInvocation', 'copy-MethodInvocation', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter']
copynode -6.458292657509446:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par0 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par0', 'arguments -> End', 'member -> meth0']
copynode -6.46763052791357:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments Literal value false_ter ^ ^ ^ ^ member meth0 ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> Literal', 'Literal -> value', 'value -> false_ter', 'arguments -> End', 'member -> meth0']
copynode -6.512527668848634:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments MemberReference member unknown ^ ^ ^ MemberReference member ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'arguments -> MemberReference', 'MemberReference -> member']
copynode -5.56766976043582:  root modified ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ operandr MethodInvocation qualifier par1 ^ ^ arguments ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> MethodInvocation', 'copy-MethodInvocation', 'operandr -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par1']
copynode -5.765180567279458:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ MethodInvocation qualifier ^ member ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par1', 'arguments -> MethodInvocation', 'MethodInvocation -> qualifier member']
copynode -6.582963120192289:  root modified ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ operandr MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> MethodInvocation', 'copy-MethodInvocation', 'operandr -> MethodInvocation', 'copy-MethodInvocation', 'root -> End']
copynode -6.047832018055487:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ReturnStatement ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'copy-operandr', 'root -> ReturnStatement']
copynode -5.56766976043582:  root modified ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ operandr MethodInvocation qualifier unknown ^ ^ arguments ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> MethodInvocation', 'copy-MethodInvocation', 'operandr -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown']
copynode -5.6717335395514965:  root modified ^ ReturnStatement expression BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ operandr MethodInvocation qualifier par1 ^ ^ arguments ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> MethodInvocation', 'copy-MethodInvocation', 'operandr -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par1']
copynode -6.63844994828105:  root modified ^ ReturnStatement expression BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ operandr MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> MethodInvocation', 'copy-MethodInvocation', 'operandr -> MethodInvocation', 'copy-MethodInvocation', 'root -> End']
copynode -6.585723511874676:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments Literal value true_ter ^ ^ ^ ^ member meth0 ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> Literal', 'Literal -> value', 'value -> true_ter', 'arguments -> End', 'member -> meth0']
copynode -6.657347675412893:  root modified ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'copy-BinaryOperation', 'operandr -> MethodInvocation', 'copy-MethodInvocation', 'root -> End']
copynode -6.670415720262099:  root add ^ IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -6.672759926237632:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -6.4551360830664635:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ selectors MethodInvocation arguments MemberReference member par1 ^ ^ ^ ^ member ^ ^ ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier selectors arguments member', 'qualifier -> par0', 'selectors -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par1']
copynode -6.719820860773325:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> MethodInvocation', 'copy-MethodInvocation', 'arguments -> End', 'member -> meth0', 'root -> End']
copynode -5.6717335395514965:  root modified ^ ReturnStatement expression BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ operandr MethodInvocation qualifier unknown ^ ^ arguments ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> MethodInvocation', 'copy-MethodInvocation', 'operandr -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown']
copynode -6.758923525922:  root modified ^ ReturnStatement expression MethodInvocation qualifier unknown ^ ^ arguments MemberReference member par0 ^ ^ ^ MemberReference member ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par0', 'arguments -> MemberReference', 'MemberReference -> member']
copynode -6.7961412109434605:  root modified ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr MemberReference member par1 ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'copy-BinaryOperation', 'operandr -> MethodInvocation', 'copy-MethodInvocation', 'root -> End']
copynode -6.778218533843756:  root modified ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier par0 ^ ^ arguments MemberReference member ^ ^ ^ member ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> MemberReference', 'MemberReference -> member']
copynode -6.795712772756815:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments MethodInvocation qualifier par0 ^ ^ member unknown ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> par0', 'start -> unknown', 'arguments -> End']
copynode -5.45928255841136:  root modified ^ ReturnStatement expression BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> MethodInvocation', 'copy-MethodInvocation', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter']
copynode -6.815007913857698:  root modified ^ ReturnStatement expression MethodInvocation selectors MethodInvocation arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ member unknown ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> selectors member', 'selectors -> MethodInvocation', 'MethodInvocation -> arguments member', 'copy-arguments', 'member -> meth0', 'selectors -> End', 'start -> unknown']
copynode -6.917954061180353:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ selectors MethodInvocation arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier selectors arguments member', 'qualifier -> par0', 'selectors -> MethodInvocation', 'MethodInvocation -> arguments member', 'copy-arguments', 'member -> meth0', 'selectors -> End']
copynode -6.962406808510423:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par0 ^ ^ ^ Literal value ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par0', 'arguments -> Literal', 'Literal -> value']
copynode -6.964862171560526:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments MethodInvocation qualifier unknown ^ ^ arguments MemberReference member ^ ^ ^ member ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown', 'arguments -> MemberReference', 'MemberReference -> member']
copynode -6.956979329697788:  root modified ^ ReturnStatement expression MethodInvocation qualifier unknown ^ ^ arguments MemberReference member par1 ^ ^ ^ MemberReference member ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par1', 'arguments -> MemberReference', 'MemberReference -> member']
copynode -5.728005824901629:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr MemberReference qualifier ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'operandr -> MemberReference', 'MemberReference -> qualifier member']
copynode -6.8565310928970575:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ selectors MethodInvocation arguments MemberReference member par1 ^ ^ ^ ^ member ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier selectors member', 'qualifier -> par0', 'selectors -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par1']
copynode -6.178229324519634:  root add ^ StatementExpression expression MethodInvocation qualifier par0 ^ ^ arguments MemberReference member unknown ^ ^ ^ ^ member meth0 ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'arguments -> End', 'member -> meth0']
copynode -7.033735717472155:  root add ^ IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier par1 ^ ^ member unknown ^ ^ ^ ^ ^ ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> MethodInvocation', 'MethodInvocation -> prefix_operators qualifier member', 'prefix_operators -> !_ter', 'qualifier -> par1', 'start -> unknown', 'root -> ReturnStatement', 'copy-ReturnStatement', 'root -> End']
copynode -6.985680636018515:  root modified ^ ReturnStatement expression BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier par0 ^ ^ arguments MemberReference member ^ ^ ^ member ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> MemberReference', 'MemberReference -> member']
copynode -7.051340948790312:  root modified ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier ^ arguments ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> MethodInvocation', 'copy-MethodInvocation', 'operandr -> MethodInvocation', 'MethodInvocation -> prefix_operators qualifier arguments member', 'prefix_operators -> !_ter']
copynode -5.839389389671851:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'copy-operandr', 'root -> End']
copynode -6.998145340301562:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ReturnStatement ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0', 'copy-operandr', 'root -> ReturnStatement']
copynode -6.938413392752409:  root modified ^ ReturnStatement expression BinaryOperation operator ||_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'operandr -> MethodInvocation', 'copy-MethodInvocation']
before@11 batch0 x: -7.120583008974791: root modified ^ ReturnStatement expression BinaryOperation operator ||_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'operandr -> MethodInvocation', 'copy-MethodInvocation']
after@11 batch0 x: -7.120583008974791: root modified ^ ReturnStatement expression BinaryOperation operator ||_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'operandr -> MethodInvocation', 'copy-MethodInvocation']
copynode -4.353307886049151:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par1', 'arguments -> End', 'member -> meth0', 'root -> End']
copynode -4.212509693577886:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ MemberReference member par1 ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par1', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par1']
copynode -5.214546598494053:  root modified ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1']
copynode -5.261562308296561:  root modified ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1']
copynode -5.4540180414915085:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments MethodInvocation qualifier par1 ^ ^ member unknown ^ ^ ^ ^ member meth0 ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> par1', 'start -> unknown', 'arguments -> End', 'member -> meth0']
copynode -5.60413339920342:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par0 ^ ^ ^ MemberReference member par1 ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par0', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par1']
copynode -5.654752317816019:  root modified ^ ReturnStatement expression BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1']
copynode -4.8909004628658295:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ Literal value false_ter ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par1', 'arguments -> Literal', 'Literal -> value', 'value -> false_ter']
copynode -5.380136331834365:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'copy-operandr', 'root -> ReturnStatement', 'copy-ReturnStatement']
copynode -4.212509693577886:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ MemberReference member par2 ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par1', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par2']
copynode -4.8909004628658295:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par1', 'arguments -> Literal', 'Literal -> value', 'value -> true_ter']
copynode -6.039095815271139:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments MethodInvocation member unknown ^ ^ ^ ^ member meth0 ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> MethodInvocation', 'MethodInvocation -> member', 'start -> unknown', 'arguments -> End', 'member -> meth0', 'root -> End']
copynode -5.940049530938268:  root modified ^ ReturnStatement expression BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1']
copynode -4.212509693577886:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ MemberReference member unknown ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par1', 'arguments -> MemberReference', 'MemberReference -> member', 'start -> unknown']
copynode -5.6455258264322765:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'copy-operandr', 'root -> ReturnStatement', 'copy-ReturnStatement']
copynode -6.185416609514505:  root modified ^ ReturnStatement expression MethodInvocation arguments MemberReference member par0 ^ ^ ^ MemberReference member par1 ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par0', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par1', 'arguments -> End']
copynode -6.039353158324957:  root modified ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> MethodInvocation', 'copy-MethodInvocation', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference']
copynode -6.515093261376023:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par0 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par0', 'arguments -> End', 'member -> meth0', 'root -> End']
copynode -6.522199545055628:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments Literal value false_ter ^ ^ ^ ^ member meth0 ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> Literal', 'Literal -> value', 'value -> false_ter', 'arguments -> End', 'member -> meth0', 'root -> End']
copynode -6.19400392100215:  root modified ^ ReturnStatement expression BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> MethodInvocation', 'copy-MethodInvocation', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference']
copynode -4.8909004628658295:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ Literal value null_ter ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par1', 'arguments -> Literal', 'Literal -> value', 'value -> null_ter']
copynode -6.523321161046624:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments MemberReference member unknown ^ ^ ^ MemberReference member par1 ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par1']
copynode -6.639563795179129:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments Literal value true_ter ^ ^ ^ ^ member meth0 ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> Literal', 'Literal -> value', 'value -> true_ter', 'arguments -> End', 'member -> meth0', 'root -> End']
copynode -6.406754281371832:  root modified ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> MethodInvocation', 'copy-MethodInvocation', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference']
copynode -6.062391160347033:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr MemberReference member unknown ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'operandr -> MemberReference', 'MemberReference -> member', 'start -> unknown']
copynode -6.3860794375650585:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ selectors MethodInvocation arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ member unknown ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier selectors member', 'qualifier -> par0', 'selectors -> MethodInvocation', 'MethodInvocation -> arguments member', 'copy-arguments', 'member -> meth0', 'selectors -> End', 'start -> unknown']
copynode -5.380136331834365:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'copy-operandr', 'root -> ReturnStatement', 'copy-ReturnStatement']
copynode -6.844783164560795:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments MethodInvocation qualifier par0 ^ ^ member unknown ^ ^ ^ ^ member meth0 ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> par0', 'start -> unknown', 'arguments -> End', 'member -> meth0']
copynode -6.917627025395632:  root modified ^ ReturnStatement expression MethodInvocation selectors MethodInvocation arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ member unknown ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> selectors member', 'selectors -> MethodInvocation', 'MethodInvocation -> arguments member', 'copy-arguments', 'member -> meth0', 'selectors -> End', 'start -> unknown', 'root -> End']
copynode -6.782534956000745:  root modified ^ ReturnStatement expression MethodInvocation qualifier unknown ^ ^ arguments MemberReference member par0 ^ ^ ^ MemberReference member par1 ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par0', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par1']
copynode -5.380136331834365:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ReturnStatement expression ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'copy-operandr', 'root -> ReturnStatement', 'ReturnStatement -> expression']
copynode -6.688000511669088:  root add ^ IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1']
copynode -6.6909364073653705:  root add ^ IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1']
copynode -6.5559354815632105:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ MethodInvocation qualifier par1 ^ ^ member ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par1', 'arguments -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> par1']
copynode -6.385464376129676:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'copy-operandr', 'root -> ReturnStatement', 'copy-ReturnStatement']
copynode -7.019266836345196:  root add ^ StatementExpression expression MethodInvocation qualifier par0 ^ ^ arguments MemberReference member unknown ^ ^ ^ ^ member meth0 ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> StatementExpression', 'StatementExpression -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'arguments -> End', 'member -> meth0', 'root -> End']
copynode -5.6455258264322765:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'copy-operandr', 'root -> ReturnStatement', 'copy-ReturnStatement']
copynode -6.885831754654646:  root modified ^ ReturnStatement expression BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> MethodInvocation', 'copy-MethodInvocation', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference']
copynode -7.120583008974791:  root modified ^ ReturnStatement expression BinaryOperation operator ||_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'operandr -> MethodInvocation', 'copy-MethodInvocation', 'root -> End']
copynode -7.002235232212115:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr MemberReference qualifier unknown ^ ^ member ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'operandr -> MemberReference', 'MemberReference -> qualifier member', 'start -> unknown']
copynode -6.985333846881986:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments MethodInvocation qualifier unknown ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par1']
copynode -5.261562308296561:  root modified ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0']
copynode -5.214546598494053:  root modified ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member par0 ^ ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par0']
copynode -5.6455258264322765:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ReturnStatement expression ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'copy-operandr', 'root -> ReturnStatement', 'ReturnStatement -> expression']
copynode -6.594897037663031:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'copy-operandr', 'root -> ReturnStatement', 'copy-ReturnStatement']
copynode -6.062391160347033:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr MemberReference member par1 ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'operandr -> MemberReference', 'MemberReference -> member', 'member -> par1']
copynode -6.709490202367306:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ selectors MethodInvocation arguments MemberReference member par1 ^ ^ ^ ^ member ^ ^ ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier selectors arguments member', 'qualifier -> par0', 'selectors -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par1', 'arguments -> End']
copynode -6.841564524918795:  root modified ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par1']
before@12 batch0 x: -7.319042582064867: root modified ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member ^ ^ ^ operandr ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par1']
after@12 batch0 x: -7.319042582064867: root modified ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member ^ ^ ^ operandr ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par1']
copynode -4.695619048550725:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ MemberReference member par1 ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par1', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par1', 'arguments -> End']
copynode -5.516321297734976:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments MethodInvocation qualifier par1 ^ ^ member unknown ^ ^ ^ ^ member meth0 ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> par1', 'start -> unknown', 'arguments -> End', 'member -> meth0', 'root -> End']
copynode -5.747118966653943:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par0 ^ ^ ^ MemberReference member par1 ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par0', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par1', 'arguments -> End']
copynode -5.956749102391768:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'copy-operandr', 'root -> ReturnStatement', 'copy-ReturnStatement', 'root -> End']
copynode -5.9324890077114105:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ Literal value false_ter ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par1', 'arguments -> Literal', 'Literal -> value', 'value -> false_ter', 'arguments -> End']
copynode -5.982657851651311:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ MemberReference member par2 ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par1', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par2', 'arguments -> End']
copynode -6.008777230978012:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par1', 'arguments -> Literal', 'Literal -> value', 'value -> true_ter', 'arguments -> End']
copynode -5.457886792719364:  root modified ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'copy-operandr']
copynode -6.222713066556025:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'copy-operandr', 'root -> ReturnStatement', 'copy-ReturnStatement', 'root -> End']
copynode -6.19720989651978:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ MemberReference member unknown ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par1', 'arguments -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'arguments -> End']
copynode -6.242162831593305:  root modified ^ ReturnStatement expression MethodInvocation arguments MemberReference member par0 ^ ^ ^ MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par0', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par1', 'arguments -> End', 'member -> meth0']
copynode -5.457886792719364:  root modified ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'copy-operandr']
copynode -6.416369583457708:  root modified ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> MethodInvocation', 'copy-MethodInvocation', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -5.506874268874526:  root modified ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'copy-operandr']
copynode -6.542439203709364:  root modified ^ ReturnStatement expression BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> MethodInvocation', 'copy-MethodInvocation', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -5.506874268874526:  root modified ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'copy-operandr']
copynode -6.582828134298325:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ Literal value null_ter ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par1', 'arguments -> Literal', 'Literal -> value', 'value -> null_ter', 'arguments -> End']
copynode -6.630264991894364:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments MemberReference member unknown ^ ^ ^ MemberReference member par1 ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par1', 'arguments -> End']
copynode -6.655397843569517:  root modified ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> MethodInvocation', 'copy-MethodInvocation', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -6.769454665016383:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ selectors MethodInvocation arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ member unknown ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier selectors member', 'qualifier -> par0', 'selectors -> MethodInvocation', 'MethodInvocation -> arguments member', 'copy-arguments', 'member -> meth0', 'selectors -> End', 'start -> unknown', 'root -> End']
copynode -5.887800667434931:  root modified ^ ReturnStatement expression BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'copy-operandr']
copynode -6.661693094589282:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr MemberReference member unknown ^ ^ ^ ^ ^ ^ ^ ReturnStatement ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'operandr -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'root -> ReturnStatement']
copynode -6.835113605775405:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'copy-operandr', 'root -> ReturnStatement', 'copy-ReturnStatement', 'root -> End']
copynode -6.9072915986180305:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments MethodInvocation qualifier par0 ^ ^ member unknown ^ ^ ^ ^ member meth0 ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> par0', 'start -> unknown', 'arguments -> End', 'member -> meth0', 'root -> End']
copynode -6.172641130164266:  root modified ^ ReturnStatement expression BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'copy-operandr']
copynode -5.887800667434931:  root modified ^ ReturnStatement expression BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'copy-operandr']
copynode -6.920008226297796:  root modified ^ ReturnStatement expression MethodInvocation qualifier unknown ^ ^ arguments MemberReference member par0 ^ ^ ^ MemberReference member par1 ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par0', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par1', 'arguments -> End']
copynode -7.048769599117804:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'copy-operandr', 'root -> ReturnStatement', 'copy-ReturnStatement', 'root -> End']
copynode -6.172641130164266:  root modified ^ ReturnStatement expression BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'copy-operandr']
copynode -7.0993209018488415:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'copy-operandr', 'root -> ReturnStatement', 'copy-ReturnStatement', 'root -> End']
copynode -7.12102423235774:  root modified ^ ReturnStatement expression BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> MethodInvocation', 'copy-MethodInvocation', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member']
copynode -5.506874268874526:  root modified ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'operandr -> MemberReference']
copynode -7.025933662429452:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ MethodInvocation qualifier par1 ^ ^ member unknown ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par1', 'arguments -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> par1', 'start -> unknown']
copynode -7.259941881813575:  root add ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'copy-operandr', 'root -> ReturnStatement', 'copy-ReturnStatement', 'root -> End']
copynode -7.1315007377415895:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments MethodInvocation qualifier unknown ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par1', 'arguments -> End']
copynode -7.272128461219836:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr MemberReference member par1 ^ ^ ^ ^ ^ ^ ^ ReturnStatement ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'operandr -> MemberReference', 'MemberReference -> member', 'member -> par1', 'root -> ReturnStatement']
copynode -7.3094212636351585:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ selectors MethodInvocation arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier selectors arguments member', 'qualifier -> par0', 'selectors -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par1', 'arguments -> End', 'member -> meth0']
copynode -7.319042582064867:  root modified ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par1', 'arguments -> End']
copynode -6.968929609574843:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ReturnStatement expression Literal ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'copy-operandr', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> Literal']
copynode -5.887800667434931:  root modified ^ ReturnStatement expression BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'operandr -> MemberReference']
before@13 batch0 x: -7.726514909416437: root modified ^ ReturnStatement expression BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ operandr ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'operandr -> MemberReference']
after@13 batch0 x: -7.726514909416437: root modified ^ ReturnStatement expression BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ operandr ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'operandr -> MemberReference']
copynode -4.745751807466149:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par1', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par1', 'arguments -> End', 'member -> meth0']
copynode -5.7976093124598265:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par0 ^ ^ ^ MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par0', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par1', 'arguments -> End', 'member -> meth0']
copynode -5.983926754444838:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ Literal value false_ter ^ ^ ^ ^ member meth0 ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par1', 'arguments -> Literal', 'Literal -> value', 'value -> false_ter', 'arguments -> End', 'member -> meth0']
copynode -6.034357869997621:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ MemberReference member par2 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par1', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par2', 'arguments -> End', 'member -> meth0']
copynode -6.059752739965916:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member meth0 ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par1', 'arguments -> Literal', 'Literal -> value', 'value -> true_ter', 'arguments -> End', 'member -> meth0']
copynode -6.235676454380155:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ MemberReference member unknown ^ ^ ^ ^ member meth0 ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par1', 'arguments -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'arguments -> End', 'member -> meth0']
copynode -6.331634827423841:  root modified ^ ReturnStatement expression MethodInvocation arguments MemberReference member par0 ^ ^ ^ MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par0', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par1', 'arguments -> End', 'member -> meth0', 'root -> End']
copynode -6.2338651195168495:  root modified ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'copy-operandr', 'operandr -> MethodInvocation']
copynode -6.381623603403568:  root modified ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'copy-operandr', 'operandr -> MethodInvocation']
copynode -6.633369766175747:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ Literal value null_ter ^ ^ ^ ^ member meth0 ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par1', 'arguments -> Literal', 'Literal -> value', 'value -> null_ter', 'arguments -> End', 'member -> meth0']
copynode -6.45141071639955:  root modified ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'copy-operandr', 'operandr -> MethodInvocation']
copynode -6.681964194402099:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments MemberReference member unknown ^ ^ ^ MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par1', 'arguments -> End', 'member -> meth0']
copynode -6.443723268806934:  root modified ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> MethodInvocation', 'copy-MethodInvocation', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1']
copynode -6.568917658179998:  root modified ^ ReturnStatement expression BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> MethodInvocation', 'copy-MethodInvocation', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1']
copynode -6.616301005706191:  root modified ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'copy-operandr', 'operandr -> MethodInvocation']
copynode -6.785331401973963:  root modified ^ ReturnStatement expression BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'copy-operandr', 'operandr -> MethodInvocation']
copynode -6.687388006597757:  root modified ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> MethodInvocation', 'copy-MethodInvocation', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1']
copynode -6.998689650557935:  root modified ^ ReturnStatement expression MethodInvocation qualifier unknown ^ ^ arguments MemberReference member par0 ^ ^ ^ MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par0', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par1', 'arguments -> End', 'member -> meth0']
copynode -6.940025182440877:  root modified ^ ReturnStatement expression BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'copy-operandr', 'operandr -> MethodInvocation']
copynode -6.9474312998354435:  root modified ^ ReturnStatement expression BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'copy-operandr', 'operandr -> MethodInvocation']
copynode -7.187063539400697:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ MethodInvocation qualifier par1 ^ ^ member unknown ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par1', 'arguments -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> par1', 'start -> unknown', 'arguments -> End']
copynode -7.184227770194411:  root modified ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr MemberReference member ^ ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'operandr -> MemberReference', 'MemberReference -> member']
copynode -6.814139573194552:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr MemberReference member unknown ^ ^ ^ ^ ^ ^ ^ ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'operandr -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'root -> ReturnStatement', 'copy-ReturnStatement']
copynode -7.087997289374471:  root modified ^ ReturnStatement expression BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'copy-operandr', 'operandr -> MethodInvocation']
copynode -7.421928912401199:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ selectors MethodInvocation arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ arguments ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier selectors arguments member', 'qualifier -> par0', 'selectors -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par1', 'arguments -> End', 'member -> meth0', 'selectors -> End']
copynode -7.152309857308865:  root modified ^ ReturnStatement expression BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> MethodInvocation', 'copy-MethodInvocation', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1']
copynode -7.583703538693953:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ReturnStatement expression Literal value ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'copy-operandr', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> Literal', 'Literal -> value']
copynode -7.726514909416437:  root modified ^ ReturnStatement expression BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr MemberReference member ^ ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'operandr -> MemberReference', 'MemberReference -> member']
copynode -6.2338651195168495:  root modified ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'copy-operandr', 'operandr -> BinaryOperation']
copynode -7.392355686344672:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr MemberReference member par1 ^ ^ ^ ^ ^ ^ ^ ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'operandr -> MemberReference', 'MemberReference -> member', 'member -> par1', 'root -> ReturnStatement', 'copy-ReturnStatement']
copynode -6.381623603403568:  root modified ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'copy-operandr', 'operandr -> BinaryOperation']
before@14 batch0 x: -8.044965244829655: root modified ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'copy-operandr', 'operandr -> BinaryOperation']
after@14 batch0 x: -8.044965244829655: root modified ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'copy-operandr', 'operandr -> BinaryOperation']
copynode -4.8251357693225145:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par1', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par1', 'arguments -> End', 'member -> meth0', 'root -> End']
copynode -5.872965877875686:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par0 ^ ^ ^ MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par0', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par1', 'arguments -> End', 'member -> meth0', 'root -> End']
copynode -6.079386468976736:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ Literal value false_ter ^ ^ ^ ^ member meth0 ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par1', 'arguments -> Literal', 'Literal -> value', 'value -> false_ter', 'arguments -> End', 'member -> meth0', 'root -> End']
copynode -6.112433196976781:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ MemberReference member par2 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par1', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par2', 'arguments -> End', 'member -> meth0', 'root -> End']
copynode -6.150520250201225:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member meth0 ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par1', 'arguments -> Literal', 'Literal -> value', 'value -> true_ter', 'arguments -> End', 'member -> meth0', 'root -> End']
copynode -6.322650091722608:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ MemberReference member unknown ^ ^ ^ ^ member meth0 ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par1', 'arguments -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'arguments -> End', 'member -> meth0', 'root -> End']
copynode -6.504643477499485:  root modified ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'copy-operandr', 'operandr -> MethodInvocation', 'copy-MethodInvocation']
copynode -6.732431642711163:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ Literal value null_ter ^ ^ ^ ^ member meth0 ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par1', 'arguments -> Literal', 'Literal -> value', 'value -> null_ter', 'arguments -> End', 'member -> meth0', 'root -> End']
copynode -6.655648626387119:  root modified ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'copy-operandr', 'operandr -> MethodInvocation', 'copy-MethodInvocation']
copynode -6.752362309023738:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments MemberReference member unknown ^ ^ ^ MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par1', 'arguments -> End', 'member -> meth0', 'root -> End']
copynode -6.740986591205001:  root modified ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'copy-operandr', 'operandr -> MethodInvocation', 'copy-MethodInvocation']
copynode -6.909240400418639:  root modified ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'copy-operandr', 'operandr -> MethodInvocation', 'copy-MethodInvocation']
copynode -7.085483661852777:  root modified ^ ReturnStatement expression MethodInvocation qualifier unknown ^ ^ arguments MemberReference member par0 ^ ^ ^ MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'start -> unknown', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par0', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par1', 'arguments -> End', 'member -> meth0', 'root -> End']
copynode -7.050832364708185:  root modified ^ ReturnStatement expression BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'copy-operandr', 'operandr -> MethodInvocation', 'copy-MethodInvocation']
copynode -7.191695781424642:  root modified ^ ReturnStatement expression BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'copy-operandr', 'operandr -> MethodInvocation', 'copy-MethodInvocation']
copynode -7.220464566722512:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ MethodInvocation qualifier par1 ^ ^ member unknown ^ ^ ^ ^ member meth0 ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par1', 'arguments -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> par1', 'start -> unknown', 'arguments -> End', 'member -> meth0']
copynode -7.216024879366159:  root modified ^ ReturnStatement expression BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'copy-operandr', 'operandr -> MethodInvocation', 'copy-MethodInvocation']
copynode -7.304026661731768:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr MemberReference member unknown ^ ^ ^ ^ ^ ^ ^ ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'operandr -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'root -> ReturnStatement', 'copy-ReturnStatement', 'root -> End']
copynode -7.342707993462682:  root modified ^ ReturnStatement expression BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'copy-operandr', 'operandr -> MethodInvocation', 'copy-MethodInvocation']
copynode -6.779701508581638:  root modified ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> MethodInvocation', 'copy-MethodInvocation', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'operandr -> MemberReference']
copynode -7.431878457777202:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ selectors MethodInvocation arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier selectors arguments member', 'qualifier -> par0', 'selectors -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par1', 'arguments -> End', 'member -> meth0', 'selectors -> End', 'copy-arguments']
copynode -6.894733186811209:  root modified ^ ReturnStatement expression BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr MemberReference ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> MethodInvocation', 'copy-MethodInvocation', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'operandr -> MemberReference']
copynode -7.943091577209998:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr MemberReference member par1 ^ ^ ^ ^ ^ ^ ^ ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'operandr -> MemberReference', 'MemberReference -> member', 'member -> par1', 'root -> ReturnStatement', 'copy-ReturnStatement', 'root -> End']
copynode -7.278708277270198:  root modified ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr MemberReference member unknown ^ ^ ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'operandr -> MemberReference', 'MemberReference -> member', 'start -> unknown']
copynode -7.0532048381865025:  root modified ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> MethodInvocation', 'copy-MethodInvocation', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'copy-operandr']
copynode -7.5910715235513635:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'copy-operandr', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> Literal', 'Literal -> value', 'value -> false_ter']
copynode -7.278708277270198:  root modified ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr MemberReference member par1 ^ ^ ^ ^ ^ ^ operandr ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'operandr -> MemberReference', 'MemberReference -> member', 'member -> par1']
copynode -6.894733186811209:  root modified ^ ReturnStatement expression BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> MethodInvocation', 'copy-MethodInvocation', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'copy-operandr']
copynode -7.0532048381865025:  root modified ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> MethodInvocation', 'copy-MethodInvocation', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'copy-operandr']
copynode -6.779701508581638:  root modified ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> MethodInvocation', 'copy-MethodInvocation', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'copy-operandr']
before@15 batch0 x: -8.298738397657871: root modified ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> MethodInvocation', 'copy-MethodInvocation', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'copy-operandr']
after@15 batch0 x: -8.298738397657871: root modified ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> MethodInvocation', 'copy-MethodInvocation', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'copy-operandr']
copynode -6.584648348391056:  root modified ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'copy-operandr', 'operandr -> MethodInvocation', 'copy-MethodInvocation', 'root -> End']
copynode -6.735747188329697:  root modified ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'copy-operandr', 'operandr -> MethodInvocation', 'copy-MethodInvocation', 'root -> End']
copynode -6.86206061206758:  root modified ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'copy-operandr', 'operandr -> MethodInvocation', 'copy-MethodInvocation', 'root -> End']
copynode -7.030836468562484:  root modified ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'copy-operandr', 'operandr -> MethodInvocation', 'copy-MethodInvocation', 'root -> End']
copynode -7.1587004996836185:  root modified ^ ReturnStatement expression BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'copy-operandr', 'operandr -> MethodInvocation', 'copy-MethodInvocation', 'root -> End']
copynode -7.266338171437383:  root modified ^ ReturnStatement expression BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'copy-operandr', 'operandr -> MethodInvocation', 'copy-MethodInvocation', 'root -> End']
copynode -7.303062016144395:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ MethodInvocation qualifier par1 ^ ^ member unknown ^ ^ ^ ^ member meth0 ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier arguments member', 'qualifier -> par0', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par1', 'arguments -> MethodInvocation', 'MethodInvocation -> qualifier member', 'qualifier -> par1', 'start -> unknown', 'arguments -> End', 'member -> meth0', 'root -> End']
copynode -7.324426036328077:  root modified ^ ReturnStatement expression BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'copy-operandr', 'operandr -> MethodInvocation', 'copy-MethodInvocation', 'root -> End']
copynode -7.4174632374197245:  root modified ^ ReturnStatement expression BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'copy-operandr', 'operandr -> MethodInvocation', 'copy-MethodInvocation', 'root -> End']
copynode -7.6767533197999:  root modified ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr MemberReference member ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> MethodInvocation', 'copy-MethodInvocation', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'operandr -> MemberReference', 'MemberReference -> member']
copynode -7.791172723285854:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ selectors MethodInvocation arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier selectors arguments member', 'qualifier -> par0', 'selectors -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par1', 'arguments -> End', 'member -> meth0', 'selectors -> End', 'copy-arguments', 'member -> meth0']
copynode -7.864723559468985:  root modified ^ ReturnStatement expression BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr MemberReference member ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> MethodInvocation', 'copy-MethodInvocation', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'operandr -> MemberReference', 'MemberReference -> member']
copynode -8.052884642034769:  root modified ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> MethodInvocation', 'copy-MethodInvocation', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'copy-operandr', 'root -> End']
copynode -8.055080748919863:  root add ^ IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ ^ ; ['root -> add', 'root -> IfStatement', 'IfStatement -> condition', 'condition -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'copy-operandr', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> Literal', 'Literal -> value', 'value -> false_ter', 'root -> End']
copynode -7.9830020647495985:  root modified ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr MemberReference member unknown ^ ^ ^ ^ ^ ^ operandr MethodInvocation ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'operandr -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'operandr -> MethodInvocation']
copynode -8.276892300695181:  root modified ^ ReturnStatement expression BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> MethodInvocation', 'copy-MethodInvocation', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'copy-operandr', 'root -> End']
copynode -8.291879240423441:  root modified ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> MethodInvocation', 'copy-MethodInvocation', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> !=_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'copy-operandr', 'root -> End']
copynode -8.298738397657871:  root modified ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> MethodInvocation', 'copy-MethodInvocation', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'copy-operandr', 'root -> End']
copynode -8.255836782976985:  root modified ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr MemberReference member par1 ^ ^ ^ ^ ^ ^ operandr MethodInvocation ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'operandr -> MemberReference', 'MemberReference -> member', 'member -> par1', 'operandr -> MethodInvocation']
before@16 batch0 x: -8.48202726058662: root modified ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr MemberReference member par1 ^ ^ ^ ^ ^ ^ operandr MethodInvocation ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'operandr -> MemberReference', 'MemberReference -> member', 'member -> par1', 'operandr -> MethodInvocation']
after@16 batch0 x: -8.48202726058662: root modified ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr MemberReference member par1 ^ ^ ^ ^ ^ ^ operandr MethodInvocation ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'operandr -> MemberReference', 'MemberReference -> member', 'member -> par1', 'operandr -> MethodInvocation']
copynode -8.00217708479613:  root modified ^ ReturnStatement expression MethodInvocation qualifier par0 ^ ^ selectors MethodInvocation arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> MethodInvocation', 'MethodInvocation -> qualifier selectors arguments member', 'qualifier -> par0', 'selectors -> MethodInvocation', 'MethodInvocation -> arguments member', 'arguments -> MemberReference', 'MemberReference -> member', 'member -> par1', 'arguments -> End', 'member -> meth0', 'selectors -> End', 'copy-arguments', 'member -> meth0', 'root -> End']
copynode -8.206734595820308:  root modified ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr MemberReference member unknown ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'operandr -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'operandr -> MethodInvocation', 'copy-MethodInvocation']
copynode -7.822164408862591:  root modified ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr MemberReference member unknown ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> MethodInvocation', 'copy-MethodInvocation', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'operandr -> MemberReference', 'MemberReference -> member', 'start -> unknown']
copynode -8.48202726058662:  root modified ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr MemberReference member par1 ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'operandr -> MemberReference', 'MemberReference -> member', 'member -> par1', 'operandr -> MethodInvocation', 'copy-MethodInvocation']
copynode -8.022376414388418:  root modified ^ ReturnStatement expression BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr MemberReference member unknown ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> MethodInvocation', 'copy-MethodInvocation', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'operandr -> MemberReference', 'MemberReference -> member', 'start -> unknown']
before@17 batch0 x: -8.725382443517447: root modified ^ ReturnStatement expression BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr MemberReference member unknown ^ ^ ^ ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> MethodInvocation', 'copy-MethodInvocation', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'operandr -> MemberReference', 'MemberReference -> member', 'start -> unknown']
after@17 batch0 x: -8.725382443517447: root modified ^ ReturnStatement expression BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr MemberReference member unknown ^ ^ ^ ^ ^ ^ ^ ^ ^ ^  ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> MethodInvocation', 'copy-MethodInvocation', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'operandr -> MemberReference', 'MemberReference -> member', 'start -> unknown']
copynode -8.351676492020488:  root modified ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr MemberReference member unknown ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'operandr -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'operandr -> MethodInvocation', 'copy-MethodInvocation', 'root -> End']
copynode -8.544563882052898:  root modified ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr MemberReference member unknown ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> MethodInvocation', 'copy-MethodInvocation', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'operandr -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'root -> End']
copynode -8.642573146149516:  root modified ^ ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr MemberReference member par1 ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> &&_ter', 'operandl -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'operandr -> MemberReference', 'MemberReference -> member', 'member -> par1', 'operandr -> MethodInvocation', 'copy-MethodInvocation', 'root -> End']
copynode -8.725382443517447:  root modified ^ ReturnStatement expression BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier par0 ^ ^ arguments MemberReference member par1 ^ ^ ^ ^ member meth0 ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr MemberReference member unknown ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> modified', 'root -> ReturnStatement', 'ReturnStatement -> expression', 'expression -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ||_ter', 'operandl -> MethodInvocation', 'copy-MethodInvocation', 'operandr -> BinaryOperation', 'BinaryOperation -> operator operandl operandr', 'operator -> ==_ter', 'operandl -> MemberReference', 'MemberReference -> member', 'member -> par1', 'operandr -> MemberReference', 'MemberReference -> member', 'start -> unknown', 'root -> End']
method
cs1_ter {'cs1_ter': 'CharSequence', 'cs2_ter': 'CharSequence'}
7 CharSequence
method
7 
6 cs2_ter
6 cs2_ter
6 cs2_ter
6 cs2_ter
6 cs2_ter
method
cs2_ter {'cs1_ter': 'CharSequence', 'cs2_ter': 'CharSequence'}
7 CharSequence
method
7 
method
cs2_ter {'cs1_ter': 'CharSequence', 'cs2_ter': 'CharSequence'}
7 CharSequence
method
7 
method
cs1_ter {'cs1_ter': 'CharSequence', 'cs2_ter': 'CharSequence'}
7 CharSequence
6 cs2_ter
CharSequence equals
method
7 
boolean  isEmpty 
boolean  isNotEmpty 
boolean  isBlank 
boolean  isNotBlank 
String  trim 
String  trimToNull 
String  trimToEmpty 
String  strip 
String  stripToNull 
String  stripToEmpty 
String  strip 
String  stripStart 
String  stripEnd 
String  stripAll 
String  stripAll 
String  stripAccents 
String  removeAccentsJava6 
String  removeAccentsSUN 
boolean  equals 
boolean  equalsIgnoreCase 
int  indexOf 
int  indexOf 
int  indexOf 
int  indexOf 
int  ordinalIndexOf 
int  ordinalIndexOf 
int  indexOfIgnoreCase 
int  indexOfIgnoreCase 
int  lastIndexOf 
int  lastIndexOf 
int  lastIndexOf 
int  lastOrdinalIndexOf 
int  lastIndexOf 
int  lastIndexOfIgnoreCase 
int  lastIndexOfIgnoreCase 
boolean  contains 
boolean  contains 
boolean  containsIgnoreCase 
boolean  containsWhitespace 
int  indexOfAny 
int  indexOfAny 
boolean  containsAny 
boolean  containsAny 
int  indexOfAnyBut 
int  indexOfAnyBut 
boolean  containsOnly 
boolean  containsOnly 
boolean  containsNone 
boolean  containsNone 
int  indexOfAny 
int  lastIndexOfAny 
String  substring 
String  substring 
String  left 
String  right 
String  mid 
String  substringBefore 
String  substringAfter 
String  substringBeforeLast 
String  substringAfterLast 
String  substringBetween 
String  substringBetween 
String  substringsBetween 
String  split 
String  split 
String  split 
String  split 
String  splitByWholeSeparator 
String  splitByWholeSeparator 
String  splitByWholeSeparatorPreserveAllTokens 
String  splitByWholeSeparatorPreserveAllTokens 
String  splitByWholeSeparatorWorker 
String  splitPreserveAllTokens 
String  splitPreserveAllTokens 
String  splitWorker 
String  splitPreserveAllTokens 
String  splitPreserveAllTokens 
String  splitWorker 
String  splitByCharacterType 
String  splitByCharacterTypeCamelCase 
String  splitByCharacterType 
String  join 
String  join 
String  join 
String  join 
String  join 
String  join 
String  join 
String  join 
String  join 
String  deleteWhitespace 
String  removeStart 
String  removeStartIgnoreCase 
String  removeEnd 
String  removeEndIgnoreCase 
String  remove 
String  remove 
String  replaceOnce 
String  replace 
String  replace 
String  replaceEach 
String  replaceEachRepeatedly 
String  replaceEach 
String  replaceChars 
String  replaceChars 
String  overlay 
String  chomp 
String  chomp 
String  chop 
String  repeat 
String  repeat 
String  repeat 
String  rightPad 
String  rightPad 
String  rightPad 
String  leftPad 
String  leftPad 
String  leftPad 
int  length 
String  center 
String  center 
String  center 
String  upperCase 
String  upperCase 
String  lowerCase 
String  lowerCase 
String  capitalize 
String  uncapitalize 
String  swapCase 
int  countMatches 
boolean  isAlpha 
boolean  isAlphaSpace 
boolean  isAlphanumeric 
boolean  isAlphanumericSpace 
boolean  isAsciiPrintable 
boolean  isNumeric 
boolean  isNumericSpace 
boolean  isWhitespace 
boolean  isAllLowerCase 
boolean  isAllUpperCase 
String  defaultString 
String  defaultString 
T  defaultIfBlank 
T  defaultIfEmpty 
String  reverse 
String  reverseDelimited 
String  abbreviate 
String  abbreviate 
String  abbreviateMiddle 
String  difference 
int  indexOfDifference 
int  indexOfDifference 
String  getCommonPrefix 
int  getLevenshteinDistance 
int  getLevenshteinDistance 
boolean  startsWith 
boolean  startsWithIgnoreCase 
boolean  startsWith 
boolean  startsWithAny 
boolean  endsWith 
boolean  endsWithIgnoreCase 
boolean  endsWith 
String  normalizeSpace 
boolean  endsWithAny 
String  toString 
CharSequence equals
method
cs1_ter {'cs1_ter': 'CharSequence', 'cs2_ter': 'CharSequence'}
7 CharSequence
stderr: Check out program version: Lang-14b........................................ OK
OpenJDK 64-Bit Server VM warning: ignoring option MaxPermSize=1G; support was removed in 8.0
Running ant (export.dir.src.classes)....................................... OK

  0%|          | 0/1 [00:00<?, ?it/s]/root/projects/Recoder-bwk/run.py:527: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  tmpdepth = np.array(tmpdepth)
/root/envs/recoder/lib/python3.7/site-packages/torch/nn/functional.py:1340: UserWarning: nn.functional.tanh is deprecated. Use torch.tanh instead.
  warnings.warn("nn.functional.tanh is deprecated. Use torch.tanh instead.")
100%|██████████| 1/1 [00:24<00:00, 24.27s/it]100%|██████████| 1/1 [00:24<00:00, 24.27s/it]
