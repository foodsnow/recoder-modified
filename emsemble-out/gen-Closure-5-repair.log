stdout: LocalVariableDeclaration type ReferenceType name String_ter ^ ^ ^ ^ declarators VariableDeclarator name propName_ter ^ ^ initializer MethodInvocation qualifier parent_ter ^ ^ selectors MethodInvocation member getString_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
String propName = parent.getFirstChild().getString();

LocalVariableDeclaration type ReferenceType name String_ter ^ ^ ^ ^ declarators VariableDeclarator name propName_ter ^ ^ initializer MethodInvocation qualifier parent_ter ^ ^ selectors MethodInvocation member getString_ter ^ ^ ^ ^ member getLastChild_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
String propName = parent.getLastChild().getString();

LocalVariableDeclaration type ReferenceType name String_ter ^ ^ ^ ^ declarators VariableDeclarator name propName_ter ^ ^ initializer MethodInvocation qualifier parent_ter ^ ^ selectors MethodInvocation member getString_ter ^ ^ ^ ^ member getNext_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
String propName = parent.getNext().getString();

LocalVariableDeclaration type ReferenceType name String_ter ^ ^ ^ ^ declarators VariableDeclarator name propName_ter ^ ^ initializer MethodInvocation qualifier parent_ter ^ ^ selectors MethodInvocation member getString_ter ^ ^ ^ ^ member getLastSibling_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
String propName = parent.getLastSibling().getString();

LocalVariableDeclaration type ReferenceType name String_ter ^ ^ ^ ^ declarators VariableDeclarator name propName_ter ^ ^ initializer MethodInvocation qualifier parent_ter ^ ^ selectors MethodInvocation member getString_ter ^ ^ ^ ^ member getParent_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
String propName = parent.getParent().getString();

LocalVariableDeclaration type ReferenceType name String_ter ^ ^ ^ ^ declarators VariableDeclarator name propName_ter ^ ^ initializer MethodInvocation qualifier parent_ter ^ ^ selectors MethodInvocation member getString_ter ^ ^ ^ ^ member detachFromParent_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
String propName = parent.detachFromParent().getString();

LocalVariableDeclaration type ReferenceType name String_ter ^ ^ ^ ^ declarators VariableDeclarator name propName_ter ^ ^ initializer MethodInvocation qualifier parent_ter ^ ^ selectors MethodInvocation member getString_ter ^ ^ ^ ^ member removeFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
String propName = parent.removeFirstChild().getString();

LocalVariableDeclaration type ReferenceType name String_ter ^ ^ ^ ^ declarators VariableDeclarator name propName_ter ^ ^ initializer MethodInvocation qualifier parent_ter ^ ^ selectors MethodInvocation member getString_ter ^ ^ ^ ^ member removeChildren_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
String propName = parent.removeChildren().getString();

LocalVariableDeclaration type ReferenceType name String_ter ^ ^ ^ ^ declarators VariableDeclarator name propName_ter ^ ^ initializer MethodInvocation qualifier parent_ter ^ ^ selectors MethodInvocation member getString_ter ^ ^ ^ ^ member cloneNode_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
String propName = parent.cloneNode().getString();

LocalVariableDeclaration type ReferenceType name String_ter ^ ^ ^ ^ declarators VariableDeclarator name propName_ter ^ ^ initializer MethodInvocation qualifier parent_ter ^ ^ selectors MethodInvocation member getString_ter ^ ^ ^ ^ member cloneTree_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
String propName = parent.cloneTree().getString();

LocalVariableDeclaration type ReferenceType name String_ter ^ ^ ^ ^ declarators VariableDeclarator name propName_ter ^ ^ initializer MethodInvocation qualifier parent_ter ^ ^ selectors MethodInvocation member isInlinableObject_ter ^ ^ ^ ^ member getLastChild_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
String propName = parent.getLastChild().isInlinableObject();

BreakStatement_ter ^ 
break;

LocalVariableDeclaration type ReferenceType name String_ter ^ ^ ^ ^ declarators VariableDeclarator name propName_ter ^ ^ initializer MethodInvocation qualifier parent_ter ^ ^ selectors MethodInvocation member getName_ter ^ ^ ^ ^ member getLastChild_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
String propName = parent.getLastChild().getName();

ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if (true) { return false; }

LocalVariableDeclaration type ReferenceType name String_ter ^ ^ ^ ^ declarators VariableDeclarator name propName_ter ^ ^ initializer MethodInvocation qualifier parent_ter ^ ^ selectors MethodInvocation member isCall_ter ^ ^ ^ ^ member getLastChild_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
String propName = parent.getLastChild().isCall();

LocalVariableDeclaration type ReferenceType name String_ter ^ ^ ^ ^ declarators VariableDeclarator name propName_ter ^ ^ initializer MethodInvocation qualifier parent_ter ^ ^ selectors MethodInvocation member isGetterDef_ter ^ ^ ^ ^ member getLastChild_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
String propName = parent.getLastChild().isGetterDef();

LocalVariableDeclaration type ReferenceType name String_ter ^ ^ ^ ^ declarators VariableDeclarator name propName_ter ^ ^ initializer MethodInvocation qualifier parent_ter ^ ^ selectors MethodInvocation member getFirstChild_ter ^ ^ ^ ^ member getLastChild_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
String propName = parent.getLastChild().getFirstChild();

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent != null)){

LocalVariableDeclaration type ReferenceType name String_ter ^ ^ ^ ^ declarators VariableDeclarator name propName_ter ^ ^ initializer MethodInvocation qualifier parent_ter ^ ^ selectors MethodInvocation member isSetterDef_ter ^ ^ ^ ^ member getLastChild_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
String propName = parent.getLastChild().isSetterDef();

LocalVariableDeclaration type ReferenceType name String_ter ^ ^ ^ ^ declarators VariableDeclarator name propName_ter ^ ^ initializer MethodInvocation qualifier parent_ter ^ ^ selectors MethodInvocation member isGetProp_ter ^ ^ ^ ^ member getLastChild_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
String propName = parent.getLastChild().isGetProp();

LocalVariableDeclaration type ReferenceType name String_ter ^ ^ ^ ^ declarators VariableDeclarator name propName_ter ^ ^ initializer MethodInvocation qualifier parent_ter ^ ^ selectors MethodInvocation member getGrandparent_ter ^ ^ ^ ^ member getLastChild_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
String propName = parent.getLastChild().getGrandparent();

LocalVariableDeclaration type ReferenceType name String_ter ^ ^ ^ ^ declarators VariableDeclarator name propName_ter ^ ^ initializer MethodInvocation qualifier parent_ter ^ ^ member getString_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
String propName = parent.getString();

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.hasChildren()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isFromExterns_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isFromExterns()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.hasOneChild()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.hasMoreThanOneChild()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isQualifiedName()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isUnscopedQualifiedName()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isVarArgs()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isOptionalArg()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isSyntheticBlock()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.wasEmptyNode()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isOnlyModifiesThisCall()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isNoSideEffectsCall()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isLocalResultCall()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isQuotedString()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isAdd_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isAdd()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isAnd_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isAnd()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isArrayLit_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isArrayLit()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isAssign_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isAssign()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isAssignAdd_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isAssignAdd()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isBlock_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isBlock()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isBreak_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isBreak()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isCall_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isCall()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isCase_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isCase()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isCast_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isCast()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isCatch_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isCatch()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isComma_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isComma()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isContinue_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isContinue()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isDebugger_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isDebugger()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isDec_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isDec()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isDefaultCase_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isDefaultCase()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isDelProp_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isDelProp()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isDo_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isDo()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isEmpty()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isExprResult_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isExprResult()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isFalse_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isFalse()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isFor_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isFor()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isFunction_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isFunction()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isGetterDef_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isGetterDef()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isGetElem_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isGetElem()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isGetProp()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isHook_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isHook()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isIf_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isIf()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isIn_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isIn()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isInc_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isInc()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isInstanceOf_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isInstanceOf()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isLabel_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isLabel()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isLabelName_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isLabelName()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isName_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isName()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isNE_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isNE()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isNew_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isNew()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isNot_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isNot()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isNull_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isNull()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isNumber()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isObjectLit_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isObjectLit()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isOr_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isOr()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isParamList_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isParamList()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isRegExp_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isRegExp()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isReturn()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isScript_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isScript()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isSetterDef_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isSetterDef()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isString()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isStringKey_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isStringKey()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isSwitch_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isSwitch()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isThis_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isThis()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isThrow_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isThrow()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isTrue_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isTrue()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isTry_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isTry()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isTypeOf_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isTypeOf()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isVar()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isVoid_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isVoid()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isWhile_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isWhile()){
continue;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isWith_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(parent.isWith()){
continue;
}
LocalVariableDeclaration type ReferenceType name String_ter ^ ^ ^ ^ declarators VariableDeclarator name propName_ter ^ ^ initializer MethodInvocation qualifier parent_ter ^ ^ selectors MethodInvocation member getString_ter ^ ^ ^ ^ member getName_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
String propName = parent.getName().getString();

LocalVariableDeclaration type ReferenceType name String_ter ^ ^ ^ ^ declarators VariableDeclarator name propName_ter ^ ^ initializer MethodInvocation qualifier parent_ter ^ ^ selectors MethodInvocation member getString_ter ^ ^ ^ ^ member isCall_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
String propName = parent.isCall().getString();

ContinueStatement_ter ^ 
continue;

StatementExpression expression MethodInvocation qualifier validProperties_ter ^ ^ arguments MemberReference member propName_ter ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
validProperties.add(propName);

LocalVariableDeclaration type ReferenceType name String_ter ^ ^ ^ ^ declarators VariableDeclarator name propName_ter ^ ^ initializer MethodInvocation qualifier parent_ter ^ ^ selectors MethodInvocation member getString_ter ^ ^ ^ ^ member isInlinableObject_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
String propName = parent.isInlinableObject().getString();

StatementExpression expression MethodInvocation qualifier parent_ter ^ ^ member detachChildren_ter ^ ^ ^ ^ ^ 
parent.detachChildren();

StatementExpression expression MethodInvocation qualifier parent_ter ^ ^ member setQuotedString_ter ^ ^ ^ ^ ^ 
parent.setQuotedString();

LocalVariableDeclaration type ReferenceType name String_ter ^ ^ ^ ^ declarators VariableDeclarator name propName_ter ^ ^ initializer MethodInvocation qualifier parent_ter ^ ^ selectors MethodInvocation member getString_ter ^ ^ ^ ^ member isGetterDef_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
String propName = parent.isGetterDef().getString();

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member name_ter ^ ^ ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState((parent.getFirstChild() == name));

LocalVariableDeclaration type ReferenceType name String_ter ^ ^ ^ ^ declarators VariableDeclarator name propName_ter ^ ^ initializer MethodInvocation qualifier parent_ter ^ ^ member getLastChild_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
String propName = parent.getLastChild();

LocalVariableDeclaration type ReferenceType name String_ter ^ ^ ^ ^ declarators VariableDeclarator name propName_ter ^ ^ initializer MethodInvocation qualifier parent_ter ^ ^ selectors MethodInvocation member getString_ter ^ ^ ^ ^ member isSetterDef_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
String propName = parent.isSetterDef().getString();

ReturnStatement_ter ^ 
if (true) { return;
 }

LocalVariableDeclaration type ReferenceType name String_ter ^ ^ ^ ^ declarators VariableDeclarator name propName_ter ^ ^ initializer MethodInvocation qualifier parent_ter ^ ^ selectors MethodInvocation member getString_ter ^ ^ ^ ^ member getString_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
String propName = parent.getString().getString();

StatementExpression expression MethodInvocation qualifier validProperties_ter ^ ^ arguments MethodInvocation qualifier child_ter ^ ^ member getString_ter ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
validProperties.add(child.getString());

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getLastChild_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.getLastChild() != null)){

StatementExpression expression Assignment expressionl MemberReference member refNode_ter ^ ^ ^ ^ value MethodInvocation qualifier refNode_ter ^ ^ member getParent_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
refNode = refNode.getParent();

ReturnStatement expression MemberReference member ret_ter ^ ^ ^ ^ ^ 
if (true) { return ret; }

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(parent.hasChildren()){
break;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isFromExterns_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(parent.isFromExterns()){
break;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(parent.hasOneChild()){
break;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(parent.hasMoreThanOneChild()){
break;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(parent.isQualifiedName()){
break;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(parent.isUnscopedQualifiedName()){
break;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(parent.isVarArgs()){
break;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(parent.isOptionalArg()){
break;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(parent.isSyntheticBlock()){
break;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(parent.wasEmptyNode()){
break;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(parent.isOnlyModifiesThisCall()){
break;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(parent.isNoSideEffectsCall()){
break;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(parent.isLocalResultCall()){
break;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(parent.isQuotedString()){
break;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isAdd_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(parent.isAdd()){
break;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isAnd_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(parent.isAnd()){
break;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isArrayLit_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(parent.isArrayLit()){
break;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isAssign_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(parent.isAssign()){
break;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isAssignAdd_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(parent.isAssignAdd()){
break;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isBlock_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(parent.isBlock()){
break;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isBreak_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(parent.isBreak()){
break;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isCall_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(parent.isCall()){
break;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isCase_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(parent.isCase()){
break;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isCast_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(parent.isCast()){
break;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isCatch_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(parent.isCatch()){
break;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isComma_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(parent.isComma()){
break;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isContinue_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(parent.isContinue()){
break;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isDebugger_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(parent.isDebugger()){
break;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isDec_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(parent.isDec()){
break;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isDefaultCase_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(parent.isDefaultCase()){
break;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isDelProp_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(parent.isDelProp()){
break;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isDo_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(parent.isDo()){
break;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(parent.isEmpty()){
break;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isExprResult_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(parent.isExprResult()){
break;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isFalse_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(parent.isFalse()){
break;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isFor_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(parent.isFor()){
break;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isFunction_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(parent.isFunction()){
break;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isGetterDef_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(parent.isGetterDef()){
break;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isGetElem_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(parent.isGetElem()){
break;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(parent.isGetProp()){
break;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isHook_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(parent.isHook()){
break;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isIf_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(parent.isIf()){
break;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isIn_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(parent.isIn()){
break;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isInc_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(parent.isInc()){
break;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isInstanceOf_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(parent.isInstanceOf()){
break;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isLabel_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(parent.isLabel()){
break;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isLabelName_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(parent.isLabelName()){
break;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isName_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(parent.isName()){
break;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isNE_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(parent.isNE()){
break;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isNew_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(parent.isNew()){
break;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isNot_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(parent.isNot()){
break;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isNull_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(parent.isNull()){
break;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(parent.isNumber()){
break;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isObjectLit_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(parent.isObjectLit()){
break;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isOr_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(parent.isOr()){
break;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isParamList_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(parent.isParamList()){
break;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isRegExp_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(parent.isRegExp()){
break;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(parent.isReturn()){
break;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isScript_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(parent.isScript()){
break;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isSetterDef_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(parent.isSetterDef()){
break;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(parent.isString()){
break;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isStringKey_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(parent.isStringKey()){
break;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isSwitch_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(parent.isSwitch()){
break;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isThis_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(parent.isThis()){
break;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isThrow_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(parent.isThrow()){
break;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isTrue_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(parent.isTrue()){
break;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isTry_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(parent.isTry()){
break;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isTypeOf_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(parent.isTypeOf()){
break;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(parent.isVar()){
break;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isVoid_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(parent.isVoid()){
break;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isWhile_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(parent.isWhile()){
break;
}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isWith_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(parent.isWith()){
break;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!parent.hasChildren()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isFromExterns_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!parent.isFromExterns()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!parent.hasOneChild()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!parent.hasMoreThanOneChild()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!parent.isQualifiedName()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!parent.isUnscopedQualifiedName()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!parent.isVarArgs()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!parent.isOptionalArg()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!parent.isSyntheticBlock()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!parent.wasEmptyNode()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!parent.isOnlyModifiesThisCall()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!parent.isNoSideEffectsCall()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!parent.isLocalResultCall()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!parent.isQuotedString()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isAdd_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!parent.isAdd()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isAnd_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!parent.isAnd()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isArrayLit_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!parent.isArrayLit()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isAssign_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!parent.isAssign()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isAssignAdd_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!parent.isAssignAdd()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isBlock_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!parent.isBlock()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isBreak_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!parent.isBreak()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isCall_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!parent.isCall()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isCase_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!parent.isCase()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isCast_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!parent.isCast()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isCatch_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!parent.isCatch()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isComma_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!parent.isComma()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isContinue_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!parent.isContinue()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isDebugger_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!parent.isDebugger()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isDec_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!parent.isDec()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isDefaultCase_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!parent.isDefaultCase()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isDelProp_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!parent.isDelProp()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isDo_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!parent.isDo()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!parent.isEmpty()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isExprResult_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!parent.isExprResult()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isFalse_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!parent.isFalse()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isFor_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!parent.isFor()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isFunction_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!parent.isFunction()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isGetterDef_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!parent.isGetterDef()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isGetElem_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!parent.isGetElem()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!parent.isGetProp()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isHook_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!parent.isHook()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isIf_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!parent.isIf()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isIn_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!parent.isIn()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isInc_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!parent.isInc()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isInstanceOf_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!parent.isInstanceOf()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isLabel_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!parent.isLabel()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isLabelName_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!parent.isLabelName()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isName_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!parent.isName()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isNE_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!parent.isNE()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isNew_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!parent.isNew()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isNot_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!parent.isNot()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isNull_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!parent.isNull()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!parent.isNumber()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isObjectLit_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!parent.isObjectLit()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isOr_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!parent.isOr()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isParamList_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!parent.isParamList()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isRegExp_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!parent.isRegExp()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!parent.isReturn()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isScript_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!parent.isScript()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isSetterDef_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!parent.isSetterDef()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!parent.isString()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isStringKey_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!parent.isStringKey()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isSwitch_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!parent.isSwitch()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isThis_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!parent.isThis()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isThrow_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!parent.isThrow()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isTrue_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!parent.isTrue()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isTry_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!parent.isTry()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isTypeOf_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!parent.isTypeOf()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!parent.isVar()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isVoid_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!parent.isVoid()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isWhile_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!parent.isWhile()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isWith_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!parent.isWith()){
continue;
}
LocalVariableDeclaration type ReferenceType name String_ter ^ ^ ^ ^ declarators VariableDeclarator name propName_ter ^ ^ initializer MethodInvocation qualifier child_ter ^ ^ selectors MethodInvocation member getString_ter ^ ^ ^ ^ member getLastChild_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
String propName = child.getLastChild().getString();

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(parent.hasChildren()){
return false;}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isFromExterns_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(parent.isFromExterns()){
return false;}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(parent.hasOneChild()){
return false;}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(parent.hasMoreThanOneChild()){
return false;}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(parent.isQualifiedName()){
return false;}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(parent.isUnscopedQualifiedName()){
return false;}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(parent.isVarArgs()){
return false;}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(parent.isOptionalArg()){
return false;}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(parent.isSyntheticBlock()){
return false;}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(parent.wasEmptyNode()){
return false;}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(parent.isOnlyModifiesThisCall()){
return false;}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(parent.isNoSideEffectsCall()){
return false;}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(parent.isLocalResultCall()){
return false;}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(parent.isQuotedString()){
return false;}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isAdd_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(parent.isAdd()){
return false;}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isAnd_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(parent.isAnd()){
return false;}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isArrayLit_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(parent.isArrayLit()){
return false;}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isAssign_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(parent.isAssign()){
return false;}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isAssignAdd_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(parent.isAssignAdd()){
return false;}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isBlock_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(parent.isBlock()){
return false;}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isBreak_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(parent.isBreak()){
return false;}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isCall_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(parent.isCall()){
return false;}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isCase_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(parent.isCase()){
return false;}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isCast_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(parent.isCast()){
return false;}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isCatch_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(parent.isCatch()){
return false;}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isComma_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(parent.isComma()){
return false;}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isContinue_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(parent.isContinue()){
return false;}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isDebugger_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(parent.isDebugger()){
return false;}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isDec_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(parent.isDec()){
return false;}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isDefaultCase_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(parent.isDefaultCase()){
return false;}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isDelProp_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(parent.isDelProp()){
return false;}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isDo_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(parent.isDo()){
return false;}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(parent.isEmpty()){
return false;}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isExprResult_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(parent.isExprResult()){
return false;}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isFalse_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(parent.isFalse()){
return false;}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isFor_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(parent.isFor()){
return false;}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isFunction_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(parent.isFunction()){
return false;}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isGetterDef_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(parent.isGetterDef()){
return false;}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isGetElem_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(parent.isGetElem()){
return false;}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(parent.isGetProp()){
return false;}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isHook_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(parent.isHook()){
return false;}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isIf_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(parent.isIf()){
return false;}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isIn_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(parent.isIn()){
return false;}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isInc_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(parent.isInc()){
return false;}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isInstanceOf_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(parent.isInstanceOf()){
return false;}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isLabel_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(parent.isLabel()){
return false;}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isLabelName_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(parent.isLabelName()){
return false;}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isName_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(parent.isName()){
return false;}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isNE_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(parent.isNE()){
return false;}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isNew_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(parent.isNew()){
return false;}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isNot_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(parent.isNot()){
return false;}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isNull_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(parent.isNull()){
return false;}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(parent.isNumber()){
return false;}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isObjectLit_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(parent.isObjectLit()){
return false;}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isOr_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(parent.isOr()){
return false;}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isParamList_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(parent.isParamList()){
return false;}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isRegExp_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(parent.isRegExp()){
return false;}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(parent.isReturn()){
return false;}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isScript_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(parent.isScript()){
return false;}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isSetterDef_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(parent.isSetterDef()){
return false;}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(parent.isString()){
return false;}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isStringKey_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(parent.isStringKey()){
return false;}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isSwitch_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(parent.isSwitch()){
return false;}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isThis_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(parent.isThis()){
return false;}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isThrow_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(parent.isThrow()){
return false;}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isTrue_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(parent.isTrue()){
return false;}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isTry_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(parent.isTry()){
return false;}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isTypeOf_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(parent.isTypeOf()){
return false;}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(parent.isVar()){
return false;}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isVoid_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(parent.isVoid()){
return false;}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isWhile_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(parent.isWhile()){
return false;}
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isWith_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(parent.isWith()){
return false;}
control ForControl init VariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name child_ter ^ ^ initializer MethodInvocation qualifier val_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member child_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ update Assignment expressionl MemberReference member child_ter ^ ^ ^ ^ value MethodInvocation qualifier child_ter ^ ^ member getNext_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ 
arg 
arg 
for(Node child = val.getFirstChild();(child != null);child = child.getNext()) {

StatementExpression expression MethodInvocation qualifier gramps_ter ^ ^ member detachChildren_ter ^ ^ ^ ^ ^ 
gramps.detachChildren();

StatementExpression expression MethodInvocation qualifier gramps_ter ^ ^ member setQuotedString_ter ^ ^ ^ ^ ^ 
gramps.setQuotedString();

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if((parent != null)){
continue;
}
StatementExpression expression Assignment expressionl MemberReference member ret_ter ^ ^ ^ ^ value Literal value true_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
ret = true;

LocalVariableDeclaration type ReferenceType name String_ter ^ ^ ^ ^ declarators VariableDeclarator name propName_ter ^ ^ initializer MethodInvocation qualifier gramps_ter ^ ^ selectors MethodInvocation member getString_ter ^ ^ ^ ^ member getLastChild_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
String propName = gramps.getLastChild().getString();

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member gramps_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps != null)){

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if((parent == null)){
continue;
}
LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name String_ter ^ ^ ^ ^ declarators VariableDeclarator name propName_ter ^ ^ initializer MethodInvocation qualifier parent_ter ^ ^ selectors MethodInvocation member getString_ter ^ ^ ^ ^ member getLastChild_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
final String propName = parent.getLastChild().getString();

control EnhancedForControl var VariableDeclaration type ReferenceType name Reference_ter ^ ^ ^ ^ declarators VariableDeclarator name t_ter ^ ^ ^ ^ ^ ^ iterable MemberReference member refs_ter ^ ^ ^ ^ ^ ^ 
arg 
arg 
(Reference t = ;
:refs)

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name childVal_ter ^ ^ initializer MethodInvocation qualifier child_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node childVal = child.getFirstChild();

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.getFirstChild() == parent)){

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent == null)){

stderr: 