stdout: condition BinaryOperation operator >=_ter ^ ^ operandl MethodInvocation qualifier MathUtils_ter ^ ^ arguments MemberReference member entry_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ MemberReference member epsilon_ter ^ ^ ^ ^ member compareTo_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ 
if((MathUtils.compareTo(entry, 0, epsilon) >= 0)){
condition BinaryOperation operator >_ter ^ ^ operandl MethodInvocation qualifier MathUtils_ter ^ ^ arguments MemberReference member entry_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ MemberReference member epsilon_ter ^ ^ ^ ^ member compareTo_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ 
if((MathUtils.compareTo(entry, 0, epsilon) > 0)){
condition BinaryOperation operator <=_ter ^ ^ operandl MethodInvocation qualifier MathUtils_ter ^ ^ arguments MemberReference member entry_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ MemberReference member epsilon_ter ^ ^ ^ ^ member compareTo_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ 
if((MathUtils.compareTo(entry, 0, epsilon) <= 0)){
condition BinaryOperation operator <_ter ^ ^ operandl MethodInvocation qualifier MathUtils_ter ^ ^ arguments MemberReference member entry_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ MemberReference member epsilon_ter ^ ^ ^ ^ member compareTo_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ 
if((MathUtils.compareTo(entry, 0, epsilon) < 0)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier MathUtils_ter ^ ^ arguments MemberReference member entry_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ MemberReference member epsilon_ter ^ ^ ^ ^ member compareTo_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ 
if((MathUtils.compareTo(entry, 0, epsilon) == 0)){
condition BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier MathUtils_ter ^ ^ arguments MemberReference member entry_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ MemberReference member epsilon_ter ^ ^ ^ ^ member compareTo_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ 
if((MathUtils.compareTo(entry, 0, epsilon) != 0)){
IfStatement condition MethodInvocation qualifier MathUtils_ter ^ ^ arguments MemberReference member entry_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ MemberReference member epsilon_ter ^ ^ ^ ^ member compareTo_ter ^ ^ ^ ^ ^ 
if(MathUtils.compareTo(entry, 0, epsilon)){

condition BinaryOperation operator >=_ter ^ ^ operandl MethodInvocation qualifier MathUtils_ter ^ ^ arguments MemberReference member entry_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ MemberReference member minRatioPos_ter ^ ^ ^ ^ member compareTo_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ 
if((MathUtils.compareTo(entry, 0, minRatioPos) >= 0)){
condition BinaryOperation operator >=_ter ^ ^ operandl MethodInvocation qualifier MathUtils_ter ^ ^ arguments MemberReference member entry_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ MemberReference member entry_ter ^ ^ ^ ^ member compareTo_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ 
if((MathUtils.compareTo(entry, 0, entry) >= 0)){
condition BinaryOperation operator >=_ter ^ ^ operandl MethodInvocation qualifier MathUtils_ter ^ ^ arguments MemberReference member entry_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ MemberReference member DEFAULT_EPSILON_ter ^ ^ ^ ^ member compareTo_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ 
if((MathUtils.compareTo(entry, 0, DEFAULT_EPSILON) >= 0)){
condition BinaryOperation operator >=_ter ^ ^ operandl MethodInvocation qualifier MathUtils_ter ^ ^ arguments MemberReference member entry_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ MemberReference member rhs_ter ^ ^ ^ ^ member compareTo_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ 
if((MathUtils.compareTo(entry, 0, rhs) >= 0)){
condition BinaryOperation operator >=_ter ^ ^ operandl MethodInvocation qualifier MathUtils_ter ^ ^ arguments MemberReference member entry_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ MemberReference member i_ter ^ ^ ^ ^ member compareTo_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ 
if((MathUtils.compareTo(entry, 0, i) >= 0)){
condition BinaryOperation operator >=_ter ^ ^ operandl MethodInvocation qualifier MathUtils_ter ^ ^ arguments MemberReference member entry_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ MemberReference member epsilon_ter ^ ^ ^ ^ member getEntry_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ 
if((MathUtils.getEntry(entry, 0, epsilon) >= 0)){
condition BinaryOperation operator >=_ter ^ ^ operandl MethodInvocation qualifier MathUtils_ter ^ ^ arguments MemberReference member entry_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ MemberReference member minRatio_ter ^ ^ ^ ^ member compareTo_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ 
if((MathUtils.compareTo(entry, 0, minRatio) >= 0)){
condition BinaryOperation operator >=_ter ^ ^ operandl MethodInvocation qualifier MathUtils_ter ^ ^ arguments MemberReference member entry_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ MemberReference member tableau_ter ^ ^ ^ ^ member compareTo_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ 
if((MathUtils.compareTo(entry, 0, tableau) >= 0)){
condition BinaryOperation operator >=_ter ^ ^ operandl MethodInvocation qualifier Double_ter ^ ^ arguments MemberReference member entry_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ MemberReference member epsilon_ter ^ ^ ^ ^ member compareTo_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ 
if((Double.compareTo(entry, 0, epsilon) >= 0)){
condition BinaryOperation operator >=_ter ^ ^ operandl MethodInvocation qualifier MathUtils_ter ^ ^ arguments MemberReference member entry_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ MemberReference member col_ter ^ ^ ^ ^ member compareTo_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ 
if((MathUtils.compareTo(entry, 0, col) >= 0)){
condition BinaryOperation operator >=_ter ^ ^ operandl MethodInvocation qualifier MathUtils_ter ^ ^ arguments MemberReference member entry_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ MemberReference member epsilon_ter ^ ^ ^ ^ member getPivotRow_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ 
if((MathUtils.getPivotRow(entry, 0, epsilon) >= 0)){
IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member entry_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ 
if((entry != 0)){

condition BinaryOperation operator >=_ter ^ ^ operandl MethodInvocation qualifier MathUtils_ter ^ ^ arguments MemberReference member entry_ter ^ ^ ^ Literal value 2_ter ^ ^ ^ MemberReference member epsilon_ter ^ ^ ^ ^ member compareTo_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ 
if((MathUtils.compareTo(entry, 2, epsilon) >= 0)){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier MathUtils_ter ^ ^ arguments MemberReference member entry_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ MemberReference member epsilon_ter ^ ^ ^ ^ member compareTo_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ 
if((MathUtils.compareTo(entry, 0, epsilon) || 0)){
condition BinaryOperation operator >=_ter ^ ^ operandl MethodInvocation qualifier MathUtils_ter ^ ^ arguments MemberReference member minRatioPos_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ MemberReference member epsilon_ter ^ ^ ^ ^ member compareTo_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ 
if((MathUtils.compareTo(minRatioPos, 0, epsilon) >= 0)){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier MathUtils_ter ^ ^ arguments MemberReference member entry_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ MemberReference member epsilon_ter ^ ^ ^ ^ member compareTo_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ 
if((MathUtils.compareTo(entry, 0, epsilon) && 0)){
condition BinaryOperation operator >=_ter ^ ^ operandl MethodInvocation qualifier MathUtils_ter ^ ^ arguments MemberReference member i_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ MemberReference member epsilon_ter ^ ^ ^ ^ member compareTo_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ 
if((MathUtils.compareTo(i, 0, epsilon) >= 0)){
condition BinaryOperation operator >=_ter ^ ^ operandl MethodInvocation qualifier MathUtils_ter ^ ^ arguments MemberReference member entry_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ MemberReference member epsilon_ter ^ ^ ^ ^ member getNumObjectiveFunctions_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ 
if((MathUtils.getNumObjectiveFunctions(entry, 0, epsilon) >= 0)){
condition BinaryOperation operator &_ter ^ ^ operandl MethodInvocation qualifier MathUtils_ter ^ ^ arguments MemberReference member entry_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ MemberReference member epsilon_ter ^ ^ ^ ^ member compareTo_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ 
if((MathUtils.compareTo(entry, 0, epsilon) & 0)){
condition BinaryOperation operator >=_ter ^ ^ operandl MethodInvocation qualifier MathUtils_ter ^ ^ arguments MemberReference member rhs_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ MemberReference member epsilon_ter ^ ^ ^ ^ member compareTo_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ 
if((MathUtils.compareTo(rhs, 0, epsilon) >= 0)){
condition BinaryOperation operator >=_ter ^ ^ operandl MethodInvocation qualifier MathUtils_ter ^ ^ arguments MemberReference member entry_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ MemberReference member ratio_ter ^ ^ ^ ^ member compareTo_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ 
if((MathUtils.compareTo(entry, 0, ratio) >= 0)){
condition BinaryOperation operator >>>_ter ^ ^ operandl MethodInvocation qualifier MathUtils_ter ^ ^ arguments MemberReference member entry_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ MemberReference member epsilon_ter ^ ^ ^ ^ member compareTo_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ 
if((MathUtils.compareTo(entry, 0, epsilon) >>> 0)){
condition BinaryOperation operator >=_ter ^ ^ operandl MethodInvocation qualifier MathUtils_ter ^ ^ arguments MemberReference member entry_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ MemberReference qualifier DEFAULT_EPSILON_ter ^ ^ member epsilon_ter ^ ^ ^ ^ member compareTo_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ 
if((MathUtils.compareTo(entry, 0, DEFAULT_EPSILON.epsilon) >= 0)){
condition BinaryOperation operator >=_ter ^ ^ operandl MethodInvocation qualifier MathUtils_ter ^ ^ arguments MemberReference member entry_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ MemberReference qualifier epsilon_ter ^ ^ member epsilon_ter ^ ^ ^ ^ member compareTo_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ 
if((MathUtils.compareTo(entry, 0, epsilon.epsilon) >= 0)){
condition BinaryOperation operator >=_ter ^ ^ operandl MethodInvocation qualifier col_ter ^ ^ arguments MemberReference member entry_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ MemberReference member epsilon_ter ^ ^ ^ ^ member compareTo_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ 
if((col.compareTo(entry, 0, epsilon) >= 0)){
condition BinaryOperation operator >=_ter ^ ^ operandl MethodInvocation qualifier MathUtils_ter ^ ^ arguments MemberReference member entry_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ MemberReference member epsilon_ter ^ ^ ^ ^ member debug_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ 
if((MathUtils.debug(entry, 0, epsilon) >= 0)){
IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member entry_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ 
if((entry == 0)){

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member entry_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((entry != null)){

condition BinaryOperation operator >=_ter ^ ^ operandl MethodInvocation qualifier MathUtils_ter ^ ^ arguments MemberReference member entry_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ MemberReference member epsilon_ter ^ ^ ^ ^ member e_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ 
if((MathUtils.e(entry, 0, epsilon) >= 0)){
condition BinaryOperation operator >=_ter ^ ^ operandl MethodInvocation qualifier MathUtils_ter ^ ^ arguments MemberReference member minRatio_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ MemberReference member epsilon_ter ^ ^ ^ ^ member compareTo_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ 
if((MathUtils.compareTo(minRatio, 0, epsilon) >= 0)){
condition BinaryOperation operator >=_ter ^ ^ operandl MethodInvocation qualifier MathUtils_ter ^ ^ arguments MemberReference member entry_ter ^ ^ ^ Literal value false_ter ^ ^ ^ MemberReference member epsilon_ter ^ ^ ^ ^ member compareTo_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ 
if((MathUtils.compareTo(entry, false, epsilon) >= 0)){
IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member epsilon_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ 
if((epsilon != 0)){

condition BinaryOperation operator >=_ter ^ ^ operandl MethodInvocation qualifier MathUtils_ter ^ ^ arguments MemberReference member entry_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ MemberReference qualifier Double_ter ^ ^ member epsilon_ter ^ ^ ^ ^ member compareTo_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ 
if((MathUtils.compareTo(entry, 0, Double.epsilon) >= 0)){
StatementExpression expression Assignment expressionl MemberReference member minRatio_ter ^ ^ ^ ^ value MemberReference member ratio_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
minRatio = ratio;

condition BinaryOperation operator >=_ter ^ ^ operandl MethodInvocation qualifier MathUtils_ter ^ ^ arguments MemberReference member epsilon_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ MemberReference member epsilon_ter ^ ^ ^ ^ member compareTo_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ 
if((MathUtils.compareTo(epsilon, 0, epsilon) >= 0)){
StatementExpression expression Assignment expressionl MemberReference member minRatioPos_ter ^ ^ ^ ^ value MemberReference member i_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
minRatioPos = i;

stderr: 