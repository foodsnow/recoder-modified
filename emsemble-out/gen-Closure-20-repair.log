stdout: condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ 
if((value != null)){
condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ 
if((value == null)){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member callTarget_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier callTarget_ter ^ ^ member isName_ter ^ ^ ^ ^ ^ ^ ^ 
if(((callTarget != null) && callTarget.isName())){

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member callTarget_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((callTarget != null)){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier value_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && value.hasChildren())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier value_ter ^ ^ member isFromExterns_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && value.isFromExterns())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier value_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && value.hasOneChild())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier value_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && value.hasMoreThanOneChild())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier value_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && value.isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier value_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && value.isUnscopedQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier value_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && value.isVarArgs())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier value_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && value.isOptionalArg())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier value_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && value.isSyntheticBlock())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier value_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && value.wasEmptyNode())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier value_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && value.isOnlyModifiesThisCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier value_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && value.isNoSideEffectsCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier value_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && value.isLocalResultCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier value_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && value.isQuotedString())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier value_ter ^ ^ member isAdd_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && value.isAdd())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier value_ter ^ ^ member isAnd_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && value.isAnd())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier value_ter ^ ^ member isArrayLit_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && value.isArrayLit())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier value_ter ^ ^ member isAssign_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && value.isAssign())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier value_ter ^ ^ member isAssignAdd_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && value.isAssignAdd())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier value_ter ^ ^ member isBlock_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && value.isBlock())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier value_ter ^ ^ member isBreak_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && value.isBreak())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier value_ter ^ ^ member isCall_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && value.isCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier value_ter ^ ^ member isCase_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && value.isCase())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier value_ter ^ ^ member isCatch_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && value.isCatch())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier value_ter ^ ^ member isComma_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && value.isComma())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier value_ter ^ ^ member isContinue_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && value.isContinue())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier value_ter ^ ^ member isDebugger_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && value.isDebugger())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier value_ter ^ ^ member isDec_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && value.isDec())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier value_ter ^ ^ member isDefaultCase_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && value.isDefaultCase())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier value_ter ^ ^ member isDelProp_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && value.isDelProp())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier value_ter ^ ^ member isDo_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && value.isDo())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier value_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && value.isEmpty())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier value_ter ^ ^ member isExprResult_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && value.isExprResult())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier value_ter ^ ^ member isFalse_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && value.isFalse())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier value_ter ^ ^ member isFor_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && value.isFor())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier value_ter ^ ^ member isFunction_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && value.isFunction())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier value_ter ^ ^ member isGetterDef_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && value.isGetterDef())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier value_ter ^ ^ member isGetElem_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && value.isGetElem())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier value_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && value.isGetProp())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier value_ter ^ ^ member isHook_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && value.isHook())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier value_ter ^ ^ member isIf_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && value.isIf())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier value_ter ^ ^ member isIn_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && value.isIn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier value_ter ^ ^ member isInc_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && value.isInc())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier value_ter ^ ^ member isInstanceOf_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && value.isInstanceOf())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier value_ter ^ ^ member isLabel_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && value.isLabel())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier value_ter ^ ^ member isLabelName_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && value.isLabelName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier value_ter ^ ^ member isName_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && value.isName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier value_ter ^ ^ member isNE_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && value.isNE())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier value_ter ^ ^ member isNew_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && value.isNew())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier value_ter ^ ^ member isNot_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && value.isNot())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier value_ter ^ ^ member isNull_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && value.isNull())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier value_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && value.isNumber())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier value_ter ^ ^ member isObjectLit_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && value.isObjectLit())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier value_ter ^ ^ member isOr_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && value.isOr())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier value_ter ^ ^ member isParamList_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && value.isParamList())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier value_ter ^ ^ member isRegExp_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && value.isRegExp())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier value_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && value.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier value_ter ^ ^ member isScript_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && value.isScript())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier value_ter ^ ^ member isSetterDef_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && value.isSetterDef())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier value_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && value.isString())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier value_ter ^ ^ member isStringKey_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && value.isStringKey())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier value_ter ^ ^ member isSwitch_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && value.isSwitch())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier value_ter ^ ^ member isThis_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && value.isThis())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier value_ter ^ ^ member isThrow_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && value.isThrow())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier value_ter ^ ^ member isTrue_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && value.isTrue())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier value_ter ^ ^ member isTry_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && value.isTry())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier value_ter ^ ^ member isTypeOf_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && value.isTypeOf())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier value_ter ^ ^ member isVar_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && value.isVar())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier value_ter ^ ^ member isVoid_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && value.isVoid())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier value_ter ^ ^ member isWhile_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && value.isWhile())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier value_ter ^ ^ member isWith_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && value.isWith())){

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((value != null)){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value == null))){

StatementExpression expression MethodInvocation qualifier value_ter ^ ^ member detachChildren_ter ^ ^ ^ ^ ^ 
value.detachChildren();

StatementExpression expression MethodInvocation qualifier value_ter ^ ^ member setQuotedString_ter ^ ^ ^ ^ ^ 
value.setQuotedString();

condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member callTarget_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ 
if((callTarget != null)){
IfStatement condition MethodInvocation qualifier value_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
if(value.hasChildren()){

IfStatement condition MethodInvocation qualifier value_ter ^ ^ member isFromExterns_ter ^ ^ ^ ^ ^ 
if(value.isFromExterns()){

IfStatement condition MethodInvocation qualifier value_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ ^ 
if(value.hasOneChild()){

IfStatement condition MethodInvocation qualifier value_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ ^ 
if(value.hasMoreThanOneChild()){

IfStatement condition MethodInvocation qualifier value_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ ^ 
if(value.isQualifiedName()){

IfStatement condition MethodInvocation qualifier value_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ ^ 
if(value.isUnscopedQualifiedName()){

IfStatement condition MethodInvocation qualifier value_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ ^ 
if(value.isVarArgs()){

IfStatement condition MethodInvocation qualifier value_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ ^ 
if(value.isOptionalArg()){

IfStatement condition MethodInvocation qualifier value_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ ^ 
if(value.isSyntheticBlock()){

IfStatement condition MethodInvocation qualifier value_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ ^ 
if(value.wasEmptyNode()){

IfStatement condition MethodInvocation qualifier value_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ ^ 
if(value.isOnlyModifiesThisCall()){

IfStatement condition MethodInvocation qualifier value_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ ^ 
if(value.isNoSideEffectsCall()){

IfStatement condition MethodInvocation qualifier value_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ ^ 
if(value.isLocalResultCall()){

IfStatement condition MethodInvocation qualifier value_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ ^ 
if(value.isQuotedString()){

IfStatement condition MethodInvocation qualifier value_ter ^ ^ member isAdd_ter ^ ^ ^ ^ ^ 
if(value.isAdd()){

IfStatement condition MethodInvocation qualifier value_ter ^ ^ member isAnd_ter ^ ^ ^ ^ ^ 
if(value.isAnd()){

IfStatement condition MethodInvocation qualifier value_ter ^ ^ member isArrayLit_ter ^ ^ ^ ^ ^ 
if(value.isArrayLit()){

IfStatement condition MethodInvocation qualifier value_ter ^ ^ member isAssign_ter ^ ^ ^ ^ ^ 
if(value.isAssign()){

IfStatement condition MethodInvocation qualifier value_ter ^ ^ member isAssignAdd_ter ^ ^ ^ ^ ^ 
if(value.isAssignAdd()){

IfStatement condition MethodInvocation qualifier value_ter ^ ^ member isBlock_ter ^ ^ ^ ^ ^ 
if(value.isBlock()){

IfStatement condition MethodInvocation qualifier value_ter ^ ^ member isBreak_ter ^ ^ ^ ^ ^ 
if(value.isBreak()){

IfStatement condition MethodInvocation qualifier value_ter ^ ^ member isCall_ter ^ ^ ^ ^ ^ 
if(value.isCall()){

IfStatement condition MethodInvocation qualifier value_ter ^ ^ member isCase_ter ^ ^ ^ ^ ^ 
if(value.isCase()){

IfStatement condition MethodInvocation qualifier value_ter ^ ^ member isCatch_ter ^ ^ ^ ^ ^ 
if(value.isCatch()){

IfStatement condition MethodInvocation qualifier value_ter ^ ^ member isComma_ter ^ ^ ^ ^ ^ 
if(value.isComma()){

IfStatement condition MethodInvocation qualifier value_ter ^ ^ member isContinue_ter ^ ^ ^ ^ ^ 
if(value.isContinue()){

IfStatement condition MethodInvocation qualifier value_ter ^ ^ member isDebugger_ter ^ ^ ^ ^ ^ 
if(value.isDebugger()){

IfStatement condition MethodInvocation qualifier value_ter ^ ^ member isDec_ter ^ ^ ^ ^ ^ 
if(value.isDec()){

IfStatement condition MethodInvocation qualifier value_ter ^ ^ member isDefaultCase_ter ^ ^ ^ ^ ^ 
if(value.isDefaultCase()){

IfStatement condition MethodInvocation qualifier value_ter ^ ^ member isDelProp_ter ^ ^ ^ ^ ^ 
if(value.isDelProp()){

IfStatement condition MethodInvocation qualifier value_ter ^ ^ member isDo_ter ^ ^ ^ ^ ^ 
if(value.isDo()){

IfStatement condition MethodInvocation qualifier value_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ ^ 
if(value.isEmpty()){

IfStatement condition MethodInvocation qualifier value_ter ^ ^ member isExprResult_ter ^ ^ ^ ^ ^ 
if(value.isExprResult()){

IfStatement condition MethodInvocation qualifier value_ter ^ ^ member isFalse_ter ^ ^ ^ ^ ^ 
if(value.isFalse()){

IfStatement condition MethodInvocation qualifier value_ter ^ ^ member isFor_ter ^ ^ ^ ^ ^ 
if(value.isFor()){

IfStatement condition MethodInvocation qualifier value_ter ^ ^ member isFunction_ter ^ ^ ^ ^ ^ 
if(value.isFunction()){

IfStatement condition MethodInvocation qualifier value_ter ^ ^ member isGetterDef_ter ^ ^ ^ ^ ^ 
if(value.isGetterDef()){

IfStatement condition MethodInvocation qualifier value_ter ^ ^ member isGetElem_ter ^ ^ ^ ^ ^ 
if(value.isGetElem()){

IfStatement condition MethodInvocation qualifier value_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ ^ 
if(value.isGetProp()){

IfStatement condition MethodInvocation qualifier value_ter ^ ^ member isHook_ter ^ ^ ^ ^ ^ 
if(value.isHook()){

IfStatement condition MethodInvocation qualifier value_ter ^ ^ member isIf_ter ^ ^ ^ ^ ^ 
if(value.isIf()){

IfStatement condition MethodInvocation qualifier value_ter ^ ^ member isIn_ter ^ ^ ^ ^ ^ 
if(value.isIn()){

IfStatement condition MethodInvocation qualifier value_ter ^ ^ member isInc_ter ^ ^ ^ ^ ^ 
if(value.isInc()){

IfStatement condition MethodInvocation qualifier value_ter ^ ^ member isInstanceOf_ter ^ ^ ^ ^ ^ 
if(value.isInstanceOf()){

IfStatement condition MethodInvocation qualifier value_ter ^ ^ member isLabel_ter ^ ^ ^ ^ ^ 
if(value.isLabel()){

IfStatement condition MethodInvocation qualifier value_ter ^ ^ member isLabelName_ter ^ ^ ^ ^ ^ 
if(value.isLabelName()){

IfStatement condition MethodInvocation qualifier value_ter ^ ^ member isName_ter ^ ^ ^ ^ ^ 
if(value.isName()){

IfStatement condition MethodInvocation qualifier value_ter ^ ^ member isNE_ter ^ ^ ^ ^ ^ 
if(value.isNE()){

IfStatement condition MethodInvocation qualifier value_ter ^ ^ member isNew_ter ^ ^ ^ ^ ^ 
if(value.isNew()){

IfStatement condition MethodInvocation qualifier value_ter ^ ^ member isNot_ter ^ ^ ^ ^ ^ 
if(value.isNot()){

IfStatement condition MethodInvocation qualifier value_ter ^ ^ member isNull_ter ^ ^ ^ ^ ^ 
if(value.isNull()){

IfStatement condition MethodInvocation qualifier value_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ 
if(value.isNumber()){

IfStatement condition MethodInvocation qualifier value_ter ^ ^ member isObjectLit_ter ^ ^ ^ ^ ^ 
if(value.isObjectLit()){

IfStatement condition MethodInvocation qualifier value_ter ^ ^ member isOr_ter ^ ^ ^ ^ ^ 
if(value.isOr()){

IfStatement condition MethodInvocation qualifier value_ter ^ ^ member isParamList_ter ^ ^ ^ ^ ^ 
if(value.isParamList()){

IfStatement condition MethodInvocation qualifier value_ter ^ ^ member isRegExp_ter ^ ^ ^ ^ ^ 
if(value.isRegExp()){

IfStatement condition MethodInvocation qualifier value_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ 
if(value.isReturn()){

IfStatement condition MethodInvocation qualifier value_ter ^ ^ member isScript_ter ^ ^ ^ ^ ^ 
if(value.isScript()){

IfStatement condition MethodInvocation qualifier value_ter ^ ^ member isSetterDef_ter ^ ^ ^ ^ ^ 
if(value.isSetterDef()){

IfStatement condition MethodInvocation qualifier value_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ 
if(value.isString()){

IfStatement condition MethodInvocation qualifier value_ter ^ ^ member isStringKey_ter ^ ^ ^ ^ ^ 
if(value.isStringKey()){

IfStatement condition MethodInvocation qualifier value_ter ^ ^ member isSwitch_ter ^ ^ ^ ^ ^ 
if(value.isSwitch()){

IfStatement condition MethodInvocation qualifier value_ter ^ ^ member isThis_ter ^ ^ ^ ^ ^ 
if(value.isThis()){

IfStatement condition MethodInvocation qualifier value_ter ^ ^ member isThrow_ter ^ ^ ^ ^ ^ 
if(value.isThrow()){

IfStatement condition MethodInvocation qualifier value_ter ^ ^ member isTrue_ter ^ ^ ^ ^ ^ 
if(value.isTrue()){

IfStatement condition MethodInvocation qualifier value_ter ^ ^ member isTry_ter ^ ^ ^ ^ ^ 
if(value.isTry()){

IfStatement condition MethodInvocation qualifier value_ter ^ ^ member isTypeOf_ter ^ ^ ^ ^ ^ 
if(value.isTypeOf()){

IfStatement condition MethodInvocation qualifier value_ter ^ ^ member isVar_ter ^ ^ ^ ^ ^ 
if(value.isVar()){

IfStatement condition MethodInvocation qualifier value_ter ^ ^ member isVoid_ter ^ ^ ^ ^ ^ 
if(value.isVoid()){

IfStatement condition MethodInvocation qualifier value_ter ^ ^ member isWhile_ter ^ ^ ^ ^ ^ 
if(value.isWhile()){

IfStatement condition MethodInvocation qualifier value_ter ^ ^ member isWith_ter ^ ^ ^ ^ ^ 
if(value.isWith()){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member detachFromParent_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.detachFromParent() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && !value.hasChildren())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isFromExterns_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && !value.isFromExterns())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && !value.hasOneChild())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && !value.hasMoreThanOneChild())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && !value.isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && !value.isUnscopedQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && !value.isVarArgs())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && !value.isOptionalArg())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && !value.isSyntheticBlock())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && !value.wasEmptyNode())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && !value.isOnlyModifiesThisCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && !value.isNoSideEffectsCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && !value.isLocalResultCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && !value.isQuotedString())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isAdd_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && !value.isAdd())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isAnd_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && !value.isAnd())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isArrayLit_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && !value.isArrayLit())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isAssign_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && !value.isAssign())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isAssignAdd_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && !value.isAssignAdd())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isBlock_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && !value.isBlock())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isBreak_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && !value.isBreak())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isCall_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && !value.isCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isCase_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && !value.isCase())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isCatch_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && !value.isCatch())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isComma_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && !value.isComma())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isContinue_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && !value.isContinue())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isDebugger_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && !value.isDebugger())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isDec_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && !value.isDec())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isDefaultCase_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && !value.isDefaultCase())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isDelProp_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && !value.isDelProp())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isDo_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && !value.isDo())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && !value.isEmpty())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isExprResult_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && !value.isExprResult())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isFalse_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && !value.isFalse())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isFor_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && !value.isFor())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isFunction_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && !value.isFunction())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isGetterDef_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && !value.isGetterDef())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isGetElem_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && !value.isGetElem())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && !value.isGetProp())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isHook_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && !value.isHook())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isIf_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && !value.isIf())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isIn_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && !value.isIn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isInc_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && !value.isInc())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isInstanceOf_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && !value.isInstanceOf())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isLabel_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && !value.isLabel())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isLabelName_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && !value.isLabelName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isName_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && !value.isName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isNE_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && !value.isNE())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isNew_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && !value.isNew())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isNot_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && !value.isNot())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isNull_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && !value.isNull())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && !value.isNumber())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isObjectLit_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && !value.isObjectLit())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isOr_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && !value.isOr())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isParamList_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && !value.isParamList())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isRegExp_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && !value.isRegExp())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && !value.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isScript_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && !value.isScript())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isSetterDef_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && !value.isSetterDef())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && !value.isString())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isStringKey_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && !value.isStringKey())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isSwitch_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && !value.isSwitch())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isThis_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && !value.isThis())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isThrow_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && !value.isThrow())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isTrue_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && !value.isTrue())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isTry_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && !value.isTry())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isTypeOf_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && !value.isTypeOf())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isVar_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && !value.isVar())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isVoid_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && !value.isVoid())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isWhile_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && !value.isWhile())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isWith_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && !value.isWith())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member detachFromParent_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.detachFromParent() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member callTarget_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier callTarget_ter ^ ^ member isName_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && ((callTarget != null) && callTarget.isName()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member callTarget_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (callTarget != null))){

condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ 
if((n != null)){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member callTarget_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((callTarget != null) && (value != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member callTarget_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier callTarget_ter ^ ^ member isName_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((callTarget != null) && callTarget.isName()) && (value != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.hasChildren() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isFromExterns_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isFromExterns() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.hasOneChild() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.hasMoreThanOneChild() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isQualifiedName() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isUnscopedQualifiedName() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isVarArgs() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isOptionalArg() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isSyntheticBlock() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.wasEmptyNode() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isOnlyModifiesThisCall() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isNoSideEffectsCall() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isLocalResultCall() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isQuotedString() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isAdd_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isAdd() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isAnd_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isAnd() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isArrayLit_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isArrayLit() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isAssign_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isAssign() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isAssignAdd_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isAssignAdd() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isBlock_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isBlock() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isBreak_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isBreak() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isCall() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isCase_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isCase() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isCatch_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isCatch() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isComma_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isComma() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isContinue_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isContinue() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isDebugger_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isDebugger() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isDec_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isDec() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isDefaultCase_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isDefaultCase() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isDelProp_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isDelProp() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isDo_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isDo() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isEmpty() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isExprResult_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isExprResult() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isFalse_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isFalse() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isFor_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isFor() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isFunction_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isFunction() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isGetterDef_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isGetterDef() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isGetElem_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isGetElem() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isGetProp() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isHook_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isHook() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isIf_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isIf() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isIn_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isIn() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isInc_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isInc() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isInstanceOf_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isInstanceOf() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isLabel_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isLabel() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isLabelName_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isLabelName() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isName() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isNE_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isNE() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isNew_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isNew() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isNot_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isNot() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isNull_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isNull() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isNumber_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isNumber() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isObjectLit_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isObjectLit() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isOr_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isOr() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isParamList_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isParamList() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isRegExp_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isRegExp() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isReturn() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isScript_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isScript() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isSetterDef_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isSetterDef() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isString_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isString() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isStringKey_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isStringKey() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isSwitch_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isSwitch() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isThis_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isThis() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isThrow_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isThrow() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isTrue_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isTrue() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isTry_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isTry() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isTypeOf_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isTypeOf() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isVar() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isVoid_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isVoid() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isWhile_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isWhile() != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isWith_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isWith() != null))){

condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member addition_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ 
if((addition != null)){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier callTarget_ter ^ ^ selectors MethodInvocation arguments Literal value <string>_ter ^ ^ ^ ^ member equals_ter ^ ^ ^ ^ member getString_ter ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && callTarget.getString().equals("null"))){

IfStatement condition MemberReference member value_ter ^ ^ ^ ^ ^ 
if(value){

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((value == null)){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ ^ 
if(!value.isEmpty()){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((value && (value != null))){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
if(!value.hasChildren()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isFromExterns_ter ^ ^ ^ ^ ^ 
if(!value.isFromExterns()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ ^ 
if(!value.hasOneChild()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ ^ 
if(!value.hasMoreThanOneChild()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ ^ 
if(!value.isQualifiedName()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ ^ 
if(!value.isUnscopedQualifiedName()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ ^ 
if(!value.isVarArgs()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ ^ 
if(!value.isOptionalArg()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ ^ 
if(!value.isSyntheticBlock()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ ^ 
if(!value.wasEmptyNode()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ ^ 
if(!value.isOnlyModifiesThisCall()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ ^ 
if(!value.isNoSideEffectsCall()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ ^ 
if(!value.isLocalResultCall()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ ^ 
if(!value.isQuotedString()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isAdd_ter ^ ^ ^ ^ ^ 
if(!value.isAdd()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isAnd_ter ^ ^ ^ ^ ^ 
if(!value.isAnd()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isArrayLit_ter ^ ^ ^ ^ ^ 
if(!value.isArrayLit()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isAssign_ter ^ ^ ^ ^ ^ 
if(!value.isAssign()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isAssignAdd_ter ^ ^ ^ ^ ^ 
if(!value.isAssignAdd()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isBlock_ter ^ ^ ^ ^ ^ 
if(!value.isBlock()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isBreak_ter ^ ^ ^ ^ ^ 
if(!value.isBreak()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isCall_ter ^ ^ ^ ^ ^ 
if(!value.isCall()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isCase_ter ^ ^ ^ ^ ^ 
if(!value.isCase()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isCatch_ter ^ ^ ^ ^ ^ 
if(!value.isCatch()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isComma_ter ^ ^ ^ ^ ^ 
if(!value.isComma()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isContinue_ter ^ ^ ^ ^ ^ 
if(!value.isContinue()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isDebugger_ter ^ ^ ^ ^ ^ 
if(!value.isDebugger()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isDec_ter ^ ^ ^ ^ ^ 
if(!value.isDec()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isDefaultCase_ter ^ ^ ^ ^ ^ 
if(!value.isDefaultCase()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isDelProp_ter ^ ^ ^ ^ ^ 
if(!value.isDelProp()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isDo_ter ^ ^ ^ ^ ^ 
if(!value.isDo()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isExprResult_ter ^ ^ ^ ^ ^ 
if(!value.isExprResult()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isFalse_ter ^ ^ ^ ^ ^ 
if(!value.isFalse()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isFor_ter ^ ^ ^ ^ ^ 
if(!value.isFor()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isFunction_ter ^ ^ ^ ^ ^ 
if(!value.isFunction()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isGetterDef_ter ^ ^ ^ ^ ^ 
if(!value.isGetterDef()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isGetElem_ter ^ ^ ^ ^ ^ 
if(!value.isGetElem()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ ^ 
if(!value.isGetProp()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isHook_ter ^ ^ ^ ^ ^ 
if(!value.isHook()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isIf_ter ^ ^ ^ ^ ^ 
if(!value.isIf()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isIn_ter ^ ^ ^ ^ ^ 
if(!value.isIn()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isInc_ter ^ ^ ^ ^ ^ 
if(!value.isInc()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isInstanceOf_ter ^ ^ ^ ^ ^ 
if(!value.isInstanceOf()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isLabel_ter ^ ^ ^ ^ ^ 
if(!value.isLabel()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isLabelName_ter ^ ^ ^ ^ ^ 
if(!value.isLabelName()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isName_ter ^ ^ ^ ^ ^ 
if(!value.isName()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isNE_ter ^ ^ ^ ^ ^ 
if(!value.isNE()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isNew_ter ^ ^ ^ ^ ^ 
if(!value.isNew()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isNot_ter ^ ^ ^ ^ ^ 
if(!value.isNot()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isNull_ter ^ ^ ^ ^ ^ 
if(!value.isNull()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ 
if(!value.isNumber()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isObjectLit_ter ^ ^ ^ ^ ^ 
if(!value.isObjectLit()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isOr_ter ^ ^ ^ ^ ^ 
if(!value.isOr()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isParamList_ter ^ ^ ^ ^ ^ 
if(!value.isParamList()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isRegExp_ter ^ ^ ^ ^ ^ 
if(!value.isRegExp()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ 
if(!value.isReturn()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isScript_ter ^ ^ ^ ^ ^ 
if(!value.isScript()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isSetterDef_ter ^ ^ ^ ^ ^ 
if(!value.isSetterDef()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ 
if(!value.isString()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isStringKey_ter ^ ^ ^ ^ ^ 
if(!value.isStringKey()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isSwitch_ter ^ ^ ^ ^ ^ 
if(!value.isSwitch()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isThis_ter ^ ^ ^ ^ ^ 
if(!value.isThis()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isThrow_ter ^ ^ ^ ^ ^ 
if(!value.isThrow()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isTrue_ter ^ ^ ^ ^ ^ 
if(!value.isTrue()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isTry_ter ^ ^ ^ ^ ^ 
if(!value.isTry()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isTypeOf_ter ^ ^ ^ ^ ^ 
if(!value.isTypeOf()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isVar_ter ^ ^ ^ ^ ^ 
if(!value.isVar()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isVoid_ter ^ ^ ^ ^ ^ 
if(!value.isVoid()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isWhile_ter ^ ^ ^ ^ ^ 
if(!value.isWhile()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier value_ter ^ ^ member isWith_ter ^ ^ ^ ^ ^ 
if(!value.isWith()){

condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ 
if((value != "null")){


IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member callTarget_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier callTarget_ter ^ ^ member isName_ter ^ ^ ^ ^ ^ ^ ^ 
if(((callTarget != null) && callTarget.isName())){

StatementExpression expression Assignment expressionl MemberReference member value_ter ^ ^ ^ ^ value MethodInvocation qualifier value_ter ^ ^ member detachChildren_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
value = value.detachChildren();

StatementExpression expression Assignment expressionl MemberReference member value_ter ^ ^ ^ ^ value MethodInvocation qualifier value_ter ^ ^ member setQuotedString_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
value = value.setQuotedString();

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.hasChildren() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isFromExterns_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isFromExterns() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.hasOneChild() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.hasMoreThanOneChild() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isQualifiedName() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isUnscopedQualifiedName() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isVarArgs() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isOptionalArg() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isSyntheticBlock() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.wasEmptyNode() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isOnlyModifiesThisCall() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isNoSideEffectsCall() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isLocalResultCall() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isQuotedString() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isAdd_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isAdd() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isAnd_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isAnd() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isArrayLit_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isArrayLit() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isAssign_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isAssign() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isAssignAdd_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isAssignAdd() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isBlock_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isBlock() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isBreak_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isBreak() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isCall() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isCase_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isCase() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isCatch_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isCatch() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isComma_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isComma() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isContinue_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isContinue() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isDebugger_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isDebugger() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isDec_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isDec() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isDefaultCase_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isDefaultCase() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isDelProp_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isDelProp() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isDo_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isDo() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isEmpty() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isExprResult_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isExprResult() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isFalse_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isFalse() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isFor_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isFor() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isFunction_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isFunction() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isGetterDef_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isGetterDef() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isGetElem_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isGetElem() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isGetProp() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isHook_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isHook() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isIf_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isIf() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isIn_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isIn() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isInc_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isInc() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isInstanceOf_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isInstanceOf() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isLabel_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isLabel() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isLabelName_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isLabelName() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isName() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isNE_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isNE() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isNew_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isNew() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isNot_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isNot() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isNull_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isNull() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isNumber_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isNumber() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isObjectLit_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isObjectLit() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isOr_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isOr() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isParamList_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isParamList() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isRegExp_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isRegExp() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isReturn() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isScript_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isScript() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isSetterDef_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isSetterDef() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isString_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isString() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isStringKey_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isStringKey() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isSwitch_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isSwitch() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isThis_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isThis() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isThrow_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isThrow() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isTrue_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isTrue() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isTry_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isTry() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isTypeOf_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isTypeOf() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isVar() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isVoid_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isVoid() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isWhile_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isWhile() == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier value_ter ^ ^ member isWith_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (value.isWith() == null))){

StatementExpression expression MethodInvocation member reportCodeChange_ter ^ ^ ^ ^ ^ 
reportCodeChange();

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member callTarget_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((callTarget != null)){

condition BinaryOperation operator >_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ 
if((value > null)){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier callTarget_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (callTarget.isName() != null))){

StatementExpression expression MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation arguments MemberReference member n_ter ^ ^ ^ MemberReference member addition_ter ^ ^ ^ ^ member replaceChild_ter ^ ^ ^ ^ member getParent_ter ^ ^ ^ ^ ^ 
n.getParent().replaceChild(n, addition);

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier callTarget_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((value != null) && (callTarget.isName() == null))){

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference member addition_ter ^ ^ ^ ^ ^ 
if((value == null)){
return addition;}
StatementExpression expression MethodInvocation qualifier callTarget_ter ^ ^ member detachChildren_ter ^ ^ ^ ^ ^ 
callTarget.detachChildren();

StatementExpression expression MethodInvocation qualifier callTarget_ter ^ ^ member setQuotedString_ter ^ ^ ^ ^ ^ 
callTarget.setQuotedString();

ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if (true) { return null; }

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member value_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if((value == null)){
return null;}
IfStatement condition MemberReference prefix_operators !_ter ^ ^ member value_ter ^ ^ ^ ^ ^ 
if(!value){

stderr: 