stdout: StatementExpression expression MethodInvocation qualifier NodeTraversal_ter ^ ^ arguments MemberReference member compiler_ter ^ ^ ^ MemberReference member fnNode_ter ^ ^ ^ ClassCreator type ReferenceType name MakeDeclaredNamesUnique_ter ^ ^ ^ ^ arguments ClassCreator type ReferenceType name InlineRenamer_ter ^ ^ ^ ^ arguments MemberReference member idSupplier_ter ^ ^ ^ Literal value <string>_ter ^ ^ ^ MemberReference member isCallInLoop_ter ^ ^ ^ ^ ^ ^ ^ ^ member traverse_ter ^ ^ ^ ^ ^ 
arg 
arg 
arg 
arg 
NodeTraversal.traverse(compiler, fnNode, new MakeDeclaredNamesUnique(new InlineRenamer(idSupplier, "null", isCallInLoop)));

StatementExpression expression MethodInvocation qualifier NodeTraversal_ter ^ ^ arguments MemberReference member idSupplier_ter ^ ^ ^ MemberReference member fnNode_ter ^ ^ ^ ClassCreator type ReferenceType name MakeDeclaredNamesUnique_ter ^ ^ ^ ^ arguments ClassCreator type ReferenceType name InlineRenamer_ter ^ ^ ^ ^ arguments MemberReference member idSupplier_ter ^ ^ ^ Literal value <string>_ter ^ ^ ^ MemberReference member isCallInLoop_ter ^ ^ ^ ^ ^ ^ ^ ^ member traverse_ter ^ ^ ^ ^ ^ 
arg 
arg 
arg 
arg 
NodeTraversal.traverse(idSupplier, fnNode, new MakeDeclaredNamesUnique(new InlineRenamer(idSupplier, "null", isCallInLoop)));

StatementExpression expression MethodInvocation qualifier NodeTraversal_ter ^ ^ arguments MemberReference member isCallInLoop_ter ^ ^ ^ MemberReference member fnNode_ter ^ ^ ^ ClassCreator type ReferenceType name MakeDeclaredNamesUnique_ter ^ ^ ^ ^ arguments ClassCreator type ReferenceType name InlineRenamer_ter ^ ^ ^ ^ arguments MemberReference member idSupplier_ter ^ ^ ^ Literal value <string>_ter ^ ^ ^ MemberReference member isCallInLoop_ter ^ ^ ^ ^ ^ ^ ^ ^ member traverse_ter ^ ^ ^ ^ ^ 
arg 
arg 
arg 
arg 
NodeTraversal.traverse(isCallInLoop, fnNode, new MakeDeclaredNamesUnique(new InlineRenamer(idSupplier, "null", isCallInLoop)));

StatementExpression expression MethodInvocation qualifier NodeTraversal_ter ^ ^ arguments MemberReference member fnNode_ter ^ ^ ^ MemberReference member fnNode_ter ^ ^ ^ ClassCreator type ReferenceType name MakeDeclaredNamesUnique_ter ^ ^ ^ ^ arguments ClassCreator type ReferenceType name InlineRenamer_ter ^ ^ ^ ^ arguments MemberReference member idSupplier_ter ^ ^ ^ Literal value <string>_ter ^ ^ ^ MemberReference member isCallInLoop_ter ^ ^ ^ ^ ^ ^ ^ ^ member traverse_ter ^ ^ ^ ^ ^ 
arg 
arg 
arg 
arg 
NodeTraversal.traverse(fnNode, fnNode, new MakeDeclaredNamesUnique(new InlineRenamer(idSupplier, "null", isCallInLoop)));

StatementExpression expression MethodInvocation qualifier NodeTraversal_ter ^ ^ arguments MemberReference qualifier compiler_ter ^ ^ member compiler_ter ^ ^ ^ MemberReference member fnNode_ter ^ ^ ^ ClassCreator type ReferenceType name MakeDeclaredNamesUnique_ter ^ ^ ^ ^ arguments ClassCreator type ReferenceType name InlineRenamer_ter ^ ^ ^ ^ arguments MemberReference member idSupplier_ter ^ ^ ^ Literal value <string>_ter ^ ^ ^ MemberReference member isCallInLoop_ter ^ ^ ^ ^ ^ ^ ^ ^ member traverse_ter ^ ^ ^ ^ ^ 
arg 
arg 
arg 
arg 
NodeTraversal.traverse(compiler.compiler, fnNode, new MakeDeclaredNamesUnique(new InlineRenamer(idSupplier, "null", isCallInLoop)));

StatementExpression expression MethodInvocation qualifier NodeTraversal_ter ^ ^ arguments MemberReference member par2 ^ ^ ^ MemberReference member fnNode_ter ^ ^ ^ ClassCreator type ReferenceType name MakeDeclaredNamesUnique_ter ^ ^ ^ ^ arguments ClassCreator type ReferenceType name InlineRenamer_ter ^ ^ ^ ^ arguments MemberReference member idSupplier_ter ^ ^ ^ Literal value <string>_ter ^ ^ ^ MemberReference member isCallInLoop_ter ^ ^ ^ ^ ^ ^ ^ ^ member traverse_ter ^ ^ ^ ^ ^ 
arg 
arg 
arg 
arg 
NodeTraversal.traverse(, fnNode, new MakeDeclaredNamesUnique(new InlineRenamer(idSupplier, "null", isCallInLoop)));


StatementExpression expression MethodInvocation qualifier NodeTraversal_ter ^ ^ arguments MemberReference member compiler_ter ^ ^ ^ ClassCreator type ReferenceType name MakeDeclaredNamesUnique_ter ^ ^ ^ ^ arguments ClassCreator type ReferenceType name InlineRenamer_ter ^ ^ ^ ^ arguments MemberReference member idSupplier_ter ^ ^ ^ Literal value <string>_ter ^ ^ ^ MemberReference member isCallInLoop_ter ^ ^ ^ ^ ^ ^ ^ ^ member traverse_ter ^ ^ ^ ^ ^ 
arg 
arg 
arg 
arg 
NodeTraversal.traverse(compiler, new MakeDeclaredNamesUnique(new InlineRenamer(idSupplier, "null", isCallInLoop)));

StatementExpression expression MethodInvocation qualifier NodeTraversal_ter ^ ^ arguments MemberReference member compiler_ter ^ ^ ^ ClassCreator type ReferenceType name InlineRenamer_ter ^ ^ ^ ^ arguments MemberReference member idSupplier_ter ^ ^ ^ Literal value <string>_ter ^ ^ ^ MemberReference member isCallInLoop_ter ^ ^ ^ ^ ^ ^ member traverse_ter ^ ^ ^ ^ ^ 
arg 
arg 
NodeTraversal.traverse(compiler, new InlineRenamer(idSupplier, "null", isCallInLoop));

StatementExpression expression MethodInvocation qualifier NodeTraversal_ter ^ ^ arguments MemberReference member compiler_ter ^ ^ ^ MemberReference member idSupplier_ter ^ ^ ^ ClassCreator type ReferenceType name MakeDeclaredNamesUnique_ter ^ ^ ^ ^ arguments ClassCreator type ReferenceType name InlineRenamer_ter ^ ^ ^ ^ arguments MemberReference member idSupplier_ter ^ ^ ^ Literal value <string>_ter ^ ^ ^ MemberReference member isCallInLoop_ter ^ ^ ^ ^ ^ ^ ^ ^ member traverse_ter ^ ^ ^ ^ ^ 
arg 
arg 
arg 
arg 
NodeTraversal.traverse(compiler, idSupplier, new MakeDeclaredNamesUnique(new InlineRenamer(idSupplier, "null", isCallInLoop)));

StatementExpression expression MethodInvocation arguments MemberReference member compiler_ter ^ ^ ^ MemberReference member fnNode_ter ^ ^ ^ ClassCreator type ReferenceType name MakeDeclaredNamesUnique_ter ^ ^ ^ ^ arguments ClassCreator type ReferenceType name InlineRenamer_ter ^ ^ ^ ^ arguments MemberReference member idSupplier_ter ^ ^ ^ Literal value <string>_ter ^ ^ ^ MemberReference member isCallInLoop_ter ^ ^ ^ ^ ^ ^ ^ ^ member traverse_ter ^ ^ ^ ^ ^ 
arg 
arg 
arg 
arg 
traverse(compiler, fnNode, new MakeDeclaredNamesUnique(new InlineRenamer(idSupplier, "null", isCallInLoop)));

StatementExpression expression MethodInvocation qualifier NodeTraversal_ter ^ ^ arguments MemberReference member loc1 ^ ^ ^ MemberReference member fnNode_ter ^ ^ ^ ClassCreator type ReferenceType name MakeDeclaredNamesUnique_ter ^ ^ ^ ^ arguments ClassCreator type ReferenceType name InlineRenamer_ter ^ ^ ^ ^ arguments MemberReference member idSupplier_ter ^ ^ ^ Literal value <string>_ter ^ ^ ^ MemberReference member isCallInLoop_ter ^ ^ ^ ^ ^ ^ ^ ^ member traverse_ter ^ ^ ^ ^ ^ 
arg 
arg 
arg 
arg 
NodeTraversal.traverse(, fnNode, new MakeDeclaredNamesUnique(new InlineRenamer(idSupplier, "null", isCallInLoop)));


StatementExpression expression MethodInvocation qualifier NodeTraversal_ter ^ ^ arguments MemberReference member compiler_ter ^ ^ ^ MemberReference member fnNode_ter ^ ^ ^ ClassCreator type ReferenceType name MakeDeclaredNamesUnique_ter ^ ^ ^ ^ arguments ClassCreator type ReferenceType name InlineRenamer_ter ^ ^ ^ ^ arguments MemberReference member idSupplier_ter ^ ^ ^ Literal value <string>_ter ^ ^ ^ MemberReference member idSupplier_ter ^ ^ ^ ^ ^ ^ ^ ^ member traverse_ter ^ ^ ^ ^ ^ 
arg 
arg 
arg 
arg 
NodeTraversal.traverse(compiler, fnNode, new MakeDeclaredNamesUnique(new InlineRenamer(idSupplier, "null", idSupplier)));

StatementExpression expression MethodInvocation qualifier NodeTraversal_ter ^ ^ arguments MemberReference member compiler_ter ^ ^ ^ MemberReference member isCallInLoop_ter ^ ^ ^ ClassCreator type ReferenceType name MakeDeclaredNamesUnique_ter ^ ^ ^ ^ arguments ClassCreator type ReferenceType name InlineRenamer_ter ^ ^ ^ ^ arguments MemberReference member idSupplier_ter ^ ^ ^ Literal value <string>_ter ^ ^ ^ MemberReference member isCallInLoop_ter ^ ^ ^ ^ ^ ^ ^ ^ member traverse_ter ^ ^ ^ ^ ^ 
arg 
arg 
arg 
arg 
NodeTraversal.traverse(compiler, isCallInLoop, new MakeDeclaredNamesUnique(new InlineRenamer(idSupplier, "null", isCallInLoop)));

StatementExpression expression MethodInvocation qualifier NodeTraversal_ter ^ ^ arguments MemberReference member compiler_ter ^ ^ ^ MemberReference member fnNode_ter ^ ^ ^ ClassCreator type ReferenceType name InlineRenamer_ter ^ ^ ^ ^ arguments MemberReference member idSupplier_ter ^ ^ ^ Literal value <string>_ter ^ ^ ^ MemberReference member isCallInLoop_ter ^ ^ ^ ^ ^ ^ member traverse_ter ^ ^ ^ ^ ^ 
arg 
arg 
NodeTraversal.traverse(compiler, fnNode, new InlineRenamer(idSupplier, "null", isCallInLoop));

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member idSupplier_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((idSupplier != null)){

StatementExpression expression MethodInvocation qualifier NodeTraversal_ter ^ ^ arguments MemberReference member compiler_ter ^ ^ ^ MemberReference member fnNode_ter ^ ^ ^ MemberReference member isCallInLoop_ter ^ ^ ^ ^ member traverse_ter ^ ^ ^ ^ ^ 
NodeTraversal.traverse(compiler, fnNode, isCallInLoop);

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member idSupplier_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((idSupplier == null)){

StatementExpression expression MethodInvocation qualifier NodeTraversal_ter ^ ^ arguments MemberReference member compiler_ter ^ ^ ^ ClassCreator type ReferenceType name MakeDeclaredNamesUnique_ter ^ ^ ^ ^ arguments ClassCreator type ReferenceType name InlineRenamer_ter ^ ^ ^ ^ arguments MemberReference member idSupplier_ter ^ ^ ^ Literal value <string>_ter ^ ^ ^ MemberReference member isCallInLoop_ter ^ ^ ^ ^ ^ ^ ^ Literal value <string>_ter ^ ^ ^ ^ member traverse_ter ^ ^ ^ ^ ^ 
arg 
arg 
arg 
arg 
NodeTraversal.traverse(compiler, new MakeDeclaredNamesUnique(new InlineRenamer(idSupplier, "null", isCallInLoop)), "null");

StatementExpression expression MethodInvocation qualifier NodeTraversal_ter ^ ^ arguments MemberReference member compiler_ter ^ ^ ^ MemberReference member fnNode_ter ^ ^ ^ ClassCreator type ReferenceType name MakeDeclaredNamesUnique_ter ^ ^ ^ ^ arguments ClassCreator type ReferenceType name InlineRenamer_ter ^ ^ ^ ^ arguments MemberReference member isCallInLoop_ter ^ ^ ^ Literal value <string>_ter ^ ^ ^ MemberReference member isCallInLoop_ter ^ ^ ^ ^ ^ ^ ^ ^ member traverse_ter ^ ^ ^ ^ ^ 
arg 
arg 
arg 
arg 
NodeTraversal.traverse(compiler, fnNode, new MakeDeclaredNamesUnique(new InlineRenamer(isCallInLoop, "null", isCallInLoop)));

StatementExpression expression MethodInvocation qualifier NodeTraversal_ter ^ ^ arguments MemberReference member compiler_ter ^ ^ ^ MemberReference member fnNode_ter ^ ^ ^ ClassCreator type ReferenceType name MakeDeclaredNamesUnique_ter ^ ^ ^ ^ arguments MemberReference member isCallInLoop_ter ^ ^ ^ ^ ^ ^ member traverse_ter ^ ^ ^ ^ ^ 
arg 
arg 
NodeTraversal.traverse(compiler, fnNode, new MakeDeclaredNamesUnique(isCallInLoop));

StatementExpression expression MethodInvocation qualifier NodeTraversal_ter ^ ^ arguments ClassCreator type ReferenceType name InlineRenamer_ter ^ ^ ^ ^ arguments MemberReference member idSupplier_ter ^ ^ ^ Literal value <string>_ter ^ ^ ^ MemberReference member isCallInLoop_ter ^ ^ ^ ^ ^ ^ member traverse_ter ^ ^ ^ ^ ^ 
arg 
arg 
NodeTraversal.traverse(new InlineRenamer(idSupplier, "null", isCallInLoop));

StatementExpression expression MethodInvocation qualifier NodeTraversal_ter ^ ^ arguments MemberReference member compiler_ter ^ ^ ^ ClassCreator type ReferenceType name InlineRenamer_ter ^ ^ ^ ^ arguments MemberReference member idSupplier_ter ^ ^ ^ Literal value <string>_ter ^ ^ ^ MemberReference member isCallInLoop_ter ^ ^ ^ ^ ^ Literal value <string>_ter ^ ^ ^ ^ member traverse_ter ^ ^ ^ ^ ^ 
arg 
arg 
NodeTraversal.traverse(compiler, new InlineRenamer(idSupplier, "null", isCallInLoop), "null");

StatementExpression expression MethodInvocation qualifier NodeTraversal_ter ^ ^ arguments MemberReference member compiler_ter ^ ^ ^ MemberReference member fnNode_ter ^ ^ ^ ClassCreator type ReferenceType name MakeDeclaredNamesUnique_ter ^ ^ ^ ^ arguments ClassCreator type ReferenceType name InlineRenamer_ter ^ ^ ^ ^ arguments MemberReference member idSupplier_ter ^ ^ ^ Literal value <string>_ter ^ ^ ^ MemberReference member isCallInLoop_ter ^ ^ ^ ^ ^ ^ ^ ^ member debug_ter ^ ^ ^ ^ ^ 
arg 
arg 
arg 
arg 
NodeTraversal.debug(compiler, fnNode, new MakeDeclaredNamesUnique(new InlineRenamer(idSupplier, "null", isCallInLoop)));

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member compiler_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((compiler != null)){

StatementExpression expression MethodInvocation qualifier NodeTraversal_ter ^ ^ arguments MemberReference member compiler_ter ^ ^ ^ MemberReference member fnNode_ter ^ ^ ^ ClassCreator type ReferenceType name MakeDeclaredNamesUnique_ter ^ ^ ^ ^ arguments ClassCreator type ReferenceType name InlineRenamer_ter ^ ^ ^ ^ arguments MemberReference member idSupplier_ter ^ ^ ^ Literal value false_ter ^ ^ ^ MemberReference member isCallInLoop_ter ^ ^ ^ ^ ^ ^ ^ ^ member traverse_ter ^ ^ ^ ^ ^ 
arg 
arg 
arg 
arg 
NodeTraversal.traverse(compiler, fnNode, new MakeDeclaredNamesUnique(new InlineRenamer(idSupplier, false, isCallInLoop)));

StatementExpression expression MethodInvocation qualifier NodeTraversal_ter ^ ^ arguments MemberReference member compiler_ter ^ ^ ^ MemberReference member fnNode_ter ^ ^ ^ ^ member traverse_ter ^ ^ ^ ^ ^ 
NodeTraversal.traverse(compiler, fnNode);

StatementExpression expression MethodInvocation qualifier NodeTraversal_ter ^ ^ arguments MemberReference member compiler_ter ^ ^ ^ MemberReference member compiler_ter ^ ^ ^ ClassCreator type ReferenceType name InlineRenamer_ter ^ ^ ^ ^ arguments MemberReference member idSupplier_ter ^ ^ ^ Literal value <string>_ter ^ ^ ^ MemberReference member isCallInLoop_ter ^ ^ ^ ^ ^ ^ member traverse_ter ^ ^ ^ ^ ^ 
arg 
arg 
NodeTraversal.traverse(compiler, compiler, new InlineRenamer(idSupplier, "null", isCallInLoop));

StatementExpression expression MethodInvocation qualifier NodeTraversal_ter ^ ^ arguments MemberReference member compiler_ter ^ ^ ^ ClassCreator type ReferenceType name MakeDeclaredNamesUnique_ter ^ ^ ^ ^ arguments ClassCreator type ReferenceType name InlineRenamer_ter ^ ^ ^ ^ arguments MemberReference member idSupplier_ter ^ ^ ^ Literal value <string>_ter ^ ^ ^ MemberReference member isCallInLoop_ter ^ ^ ^ ^ ^ ^ ^ MemberReference member fnNode_ter ^ ^ ^ ^ member traverse_ter ^ ^ ^ ^ ^ 
arg 
arg 
arg 
arg 
NodeTraversal.traverse(compiler, new MakeDeclaredNamesUnique(new InlineRenamer(idSupplier, "null", isCallInLoop)), fnNode);

StatementExpression expression MethodInvocation qualifier NodeTraversal_ter ^ ^ arguments MemberReference member par3 ^ ^ ^ MemberReference member fnNode_ter ^ ^ ^ ClassCreator type ReferenceType name MakeDeclaredNamesUnique_ter ^ ^ ^ ^ arguments ClassCreator type ReferenceType name InlineRenamer_ter ^ ^ ^ ^ arguments MemberReference member idSupplier_ter ^ ^ ^ Literal value <string>_ter ^ ^ ^ MemberReference member isCallInLoop_ter ^ ^ ^ ^ ^ ^ ^ ^ member traverse_ter ^ ^ ^ ^ ^ 
arg 
arg 
arg 
arg 
NodeTraversal.traverse(, fnNode, new MakeDeclaredNamesUnique(new InlineRenamer(idSupplier, "null", isCallInLoop)));


StatementExpression expression MethodInvocation qualifier NodeTraversal_ter ^ ^ arguments MemberReference member compiler_ter ^ ^ ^ MemberReference member fnNode_ter ^ ^ ^ ClassCreator type ReferenceType name MakeDeclaredNamesUnique_ter ^ ^ ^ ^ arguments ClassCreator type ReferenceType name InlineRenamer_ter ^ ^ ^ ^ arguments MemberReference member idSupplier_ter ^ ^ ^ Literal value true_ter ^ ^ ^ MemberReference member isCallInLoop_ter ^ ^ ^ ^ ^ ^ ^ ^ member traverse_ter ^ ^ ^ ^ ^ 
arg 
arg 
arg 
arg 
NodeTraversal.traverse(compiler, fnNode, new MakeDeclaredNamesUnique(new InlineRenamer(idSupplier, true, isCallInLoop)));

StatementExpression expression MethodInvocation qualifier NodeTraversal_ter ^ ^ arguments MemberReference member fnNode_ter ^ ^ ^ ClassCreator type ReferenceType name MakeDeclaredNamesUnique_ter ^ ^ ^ ^ arguments ClassCreator type ReferenceType name InlineRenamer_ter ^ ^ ^ ^ arguments MemberReference member idSupplier_ter ^ ^ ^ Literal value <string>_ter ^ ^ ^ MemberReference member isCallInLoop_ter ^ ^ ^ ^ ^ ^ ^ ^ member traverse_ter ^ ^ ^ ^ ^ 
arg 
arg 
arg 
arg 
NodeTraversal.traverse(fnNode, new MakeDeclaredNamesUnique(new InlineRenamer(idSupplier, "null", isCallInLoop)));

StatementExpression expression MethodInvocation qualifier NodeTraversal_ter ^ ^ arguments MemberReference member idSupplier_ter ^ ^ ^ Literal value <string>_ter ^ ^ ^ MemberReference member isCallInLoop_ter ^ ^ ^ ^ member traverse_ter ^ ^ ^ ^ ^ 
NodeTraversal.traverse(idSupplier, "null", isCallInLoop);

StatementExpression expression MethodInvocation qualifier NodeTraversal_ter ^ ^ arguments MemberReference member compiler_ter ^ ^ ^ MemberReference member compiler_ter ^ ^ ^ MemberReference member fnNode_ter ^ ^ ^ ^ member traverse_ter ^ ^ ^ ^ ^ 
NodeTraversal.traverse(compiler, compiler, fnNode);

StatementExpression expression MethodInvocation qualifier NodeTraversal_ter ^ ^ arguments MemberReference member compiler_ter ^ ^ ^ MemberReference member compiler_ter ^ ^ ^ ClassCreator type ReferenceType name MakeDeclaredNamesUnique_ter ^ ^ ^ ^ arguments ClassCreator type ReferenceType name InlineRenamer_ter ^ ^ ^ ^ arguments MemberReference member idSupplier_ter ^ ^ ^ Literal value <string>_ter ^ ^ ^ MemberReference member isCallInLoop_ter ^ ^ ^ ^ ^ ^ ^ ^ member traverse_ter ^ ^ ^ ^ ^ 
arg 
arg 
arg 
arg 
NodeTraversal.traverse(compiler, compiler, new MakeDeclaredNamesUnique(new InlineRenamer(idSupplier, "null", isCallInLoop)));

StatementExpression expression MethodInvocation qualifier NodeTraversal_ter ^ ^ arguments MemberReference member compiler_ter ^ ^ ^ ClassCreator type ReferenceType name MakeDeclaredNamesUnique_ter ^ ^ ^ ^ arguments MemberReference member fnNode_ter ^ ^ ^ MemberReference member isCallInLoop_ter ^ ^ ^ ^ ^ ^ member traverse_ter ^ ^ ^ ^ ^ 
arg 
arg 
NodeTraversal.traverse(compiler, new MakeDeclaredNamesUnique(fnNode, isCallInLoop));

StatementExpression expression MethodInvocation qualifier NodeTraversal_ter ^ ^ arguments MemberReference member compiler_ter ^ ^ ^ MemberReference member fnNode_ter ^ ^ ^ MemberReference member loc1 ^ ^ ^ ^ member traverse_ter ^ ^ ^ ^ ^ 
NodeTraversal.traverse(compiler, fnNode, );


StatementExpression expression MethodInvocation qualifier NodeTraversal_ter ^ ^ arguments MemberReference member compiler_ter ^ ^ ^ MemberReference member fnNode_ter ^ ^ ^ MemberReference member par2 ^ ^ ^ ^ member traverse_ter ^ ^ ^ ^ ^ 
NodeTraversal.traverse(compiler, fnNode, );


IfStatement condition MemberReference member idSupplier_ter ^ ^ ^ ^ ^ 
if(idSupplier){

StatementExpression expression MethodInvocation qualifier NodeTraversal_ter ^ ^ arguments MemberReference member compiler_ter ^ ^ ^ ^ member traverse_ter ^ ^ ^ ^ ^ 
NodeTraversal.traverse(compiler);

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member fnNode_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((fnNode != null)){

StatementExpression expression MethodInvocation qualifier NodeTraversal_ter ^ ^ arguments MemberReference member compiler_ter ^ ^ ^ MemberReference member fnNode_ter ^ ^ ^ MemberReference member compiler_ter ^ ^ ^ ^ member traverse_ter ^ ^ ^ ^ ^ 
NodeTraversal.traverse(compiler, fnNode, compiler);

StatementExpression expression MethodInvocation qualifier NodeTraversal_ter ^ ^ arguments MemberReference member compiler_ter ^ ^ ^ MemberReference member fnNode_ter ^ ^ ^ ClassCreator type ReferenceType name MakeDeclaredNamesUnique_ter ^ ^ ^ ^ arguments ClassCreator type ReferenceType name InlineRenamer_ter ^ ^ ^ ^ arguments MemberReference member idSupplier_ter ^ ^ ^ Literal value <string>_ter ^ ^ ^ MemberReference member fnNode_ter ^ ^ ^ ^ ^ ^ ^ ^ member traverse_ter ^ ^ ^ ^ ^ 
arg 
arg 
arg 
arg 
NodeTraversal.traverse(compiler, fnNode, new MakeDeclaredNamesUnique(new InlineRenamer(idSupplier, "null", fnNode)));

StatementExpression expression MethodInvocation qualifier NodeTraversal_ter ^ ^ arguments MemberReference member compiler_ter ^ ^ ^ ClassCreator type ReferenceType name InlineRenamer_ter ^ ^ ^ ^ arguments MemberReference member idSupplier_ter ^ ^ ^ Literal value <string>_ter ^ ^ ^ MemberReference member isCallInLoop_ter ^ ^ ^ ^ ^ MemberReference member fnNode_ter ^ ^ ^ ^ member traverse_ter ^ ^ ^ ^ ^ 
arg 
arg 
NodeTraversal.traverse(compiler, new InlineRenamer(idSupplier, "null", isCallInLoop), fnNode);

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member isCallInLoop_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((isCallInLoop != null)){

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member li_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((li != null)){

IfStatement condition MemberReference qualifier li_ter ^ ^ member referenced_ter ^ ^ ^ ^ ^ 
if(li.referenced){

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member li_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if((li == null)){
return;
}
IfStatement condition MemberReference prefix_operators !_ter ^ ^ qualifier li_ter ^ ^ member referenced_ter ^ ^ ^ ^ ^ 
if(!li.referenced){

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference qualifier li_ter ^ ^ member referenced_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((li.referenced != null)){

condition MemberReference qualifier li_ter ^ ^ member referenced_ter ^ ^ ^ ^ 
if(li.referenced){
IfStatement condition MemberReference member referenced_ter ^ ^ ^ ^ ^ 
if(referenced){

condition MemberReference member referenced_ter ^ ^ ^ ^ 
if(referenced){
IfStatement condition MethodInvocation qualifier li_ter ^ ^ member referenced_ter ^ ^ ^ ^ ^ 
if(li.referenced()){

ReturnStatement_ter ^ 
if (true) { return;
 }

condition MemberReference member li_ter ^ ^ ^ ^ 
if(li){
IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member li_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((li == null)){

condition MemberReference member name_ter ^ ^ ^ ^ 
if(name){
IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member li_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if((li != null)){
return;
}
IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference qualifier li_ter ^ ^ member referenced_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if((li.referenced == null)){
return;
}
IfStatement condition MemberReference prefix_operators !_ter ^ ^ member referenced_ter ^ ^ ^ ^ ^ 
if(!referenced){

condition MemberReference prefix_operators !_ter ^ ^ qualifier li_ter ^ ^ member referenced_ter ^ ^ ^ ^ 
if(!li.referenced){
StatementExpression expression MethodInvocation qualifier compiler_ter ^ ^ member reportCodeChange_ter ^ ^ ^ ^ ^ 
compiler.reportCodeChange();

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier li_ter ^ ^ member referenced_ter ^ ^ ^ ^ ^ 
if(!li.referenced()){

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member referenced_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((referenced != null)){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference qualifier li_ter ^ ^ member referenced_ter ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference qualifier li_ter ^ ^ member referenced_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((li.referenced && (li.referenced != null))){

stderr: 