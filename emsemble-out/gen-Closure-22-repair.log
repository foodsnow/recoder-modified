stdout: IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ ^ 
if(parent.getType()){

condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member COMMA_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() == Token.COMMA)){
condition BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member COMMA_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() != Token.COMMA)){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getChildCount_ter ^ ^ ^ ^ operandr Literal value 2_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isName_ter ^ ^ ^ ^ member getNext_ter ^ ^ ^ ^ ^ ^ ^ 
if((((n == parent.getFirstChild()) && (parent.getChildCount() == 2)) && n.getNext().isName())){

condition BinaryOperation operator >=_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member COMMA_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() >= Token.COMMA)){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getChildCount_ter ^ ^ ^ ^ operandr Literal value 2_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((n == parent.getFirstChild()) && (parent.getChildCount() == 2))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member FOR_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getChildCount_ter ^ ^ ^ ^ operandr Literal value 4_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((parent.getType() == Token.FOR) && (parent.getChildCount() == 4))){

condition BinaryOperation operator >_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member COMMA_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() > Token.COMMA)){
condition BinaryOperation operator <_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member COMMA_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() < Token.COMMA)){
IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ selectors MethodInvocation member getNext_ter ^ ^ ^ MethodInvocation member getNext_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((n == parent.getFirstChild()) || (n == parent.getFirstChild().getNext().getNext()))){

condition BinaryOperation operator <=_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member COMMA_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() <= Token.COMMA)){
IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getChildCount_ter ^ ^ ^ ^ operandr Literal value 2_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.getChildCount() == 2)){

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent == gramps.getFirstChild())){

condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member ERROR_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() == Token.ERROR)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member RETURN_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() == Token.RETURN)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BITOR_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() == Token.BITOR)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BITXOR_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() == Token.BITXOR)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BITAND_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() == Token.BITAND)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EQ_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() == Token.EQ)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member NE_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() == Token.NE)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member LT_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() == Token.LT)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member LE_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() == Token.LE)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member GT_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() == Token.GT)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member GE_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() == Token.GE)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member LSH_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() == Token.LSH)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member RSH_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() == Token.RSH)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member URSH_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() == Token.URSH)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member ADD_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() == Token.ADD)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member SUB_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() == Token.SUB)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member MUL_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() == Token.MUL)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member DIV_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() == Token.DIV)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member MOD_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() == Token.MOD)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member NOT_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() == Token.NOT)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BITNOT_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() == Token.BITNOT)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member POS_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() == Token.POS)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member NEG_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() == Token.NEG)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member NEW_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() == Token.NEW)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member DELPROP_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() == Token.DELPROP)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member TYPEOF_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() == Token.TYPEOF)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member GETPROP_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() == Token.GETPROP)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member GETELEM_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() == Token.GETELEM)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member CALL_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() == Token.CALL)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member NAME_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() == Token.NAME)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member NUMBER_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() == Token.NUMBER)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member STRING_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() == Token.STRING)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member NULL_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() == Token.NULL)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member THIS_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() == Token.THIS)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member FALSE_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() == Token.FALSE)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member TRUE_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() == Token.TRUE)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member SHEQ_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() == Token.SHEQ)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member SHNE_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() == Token.SHNE)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member REGEXP_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() == Token.REGEXP)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member THROW_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() == Token.THROW)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member IN_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() == Token.IN)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member INSTANCEOF_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() == Token.INSTANCEOF)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member ARRAYLIT_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() == Token.ARRAYLIT)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member OBJECTLIT_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() == Token.OBJECTLIT)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member TRY_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() == Token.TRY)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member PARAM_LIST_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() == Token.PARAM_LIST)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member ASSIGN_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() == Token.ASSIGN)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member ASSIGN_BITOR_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() == Token.ASSIGN_BITOR)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member ASSIGN_BITXOR_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() == Token.ASSIGN_BITXOR)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member ASSIGN_BITAND_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() == Token.ASSIGN_BITAND)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member ASSIGN_LSH_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() == Token.ASSIGN_LSH)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member ASSIGN_RSH_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() == Token.ASSIGN_RSH)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member ASSIGN_URSH_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() == Token.ASSIGN_URSH)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member ASSIGN_ADD_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() == Token.ASSIGN_ADD)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member ASSIGN_SUB_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() == Token.ASSIGN_SUB)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member ASSIGN_MUL_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() == Token.ASSIGN_MUL)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member ASSIGN_DIV_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() == Token.ASSIGN_DIV)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member ASSIGN_MOD_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() == Token.ASSIGN_MOD)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member HOOK_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() == Token.HOOK)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member OR_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() == Token.OR)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member AND_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() == Token.AND)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member INC_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() == Token.INC)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member DEC_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() == Token.DEC)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member FUNCTION_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() == Token.FUNCTION)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member IF_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() == Token.IF)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member SWITCH_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() == Token.SWITCH)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member CASE_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() == Token.CASE)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member DEFAULT_CASE_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() == Token.DEFAULT_CASE)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member WHILE_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() == Token.WHILE)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member DO_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() == Token.DO)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member FOR_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() == Token.FOR)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BREAK_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() == Token.BREAK)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member CONTINUE_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() == Token.CONTINUE)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member VAR_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() == Token.VAR)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member WITH_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() == Token.WITH)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member CATCH_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() == Token.CATCH)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member VOID_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() == Token.VOID)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EMPTY_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() == Token.EMPTY)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() == Token.BLOCK)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member LABEL_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() == Token.LABEL)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() == Token.EXPR_RESULT)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member SCRIPT_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() == Token.SCRIPT)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member GETTER_DEF_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() == Token.GETTER_DEF)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member SETTER_DEF_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() == Token.SETTER_DEF)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member CONST_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() == Token.CONST)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member DEBUGGER_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() == Token.DEBUGGER)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member LABEL_NAME_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() == Token.LABEL_NAME)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member STRING_KEY_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() == Token.STRING_KEY)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member ANNOTATION_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() == Token.ANNOTATION)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member PIPE_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() == Token.PIPE)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member STAR_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() == Token.STAR)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EOC_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() == Token.EOC)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member QMARK_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() == Token.QMARK)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member ELLIPSIS_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() == Token.ELLIPSIS)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BANG_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() == Token.BANG)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EQUALS_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() == Token.EQUALS)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member LB_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() == Token.LB)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member LC_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() == Token.LC)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member COLON_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() == Token.COLON)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member DEFAULT_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() == Token.DEFAULT)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member GET_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() == Token.GET)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member LP_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() == Token.LP)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member SET_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() == Token.SET)){
IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ ^ 
if((ancestorType != Token.EXPR_RESULT)){

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.getType() != Token.EXPR_RESULT)){

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((n == parent.getFirstChild())){

StatementExpression expression MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ ^ 
parent.getType();


condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getString_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member COMMA_ter ^ ^ ^ ^ ^ ^ 
if((parent.getString() == Token.COMMA)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member COMMA_ter ^ ^ ^ ^ ^ ^ 
if((parent.isCall() == Token.COMMA)){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member COMMA_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() && Token.COMMA)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier parent_ter ^ ^ member COMMA_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() == parent.COMMA)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member COMMA_ter ^ ^ ^ ^ ^ ^ 
if((parent.getFirstChild() == Token.COMMA)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getNext_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member COMMA_ter ^ ^ ^ ^ ^ ^ 
if((parent.getNext() == Token.COMMA)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getChildCount_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member COMMA_ter ^ ^ ^ ^ ^ ^ 
if((parent.getChildCount() == Token.COMMA)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getAncestors_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member COMMA_ter ^ ^ ^ ^ ^ ^ 
if((parent.getAncestors() == Token.COMMA)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member COMMA_ter ^ ^ ^ ^ ^ ^ 
if((parent.isName() == Token.COMMA)){
IfStatement condition MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ ^ 
if(gramps.isCall()){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member COMMA_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((parent.getType() == Token.COMMA) || (parent == gramps.getFirstChild()))){

condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier n_ter ^ ^ member COMMA_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() == n.COMMA)){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member COMMA_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() || Token.COMMA)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() == parent)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference member n_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() == n)){


condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference member COMMA_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() == COMMA)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference member gramps_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() == gramps)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member COMMA_ter ^ ^ ^ ^ ^ ^ 
if((n.getType() == Token.COMMA)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member COMMA_ter ^ ^ ^ ^ ^ ^ 
if((gramps.getType() == Token.COMMA)){
condition BinaryOperation operator +_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member COMMA_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() + Token.COMMA)){
ReturnStatement_ter ^ 
if (true) { return;
 }

condition BinaryOperation operator &_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member COMMA_ter ^ ^ ^ ^ ^ ^ 
if((parent.getType() & Token.COMMA)){
BreakStatement_ter ^ 
break;


ReturnStatement_ter ^ 
return;


ReturnStatement_ter ^ 
if (true) { return;
 }

StatementExpression expression MethodInvocation member protectSideEffects_ter ^ ^ ^ ^ ^ 
protectSideEffects();

StatementExpression expression MethodInvocation member addExtern_ter ^ ^ ^ ^ ^ 
addExtern();

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name gramps_ter ^ ^ initializer MethodInvocation qualifier parent_ter ^ ^ member visit_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node gramps = parent.visit();

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name gramps_ter ^ ^ initializer MethodInvocation qualifier parent_ter ^ ^ member isName_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node gramps = parent.isName();


LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name gramps_ter ^ ^ initializer MethodInvocation qualifier parent_ter ^ ^ member isCall_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node gramps = parent.isCall();

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name gramps_ter ^ ^ initializer MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node gramps = parent.getType();

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name gramps_ter ^ ^ initializer MethodInvocation qualifier parent_ter ^ ^ member getString_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node gramps = parent.getString();

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name gramps_ter ^ ^ initializer MethodInvocation qualifier parent_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node gramps = parent.getFirstChild();

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name gramps_ter ^ ^ initializer MethodInvocation qualifier parent_ter ^ ^ member getAncestors_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node gramps = parent.getAncestors();

BreakStatement_ter ^ 
break;

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name gramps_ter ^ ^ initializer MethodInvocation qualifier parent_ter ^ ^ member getChildCount_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node gramps = parent.getChildCount();

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name gramps_ter ^ ^ initializer MethodInvocation qualifier parent_ter ^ ^ member getNext_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node gramps = parent.getNext();

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name gramps_ter ^ ^ initializer MethodInvocation qualifier gramps_ter ^ ^ member getParent_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node gramps = gramps.getParent();

StatementExpression expression MethodInvocation qualifier parent_ter ^ ^ member protectSideEffects_ter ^ ^ ^ ^ ^ 
parent.protectSideEffects();

StatementExpression expression MethodInvocation qualifier parent_ter ^ ^ member addExtern_ter ^ ^ ^ ^ ^ 
parent.addExtern();

ContinueStatement_ter ^ 
continue;

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name gramps_ter ^ ^ initializer MethodInvocation qualifier n_ter ^ ^ member getParent_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node gramps = n.getParent();

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr Literal selectors MethodInvocation arguments MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member getString_ter ^ ^ ^ ^ member getNext_ter ^ ^ ^ ^ member equals_ter ^ ^ ^ ^ value <string>_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent != "null")){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getChildCount_ter ^ ^ ^ ^ operandr Literal value 2_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isName_ter ^ ^ ^ ^ member getNext_ter ^ ^ ^ ^ ^ ^ ^ 
if((((n == parent.getFirstChild()) && (parent.getChildCount() == 2)) && n.getNext().isName())){

LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name gramps_ter ^ ^ initializer MethodInvocation qualifier parent_ter ^ ^ member getParent_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
final Node gramps = parent.getParent();

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getChildCount_ter ^ ^ ^ ^ operandr Literal value 2_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((n == parent.getFirstChild()) && (parent.getChildCount() == 2))){

StatementExpression expression Assignment expressionl MemberReference member gramps_ter ^ ^ ^ ^ value MethodInvocation qualifier parent_ter ^ ^ member getParent_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
gramps = parent.getParent();

StatementExpression expression MethodInvocation qualifier n_ter ^ ^ member protectSideEffects_ter ^ ^ ^ ^ ^ 
n.protectSideEffects();

StatementExpression expression MethodInvocation qualifier n_ter ^ ^ member addExtern_ter ^ ^ ^ ^ ^ 
n.addExtern();

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name gramps_ter ^ ^ initializer MethodInvocation qualifier parent_ter ^ ^ member getParent_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node gramps = parent.getParent();

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getChildCount_ter ^ ^ ^ ^ operandr Literal value 2_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.getChildCount() == 2)){

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent == gramps.getFirstChild())){

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ ^ 
if((ancestorType != Token.EXPR_RESULT)){

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name gramps_ter ^ ^ initializer MethodInvocation member getParent_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node gramps = getParent();

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name gramps_ter ^ ^ initializer Cast type ReferenceType name Node_ter ^ ^ ^ ^ expression MethodInvocation qualifier parent_ter ^ ^ member getParent_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
arg 
arg 
Node gramps = (Node)parent.getParent();

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr Literal selectors MethodInvocation arguments MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member getString_ter ^ ^ ^ ^ member getNext_ter ^ ^ ^ ^ member equals_ter ^ ^ ^ ^ value <string>_ter ^ ^ ^ ^ ^ ^ ^ 
if((n != "null")){

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr Literal selectors MethodInvocation arguments MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member getString_ter ^ ^ ^ ^ member getNext_ter ^ ^ ^ ^ member equals_ter ^ ^ ^ ^ value <string>_ter ^ ^ ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if((parent == "null")){
return;
}
IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent == gramps.getFirstChild())){

condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && (parent == gramps.getFirstChild()))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getLastChild_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && (parent == gramps.getLastChild()))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getNext_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && (parent == gramps.getNext()))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getLastSibling_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && (parent == gramps.getLastSibling()))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getParent_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && (parent == gramps.getParent()))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member detachFromParent_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && (parent == gramps.detachFromParent()))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member removeFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && (parent == gramps.removeFirstChild()))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member removeChildren_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && (parent == gramps.removeChildren()))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member cloneNode_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && (parent == gramps.cloneNode()))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member cloneTree_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && (parent == gramps.cloneTree()))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.hasChildren() && (parent == gramps.getFirstChild()))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isFromExterns_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isFromExterns() && (parent == gramps.getFirstChild()))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.hasOneChild() && (parent == gramps.getFirstChild()))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.hasMoreThanOneChild() && (parent == gramps.getFirstChild()))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isQualifiedName() && (parent == gramps.getFirstChild()))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isUnscopedQualifiedName() && (parent == gramps.getFirstChild()))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isVarArgs() && (parent == gramps.getFirstChild()))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isOptionalArg() && (parent == gramps.getFirstChild()))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isSyntheticBlock() && (parent == gramps.getFirstChild()))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.wasEmptyNode() && (parent == gramps.getFirstChild()))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isOnlyModifiesThisCall() && (parent == gramps.getFirstChild()))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isNoSideEffectsCall() && (parent == gramps.getFirstChild()))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isLocalResultCall() && (parent == gramps.getFirstChild()))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isQuotedString() && (parent == gramps.getFirstChild()))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isAdd_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isAdd() && (parent == gramps.getFirstChild()))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isAnd_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isAnd() && (parent == gramps.getFirstChild()))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isArrayLit_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isArrayLit() && (parent == gramps.getFirstChild()))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isAssign_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isAssign() && (parent == gramps.getFirstChild()))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isAssignAdd_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isAssignAdd() && (parent == gramps.getFirstChild()))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isBlock_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isBlock() && (parent == gramps.getFirstChild()))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isBreak_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isBreak() && (parent == gramps.getFirstChild()))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCase_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCase() && (parent == gramps.getFirstChild()))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCatch_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCatch() && (parent == gramps.getFirstChild()))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isComma_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isComma() && (parent == gramps.getFirstChild()))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isContinue_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isContinue() && (parent == gramps.getFirstChild()))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isDebugger_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isDebugger() && (parent == gramps.getFirstChild()))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isDec_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isDec() && (parent == gramps.getFirstChild()))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isDefaultCase_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isDefaultCase() && (parent == gramps.getFirstChild()))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isDelProp_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isDelProp() && (parent == gramps.getFirstChild()))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isDo_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isDo() && (parent == gramps.getFirstChild()))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isEmpty() && (parent == gramps.getFirstChild()))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isExprResult_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isExprResult() && (parent == gramps.getFirstChild()))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isFalse_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isFalse() && (parent == gramps.getFirstChild()))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isFor_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isFor() && (parent == gramps.getFirstChild()))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isFunction_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isFunction() && (parent == gramps.getFirstChild()))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isGetterDef_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isGetterDef() && (parent == gramps.getFirstChild()))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isGetElem_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isGetElem() && (parent == gramps.getFirstChild()))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isGetProp() && (parent == gramps.getFirstChild()))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isHook_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isHook() && (parent == gramps.getFirstChild()))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isIf_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isIf() && (parent == gramps.getFirstChild()))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isIn_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isIn() && (parent == gramps.getFirstChild()))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isInc_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isInc() && (parent == gramps.getFirstChild()))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isInstanceOf_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isInstanceOf() && (parent == gramps.getFirstChild()))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isLabel_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isLabel() && (parent == gramps.getFirstChild()))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isLabelName_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isLabelName() && (parent == gramps.getFirstChild()))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isName() && (parent == gramps.getFirstChild()))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isNE_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isNE() && (parent == gramps.getFirstChild()))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isNew_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isNew() && (parent == gramps.getFirstChild()))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isNot_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isNot() && (parent == gramps.getFirstChild()))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isNull_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isNull() && (parent == gramps.getFirstChild()))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isNumber_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isNumber() && (parent == gramps.getFirstChild()))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isObjectLit_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isObjectLit() && (parent == gramps.getFirstChild()))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isOr_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isOr() && (parent == gramps.getFirstChild()))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isParamList_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isParamList() && (parent == gramps.getFirstChild()))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isRegExp_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isRegExp() && (parent == gramps.getFirstChild()))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isReturn() && (parent == gramps.getFirstChild()))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isScript_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isScript() && (parent == gramps.getFirstChild()))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isSetterDef_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isSetterDef() && (parent == gramps.getFirstChild()))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isString_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isString() && (parent == gramps.getFirstChild()))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isStringKey_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isStringKey() && (parent == gramps.getFirstChild()))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isSwitch_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isSwitch() && (parent == gramps.getFirstChild()))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isThis_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isThis() && (parent == gramps.getFirstChild()))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isThrow_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isThrow() && (parent == gramps.getFirstChild()))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isTrue_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isTrue() && (parent == gramps.getFirstChild()))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isTry_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isTry() && (parent == gramps.getFirstChild()))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isTypeOf_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isTypeOf() && (parent == gramps.getFirstChild()))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isVar() && (parent == gramps.getFirstChild()))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isVoid_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isVoid() && (parent == gramps.getFirstChild()))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isWhile_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isWhile() && (parent == gramps.getFirstChild()))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isWith_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isWith() && (parent == gramps.getFirstChild()))){
IfStatement condition MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ ^ 
if(gramps.isCall()){

condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator >=_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && (parent >= gramps.getFirstChild()))){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getChildCount_ter ^ ^ ^ ^ operandr Literal value 2_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isName_ter ^ ^ ^ ^ member getNext_ter ^ ^ ^ ^ ^ ^ ^ 
if((((n == parent.getFirstChild()) && (parent.getChildCount() == 2)) && n.getNext().isName())){

condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && (parent != gramps.getFirstChild()))){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getChildCount_ter ^ ^ ^ ^ operandr Literal value 2_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((n == parent.getFirstChild()) && (parent.getChildCount() == 2))){

condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getName_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && (parent == gramps.getName()))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && (parent <= gramps.getFirstChild()))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator >_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && (parent > gramps.getFirstChild()))){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && (parent == gramps.getFirstChild()))){

condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() || (parent == gramps.getFirstChild()))){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && (parent == gramps.getFirstChild()))){

condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getChildCount_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && (parent == gramps.getChildCount()))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getAncestors_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && (parent == gramps.getAncestors()))){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && gramps.hasChildren())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isFromExterns_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && gramps.isFromExterns())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && gramps.hasOneChild())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && gramps.hasMoreThanOneChild())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && gramps.isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && gramps.isUnscopedQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && gramps.isVarArgs())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && gramps.isOptionalArg())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && gramps.isSyntheticBlock())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && gramps.wasEmptyNode())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && gramps.isOnlyModifiesThisCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && gramps.isNoSideEffectsCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && gramps.isLocalResultCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && gramps.isQuotedString())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isAdd_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && gramps.isAdd())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isAnd_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && gramps.isAnd())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isArrayLit_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && gramps.isArrayLit())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isAssign_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && gramps.isAssign())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isAssignAdd_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && gramps.isAssignAdd())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isBlock_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && gramps.isBlock())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isBreak_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && gramps.isBreak())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && gramps.isCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isCase_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && gramps.isCase())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isCatch_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && gramps.isCatch())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isComma_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && gramps.isComma())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isContinue_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && gramps.isContinue())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isDebugger_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && gramps.isDebugger())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isDec_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && gramps.isDec())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isDefaultCase_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && gramps.isDefaultCase())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isDelProp_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && gramps.isDelProp())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isDo_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && gramps.isDo())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && gramps.isEmpty())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isExprResult_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && gramps.isExprResult())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isFalse_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && gramps.isFalse())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isFor_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && gramps.isFor())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isFunction_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && gramps.isFunction())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isGetterDef_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && gramps.isGetterDef())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isGetElem_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && gramps.isGetElem())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && gramps.isGetProp())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isHook_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && gramps.isHook())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isIf_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && gramps.isIf())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isIn_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && gramps.isIn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isInc_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && gramps.isInc())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isInstanceOf_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && gramps.isInstanceOf())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isLabel_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && gramps.isLabel())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isLabelName_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && gramps.isLabelName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isName_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && gramps.isName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isNE_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && gramps.isNE())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isNew_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && gramps.isNew())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isNot_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && gramps.isNot())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isNull_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && gramps.isNull())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && gramps.isNumber())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isObjectLit_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && gramps.isObjectLit())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isOr_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && gramps.isOr())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isParamList_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && gramps.isParamList())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isRegExp_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && gramps.isRegExp())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && gramps.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isScript_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && gramps.isScript())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isSetterDef_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && gramps.isSetterDef())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && gramps.isString())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isStringKey_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && gramps.isStringKey())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isSwitch_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && gramps.isSwitch())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isThis_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && gramps.isThis())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isThrow_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && gramps.isThrow())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isTrue_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && gramps.isTrue())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isTry_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && gramps.isTry())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isTypeOf_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && gramps.isTypeOf())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isVar_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && gramps.isVar())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isVoid_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && gramps.isVoid())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isWhile_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && gramps.isWhile())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isWith_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && gramps.isWith())){

condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member gramps_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && (gramps == gramps.getFirstChild()))){
IfStatement condition MethodInvocation qualifier gramps_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
if(gramps.hasChildren()){

IfStatement condition MethodInvocation qualifier gramps_ter ^ ^ member isFromExterns_ter ^ ^ ^ ^ ^ 
if(gramps.isFromExterns()){

IfStatement condition MethodInvocation qualifier gramps_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ ^ 
if(gramps.hasOneChild()){

IfStatement condition MethodInvocation qualifier gramps_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ ^ 
if(gramps.hasMoreThanOneChild()){

IfStatement condition MethodInvocation qualifier gramps_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ ^ 
if(gramps.isQualifiedName()){

IfStatement condition MethodInvocation qualifier gramps_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ ^ 
if(gramps.isUnscopedQualifiedName()){

IfStatement condition MethodInvocation qualifier gramps_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ ^ 
if(gramps.isVarArgs()){

IfStatement condition MethodInvocation qualifier gramps_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ ^ 
if(gramps.isOptionalArg()){

IfStatement condition MethodInvocation qualifier gramps_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ ^ 
if(gramps.isSyntheticBlock()){

IfStatement condition MethodInvocation qualifier gramps_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ ^ 
if(gramps.wasEmptyNode()){

IfStatement condition MethodInvocation qualifier gramps_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ ^ 
if(gramps.isOnlyModifiesThisCall()){

IfStatement condition MethodInvocation qualifier gramps_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ ^ 
if(gramps.isNoSideEffectsCall()){

IfStatement condition MethodInvocation qualifier gramps_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ ^ 
if(gramps.isLocalResultCall()){

IfStatement condition MethodInvocation qualifier gramps_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ ^ 
if(gramps.isQuotedString()){

IfStatement condition MethodInvocation qualifier gramps_ter ^ ^ member isAdd_ter ^ ^ ^ ^ ^ 
if(gramps.isAdd()){

IfStatement condition MethodInvocation qualifier gramps_ter ^ ^ member isAnd_ter ^ ^ ^ ^ ^ 
if(gramps.isAnd()){

IfStatement condition MethodInvocation qualifier gramps_ter ^ ^ member isArrayLit_ter ^ ^ ^ ^ ^ 
if(gramps.isArrayLit()){

IfStatement condition MethodInvocation qualifier gramps_ter ^ ^ member isAssign_ter ^ ^ ^ ^ ^ 
if(gramps.isAssign()){

IfStatement condition MethodInvocation qualifier gramps_ter ^ ^ member isAssignAdd_ter ^ ^ ^ ^ ^ 
if(gramps.isAssignAdd()){

IfStatement condition MethodInvocation qualifier gramps_ter ^ ^ member isBlock_ter ^ ^ ^ ^ ^ 
if(gramps.isBlock()){

IfStatement condition MethodInvocation qualifier gramps_ter ^ ^ member isBreak_ter ^ ^ ^ ^ ^ 
if(gramps.isBreak()){

IfStatement condition MethodInvocation qualifier gramps_ter ^ ^ member isCase_ter ^ ^ ^ ^ ^ 
if(gramps.isCase()){

IfStatement condition MethodInvocation qualifier gramps_ter ^ ^ member isCatch_ter ^ ^ ^ ^ ^ 
if(gramps.isCatch()){

IfStatement condition MethodInvocation qualifier gramps_ter ^ ^ member isComma_ter ^ ^ ^ ^ ^ 
if(gramps.isComma()){

IfStatement condition MethodInvocation qualifier gramps_ter ^ ^ member isContinue_ter ^ ^ ^ ^ ^ 
if(gramps.isContinue()){

IfStatement condition MethodInvocation qualifier gramps_ter ^ ^ member isDebugger_ter ^ ^ ^ ^ ^ 
if(gramps.isDebugger()){

IfStatement condition MethodInvocation qualifier gramps_ter ^ ^ member isDec_ter ^ ^ ^ ^ ^ 
if(gramps.isDec()){

IfStatement condition MethodInvocation qualifier gramps_ter ^ ^ member isDefaultCase_ter ^ ^ ^ ^ ^ 
if(gramps.isDefaultCase()){

IfStatement condition MethodInvocation qualifier gramps_ter ^ ^ member isDelProp_ter ^ ^ ^ ^ ^ 
if(gramps.isDelProp()){

IfStatement condition MethodInvocation qualifier gramps_ter ^ ^ member isDo_ter ^ ^ ^ ^ ^ 
if(gramps.isDo()){

IfStatement condition MethodInvocation qualifier gramps_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ ^ 
if(gramps.isEmpty()){

IfStatement condition MethodInvocation qualifier gramps_ter ^ ^ member isExprResult_ter ^ ^ ^ ^ ^ 
if(gramps.isExprResult()){

IfStatement condition MethodInvocation qualifier gramps_ter ^ ^ member isFalse_ter ^ ^ ^ ^ ^ 
if(gramps.isFalse()){

IfStatement condition MethodInvocation qualifier gramps_ter ^ ^ member isFor_ter ^ ^ ^ ^ ^ 
if(gramps.isFor()){

IfStatement condition MethodInvocation qualifier gramps_ter ^ ^ member isFunction_ter ^ ^ ^ ^ ^ 
if(gramps.isFunction()){

IfStatement condition MethodInvocation qualifier gramps_ter ^ ^ member isGetterDef_ter ^ ^ ^ ^ ^ 
if(gramps.isGetterDef()){

IfStatement condition MethodInvocation qualifier gramps_ter ^ ^ member isGetElem_ter ^ ^ ^ ^ ^ 
if(gramps.isGetElem()){

IfStatement condition MethodInvocation qualifier gramps_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ ^ 
if(gramps.isGetProp()){

IfStatement condition MethodInvocation qualifier gramps_ter ^ ^ member isHook_ter ^ ^ ^ ^ ^ 
if(gramps.isHook()){

IfStatement condition MethodInvocation qualifier gramps_ter ^ ^ member isIf_ter ^ ^ ^ ^ ^ 
if(gramps.isIf()){

IfStatement condition MethodInvocation qualifier gramps_ter ^ ^ member isIn_ter ^ ^ ^ ^ ^ 
if(gramps.isIn()){

IfStatement condition MethodInvocation qualifier gramps_ter ^ ^ member isInc_ter ^ ^ ^ ^ ^ 
if(gramps.isInc()){

IfStatement condition MethodInvocation qualifier gramps_ter ^ ^ member isInstanceOf_ter ^ ^ ^ ^ ^ 
if(gramps.isInstanceOf()){

IfStatement condition MethodInvocation qualifier gramps_ter ^ ^ member isLabel_ter ^ ^ ^ ^ ^ 
if(gramps.isLabel()){

IfStatement condition MethodInvocation qualifier gramps_ter ^ ^ member isLabelName_ter ^ ^ ^ ^ ^ 
if(gramps.isLabelName()){

IfStatement condition MethodInvocation qualifier gramps_ter ^ ^ member isName_ter ^ ^ ^ ^ ^ 
if(gramps.isName()){

IfStatement condition MethodInvocation qualifier gramps_ter ^ ^ member isNE_ter ^ ^ ^ ^ ^ 
if(gramps.isNE()){

IfStatement condition MethodInvocation qualifier gramps_ter ^ ^ member isNew_ter ^ ^ ^ ^ ^ 
if(gramps.isNew()){

IfStatement condition MethodInvocation qualifier gramps_ter ^ ^ member isNot_ter ^ ^ ^ ^ ^ 
if(gramps.isNot()){

IfStatement condition MethodInvocation qualifier gramps_ter ^ ^ member isNull_ter ^ ^ ^ ^ ^ 
if(gramps.isNull()){

IfStatement condition MethodInvocation qualifier gramps_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ 
if(gramps.isNumber()){

IfStatement condition MethodInvocation qualifier gramps_ter ^ ^ member isObjectLit_ter ^ ^ ^ ^ ^ 
if(gramps.isObjectLit()){

IfStatement condition MethodInvocation qualifier gramps_ter ^ ^ member isOr_ter ^ ^ ^ ^ ^ 
if(gramps.isOr()){

IfStatement condition MethodInvocation qualifier gramps_ter ^ ^ member isParamList_ter ^ ^ ^ ^ ^ 
if(gramps.isParamList()){

IfStatement condition MethodInvocation qualifier gramps_ter ^ ^ member isRegExp_ter ^ ^ ^ ^ ^ 
if(gramps.isRegExp()){

IfStatement condition MethodInvocation qualifier gramps_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ 
if(gramps.isReturn()){

IfStatement condition MethodInvocation qualifier gramps_ter ^ ^ member isScript_ter ^ ^ ^ ^ ^ 
if(gramps.isScript()){

IfStatement condition MethodInvocation qualifier gramps_ter ^ ^ member isSetterDef_ter ^ ^ ^ ^ ^ 
if(gramps.isSetterDef()){

IfStatement condition MethodInvocation qualifier gramps_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ 
if(gramps.isString()){

IfStatement condition MethodInvocation qualifier gramps_ter ^ ^ member isStringKey_ter ^ ^ ^ ^ ^ 
if(gramps.isStringKey()){

IfStatement condition MethodInvocation qualifier gramps_ter ^ ^ member isSwitch_ter ^ ^ ^ ^ ^ 
if(gramps.isSwitch()){

IfStatement condition MethodInvocation qualifier gramps_ter ^ ^ member isThis_ter ^ ^ ^ ^ ^ 
if(gramps.isThis()){

IfStatement condition MethodInvocation qualifier gramps_ter ^ ^ member isThrow_ter ^ ^ ^ ^ ^ 
if(gramps.isThrow()){

IfStatement condition MethodInvocation qualifier gramps_ter ^ ^ member isTrue_ter ^ ^ ^ ^ ^ 
if(gramps.isTrue()){

IfStatement condition MethodInvocation qualifier gramps_ter ^ ^ member isTry_ter ^ ^ ^ ^ ^ 
if(gramps.isTry()){

IfStatement condition MethodInvocation qualifier gramps_ter ^ ^ member isTypeOf_ter ^ ^ ^ ^ ^ 
if(gramps.isTypeOf()){

IfStatement condition MethodInvocation qualifier gramps_ter ^ ^ member isVar_ter ^ ^ ^ ^ ^ 
if(gramps.isVar()){

IfStatement condition MethodInvocation qualifier gramps_ter ^ ^ member isVoid_ter ^ ^ ^ ^ ^ 
if(gramps.isVoid()){

IfStatement condition MethodInvocation qualifier gramps_ter ^ ^ member isWhile_ter ^ ^ ^ ^ ^ 
if(gramps.isWhile()){

IfStatement condition MethodInvocation qualifier gramps_ter ^ ^ member isWith_ter ^ ^ ^ ^ ^ 
if(gramps.isWith()){

IfStatement condition MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ 
if(gramps.getFirstChild()){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member FOR_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getChildCount_ter ^ ^ ^ ^ operandr Literal value 4_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((parent.getType() == Token.FOR) && (parent.getChildCount() == 4))){

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((n == parent.getFirstChild())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && !gramps.hasChildren())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isFromExterns_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && !gramps.isFromExterns())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && !gramps.hasOneChild())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && !gramps.hasMoreThanOneChild())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && !gramps.isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && !gramps.isUnscopedQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && !gramps.isVarArgs())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && !gramps.isOptionalArg())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && !gramps.isSyntheticBlock())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && !gramps.wasEmptyNode())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && !gramps.isOnlyModifiesThisCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && !gramps.isNoSideEffectsCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && !gramps.isLocalResultCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && !gramps.isQuotedString())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isAdd_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && !gramps.isAdd())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isAnd_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && !gramps.isAnd())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isArrayLit_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && !gramps.isArrayLit())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isAssign_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && !gramps.isAssign())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isAssignAdd_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && !gramps.isAssignAdd())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isBlock_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && !gramps.isBlock())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isBreak_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && !gramps.isBreak())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && !gramps.isCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isCase_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && !gramps.isCase())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isCatch_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && !gramps.isCatch())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isComma_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && !gramps.isComma())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isContinue_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && !gramps.isContinue())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isDebugger_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && !gramps.isDebugger())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isDec_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && !gramps.isDec())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isDefaultCase_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && !gramps.isDefaultCase())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isDelProp_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && !gramps.isDelProp())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isDo_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && !gramps.isDo())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && !gramps.isEmpty())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isExprResult_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && !gramps.isExprResult())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isFalse_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && !gramps.isFalse())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isFor_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && !gramps.isFor())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isFunction_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && !gramps.isFunction())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isGetterDef_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && !gramps.isGetterDef())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isGetElem_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && !gramps.isGetElem())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && !gramps.isGetProp())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isHook_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && !gramps.isHook())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isIf_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && !gramps.isIf())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isIn_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && !gramps.isIn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isInc_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && !gramps.isInc())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isInstanceOf_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && !gramps.isInstanceOf())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isLabel_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && !gramps.isLabel())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isLabelName_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && !gramps.isLabelName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isName_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && !gramps.isName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isNE_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && !gramps.isNE())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isNew_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && !gramps.isNew())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isNot_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && !gramps.isNot())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isNull_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && !gramps.isNull())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && !gramps.isNumber())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isObjectLit_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && !gramps.isObjectLit())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isOr_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && !gramps.isOr())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isParamList_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && !gramps.isParamList())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isRegExp_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && !gramps.isRegExp())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && !gramps.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isScript_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && !gramps.isScript())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isSetterDef_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && !gramps.isSetterDef())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && !gramps.isString())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isStringKey_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && !gramps.isStringKey())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isSwitch_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && !gramps.isSwitch())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isThis_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && !gramps.isThis())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isThrow_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && !gramps.isThrow())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isTrue_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && !gramps.isTrue())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isTry_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && !gramps.isTry())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isTypeOf_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && !gramps.isTypeOf())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isVar_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && !gramps.isVar())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isVoid_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && !gramps.isVoid())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isWhile_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && !gramps.isWhile())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isWith_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (parent == gramps.getFirstChild())) && !gramps.isWith())){

condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && (parent == parent.getFirstChild()))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && (parent < gramps.getFirstChild()))){
IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getChildCount_ter ^ ^ ^ ^ operandr Literal value 2_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.getChildCount() == 2)){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && gramps.hasChildren())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isFromExterns_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && gramps.isFromExterns())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && gramps.hasOneChild())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && gramps.hasMoreThanOneChild())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && gramps.isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && gramps.isUnscopedQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && gramps.isVarArgs())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && gramps.isOptionalArg())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && gramps.isSyntheticBlock())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && gramps.wasEmptyNode())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && gramps.isOnlyModifiesThisCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && gramps.isNoSideEffectsCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && gramps.isLocalResultCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && gramps.isQuotedString())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isAdd_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && gramps.isAdd())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isAnd_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && gramps.isAnd())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isArrayLit_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && gramps.isArrayLit())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isAssign_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && gramps.isAssign())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isAssignAdd_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && gramps.isAssignAdd())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isBlock_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && gramps.isBlock())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isBreak_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && gramps.isBreak())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && gramps.isCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isCase_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && gramps.isCase())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isCatch_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && gramps.isCatch())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isComma_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && gramps.isComma())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isContinue_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && gramps.isContinue())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isDebugger_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && gramps.isDebugger())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isDec_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && gramps.isDec())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isDefaultCase_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && gramps.isDefaultCase())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isDelProp_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && gramps.isDelProp())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isDo_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && gramps.isDo())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && gramps.isEmpty())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isExprResult_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && gramps.isExprResult())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isFalse_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && gramps.isFalse())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isFor_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && gramps.isFor())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isFunction_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && gramps.isFunction())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isGetterDef_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && gramps.isGetterDef())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isGetElem_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && gramps.isGetElem())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && gramps.isGetProp())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isHook_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && gramps.isHook())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isIf_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && gramps.isIf())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isIn_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && gramps.isIn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isInc_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && gramps.isInc())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isInstanceOf_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && gramps.isInstanceOf())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isLabel_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && gramps.isLabel())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isLabelName_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && gramps.isLabelName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isName_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && gramps.isName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isNE_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && gramps.isNE())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isNew_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && gramps.isNew())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isNot_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && gramps.isNot())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isNull_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && gramps.isNull())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && gramps.isNumber())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isObjectLit_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && gramps.isObjectLit())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isOr_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && gramps.isOr())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isParamList_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && gramps.isParamList())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isRegExp_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && gramps.isRegExp())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && gramps.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isScript_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && gramps.isScript())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isSetterDef_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && gramps.isSetterDef())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && gramps.isString())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isStringKey_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && gramps.isStringKey())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isSwitch_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && gramps.isSwitch())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isThis_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && gramps.isThis())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isThrow_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && gramps.isThrow())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isTrue_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && gramps.isTrue())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isTry_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && gramps.isTry())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isTypeOf_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && gramps.isTypeOf())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isVar_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && gramps.isVar())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isVoid_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && gramps.isVoid())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isWhile_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && gramps.isWhile())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isWith_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && gramps.isWith())){

condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && (parent == n.getFirstChild()))){
IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ selectors MethodInvocation member getNext_ter ^ ^ ^ MethodInvocation member getNext_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((n == parent.getFirstChild()) || (n == parent.getFirstChild().getNext().getNext()))){

condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getChildCount_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.getChildCount() && (parent == gramps.getFirstChild()))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getString_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.getString() && (parent == gramps.getFirstChild()))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getLastChild_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.getLastChild() && (parent == gramps.getFirstChild()))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && (n == gramps.getFirstChild()))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getAncestors_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.getAncestors() && (parent == gramps.getFirstChild()))){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.hasChildren() && (parent == gramps.getFirstChild()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isFromExterns_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isFromExterns() && (parent == gramps.getFirstChild()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.hasOneChild() && (parent == gramps.getFirstChild()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.hasMoreThanOneChild() && (parent == gramps.getFirstChild()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isQualifiedName() && (parent == gramps.getFirstChild()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isUnscopedQualifiedName() && (parent == gramps.getFirstChild()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isVarArgs() && (parent == gramps.getFirstChild()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isOptionalArg() && (parent == gramps.getFirstChild()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isSyntheticBlock() && (parent == gramps.getFirstChild()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.wasEmptyNode() && (parent == gramps.getFirstChild()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isOnlyModifiesThisCall() && (parent == gramps.getFirstChild()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isNoSideEffectsCall() && (parent == gramps.getFirstChild()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isLocalResultCall() && (parent == gramps.getFirstChild()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isQuotedString() && (parent == gramps.getFirstChild()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isAdd_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isAdd() && (parent == gramps.getFirstChild()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isAnd_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isAnd() && (parent == gramps.getFirstChild()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isArrayLit_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isArrayLit() && (parent == gramps.getFirstChild()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isAssign_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isAssign() && (parent == gramps.getFirstChild()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isAssignAdd_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isAssignAdd() && (parent == gramps.getFirstChild()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isBlock_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isBlock() && (parent == gramps.getFirstChild()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isBreak_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isBreak() && (parent == gramps.getFirstChild()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCase_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCase() && (parent == gramps.getFirstChild()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCatch_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCatch() && (parent == gramps.getFirstChild()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isComma_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isComma() && (parent == gramps.getFirstChild()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isContinue_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isContinue() && (parent == gramps.getFirstChild()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isDebugger_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isDebugger() && (parent == gramps.getFirstChild()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isDec_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isDec() && (parent == gramps.getFirstChild()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isDefaultCase_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isDefaultCase() && (parent == gramps.getFirstChild()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isDelProp_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isDelProp() && (parent == gramps.getFirstChild()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isDo_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isDo() && (parent == gramps.getFirstChild()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isEmpty() && (parent == gramps.getFirstChild()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isExprResult_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isExprResult() && (parent == gramps.getFirstChild()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isFalse_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isFalse() && (parent == gramps.getFirstChild()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isFor_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isFor() && (parent == gramps.getFirstChild()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isFunction_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isFunction() && (parent == gramps.getFirstChild()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isGetterDef_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isGetterDef() && (parent == gramps.getFirstChild()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isGetElem_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isGetElem() && (parent == gramps.getFirstChild()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isGetProp() && (parent == gramps.getFirstChild()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isHook_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isHook() && (parent == gramps.getFirstChild()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isIf_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isIf() && (parent == gramps.getFirstChild()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isIn_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isIn() && (parent == gramps.getFirstChild()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isInc_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isInc() && (parent == gramps.getFirstChild()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isInstanceOf_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isInstanceOf() && (parent == gramps.getFirstChild()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isLabel_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isLabel() && (parent == gramps.getFirstChild()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isLabelName_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isLabelName() && (parent == gramps.getFirstChild()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isName() && (parent == gramps.getFirstChild()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isNE_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isNE() && (parent == gramps.getFirstChild()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isNew_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isNew() && (parent == gramps.getFirstChild()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isNot_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isNot() && (parent == gramps.getFirstChild()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isNull_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isNull() && (parent == gramps.getFirstChild()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isNumber_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isNumber() && (parent == gramps.getFirstChild()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isObjectLit_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isObjectLit() && (parent == gramps.getFirstChild()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isOr_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isOr() && (parent == gramps.getFirstChild()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isParamList_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isParamList() && (parent == gramps.getFirstChild()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isRegExp_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isRegExp() && (parent == gramps.getFirstChild()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isReturn() && (parent == gramps.getFirstChild()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isScript_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isScript() && (parent == gramps.getFirstChild()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isSetterDef_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isSetterDef() && (parent == gramps.getFirstChild()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isString_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isString() && (parent == gramps.getFirstChild()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isStringKey_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isStringKey() && (parent == gramps.getFirstChild()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isSwitch_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isSwitch() && (parent == gramps.getFirstChild()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isThis_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isThis() && (parent == gramps.getFirstChild()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isThrow_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isThrow() && (parent == gramps.getFirstChild()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isTrue_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isTrue() && (parent == gramps.getFirstChild()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isTry_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isTry() && (parent == gramps.getFirstChild()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isTypeOf_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isTypeOf() && (parent == gramps.getFirstChild()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isVar() && (parent == gramps.getFirstChild()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isVoid_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isVoid() && (parent == gramps.getFirstChild()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isWhile_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isWhile() && (parent == gramps.getFirstChild()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isWith_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isWith() && (parent == gramps.getFirstChild()))){

condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getNext_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.getNext() && (parent == gramps.getFirstChild()))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.getFirstChild() && (parent == gramps.getFirstChild()))){
IfStatement condition MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isName_ter ^ ^ ^ ^ member getNext_ter ^ ^ ^ ^ ^ 
if(n.getNext().isName()){

condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.getType() && (parent == gramps.getFirstChild()))){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((gramps.isCall() && (parent == gramps.getFirstChild())) && (parent == gramps.getFirstChild())) && (parent == gramps.getFirstChild()))){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member getChildCount_ter ^ ^ ^ ^ ^ 
if(parent.getChildCount()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ 
if(parent.getFirstChild()){

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.getType() != Token.EXPR_RESULT)){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getChildCount_ter ^ ^ ^ ^ operandr Literal value 2_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((n == parent.getFirstChild()) && (parent.getChildCount() == 2)) && (parent == gramps.getFirstChild()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((n == parent.getFirstChild()) && (parent == gramps.getFirstChild()))){

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ ^ 
if((ancestorType != Token.EXPR_RESULT)){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && !gramps.hasChildren())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isFromExterns_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && !gramps.isFromExterns())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && !gramps.hasOneChild())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && !gramps.hasMoreThanOneChild())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && !gramps.isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && !gramps.isUnscopedQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && !gramps.isVarArgs())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && !gramps.isOptionalArg())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && !gramps.isSyntheticBlock())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && !gramps.wasEmptyNode())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && !gramps.isOnlyModifiesThisCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && !gramps.isNoSideEffectsCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && !gramps.isLocalResultCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && !gramps.isQuotedString())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isAdd_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && !gramps.isAdd())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isAnd_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && !gramps.isAnd())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isArrayLit_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && !gramps.isArrayLit())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isAssign_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && !gramps.isAssign())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isAssignAdd_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && !gramps.isAssignAdd())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isBlock_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && !gramps.isBlock())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isBreak_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && !gramps.isBreak())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && !gramps.isCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isCase_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && !gramps.isCase())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isCatch_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && !gramps.isCatch())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isComma_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && !gramps.isComma())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isContinue_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && !gramps.isContinue())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isDebugger_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && !gramps.isDebugger())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isDec_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && !gramps.isDec())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isDefaultCase_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && !gramps.isDefaultCase())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isDelProp_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && !gramps.isDelProp())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isDo_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && !gramps.isDo())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && !gramps.isEmpty())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isExprResult_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && !gramps.isExprResult())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isFalse_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && !gramps.isFalse())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isFor_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && !gramps.isFor())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isFunction_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && !gramps.isFunction())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isGetterDef_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && !gramps.isGetterDef())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isGetElem_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && !gramps.isGetElem())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && !gramps.isGetProp())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isHook_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && !gramps.isHook())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isIf_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && !gramps.isIf())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isIn_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && !gramps.isIn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isInc_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && !gramps.isInc())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isInstanceOf_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && !gramps.isInstanceOf())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isLabel_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && !gramps.isLabel())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isLabelName_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && !gramps.isLabelName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isName_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && !gramps.isName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isNE_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && !gramps.isNE())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isNew_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && !gramps.isNew())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isNot_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && !gramps.isNot())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isNull_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && !gramps.isNull())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && !gramps.isNumber())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isObjectLit_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && !gramps.isObjectLit())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isOr_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && !gramps.isOr())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isParamList_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && !gramps.isParamList())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isRegExp_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && !gramps.isRegExp())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && !gramps.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isScript_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && !gramps.isScript())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isSetterDef_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && !gramps.isSetterDef())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && !gramps.isString())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isStringKey_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && !gramps.isStringKey())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isSwitch_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && !gramps.isSwitch())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isThis_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && !gramps.isThis())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isThrow_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && !gramps.isThrow())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isTrue_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && !gramps.isTrue())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isTry_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && !gramps.isTry())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isTypeOf_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && !gramps.isTypeOf())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isVar_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && !gramps.isVar())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isVoid_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && !gramps.isVoid())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isWhile_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && !gramps.isWhile())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isWith_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && !gramps.isWith())){

StatementExpression expression MethodInvocation qualifier gramps_ter ^ ^ member detachChildren_ter ^ ^ ^ ^ ^ 
gramps.detachChildren();

StatementExpression expression MethodInvocation qualifier gramps_ter ^ ^ member setQuotedString_ter ^ ^ ^ ^ ^ 
gramps.setQuotedString();



IfStatement condition MemberReference member parent_ter ^ ^ ^ ^ ^ 
if(parent){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getChildCount_ter ^ ^ ^ ^ operandr Literal value 2_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isName_ter ^ ^ ^ ^ member getNext_ter ^ ^ ^ ^ ^ ^ ^ 
if((((n == parent.getFirstChild()) && (parent.getChildCount() == 2)) && n.getNext().isName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getChildCount_ter ^ ^ ^ ^ operandr Literal value 2_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((n == parent.getFirstChild()) && (parent.getChildCount() == 2))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getChildCount_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isName_ter ^ ^ ^ ^ member getNext_ter ^ ^ ^ ^ ^ ^ operandr Literal selectors MethodInvocation arguments MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member getString_ter ^ ^ ^ ^ member getNext_ter ^ ^ ^ ^ member equals_ter ^ ^ ^ ^ value <string>_ter ^ ^ ^ ^ ^ ^ 
if(((((n == parent.getFirstChild()) && (parent.getChildCount() == 1)) && n.getNext().isName()) && "null")){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getChildCount_ter ^ ^ ^ ^ operandr Literal value 2_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isName_ter ^ ^ ^ ^ member getNext_ter ^ ^ ^ ^ ^ ^ operandr Literal selectors MethodInvocation arguments MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member getString_ter ^ ^ ^ ^ member getNext_ter ^ ^ ^ ^ member equals_ter ^ ^ ^ ^ value <string>_ter ^ ^ ^ ^ ^ ^ 
if(((((n == parent.getFirstChild()) && (parent.getChildCount() == 2)) && n.getNext().isName()) && "null")){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getChildCount_ter ^ ^ ^ ^ operandr Literal value 2_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isName_ter ^ ^ ^ ^ member getNext_ter ^ ^ ^ ^ ^ ^ operandr Literal selectors MethodInvocation arguments MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member getString_ter ^ ^ ^ ^ member getNext_ter ^ ^ ^ ^ member equals_ter ^ ^ ^ ^ value <string>_ter ^ ^ ^ ^ ^ ^ 
if(((((n == parent.getFirstChild()) && (parent.getChildCount() != 2)) && n.getNext().isName()) && "null")){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getChildCount_ter ^ ^ ^ ^ operandr Literal value 2_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isName_ter ^ ^ ^ ^ member getNext_ter ^ ^ ^ ^ ^ ^ operandr Literal selectors MethodInvocation arguments MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member getString_ter ^ ^ ^ ^ member getNext_ter ^ ^ ^ ^ member equals_ter ^ ^ ^ ^ value <string>_ter ^ ^ ^ ^ ^ ^ operandr Literal selectors MethodInvocation arguments MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member getString_ter ^ ^ ^ ^ member getNext_ter ^ ^ ^ ^ member equals_ter ^ ^ ^ ^ value <string>_ter ^ ^ ^ ^ ^ ^ ^ 
if((((((n == parent.getFirstChild()) && (parent.getChildCount() == 2)) && n.getNext().isName()) && "null") && "null")){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getChildCount_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isName_ter ^ ^ ^ ^ member getNext_ter ^ ^ ^ ^ ^ ^ operandr Literal selectors MethodInvocation arguments MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member getString_ter ^ ^ ^ ^ member getNext_ter ^ ^ ^ ^ member equals_ter ^ ^ ^ ^ value <string>_ter ^ ^ ^ ^ ^ ^ 
if(((((n == parent.getFirstChild()) && (parent.getChildCount() == 0)) && n.getNext().isName()) && "null")){
IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((n == parent.getFirstChild())){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getName_ter ^ ^ ^ ^ operandr Literal value 2_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isName_ter ^ ^ ^ ^ member getNext_ter ^ ^ ^ ^ ^ ^ operandr Literal selectors MethodInvocation arguments MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member getString_ter ^ ^ ^ ^ member getNext_ter ^ ^ ^ ^ member equals_ter ^ ^ ^ ^ value <string>_ter ^ ^ ^ ^ ^ ^ 
if(((((n == parent.getFirstChild()) && (parent.getName() == 2)) && n.getNext().isName()) && "null")){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getChildCount_ter ^ ^ ^ ^ operandr Literal value 2_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isName_ter ^ ^ ^ ^ member getNext_ter ^ ^ ^ ^ ^ ^ operandr Literal selectors MethodInvocation arguments MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member getString_ter ^ ^ ^ ^ member getNext_ter ^ ^ ^ ^ member equals_ter ^ ^ ^ ^ value <string>_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isName_ter ^ ^ ^ ^ member getNext_ter ^ ^ ^ ^ ^ ^ ^ 
if((((((n == parent.getFirstChild()) && (parent.getChildCount() == 2)) && n.getNext().isName()) && "null") && n.getNext().isName())){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator >_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getChildCount_ter ^ ^ ^ ^ operandr Literal value 2_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isName_ter ^ ^ ^ ^ member getNext_ter ^ ^ ^ ^ ^ ^ operandr Literal selectors MethodInvocation arguments MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member getString_ter ^ ^ ^ ^ member getNext_ter ^ ^ ^ ^ member equals_ter ^ ^ ^ ^ value <string>_ter ^ ^ ^ ^ ^ ^ 
if(((((n == parent.getFirstChild()) && (parent.getChildCount() > 2)) && n.getNext().isName()) && "null")){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator >=_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getChildCount_ter ^ ^ ^ ^ operandr Literal value 2_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isName_ter ^ ^ ^ ^ member getNext_ter ^ ^ ^ ^ ^ ^ operandr Literal selectors MethodInvocation arguments MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member getString_ter ^ ^ ^ ^ member getNext_ter ^ ^ ^ ^ member equals_ter ^ ^ ^ ^ value <string>_ter ^ ^ ^ ^ ^ ^ 
if(((((n == parent.getFirstChild()) && (parent.getChildCount() >= 2)) && n.getNext().isName()) && "null")){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member getName_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getChildCount_ter ^ ^ ^ ^ operandr Literal value 2_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isName_ter ^ ^ ^ ^ member getNext_ter ^ ^ ^ ^ ^ ^ operandr Literal selectors MethodInvocation arguments MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member getString_ter ^ ^ ^ ^ member getNext_ter ^ ^ ^ ^ member equals_ter ^ ^ ^ ^ value <string>_ter ^ ^ ^ ^ ^ ^ 
if(((((n == parent.getName()) && (parent.getChildCount() == 2)) && n.getNext().isName()) && "null")){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getLastChild_ter ^ ^ ^ ^ operandr Literal value 2_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isName_ter ^ ^ ^ ^ member getNext_ter ^ ^ ^ ^ ^ ^ operandr Literal selectors MethodInvocation arguments MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member getString_ter ^ ^ ^ ^ member getNext_ter ^ ^ ^ ^ member equals_ter ^ ^ ^ ^ value <string>_ter ^ ^ ^ ^ ^ ^ 
if(((((n == parent.getFirstChild()) && (parent.getLastChild() == 2)) && n.getNext().isName()) && "null")){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getChildCount_ter ^ ^ ^ ^ operandr Literal value 2_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isName_ter ^ ^ ^ ^ member getNext_ter ^ ^ ^ ^ ^ ^ operandr Literal selectors MethodInvocation arguments MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member getString_ter ^ ^ ^ ^ member getNext_ter ^ ^ ^ ^ member equals_ter ^ ^ ^ ^ value <string>_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((((n == parent.getFirstChild()) && (parent.getChildCount() == 2)) && n.getNext().isName()) && "null") && (ancestorType != Token.BLOCK))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getChildCount_ter ^ ^ ^ ^ operandr Literal value 2_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isName_ter ^ ^ ^ ^ member getNext_ter ^ ^ ^ ^ ^ ^ operandr Literal selectors MethodInvocation arguments MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member getString_ter ^ ^ ^ ^ member getNext_ter ^ ^ ^ ^ member equals_ter ^ ^ ^ ^ value <string>_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ selectors MethodInvocation member getNext_ter ^ ^ ^ MethodInvocation member getNext_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((((n == parent.getFirstChild()) && (parent.getChildCount() == 2)) && n.getNext().isName()) && "null") && ((n == parent.getFirstChild()) || (n == parent.getFirstChild().getNext().getNext())))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getChildCount_ter ^ ^ ^ ^ operandr Literal value 2_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isName_ter ^ ^ ^ ^ member getNext_ter ^ ^ ^ ^ ^ ^ operandr Literal selectors MethodInvocation arguments MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member getString_ter ^ ^ ^ ^ member getNext_ter ^ ^ ^ ^ member isExpressionResultUsed_ter ^ ^ ^ ^ value <string>_ter ^ ^ ^ ^ ^ ^ 
if(((((n == parent.getFirstChild()) && (parent.getChildCount() == 2)) && n.getNext().isName()) && "null")){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member getLastChild_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getChildCount_ter ^ ^ ^ ^ operandr Literal value 2_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isName_ter ^ ^ ^ ^ member getNext_ter ^ ^ ^ ^ ^ ^ operandr Literal selectors MethodInvocation arguments MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member getString_ter ^ ^ ^ ^ member getNext_ter ^ ^ ^ ^ member equals_ter ^ ^ ^ ^ value <string>_ter ^ ^ ^ ^ ^ ^ 
if(((((n == parent.getLastChild()) && (parent.getChildCount() == 2)) && n.getNext().isName()) && "null")){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getChildCount_ter ^ ^ ^ ^ operandr Literal value 2_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isName_ter ^ ^ ^ ^ member getNext_ter ^ ^ ^ ^ ^ ^ operandr Literal selectors MethodInvocation arguments MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member getString_ter ^ ^ ^ ^ member getNext_ter ^ ^ ^ ^ member equals_ter ^ ^ ^ ^ value <string>_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getChildCount_ter ^ ^ ^ ^ operandr Literal value 2_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((((n == parent.getFirstChild()) && (parent.getChildCount() == 2)) && n.getNext().isName()) && "null") && (parent.getChildCount() == 2))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr Literal value 2_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isName_ter ^ ^ ^ ^ member getNext_ter ^ ^ ^ ^ ^ ^ operandr Literal selectors MethodInvocation arguments MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member getString_ter ^ ^ ^ ^ member getNext_ter ^ ^ ^ ^ member equals_ter ^ ^ ^ ^ value <string>_ter ^ ^ ^ ^ ^ ^ 
if(((((n == parent.getFirstChild()) && (parent.getFirstChild() == 2)) && n.getNext().isName()) && "null")){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getChildCount_ter ^ ^ ^ ^ operandr Literal value 2_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isName_ter ^ ^ ^ ^ member getNext_ter ^ ^ ^ ^ ^ ^ operandr Literal selectors MethodInvocation arguments MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member getString_ter ^ ^ ^ ^ member getNext_ter ^ ^ ^ ^ member equals_ter ^ ^ ^ ^ value <string>_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((((n == parent.getFirstChild()) && (parent.getChildCount() == 2)) && n.getNext().isName()) && "null") && (parent.getType() != Token.BLOCK))){

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getChildCount_ter ^ ^ ^ ^ operandr Literal value 2_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.getChildCount() == 2)){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr Literal value 2_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isName_ter ^ ^ ^ ^ member getNext_ter ^ ^ ^ ^ ^ ^ operandr Literal selectors MethodInvocation arguments MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member getString_ter ^ ^ ^ ^ member getNext_ter ^ ^ ^ ^ member equals_ter ^ ^ ^ ^ value <string>_ter ^ ^ ^ ^ ^ ^ 
if(((((n == parent.getFirstChild()) && (parent.getType() == 2)) && n.getNext().isName()) && "null")){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getAncestors_ter ^ ^ ^ ^ operandr Literal value 2_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isName_ter ^ ^ ^ ^ member getNext_ter ^ ^ ^ ^ ^ ^ operandr Literal selectors MethodInvocation arguments MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member getString_ter ^ ^ ^ ^ member getNext_ter ^ ^ ^ ^ member equals_ter ^ ^ ^ ^ value <string>_ter ^ ^ ^ ^ ^ ^ 
if(((((n == parent.getFirstChild()) && (parent.getAncestors() == 2)) && n.getNext().isName()) && "null")){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member getChildCount_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getChildCount_ter ^ ^ ^ ^ operandr Literal value 2_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isName_ter ^ ^ ^ ^ member getNext_ter ^ ^ ^ ^ ^ ^ operandr Literal selectors MethodInvocation arguments MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member getString_ter ^ ^ ^ ^ member getNext_ter ^ ^ ^ ^ member equals_ter ^ ^ ^ ^ value <string>_ter ^ ^ ^ ^ ^ ^ 
if(((((n == parent.getChildCount()) && (parent.getChildCount() == 2)) && n.getNext().isName()) && "null")){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getChildCount_ter ^ ^ ^ ^ operandr Literal value 2_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isName_ter ^ ^ ^ ^ member getNext_ter ^ ^ ^ ^ ^ ^ operandr Literal selectors MethodInvocation arguments MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member getString_ter ^ ^ ^ ^ member getNext_ter ^ ^ ^ ^ member equals_ter ^ ^ ^ ^ value <string>_ter ^ ^ ^ ^ ^ ^ 
if(((((n == parent.getType()) && (parent.getChildCount() == 2)) && n.getNext().isName()) && "null")){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isName_ter ^ ^ ^ ^ member getNext_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n == parent.getFirstChild()) && n.getNext().isName())){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getChildCount_ter ^ ^ ^ ^ operandr Literal value 2_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isName_ter ^ ^ ^ ^ member getNext_ter ^ ^ ^ ^ ^ ^ operandr Literal selectors MethodInvocation arguments MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member getString_ter ^ ^ ^ ^ member getNext_ter ^ ^ ^ ^ member equals_ter ^ ^ ^ ^ value <string>_ter ^ ^ ^ ^ ^ ^ 
if(((((n == parent.getFirstChild()) && (parent.getChildCount() <= 2)) && n.getNext().isName()) && "null")){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ^ operandl ^ operandr ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ operandr ^ ^ ^ ^ 
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member getAncestors_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getChildCount_ter ^ ^ ^ ^ operandr Literal value 2_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isName_ter ^ ^ ^ ^ member getNext_ter ^ ^ ^ ^ ^ ^ operandr Literal selectors MethodInvocation arguments MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member getString_ter ^ ^ ^ ^ member getNext_ter ^ ^ ^ ^ member equals_ter ^ ^ ^ ^ value <string>_ter ^ ^ ^ ^ ^ ^ 
if(((((n == parent.getAncestors()) && (parent.getChildCount() == 2)) && n.getNext().isName()) && "null")){
IfStatement condition MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isName_ter ^ ^ ^ ^ member getNext_ter ^ ^ ^ ^ ^ 
if(n.getNext().isName()){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getChildCount_ter ^ ^ ^ ^ operandr Literal value 2_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isName_ter ^ ^ ^ ^ member getNext_ter ^ ^ ^ ^ ^ ^ operandr Literal selectors MethodInvocation arguments MethodInvocation qualifier parent_ter ^ ^ selectors MethodInvocation member getString_ter ^ ^ ^ ^ member getNext_ter ^ ^ ^ ^ member equals_ter ^ ^ ^ ^ value <string>_ter ^ ^ ^ ^ ^ ^ 
if(((((n == parent.getFirstChild()) && (parent.getChildCount() == 2)) && n.getNext().isName()) && "null")){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getChildCount_ter ^ ^ ^ ^ operandr Literal value 2_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isName_ter ^ ^ ^ ^ member getNext_ter ^ ^ ^ ^ ^ ^ operandr Literal selectors MethodInvocation arguments MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member getFirstChild_ter ^ ^ ^ ^ member getNext_ter ^ ^ ^ ^ member equals_ter ^ ^ ^ ^ value <string>_ter ^ ^ ^ ^ ^ ^ 
if(((((n == parent.getFirstChild()) && (parent.getChildCount() == 2)) && n.getNext().isName()) && "null")){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getChildCount_ter ^ ^ ^ ^ operandr Literal value 2_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getChildCount_ter ^ ^ ^ ^ operandr Literal value 2_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((n == parent.getFirstChild()) && (parent.getChildCount() == 2)) && (parent.getChildCount() == 2))){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member getString_ter ^ ^ ^ ^ member getNext_ter ^ ^ ^ ^ ^ 
if(n.getNext().getString()){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getChildCount_ter ^ ^ ^ ^ operandr Literal value 2_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isName_ter ^ ^ ^ ^ member getNext_ter ^ ^ ^ ^ ^ ^ operandr Literal selectors MethodInvocation arguments MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member getAncestors_ter ^ ^ ^ ^ member getNext_ter ^ ^ ^ ^ member equals_ter ^ ^ ^ ^ value <string>_ter ^ ^ ^ ^ ^ ^ 
if(((((n == parent.getFirstChild()) && (parent.getChildCount() == 2)) && n.getNext().isName()) && "null")){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getChildCount_ter ^ ^ ^ ^ operandr Literal value 2_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isName_ter ^ ^ ^ ^ member getNext_ter ^ ^ ^ ^ ^ ^ operandr Literal selectors MethodInvocation arguments MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member getLastChild_ter ^ ^ ^ ^ member getNext_ter ^ ^ ^ ^ member equals_ter ^ ^ ^ ^ value <string>_ter ^ ^ ^ ^ ^ ^ 
if(((((n == parent.getFirstChild()) && (parent.getChildCount() == 2)) && n.getNext().isName()) && "null")){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getChildCount_ter ^ ^ ^ ^ operandr Literal value 2_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isName_ter ^ ^ ^ ^ member getNext_ter ^ ^ ^ ^ ^ ^ operandr Literal selectors MethodInvocation arguments MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member getString_ter ^ ^ ^ ^ member getNext_ter ^ ^ ^ ^ member equals_ter ^ ^ ^ ^ value <string>_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((((n == parent.getFirstChild()) && (parent.getChildCount() == 2)) && n.getNext().isName()) && "null") && (parent == gramps.getFirstChild()))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getChildCount_ter ^ ^ ^ ^ operandr Literal value 2_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isName_ter ^ ^ ^ ^ member getNext_ter ^ ^ ^ ^ ^ ^ operandr Literal selectors MethodInvocation arguments MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member getNext_ter ^ ^ ^ ^ member getNext_ter ^ ^ ^ ^ member equals_ter ^ ^ ^ ^ value <string>_ter ^ ^ ^ ^ ^ ^ 
if(((((n == parent.getFirstChild()) && (parent.getChildCount() == 2)) && n.getNext().isName()) && "null")){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getChildCount_ter ^ ^ ^ ^ operandr Literal value 2_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isName_ter ^ ^ ^ ^ member getNext_ter ^ ^ ^ ^ ^ ^ operandr Literal selectors MethodInvocation arguments MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member getType_ter ^ ^ ^ ^ member getNext_ter ^ ^ ^ ^ member equals_ter ^ ^ ^ ^ value <string>_ter ^ ^ ^ ^ ^ ^ 
if(((((n == parent.getFirstChild()) && (parent.getChildCount() == 2)) && n.getNext().isName()) && "null")){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getChildCount_ter ^ ^ ^ ^ operandr Literal value 2_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member visit_ter ^ ^ ^ ^ member getNext_ter ^ ^ ^ ^ ^ ^ operandr Literal selectors MethodInvocation arguments MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member getString_ter ^ ^ ^ ^ member getNext_ter ^ ^ ^ ^ member equals_ter ^ ^ ^ ^ value <string>_ter ^ ^ ^ ^ ^ ^ 
if(((((n == parent.getFirstChild()) && (parent.getChildCount() == 2)) && n.getNext().visit()) && "null")){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getChildCount_ter ^ ^ ^ ^ operandr Literal value 2_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isName_ter ^ ^ ^ ^ member getNext_ter ^ ^ ^ ^ ^ ^ operandr Literal selectors MethodInvocation arguments MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member getString_ter ^ ^ ^ ^ member getNext_ter ^ ^ ^ ^ member equals_ter ^ ^ ^ ^ value <string>_ter ^ ^ ^ ^ ^ ^ 
if(((((n == parent.getFirstChild()) && (parent.getChildCount() < 2)) && n.getNext().isName()) && "null")){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getChildCount_ter ^ ^ ^ ^ operandr Literal value 2_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isName_ter ^ ^ ^ ^ member getNext_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isName_ter ^ ^ ^ ^ member getNext_ter ^ ^ ^ ^ ^ ^ ^ 
if(((((n == parent.getFirstChild()) && (parent.getChildCount() == 2)) && n.getNext().isName()) && n.getNext().isName())){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getChildCount_ter ^ ^ ^ ^ operandr Literal value 2_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isName_ter ^ ^ ^ ^ member getNext_ter ^ ^ ^ ^ ^ ^ operandr Literal selectors MethodInvocation arguments MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member getChildCount_ter ^ ^ ^ ^ member getNext_ter ^ ^ ^ ^ member equals_ter ^ ^ ^ ^ value <string>_ter ^ ^ ^ ^ ^ ^ 
if(((((n == parent.getFirstChild()) && (parent.getChildCount() == 2)) && n.getNext().isName()) && "null")){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getChildCount_ter ^ ^ ^ ^ operandr Literal prefix_operators -_ter ^ ^ value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isName_ter ^ ^ ^ ^ member getNext_ter ^ ^ ^ ^ ^ ^ operandr Literal selectors MethodInvocation arguments MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member getString_ter ^ ^ ^ ^ member getNext_ter ^ ^ ^ ^ member equals_ter ^ ^ ^ ^ value <string>_ter ^ ^ ^ ^ ^ ^ 
if(((((n == parent.getFirstChild()) && (parent.getChildCount() == -"null")) && n.getNext().isName()) && "null")){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isName_ter ^ ^ ^ ^ member getNext_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isName_ter ^ ^ ^ ^ member getNext_ter ^ ^ ^ ^ ^ ^ ^ 
if((((n == parent.getFirstChild()) && n.getNext().isName()) && n.getNext().isName())){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getChildCount_ter ^ ^ ^ ^ operandr Literal value 2_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isName_ter ^ ^ ^ ^ member getNext_ter ^ ^ ^ ^ ^ ^ operandr Literal selectors MethodInvocation arguments MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member getString_ter ^ ^ ^ ^ member getLastChild_ter ^ ^ ^ ^ member equals_ter ^ ^ ^ ^ value <string>_ter ^ ^ ^ ^ ^ ^ 
if(((((n == parent.getFirstChild()) && (parent.getChildCount() == 2)) && n.getNext().isName()) && "null")){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getChildCount_ter ^ ^ ^ ^ operandr Literal value 2_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isCall_ter ^ ^ ^ ^ member getNext_ter ^ ^ ^ ^ ^ ^ operandr Literal selectors MethodInvocation arguments MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member getString_ter ^ ^ ^ ^ member getNext_ter ^ ^ ^ ^ member equals_ter ^ ^ ^ ^ value <string>_ter ^ ^ ^ ^ ^ ^ 
if(((((n == parent.getFirstChild()) && (parent.getChildCount() == 2)) && n.getNext().isCall()) && "null")){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getChildCount_ter ^ ^ ^ ^ operandr Literal value 2_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr Literal selectors MethodInvocation arguments MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member getString_ter ^ ^ ^ ^ member getNext_ter ^ ^ ^ ^ member equals_ter ^ ^ ^ ^ value <string>_ter ^ ^ ^ ^ ^ ^ ^ 
if((((n == parent.getFirstChild()) && (parent.getChildCount() == 2)) && "null")){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getChildCount_ter ^ ^ ^ ^ operandr Literal value 2_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isName_ter ^ ^ ^ ^ member getNext_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getChildCount_ter ^ ^ ^ ^ operandr Literal value 2_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((((n == parent.getFirstChild()) && (parent.getChildCount() == 2)) && n.getNext().isName()) && (parent.getChildCount() == 2))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getChildCount_ter ^ ^ ^ ^ operandr Literal value 2_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member getFirstChild_ter ^ ^ ^ ^ member getNext_ter ^ ^ ^ ^ ^ ^ operandr Literal selectors MethodInvocation arguments MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member getString_ter ^ ^ ^ ^ member getNext_ter ^ ^ ^ ^ member equals_ter ^ ^ ^ ^ value <string>_ter ^ ^ ^ ^ ^ ^ 
if(((((n == parent.getFirstChild()) && (parent.getChildCount() == 2)) && n.getNext().getFirstChild()) && "null")){
condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ 
if((n == parent.getFirstChild())){
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member getLastChild_ter ^ ^ ^ ^ ^ 
if(parent.getLastChild()){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member getChildCount_ter ^ ^ ^ ^ ^ ^ 
if((n == parent.getChildCount())){


condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ ^ ^ 
if((n == parent.getType())){
condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member getAncestors_ter ^ ^ ^ ^ ^ ^ 
if((n == parent.getAncestors())){
condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member getLastChild_ter ^ ^ ^ ^ ^ ^ 
if((n == parent.getLastChild())){
condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member getLastChild_ter ^ ^ ^ ^ ^ ^ 
if((n != parent.getLastChild())){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member FOR_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getChildCount_ter ^ ^ ^ ^ operandr Literal value 4_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((parent.getType() == Token.FOR) && (parent.getChildCount() == 4))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getChildCount_ter ^ ^ ^ ^ operandr Literal value 2_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isName_ter ^ ^ ^ ^ member getNext_ter ^ ^ ^ ^ ^ ^ ^ 
if((((n == parent.getFirstChild()) && (parent.getChildCount() == 2)) && n.getNext().isName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getChildCount_ter ^ ^ ^ ^ operandr Literal value 2_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((n == parent.getFirstChild()) && (parent.getChildCount() == 2))){

ReturnStatement_ter ^ 
if (true) { return;
 }

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ selectors MethodInvocation member getNext_ter ^ ^ ^ MethodInvocation member getNext_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((n == parent.getFirstChild()) || (n == parent.getFirstChild().getNext().getNext()))){

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ ^ 
if((ancestorType != Token.EXPR_RESULT)){

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.getType() != Token.EXPR_RESULT)){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member an_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member getLastChild_ter ^ ^ ^ ^ ^ ^ 
if((an == parent.getLastChild())){
IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getChildCount_ter ^ ^ ^ ^ operandr Literal value 2_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.getChildCount() == 2)){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member getLastChild_ter ^ ^ ^ ^ ^ ^ 
if((ancestorType == parent.getLastChild())){
IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent == gramps.getFirstChild())){

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ 
if((ancestorType != Token.BLOCK)){

BreakStatement_ter ^ 
break;

StatementExpression expression MethodInvocation member protectSideEffects_ter ^ ^ ^ ^ ^ 
protectSideEffects();

StatementExpression expression MethodInvocation member addExtern_ter ^ ^ ^ ^ ^ 
addExtern();

condition BinaryOperation operator >_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member getLastChild_ter ^ ^ ^ ^ ^ ^ 
if((n > parent.getLastChild())){
IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member getAncestors_ter ^ ^ ^ ^ ^ 
if(parent.getAncestors()){

condition BinaryOperation operator >=_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member getLastChild_ter ^ ^ ^ ^ ^ ^ 
if((n >= parent.getLastChild())){
condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member getLastChild_ter ^ ^ ^ ^ ^ ^ 
if((parent == parent.getLastChild())){
IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member getLastChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member getLastChild_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n == parent.getLastChild()) || parent.getLastChild())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member getLastChild_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member getLastChild_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n == parent.getLastChild()) && parent.getLastChild())){

condition BinaryOperation operator <=_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member getLastChild_ter ^ ^ ^ ^ ^ ^ 
if((n <= parent.getLastChild())){
ContinueStatement_ter ^ 
continue;

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member getLastChild_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((n == parent.getLastChild()) || (ancestorType != Token.BLOCK))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member getLastChild_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((n == parent.getLastChild()) && (ancestorType != Token.BLOCK))){

BreakStatement_ter ^ 
break;


condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member getLastChild_ter ^ ^ ^ ^ ^ ^ 
if((n < parent.getLastChild())){
control EnhancedForControl var VariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name an_ter ^ ^ ^ ^ ^ ^ iterable MethodInvocation qualifier parent_ter ^ ^ member getAncestors_ter ^ ^ ^ ^ ^ ^ 
arg 
arg 
(Node an = ;
:parent.getAncestors())

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getLastChild_ter ^ ^ ^ ^ ^ ^ 
if((n == gramps.getLastChild())){
condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member getLastChild_ter ^ ^ ^ ^ ^ ^ 
if((n && parent.getLastChild())){
condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member getLastChild_ter ^ ^ ^ ^ ^ ^ 
if((n == n.getLastChild())){
condition BinaryOperation operator ||_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member getLastChild_ter ^ ^ ^ ^ ^ ^ 
if((n || parent.getLastChild())){
LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name ancestorType_ter ^ ^ initializer MethodInvocation qualifier an_ter ^ ^ member getType_ter ^ ^ ^ ^ ^ ^ ^ 
int ancestorType = an.getType();

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name gramps_ter ^ ^ initializer MethodInvocation qualifier parent_ter ^ ^ member getParent_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node gramps = parent.getParent();

        for (Node an : parent.getAncestors()) {if(0!=1)break;
control EnhancedForControl var VariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name an_ter ^ ^ ^ ^ ^ ^ iterable MethodInvocation qualifier parent_ter ^ ^ member getLastChild_ter ^ ^ ^ ^ ^ ^ 
arg 
arg 
(Node an = ;
:parent.getLastChild())

ReturnStatement_ter ^ 
if (true) { return;
 }

control EnhancedForControl var VariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name an_ter ^ ^ ^ ^ ^ ^ iterable MethodInvocation qualifier parent_ter ^ ^ member getChildCount_ter ^ ^ ^ ^ ^ ^ 
arg 
arg 
(Node an = ;
:parent.getChildCount())

control EnhancedForControl var VariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name an_ter ^ ^ ^ ^ ^ ^ iterable MethodInvocation qualifier parent_ter ^ ^ member getString_ter ^ ^ ^ ^ ^ ^ 
arg 
arg 
(Node an = ;
:parent.getString())

control EnhancedForControl var VariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name an_ter ^ ^ ^ ^ ^ ^ iterable MethodInvocation qualifier parent_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ 
arg 
arg 
(Node an = ;
:parent.getFirstChild())

control EnhancedForControl var VariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name an_ter ^ ^ ^ ^ ^ ^ iterable MethodInvocation qualifier parent_ter ^ ^ member isCall_ter ^ ^ ^ ^ ^ ^ 
arg 
arg 
(Node an = ;
:parent.isCall())

control EnhancedForControl var VariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name an_ter ^ ^ ^ ^ ^ ^ iterable MethodInvocation qualifier parent_ter ^ ^ member getNext_ter ^ ^ ^ ^ ^ ^ 
arg 
arg 
(Node an = ;
:parent.getNext())

control EnhancedForControl var VariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name an_ter ^ ^ ^ ^ ^ ^ iterable MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ ^ ^ 
arg 
arg 
(Node an = ;
:parent.getType())

BreakStatement_ter ^ 
break;


StatementExpression expression MethodInvocation member protectSideEffects_ter ^ ^ ^ ^ ^ 
protectSideEffects();

StatementExpression expression MethodInvocation member addExtern_ter ^ ^ ^ ^ ^ 
addExtern();

BreakStatement_ter ^ 
break;

ContinueStatement_ter ^ 
continue;

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member getAncestors_ter ^ ^ ^ ^ ^ 
if(parent.getAncestors()){

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member getLastChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((n == parent.getLastChild())){

StatementExpression expression MethodInvocation qualifier parent_ter ^ ^ member protectSideEffects_ter ^ ^ ^ ^ ^ 
parent.protectSideEffects();

StatementExpression expression MethodInvocation qualifier parent_ter ^ ^ member addExtern_ter ^ ^ ^ ^ ^ 
parent.addExtern();

StatementExpression expression MethodInvocation qualifier an_ter ^ ^ member detachChildren_ter ^ ^ ^ ^ ^ 
an.detachChildren();

StatementExpression expression MethodInvocation qualifier an_ter ^ ^ member setQuotedString_ter ^ ^ ^ ^ ^ 
an.setQuotedString();

StatementExpression expression MethodInvocation qualifier parent_ter ^ ^ member getAncestors_ter ^ ^ ^ ^ ^ 
parent.getAncestors();


control EnhancedForControl var VariableDeclaration modifiers final_ter ^ ^ type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name an_ter ^ ^ ^ ^ ^ ^ iterable MethodInvocation qualifier parent_ter ^ ^ member getAncestors_ter ^ ^ ^ ^ ^ ^ 
arg 
arg 
(final Node an = ;
:parent.getAncestors())

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getChildCount_ter ^ ^ ^ ^ operandr Literal value 2_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isName_ter ^ ^ ^ ^ member getNext_ter ^ ^ ^ ^ ^ ^ ^ 
if((((n == parent.getFirstChild()) && (parent.getChildCount() == 2)) && n.getNext().isName())){

control EnhancedForControl var VariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name an_ter ^ ^ ^ ^ ^ ^ iterable MethodInvocation member getAncestors_ter ^ ^ ^ ^ ^ ^ 
arg 
arg 
(Node an = ;
:getAncestors())

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getChildCount_ter ^ ^ ^ ^ operandr Literal value 2_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((n == parent.getFirstChild()) && (parent.getChildCount() == 2))){

IfStatement condition MethodInvocation qualifier an_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.hasChildren()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isFromExterns_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isFromExterns()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.hasOneChild()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.hasMoreThanOneChild()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isQualifiedName()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isUnscopedQualifiedName()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isVarArgs()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isOptionalArg()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isSyntheticBlock()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.wasEmptyNode()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isOnlyModifiesThisCall()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isNoSideEffectsCall()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isLocalResultCall()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isQuotedString()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isAdd_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isAdd()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isAnd_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isAnd()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isArrayLit_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isArrayLit()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isAssign_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isAssign()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isAssignAdd_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isAssignAdd()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isBlock_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isBlock()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isBreak_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isBreak()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isCall_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isCall()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isCase_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isCase()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isCatch_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isCatch()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isComma_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isComma()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isContinue_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isContinue()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isDebugger_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isDebugger()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isDec_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isDec()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isDefaultCase_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isDefaultCase()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isDelProp_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isDelProp()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isDo_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isDo()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isEmpty()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isExprResult_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isExprResult()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isFalse_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isFalse()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isFor_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isFor()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isFunction_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isFunction()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isGetterDef_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isGetterDef()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isGetElem_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isGetElem()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isGetProp()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isHook_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isHook()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isIf_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isIf()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isIn_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isIn()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isInc_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isInc()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isInstanceOf_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isInstanceOf()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isLabel_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isLabel()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isLabelName_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isLabelName()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isName_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isName()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isNE_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isNE()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isNew_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isNew()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isNot_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isNot()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isNull_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isNull()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isNumber()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isObjectLit_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isObjectLit()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isOr_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isOr()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isParamList_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isParamList()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isRegExp_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isRegExp()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isReturn()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isScript_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isScript()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isSetterDef_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isSetterDef()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isString()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isStringKey_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isStringKey()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isSwitch_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isSwitch()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isThis_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isThis()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isThrow_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isThrow()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isTrue_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isTrue()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isTry_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isTry()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isTypeOf_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isTypeOf()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isVar_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isVar()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isVoid_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isVoid()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isWhile_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isWhile()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isWith_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isWith()){
continue;
}
StatementExpression expression MethodInvocation qualifier gramps_ter ^ ^ member detachChildren_ter ^ ^ ^ ^ ^ 
gramps.detachChildren();

StatementExpression expression MethodInvocation qualifier gramps_ter ^ ^ member setQuotedString_ter ^ ^ ^ ^ ^ 
gramps.setQuotedString();

control EnhancedForControl var VariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name an_ter ^ ^ ^ ^ ^ ^ iterable MethodInvocation qualifier an_ter ^ ^ member getType_ter ^ ^ ^ ^ ^ ^ 
arg 
arg 
(Node an = ;
:an.getType())

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getChildCount_ter ^ ^ ^ ^ operandr Literal value 2_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.getChildCount() == 2)){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType != Token.BLOCK))){

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member COMMA_ter ^ ^ ^ ^ ^ ^ ^ 
if((ancestorType == Token.COMMA)){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getChildCount_ter ^ ^ ^ ^ operandr Literal value 2_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isName_ter ^ ^ ^ ^ member getNext_ter ^ ^ ^ ^ ^ ^ operandr Literal selectors MethodInvocation arguments MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member getString_ter ^ ^ ^ ^ member getNext_ter ^ ^ ^ ^ member equals_ter ^ ^ ^ ^ value <string>_ter ^ ^ ^ ^ ^ ^ ^ 
if(((((n == parent.getFirstChild()) && (parent.getChildCount() == 2)) && n.getNext().isName()) && "null")){

control EnhancedForControl var VariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name an_ter ^ ^ ^ ^ ^ ^ iterable MethodInvocation qualifier gramps_ter ^ ^ member getAncestors_ter ^ ^ ^ ^ ^ ^ 
arg 
arg 
(Node an = ;
:gramps.getAncestors())

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((parent.getType() != Token.EXPR_RESULT) && (parent.getType() != Token.BLOCK))){

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name gramps_ter ^ ^ initializer MethodInvocation qualifier parent_ter ^ ^ member getParent_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node gramps = parent.getParent();

control EnhancedForControl var VariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name an_ter ^ ^ ^ ^ ^ ^ iterable MethodInvocation qualifier parent_ter ^ ^ member getAncestors_ter ^ ^ ^ ^ ^ ^ 
arg 
arg 
(Node an = ;
:parent.getAncestors())

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr Literal selectors MethodInvocation arguments MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member getString_ter ^ ^ ^ ^ member getNext_ter ^ ^ ^ ^ member equals_ter ^ ^ ^ ^ value <string>_ter ^ ^ ^ ^ ^ ^ ^ 
if((ancestorType != "null")){

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name ancestorType_ter ^ ^ initializer MethodInvocation qualifier an_ter ^ ^ member getType_ter ^ ^ ^ ^ ^ ^ ^ 
int ancestorType = an.getType();

control EnhancedForControl var VariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name an_ter ^ ^ ^ ^ ^ ^ iterable MethodInvocation qualifier parent_ter ^ ^ member getAncestors_ter ^ ^ ^ ^ ^ ^ 
arg 
arg 
(Node an = ;
:parent.getAncestors())

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name ancestorType_ter ^ ^ initializer MethodInvocation qualifier an_ter ^ ^ member getType_ter ^ ^ ^ ^ ^ ^ ^ 
int ancestorType = an.getType();

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name ancestorType_ter ^ ^ initializer MethodInvocation qualifier an_ter ^ ^ member getSortedPropTypes_ter ^ ^ ^ ^ ^ ^ ^ 
int ancestorType = an.getSortedPropTypes();

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name ancestorType_ter ^ ^ initializer MethodInvocation qualifier an_ter ^ ^ member getLength_ter ^ ^ ^ ^ ^ ^ ^ 
int ancestorType = an.getLength();

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name ancestorType_ter ^ ^ initializer MethodInvocation qualifier an_ter ^ ^ member getLineno_ter ^ ^ ^ ^ ^ ^ ^ 
int ancestorType = an.getLineno();

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name ancestorType_ter ^ ^ initializer MethodInvocation qualifier an_ter ^ ^ member getCharno_ter ^ ^ ^ ^ ^ ^ ^ 
int ancestorType = an.getCharno();

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name ancestorType_ter ^ ^ initializer MethodInvocation qualifier an_ter ^ ^ member getSourceOffset_ter ^ ^ ^ ^ ^ ^ ^ 
int ancestorType = an.getSourceOffset();

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name ancestorType_ter ^ ^ initializer MethodInvocation qualifier an_ter ^ ^ member getSourcePosition_ter ^ ^ ^ ^ ^ ^ ^ 
int ancestorType = an.getSourcePosition();

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name ancestorType_ter ^ ^ initializer MethodInvocation qualifier an_ter ^ ^ member getChildCount_ter ^ ^ ^ ^ ^ ^ ^ 
int ancestorType = an.getChildCount();

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name ancestorType_ter ^ ^ initializer MethodInvocation qualifier an_ter ^ ^ member getSideEffectFlags_ter ^ ^ ^ ^ ^ ^ ^ 
int ancestorType = an.getSideEffectFlags();

LocalVariableDeclaration type BasicType name long_ter ^ ^ ^ ^ declarators VariableDeclarator name ancestorType_ter ^ ^ initializer MethodInvocation qualifier an_ter ^ ^ member getType_ter ^ ^ ^ ^ ^ ^ ^ 
long ancestorType = an.getType();

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name ancestorType_ter ^ ^ initializer MethodInvocation qualifier an_ter ^ ^ member visit_ter ^ ^ ^ ^ ^ ^ ^ 
int ancestorType = an.visit();

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name ancestorType_ter ^ ^ initializer MethodInvocation qualifier an_ter ^ ^ member getAncestors_ter ^ ^ ^ ^ ^ ^ ^ 
int ancestorType = an.getAncestors();

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name ancestorType_ter ^ ^ initializer MethodInvocation qualifier an_ter ^ ^ member getString_ter ^ ^ ^ ^ ^ ^ ^ 
int ancestorType = an.getString();

LocalVariableDeclaration type BasicType name boolean_ter ^ ^ ^ ^ declarators VariableDeclarator name ancestorType_ter ^ ^ initializer MethodInvocation qualifier an_ter ^ ^ member getType_ter ^ ^ ^ ^ ^ ^ ^ 
boolean ancestorType = an.getType();

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name ancestorType_ter ^ ^ initializer MethodInvocation qualifier an_ter ^ ^ member isName_ter ^ ^ ^ ^ ^ ^ ^ 
int ancestorType = an.isName();

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name ancestorType_ter ^ ^ initializer MethodInvocation qualifier an_ter ^ ^ member getNext_ter ^ ^ ^ ^ ^ ^ ^ 
int ancestorType = an.getNext();

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name ancestorType_ter ^ ^ initializer MethodInvocation qualifier an_ter ^ ^ member getLastChild_ter ^ ^ ^ ^ ^ ^ ^ 
int ancestorType = an.getLastChild();

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name ancestorType_ter ^ ^ initializer MethodInvocation qualifier an_ter ^ ^ member isCall_ter ^ ^ ^ ^ ^ ^ ^ 
int ancestorType = an.isCall();

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name ancestorType_ter ^ ^ initializer MethodInvocation qualifier gramps_ter ^ ^ member getType_ter ^ ^ ^ ^ ^ ^ ^ 
int ancestorType = gramps.getType();

IfStatement condition MethodInvocation qualifier an_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.hasChildren()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isFromExterns_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isFromExterns()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.hasOneChild()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.hasMoreThanOneChild()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isQualifiedName()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isUnscopedQualifiedName()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isVarArgs()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isOptionalArg()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isSyntheticBlock()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.wasEmptyNode()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isOnlyModifiesThisCall()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isNoSideEffectsCall()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isLocalResultCall()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isQuotedString()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isAdd_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isAdd()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isAnd_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isAnd()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isArrayLit_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isArrayLit()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isAssign_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isAssign()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isAssignAdd_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isAssignAdd()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isBlock_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isBlock()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isBreak_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isBreak()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isCall_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isCall()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isCase_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isCase()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isCatch_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isCatch()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isComma_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isComma()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isContinue_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isContinue()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isDebugger_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isDebugger()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isDec_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isDec()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isDefaultCase_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isDefaultCase()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isDelProp_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isDelProp()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isDo_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isDo()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isEmpty()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isExprResult_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isExprResult()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isFalse_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isFalse()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isFor_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isFor()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isFunction_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isFunction()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isGetterDef_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isGetterDef()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isGetElem_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isGetElem()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isGetProp()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isHook_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isHook()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isIf_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isIf()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isIn_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isIn()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isInc_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isInc()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isInstanceOf_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isInstanceOf()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isLabel_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isLabel()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isLabelName_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isLabelName()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isName_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isName()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isNE_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isNE()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isNew_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isNew()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isNot_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isNot()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isNull_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isNull()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isNumber()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isObjectLit_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isObjectLit()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isOr_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isOr()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isParamList_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isParamList()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isRegExp_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isRegExp()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isReturn()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isScript_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isScript()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isSetterDef_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isSetterDef()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isString()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isStringKey_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isStringKey()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isSwitch_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isSwitch()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isThis_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isThis()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isThrow_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isThrow()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isTrue_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isTrue()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isTry_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isTry()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isTypeOf_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isTypeOf()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isVar_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isVar()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isVoid_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isVoid()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isWhile_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isWhile()){
continue;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isWith_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(an.isWith()){
continue;
}
StatementExpression expression MethodInvocation qualifier an_ter ^ ^ member detachChildren_ter ^ ^ ^ ^ ^ 
an.detachChildren();

StatementExpression expression MethodInvocation qualifier an_ter ^ ^ member setQuotedString_ter ^ ^ ^ ^ ^ 
an.setQuotedString();

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name ancestorType_ter ^ ^ initializer MethodInvocation qualifier ancestorType_ter ^ ^ member getType_ter ^ ^ ^ ^ ^ ^ ^ 
int ancestorType = ancestorType.getType();

ReturnStatement_ter ^ 
if (true) { return;
 }

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name ancestorType_ter ^ ^ initializer MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ ^ ^ ^ 
int ancestorType = parent.getType();

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name ancestorType_ter ^ ^ initializer MethodInvocation qualifier par0 ^ ^ member getType_ter ^ ^ ^ ^ ^ ^ ^ 
int ancestorType = .getType();


IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member an_ter ^ ^ ^ ^ operandr Literal selectors MethodInvocation arguments MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member getString_ter ^ ^ ^ ^ member getNext_ter ^ ^ ^ ^ member equals_ter ^ ^ ^ ^ value <string>_ter ^ ^ ^ ^ ^ ^ ^ 
if((an != "null")){
continue;
}

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name ancestorType_ter ^ ^ initializer MethodInvocation qualifier n_ter ^ ^ member getType_ter ^ ^ ^ ^ ^ ^ ^ 
int ancestorType = n.getType();


IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier an_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!an.hasChildren()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier an_ter ^ ^ member isFromExterns_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!an.isFromExterns()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier an_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!an.hasOneChild()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier an_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!an.hasMoreThanOneChild()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier an_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!an.isQualifiedName()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier an_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!an.isUnscopedQualifiedName()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier an_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!an.isVarArgs()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier an_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!an.isOptionalArg()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier an_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!an.isSyntheticBlock()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier an_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!an.wasEmptyNode()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier an_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!an.isOnlyModifiesThisCall()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier an_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!an.isNoSideEffectsCall()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier an_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!an.isLocalResultCall()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier an_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!an.isQuotedString()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier an_ter ^ ^ member isAdd_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!an.isAdd()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier an_ter ^ ^ member isAnd_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!an.isAnd()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier an_ter ^ ^ member isArrayLit_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!an.isArrayLit()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier an_ter ^ ^ member isAssign_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!an.isAssign()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier an_ter ^ ^ member isAssignAdd_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!an.isAssignAdd()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier an_ter ^ ^ member isBlock_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!an.isBlock()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier an_ter ^ ^ member isBreak_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!an.isBreak()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier an_ter ^ ^ member isCall_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!an.isCall()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier an_ter ^ ^ member isCase_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!an.isCase()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier an_ter ^ ^ member isCatch_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!an.isCatch()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier an_ter ^ ^ member isComma_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!an.isComma()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier an_ter ^ ^ member isContinue_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!an.isContinue()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier an_ter ^ ^ member isDebugger_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!an.isDebugger()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier an_ter ^ ^ member isDec_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!an.isDec()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier an_ter ^ ^ member isDefaultCase_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!an.isDefaultCase()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier an_ter ^ ^ member isDelProp_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!an.isDelProp()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier an_ter ^ ^ member isDo_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!an.isDo()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier an_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!an.isEmpty()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier an_ter ^ ^ member isExprResult_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!an.isExprResult()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier an_ter ^ ^ member isFalse_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!an.isFalse()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier an_ter ^ ^ member isFor_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!an.isFor()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier an_ter ^ ^ member isFunction_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!an.isFunction()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier an_ter ^ ^ member isGetterDef_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!an.isGetterDef()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier an_ter ^ ^ member isGetElem_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!an.isGetElem()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier an_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!an.isGetProp()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier an_ter ^ ^ member isHook_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!an.isHook()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier an_ter ^ ^ member isIf_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!an.isIf()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier an_ter ^ ^ member isIn_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!an.isIn()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier an_ter ^ ^ member isInc_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!an.isInc()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier an_ter ^ ^ member isInstanceOf_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!an.isInstanceOf()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier an_ter ^ ^ member isLabel_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!an.isLabel()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier an_ter ^ ^ member isLabelName_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!an.isLabelName()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier an_ter ^ ^ member isName_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!an.isName()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier an_ter ^ ^ member isNE_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!an.isNE()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier an_ter ^ ^ member isNew_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!an.isNew()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier an_ter ^ ^ member isNot_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!an.isNot()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier an_ter ^ ^ member isNull_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!an.isNull()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier an_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!an.isNumber()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier an_ter ^ ^ member isObjectLit_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!an.isObjectLit()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier an_ter ^ ^ member isOr_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!an.isOr()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier an_ter ^ ^ member isParamList_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!an.isParamList()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier an_ter ^ ^ member isRegExp_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!an.isRegExp()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier an_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!an.isReturn()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier an_ter ^ ^ member isScript_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!an.isScript()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier an_ter ^ ^ member isSetterDef_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!an.isSetterDef()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier an_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!an.isString()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier an_ter ^ ^ member isStringKey_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!an.isStringKey()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier an_ter ^ ^ member isSwitch_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!an.isSwitch()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier an_ter ^ ^ member isThis_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!an.isThis()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier an_ter ^ ^ member isThrow_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!an.isThrow()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier an_ter ^ ^ member isTrue_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!an.isTrue()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier an_ter ^ ^ member isTry_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!an.isTry()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier an_ter ^ ^ member isTypeOf_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!an.isTypeOf()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier an_ter ^ ^ member isVar_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!an.isVar()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier an_ter ^ ^ member isVoid_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!an.isVoid()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier an_ter ^ ^ member isWhile_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!an.isWhile()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier an_ter ^ ^ member isWith_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!an.isWith()){
continue;
}
LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name ancestorType_ter ^ ^ initializer MethodInvocation qualifier an_ter ^ ^ arguments MemberReference member n_ter ^ ^ ^ ^ member getType_ter ^ ^ ^ ^ ^ ^ ^ 
int ancestorType = an.getType(n);

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member an_ter ^ ^ ^ ^ operandr Literal selectors MethodInvocation arguments MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member getString_ter ^ ^ ^ ^ member getNext_ter ^ ^ ^ ^ member equals_ter ^ ^ ^ ^ value <string>_ter ^ ^ ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if((an == "null")){
continue;
}
LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name ancestorType_ter ^ ^ initializer Cast type BasicType name int_ter ^ ^ ^ ^ expression MethodInvocation qualifier an_ter ^ ^ member getType_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
int ancestorType = (int)an.getType();

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name ancestorType_ter ^ ^ initializer MethodInvocation qualifier an_ter ^ ^ arguments MethodInvocation qualifier an_ter ^ ^ member getType_ter ^ ^ ^ ^ member getType_ter ^ ^ ^ ^ ^ ^ ^ 
int ancestorType = an.getType(an.getType());

LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name ancestorType_ter ^ ^ initializer MethodInvocation qualifier an_ter ^ ^ member getType_ter ^ ^ ^ ^ ^ ^ ^ 
final int ancestorType = an.getType();

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name ancestorType_ter ^ ^ initializer MethodInvocation qualifier an_ter ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member getType_ter ^ ^ ^ ^ ^ ^ ^ 
int ancestorType = an.getType(0);

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member an_ter ^ ^ ^ ^ operandr Literal selectors MethodInvocation arguments MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member getString_ter ^ ^ ^ ^ member getNext_ter ^ ^ ^ ^ member equals_ter ^ ^ ^ ^ value <string>_ter ^ ^ ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if((an != "null")){
continue;
}
LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name ancestorType_ter ^ ^ initializer MethodInvocation qualifier an_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member getString_ter ^ ^ ^ ^ member getNext_ter ^ ^ ^ ^ member getType_ter ^ ^ ^ ^ ^ ^ ^ 
int ancestorType = an.getType(n.getNext().getString());

LocalVariableDeclaration type BasicType name Object_ter ^ ^ ^ ^ declarators VariableDeclarator name ancestorType_ter ^ ^ initializer MethodInvocation qualifier an_ter ^ ^ member getType_ter ^ ^ ^ ^ ^ ^ ^ 
Object ancestorType = an.getType();

StatementExpression expression MethodInvocation member protectSideEffects_ter ^ ^ ^ ^ ^ 
protectSideEffects();

StatementExpression expression MethodInvocation member addExtern_ter ^ ^ ^ ^ ^ 
addExtern();

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name ancestorType_ter ^ ^ initializer MethodInvocation qualifier an_ter ^ ^ arguments Literal value false_ter ^ ^ ^ ^ member getType_ter ^ ^ ^ ^ ^ ^ ^ 
int ancestorType = an.getType(false);

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name ancestorType_ter ^ ^ initializer MethodInvocation qualifier an_ter ^ ^ arguments MemberReference member an_ter ^ ^ ^ ^ member getType_ter ^ ^ ^ ^ ^ ^ ^ 
int ancestorType = an.getType(an);

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name ancestorType_ter ^ ^ initializer MethodInvocation qualifier an_ter ^ ^ arguments Literal value true_ter ^ ^ ^ ^ member getType_ter ^ ^ ^ ^ ^ ^ ^ 
int ancestorType = an.getType(true);

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member an_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((an != null)){
continue;
}

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name ancestorType_ter ^ ^ initializer MethodInvocation qualifier an_ter ^ ^ arguments Literal value 1_ter ^ ^ ^ ^ member getType_ter ^ ^ ^ ^ ^ ^ ^ 
int ancestorType = an.getType(1);

IfStatement condition MethodInvocation qualifier an_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(an.hasChildren()){
return;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isFromExterns_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(an.isFromExterns()){
return;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(an.hasOneChild()){
return;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(an.hasMoreThanOneChild()){
return;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(an.isQualifiedName()){
return;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(an.isUnscopedQualifiedName()){
return;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(an.isVarArgs()){
return;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(an.isOptionalArg()){
return;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(an.isSyntheticBlock()){
return;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(an.wasEmptyNode()){
return;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(an.isOnlyModifiesThisCall()){
return;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(an.isNoSideEffectsCall()){
return;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(an.isLocalResultCall()){
return;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(an.isQuotedString()){
return;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isAdd_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(an.isAdd()){
return;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isAnd_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(an.isAnd()){
return;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isArrayLit_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(an.isArrayLit()){
return;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isAssign_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(an.isAssign()){
return;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isAssignAdd_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(an.isAssignAdd()){
return;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isBlock_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(an.isBlock()){
return;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isBreak_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(an.isBreak()){
return;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isCall_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(an.isCall()){
return;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isCase_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(an.isCase()){
return;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isCatch_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(an.isCatch()){
return;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isComma_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(an.isComma()){
return;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isContinue_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(an.isContinue()){
return;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isDebugger_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(an.isDebugger()){
return;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isDec_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(an.isDec()){
return;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isDefaultCase_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(an.isDefaultCase()){
return;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isDelProp_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(an.isDelProp()){
return;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isDo_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(an.isDo()){
return;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(an.isEmpty()){
return;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isExprResult_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(an.isExprResult()){
return;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isFalse_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(an.isFalse()){
return;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isFor_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(an.isFor()){
return;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isFunction_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(an.isFunction()){
return;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isGetterDef_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(an.isGetterDef()){
return;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isGetElem_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(an.isGetElem()){
return;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(an.isGetProp()){
return;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isHook_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(an.isHook()){
return;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isIf_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(an.isIf()){
return;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isIn_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(an.isIn()){
return;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isInc_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(an.isInc()){
return;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isInstanceOf_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(an.isInstanceOf()){
return;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isLabel_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(an.isLabel()){
return;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isLabelName_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(an.isLabelName()){
return;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isName_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(an.isName()){
return;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isNE_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(an.isNE()){
return;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isNew_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(an.isNew()){
return;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isNot_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(an.isNot()){
return;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isNull_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(an.isNull()){
return;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(an.isNumber()){
return;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isObjectLit_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(an.isObjectLit()){
return;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isOr_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(an.isOr()){
return;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isParamList_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(an.isParamList()){
return;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isRegExp_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(an.isRegExp()){
return;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(an.isReturn()){
return;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isScript_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(an.isScript()){
return;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isSetterDef_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(an.isSetterDef()){
return;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(an.isString()){
return;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isStringKey_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(an.isStringKey()){
return;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isSwitch_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(an.isSwitch()){
return;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isThis_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(an.isThis()){
return;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isThrow_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(an.isThrow()){
return;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isTrue_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(an.isTrue()){
return;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isTry_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(an.isTry()){
return;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isTypeOf_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(an.isTypeOf()){
return;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isVar_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(an.isVar()){
return;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isVoid_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(an.isVoid()){
return;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isWhile_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(an.isWhile()){
return;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isWith_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(an.isWith()){
return;
}
LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name ancestorType_ter ^ ^ initializer MemberReference member an_ter ^ ^ ^ ^ ^ ^ ^ 
int ancestorType = an;

StatementExpression expression MethodInvocation qualifier an_ter ^ ^ member getType_ter ^ ^ ^ ^ ^ 
an.getType();

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member an_ter ^ ^ ^ ^ operandr Literal selectors MethodInvocation arguments MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member getString_ter ^ ^ ^ ^ member getNext_ter ^ ^ ^ ^ member equals_ter ^ ^ ^ ^ value <string>_ter ^ ^ ^ ^ ^ ^ ^ 
if((an == "null")){
continue;
}

IfStatement condition MethodInvocation qualifier an_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(an.hasChildren()){
break;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isFromExterns_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(an.isFromExterns()){
break;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(an.hasOneChild()){
break;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(an.hasMoreThanOneChild()){
break;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(an.isQualifiedName()){
break;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(an.isUnscopedQualifiedName()){
break;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(an.isVarArgs()){
break;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(an.isOptionalArg()){
break;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(an.isSyntheticBlock()){
break;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(an.wasEmptyNode()){
break;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(an.isOnlyModifiesThisCall()){
break;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(an.isNoSideEffectsCall()){
break;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(an.isLocalResultCall()){
break;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(an.isQuotedString()){
break;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isAdd_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(an.isAdd()){
break;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isAnd_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(an.isAnd()){
break;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isArrayLit_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(an.isArrayLit()){
break;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isAssign_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(an.isAssign()){
break;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isAssignAdd_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(an.isAssignAdd()){
break;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isBlock_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(an.isBlock()){
break;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isBreak_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(an.isBreak()){
break;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isCall_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(an.isCall()){
break;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isCase_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(an.isCase()){
break;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isCatch_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(an.isCatch()){
break;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isComma_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(an.isComma()){
break;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isContinue_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(an.isContinue()){
break;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isDebugger_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(an.isDebugger()){
break;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isDec_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(an.isDec()){
break;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isDefaultCase_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(an.isDefaultCase()){
break;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isDelProp_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(an.isDelProp()){
break;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isDo_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(an.isDo()){
break;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(an.isEmpty()){
break;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isExprResult_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(an.isExprResult()){
break;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isFalse_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(an.isFalse()){
break;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isFor_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(an.isFor()){
break;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isFunction_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(an.isFunction()){
break;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isGetterDef_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(an.isGetterDef()){
break;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isGetElem_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(an.isGetElem()){
break;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(an.isGetProp()){
break;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isHook_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(an.isHook()){
break;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isIf_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(an.isIf()){
break;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isIn_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(an.isIn()){
break;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isInc_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(an.isInc()){
break;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isInstanceOf_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(an.isInstanceOf()){
break;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isLabel_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(an.isLabel()){
break;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isLabelName_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(an.isLabelName()){
break;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isName_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(an.isName()){
break;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isNE_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(an.isNE()){
break;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isNew_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(an.isNew()){
break;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isNot_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(an.isNot()){
break;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isNull_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(an.isNull()){
break;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(an.isNumber()){
break;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isObjectLit_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(an.isObjectLit()){
break;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isOr_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(an.isOr()){
break;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isParamList_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(an.isParamList()){
break;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isRegExp_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(an.isRegExp()){
break;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(an.isReturn()){
break;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isScript_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(an.isScript()){
break;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isSetterDef_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(an.isSetterDef()){
break;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(an.isString()){
break;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isStringKey_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(an.isStringKey()){
break;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isSwitch_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(an.isSwitch()){
break;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isThis_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(an.isThis()){
break;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isThrow_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(an.isThrow()){
break;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isTrue_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(an.isTrue()){
break;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isTry_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(an.isTry()){
break;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isTypeOf_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(an.isTypeOf()){
break;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isVar_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(an.isVar()){
break;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isVoid_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(an.isVoid()){
break;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isWhile_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(an.isWhile()){
break;
}
IfStatement condition MethodInvocation qualifier an_ter ^ ^ member isWith_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(an.isWith()){
break;
}
LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name ancestorType_ter ^ ^ initializer MethodInvocation qualifier an_ter ^ ^ arguments MemberReference member n_ter ^ ^ ^ ^ member setType_ter ^ ^ ^ ^ ^ ^ ^ 
int ancestorType = an.setType(n);

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name ancestorType_ter ^ ^ initializer MethodInvocation qualifier an_ter ^ ^ arguments MemberReference member n_ter ^ ^ ^ ^ member removeProp_ter ^ ^ ^ ^ ^ ^ ^ 
int ancestorType = an.removeProp(n);

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name ancestorType_ter ^ ^ initializer MethodInvocation qualifier an_ter ^ ^ arguments MemberReference member n_ter ^ ^ ^ ^ member setLength_ter ^ ^ ^ ^ ^ ^ ^ 
int ancestorType = an.setLength(n);

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name ancestorType_ter ^ ^ initializer MethodInvocation qualifier an_ter ^ ^ arguments MemberReference member n_ter ^ ^ ^ ^ member setLineno_ter ^ ^ ^ ^ ^ ^ ^ 
int ancestorType = an.setLineno(n);

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name ancestorType_ter ^ ^ initializer MethodInvocation qualifier an_ter ^ ^ arguments MemberReference member n_ter ^ ^ ^ ^ member setCharno_ter ^ ^ ^ ^ ^ ^ ^ 
int ancestorType = an.setCharno(n);

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name ancestorType_ter ^ ^ initializer MethodInvocation qualifier an_ter ^ ^ arguments MemberReference member n_ter ^ ^ ^ ^ member setSourceEncodedPosition_ter ^ ^ ^ ^ ^ ^ ^ 
int ancestorType = an.setSourceEncodedPosition(n);

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name ancestorType_ter ^ ^ initializer MethodInvocation qualifier an_ter ^ ^ arguments MemberReference member n_ter ^ ^ ^ ^ member setSourceEncodedPositionForTree_ter ^ ^ ^ ^ ^ ^ ^ 
int ancestorType = an.setSourceEncodedPositionForTree(n);

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name ancestorType_ter ^ ^ initializer MethodInvocation qualifier an_ter ^ ^ arguments MemberReference member n_ter ^ ^ ^ ^ member setSideEffectFlags_ter ^ ^ ^ ^ ^ ^ ^ 
int ancestorType = an.setSideEffectFlags(n);

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getChildCount_ter ^ ^ ^ ^ operandr Literal value 2_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isName_ter ^ ^ ^ ^ member getNext_ter ^ ^ ^ ^ ^ ^ ^ 
if((((n == parent.getFirstChild()) && (parent.getChildCount() == 2)) && n.getNext().isName())){
continue;
}

control EnhancedForControl var VariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name an_ter ^ ^ ^ ^ ^ ^ iterable MethodInvocation qualifier parent_ter ^ ^ member getAncestors_ter ^ ^ ^ ^ ^ ^ 
arg 
arg 
(Node an = ;
:parent.getAncestors())

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member ERROR_ter ^ ^ ^ ^ ^ ^ 
if((ancestorType == Token.ERROR)){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member RETURN_ter ^ ^ ^ ^ ^ ^ 
if((ancestorType == Token.RETURN)){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BITOR_ter ^ ^ ^ ^ ^ ^ 
if((ancestorType == Token.BITOR)){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BITXOR_ter ^ ^ ^ ^ ^ ^ 
if((ancestorType == Token.BITXOR)){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BITAND_ter ^ ^ ^ ^ ^ ^ 
if((ancestorType == Token.BITAND)){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EQ_ter ^ ^ ^ ^ ^ ^ 
if((ancestorType == Token.EQ)){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member NE_ter ^ ^ ^ ^ ^ ^ 
if((ancestorType == Token.NE)){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member LT_ter ^ ^ ^ ^ ^ ^ 
if((ancestorType == Token.LT)){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member LE_ter ^ ^ ^ ^ ^ ^ 
if((ancestorType == Token.LE)){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member GT_ter ^ ^ ^ ^ ^ ^ 
if((ancestorType == Token.GT)){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member GE_ter ^ ^ ^ ^ ^ ^ 
if((ancestorType == Token.GE)){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member LSH_ter ^ ^ ^ ^ ^ ^ 
if((ancestorType == Token.LSH)){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member RSH_ter ^ ^ ^ ^ ^ ^ 
if((ancestorType == Token.RSH)){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member URSH_ter ^ ^ ^ ^ ^ ^ 
if((ancestorType == Token.URSH)){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member ADD_ter ^ ^ ^ ^ ^ ^ 
if((ancestorType == Token.ADD)){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member SUB_ter ^ ^ ^ ^ ^ ^ 
if((ancestorType == Token.SUB)){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member MUL_ter ^ ^ ^ ^ ^ ^ 
if((ancestorType == Token.MUL)){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member DIV_ter ^ ^ ^ ^ ^ ^ 
if((ancestorType == Token.DIV)){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member MOD_ter ^ ^ ^ ^ ^ ^ 
if((ancestorType == Token.MOD)){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member NOT_ter ^ ^ ^ ^ ^ ^ 
if((ancestorType == Token.NOT)){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BITNOT_ter ^ ^ ^ ^ ^ ^ 
if((ancestorType == Token.BITNOT)){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member POS_ter ^ ^ ^ ^ ^ ^ 
if((ancestorType == Token.POS)){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member NEG_ter ^ ^ ^ ^ ^ ^ 
if((ancestorType == Token.NEG)){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member NEW_ter ^ ^ ^ ^ ^ ^ 
if((ancestorType == Token.NEW)){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member DELPROP_ter ^ ^ ^ ^ ^ ^ 
if((ancestorType == Token.DELPROP)){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member TYPEOF_ter ^ ^ ^ ^ ^ ^ 
if((ancestorType == Token.TYPEOF)){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member GETPROP_ter ^ ^ ^ ^ ^ ^ 
if((ancestorType == Token.GETPROP)){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member GETELEM_ter ^ ^ ^ ^ ^ ^ 
if((ancestorType == Token.GETELEM)){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member CALL_ter ^ ^ ^ ^ ^ ^ 
if((ancestorType == Token.CALL)){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member NAME_ter ^ ^ ^ ^ ^ ^ 
if((ancestorType == Token.NAME)){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member NUMBER_ter ^ ^ ^ ^ ^ ^ 
if((ancestorType == Token.NUMBER)){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member STRING_ter ^ ^ ^ ^ ^ ^ 
if((ancestorType == Token.STRING)){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member NULL_ter ^ ^ ^ ^ ^ ^ 
if((ancestorType == Token.NULL)){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member THIS_ter ^ ^ ^ ^ ^ ^ 
if((ancestorType == Token.THIS)){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member FALSE_ter ^ ^ ^ ^ ^ ^ 
if((ancestorType == Token.FALSE)){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member TRUE_ter ^ ^ ^ ^ ^ ^ 
if((ancestorType == Token.TRUE)){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member SHEQ_ter ^ ^ ^ ^ ^ ^ 
if((ancestorType == Token.SHEQ)){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member SHNE_ter ^ ^ ^ ^ ^ ^ 
if((ancestorType == Token.SHNE)){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member REGEXP_ter ^ ^ ^ ^ ^ ^ 
if((ancestorType == Token.REGEXP)){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member THROW_ter ^ ^ ^ ^ ^ ^ 
if((ancestorType == Token.THROW)){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member IN_ter ^ ^ ^ ^ ^ ^ 
if((ancestorType == Token.IN)){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member INSTANCEOF_ter ^ ^ ^ ^ ^ ^ 
if((ancestorType == Token.INSTANCEOF)){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member ARRAYLIT_ter ^ ^ ^ ^ ^ ^ 
if((ancestorType == Token.ARRAYLIT)){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member OBJECTLIT_ter ^ ^ ^ ^ ^ ^ 
if((ancestorType == Token.OBJECTLIT)){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member TRY_ter ^ ^ ^ ^ ^ ^ 
if((ancestorType == Token.TRY)){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member PARAM_LIST_ter ^ ^ ^ ^ ^ ^ 
if((ancestorType == Token.PARAM_LIST)){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member COMMA_ter ^ ^ ^ ^ ^ ^ 
if((ancestorType == Token.COMMA)){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member ASSIGN_ter ^ ^ ^ ^ ^ ^ 
if((ancestorType == Token.ASSIGN)){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member ASSIGN_BITOR_ter ^ ^ ^ ^ ^ ^ 
if((ancestorType == Token.ASSIGN_BITOR)){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member ASSIGN_BITXOR_ter ^ ^ ^ ^ ^ ^ 
if((ancestorType == Token.ASSIGN_BITXOR)){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member ASSIGN_BITAND_ter ^ ^ ^ ^ ^ ^ 
if((ancestorType == Token.ASSIGN_BITAND)){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member ASSIGN_LSH_ter ^ ^ ^ ^ ^ ^ 
if((ancestorType == Token.ASSIGN_LSH)){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member ASSIGN_RSH_ter ^ ^ ^ ^ ^ ^ 
if((ancestorType == Token.ASSIGN_RSH)){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member ASSIGN_URSH_ter ^ ^ ^ ^ ^ ^ 
if((ancestorType == Token.ASSIGN_URSH)){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member ASSIGN_ADD_ter ^ ^ ^ ^ ^ ^ 
if((ancestorType == Token.ASSIGN_ADD)){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member ASSIGN_SUB_ter ^ ^ ^ ^ ^ ^ 
if((ancestorType == Token.ASSIGN_SUB)){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member ASSIGN_MUL_ter ^ ^ ^ ^ ^ ^ 
if((ancestorType == Token.ASSIGN_MUL)){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member ASSIGN_DIV_ter ^ ^ ^ ^ ^ ^ 
if((ancestorType == Token.ASSIGN_DIV)){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member ASSIGN_MOD_ter ^ ^ ^ ^ ^ ^ 
if((ancestorType == Token.ASSIGN_MOD)){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member HOOK_ter ^ ^ ^ ^ ^ ^ 
if((ancestorType == Token.HOOK)){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member OR_ter ^ ^ ^ ^ ^ ^ 
if((ancestorType == Token.OR)){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member AND_ter ^ ^ ^ ^ ^ ^ 
if((ancestorType == Token.AND)){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member INC_ter ^ ^ ^ ^ ^ ^ 
if((ancestorType == Token.INC)){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member DEC_ter ^ ^ ^ ^ ^ ^ 
if((ancestorType == Token.DEC)){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member FUNCTION_ter ^ ^ ^ ^ ^ ^ 
if((ancestorType == Token.FUNCTION)){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member IF_ter ^ ^ ^ ^ ^ ^ 
if((ancestorType == Token.IF)){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member SWITCH_ter ^ ^ ^ ^ ^ ^ 
if((ancestorType == Token.SWITCH)){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member CASE_ter ^ ^ ^ ^ ^ ^ 
if((ancestorType == Token.CASE)){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member DEFAULT_CASE_ter ^ ^ ^ ^ ^ ^ 
if((ancestorType == Token.DEFAULT_CASE)){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member WHILE_ter ^ ^ ^ ^ ^ ^ 
if((ancestorType == Token.WHILE)){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member DO_ter ^ ^ ^ ^ ^ ^ 
if((ancestorType == Token.DO)){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member FOR_ter ^ ^ ^ ^ ^ ^ 
if((ancestorType == Token.FOR)){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BREAK_ter ^ ^ ^ ^ ^ ^ 
if((ancestorType == Token.BREAK)){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member CONTINUE_ter ^ ^ ^ ^ ^ ^ 
if((ancestorType == Token.CONTINUE)){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member VAR_ter ^ ^ ^ ^ ^ ^ 
if((ancestorType == Token.VAR)){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member WITH_ter ^ ^ ^ ^ ^ ^ 
if((ancestorType == Token.WITH)){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member CATCH_ter ^ ^ ^ ^ ^ ^ 
if((ancestorType == Token.CATCH)){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member VOID_ter ^ ^ ^ ^ ^ ^ 
if((ancestorType == Token.VOID)){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EMPTY_ter ^ ^ ^ ^ ^ ^ 
if((ancestorType == Token.EMPTY)){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ 
if((ancestorType == Token.BLOCK)){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member LABEL_ter ^ ^ ^ ^ ^ ^ 
if((ancestorType == Token.LABEL)){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ 
if((ancestorType == Token.EXPR_RESULT)){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member SCRIPT_ter ^ ^ ^ ^ ^ ^ 
if((ancestorType == Token.SCRIPT)){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member GETTER_DEF_ter ^ ^ ^ ^ ^ ^ 
if((ancestorType == Token.GETTER_DEF)){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member SETTER_DEF_ter ^ ^ ^ ^ ^ ^ 
if((ancestorType == Token.SETTER_DEF)){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member CONST_ter ^ ^ ^ ^ ^ ^ 
if((ancestorType == Token.CONST)){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member DEBUGGER_ter ^ ^ ^ ^ ^ ^ 
if((ancestorType == Token.DEBUGGER)){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member LABEL_NAME_ter ^ ^ ^ ^ ^ ^ 
if((ancestorType == Token.LABEL_NAME)){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member STRING_KEY_ter ^ ^ ^ ^ ^ ^ 
if((ancestorType == Token.STRING_KEY)){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member ANNOTATION_ter ^ ^ ^ ^ ^ ^ 
if((ancestorType == Token.ANNOTATION)){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member PIPE_ter ^ ^ ^ ^ ^ ^ 
if((ancestorType == Token.PIPE)){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member STAR_ter ^ ^ ^ ^ ^ ^ 
if((ancestorType == Token.STAR)){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EOC_ter ^ ^ ^ ^ ^ ^ 
if((ancestorType == Token.EOC)){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member QMARK_ter ^ ^ ^ ^ ^ ^ 
if((ancestorType == Token.QMARK)){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member ELLIPSIS_ter ^ ^ ^ ^ ^ ^ 
if((ancestorType == Token.ELLIPSIS)){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BANG_ter ^ ^ ^ ^ ^ ^ 
if((ancestorType == Token.BANG)){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EQUALS_ter ^ ^ ^ ^ ^ ^ 
if((ancestorType == Token.EQUALS)){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member LB_ter ^ ^ ^ ^ ^ ^ 
if((ancestorType == Token.LB)){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member LC_ter ^ ^ ^ ^ ^ ^ 
if((ancestorType == Token.LC)){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member COLON_ter ^ ^ ^ ^ ^ ^ 
if((ancestorType == Token.COLON)){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member DEFAULT_ter ^ ^ ^ ^ ^ ^ 
if((ancestorType == Token.DEFAULT)){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member GET_ter ^ ^ ^ ^ ^ ^ 
if((ancestorType == Token.GET)){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member LP_ter ^ ^ ^ ^ ^ ^ 
if((ancestorType == Token.LP)){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member SET_ter ^ ^ ^ ^ ^ ^ 
if((ancestorType == Token.SET)){

condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member COMMA_ter ^ ^ ^ ^ ^ ^ 
if((ancestorType != Token.COMMA)){


IfStatement condition MemberReference member ancestorType_ter ^ ^ ^ ^ ^ 
if(ancestorType){


condition BinaryOperation operator >=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member COMMA_ter ^ ^ ^ ^ ^ ^ 
if((ancestorType >= Token.COMMA)){

condition BinaryOperation operator >_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member COMMA_ter ^ ^ ^ ^ ^ ^ 
if((ancestorType > Token.COMMA)){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member FOR_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getChildCount_ter ^ ^ ^ ^ operandr Literal value 4_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((parent.getType() == Token.FOR) && (parent.getChildCount() == 4))){


IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getChildCount_ter ^ ^ ^ ^ operandr Literal value 2_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isName_ter ^ ^ ^ ^ member getNext_ter ^ ^ ^ ^ ^ ^ ^ 
if((((n == parent.getFirstChild()) && (parent.getChildCount() == 2)) && n.getNext().isName())){


IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getChildCount_ter ^ ^ ^ ^ operandr Literal value 2_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((n == parent.getFirstChild()) && (parent.getChildCount() == 2))){


condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference member ancestorType_ter ^ ^ ^ ^ ^ ^ 
if((ancestorType == ancestorType)){

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ ^ 
if((ancestorType != Token.EXPR_RESULT)){


IfStatement condition MemberReference prefix_operators !_ter ^ ^ member ancestorType_ter ^ ^ ^ ^ ^ 
if(!ancestorType){


IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ selectors MethodInvocation member getNext_ter ^ ^ ^ MethodInvocation member getNext_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((n == parent.getFirstChild()) || (n == parent.getFirstChild().getNext().getNext()))){


condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member an_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member COMMA_ter ^ ^ ^ ^ ^ ^ 
if((an == Token.COMMA)){

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.getType() != Token.EXPR_RESULT)){


condition BinaryOperation operator <=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member COMMA_ter ^ ^ ^ ^ ^ ^ 
if((ancestorType <= Token.COMMA)){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ 
if((ancestorType == parent)){

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getChildCount_ter ^ ^ ^ ^ operandr Literal value 2_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.getChildCount() == 2)){


IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.getType() != Token.BLOCK)){


IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ 
if((ancestorType != Token.BLOCK)){


IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member COMMA_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType == Token.COMMA) && (ancestorType != Token.BLOCK))){


IfStatement condition MethodInvocation qualifier ancestorType_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ ^ 
if(ancestorType.isEmpty()){


condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member COMMA_ter ^ ^ ^ ^ ^ ^ 
if((ancestorType < Token.COMMA)){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member COMMA_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType == Token.COMMA) && (parent.getType() != Token.BLOCK))){


IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member COMMA_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((ancestorType && (ancestorType == Token.COMMA))){


condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier parent_ter ^ ^ member COMMA_ter ^ ^ ^ ^ ^ ^ 
if((ancestorType == parent.COMMA)){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member COMMA_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ selectors MethodInvocation member getNext_ter ^ ^ ^ MethodInvocation member getNext_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType == Token.COMMA) && ((n == parent.getFirstChild()) || (n == parent.getFirstChild().getNext().getNext())))){


condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member COMMA_ter ^ ^ ^ ^ ^ ^ 
if((parent == Token.COMMA)){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member COMMA_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType == Token.COMMA) && (parent == gramps.getFirstChild()))){


IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member getAncestors_ter ^ ^ ^ ^ ^ 
if(parent.getAncestors()){


BreakStatement_ter ^ 
break;

IfStatement condition MemberReference prefix_operators !_ter ^ ^ member ancestorType_ter ^ ^ ^ ^ ^ 
if(!ancestorType){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference member COMMA_ter ^ ^ ^ ^ ^ ^ 
if((ancestorType == COMMA)){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member isResultUsed_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member COMMA_ter ^ ^ ^ ^ ^ ^ 
if((isResultUsed == Token.COMMA)){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference member an_ter ^ ^ ^ ^ ^ ^ 
if((ancestorType == an)){

condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member COMMA_ter ^ ^ ^ ^ ^ ^ 
if((ancestorType && Token.COMMA)){

ReturnStatement_ter ^ 
if (true) { return;
 }

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ 
if((ancestorType != Token.BLOCK)){


IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ ^ 
if((ancestorType != Token.EXPR_RESULT)){


condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType == Token.BLOCK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member ERROR_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.ERROR) && (ancestorType != Token.BLOCK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member RETURN_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.RETURN) && (ancestorType != Token.BLOCK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BITOR_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.BITOR) && (ancestorType != Token.BLOCK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BITXOR_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.BITXOR) && (ancestorType != Token.BLOCK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BITAND_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.BITAND) && (ancestorType != Token.BLOCK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EQ_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EQ) && (ancestorType != Token.BLOCK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member NE_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.NE) && (ancestorType != Token.BLOCK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member LT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.LT) && (ancestorType != Token.BLOCK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member LE_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.LE) && (ancestorType != Token.BLOCK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member GT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.GT) && (ancestorType != Token.BLOCK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member GE_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.GE) && (ancestorType != Token.BLOCK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member LSH_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.LSH) && (ancestorType != Token.BLOCK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member RSH_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.RSH) && (ancestorType != Token.BLOCK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member URSH_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.URSH) && (ancestorType != Token.BLOCK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member ADD_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.ADD) && (ancestorType != Token.BLOCK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member SUB_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.SUB) && (ancestorType != Token.BLOCK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member MUL_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.MUL) && (ancestorType != Token.BLOCK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member DIV_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.DIV) && (ancestorType != Token.BLOCK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member MOD_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.MOD) && (ancestorType != Token.BLOCK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member NOT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.NOT) && (ancestorType != Token.BLOCK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BITNOT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.BITNOT) && (ancestorType != Token.BLOCK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member POS_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.POS) && (ancestorType != Token.BLOCK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member NEG_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.NEG) && (ancestorType != Token.BLOCK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member NEW_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.NEW) && (ancestorType != Token.BLOCK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member DELPROP_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.DELPROP) && (ancestorType != Token.BLOCK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member TYPEOF_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.TYPEOF) && (ancestorType != Token.BLOCK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member GETPROP_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.GETPROP) && (ancestorType != Token.BLOCK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member GETELEM_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.GETELEM) && (ancestorType != Token.BLOCK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member CALL_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.CALL) && (ancestorType != Token.BLOCK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member NAME_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.NAME) && (ancestorType != Token.BLOCK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member NUMBER_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.NUMBER) && (ancestorType != Token.BLOCK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member STRING_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.STRING) && (ancestorType != Token.BLOCK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member NULL_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.NULL) && (ancestorType != Token.BLOCK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member THIS_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.THIS) && (ancestorType != Token.BLOCK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member FALSE_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.FALSE) && (ancestorType != Token.BLOCK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member TRUE_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.TRUE) && (ancestorType != Token.BLOCK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member SHEQ_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.SHEQ) && (ancestorType != Token.BLOCK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member SHNE_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.SHNE) && (ancestorType != Token.BLOCK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member REGEXP_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.REGEXP) && (ancestorType != Token.BLOCK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member THROW_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.THROW) && (ancestorType != Token.BLOCK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member IN_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.IN) && (ancestorType != Token.BLOCK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member INSTANCEOF_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.INSTANCEOF) && (ancestorType != Token.BLOCK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member ARRAYLIT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.ARRAYLIT) && (ancestorType != Token.BLOCK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member OBJECTLIT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.OBJECTLIT) && (ancestorType != Token.BLOCK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member TRY_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.TRY) && (ancestorType != Token.BLOCK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member PARAM_LIST_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.PARAM_LIST) && (ancestorType != Token.BLOCK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member COMMA_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.COMMA) && (ancestorType != Token.BLOCK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member ASSIGN_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.ASSIGN) && (ancestorType != Token.BLOCK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member ASSIGN_BITOR_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.ASSIGN_BITOR) && (ancestorType != Token.BLOCK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member ASSIGN_BITXOR_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.ASSIGN_BITXOR) && (ancestorType != Token.BLOCK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member ASSIGN_BITAND_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.ASSIGN_BITAND) && (ancestorType != Token.BLOCK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member ASSIGN_LSH_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.ASSIGN_LSH) && (ancestorType != Token.BLOCK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member ASSIGN_RSH_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.ASSIGN_RSH) && (ancestorType != Token.BLOCK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member ASSIGN_URSH_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.ASSIGN_URSH) && (ancestorType != Token.BLOCK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member ASSIGN_ADD_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.ASSIGN_ADD) && (ancestorType != Token.BLOCK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member ASSIGN_SUB_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.ASSIGN_SUB) && (ancestorType != Token.BLOCK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member ASSIGN_MUL_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.ASSIGN_MUL) && (ancestorType != Token.BLOCK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member ASSIGN_DIV_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.ASSIGN_DIV) && (ancestorType != Token.BLOCK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member ASSIGN_MOD_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.ASSIGN_MOD) && (ancestorType != Token.BLOCK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member HOOK_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.HOOK) && (ancestorType != Token.BLOCK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member OR_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.OR) && (ancestorType != Token.BLOCK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member AND_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.AND) && (ancestorType != Token.BLOCK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member INC_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.INC) && (ancestorType != Token.BLOCK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member DEC_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.DEC) && (ancestorType != Token.BLOCK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member FUNCTION_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.FUNCTION) && (ancestorType != Token.BLOCK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member IF_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.IF) && (ancestorType != Token.BLOCK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member SWITCH_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.SWITCH) && (ancestorType != Token.BLOCK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member CASE_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.CASE) && (ancestorType != Token.BLOCK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member DEFAULT_CASE_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.DEFAULT_CASE) && (ancestorType != Token.BLOCK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member WHILE_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.WHILE) && (ancestorType != Token.BLOCK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member DO_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.DO) && (ancestorType != Token.BLOCK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member FOR_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.FOR) && (ancestorType != Token.BLOCK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BREAK_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.BREAK) && (ancestorType != Token.BLOCK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member CONTINUE_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.CONTINUE) && (ancestorType != Token.BLOCK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member VAR_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.VAR) && (ancestorType != Token.BLOCK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member WITH_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.WITH) && (ancestorType != Token.BLOCK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member CATCH_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.CATCH) && (ancestorType != Token.BLOCK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member VOID_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.VOID) && (ancestorType != Token.BLOCK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EMPTY_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EMPTY) && (ancestorType != Token.BLOCK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.BLOCK) && (ancestorType != Token.BLOCK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member LABEL_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.LABEL) && (ancestorType != Token.BLOCK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType != Token.BLOCK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member SCRIPT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.SCRIPT) && (ancestorType != Token.BLOCK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member GETTER_DEF_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.GETTER_DEF) && (ancestorType != Token.BLOCK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member SETTER_DEF_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.SETTER_DEF) && (ancestorType != Token.BLOCK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member CONST_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.CONST) && (ancestorType != Token.BLOCK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member DEBUGGER_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.DEBUGGER) && (ancestorType != Token.BLOCK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member LABEL_NAME_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.LABEL_NAME) && (ancestorType != Token.BLOCK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member STRING_KEY_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.STRING_KEY) && (ancestorType != Token.BLOCK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member ANNOTATION_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.ANNOTATION) && (ancestorType != Token.BLOCK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member PIPE_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.PIPE) && (ancestorType != Token.BLOCK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member STAR_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.STAR) && (ancestorType != Token.BLOCK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EOC_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EOC) && (ancestorType != Token.BLOCK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member QMARK_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.QMARK) && (ancestorType != Token.BLOCK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member ELLIPSIS_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.ELLIPSIS) && (ancestorType != Token.BLOCK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BANG_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.BANG) && (ancestorType != Token.BLOCK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EQUALS_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EQUALS) && (ancestorType != Token.BLOCK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member LB_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.LB) && (ancestorType != Token.BLOCK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member LC_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.LC) && (ancestorType != Token.BLOCK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member COLON_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.COLON) && (ancestorType != Token.BLOCK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member DEFAULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.DEFAULT) && (ancestorType != Token.BLOCK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member GET_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.GET) && (ancestorType != Token.BLOCK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member LP_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.LP) && (ancestorType != Token.BLOCK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member SET_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.SET) && (ancestorType != Token.BLOCK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator >=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType >= Token.BLOCK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member ERROR_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType != Token.ERROR))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member RETURN_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType != Token.RETURN))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BITOR_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType != Token.BITOR))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BITXOR_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType != Token.BITXOR))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BITAND_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType != Token.BITAND))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EQ_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType != Token.EQ))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member NE_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType != Token.NE))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member LT_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType != Token.LT))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member LE_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType != Token.LE))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member GT_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType != Token.GT))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member GE_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType != Token.GE))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member LSH_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType != Token.LSH))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member RSH_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType != Token.RSH))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member URSH_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType != Token.URSH))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member ADD_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType != Token.ADD))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member SUB_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType != Token.SUB))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member MUL_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType != Token.MUL))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member DIV_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType != Token.DIV))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member MOD_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType != Token.MOD))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member NOT_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType != Token.NOT))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BITNOT_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType != Token.BITNOT))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member POS_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType != Token.POS))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member NEG_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType != Token.NEG))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member NEW_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType != Token.NEW))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member DELPROP_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType != Token.DELPROP))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member TYPEOF_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType != Token.TYPEOF))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member GETPROP_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType != Token.GETPROP))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member GETELEM_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType != Token.GETELEM))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member CALL_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType != Token.CALL))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member NAME_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType != Token.NAME))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member NUMBER_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType != Token.NUMBER))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member STRING_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType != Token.STRING))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member NULL_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType != Token.NULL))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member THIS_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType != Token.THIS))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member FALSE_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType != Token.FALSE))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member TRUE_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType != Token.TRUE))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member SHEQ_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType != Token.SHEQ))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member SHNE_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType != Token.SHNE))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member REGEXP_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType != Token.REGEXP))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member THROW_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType != Token.THROW))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member IN_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType != Token.IN))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member INSTANCEOF_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType != Token.INSTANCEOF))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member ARRAYLIT_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType != Token.ARRAYLIT))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member OBJECTLIT_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType != Token.OBJECTLIT))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member TRY_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType != Token.TRY))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member PARAM_LIST_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType != Token.PARAM_LIST))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member COMMA_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType != Token.COMMA))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member ASSIGN_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType != Token.ASSIGN))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member ASSIGN_BITOR_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType != Token.ASSIGN_BITOR))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member ASSIGN_BITXOR_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType != Token.ASSIGN_BITXOR))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member ASSIGN_BITAND_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType != Token.ASSIGN_BITAND))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member ASSIGN_LSH_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType != Token.ASSIGN_LSH))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member ASSIGN_RSH_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType != Token.ASSIGN_RSH))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member ASSIGN_URSH_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType != Token.ASSIGN_URSH))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member ASSIGN_ADD_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType != Token.ASSIGN_ADD))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member ASSIGN_SUB_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType != Token.ASSIGN_SUB))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member ASSIGN_MUL_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType != Token.ASSIGN_MUL))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member ASSIGN_DIV_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType != Token.ASSIGN_DIV))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member ASSIGN_MOD_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType != Token.ASSIGN_MOD))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member HOOK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType != Token.HOOK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member OR_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType != Token.OR))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member AND_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType != Token.AND))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member INC_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType != Token.INC))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member DEC_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType != Token.DEC))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member FUNCTION_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType != Token.FUNCTION))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member IF_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType != Token.IF))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member SWITCH_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType != Token.SWITCH))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member CASE_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType != Token.CASE))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member DEFAULT_CASE_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType != Token.DEFAULT_CASE))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member WHILE_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType != Token.WHILE))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member DO_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType != Token.DO))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member FOR_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType != Token.FOR))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BREAK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType != Token.BREAK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member CONTINUE_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType != Token.CONTINUE))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member VAR_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType != Token.VAR))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member WITH_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType != Token.WITH))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member CATCH_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType != Token.CATCH))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member VOID_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType != Token.VOID))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EMPTY_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType != Token.EMPTY))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member LABEL_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType != Token.LABEL))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType != Token.EXPR_RESULT))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member SCRIPT_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType != Token.SCRIPT))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member GETTER_DEF_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType != Token.GETTER_DEF))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member SETTER_DEF_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType != Token.SETTER_DEF))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member CONST_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType != Token.CONST))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member DEBUGGER_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType != Token.DEBUGGER))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member LABEL_NAME_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType != Token.LABEL_NAME))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member STRING_KEY_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType != Token.STRING_KEY))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member ANNOTATION_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType != Token.ANNOTATION))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member PIPE_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType != Token.PIPE))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member STAR_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType != Token.STAR))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EOC_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType != Token.EOC))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member QMARK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType != Token.QMARK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member ELLIPSIS_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType != Token.ELLIPSIS))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BANG_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType != Token.BANG))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EQUALS_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType != Token.EQUALS))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member LB_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType != Token.LB))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member LC_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType != Token.LC))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member COLON_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType != Token.COLON))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member DEFAULT_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType != Token.DEFAULT))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member GET_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType != Token.GET))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member LP_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType != Token.LP))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member SET_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType != Token.SET))){

condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) || (ancestorType != Token.BLOCK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator >_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType > Token.BLOCK))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((ancestorType != Token.EXPR_RESULT) && (ancestorType != Token.BLOCK)) && (ancestorType != Token.BLOCK))){


IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType != Token.BLOCK))){


IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getChildCount_ter ^ ^ ^ ^ operandr Literal value 2_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member isName_ter ^ ^ ^ ^ member getNext_ter ^ ^ ^ ^ ^ ^ ^ 
if((((n == parent.getFirstChild()) && (parent.getChildCount() == 2)) && n.getNext().isName())){


condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType <= Token.BLOCK))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getChildCount_ter ^ ^ ^ ^ operandr Literal value 2_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((n == parent.getFirstChild()) && (parent.getChildCount() == 2))){


condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType < Token.BLOCK))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member FOR_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getChildCount_ter ^ ^ ^ ^ operandr Literal value 4_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((parent.getType() == Token.FOR) && (parent.getChildCount() == 4))){


IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ selectors MethodInvocation member getNext_ter ^ ^ ^ MethodInvocation member getNext_ter ^ ^ ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((n == parent.getFirstChild()) || (n == parent.getFirstChild().getNext().getNext()))){




IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent == gramps.getFirstChild())){


condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier parent_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != parent.EXPR_RESULT) && (ancestorType != Token.BLOCK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier n_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != n.EXPR_RESULT) && (ancestorType != Token.BLOCK))){

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((n == parent.getFirstChild())){


IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getChildCount_ter ^ ^ ^ ^ operandr Literal value 2_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent.getChildCount() == 2)){


IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((((ancestorType != Token.EXPR_RESULT) && (ancestorType != Token.BLOCK)) && (ancestorType != Token.BLOCK)) && (ancestorType != Token.BLOCK))){


condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier n_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != n.BLOCK) && (ancestorType != Token.BLOCK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier parent_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType != parent.EXPR_RESULT))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier n_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType != n.EXPR_RESULT))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier parent_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != parent.BLOCK) && (ancestorType != Token.BLOCK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != parent) && (ancestorType != Token.BLOCK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member an_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (an != Token.BLOCK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference member ancestorType_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType != ancestorType))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != EXPR_RESULT) && (ancestorType != Token.BLOCK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType != parent))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier n_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType != n.BLOCK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (parent != Token.BLOCK))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType && Token.BLOCK))){

ReturnStatement_ter ^ 
if (true) { return;
 }

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType || Token.BLOCK))){

BreakStatement_ter ^ 
break;

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator &_ter ^ ^ operandl MemberReference member ancestorType_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((ancestorType != Token.EXPR_RESULT) && (ancestorType & Token.BLOCK))){

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getJSDocInfo_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.getJSDocInfo() != null)){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ ^ 
if(n.isQualifiedName()){

condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getJSDocInfo_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((n.isQualifiedName() && (n.getJSDocInfo() == null))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getCompiler_ter ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getJSDocInfo_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((n.getCompiler() && (n.getJSDocInfo() != null))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getJSDocInfo_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((n.isQualifiedName() && (n.getJSDocInfo() != null))){


condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getJSDocInfo_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((n.getType() && (n.getJSDocInfo() != null))){
IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MemberReference member isSimpleOp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier NodeUtil_ter ^ ^ arguments MemberReference member n_ter ^ ^ ^ MethodInvocation qualifier t_ter ^ ^ member getCompiler_ter ^ ^ ^ ^ member mayHaveSideEffects_ter ^ ^ ^ ^ ^ ^ ^ 
if((isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getJSDocInfo_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getJSDocInfo_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((n.isQualifiedName() && (n.getJSDocInfo() != null)) && (n.getJSDocInfo() != null))){

IfStatement condition BinaryOperation operator +_ter ^ ^ operandl Literal value <string>_ter ^ ^ ^ ^ operandr MethodInvocation qualifier Token_ter ^ ^ selectors MethodInvocation member toLowerCase_ter ^ ^ ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getType_ter ^ ^ ^ ^ member name_ter ^ ^ ^ ^ ^ ^ ^ 
if(("null" + Token.name(n.getType()).toLowerCase())){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member getJSDocInfo_ter ^ ^ ^ ^ ^ 
if(n.getJSDocInfo()){

condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isString_ter ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getJSDocInfo_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((n.isString() && (n.getJSDocInfo() != null))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getName_ter ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getJSDocInfo_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((n.getName() && (n.getJSDocInfo() != null))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isExprResult_ter ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getJSDocInfo_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((n.isExprResult() && (n.getJSDocInfo() != null))){
ReturnStatement_ter ^ 
if (true) { return;
 }

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isExprResult_ter ^ ^ ^ ^ ^ 
if(n.isExprResult()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier NodeUtil_ter ^ ^ arguments MemberReference member n_ter ^ ^ ^ ^ member isStatement_ter ^ ^ ^ ^ ^ 
if(!NodeUtil.isStatement(n)){

IfStatement condition MemberReference member isSimpleOp_ter ^ ^ ^ ^ ^ 
if(isSimpleOp){

condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getCompiler_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((n.isQualifiedName() && (n.getCompiler() != null))){
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ 
if(n.isString()){

StatementExpression expression MethodInvocation qualifier t_ter ^ ^ selectors MethodInvocation arguments MethodInvocation qualifier t_ter ^ ^ arguments MemberReference member n_ter ^ ^ ^ MemberReference member level_ter ^ ^ ^ MemberReference member USELESS_CODE_ERROR_ter ^ ^ ^ MemberReference member msg_ter ^ ^ ^ ^ member makeError_ter ^ ^ ^ ^ member report_ter ^ ^ ^ ^ member getCompiler_ter ^ ^ ^ ^ ^ 
t.getCompiler().report(t.makeError(n, level, USELESS_CODE_ERROR, msg));

StatementExpression expression Assignment expressionl MemberReference member msg_ter ^ ^ ^ ^ value BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl Literal value <string>_ter ^ ^ ^ ^ operandr MethodInvocation qualifier Token_ter ^ ^ selectors MethodInvocation member toLowerCase_ter ^ ^ ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getType_ter ^ ^ ^ ^ member name_ter ^ ^ ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
msg = (("null" + Token.name(n.getType()).toLowerCase()) + "null");

StatementExpression expression MethodInvocation qualifier problemNodes_ter ^ ^ arguments MemberReference member n_ter ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
problemNodes.add(n);

StatementExpression expression Assignment expressionl MemberReference member msg_ter ^ ^ ^ ^ value Literal value <string>_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
msg = "null";

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference prefix_operators !_ter ^ ^ member isResultUsed_ter ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MemberReference member isSimpleOp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier NodeUtil_ter ^ ^ arguments MemberReference member n_ter ^ ^ ^ MethodInvocation qualifier t_ter ^ ^ member getCompiler_ter ^ ^ ^ ^ member mayHaveSideEffects_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((!isResultUsed && (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler())))){

condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((n.isQualifiedName() && (n.getType() != null))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getJSDocInfo_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((n.isQualifiedName() || (n.getJSDocInfo() != null))){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getJSDocInfo_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getJSDocInfo_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getJSDocInfo_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((n.isQualifiedName() && (n.getJSDocInfo() != null)) && (n.getJSDocInfo() != null)) && (n.getJSDocInfo() != null))){

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getJSDocInfo_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.getJSDocInfo() != null)){

condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier isSimpleOp_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getJSDocInfo_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((isSimpleOp.isQualifiedName() && (n.getJSDocInfo() != null))){
StatementExpression expression MethodInvocation qualifier n_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ ^ 
n.isQualifiedName();


condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ operandr BinaryOperation operator >_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getJSDocInfo_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((n.isQualifiedName() && (n.getJSDocInfo() > null))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ operandr BinaryOperation operator >=_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getJSDocInfo_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((n.isQualifiedName() && (n.getJSDocInfo() >= null))){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getJSDocInfo_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getJSDocInfo_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((n.isQualifiedName() && ((n.getJSDocInfo() != null) && (n.getJSDocInfo() != null)))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getJSDocInfo_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MemberReference member isSimpleOp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier NodeUtil_ter ^ ^ arguments MemberReference member n_ter ^ ^ ^ MethodInvocation qualifier t_ter ^ ^ member getCompiler_ter ^ ^ ^ ^ member mayHaveSideEffects_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((n.isQualifiedName() && (n.getJSDocInfo() != null)) && (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler())))){

condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((n.isQualifiedName() && (n.isQualifiedName() != null))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isString_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((n.isQualifiedName() && (n.isString() != null))){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getJSDocInfo_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((n.isQualifiedName() && (n.getJSDocInfo() != null))){

StatementExpression expression MethodInvocation qualifier problemNodes_ter ^ ^ arguments MemberReference member n_ter ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
problemNodes.add(n);


IfStatement condition BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl Literal value <string>_ter ^ ^ ^ ^ operandr MethodInvocation qualifier Token_ter ^ ^ selectors MethodInvocation member toLowerCase_ter ^ ^ ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getType_ter ^ ^ ^ ^ member name_ter ^ ^ ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ 
if((("null" + Token.name(n.getType()).toLowerCase()) + "null")){

StatementExpression expression MethodInvocation member protectSideEffects_ter ^ ^ ^ ^ ^ 
protectSideEffects();

StatementExpression expression MethodInvocation member addExtern_ter ^ ^ ^ ^ ^ 
addExtern();

StatementExpression expression Assignment expressionl MemberReference member msg_ter ^ ^ ^ ^ value Literal value <string>_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
msg = "null";


condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isExprResult_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((n.isQualifiedName() && (n.isExprResult() != null))){
StatementExpression expression Assignment expressionl MemberReference member msg_ter ^ ^ ^ ^ value BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl Literal value <string>_ter ^ ^ ^ ^ operandr MethodInvocation qualifier Token_ter ^ ^ selectors MethodInvocation member toLowerCase_ter ^ ^ ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getType_ter ^ ^ ^ ^ member name_ter ^ ^ ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
msg = (("null" + Token.name(n.getType()).toLowerCase()) + "null");


IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getJSDocInfo_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getJSDocInfo_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((n.isQualifiedName() && ((n.getJSDocInfo() != null) || (n.getJSDocInfo() != null)))){


ReturnStatement_ter ^ 
if (true) { return;
 }

StatementExpression expression Assignment expressionl MemberReference member msg_ter ^ ^ ^ ^ value Literal value <string>_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
msg = "null";

StatementExpression expression Assignment expressionl MemberReference member msg_ter ^ ^ ^ ^ value BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl Literal value <string>_ter ^ ^ ^ ^ operandr MethodInvocation qualifier Token_ter ^ ^ selectors MethodInvocation member toLowerCase_ter ^ ^ ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getType_ter ^ ^ ^ ^ member name_ter ^ ^ ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
msg = (("null" + Token.name(n.getType()).toLowerCase()) + "null");

StatementExpression expression MethodInvocation qualifier t_ter ^ ^ selectors MethodInvocation arguments MethodInvocation qualifier t_ter ^ ^ arguments MemberReference member n_ter ^ ^ ^ MemberReference member level_ter ^ ^ ^ MemberReference member USELESS_CODE_ERROR_ter ^ ^ ^ MemberReference member msg_ter ^ ^ ^ ^ member makeError_ter ^ ^ ^ ^ member report_ter ^ ^ ^ ^ member getCompiler_ter ^ ^ ^ ^ ^ 
t.getCompiler().report(t.makeError(n, level, USELESS_CODE_ERROR, msg));

StatementExpression expression MethodInvocation qualifier problemNodes_ter ^ ^ arguments MemberReference member n_ter ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
problemNodes.add(n);

condition MethodInvocation qualifier n_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ 
if(n.isQualifiedName()){

condition MethodInvocation qualifier n_ter ^ ^ member isString_ter ^ ^ ^ ^ 
if(n.isString()){

condition MethodInvocation qualifier n_ter ^ ^ member toLowerCase_ter ^ ^ ^ ^ 
if(n.toLowerCase()){

condition MethodInvocation qualifier n_ter ^ ^ member getCompiler_ter ^ ^ ^ ^ 
if(n.getCompiler()){

StatementExpression expression MethodInvocation member protectSideEffects_ter ^ ^ ^ ^ ^ 
protectSideEffects();

StatementExpression expression MethodInvocation member addExtern_ter ^ ^ ^ ^ ^ 
addExtern();

condition MethodInvocation qualifier n_ter ^ ^ member getJSDocInfo_ter ^ ^ ^ ^ 
if(n.getJSDocInfo()){

IfStatement condition MemberReference member isSimpleOp_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(isSimpleOp){
return;
}
condition MethodInvocation qualifier n_ter ^ ^ member makeError_ter ^ ^ ^ ^ 
if(n.makeError()){

IfStatement condition MemberReference member isSimpleOp_ter ^ ^ ^ ^ ^ 
if(isSimpleOp){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(n.isString()){
return;
}
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isExprResult_ter ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getJSDocInfo_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((n.isExprResult() && (n.getJSDocInfo() != null))){


IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getJSDocInfo_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if((n.getJSDocInfo() != null)){
return;
}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ ^ 
if(n.isQualifiedName()){


IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isExprResult_ter ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MemberReference member isSimpleOp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier NodeUtil_ter ^ ^ arguments MemberReference member n_ter ^ ^ ^ MethodInvocation qualifier t_ter ^ ^ member getCompiler_ter ^ ^ ^ ^ member mayHaveSideEffects_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((n.isExprResult() && (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler())))){


IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier t_ter ^ ^ member isExprResult_ter ^ ^ ^ ^ ^ 
if(!t.isExprResult()){


BreakStatement_ter ^ 
break;

condition MethodInvocation qualifier isSimpleOp_ter ^ ^ member isExprResult_ter ^ ^ ^ ^ 
if(isSimpleOp.isExprResult()){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isExprResult_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isQualifiedName() && n.isExprResult())){


StatementExpression expression MethodInvocation qualifier t_ter ^ ^ member protectSideEffects_ter ^ ^ ^ ^ ^ 
t.protectSideEffects();

StatementExpression expression MethodInvocation qualifier t_ter ^ ^ member addExtern_ter ^ ^ ^ ^ ^ 
t.addExtern();

IfStatement condition BinaryOperation operator +_ter ^ ^ operandl Literal value <string>_ter ^ ^ ^ ^ operandr MethodInvocation qualifier Token_ter ^ ^ selectors MethodInvocation member toLowerCase_ter ^ ^ ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getType_ter ^ ^ ^ ^ member name_ter ^ ^ ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(("null" + Token.name(n.getType()).toLowerCase())){
return;
}
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference prefix_operators !_ter ^ ^ member isResultUsed_ter ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MemberReference member isSimpleOp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier NodeUtil_ter ^ ^ arguments MemberReference member n_ter ^ ^ ^ MethodInvocation qualifier t_ter ^ ^ member getCompiler_ter ^ ^ ^ ^ member mayHaveSideEffects_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if((!isResultUsed && (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler())))){
return;
}
IfStatement condition BinaryOperation operator +_ter ^ ^ operandl Literal value <string>_ter ^ ^ ^ ^ operandr MethodInvocation qualifier Token_ter ^ ^ selectors MethodInvocation member toLowerCase_ter ^ ^ ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getType_ter ^ ^ ^ ^ member name_ter ^ ^ ^ ^ ^ ^ ^ 
if(("null" + Token.name(n.getType()).toLowerCase())){


IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getJSDocInfo_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if((n.isQualifiedName() && (n.getJSDocInfo() != null))){
return;
}
IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getJSDocInfo_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.getJSDocInfo() != null)){


IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier NodeUtil_ter ^ ^ arguments MemberReference member n_ter ^ ^ ^ ^ member isStatement_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(!NodeUtil.isStatement(n)){
return;
}
IfStatement condition MethodInvocation qualifier t_ter ^ ^ member isExprResult_ter ^ ^ ^ ^ ^ 
if(t.isExprResult()){


StatementExpression expression MethodInvocation qualifier NodeUtil_ter ^ ^ member protectSideEffects_ter ^ ^ ^ ^ ^ 
NodeUtil.protectSideEffects();

StatementExpression expression MethodInvocation qualifier NodeUtil_ter ^ ^ member addExtern_ter ^ ^ ^ ^ ^ 
NodeUtil.addExtern();

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isExprResult_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isExprResult_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isExprResult() && n.isExprResult())){


IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier Token_ter ^ ^ member isExprResult_ter ^ ^ ^ ^ ^ 
if(!Token.isExprResult()){


IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ 
if(n.isString()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isExprResult_ter ^ ^ ^ ^ ^ 
if(!n.isExprResult()){


StatementExpression expression MethodInvocation qualifier t_ter ^ ^ selectors MethodInvocation arguments MethodInvocation qualifier t_ter ^ ^ arguments MemberReference member n_ter ^ ^ ^ MemberReference member level_ter ^ ^ ^ MemberReference member USELESS_CODE_ERROR_ter ^ ^ ^ MemberReference member msg_ter ^ ^ ^ ^ member makeError_ter ^ ^ ^ ^ member report_ter ^ ^ ^ ^ member getCompiler_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
t.getCompiler().report(t.makeError(n, level, USELESS_CODE_ERROR, msg));
return;

condition MethodInvocation qualifier n_ter ^ ^ member isExprResult_ter ^ ^ ^ ^ 
if(n.isExprResult()){

condition MethodInvocation qualifier t_ter ^ ^ member isExprResult_ter ^ ^ ^ ^ 
if(t.isExprResult()){

condition MethodInvocation qualifier msg_ter ^ ^ member isExprResult_ter ^ ^ ^ ^ 
if(msg.isExprResult()){

ContinueStatement_ter ^ 
continue;

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference prefix_operators !_ter ^ ^ member isResultUsed_ter ^ ^ ^ ^ operandr BinaryOperation operator ||_ter ^ ^ operandl MemberReference member isSimpleOp_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier NodeUtil_ter ^ ^ arguments MemberReference member n_ter ^ ^ ^ MethodInvocation qualifier t_ter ^ ^ member getCompiler_ter ^ ^ ^ ^ member mayHaveSideEffects_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((!isResultUsed && (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler())))){

stderr: 