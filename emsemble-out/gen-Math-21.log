stdout: else_statement -> BlockStatement
using GPU
p
path org.apache.commons.math3.linear.RectangularCholeskyDecomposition
RectangularCholeskyDecomposition
Position(line=62, column=12)
FOUND IT!
path org.apache.commons.math3.linear.RectangularCholeskyDecomposition
RectangularCholeskyDecomposition
Position(line=62, column=12)
FOUND IT!
[{'bugid': 'Math-21', 'treeroot': <Searchnode.Node object at 0x7f6439572050>, 'troot': <Searchnode.Node object at 0x7f644d1a7ed0>, 'oldcode': '                    c[ii][ii] -= e * e;', 'filepath': 'buggy/Math-21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java', 'subroot': <Searchnode.Node object at 0x7f643946c710>, 'vardic': {'RectangularCholeskyDecomposition_ter': 'meth0', 'sqrt_ter': 'loc0', 'inverse_ter': 'loc1', 'i_ter': 'loc2', 'ii_ter': 'loc3', 'e_ter': 'loc4', 'j_ter': 'loc5', 'ij_ter': 'loc6', 'f_ter': 'loc7'}, 'typedic': {'sqrt_ter': 'double', 'inverse_ter': 'double', 'i_ter': 'int', 'ii_ter': 'int', 'e_ter': 'double', 'j_ter': 'int', 'ij_ter': 'int', 'f_ter': 'double'}, 'idss': 'Math-21', 'classname': 'org.apache.commons.math3.linear.RectangularCholeskyDecomposition', 'precode': '/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the "License"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.commons.math3.linear;\n\nimport org.apache.commons.math3.util.FastMath;\n\n/**\n * Calculates the rectangular Cholesky decomposition of a matrix.\n * <p>The rectangular Cholesky decomposition of a real symmetric positive\n * semidefinite matrix A consists of a rectangular matrix B with the same\n * number of rows such that: A is almost equal to BB<sup>T</sup>, depending\n * on a user-defined tolerance. In a sense, this is the square root of A.</p>\n * <p>The difference with respect to the regular {@link CholeskyDecomposition}\n * is that rows/columns may be permuted (hence the rectangular shape instead\n * of the traditional triangular shape) and there is a threshold to ignore\n * small diagonal elements. This is used for example to generate {@link\n * org.apache.commons.math3.random.CorrelatedRandomVectorGenerator correlated\n * random n-dimensions vectors} in a p-dimension subspace (p < n).\n * In other words, it allows generating random vectors from a covariance\n * matrix that is only positive semidefinite, and not positive definite.</p>\n * <p>Rectangular Cholesky decomposition is <em>not</em> suited for solving\n * linear systems, so it does not provide any {@link DecompositionSolver\n * decomposition solver}.</p>\n *\n * @see <a href="http://mathworld.wolfram.com/CholeskyDecomposition.html">MathWorld</a>\n * @see <a href="http://en.wikipedia.org/wiki/Cholesky_decomposition">Wikipedia</a>\n * @version $Id$\n * @since 2.0 (changed to concrete class in 3.0)\n */\npublic class RectangularCholeskyDecomposition {\n\n    /** Permutated Cholesky root of the symmetric positive semidefinite matrix. */\n    private final RealMatrix root;\n\n    /** Rank of the symmetric positive semidefinite matrix. */\n    private int rank;\n\n    /**\n     * Decompose a symmetric positive semidefinite matrix.\n     *\n     * @param matrix Symmetric positive semidefinite matrix.\n     * @param small Diagonal elements threshold under which  column are\n     * considered to be dependent on previous ones and are discarded.\n     * @exception NonPositiveDefiniteMatrixException if the matrix is not\n     * positive semidefinite.\n     */\n    public RectangularCholeskyDecomposition(RealMatrix matrix, double small)\n        throws NonPositiveDefiniteMatrixException {\n\n        final int order = matrix.getRowDimension();\n        final double[][] c = matrix.getData();\n        final double[][] b = new double[order][order];\n\n        int[] swap  = new int[order];\n        int[] index = new int[order];\n        for (int i = 0; i < order; ++i) {\n            index[i] = i;\n        }\n\n        int r = 0;\n        for (boolean loop = true; loop;) {\n\n            // find maximal diagonal element\n            swap[r] = r;\n            for (int i = r + 1; i < order; ++i) {\n                int ii  = index[i];\n                int isi = index[swap[i]];\n                if (c[ii][ii] > c[isi][isi]) {\n                    swap[r] = i;\n                }\n            }\n\n\n            // swap elements\n            if (swap[r] != r) {\n                int tmp = index[r];\n                index[r] = index[swap[r]];\n                index[swap[r]] = tmp;\n            }\n\n            // check diagonal element\n            int ir = index[r];\n            if (c[ir][ir] < small) {\n\n                if (r == 0) {\n                    throw new NonPositiveDefiniteMatrixException(c[ir][ir], ir, small);\n                }\n\n                // check remaining diagonal elements\n                for (int i = r; i < order; ++i) {\n                    if (c[index[i]][index[i]] < -small) {\n                        // there is at least one sufficiently negative diagonal element,\n                        // the symmetric positive semidefinite matrix is wrong\n                        throw new NonPositiveDefiniteMatrixException(c[index[i]][index[i]], i, small);\n                    }\n                }\n\n                // all remaining diagonal elements are close to zero, we consider we have\n                // found the rank of the symmetric positive semidefinite matrix\n                ++r;\n                loop = false;\n\n            } else {\n\n                // transform the matrix\n                final double sqrt = FastMath.sqrt(c[ir][ir]);\n                b[r][r] = sqrt;\n                final double inverse  = 1 / sqrt;\n                for (int i = r + 1; i < order; ++i) {\n                    final int ii = index[i];\n                    final double e = inverse * c[ii][ir];\n                    b[i][r] = e;', 'aftercode': '                    for (int j = r + 1; j < i; ++j) {\n                        final int ij = index[j];\n                        final double f = c[ii][ij] - e * b[j][r];\n                        c[ii][ij] = f;\n                        c[ij][ii] = f;\n                    }\n                }\n\n                // prepare next iteration\n                loop = ++r < order;\n            }\n        }\n\n        // build the root matrix\n        rank = r;\n        root = MatrixUtils.createRealMatrix(order, r);\n        for (int i = 0; i < order; ++i) {\n            for (int j = 0; j < r; ++j) {\n                root.setEntry(index[i], j, b[i][j]);\n            }\n        }\n\n    }\n\n    /** Get the root of the covariance matrix.\n     * The root is the rectangular matrix <code>B</code> such that\n     * the covariance matrix is equal to <code>B.B<sup>T</sup></code>\n     * @return root of the square matrix\n     * @see #getRank()\n     */\n    public RealMatrix getRootMatrix() {\n        return root;\n    }\n\n    /** Get the rank of the symmetric positive semidefinite matrix.\n     * The r is the number of independent rows in the symmetric positive semidefinite\n     * matrix, it is also the number of columns of the rectangular\n     * matrix of the decomposition.\n     * @return r of the square matrix.\n     * @see #getRootMatrix()\n     */\n    public int getRank() {\n        return rank;\n    }\n\n}', 'tree': 'IfStatement else_statement BlockStatement statements LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer MethodInvocation qualifier FastMath_ter ^ ^ arguments MemberReference selectors ArraySelector index MemberReference member ir_ter ^ ^ ^ ^ ^ ArraySelector index MemberReference member ir_ter ^ ^ ^ ^ ^ ^ member c_ter ^ ^ ^ ^ member loc0 ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference selectors ArraySelector index MemberReference member r_ter ^ ^ ^ ^ ^ ArraySelector index MemberReference member r_ter ^ ^ ^ ^ ^ ^ member b_ter ^ ^ ^ ^ value MemberReference member loc0 ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name loc1 ^ ^ initializer BinaryOperation operator /_ter ^ ^ operandl Literal value 1_ter ^ ^ ^ ^ operandr MemberReference member loc0 ^ ^ ^ ^ ^ ^ ^ ^ ^ ForStatement control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer BinaryOperation operator +_ter ^ ^ operandl MemberReference member r_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc2 ^ ^ ^ ^ operandr MemberReference member order_ter ^ ^ ^ ^ ^ ^ update MemberReference prefix_operators ++_ter ^ ^ member loc2 ^ ^ ^ ^ ^ ^ body BlockStatement statements LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc3 ^ ^ initializer MemberReference selectors ArraySelector index MemberReference member loc2 ^ ^ ^ ^ ^ ^ member index_ter ^ ^ ^ ^ ^ ^ ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name loc4 ^ ^ initializer BinaryOperation operator *_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr MemberReference selectors ArraySelector index MemberReference member loc3 ^ ^ ^ ^ ^ ArraySelector index MemberReference member ir_ter ^ ^ ^ ^ ^ ^ member c_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference selectors ArraySelector index MemberReference member loc2 ^ ^ ^ ^ ^ ArraySelector index MemberReference member r_ter ^ ^ ^ ^ ^ ^ member b_ter ^ ^ ^ ^ value MemberReference member loc4 ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference selectors ArraySelector index MemberReference member loc3 ^ ^ ^ ^ ^ ArraySelector index MemberReference member loc3 ^ ^ ^ ^ ^ ^ member c_ter ^ ^ ^ ^ value BinaryOperation operator *_ter ^ ^ operandl MemberReference member loc4 ^ ^ ^ ^ operandr MemberReference member loc4 ^ ^ ^ ^ ^ ^ type -=_ter ^ ^ ^ ^ ^ ForStatement control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc5 ^ ^ initializer BinaryOperation operator +_ter ^ ^ operandl MemberReference member r_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc5 ^ ^ ^ ^ operandr MemberReference member loc2 ^ ^ ^ ^ ^ ^ update MemberReference prefix_operators ++_ter ^ ^ member loc5 ^ ^ ^ ^ ^ ^ body BlockStatement statements LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer MemberReference selectors ArraySelector index MemberReference member loc5 ^ ^ ^ ^ ^ ^ member index_ter ^ ^ ^ ^ ^ ^ ^ LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name loc7 ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl MemberReference selectors ArraySelector index MemberReference member loc3 ^ ^ ^ ^ ^ ArraySelector index MemberReference member loc6 ^ ^ ^ ^ ^ ^ member c_ter ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MemberReference member loc4 ^ ^ ^ ^ operandr MemberReference selectors ArraySelector index MemberReference member loc5 ^ ^ ^ ^ ^ ArraySelector index MemberReference member r_ter ^ ^ ^ ^ ^ ^ member b_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference selectors ArraySelector index MemberReference member loc3 ^ ^ ^ ^ ^ ArraySelector index MemberReference member loc6 ^ ^ ^ ^ ^ ^ member c_ter ^ ^ ^ ^ value MemberReference member loc7 ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference selectors ArraySelector index MemberReference member loc6 ^ ^ ^ ^ ^ ArraySelector index MemberReference member loc3 ^ ^ ^ ^ ^ ^ member c_ter ^ ^ ^ ^ value MemberReference member loc7 ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference member loop_ter ^ ^ ^ ^ value BinaryOperation operator <_ter ^ ^ operandl MemberReference prefix_operators ++_ter ^ ^ member r_ter ^ ^ ^ ^ operandr MemberReference member order_ter ^ ^ ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ', 'prob': [0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], 'mode': 0, 'line': 128, 'isa': False, 'fl_score': 1}, {'bugid': 'Math-21', 'treeroot': <Searchnode.Node object at 0x7f64395c0450>, 'troot': <Searchnode.Node object at 0x7f644d13be90>, 'oldcode': '            if (swap[r] != r) {', 'filepath': 'buggy/Math-21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java', 'subroot': <Searchnode.Node object at 0x7f643db42510>, 'vardic': {'RectangularCholeskyDecomposition_ter': 'meth0', 'tmp_ter': 'loc5', 'ir_ter': 'loc6', 'i_ter': 'loc2', 'ii_ter': 'loc3', 'isi_ter': 'loc4'}, 'typedic': {'tmp_ter': 'int', 'ir_ter': 'int', 'i_ter': 'int', 'ii_ter': 'int', 'isi_ter': 'int'}, 'idss': 'Math-21', 'classname': 'org.apache.commons.math3.linear.RectangularCholeskyDecomposition', 'precode': '/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the "License"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.commons.math3.linear;\n\nimport org.apache.commons.math3.util.FastMath;\n\n/**\n * Calculates the rectangular Cholesky decomposition of a matrix.\n * <p>The rectangular Cholesky decomposition of a real symmetric positive\n * semidefinite matrix A consists of a rectangular matrix B with the same\n * number of rows such that: A is almost equal to BB<sup>T</sup>, depending\n * on a user-defined tolerance. In a sense, this is the square root of A.</p>\n * <p>The difference with respect to the regular {@link CholeskyDecomposition}\n * is that rows/columns may be permuted (hence the rectangular shape instead\n * of the traditional triangular shape) and there is a threshold to ignore\n * small diagonal elements. This is used for example to generate {@link\n * org.apache.commons.math3.random.CorrelatedRandomVectorGenerator correlated\n * random n-dimensions vectors} in a p-dimension subspace (p < n).\n * In other words, it allows generating random vectors from a covariance\n * matrix that is only positive semidefinite, and not positive definite.</p>\n * <p>Rectangular Cholesky decomposition is <em>not</em> suited for solving\n * linear systems, so it does not provide any {@link DecompositionSolver\n * decomposition solver}.</p>\n *\n * @see <a href="http://mathworld.wolfram.com/CholeskyDecomposition.html">MathWorld</a>\n * @see <a href="http://en.wikipedia.org/wiki/Cholesky_decomposition">Wikipedia</a>\n * @version $Id$\n * @since 2.0 (changed to concrete class in 3.0)\n */\npublic class RectangularCholeskyDecomposition {\n\n    /** Permutated Cholesky root of the symmetric positive semidefinite matrix. */\n    private final RealMatrix root;\n\n    /** Rank of the symmetric positive semidefinite matrix. */\n    private int rank;\n\n    /**\n     * Decompose a symmetric positive semidefinite matrix.\n     *\n     * @param matrix Symmetric positive semidefinite matrix.\n     * @param small Diagonal elements threshold under which  column are\n     * considered to be dependent on previous ones and are discarded.\n     * @exception NonPositiveDefiniteMatrixException if the matrix is not\n     * positive semidefinite.\n     */\n    public RectangularCholeskyDecomposition(RealMatrix matrix, double small)\n        throws NonPositiveDefiniteMatrixException {\n\n        final int order = matrix.getRowDimension();\n        final double[][] c = matrix.getData();\n        final double[][] b = new double[order][order];\n\n        int[] swap  = new int[order];\n        int[] index = new int[order];\n        for (int i = 0; i < order; ++i) {\n            index[i] = i;\n        }\n\n        int r = 0;\n        for (boolean loop = true; loop;) {\n\n            // find maximal diagonal element\n            swap[r] = r;\n            for (int i = r + 1; i < order; ++i) {\n                int ii  = index[i];\n                int isi = index[swap[i]];\n                if (c[ii][ii] > c[isi][isi]) {\n                    swap[r] = i;\n                }\n            }\n\n\n            // swap elements', 'aftercode': '                int tmp = index[r];\n                index[r] = index[swap[r]];\n                index[swap[r]] = tmp;\n            }\n\n            // check diagonal element\n            int ir = index[r];\n            if (c[ir][ir] < small) {\n\n                if (r == 0) {\n                    throw new NonPositiveDefiniteMatrixException(c[ir][ir], ir, small);\n                }\n\n                // check remaining diagonal elements\n                for (int i = r; i < order; ++i) {\n                    if (c[index[i]][index[i]] < -small) {\n                        // there is at least one sufficiently negative diagonal element,\n                        // the symmetric positive semidefinite matrix is wrong\n                        throw new NonPositiveDefiniteMatrixException(c[index[i]][index[i]], i, small);\n                    }\n                }\n\n                // all remaining diagonal elements are close to zero, we consider we have\n                // found the rank of the symmetric positive semidefinite matrix\n                ++r;\n                loop = false;\n\n            } else {\n\n                // transform the matrix\n                final double sqrt = FastMath.sqrt(c[ir][ir]);\n                b[r][r] = sqrt;\n                final double inverse  = 1 / sqrt;\n                for (int i = r + 1; i < order; ++i) {\n                    final int ii = index[i];\n                    final double e = inverse * c[ii][ir];\n                    b[i][r] = e;\n                    c[ii][ii] -= e * e;\n                    for (int j = r + 1; j < i; ++j) {\n                        final int ij = index[j];\n                        final double f = c[ii][ij] - e * b[j][r];\n                        c[ii][ij] = f;\n                        c[ij][ii] = f;\n                    }\n                }\n\n                // prepare next iteration\n                loop = ++r < order;\n            }\n        }\n\n        // build the root matrix\n        rank = r;\n        root = MatrixUtils.createRealMatrix(order, r);\n        for (int i = 0; i < order; ++i) {\n            for (int j = 0; j < r; ++j) {\n                root.setEntry(index[i], j, b[i][j]);\n            }\n        }\n\n    }\n\n    /** Get the root of the covariance matrix.\n     * The root is the rectangular matrix <code>B</code> such that\n     * the covariance matrix is equal to <code>B.B<sup>T</sup></code>\n     * @return root of the square matrix\n     * @see #getRank()\n     */\n    public RealMatrix getRootMatrix() {\n        return root;\n    }\n\n    /** Get the rank of the symmetric positive semidefinite matrix.\n     * The r is the number of independent rows in the symmetric positive semidefinite\n     * matrix, it is also the number of columns of the rectangular\n     * matrix of the decomposition.\n     * @return r of the square matrix.\n     * @see #getRootMatrix()\n     */\n    public int getRank() {\n        return rank;\n    }\n\n}', 'tree': 'statements IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference selectors ArraySelector index MemberReference member r_ter ^ ^ ^ ^ ^ ^ member swap_ter ^ ^ ^ ^ operandr MemberReference member r_ter ^ ^ ^ ^ ^ ^ then_statement BlockStatement statements LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc5 ^ ^ initializer MemberReference selectors ArraySelector index MemberReference member r_ter ^ ^ ^ ^ ^ ^ member index_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference selectors ArraySelector index MemberReference member r_ter ^ ^ ^ ^ ^ ^ member index_ter ^ ^ ^ ^ value MemberReference selectors ArraySelector index MemberReference selectors ArraySelector index MemberReference member r_ter ^ ^ ^ ^ ^ ^ member swap_ter ^ ^ ^ ^ ^ ^ member index_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference selectors ArraySelector index MemberReference selectors ArraySelector index MemberReference member r_ter ^ ^ ^ ^ ^ ^ member swap_ter ^ ^ ^ ^ ^ ^ member index_ter ^ ^ ^ ^ value MemberReference member loc5 ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer MemberReference selectors ArraySelector index MemberReference member r_ter ^ ^ ^ ^ ^ ^ member index_ter ^ ^ ^ ^ ^ ^ ^ ForStatement control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer BinaryOperation operator +_ter ^ ^ operandl MemberReference member r_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc2 ^ ^ ^ ^ operandr MemberReference member order_ter ^ ^ ^ ^ ^ ^ update MemberReference prefix_operators ++_ter ^ ^ member loc2 ^ ^ ^ ^ ^ ^ body BlockStatement statements LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc3 ^ ^ initializer MemberReference selectors ArraySelector index MemberReference member loc2 ^ ^ ^ ^ ^ ^ member index_ter ^ ^ ^ ^ ^ ^ ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc4 ^ ^ initializer MemberReference selectors ArraySelector index MemberReference selectors ArraySelector index MemberReference member loc2 ^ ^ ^ ^ ^ ^ member swap_ter ^ ^ ^ ^ ^ ^ member index_ter ^ ^ ^ ^ ^ ^ ^ IfStatement condition BinaryOperation operator >_ter ^ ^ operandl MemberReference selectors ArraySelector index MemberReference member loc3 ^ ^ ^ ^ ^ ArraySelector index MemberReference member loc3 ^ ^ ^ ^ ^ ^ member c_ter ^ ^ ^ ^ operandr MemberReference selectors ArraySelector index MemberReference member loc4 ^ ^ ^ ^ ^ ArraySelector index MemberReference member loc4 ^ ^ ^ ^ ^ ^ member c_ter ^ ^ ^ ^ ^ ^ then_statement BlockStatement statements StatementExpression expression Assignment expressionl MemberReference selectors ArraySelector index MemberReference member r_ter ^ ^ ^ ^ ^ ^ member swap_ter ^ ^ ^ ^ value MemberReference member loc2 ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference selectors ArraySelector index MemberReference member r_ter ^ ^ ^ ^ ^ ^ member swap_ter ^ ^ ^ ^ operandr MemberReference member r_ter ^ ^ ^ ^ ^ ^ then_statement BlockStatement statements LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc5 ^ ^ initializer MemberReference selectors ArraySelector index MemberReference member r_ter ^ ^ ^ ^ ^ ^ member index_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference selectors ArraySelector index MemberReference member r_ter ^ ^ ^ ^ ^ ^ member index_ter ^ ^ ^ ^ value MemberReference selectors ArraySelector index MemberReference selectors ArraySelector index MemberReference member r_ter ^ ^ ^ ^ ^ ^ member swap_ter ^ ^ ^ ^ ^ ^ member index_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference selectors ArraySelector index MemberReference selectors ArraySelector index MemberReference member r_ter ^ ^ ^ ^ ^ ^ member swap_ter ^ ^ ^ ^ ^ ^ member index_ter ^ ^ ^ ^ value MemberReference member loc5 ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer MemberReference selectors ArraySelector index MemberReference member r_ter ^ ^ ^ ^ ^ ^ member index_ter ^ ^ ^ ^ ^ ^ ^ ^ ', 'prob': [0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], 'mode': 0, 'line': 90, 'isa': False, 'fl_score': 1}]
before@0 batch0 x: 0: root ^  ; []
after@0 batch0 x: 0: root ^  ; []
before@0 batch1 x: 0: root ^  ; []
after@0 batch1 x: 0: root ^  ; []
copynode 0:  root modified ^ ^ ; ['root -> modified']
copynode 0:  root add ^ ^ ; ['root -> add']
copynode 0:  root ReturnStatement ^ ^ ; ['root -> ReturnStatement']
copynode 0:  root ^ ; ['root -> End']
copynode 0:  root return_type ^ ^ ; ['root -> return_type']
copynode 0:  root MemberReference-MemberReference selectors ArraySelector index MemberReference member loc3 ^ ^ ^ ^ ^ ArraySelector index MemberReference member loc3 ^ ^ ^ ^ ^ ^ member c_ter ^ ^ ^  ^ ^ ; ['copy-MemberReference']
copynode 0:  root StatementExpression ^ ^ ; ['root -> StatementExpression']
copynode 0:  root IfStatement ^ ^ ; ['root -> IfStatement']
copynode 0:  root parameters ^ ^ ; ['root -> parameters']
copynode 0:  root MemberReference-MemberReference member loc4 ^ ^ ^  ^ ^ ; ['copy-MemberReference']
copynode 0:  root modified ^ ^ ; ['root -> modified']
copynode 0:  root add ^ ^ ; ['root -> add']
copynode 0:  root MemberReference-MemberReference selectors ArraySelector index MemberReference member r_ter ^ ^ ^ ^ ^ ^ member swap_ter ^ ^ ^  ^ ^ ; ['copy-MemberReference']
copynode 0:  root operator-operator !=_ter ^ ^  ^ ^ ; ['copy-operator']
copynode 0:  root ^ ; ['root -> End']
copynode 0:  root IfStatement ^ ^ ; ['root -> IfStatement']
copynode 0:  root IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference selectors ArraySelector index MemberReference member r_ter ^ ^ ^ ^ ^ ^ member swap_ter ^ ^ ^ ^ operandr MemberReference member r_ter ^ ^ ^ ^ ^ ^ then_statement BlockStatement statements LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc5 ^ ^ initializer MemberReference selectors ArraySelector index MemberReference member r_ter ^ ^ ^ ^ ^ ^ member index_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference selectors ArraySelector index MemberReference member r_ter ^ ^ ^ ^ ^ ^ member index_ter ^ ^ ^ ^ value MemberReference selectors ArraySelector index MemberReference selectors ArraySelector index MemberReference member r_ter ^ ^ ^ ^ ^ ^ member swap_ter ^ ^ ^ ^ ^ ^ member index_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference selectors ArraySelector index MemberReference selectors ArraySelector index MemberReference member r_ter ^ ^ ^ ^ ^ ^ member swap_ter ^ ^ ^ ^ ^ ^ member index_ter ^ ^ ^ ^ value MemberReference member loc5 ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer MemberReference selectors ArraySelector index MemberReference member r_ter ^ ^ ^ ^ ^ ^ member index_ter ^ ^ ^ ^ ^ ^ ^ ForStatement control ForControl init VariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc2 ^ ^ initializer BinaryOperation operator +_ter ^ ^ operandl MemberReference member r_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member loc2 ^ ^ ^ ^ operandr MemberReference member order_ter ^ ^ ^ ^ ^ ^ update MemberReference prefix_operators ++_ter ^ ^ member loc2 ^ ^ ^ ^ ^ ^ body BlockStatement statements LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc3 ^ ^ initializer MemberReference selectors ArraySelector index MemberReference member loc2 ^ ^ ^ ^ ^ ^ member index_ter ^ ^ ^ ^ ^ ^ ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc4 ^ ^ initializer MemberReference selectors ArraySelector index MemberReference selectors ArraySelector index MemberReference member loc2 ^ ^ ^ ^ ^ ^ member swap_ter ^ ^ ^ ^ ^ ^ member index_ter ^ ^ ^ ^ ^ ^ ^ IfStatement condition BinaryOperation operator >_ter ^ ^ operandl MemberReference selectors ArraySelector index MemberReference member loc3 ^ ^ ^ ^ ^ ArraySelector index MemberReference member loc3 ^ ^ ^ ^ ^ ^ member c_ter ^ ^ ^ ^ operandr MemberReference selectors ArraySelector index MemberReference member loc4 ^ ^ ^ ^ ^ ArraySelector index MemberReference member loc4 ^ ^ ^ ^ ^ ^ member c_ter ^ ^ ^ ^ ^ ^ then_statement BlockStatement statements StatementExpression expression Assignment expressionl MemberReference selectors ArraySelector index MemberReference member r_ter ^ ^ ^ ^ ^ ^ member swap_ter ^ ^ ^ ^ value MemberReference member loc2 ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference selectors ArraySelector index MemberReference member r_ter ^ ^ ^ ^ ^ ^ member swap_ter ^ ^ ^ ^ operandr MemberReference member r_ter ^ ^ ^ ^ ^ ^ then_statement BlockStatement statements LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc5 ^ ^ initializer MemberReference selectors ArraySelector index MemberReference member r_ter ^ ^ ^ ^ ^ ^ member index_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference selectors ArraySelector index MemberReference member r_ter ^ ^ ^ ^ ^ ^ member index_ter ^ ^ ^ ^ value MemberReference selectors ArraySelector index MemberReference selectors ArraySelector index MemberReference member r_ter ^ ^ ^ ^ ^ ^ member swap_ter ^ ^ ^ ^ ^ ^ member index_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference selectors ArraySelector index MemberReference selectors ArraySelector index MemberReference member r_ter ^ ^ ^ ^ ^ ^ member swap_ter ^ ^ ^ ^ ^ ^ member index_ter ^ ^ ^ ^ value MemberReference member loc5 ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ initializer MemberReference selectors ArraySelector index MemberReference member r_ter ^ ^ ^ ^ ^ ^ member index_ter ^ ^ ^ ^ ^ ^ ^ ^ ; ['copy-root']
copynode 0:  root StatementExpression ^ ^ ; ['root -> StatementExpression']
copynode 0:  root ReturnStatement ^ ^ ; ['root -> ReturnStatement']
copynode 0:  root MemberReference-MemberReference member r_ter ^ ^ ^  ^ ^ ; ['copy-MemberReference']
before@1 batch0 x: -12.103994369506836: root MemberReference-MemberReference member loc4 ^ ^ ^  ^ ^  ; ['copy-MemberReference']
after@1 batch0 x: -12.103994369506836: root MemberReference-MemberReference member loc4 ^ ^ ^  ^ ^  ; ['copy-MemberReference']
before@1 batch1 x: -13.931971549987793: root MemberReference-MemberReference member r_ter ^ ^ ^  ^ ^  ; ['copy-MemberReference']
after@1 batch1 x: -13.931971549987793: root MemberReference-MemberReference member r_ter ^ ^ ^  ^ ^  ; ['copy-MemberReference']
copynode -0.39652106165885925:  root modified ^ StatementExpression ^ ^ ; ['root -> modified', 'root -> StatementExpression']
copynode -1.1180901527404785:  root add ^ StatementExpression ^ ^ ; ['root -> add', 'root -> StatementExpression']
copynode -0.39652106165885925:  root modified ^ MemberReference-MemberReference selectors ArraySelector index MemberReference member loc3 ^ ^ ^ ^ ^ ArraySelector index MemberReference member loc3 ^ ^ ^ ^ ^ ^ member c_ter ^ ^ ^  ^ ^ ; ['root -> modified', 'copy-MemberReference']
copynode -1.1180901527404785:  root add ^ IfStatement ^ ^ ; ['root -> add', 'root -> IfStatement']
copynode -0.39652106165885925:  root modified ^ MemberReference-MemberReference member loc4 ^ ^ ^  ^ ^ ; ['root -> modified', 'copy-MemberReference']
copynode -1.1180901527404785:  root add ^ BreakStatement_ter ^ ^ ; ['root -> add', 'root -> BreakStatement_ter']
copynode -0.39652106165885925:  root modified ^ MemberReference-MemberReference member loc4 ^ ^ ^  ^ ^ ; ['root -> modified', 'copy-MemberReference']
copynode -0.39652106165885925:  root modified ^ ^ ; ['root -> modified', 'root -> End']
copynode -1.1180901527404785:  root add ^ control ^ ^ ; ['root -> add', 'root -> control']
copynode -1.1180901527404785:  root add ^ ReturnStatement_ter ^ ^ ; ['root -> add', 'root -> ReturnStatement_ter']
copynode -1.1180901527404785:  root add ^ ContinueStatement_ter ^ ^ ; ['root -> add', 'root -> ContinueStatement_ter']
copynode -1.1180901527404785:  root add ^ LocalVariableDeclaration ^ ^ ; ['root -> add', 'root -> LocalVariableDeclaration']
copynode -0.39652106165885925:  root modified ^ IfStatement ^ ^ ; ['root -> modified', 'root -> IfStatement']
copynode -0.39652106165885925:  root modified ^ operator-operator *_ter ^ ^  ^ ^ ; ['root -> modified', 'copy-operator']
copynode -0.39652106165885925:  root modified ^ MemberReference-MemberReference member loc3 ^ ^ ^  ^ ^ ; ['root -> modified', 'copy-MemberReference']
copynode -1.1180901527404785:  root add ^ ReturnStatement ^ ^ ; ['root -> add', 'root -> ReturnStatement']
copynode -0.39652106165885925:  root modified ^ MemberReference-MemberReference member loc3 ^ ^ ^  ^ ^ ; ['root -> modified', 'copy-MemberReference']
copynode -0.39652106165885925:  root modified ^ ReturnStatement_ter ^ ^ ; ['root -> modified', 'root -> ReturnStatement_ter']
copynode -1.1180901527404785:  root add ^ BreakStatement ^ ^ ; ['root -> add', 'root -> BreakStatement']
copynode -1.1180901527404785:  root add ^ WhileStatement ^ ^ ; ['root -> add', 'root -> WhileStatement']
copynode -9.65460205078125:  root ReturnStatement expression ^ ^ ^ ; ['root -> ReturnStatement', 'ReturnStatement -> expression']
copynode -10.161885261535645:  root return_type ReferenceType ^ ^ ^ ; ['root -> return_type', 'return_type -> ReferenceType']
copynode -10.652148246765137:  root MemberReference-MemberReference selectors ArraySelector index MemberReference member loc3 ^ ^ ^ ^ ^ ArraySelector index MemberReference member loc3 ^ ^ ^ ^ ^ ^ member c_ter ^ ^ ^  selectors ^ member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> selectors member']
copynode -11.400992393493652:  root IfStatement condition ^ ^ ^ ; ['root -> IfStatement', 'IfStatement -> condition']
copynode -10.652148246765137:  root MemberReference-MemberReference selectors ArraySelector index MemberReference member loc3 ^ ^ ^ ^ ^ ArraySelector index MemberReference member loc3 ^ ^ ^ ^ ^ ^ member c_ter ^ ^ ^  member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> member']
copynode -11.483444213867188:  root parameters FormalParameter ^ ^ ^ ; ['root -> parameters', 'parameters -> FormalParameter']
copynode -11.268458366394043:  root StatementExpression expression ^ ^ ^ ; ['root -> StatementExpression', 'StatementExpression -> expression']
copynode -12.103994369506836:  root MemberReference-MemberReference member loc4 ^ ^ ^  member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> member']
copynode -12.103994369506836:  root MemberReference-MemberReference member loc4 ^ ^ ^  selectors ^ member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> selectors member']
copynode -11.268458366394043:  root StatementExpression expression Assignment expressionl MemberReference selectors ArraySelector index MemberReference member loc2 ^ ^ ^ ^ ^ ArraySelector index MemberReference member r_ter ^ ^ ^ ^ ^ ^ member b_ter ^ ^ ^ ^ value MemberReference member loc4 ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ; ['root -> StatementExpression', 'copy-StatementExpression']
copynode -11.268458366394043:  root StatementExpression expression Assignment expressionl MemberReference member loop_ter ^ ^ ^ ^ value BinaryOperation operator <_ter ^ ^ operandl MemberReference prefix_operators ++_ter ^ ^ member r_ter ^ ^ ^ ^ operandr MemberReference member order_ter ^ ^ ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ; ['root -> StatementExpression', 'copy-StatementExpression']
copynode -11.268458366394043:  root StatementExpression expression Assignment expressionl MemberReference selectors ArraySelector index MemberReference member loc3 ^ ^ ^ ^ ^ ArraySelector index MemberReference member loc6 ^ ^ ^ ^ ^ ^ member c_ter ^ ^ ^ ^ value MemberReference member loc7 ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ; ['root -> StatementExpression', 'copy-StatementExpression']
copynode -11.268458366394043:  root StatementExpression expression Assignment expressionl MemberReference selectors ArraySelector index MemberReference member loc6 ^ ^ ^ ^ ^ ArraySelector index MemberReference member loc3 ^ ^ ^ ^ ^ ^ member c_ter ^ ^ ^ ^ value MemberReference member loc7 ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ; ['root -> StatementExpression', 'copy-StatementExpression']
copynode -10.161885261535645:  root return_type BasicType ^ ^ ^ ; ['root -> return_type', 'return_type -> BasicType']
copynode -11.268458366394043:  root StatementExpression expression Assignment expressionl MemberReference selectors ArraySelector index MemberReference member r_ter ^ ^ ^ ^ ^ ArraySelector index MemberReference member r_ter ^ ^ ^ ^ ^ ^ member b_ter ^ ^ ^ ^ value MemberReference member loc0 ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ; ['root -> StatementExpression', 'copy-StatementExpression']
copynode -10.652148246765137:  root MemberReference-MemberReference selectors ArraySelector index MemberReference member loc3 ^ ^ ^ ^ ^ ArraySelector index MemberReference member loc3 ^ ^ ^ ^ ^ ^ member c_ter ^ ^ ^  qualifier ^ member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> qualifier member']
copynode -11.483444213867188:  root parameters ^ ^ ; ['root -> parameters', 'parameters -> End']
copynode -10.652148246765137:  root MemberReference-MemberReference selectors ArraySelector index MemberReference member loc3 ^ ^ ^ ^ ^ ArraySelector index MemberReference member loc3 ^ ^ ^ ^ ^ ^ member c_ter ^ ^ ^  prefix_operators ^ member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> prefix_operators member']
copynode -11.483444213867188:  root parameters MemberReference ^ ^ ^ ; ['root -> parameters', 'parameters -> MemberReference']
copynode -12.103994369506836:  root MemberReference-MemberReference member loc4 ^ ^ ^  qualifier ^ member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> qualifier member']
copynode -10.652148246765137:  root MemberReference-MemberReference selectors ArraySelector index MemberReference member loc3 ^ ^ ^ ^ ^ ArraySelector index MemberReference member loc3 ^ ^ ^ ^ ^ ^ member c_ter ^ ^ ^  postfix_operators ^ member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> postfix_operators member']
copynode -12.103994369506836:  root MemberReference-MemberReference member loc4 ^ ^ ^  prefix_operators ^ member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> prefix_operators member']
copynode -12.103994369506836:  root MemberReference-MemberReference member loc4 ^ ^ ^  postfix_operators ^ member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> postfix_operators member']
copynode -11.483444213867188:  root parameters InferredFormalParameter ^ ^ ^ ; ['root -> parameters', 'parameters -> InferredFormalParameter']
copynode -10.652148246765137:  root MemberReference-MemberReference selectors ArraySelector index MemberReference member loc3 ^ ^ ^ ^ ^ ArraySelector index MemberReference member loc3 ^ ^ ^ ^ ^ ^ member c_ter ^ ^ ^  qualifier ^ selectors ^ member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> qualifier selectors member']
copynode -11.268458366394043:  root StatementExpression expression Assignment expressionl MemberReference selectors ArraySelector index MemberReference member loc3 ^ ^ ^ ^ ^ ArraySelector index MemberReference member loc3 ^ ^ ^ ^ ^ ^ member c_ter ^ ^ ^ ^ value BinaryOperation operator *_ter ^ ^ operandl MemberReference member loc4 ^ ^ ^ ^ operandr MemberReference member loc4 ^ ^ ^ ^ ^ ^ type -=_ter ^ ^ ^ ^ ^ ^ ; ['root -> StatementExpression', 'copy-StatementExpression']
copynode -10.652148246765137:  root MemberReference-MemberReference selectors ArraySelector index MemberReference member loc3 ^ ^ ^ ^ ^ ArraySelector index MemberReference member loc3 ^ ^ ^ ^ ^ ^ member c_ter ^ ^ ^  prefix_operators ^ selectors ^ member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> prefix_operators selectors member']
copynode -10.652148246765137:  root MemberReference-MemberReference selectors ArraySelector index MemberReference member loc3 ^ ^ ^ ^ ^ ArraySelector index MemberReference member loc3 ^ ^ ^ ^ ^ ^ member c_ter ^ ^ ^  postfix_operators ^ selectors ^ member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> postfix_operators selectors member']
copynode -11.483444213867188:  root parameters loc0 ^ ^ ^ ; ['root -> parameters', 'copy-VariableDeclarator']
copynode -12.103994369506836:  root MemberReference-MemberReference member loc4 ^ ^ ^  qualifier ^ selectors ^ member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> qualifier selectors member']
copynode -11.483444213867188:  root parameters loc1 ^ ^ ^ ; ['root -> parameters', 'copy-VariableDeclarator']
copynode -11.483444213867188:  root parameters loc7 ^ ^ ^ ; ['root -> parameters', 'copy-VariableDeclarator']
copynode -11.483444213867188:  root parameters loc6 ^ ^ ^ ; ['root -> parameters', 'copy-VariableDeclarator']
copynode -11.483444213867188:  root parameters loc2 ^ ^ ^ ; ['root -> parameters', 'copy-VariableDeclarator']
copynode -10.652148246765137:  root MemberReference-MemberReference selectors ArraySelector index MemberReference member loc3 ^ ^ ^ ^ ^ ArraySelector index MemberReference member loc3 ^ ^ ^ ^ ^ ^ member c_ter ^ ^ ^  prefix_operators ^ qualifier ^ member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> prefix_operators qualifier member']
copynode -11.483444213867188:  root parameters loc3 ^ ^ ^ ; ['root -> parameters', 'copy-VariableDeclarator']
copynode -12.103994369506836:  root MemberReference-MemberReference member loc4 ^ ^ ^  prefix_operators ^ selectors ^ member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> prefix_operators selectors member']
copynode -12.103994369506836:  root MemberReference-MemberReference member loc4 ^ ^ ^  prefix_operators ^ qualifier ^ member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> prefix_operators qualifier member']
copynode -12.103994369506836:  root MemberReference-MemberReference member loc4 ^ ^ ^  postfix_operators ^ selectors ^ member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> postfix_operators selectors member']
copynode -10.161885261535645:  root return_type unknown ^ ^ ^ ; ['root -> return_type', 'start -> unknown']
copynode -10.652148246765137:  root MemberReference-MemberReference selectors ArraySelector index MemberReference member loc3 ^ ^ ^ ^ ^ ArraySelector index MemberReference member loc3 ^ ^ ^ ^ ^ ^ member c_ter ^ ^ ^  prefix_operators ^ qualifier ^ selectors ^ member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> prefix_operators qualifier selectors member']
copynode -10.161885261535645:  root return_type loc5 ^ ^ ^ ; ['root -> return_type', 'copy-VariableDeclarator']
copynode -9.65460205078125:  root ReturnStatement loc5 ^ ^ ^ ; ['root -> ReturnStatement', 'copy-VariableDeclarator']
copynode -9.65460205078125:  root ReturnStatement loc1 ^ ^ ^ ; ['root -> ReturnStatement', 'copy-VariableDeclarator']
copynode -10.161885261535645:  root return_type loc6 ^ ^ ^ ; ['root -> return_type', 'copy-VariableDeclarator']
copynode -9.65460205078125:  root ReturnStatement loc4 ^ ^ ^ ; ['root -> ReturnStatement', 'copy-VariableDeclarator']
copynode -9.65460205078125:  root ReturnStatement loc2 ^ ^ ^ ; ['root -> ReturnStatement', 'copy-VariableDeclarator']
copynode -11.400992393493652:  root IfStatement condition ^ then_statement ^ ^ ^ ; ['root -> IfStatement', 'IfStatement -> condition then_statement']
copynode -9.65460205078125:  root ReturnStatement loc6 ^ ^ ^ ; ['root -> ReturnStatement', 'copy-VariableDeclarator']
copynode -10.161885261535645:  root return_type loc7 ^ ^ ^ ; ['root -> return_type', 'copy-VariableDeclarator']
copynode -9.65460205078125:  root ReturnStatement loc0 ^ ^ ^ ; ['root -> ReturnStatement', 'copy-VariableDeclarator']
copynode -9.65460205078125:  root ReturnStatement loc7 ^ ^ ^ ; ['root -> ReturnStatement', 'copy-VariableDeclarator']
copynode -9.65460205078125:  root ReturnStatement loc3 ^ ^ ^ ; ['root -> ReturnStatement', 'copy-VariableDeclarator']
copynode -10.161885261535645:  root return_type loc2 ^ ^ ^ ; ['root -> return_type', 'copy-VariableDeclarator']
copynode -10.161885261535645:  root return_type loc4 ^ ^ ^ ; ['root -> return_type', 'copy-VariableDeclarator']
copynode -12.103994369506836:  root MemberReference-MemberReference member loc4 ^ ^ ^  prefix_operators ^ qualifier ^ selectors ^ member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> prefix_operators qualifier selectors member']
copynode -10.161885261535645:  root return_type loc1 ^ ^ ^ ; ['root -> return_type', 'copy-VariableDeclarator']
copynode -10.161885261535645:  root return_type loc3 ^ ^ ^ ; ['root -> return_type', 'copy-VariableDeclarator']
copynode -11.268458366394043:  root StatementExpression unknown ^ ^ ^ ; ['root -> StatementExpression', 'start -> unknown']
copynode -11.400992393493652:  root IfStatement condition ^ then_statement ^ else_statement ^ ^ ^ ; ['root -> IfStatement', 'IfStatement -> condition then_statement else_statement']
copynode -11.400992393493652:  root IfStatement unknown ^ ^ ^ ; ['root -> IfStatement', 'start -> unknown']
copynode -9.65460205078125:  root ReturnStatement unknown ^ ^ ^ ; ['root -> ReturnStatement', 'start -> unknown']
copynode -11.400992393493652:  root IfStatement loc5 ^ ^ ^ ; ['root -> IfStatement', 'copy-VariableDeclarator']
copynode -11.400992393493652:  root IfStatement loc7 ^ ^ ^ ; ['root -> IfStatement', 'copy-VariableDeclarator']
copynode -11.400992393493652:  root IfStatement loc6 ^ ^ ^ ; ['root -> IfStatement', 'copy-VariableDeclarator']
copynode -11.400992393493652:  root IfStatement loc4 ^ ^ ^ ; ['root -> IfStatement', 'copy-VariableDeclarator']
copynode -11.400992393493652:  root IfStatement loc1 ^ ^ ^ ; ['root -> IfStatement', 'copy-VariableDeclarator']
copynode -11.400992393493652:  root IfStatement loc2 ^ ^ ^ ; ['root -> IfStatement', 'copy-VariableDeclarator']
copynode -11.268458366394043:  root StatementExpression label ^ expression ^ ^ ^ ; ['root -> StatementExpression', 'StatementExpression -> label expression']
copynode -11.268458366394043:  root StatementExpression loc5 ^ ^ ^ ; ['root -> StatementExpression', 'copy-VariableDeclarator']
copynode -0.004709348082542419:  root modified ^ MemberReference-MemberReference selectors ArraySelector index MemberReference member r_ter ^ ^ ^ ^ ^ ^ member swap_ter ^ ^ ^  ^ ^ ; ['root -> modified', 'copy-MemberReference']
copynode -0.004709348082542419:  root modified ^ IfStatement ^ ^ ; ['root -> modified', 'root -> IfStatement']
copynode -0.004709348082542419:  root modified ^ operator-operator !=_ter ^ ^  ^ ^ ; ['root -> modified', 'copy-operator']
copynode -0.004709348082542419:  root modified ^ MemberReference-MemberReference member r_ter ^ ^ ^  ^ ^ ; ['root -> modified', 'copy-MemberReference']
copynode -5.462923049926758:  root add ^ StatementExpression ^ ^ ; ['root -> add', 'root -> StatementExpression']
copynode -0.004709348082542419:  root modified ^ StatementExpression ^ ^ ; ['root -> modified', 'root -> StatementExpression']
copynode -5.462923049926758:  root add ^ IfStatement ^ ^ ; ['root -> add', 'root -> IfStatement']
copynode -5.462923049926758:  root add ^ BreakStatement_ter ^ ^ ; ['root -> add', 'root -> BreakStatement_ter']
copynode -0.004709348082542419:  root modified ^ MemberReference-MemberReference selectors ArraySelector index MemberReference member r_ter ^ ^ ^ ^ ^ ^ member swap_ter ^ ^ ^  ^ ^ ; ['root -> modified', 'copy-MemberReference']
copynode -0.004709348082542419:  root modified ^ ^ ; ['root -> modified', 'root -> End']
copynode -0.004709348082542419:  root modified ^ control ^ ^ ; ['root -> modified', 'root -> control']
copynode -0.004709348082542419:  root modified ^ MemberReference-MemberReference member r_ter ^ ^ ^  ^ ^ ; ['root -> modified', 'copy-MemberReference']
copynode -0.004709348082542419:  root modified ^ MemberReference-MemberReference member r_ter ^ ^ ^  ^ ^ ; ['root -> modified', 'copy-MemberReference']
copynode -5.462923049926758:  root add ^ control ^ ^ ; ['root -> add', 'root -> control']
copynode -5.462923049926758:  root add ^ ReturnStatement_ter ^ ^ ; ['root -> add', 'root -> ReturnStatement_ter']
copynode -9.22214126586914:  root MemberReference-MemberReference selectors ArraySelector index MemberReference member r_ter ^ ^ ^ ^ ^ ^ member swap_ter ^ ^ ^  selectors ^ member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> selectors member']
copynode -5.462923049926758:  root add ^ ContinueStatement_ter ^ ^ ; ['root -> add', 'root -> ContinueStatement_ter']
copynode -9.22214126586914:  root MemberReference-MemberReference selectors ArraySelector index MemberReference member r_ter ^ ^ ^ ^ ^ ^ member swap_ter ^ ^ ^  member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> member']
copynode -5.462923049926758:  root add ^ ReturnStatement ^ ^ ; ['root -> add', 'root -> ReturnStatement']
copynode -5.462923049926758:  root add ^ WhileStatement ^ ^ ; ['root -> add', 'root -> WhileStatement']
copynode -5.462923049926758:  root add ^ LocalVariableDeclaration ^ ^ ; ['root -> add', 'root -> LocalVariableDeclaration']
copynode -5.462923049926758:  root add ^ TernaryExpression ^ ^ ; ['root -> add', 'root -> TernaryExpression']
copynode -10.277547836303711:  root operator-operator !=_ter ^ ^  >_ter ^ ^ ^ ; ['copy-operator', 'operator -> >_ter']
copynode -10.277547836303711:  root operator-operator !=_ter ^ ^  ==_ter ^ ^ ^ ; ['copy-operator', 'operator -> ==_ter']
copynode -10.277547836303711:  root operator-operator !=_ter ^ ^  >=_ter ^ ^ ^ ; ['copy-operator', 'operator -> >=_ter']
copynode -12.284523010253906:  root IfStatement condition ^ ^ ^ ; ['root -> IfStatement', 'IfStatement -> condition']
copynode -10.277547836303711:  root operator-operator !=_ter ^ ^  <=_ter ^ ^ ^ ; ['copy-operator', 'operator -> <=_ter']
copynode -10.277547836303711:  root operator-operator !=_ter ^ ^  !=_ter ^ ^ ^ ; ['copy-operator', 'operator -> !=_ter']
copynode -10.277547836303711:  root operator-operator !=_ter ^ ^  <_ter ^ ^ ^ ; ['copy-operator', 'operator -> <_ter']
copynode -9.22214126586914:  root MemberReference-MemberReference selectors ArraySelector index MemberReference member r_ter ^ ^ ^ ^ ^ ^ member swap_ter ^ ^ ^  qualifier ^ member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> qualifier member']
copynode -13.010717391967773:  root ReturnStatement expression ^ ^ ^ ; ['root -> ReturnStatement', 'ReturnStatement -> expression']
copynode -13.005756378173828:  root StatementExpression expression ^ ^ ^ ; ['root -> StatementExpression', 'StatementExpression -> expression']
copynode -10.277547836303711:  root operator-operator !=_ter ^ ^  -_ter ^ ^ ^ ; ['copy-operator', 'operator -> -_ter']
copynode -10.277547836303711:  root operator-operator !=_ter ^ ^  &&_ter ^ ^ ^ ; ['copy-operator', 'operator -> &&_ter']
copynode -13.931971549987793:  root MemberReference-MemberReference member r_ter ^ ^ ^  selectors ^ member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> selectors member']
copynode -9.22214126586914:  root MemberReference-MemberReference selectors ArraySelector index MemberReference member r_ter ^ ^ ^ ^ ^ ^ member swap_ter ^ ^ ^  prefix_operators ^ member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> prefix_operators member']
copynode -10.277547836303711:  root operator-operator !=_ter ^ ^  &_ter ^ ^ ^ ; ['copy-operator', 'operator -> &_ter']
copynode -10.277547836303711:  root operator-operator !=_ter ^ ^  +_ter ^ ^ ^ ; ['copy-operator', 'operator -> +_ter']
copynode -9.22214126586914:  root MemberReference-MemberReference selectors ArraySelector index MemberReference member r_ter ^ ^ ^ ^ ^ ^ member swap_ter ^ ^ ^  qualifier ^ selectors ^ member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> qualifier selectors member']
copynode -9.22214126586914:  root MemberReference-MemberReference selectors ArraySelector index MemberReference member r_ter ^ ^ ^ ^ ^ ^ member swap_ter ^ ^ ^  postfix_operators ^ member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> postfix_operators member']
copynode -13.931971549987793:  root MemberReference-MemberReference member r_ter ^ ^ ^  member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> member']
copynode -13.005756378173828:  root StatementExpression expression Assignment expressionl MemberReference selectors ArraySelector index MemberReference member r_ter ^ ^ ^ ^ ^ ^ member index_ter ^ ^ ^ ^ value MemberReference selectors ArraySelector index MemberReference selectors ArraySelector index MemberReference member r_ter ^ ^ ^ ^ ^ ^ member swap_ter ^ ^ ^ ^ ^ ^ member index_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ; ['root -> StatementExpression', 'copy-StatementExpression']
copynode -13.005756378173828:  root StatementExpression expression Assignment expressionl MemberReference selectors ArraySelector index MemberReference selectors ArraySelector index MemberReference member r_ter ^ ^ ^ ^ ^ ^ member swap_ter ^ ^ ^ ^ ^ ^ member index_ter ^ ^ ^ ^ value MemberReference member loc5 ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ; ['root -> StatementExpression', 'copy-StatementExpression']
copynode -13.005756378173828:  root StatementExpression expression Assignment expressionl MemberReference selectors ArraySelector index MemberReference member r_ter ^ ^ ^ ^ ^ ^ member swap_ter ^ ^ ^ ^ value MemberReference member loc2 ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ; ['root -> StatementExpression', 'copy-StatementExpression']
copynode -13.005756378173828:  root StatementExpression expression Assignment expressionl MemberReference selectors ArraySelector index MemberReference selectors ArraySelector index MemberReference member r_ter ^ ^ ^ ^ ^ ^ member swap_ter ^ ^ ^ ^ ^ ^ member index_ter ^ ^ ^ ^ value MemberReference member loc5 ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ; ['root -> StatementExpression', 'copy-StatementExpression']
copynode -13.005756378173828:  root StatementExpression expression Assignment expressionl MemberReference selectors ArraySelector index MemberReference member r_ter ^ ^ ^ ^ ^ ^ member index_ter ^ ^ ^ ^ value MemberReference selectors ArraySelector index MemberReference selectors ArraySelector index MemberReference member r_ter ^ ^ ^ ^ ^ ^ member swap_ter ^ ^ ^ ^ ^ ^ member index_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ; ['root -> StatementExpression', 'copy-StatementExpression']
copynode -9.22214126586914:  root MemberReference-MemberReference selectors ArraySelector index MemberReference member r_ter ^ ^ ^ ^ ^ ^ member swap_ter ^ ^ ^  prefix_operators ^ selectors ^ member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> prefix_operators selectors member']
copynode -13.931971549987793:  root MemberReference-MemberReference member r_ter ^ ^ ^  qualifier ^ member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> qualifier member']
copynode -9.22214126586914:  root MemberReference-MemberReference selectors ArraySelector index MemberReference member r_ter ^ ^ ^ ^ ^ ^ member swap_ter ^ ^ ^  postfix_operators ^ selectors ^ member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> postfix_operators selectors member']
copynode -9.22214126586914:  root MemberReference-MemberReference selectors ArraySelector index MemberReference member r_ter ^ ^ ^ ^ ^ ^ member swap_ter ^ ^ ^  prefix_operators ^ qualifier ^ member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> prefix_operators qualifier member']
copynode -13.931971549987793:  root MemberReference-MemberReference member r_ter ^ ^ ^  prefix_operators ^ member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> prefix_operators member']
copynode -13.931971549987793:  root MemberReference-MemberReference member r_ter ^ ^ ^  postfix_operators ^ member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> postfix_operators member']
copynode -13.931971549987793:  root MemberReference-MemberReference member r_ter ^ ^ ^  qualifier ^ selectors ^ member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> qualifier selectors member']
copynode -12.284523010253906:  root IfStatement condition BinaryOperation operator >_ter ^ ^ operandl MemberReference selectors ArraySelector index MemberReference member loc3 ^ ^ ^ ^ ^ ArraySelector index MemberReference member loc3 ^ ^ ^ ^ ^ ^ member c_ter ^ ^ ^ ^ operandr MemberReference selectors ArraySelector index MemberReference member loc4 ^ ^ ^ ^ ^ ArraySelector index MemberReference member loc4 ^ ^ ^ ^ ^ ^ member c_ter ^ ^ ^ ^ ^ ^ then_statement BlockStatement statements StatementExpression expression Assignment expressionl MemberReference selectors ArraySelector index MemberReference member r_ter ^ ^ ^ ^ ^ ^ member swap_ter ^ ^ ^ ^ value MemberReference member loc2 ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> IfStatement', 'copy-IfStatement']
copynode -12.284523010253906:  root IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference selectors ArraySelector index MemberReference member r_ter ^ ^ ^ ^ ^ ^ member swap_ter ^ ^ ^ ^ operandr MemberReference member r_ter ^ ^ ^ ^ ^ ^ then_statement BlockStatement statements LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc5 ^ ^ initializer MemberReference selectors ArraySelector index MemberReference member r_ter ^ ^ ^ ^ ^ ^ member index_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference selectors ArraySelector index MemberReference member r_ter ^ ^ ^ ^ ^ ^ member index_ter ^ ^ ^ ^ value MemberReference selectors ArraySelector index MemberReference selectors ArraySelector index MemberReference member r_ter ^ ^ ^ ^ ^ ^ member swap_ter ^ ^ ^ ^ ^ ^ member index_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference selectors ArraySelector index MemberReference selectors ArraySelector index MemberReference member r_ter ^ ^ ^ ^ ^ ^ member swap_ter ^ ^ ^ ^ ^ ^ member index_ter ^ ^ ^ ^ value MemberReference member loc5 ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> IfStatement', 'copy-IfStatement']
copynode -9.22214126586914:  root MemberReference-MemberReference selectors ArraySelector index MemberReference member r_ter ^ ^ ^ ^ ^ ^ member swap_ter ^ ^ ^  prefix_operators ^ qualifier ^ selectors ^ member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> prefix_operators qualifier selectors member']
copynode -13.931971549987793:  root MemberReference-MemberReference member r_ter ^ ^ ^  prefix_operators ^ selectors ^ member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> prefix_operators selectors member']
copynode -13.931971549987793:  root MemberReference-MemberReference member r_ter ^ ^ ^  postfix_operators ^ selectors ^ member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> postfix_operators selectors member']
copynode -12.284523010253906:  root IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference selectors ArraySelector index MemberReference member r_ter ^ ^ ^ ^ ^ ^ member swap_ter ^ ^ ^ ^ operandr MemberReference member r_ter ^ ^ ^ ^ ^ ^ then_statement BlockStatement statements LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name loc5 ^ ^ initializer MemberReference selectors ArraySelector index MemberReference member r_ter ^ ^ ^ ^ ^ ^ member index_ter ^ ^ ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference selectors ArraySelector index MemberReference member r_ter ^ ^ ^ ^ ^ ^ member index_ter ^ ^ ^ ^ value MemberReference selectors ArraySelector index MemberReference selectors ArraySelector index MemberReference member r_ter ^ ^ ^ ^ ^ ^ member swap_ter ^ ^ ^ ^ ^ ^ member index_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ StatementExpression expression Assignment expressionl MemberReference selectors ArraySelector index MemberReference selectors ArraySelector index MemberReference member r_ter ^ ^ ^ ^ ^ ^ member swap_ter ^ ^ ^ ^ ^ ^ member index_ter ^ ^ ^ ^ value MemberReference member loc5 ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ; ['root -> IfStatement', 'copy-IfStatement']
copynode -13.931971549987793:  root MemberReference-MemberReference member r_ter ^ ^ ^  prefix_operators ^ qualifier ^ member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> prefix_operators qualifier member']
copynode -12.284523010253906:  root IfStatement condition ^ then_statement ^ ^ ^ ; ['root -> IfStatement', 'IfStatement -> condition then_statement']
copynode -13.931971549987793:  root MemberReference-MemberReference member r_ter ^ ^ ^  prefix_operators ^ qualifier ^ selectors ^ member ^ ^ ^ ; ['copy-MemberReference', 'MemberReference -> prefix_operators qualifier selectors member']
copynode -12.284523010253906:  root IfStatement unknown ^ ^ ^ ; ['root -> IfStatement', 'start -> unknown']
copynode -13.010717391967773:  root ReturnStatement loc6 ^ ^ ^ ; ['root -> ReturnStatement', 'copy-VariableDeclarator']
copynode -13.010717391967773:  root ReturnStatement loc2 ^ ^ ^ ; ['root -> ReturnStatement', 'copy-VariableDeclarator']
copynode -13.010717391967773:  root ReturnStatement loc3 ^ ^ ^ ; ['root -> ReturnStatement', 'copy-VariableDeclarator']
copynode -13.010717391967773:  root ReturnStatement loc6 ^ ^ ^ ; ['root -> ReturnStatement', 'copy-VariableDeclarator']
copynode -13.010717391967773:  root ReturnStatement loc4 ^ ^ ^ ; ['root -> ReturnStatement', 'copy-VariableDeclarator']
copynode -13.010717391967773:  root ReturnStatement loc5 ^ ^ ^ ; ['root -> ReturnStatement', 'copy-VariableDeclarator']
copynode -13.010717391967773:  root ReturnStatement loc5 ^ ^ ^ ; ['root -> ReturnStatement', 'copy-VariableDeclarator']
copynode -12.284523010253906:  root IfStatement condition ^ then_statement ^ else_statement ^ ^ ^ ; ['root -> IfStatement', 'IfStatement -> condition then_statement else_statement']
copynode -13.005756378173828:  root StatementExpression unknown ^ ^ ^ ; ['root -> StatementExpression', 'start -> unknown']
copynode -13.010717391967773:  root ReturnStatement unknown ^ ^ ^ ; ['root -> ReturnStatement', 'start -> unknown']
copynode -12.284523010253906:  root IfStatement loc3 ^ ^ ^ ; ['root -> IfStatement', 'copy-VariableDeclarator']
copynode -12.284523010253906:  root IfStatement loc2 ^ ^ ^ ; ['root -> IfStatement', 'copy-VariableDeclarator']
copynode -12.284523010253906:  root IfStatement loc4 ^ ^ ^ ; ['root -> IfStatement', 'copy-VariableDeclarator']
copynode -13.005756378173828:  root StatementExpression loc6 ^ ^ ^ ; ['root -> StatementExpression', 'copy-VariableDeclarator']
copynode -13.005756378173828:  root StatementExpression loc5 ^ ^ ^ ; ['root -> StatementExpression', 'copy-VariableDeclarator']
copynode -13.005756378173828:  root StatementExpression label ^ expression ^ ^ ^ ; ['root -> StatementExpression', 'StatementExpression -> label expression']
before@2 batch0 x: -30.511696815490723: root StatementExpression loc5 ^ ^ ^  ; ['root -> StatementExpression', 'copy-VariableDeclarator']
stderr: Check out program version: Math-21b........................................ OK
OpenJDK 64-Bit Server VM warning: ignoring option MaxPermSize=1G; support was removed in 8.0
Running ant (export.dir.src.classes)....................................... OK

  0%|          | 0/1 [00:00<?, ?it/s]/root/projects/Recoder-bwk/run.py:527: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  tmpdepth = np.array(tmpdepth)
/root/envs/recoder/lib/python3.7/site-packages/torch/nn/functional.py:1340: UserWarning: nn.functional.tanh is deprecated. Use torch.tanh instead.
  warnings.warn("nn.functional.tanh is deprecated. Use torch.tanh instead.")
  0%|          | 0/1 [00:03<?, ?it/s]
Traceback (most recent call last):
  File "testDefect4j.py", line 638, in <module>
    ans = solveone(data, model)
  File "/root/projects/Recoder-bwk/run.py", line 1100, in solveone
    ans = BeamSearch((x[0], x[1], None, None, None, None, None, None, x[2], x[3]), dev_set, model, 100, args.batch_size, indexs)
  File "/root/projects/Recoder-bwk/run.py", line 541, in BeamSearch
    result = model(gVar(tmpnl), gVar(tmpnlad), gVar(tmprule), gVar(tmpruleparent), gVar(tmprulechild), gVar(tmpAd), gVar(tmptreepath), gVar(tmpnl8), gVar(tmpnl9), tmpf, tmpc, tmpindex, tmpchar, tmpindex2, rulead, antimasks, None, "test")
  File "/root/envs/recoder/lib/python3.7/site-packages/torch/nn/modules/module.py", line 541, in __call__
    result = self.forward(*input, **kwargs)
  File "/root/projects/Recoder-bwk/Model.py", line 172, in forward
    genP1, _ = self.copy2(rulenoter.unsqueeze(0), decode)
  File "/root/envs/recoder/lib/python3.7/site-packages/torch/nn/modules/module.py", line 541, in __call__
    result = self.forward(*input, **kwargs)
  File "/root/projects/Recoder-bwk/Model.py", line 79, in forward
    genP = self.LinearRes(F.tanh(sourceLinear.unsqueeze(1) + targetLinear.unsqueeze(2))).squeeze(-1)
  File "/root/envs/recoder/lib/python3.7/site-packages/torch/nn/functional.py", line 1341, in tanh
    return input.tanh()
RuntimeError: CUDA out of memory. Tried to allocate 1.95 GiB (GPU 0; 23.65 GiB total capacity; 2.82 GiB already allocated; 1.54 GiB free; 1.59 GiB cached)
