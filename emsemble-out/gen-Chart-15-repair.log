stdout: StatementExpression expression MethodInvocation qualifier state_ter ^ ^ arguments MethodInvocation qualifier DatasetUtilities_ter ^ ^ arguments MethodInvocation qualifier plot_ter ^ ^ member getDataset_ter ^ ^ ^ ^ member calculatePieDatasetTotal_ter ^ ^ ^ ^ member setTotal_ter ^ ^ ^ ^ ^ 
state.setTotal(DatasetUtilities.calculatePieDatasetTotal(plot.getDataset()));

StatementExpression expression MethodInvocation qualifier state_ter ^ ^ arguments MethodInvocation qualifier DatasetUtilities_ter ^ ^ arguments MethodInvocation qualifier plot_ter ^ ^ member getStartAngle_ter ^ ^ ^ ^ member calculatePieDatasetTotal_ter ^ ^ ^ ^ member setTotal_ter ^ ^ ^ ^ ^ 
state.setTotal(DatasetUtilities.calculatePieDatasetTotal(plot.getStartAngle()));

StatementExpression expression MethodInvocation qualifier state_ter ^ ^ arguments MethodInvocation qualifier DatasetUtilities_ter ^ ^ arguments MethodInvocation qualifier plot_ter ^ ^ member getName_ter ^ ^ ^ ^ member calculatePieDatasetTotal_ter ^ ^ ^ ^ member setTotal_ter ^ ^ ^ ^ ^ 
state.setTotal(DatasetUtilities.calculatePieDatasetTotal(plot.getName()));

StatementExpression expression MethodInvocation qualifier state_ter ^ ^ arguments MethodInvocation qualifier DatasetUtilities_ter ^ ^ arguments MethodInvocation qualifier plot_ter ^ ^ member getDataset_ter ^ ^ ^ ^ member setPassesRequired_ter ^ ^ ^ ^ member setTotal_ter ^ ^ ^ ^ ^ 
state.setTotal(DatasetUtilities.setPassesRequired(plot.getDataset()));

StatementExpression expression MethodInvocation qualifier state_ter ^ ^ arguments MethodInvocation qualifier DatasetUtilities_ter ^ ^ arguments MethodInvocation qualifier plot_ter ^ ^ member initialise_ter ^ ^ ^ ^ member calculatePieDatasetTotal_ter ^ ^ ^ ^ member setTotal_ter ^ ^ ^ ^ ^ 
state.setTotal(DatasetUtilities.calculatePieDatasetTotal(plot.initialise()));

StatementExpression expression MethodInvocation qualifier state_ter ^ ^ arguments MethodInvocation qualifier plot_ter ^ ^ member getDataset_ter ^ ^ ^ ^ member setTotal_ter ^ ^ ^ ^ ^ 
state.setTotal(plot.getDataset());

StatementExpression expression MethodInvocation qualifier state_ter ^ ^ arguments MethodInvocation qualifier DatasetUtilities_ter ^ ^ arguments MemberReference member plot_ter ^ ^ ^ ^ member calculatePieDatasetTotal_ter ^ ^ ^ ^ member setTotal_ter ^ ^ ^ ^ ^ 
state.setTotal(DatasetUtilities.calculatePieDatasetTotal(plot));

StatementExpression expression MethodInvocation qualifier state_ter ^ ^ arguments MethodInvocation qualifier DatasetUtilities_ter ^ ^ arguments MethodInvocation qualifier plot_ter ^ ^ member getDataset_ter ^ ^ ^ ^ member setLatestAngle_ter ^ ^ ^ ^ member setTotal_ter ^ ^ ^ ^ ^ 
state.setTotal(DatasetUtilities.setLatestAngle(plot.getDataset()));

StatementExpression expression MethodInvocation qualifier state_ter ^ ^ arguments MethodInvocation qualifier DatasetUtilities_ter ^ ^ arguments MethodInvocation qualifier index_ter ^ ^ member getDataset_ter ^ ^ ^ ^ member calculatePieDatasetTotal_ter ^ ^ ^ ^ member setTotal_ter ^ ^ ^ ^ ^ 
state.setTotal(DatasetUtilities.calculatePieDatasetTotal(index.getDataset()));

StatementExpression expression MethodInvocation qualifier state_ter ^ ^ arguments MethodInvocation qualifier g2_ter ^ ^ arguments MethodInvocation qualifier plot_ter ^ ^ member getDataset_ter ^ ^ ^ ^ member calculatePieDatasetTotal_ter ^ ^ ^ ^ member setTotal_ter ^ ^ ^ ^ ^ 
state.setTotal(g2.calculatePieDatasetTotal(plot.getDataset()));

StatementExpression expression MethodInvocation qualifier state_ter ^ ^ arguments MethodInvocation qualifier DatasetUtilities_ter ^ ^ arguments MethodInvocation qualifier plot_ter ^ ^ member getDataset_ter ^ ^ ^ ^ member initialise_ter ^ ^ ^ ^ member setTotal_ter ^ ^ ^ ^ ^ 
state.setTotal(DatasetUtilities.initialise(plot.getDataset()));

StatementExpression expression MethodInvocation qualifier state_ter ^ ^ arguments MethodInvocation qualifier DatasetUtilities_ter ^ ^ arguments MethodInvocation qualifier g2_ter ^ ^ member getDataset_ter ^ ^ ^ ^ member calculatePieDatasetTotal_ter ^ ^ ^ ^ member setTotal_ter ^ ^ ^ ^ ^ 
state.setTotal(DatasetUtilities.calculatePieDatasetTotal(g2.getDataset()));

StatementExpression expression MethodInvocation qualifier state_ter ^ ^ arguments MethodInvocation qualifier DatasetUtilities_ter ^ ^ arguments MemberReference member index_ter ^ ^ ^ ^ member calculatePieDatasetTotal_ter ^ ^ ^ ^ member setTotal_ter ^ ^ ^ ^ ^ 
state.setTotal(DatasetUtilities.calculatePieDatasetTotal(index));

StatementExpression expression MethodInvocation qualifier state_ter ^ ^ arguments MethodInvocation qualifier DatasetUtilities_ter ^ ^ arguments MethodInvocation qualifier plotArea_ter ^ ^ member getDataset_ter ^ ^ ^ ^ member calculatePieDatasetTotal_ter ^ ^ ^ ^ member setTotal_ter ^ ^ ^ ^ ^ 
state.setTotal(DatasetUtilities.calculatePieDatasetTotal(plotArea.getDataset()));

StatementExpression expression MethodInvocation qualifier state_ter ^ ^ arguments MethodInvocation qualifier DatasetUtilities_ter ^ ^ arguments MethodInvocation qualifier state_ter ^ ^ member getDataset_ter ^ ^ ^ ^ member calculatePieDatasetTotal_ter ^ ^ ^ ^ member setTotal_ter ^ ^ ^ ^ ^ 
state.setTotal(DatasetUtilities.calculatePieDatasetTotal(state.getDataset()));

StatementExpression expression MethodInvocation qualifier state_ter ^ ^ arguments MemberReference member plot_ter ^ ^ ^ ^ member setTotal_ter ^ ^ ^ ^ ^ 
state.setTotal(plot);

StatementExpression expression MethodInvocation qualifier state_ter ^ ^ arguments MethodInvocation qualifier DatasetUtilities_ter ^ ^ arguments MemberReference member plotArea_ter ^ ^ ^ ^ member calculatePieDatasetTotal_ter ^ ^ ^ ^ member setTotal_ter ^ ^ ^ ^ ^ 
state.setTotal(DatasetUtilities.calculatePieDatasetTotal(plotArea));

StatementExpression expression MethodInvocation qualifier state_ter ^ ^ arguments MethodInvocation qualifier state_ter ^ ^ arguments MethodInvocation qualifier plot_ter ^ ^ member getDataset_ter ^ ^ ^ ^ member calculatePieDatasetTotal_ter ^ ^ ^ ^ member setTotal_ter ^ ^ ^ ^ ^ 
state.setTotal(state.calculatePieDatasetTotal(plot.getDataset()));

StatementExpression expression MethodInvocation qualifier state_ter ^ ^ arguments MethodInvocation qualifier DatasetUtilities_ter ^ ^ arguments MethodInvocation qualifier plot_ter ^ ^ member toString_ter ^ ^ ^ ^ member calculatePieDatasetTotal_ter ^ ^ ^ ^ member setTotal_ter ^ ^ ^ ^ ^ 
state.setTotal(DatasetUtilities.calculatePieDatasetTotal(plot.toString()));

StatementExpression expression MethodInvocation qualifier state_ter ^ ^ arguments MethodInvocation member getDataset_ter ^ ^ ^ ^ member setTotal_ter ^ ^ ^ ^ ^ 
state.setTotal(getDataset());

StatementExpression expression MethodInvocation qualifier state_ter ^ ^ arguments MethodInvocation arguments MethodInvocation qualifier plot_ter ^ ^ member getDataset_ter ^ ^ ^ ^ member calculatePieDatasetTotal_ter ^ ^ ^ ^ member setTotal_ter ^ ^ ^ ^ ^ 
state.setTotal(calculatePieDatasetTotal(plot.getDataset()));

StatementExpression expression MethodInvocation qualifier g2_ter ^ ^ arguments MethodInvocation qualifier DatasetUtilities_ter ^ ^ arguments MethodInvocation qualifier plot_ter ^ ^ member getDataset_ter ^ ^ ^ ^ member calculatePieDatasetTotal_ter ^ ^ ^ ^ member setTotal_ter ^ ^ ^ ^ ^ 
g2.setTotal(DatasetUtilities.calculatePieDatasetTotal(plot.getDataset()));

StatementExpression expression MethodInvocation qualifier state_ter ^ ^ arguments Literal value 2_ter ^ ^ ^ ^ member setPassesRequired_ter ^ ^ ^ ^ ^ 
state.setPassesRequired(2);

LocalVariableDeclaration type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name result_ter ^ ^ ^ ^ ^ 
double result = ;


LocalVariableDeclaration type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name result_ter ^ ^ initializer MemberReference member dataset_ter ^ ^ ^ ^ ^ ^ ^ 
double result = dataset;

LocalVariableDeclaration type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name result_ter ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ 
double result = 0;

LocalVariableDeclaration type BasicType name long_ter ^ ^ ^ ^ declarators VariableDeclarator name result_ter ^ ^ initializer Literal value 0.0_ter ^ ^ ^ ^ ^ ^ ^ 
long result = 0.0;

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name result_ter ^ ^ initializer Literal value 0.0_ter ^ ^ ^ ^ ^ ^ ^ 
int result = 0.0;

LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name result_ter ^ ^ initializer Literal value 0.0_ter ^ ^ ^ ^ ^ ^ ^ 
final double result = 0.0;

LocalVariableDeclaration type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name result_ter ^ ^ initializer Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ 
double result = 1;

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member dataset_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((dataset != null)){

LocalVariableDeclaration type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name result_ter ^ ^ initializer Literal value 0.0_ter ^ ^ ^ ^ ^ ^ ^ 
double result = 0.0;

LocalVariableDeclaration type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name result_ter ^ ^ initializer Literal value 2_ter ^ ^ ^ ^ ^ ^ ^ 
double result = 2;

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member dataset_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((dataset == null)){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ member isCircular_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value 0_ter ^ ^ ^ ^ ^ 
if(!isCircular()){
return 0;}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ member getIgnoreNullValues_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value 0_ter ^ ^ ^ ^ ^ 
if(!getIgnoreNullValues()){
return 0;}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ member getIgnoreZeroValues_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value 0_ter ^ ^ ^ ^ ^ 
if(!getIgnoreZeroValues()){
return 0;}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ member getSectionOutlinesVisible_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value 0_ter ^ ^ ^ ^ ^ 
if(!getSectionOutlinesVisible()){
return 0;}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ member getLabelLinksVisible_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value 0_ter ^ ^ ^ ^ ^ 
if(!getLabelLinksVisible()){
return 0;}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ member getSimpleLabels_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value 0_ter ^ ^ ^ ^ ^ 
if(!getSimpleLabels()){
return 0;}
LocalVariableDeclaration type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name result_ter ^ ^ initializer MethodInvocation member getKeys_ter ^ ^ ^ ^ ^ ^ ^ 
double result = getKeys();

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl This selectors MemberReference member dataset_ter ^ ^ ^ MethodInvocation member getKeys_ter ^ ^ ^ MethodInvocation member iterator_ter ^ ^ ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((this.dataset.getKeys().iterator() != null)){

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member dataset_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value 0_ter ^ ^ ^ ^ ^ 
if((dataset == null)){
return 0;}
LocalVariableDeclaration type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name result_ter ^ ^ initializer MemberReference member explodePercentages_ter ^ ^ ^ ^ ^ ^ ^ 
double result = explodePercentages;

StatementExpression expression SuperMethodInvocation member getMaximumExplodePercent_ter ^ ^ ^ ^ ^ 
super.getMaximumExplodePercent();

LocalVariableDeclaration type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name result_ter ^ ^ initializer MemberReference member par0 ^ ^ ^ ^ ^ ^ ^ 
double result = ;


ReturnStatement expression Literal value 0_ter ^ ^ ^ ^ ^ 
if (true) { return 0; }

LocalVariableDeclaration type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name result_ter ^ ^ initializer MethodInvocation member iterator_ter ^ ^ ^ ^ ^ ^ ^ 
double result = iterator();

IfStatement condition MethodInvocation member isCircular_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value 0_ter ^ ^ ^ ^ ^ 
if(isCircular()){
return 0;}
IfStatement condition MethodInvocation member getIgnoreNullValues_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value 0_ter ^ ^ ^ ^ ^ 
if(getIgnoreNullValues()){
return 0;}
IfStatement condition MethodInvocation member getIgnoreZeroValues_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value 0_ter ^ ^ ^ ^ ^ 
if(getIgnoreZeroValues()){
return 0;}
IfStatement condition MethodInvocation member getSectionOutlinesVisible_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value 0_ter ^ ^ ^ ^ ^ 
if(getSectionOutlinesVisible()){
return 0;}
IfStatement condition MethodInvocation member getLabelLinksVisible_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value 0_ter ^ ^ ^ ^ ^ 
if(getLabelLinksVisible()){
return 0;}
IfStatement condition MethodInvocation member getSimpleLabels_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value 0_ter ^ ^ ^ ^ ^ 
if(getSimpleLabels()){
return 0;}
LocalVariableDeclaration type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name result_ter ^ ^ initializer ArrayInitializer initializers ^ ^ ^ ^ ^ ^ 
double result = };


IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ member isCircular_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(!isCircular()){
return;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ member getIgnoreNullValues_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(!getIgnoreNullValues()){
return;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ member getIgnoreZeroValues_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(!getIgnoreZeroValues()){
return;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ member getSectionOutlinesVisible_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(!getSectionOutlinesVisible()){
return;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ member getLabelLinksVisible_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(!getLabelLinksVisible()){
return;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ member getSimpleLabels_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(!getSimpleLabels()){
return;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ member isCircular_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference member result_ter ^ ^ ^ ^ ^ 
if(!isCircular()){
return result;}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ member getIgnoreNullValues_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference member result_ter ^ ^ ^ ^ ^ 
if(!getIgnoreNullValues()){
return result;}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ member getIgnoreZeroValues_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference member result_ter ^ ^ ^ ^ ^ 
if(!getIgnoreZeroValues()){
return result;}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ member getSectionOutlinesVisible_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference member result_ter ^ ^ ^ ^ ^ 
if(!getSectionOutlinesVisible()){
return result;}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ member getLabelLinksVisible_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference member result_ter ^ ^ ^ ^ ^ 
if(!getLabelLinksVisible()){
return result;}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ member getSimpleLabels_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference member result_ter ^ ^ ^ ^ ^ 
if(!getSimpleLabels()){
return result;}
LocalVariableDeclaration type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name result_ter ^ ^ initializer ArrayInitializer_ter ^ ^ ^ ^ ^ 
1 ArrayInitializer_ter
IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl This selectors MemberReference member dataset_ter ^ ^ ^ MethodInvocation member getKeys_ter ^ ^ ^ MethodInvocation member iterator_ter ^ ^ ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((this.dataset.getKeys().iterator() == null)){

ReturnStatement_ter ^ 
if (true) { return;
 }

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member dataset_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference member result_ter ^ ^ ^ ^ ^ 
if((dataset == null)){
return result;}
StatementExpression expression Assignment expressionl MemberReference member result_ter ^ ^ ^ ^ value MethodInvocation qualifier Math_ter ^ ^ arguments MemberReference member result_ter ^ ^ ^ MethodInvocation qualifier explode_ter ^ ^ member doubleValue_ter ^ ^ ^ ^ member max_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
result = Math.max(result, explode.doubleValue());

IfStatement condition MethodInvocation member isCircular_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference member result_ter ^ ^ ^ ^ ^ 
if(isCircular()){
return result;}
IfStatement condition MethodInvocation member getIgnoreNullValues_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference member result_ter ^ ^ ^ ^ ^ 
if(getIgnoreNullValues()){
return result;}
IfStatement condition MethodInvocation member getIgnoreZeroValues_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference member result_ter ^ ^ ^ ^ ^ 
if(getIgnoreZeroValues()){
return result;}
IfStatement condition MethodInvocation member getSectionOutlinesVisible_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference member result_ter ^ ^ ^ ^ ^ 
if(getSectionOutlinesVisible()){
return result;}
IfStatement condition MethodInvocation member getLabelLinksVisible_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference member result_ter ^ ^ ^ ^ ^ 
if(getLabelLinksVisible()){
return result;}
IfStatement condition MethodInvocation member getSimpleLabels_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference member result_ter ^ ^ ^ ^ ^ 
if(getSimpleLabels()){
return result;}
IfStatement condition MethodInvocation member isCircular_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(isCircular()){
return;
}
IfStatement condition MethodInvocation member getIgnoreNullValues_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(getIgnoreNullValues()){
return;
}
IfStatement condition MethodInvocation member getIgnoreZeroValues_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(getIgnoreZeroValues()){
return;
}
IfStatement condition MethodInvocation member getSectionOutlinesVisible_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(getSectionOutlinesVisible()){
return;
}
IfStatement condition MethodInvocation member getLabelLinksVisible_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(getLabelLinksVisible()){
return;
}
IfStatement condition MethodInvocation member getSimpleLabels_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(getSimpleLabels()){
return;
}
LocalVariableDeclaration type ReferenceType name Iterator_ter ^ ^ ^ ^ declarators VariableDeclarator name result_ter ^ ^ initializer Literal value 0.0_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Iterator result = 0.0;

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member dataset_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if((dataset == null)){
return;
}
IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member dataset_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value 0_ter ^ ^ ^ ^ ^ 
if((dataset != null)){
return 0;}
ReturnStatement expression MemberReference member result_ter ^ ^ ^ ^ ^ 
if (true) { return result; }

parameters FormalParameter modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ ^ ^ name result_ter ^ ^ ^ ^ 
double result

stderr: 