stdout: LocalVariableDeclaration type ReferenceType name Builder_ter ^ ^ ^ ^ declarators VariableDeclarator name x_ter ^ ^ initializer MethodInvocation qualifier OriginalMapping_ter ^ ^ selectors MethodInvocation arguments MemberReference selectors ArraySelector index MethodInvocation qualifier entry_ter ^ ^ member getSourceFileId_ter ^ ^ ^ ^ ^ ^ member sources_ter ^ ^ ^ ^ member setOriginalFile_ter ^ ^ ^ MethodInvocation arguments MethodInvocation qualifier entry_ter ^ ^ member getSourceLine_ter ^ ^ ^ ^ member setLineNumber_ter ^ ^ ^ MethodInvocation arguments MethodInvocation qualifier entry_ter ^ ^ member getName_ter ^ ^ ^ ^ member setColumnPosition_ter ^ ^ ^ ^ member newBuilder_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Builder x = OriginalMapping.newBuilder().setOriginalFile(sources[entry.getSourceFileId()]).setLineNumber(entry.getSourceLine()).setColumnPosition(entry.getName());

LocalVariableDeclaration type ReferenceType name Builder_ter ^ ^ ^ ^ declarators VariableDeclarator name x_ter ^ ^ initializer MethodInvocation qualifier OriginalMapping_ter ^ ^ selectors MethodInvocation arguments MemberReference selectors ArraySelector index MethodInvocation qualifier entry_ter ^ ^ member getSourceFileId_ter ^ ^ ^ ^ ^ ^ member sources_ter ^ ^ ^ ^ member setOriginalFile_ter ^ ^ ^ MethodInvocation arguments MethodInvocation qualifier entry_ter ^ ^ member getName_ter ^ ^ ^ ^ member setLineNumber_ter ^ ^ ^ MethodInvocation arguments MethodInvocation qualifier entry_ter ^ ^ member getSourceColumn_ter ^ ^ ^ ^ member setColumnPosition_ter ^ ^ ^ ^ member newBuilder_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Builder x = OriginalMapping.newBuilder().setOriginalFile(sources[entry.getSourceFileId()]).setLineNumber(entry.getName()).setColumnPosition(entry.getSourceColumn());

LocalVariableDeclaration type ReferenceType name Builder_ter ^ ^ ^ ^ declarators VariableDeclarator name x_ter ^ ^ initializer MethodInvocation qualifier OriginalMapping_ter ^ ^ selectors MethodInvocation arguments MemberReference selectors ArraySelector index MethodInvocation qualifier entry_ter ^ ^ member getSourceFileId_ter ^ ^ ^ ^ ^ ^ member sources_ter ^ ^ ^ ^ member setOriginalFile_ter ^ ^ ^ MethodInvocation arguments MethodInvocation qualifier entry_ter ^ ^ member getSourceLine_ter ^ ^ ^ ^ member setLineNumber_ter ^ ^ ^ MethodInvocation arguments MethodInvocation qualifier entry_ter ^ ^ member getSourceColumn_ter ^ ^ ^ ^ member setColumnPosition_ter ^ ^ ^ ^ member newBuilder_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Builder x = OriginalMapping.newBuilder().setOriginalFile(sources[entry.getSourceFileId()]).setLineNumber(entry.getSourceLine()).setColumnPosition(entry.getSourceColumn());

LocalVariableDeclaration type ReferenceType name Builder_ter ^ ^ ^ ^ declarators VariableDeclarator name x_ter ^ ^ initializer MethodInvocation qualifier OriginalMapping_ter ^ ^ selectors MethodInvocation arguments MemberReference member sources_ter ^ ^ ^ ^ member setOriginalFile_ter ^ ^ ^ MethodInvocation arguments MethodInvocation qualifier entry_ter ^ ^ member getSourceLine_ter ^ ^ ^ ^ member setLineNumber_ter ^ ^ ^ MethodInvocation arguments MethodInvocation qualifier entry_ter ^ ^ member getSourceColumn_ter ^ ^ ^ ^ member setColumnPosition_ter ^ ^ ^ ^ member newBuilder_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Builder x = OriginalMapping.newBuilder().setOriginalFile(sources).setLineNumber(entry.getSourceLine()).setColumnPosition(entry.getSourceColumn());

LocalVariableDeclaration type ReferenceType name Builder_ter ^ ^ ^ ^ declarators VariableDeclarator name x_ter ^ ^ initializer MethodInvocation qualifier OriginalMapping_ter ^ ^ selectors MethodInvocation arguments MemberReference member names_ter ^ ^ ^ ^ member setOriginalFile_ter ^ ^ ^ MethodInvocation arguments MethodInvocation qualifier entry_ter ^ ^ member getSourceLine_ter ^ ^ ^ ^ member setLineNumber_ter ^ ^ ^ MethodInvocation arguments MethodInvocation qualifier entry_ter ^ ^ member getSourceColumn_ter ^ ^ ^ ^ member setColumnPosition_ter ^ ^ ^ ^ member newBuilder_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Builder x = OriginalMapping.newBuilder().setOriginalFile(names).setLineNumber(entry.getSourceLine()).setColumnPosition(entry.getSourceColumn());

LocalVariableDeclaration type ReferenceType name Builder_ter ^ ^ ^ ^ declarators VariableDeclarator name x_ter ^ ^ initializer MethodInvocation qualifier OriginalMapping_ter ^ ^ selectors MethodInvocation arguments MemberReference selectors ArraySelector index MethodInvocation qualifier entry_ter ^ ^ member getSourceFileId_ter ^ ^ ^ ^ ^ ^ member sources_ter ^ ^ ^ ^ member setOriginalFile_ter ^ ^ ^ MethodInvocation arguments MethodInvocation qualifier entry_ter ^ ^ member getSourceLine_ter ^ ^ ^ ^ member setLineNumber_ter ^ ^ ^ MethodInvocation arguments MethodInvocation qualifier entry_ter ^ ^ member getNameId_ter ^ ^ ^ ^ member setColumnPosition_ter ^ ^ ^ ^ member newBuilder_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Builder x = OriginalMapping.newBuilder().setOriginalFile(sources[entry.getSourceFileId()]).setLineNumber(entry.getSourceLine()).setColumnPosition(entry.getNameId());

LocalVariableDeclaration type ReferenceType name Builder_ter ^ ^ ^ ^ declarators VariableDeclarator name x_ter ^ ^ initializer MethodInvocation qualifier OriginalMapping_ter ^ ^ selectors MethodInvocation arguments MemberReference selectors ArraySelector index MethodInvocation qualifier entry_ter ^ ^ member getSourceFileId_ter ^ ^ ^ ^ ^ ^ member sources_ter ^ ^ ^ ^ member setOriginalFile_ter ^ ^ ^ MethodInvocation arguments MethodInvocation qualifier entry_ter ^ ^ member getSourceLine_ter ^ ^ ^ ^ member setLineNumber_ter ^ ^ ^ MethodInvocation arguments MethodInvocation qualifier entry_ter ^ ^ member toString_ter ^ ^ ^ ^ member setColumnPosition_ter ^ ^ ^ ^ member newBuilder_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Builder x = OriginalMapping.newBuilder().setOriginalFile(sources[entry.getSourceFileId()]).setLineNumber(entry.getSourceLine()).setColumnPosition(entry.toString());

LocalVariableDeclaration type ReferenceType name Builder_ter ^ ^ ^ ^ declarators VariableDeclarator name x_ter ^ ^ initializer MethodInvocation qualifier OriginalMapping_ter ^ ^ selectors MethodInvocation arguments MemberReference selectors ArraySelector index MethodInvocation qualifier entry_ter ^ ^ member getName_ter ^ ^ ^ ^ ^ ^ member sources_ter ^ ^ ^ ^ member setOriginalFile_ter ^ ^ ^ MethodInvocation arguments MethodInvocation qualifier entry_ter ^ ^ member getSourceLine_ter ^ ^ ^ ^ member setLineNumber_ter ^ ^ ^ MethodInvocation arguments MethodInvocation qualifier entry_ter ^ ^ member getSourceColumn_ter ^ ^ ^ ^ member setColumnPosition_ter ^ ^ ^ ^ member newBuilder_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Builder x = OriginalMapping.newBuilder().setOriginalFile(sources[entry.getName()]).setLineNumber(entry.getSourceLine()).setColumnPosition(entry.getSourceColumn());

LocalVariableDeclaration type ReferenceType name Builder_ter ^ ^ ^ ^ declarators VariableDeclarator name x_ter ^ ^ initializer MethodInvocation qualifier OriginalMapping_ter ^ ^ selectors MethodInvocation arguments MemberReference selectors ArraySelector index MethodInvocation qualifier entry_ter ^ ^ member getSourceFileId_ter ^ ^ ^ ^ ^ ^ member sources_ter ^ ^ ^ ^ member setOriginalFile_ter ^ ^ ^ MethodInvocation arguments MethodInvocation qualifier entry_ter ^ ^ member getNameId_ter ^ ^ ^ ^ member setLineNumber_ter ^ ^ ^ MethodInvocation arguments MethodInvocation qualifier entry_ter ^ ^ member getSourceColumn_ter ^ ^ ^ ^ member setColumnPosition_ter ^ ^ ^ ^ member newBuilder_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Builder x = OriginalMapping.newBuilder().setOriginalFile(sources[entry.getSourceFileId()]).setLineNumber(entry.getNameId()).setColumnPosition(entry.getSourceColumn());

LocalVariableDeclaration type ReferenceType name Builder_ter ^ ^ ^ ^ declarators VariableDeclarator name x_ter ^ ^ initializer MethodInvocation qualifier OriginalMapping_ter ^ ^ selectors MethodInvocation arguments MemberReference selectors ArraySelector index MethodInvocation qualifier entry_ter ^ ^ member getSourceFileId_ter ^ ^ ^ ^ ^ ^ member sources_ter ^ ^ ^ ^ member setOriginalFile_ter ^ ^ ^ MethodInvocation arguments MethodInvocation qualifier entry_ter ^ ^ member toString_ter ^ ^ ^ ^ member setLineNumber_ter ^ ^ ^ MethodInvocation arguments MethodInvocation qualifier entry_ter ^ ^ member getSourceColumn_ter ^ ^ ^ ^ member setColumnPosition_ter ^ ^ ^ ^ member newBuilder_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Builder x = OriginalMapping.newBuilder().setOriginalFile(sources[entry.getSourceFileId()]).setLineNumber(entry.toString()).setColumnPosition(entry.getSourceColumn());

LocalVariableDeclaration type ReferenceType name Builder_ter ^ ^ ^ ^ declarators VariableDeclarator name x_ter ^ ^ initializer MethodInvocation qualifier OriginalMapping_ter ^ ^ selectors MethodInvocation arguments MemberReference member entry_ter ^ ^ ^ ^ member setOriginalFile_ter ^ ^ ^ MethodInvocation arguments MethodInvocation qualifier entry_ter ^ ^ member getSourceLine_ter ^ ^ ^ ^ member setLineNumber_ter ^ ^ ^ MethodInvocation arguments MethodInvocation qualifier entry_ter ^ ^ member getSourceColumn_ter ^ ^ ^ ^ member setColumnPosition_ter ^ ^ ^ ^ member newBuilder_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Builder x = OriginalMapping.newBuilder().setOriginalFile(entry).setLineNumber(entry.getSourceLine()).setColumnPosition(entry.getSourceColumn());

LocalVariableDeclaration type ReferenceType name Builder_ter ^ ^ ^ ^ declarators VariableDeclarator name x_ter ^ ^ initializer MethodInvocation qualifier OriginalMapping_ter ^ ^ selectors MethodInvocation arguments MemberReference selectors ArraySelector index MethodInvocation qualifier entry_ter ^ ^ member getSourceFileId_ter ^ ^ ^ ^ ^ ^ member sources_ter ^ ^ ^ ^ member setOriginalFile_ter ^ ^ ^ MethodInvocation arguments MethodInvocation qualifier entry_ter ^ ^ member getSourceColumn_ter ^ ^ ^ ^ member setLineNumber_ter ^ ^ ^ MethodInvocation arguments MethodInvocation qualifier entry_ter ^ ^ member getSourceColumn_ter ^ ^ ^ ^ member setColumnPosition_ter ^ ^ ^ ^ member newBuilder_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Builder x = OriginalMapping.newBuilder().setOriginalFile(sources[entry.getSourceFileId()]).setLineNumber(entry.getSourceColumn()).setColumnPosition(entry.getSourceColumn());

LocalVariableDeclaration type ReferenceType name Builder_ter ^ ^ ^ ^ declarators VariableDeclarator name x_ter ^ ^ initializer MethodInvocation qualifier OriginalMapping_ter ^ ^ selectors MethodInvocation arguments MemberReference selectors ArraySelector index MethodInvocation qualifier entry_ter ^ ^ member getSourceFileId_ter ^ ^ ^ ^ ^ ^ member sources_ter ^ ^ ^ ^ member setOriginalFile_ter ^ ^ ^ MethodInvocation arguments MethodInvocation qualifier entry_ter ^ ^ member getSourceLine_ter ^ ^ ^ ^ member setLineNumber_ter ^ ^ ^ MethodInvocation arguments MethodInvocation qualifier entry_ter ^ ^ member getSourceLine_ter ^ ^ ^ ^ member setColumnPosition_ter ^ ^ ^ ^ member newBuilder_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Builder x = OriginalMapping.newBuilder().setOriginalFile(sources[entry.getSourceFileId()]).setLineNumber(entry.getSourceLine()).setColumnPosition(entry.getSourceLine());

LocalVariableDeclaration type ReferenceType name Builder_ter ^ ^ ^ ^ declarators VariableDeclarator name x_ter ^ ^ initializer MethodInvocation qualifier OriginalMapping_ter ^ ^ selectors MethodInvocation arguments MemberReference selectors ArraySelector index MethodInvocation qualifier entry_ter ^ ^ member getSourceFileId_ter ^ ^ ^ ^ ^ ^ member sources_ter ^ ^ ^ ^ member setOriginalFile_ter ^ ^ ^ MethodInvocation arguments MethodInvocation qualifier entry_ter ^ ^ member getSourceLine_ter ^ ^ ^ ^ member setLineNumber_ter ^ ^ ^ MethodInvocation arguments MethodInvocation qualifier entry_ter ^ ^ member getSourceFileId_ter ^ ^ ^ ^ member setColumnPosition_ter ^ ^ ^ ^ member newBuilder_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Builder x = OriginalMapping.newBuilder().setOriginalFile(sources[entry.getSourceFileId()]).setLineNumber(entry.getSourceLine()).setColumnPosition(entry.getSourceFileId());

LocalVariableDeclaration type ReferenceType name Builder_ter ^ ^ ^ ^ declarators VariableDeclarator name x_ter ^ ^ initializer MethodInvocation qualifier OriginalMapping_ter ^ ^ selectors MethodInvocation arguments MemberReference selectors ArraySelector index MethodInvocation qualifier entry_ter ^ ^ member getSourceFileId_ter ^ ^ ^ ^ ^ ^ member sources_ter ^ ^ ^ ^ member setOriginalFile_ter ^ ^ ^ MethodInvocation arguments MethodInvocation qualifier entry_ter ^ ^ member getSourceLine_ter ^ ^ ^ ^ member setLineNumber_ter ^ ^ ^ MethodInvocation arguments MethodInvocation qualifier entry_ter ^ ^ member getSourceColumn_ter ^ ^ ^ ^ member getOriginalMappingForEntry_ter ^ ^ ^ ^ member newBuilder_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Builder x = OriginalMapping.newBuilder().setOriginalFile(sources[entry.getSourceFileId()]).setLineNumber(entry.getSourceLine()).getOriginalMappingForEntry(entry.getSourceColumn());

LocalVariableDeclaration type ReferenceType name Builder_ter ^ ^ ^ ^ declarators VariableDeclarator name x_ter ^ ^ initializer MethodInvocation qualifier OriginalMapping_ter ^ ^ selectors MethodInvocation arguments MemberReference selectors ArraySelector index MethodInvocation qualifier entry_ter ^ ^ member getSourceFileId_ter ^ ^ ^ ^ ^ ^ member sources_ter ^ ^ ^ ^ member setOriginalFile_ter ^ ^ ^ MethodInvocation arguments MethodInvocation qualifier entry_ter ^ ^ member getSourceFileId_ter ^ ^ ^ ^ member setLineNumber_ter ^ ^ ^ MethodInvocation arguments MethodInvocation qualifier entry_ter ^ ^ member getSourceColumn_ter ^ ^ ^ ^ member setColumnPosition_ter ^ ^ ^ ^ member newBuilder_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Builder x = OriginalMapping.newBuilder().setOriginalFile(sources[entry.getSourceFileId()]).setLineNumber(entry.getSourceFileId()).setColumnPosition(entry.getSourceColumn());

LocalVariableDeclaration type ReferenceType name Builder_ter ^ ^ ^ ^ declarators VariableDeclarator name x_ter ^ ^ initializer MethodInvocation qualifier OriginalMapping_ter ^ ^ selectors MethodInvocation arguments MemberReference selectors ArraySelector index MethodInvocation qualifier entry_ter ^ ^ member getSourceFileId_ter ^ ^ ^ ^ ^ ^ member sources_ter ^ ^ ^ ^ member getOriginalMappingForEntry_ter ^ ^ ^ MethodInvocation arguments MethodInvocation qualifier entry_ter ^ ^ member getSourceLine_ter ^ ^ ^ ^ member setLineNumber_ter ^ ^ ^ MethodInvocation arguments MethodInvocation qualifier entry_ter ^ ^ member getSourceColumn_ter ^ ^ ^ ^ member setColumnPosition_ter ^ ^ ^ ^ member newBuilder_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Builder x = OriginalMapping.newBuilder().getOriginalMappingForEntry(sources[entry.getSourceFileId()]).setLineNumber(entry.getSourceLine()).setColumnPosition(entry.getSourceColumn());

LocalVariableDeclaration type ReferenceType name Builder_ter ^ ^ ^ ^ declarators VariableDeclarator name x_ter ^ ^ initializer MethodInvocation qualifier OriginalMapping_ter ^ ^ selectors MethodInvocation arguments MemberReference selectors ArraySelector index MethodInvocation qualifier entry_ter ^ ^ member getSourceFileId_ter ^ ^ ^ ^ ^ ^ member sources_ter ^ ^ ^ ^ member setOriginalFile_ter ^ ^ ^ ^ member newBuilder_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Builder x = OriginalMapping.newBuilder().setOriginalFile(sources[entry.getSourceFileId()]);

LocalVariableDeclaration type ReferenceType name Builder_ter ^ ^ ^ ^ declarators VariableDeclarator name x_ter ^ ^ initializer MethodInvocation qualifier OriginalMapping_ter ^ ^ selectors MethodInvocation arguments MethodInvocation qualifier entry_ter ^ ^ member getSourceLine_ter ^ ^ ^ ^ member setLineNumber_ter ^ ^ ^ ^ member newBuilder_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Builder x = OriginalMapping.newBuilder().setLineNumber(entry.getSourceLine());

LocalVariableDeclaration type ReferenceType name Builder_ter ^ ^ ^ ^ declarators VariableDeclarator name x_ter ^ ^ initializer MethodInvocation qualifier OriginalMapping_ter ^ ^ selectors MethodInvocation arguments MemberReference selectors ArraySelector index MethodInvocation qualifier entry_ter ^ ^ member getSourceFileId_ter ^ ^ ^ ^ ^ ^ member sources_ter ^ ^ ^ ^ member setOriginalFile_ter ^ ^ ^ MethodInvocation arguments MethodInvocation qualifier entry_ter ^ ^ member getSourceLine_ter ^ ^ ^ ^ member getOriginalMappingForEntry_ter ^ ^ ^ MethodInvocation arguments MethodInvocation qualifier entry_ter ^ ^ member getSourceColumn_ter ^ ^ ^ ^ member setColumnPosition_ter ^ ^ ^ ^ member newBuilder_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Builder x = OriginalMapping.newBuilder().setOriginalFile(sources[entry.getSourceFileId()]).getOriginalMappingForEntry(entry.getSourceLine()).setColumnPosition(entry.getSourceColumn());

LocalVariableDeclaration type ReferenceType name Builder_ter ^ ^ ^ ^ declarators VariableDeclarator name x_ter ^ ^ initializer MethodInvocation qualifier OriginalMapping_ter ^ ^ selectors MethodInvocation arguments MemberReference selectors ArraySelector index MethodInvocation qualifier entry_ter ^ ^ member getSourceFileId_ter ^ ^ ^ ^ ^ ^ member sources_ter ^ ^ ^ ^ member setOriginalFile_ter ^ ^ ^ MethodInvocation arguments MethodInvocation qualifier entry_ter ^ ^ member getSourceLine_ter ^ ^ ^ ^ member setLineNumber_ter ^ ^ ^ ^ member newBuilder_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Builder x = OriginalMapping.newBuilder().setOriginalFile(sources[entry.getSourceFileId()]).setLineNumber(entry.getSourceLine());

LocalVariableDeclaration type ReferenceType name Builder_ter ^ ^ ^ ^ declarators VariableDeclarator name x_ter ^ ^ initializer MethodInvocation qualifier OriginalMapping_ter ^ ^ selectors MethodInvocation arguments MemberReference selectors ArraySelector index MethodInvocation qualifier entry_ter ^ ^ member getSourceFileId_ter ^ ^ ^ ^ ^ ^ member sources_ter ^ ^ ^ ^ member setOriginalFile_ter ^ ^ ^ MethodInvocation arguments MethodInvocation qualifier entry_ter ^ ^ member getSourceColumn_ter ^ ^ ^ ^ member setColumnPosition_ter ^ ^ ^ ^ member newBuilder_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Builder x = OriginalMapping.newBuilder().setOriginalFile(sources[entry.getSourceFileId()]).setColumnPosition(entry.getSourceColumn());

LocalVariableDeclaration type ReferenceType name Builder_ter ^ ^ ^ ^ declarators VariableDeclarator name x_ter ^ ^ initializer MethodInvocation qualifier OriginalMapping_ter ^ ^ selectors MethodInvocation arguments MemberReference selectors ArraySelector index MethodInvocation qualifier entry_ter ^ ^ member getSourceFileId_ter ^ ^ ^ ^ ^ ^ member names_ter ^ ^ ^ ^ member setOriginalFile_ter ^ ^ ^ MethodInvocation arguments MethodInvocation qualifier entry_ter ^ ^ member getSourceLine_ter ^ ^ ^ ^ member setLineNumber_ter ^ ^ ^ MethodInvocation arguments MethodInvocation qualifier entry_ter ^ ^ member getSourceColumn_ter ^ ^ ^ ^ member setColumnPosition_ter ^ ^ ^ ^ member newBuilder_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Builder x = OriginalMapping.newBuilder().setOriginalFile(names[entry.getSourceFileId()]).setLineNumber(entry.getSourceLine()).setColumnPosition(entry.getSourceColumn());

ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if (true) { return null; }

LocalVariableDeclaration type ReferenceType name Builder_ter ^ ^ ^ ^ declarators VariableDeclarator name x_ter ^ ^ initializer MethodInvocation qualifier OriginalMapping_ter ^ ^ selectors MethodInvocation arguments MethodInvocation qualifier entry_ter ^ ^ member getSourceLine_ter ^ ^ ^ ^ member setLineNumber_ter ^ ^ ^ MethodInvocation arguments MethodInvocation qualifier entry_ter ^ ^ member getSourceColumn_ter ^ ^ ^ ^ member setColumnPosition_ter ^ ^ ^ ^ member newBuilder_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Builder x = OriginalMapping.newBuilder().setLineNumber(entry.getSourceLine()).setColumnPosition(entry.getSourceColumn());

LocalVariableDeclaration type ReferenceType name Builder_ter ^ ^ ^ ^ declarators VariableDeclarator name x_ter ^ ^ initializer MethodInvocation qualifier OriginalMapping_ter ^ ^ selectors MethodInvocation arguments MemberReference selectors ArraySelector index MethodInvocation qualifier entry_ter ^ ^ member getSourceFileId_ter ^ ^ ^ ^ ^ ^ member sources_ter ^ ^ ^ ^ member setOriginalFile_ter ^ ^ ^ MethodInvocation arguments MethodInvocation qualifier entry_ter ^ ^ member getSourceLine_ter ^ ^ ^ ^ member setLineNumber_ter ^ ^ ^ MethodInvocation arguments MethodInvocation qualifier entry_ter ^ ^ member getOriginalMappingForEntry_ter ^ ^ ^ ^ member setColumnPosition_ter ^ ^ ^ ^ member newBuilder_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Builder x = OriginalMapping.newBuilder().setOriginalFile(sources[entry.getSourceFileId()]).setLineNumber(entry.getSourceLine()).setColumnPosition(entry.getOriginalMappingForEntry());

LocalVariableDeclaration type ReferenceType name Builder_ter ^ ^ ^ ^ declarators VariableDeclarator name x_ter ^ ^ initializer MethodInvocation qualifier OriginalMapping_ter ^ ^ selectors MethodInvocation arguments MemberReference selectors ArraySelector index MethodInvocation qualifier entry_ter ^ ^ member getSourceFileId_ter ^ ^ ^ ^ ^ ^ member sources_ter ^ ^ ^ ^ member setOriginalFile_ter ^ ^ ^ MethodInvocation arguments MethodInvocation qualifier entry_ter ^ ^ member getSourceLine_ter ^ ^ ^ ^ member setLineNumber_ter ^ ^ ^ MethodInvocation arguments MethodInvocation qualifier x_ter ^ ^ member getSourceColumn_ter ^ ^ ^ ^ member setColumnPosition_ter ^ ^ ^ ^ member newBuilder_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Builder x = OriginalMapping.newBuilder().setOriginalFile(sources[entry.getSourceFileId()]).setLineNumber(entry.getSourceLine()).setColumnPosition(x.getSourceColumn());

LocalVariableDeclaration type ReferenceType name Builder_ter ^ ^ ^ ^ declarators VariableDeclarator name x_ter ^ ^ initializer MethodInvocation qualifier OriginalMapping_ter ^ ^ selectors MethodInvocation arguments MethodInvocation qualifier entry_ter ^ ^ member getSourceLine_ter ^ ^ ^ ^ member setLineNumber_ter ^ ^ ^ MethodInvocation arguments MethodInvocation qualifier entry_ter ^ ^ member getSourceLine_ter ^ ^ ^ ^ member setLineNumber_ter ^ ^ ^ ^ member newBuilder_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Builder x = OriginalMapping.newBuilder().setLineNumber(entry.getSourceLine()).setLineNumber(entry.getSourceLine());

LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name Builder_ter ^ ^ ^ ^ declarators VariableDeclarator name x_ter ^ ^ initializer MethodInvocation qualifier OriginalMapping_ter ^ ^ selectors MethodInvocation arguments MemberReference selectors ArraySelector index MethodInvocation qualifier entry_ter ^ ^ member getSourceFileId_ter ^ ^ ^ ^ ^ ^ member sources_ter ^ ^ ^ ^ member setOriginalFile_ter ^ ^ ^ MethodInvocation arguments MethodInvocation qualifier entry_ter ^ ^ member getSourceLine_ter ^ ^ ^ ^ member setLineNumber_ter ^ ^ ^ MethodInvocation arguments MethodInvocation qualifier entry_ter ^ ^ member getSourceColumn_ter ^ ^ ^ ^ member setColumnPosition_ter ^ ^ ^ ^ member newBuilder_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
final Builder x = OriginalMapping.newBuilder().setOriginalFile(sources[entry.getSourceFileId()]).setLineNumber(entry.getSourceLine()).setColumnPosition(entry.getSourceColumn());

LocalVariableDeclaration type ReferenceType name Builder_ter ^ ^ ^ ^ declarators VariableDeclarator name x_ter ^ ^ initializer MethodInvocation qualifier OriginalMapping_ter ^ ^ selectors MethodInvocation arguments MemberReference selectors ArraySelector index MethodInvocation qualifier entry_ter ^ ^ member getSourceFileId_ter ^ ^ ^ ^ ^ ^ member sources_ter ^ ^ ^ ^ member setOriginalFile_ter ^ ^ ^ MethodInvocation arguments MemberReference selectors ArraySelector index MethodInvocation qualifier entry_ter ^ ^ member getSourceFileId_ter ^ ^ ^ ^ ^ ^ member sources_ter ^ ^ ^ ^ member setOriginalFile_ter ^ ^ ^ ^ member newBuilder_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Builder x = OriginalMapping.newBuilder().setOriginalFile(sources[entry.getSourceFileId()]).setOriginalFile(sources[entry.getSourceFileId()]);

LocalVariableDeclaration type ReferenceType name Builder_ter ^ ^ ^ ^ declarators VariableDeclarator name x_ter ^ ^ initializer MethodInvocation qualifier OriginalMapping_ter ^ ^ member newBuilder_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Builder x = OriginalMapping.newBuilder();

LocalVariableDeclaration type ReferenceType name Builder_ter ^ ^ ^ ^ declarators VariableDeclarator name x_ter ^ ^ initializer MethodInvocation qualifier OriginalMapping_ter ^ ^ selectors MethodInvocation arguments MemberReference selectors ArraySelector index MethodInvocation qualifier entry_ter ^ ^ member getNameId_ter ^ ^ ^ ^ ^ ^ member sources_ter ^ ^ ^ ^ member setOriginalFile_ter ^ ^ ^ MethodInvocation arguments MethodInvocation qualifier entry_ter ^ ^ member getSourceLine_ter ^ ^ ^ ^ member setLineNumber_ter ^ ^ ^ MethodInvocation arguments MethodInvocation qualifier entry_ter ^ ^ member getSourceColumn_ter ^ ^ ^ ^ member setColumnPosition_ter ^ ^ ^ ^ member newBuilder_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Builder x = OriginalMapping.newBuilder().setOriginalFile(sources[entry.getNameId()]).setLineNumber(entry.getSourceLine()).setColumnPosition(entry.getSourceColumn());

StatementExpression expression MethodInvocation member createReverseMapping_ter ^ ^ ^ ^ ^ 
createReverseMapping();

LocalVariableDeclaration type ReferenceType name Builder_ter ^ ^ ^ ^ declarators VariableDeclarator name x_ter ^ ^ initializer MethodInvocation qualifier OriginalMapping_ter ^ ^ selectors MethodInvocation arguments MemberReference selectors ArraySelector index MethodInvocation qualifier entry_ter ^ ^ member toString_ter ^ ^ ^ ^ ^ ^ member sources_ter ^ ^ ^ ^ member setOriginalFile_ter ^ ^ ^ MethodInvocation arguments MethodInvocation qualifier entry_ter ^ ^ member getSourceLine_ter ^ ^ ^ ^ member setLineNumber_ter ^ ^ ^ MethodInvocation arguments MethodInvocation qualifier entry_ter ^ ^ member getSourceColumn_ter ^ ^ ^ ^ member setColumnPosition_ter ^ ^ ^ ^ member newBuilder_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Builder x = OriginalMapping.newBuilder().setOriginalFile(sources[entry.toString()]).setLineNumber(entry.getSourceLine()).setColumnPosition(entry.getSourceColumn());

LocalVariableDeclaration type ReferenceType name Builder_ter ^ ^ ^ ^ declarators VariableDeclarator name x_ter ^ ^ initializer MethodInvocation qualifier OriginalMapping_ter ^ ^ selectors MethodInvocation arguments MethodInvocation qualifier entry_ter ^ ^ member getSourceColumn_ter ^ ^ ^ ^ member setColumnPosition_ter ^ ^ ^ ^ member newBuilder_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Builder x = OriginalMapping.newBuilder().setColumnPosition(entry.getSourceColumn());

LocalVariableDeclaration type ReferenceType name Builder_ter ^ ^ ^ ^ declarators VariableDeclarator name x_ter ^ ^ initializer MethodInvocation qualifier OriginalMapping_ter ^ ^ selectors MethodInvocation arguments MemberReference selectors ArraySelector index MethodInvocation qualifier entry_ter ^ ^ member getSourceFileId_ter ^ ^ ^ ^ ^ ^ member sources_ter ^ ^ ^ ^ member setOriginalFile_ter ^ ^ ^ MethodInvocation arguments MethodInvocation qualifier entry_ter ^ ^ member getOriginalMappingForEntry_ter ^ ^ ^ ^ member setLineNumber_ter ^ ^ ^ MethodInvocation arguments MethodInvocation qualifier entry_ter ^ ^ member getSourceColumn_ter ^ ^ ^ ^ member setColumnPosition_ter ^ ^ ^ ^ member newBuilder_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Builder x = OriginalMapping.newBuilder().setOriginalFile(sources[entry.getSourceFileId()]).setLineNumber(entry.getOriginalMappingForEntry()).setColumnPosition(entry.getSourceColumn());

LocalVariableDeclaration type ReferenceType name Builder_ter ^ ^ ^ ^ declarators VariableDeclarator name x_ter ^ ^ initializer MethodInvocation qualifier OriginalMapping_ter ^ ^ selectors MethodInvocation arguments MethodInvocation qualifier entry_ter ^ ^ member getSourceLine_ter ^ ^ ^ ^ member setLineNumber_ter ^ ^ ^ MethodInvocation arguments MemberReference selectors ArraySelector index MethodInvocation qualifier entry_ter ^ ^ member getSourceFileId_ter ^ ^ ^ ^ ^ ^ member sources_ter ^ ^ ^ ^ member setOriginalFile_ter ^ ^ ^ ^ member newBuilder_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Builder x = OriginalMapping.newBuilder().setLineNumber(entry.getSourceLine()).setOriginalFile(sources[entry.getSourceFileId()]);

LocalVariableDeclaration type ReferenceType name Builder_ter ^ ^ ^ ^ declarators VariableDeclarator name x_ter ^ ^ initializer MethodInvocation qualifier OriginalMapping_ter ^ ^ selectors MethodInvocation arguments MemberReference selectors ArraySelector index MethodInvocation qualifier entry_ter ^ ^ member getSourceFileId_ter ^ ^ ^ ^ ^ MethodInvocation arguments MemberReference selectors ArraySelector index MethodInvocation qualifier entry_ter ^ ^ member getSourceFileId_ter ^ ^ ^ ^ ^ ^ member sources_ter ^ ^ ^ ^ member setOriginalFile_ter ^ ^ ^ ^ member sources_ter ^ ^ ^ ^ member setOriginalFile_ter ^ ^ ^ MethodInvocation arguments MethodInvocation qualifier entry_ter ^ ^ member getSourceLine_ter ^ ^ ^ ^ member setLineNumber_ter ^ ^ ^ MethodInvocation arguments MethodInvocation qualifier entry_ter ^ ^ member getSourceColumn_ter ^ ^ ^ ^ member setColumnPosition_ter ^ ^ ^ ^ member newBuilder_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Builder x = OriginalMapping.newBuilder().setOriginalFile(sources[entry.getSourceFileId()].setOriginalFile(sources[entry.getSourceFileId()])).setLineNumber(entry.getSourceLine()).setColumnPosition(entry.getSourceColumn());

LocalVariableDeclaration type ReferenceType name Builder_ter ^ ^ ^ ^ declarators VariableDeclarator name x_ter ^ ^ initializer MethodInvocation qualifier OriginalMapping_ter ^ ^ selectors MethodInvocation arguments MemberReference selectors ArraySelector index MethodInvocation qualifier entry_ter ^ ^ member getSourceColumn_ter ^ ^ ^ ^ ^ ^ member sources_ter ^ ^ ^ ^ member setOriginalFile_ter ^ ^ ^ MethodInvocation arguments MethodInvocation qualifier entry_ter ^ ^ member getSourceLine_ter ^ ^ ^ ^ member setLineNumber_ter ^ ^ ^ MethodInvocation arguments MethodInvocation qualifier entry_ter ^ ^ member getSourceColumn_ter ^ ^ ^ ^ member setColumnPosition_ter ^ ^ ^ ^ member newBuilder_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Builder x = OriginalMapping.newBuilder().setOriginalFile(sources[entry.getSourceColumn()]).setLineNumber(entry.getSourceLine()).setColumnPosition(entry.getSourceColumn());

LocalVariableDeclaration type ReferenceType name Builder_ter ^ ^ ^ ^ declarators VariableDeclarator name x_ter ^ ^ initializer MethodInvocation qualifier OriginalMapping_ter ^ ^ selectors MethodInvocation arguments MemberReference selectors ArraySelector index MethodInvocation qualifier entry_ter ^ ^ member getSourceFileId_ter ^ ^ ^ ^ ^ ^ member sources_ter ^ ^ ^ ^ member setOriginalFile_ter ^ ^ ^ MethodInvocation arguments MethodInvocation qualifier entry_ter ^ ^ member getSourceLine_ter ^ ^ ^ ^ member setLineNumber_ter ^ ^ ^ MethodInvocation arguments MethodInvocation qualifier entry_ter ^ ^ member getSourceColumn_ter ^ ^ ^ ^ member setColumnPosition_ter ^ ^ ^ ^ member getOriginalMappingForEntry_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Builder x = OriginalMapping.getOriginalMappingForEntry().setOriginalFile(sources[entry.getSourceFileId()]).setLineNumber(entry.getSourceLine()).setColumnPosition(entry.getSourceColumn());

LocalVariableDeclaration type ReferenceType name Builder_ter ^ ^ ^ ^ declarators VariableDeclarator name x_ter ^ ^ initializer MethodInvocation qualifier OriginalMapping_ter ^ ^ selectors MethodInvocation arguments MethodInvocation qualifier entry_ter ^ ^ member getSourceColumn_ter ^ ^ ^ ^ member setColumnPosition_ter ^ ^ ^ MethodInvocation arguments MethodInvocation qualifier entry_ter ^ ^ member getSourceColumn_ter ^ ^ ^ ^ member setColumnPosition_ter ^ ^ ^ ^ member newBuilder_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Builder x = OriginalMapping.newBuilder().setColumnPosition(entry.getSourceColumn()).setColumnPosition(entry.getSourceColumn());

StatementExpression expression MethodInvocation qualifier OriginalMapping_ter ^ ^ member createReverseMapping_ter ^ ^ ^ ^ ^ 
OriginalMapping.createReverseMapping();

LocalVariableDeclaration type ReferenceType name Builder_ter ^ ^ ^ ^ declarators VariableDeclarator name x_ter ^ ^ initializer MethodInvocation qualifier OriginalMapping_ter ^ ^ selectors MethodInvocation arguments MethodInvocation qualifier entry_ter ^ ^ member getSourceColumn_ter ^ ^ ^ ^ member setColumnPosition_ter ^ ^ ^ MethodInvocation arguments MethodInvocation qualifier entry_ter ^ ^ member getSourceLine_ter ^ ^ ^ ^ member setLineNumber_ter ^ ^ ^ ^ member newBuilder_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Builder x = OriginalMapping.newBuilder().setColumnPosition(entry.getSourceColumn()).setLineNumber(entry.getSourceLine());

LocalVariableDeclaration type ReferenceType name String_ter ^ ^ ^ ^ declarators VariableDeclarator name sourceFile_ter ^ ^ initializer MethodInvocation qualifier node_ter ^ ^ member getString_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
String sourceFile = node.getString();

LocalVariableDeclaration type ReferenceType name String_ter ^ ^ ^ ^ declarators VariableDeclarator name sourceFile_ter ^ ^ initializer MethodInvocation qualifier node_ter ^ ^ member toString_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
String sourceFile = node.toString();

LocalVariableDeclaration type ReferenceType name String_ter ^ ^ ^ ^ declarators VariableDeclarator name sourceFile_ter ^ ^ initializer MethodInvocation qualifier node_ter ^ ^ member toStringTree_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
String sourceFile = node.toStringTree();

LocalVariableDeclaration type ReferenceType name String_ter ^ ^ ^ ^ declarators VariableDeclarator name sourceFile_ter ^ ^ initializer MethodInvocation qualifier node_ter ^ ^ member toStringTreeImpl_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
String sourceFile = node.toStringTreeImpl();

LocalVariableDeclaration type ReferenceType name String_ter ^ ^ ^ ^ declarators VariableDeclarator name sourceFile_ter ^ ^ initializer MethodInvocation qualifier node_ter ^ ^ member getSourceFileName_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
String sourceFile = node.getSourceFileName();

LocalVariableDeclaration type ReferenceType name String_ter ^ ^ ^ ^ declarators VariableDeclarator name sourceFile_ter ^ ^ initializer MethodInvocation qualifier node_ter ^ ^ member getQualifiedName_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
String sourceFile = node.getQualifiedName();

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member outputStartPosition_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if((outputStartPosition == null)){
return;
}
IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member node_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if((node == null)){
return;
}
StatementExpression expression MethodInvocation member reset_ter ^ ^ ^ ^ ^ 
reset();

LocalVariableDeclaration type ReferenceType name String_ter ^ ^ ^ ^ declarators VariableDeclarator name sourceFile_ter ^ ^ initializer MethodInvocation qualifier node_ter ^ ^ member getLineno_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
String sourceFile = node.getLineno();

LocalVariableDeclaration type ReferenceType name String_ter ^ ^ ^ ^ declarators VariableDeclarator name sourceFile_ter ^ ^ initializer MethodInvocation qualifier outputStartPosition_ter ^ ^ member getSourceFileName_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
String sourceFile = outputStartPosition.getSourceFileName();

ReturnStatement_ter ^ 
if (true) { return;
 }

LocalVariableDeclaration type ReferenceType name String_ter ^ ^ ^ ^ declarators VariableDeclarator name sourceFile_ter ^ ^ initializer MethodInvocation qualifier node_ter ^ ^ member getCharno_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
String sourceFile = node.getCharno();

LocalVariableDeclaration type ReferenceType name String_ter ^ ^ ^ ^ declarators VariableDeclarator name sourceFile_ter ^ ^ initializer MethodInvocation qualifier outputEndPosition_ter ^ ^ member getSourceFileName_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
String sourceFile = outputEndPosition.getSourceFileName();

IfStatement condition MethodInvocation qualifier node_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(node.hasChildren()){
return;
}
IfStatement condition MethodInvocation qualifier node_ter ^ ^ member isFromExterns_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(node.isFromExterns()){
return;
}
IfStatement condition MethodInvocation qualifier node_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(node.hasOneChild()){
return;
}
IfStatement condition MethodInvocation qualifier node_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(node.hasMoreThanOneChild()){
return;
}
IfStatement condition MethodInvocation qualifier node_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(node.isQualifiedName()){
return;
}
IfStatement condition MethodInvocation qualifier node_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(node.isUnscopedQualifiedName()){
return;
}
IfStatement condition MethodInvocation qualifier node_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(node.isVarArgs()){
return;
}
IfStatement condition MethodInvocation qualifier node_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(node.isOptionalArg()){
return;
}
IfStatement condition MethodInvocation qualifier node_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(node.isSyntheticBlock()){
return;
}
IfStatement condition MethodInvocation qualifier node_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(node.wasEmptyNode()){
return;
}
IfStatement condition MethodInvocation qualifier node_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(node.isOnlyModifiesThisCall()){
return;
}
IfStatement condition MethodInvocation qualifier node_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(node.isNoSideEffectsCall()){
return;
}
IfStatement condition MethodInvocation qualifier node_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(node.isLocalResultCall()){
return;
}
IfStatement condition MethodInvocation qualifier node_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(node.isQuotedString()){
return;
}
IfStatement condition MethodInvocation qualifier node_ter ^ ^ member isAdd_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(node.isAdd()){
return;
}
IfStatement condition MethodInvocation qualifier node_ter ^ ^ member isAnd_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(node.isAnd()){
return;
}
IfStatement condition MethodInvocation qualifier node_ter ^ ^ member isArrayLit_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(node.isArrayLit()){
return;
}
IfStatement condition MethodInvocation qualifier node_ter ^ ^ member isAssign_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(node.isAssign()){
return;
}
IfStatement condition MethodInvocation qualifier node_ter ^ ^ member isBlock_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(node.isBlock()){
return;
}
IfStatement condition MethodInvocation qualifier node_ter ^ ^ member isCall_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(node.isCall()){
return;
}
IfStatement condition MethodInvocation qualifier node_ter ^ ^ member isCase_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(node.isCase()){
return;
}
IfStatement condition MethodInvocation qualifier node_ter ^ ^ member isCatch_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(node.isCatch()){
return;
}
IfStatement condition MethodInvocation qualifier node_ter ^ ^ member isComma_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(node.isComma()){
return;
}
IfStatement condition MethodInvocation qualifier node_ter ^ ^ member isDec_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(node.isDec()){
return;
}
IfStatement condition MethodInvocation qualifier node_ter ^ ^ member isDefaultCase_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(node.isDefaultCase()){
return;
}
IfStatement condition MethodInvocation qualifier node_ter ^ ^ member isDo_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(node.isDo()){
return;
}
IfStatement condition MethodInvocation qualifier node_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(node.isEmpty()){
return;
}
IfStatement condition MethodInvocation qualifier node_ter ^ ^ member isExprResult_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(node.isExprResult()){
return;
}
IfStatement condition MethodInvocation qualifier node_ter ^ ^ member isFalse_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(node.isFalse()){
return;
}
IfStatement condition MethodInvocation qualifier node_ter ^ ^ member isFor_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(node.isFor()){
return;
}
IfStatement condition MethodInvocation qualifier node_ter ^ ^ member isFunction_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(node.isFunction()){
return;
}
IfStatement condition MethodInvocation qualifier node_ter ^ ^ member isGetterDef_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(node.isGetterDef()){
return;
}
IfStatement condition MethodInvocation qualifier node_ter ^ ^ member isGetElem_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(node.isGetElem()){
return;
}
IfStatement condition MethodInvocation qualifier node_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(node.isGetProp()){
return;
}
IfStatement condition MethodInvocation qualifier node_ter ^ ^ member isHook_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(node.isHook()){
return;
}
IfStatement condition MethodInvocation qualifier node_ter ^ ^ member isIf_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(node.isIf()){
return;
}
IfStatement condition MethodInvocation qualifier node_ter ^ ^ member isInc_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(node.isInc()){
return;
}
IfStatement condition MethodInvocation qualifier node_ter ^ ^ member isLabel_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(node.isLabel()){
return;
}
IfStatement condition MethodInvocation qualifier node_ter ^ ^ member isLabelName_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(node.isLabelName()){
return;
}
IfStatement condition MethodInvocation qualifier node_ter ^ ^ member isName_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(node.isName()){
return;
}
IfStatement condition MethodInvocation qualifier node_ter ^ ^ member isNew_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(node.isNew()){
return;
}
IfStatement condition MethodInvocation qualifier node_ter ^ ^ member isNot_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(node.isNot()){
return;
}
IfStatement condition MethodInvocation qualifier node_ter ^ ^ member isNull_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(node.isNull()){
return;
}
IfStatement condition MethodInvocation qualifier node_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(node.isNumber()){
return;
}
IfStatement condition MethodInvocation qualifier node_ter ^ ^ member isObjectLit_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(node.isObjectLit()){
return;
}
IfStatement condition MethodInvocation qualifier node_ter ^ ^ member isOr_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(node.isOr()){
return;
}
IfStatement condition MethodInvocation qualifier node_ter ^ ^ member isParamList_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(node.isParamList()){
return;
}
IfStatement condition MethodInvocation qualifier node_ter ^ ^ member isRegExp_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(node.isRegExp()){
return;
}
IfStatement condition MethodInvocation qualifier node_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(node.isReturn()){
return;
}
IfStatement condition MethodInvocation qualifier node_ter ^ ^ member isScript_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(node.isScript()){
return;
}
IfStatement condition MethodInvocation qualifier node_ter ^ ^ member isSetterDef_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(node.isSetterDef()){
return;
}
IfStatement condition MethodInvocation qualifier node_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(node.isString()){
return;
}
IfStatement condition MethodInvocation qualifier node_ter ^ ^ member isSwitch_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(node.isSwitch()){
return;
}
IfStatement condition MethodInvocation qualifier node_ter ^ ^ member isThis_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(node.isThis()){
return;
}
IfStatement condition MethodInvocation qualifier node_ter ^ ^ member isThrow_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(node.isThrow()){
return;
}
IfStatement condition MethodInvocation qualifier node_ter ^ ^ member isTrue_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(node.isTrue()){
return;
}
IfStatement condition MethodInvocation qualifier node_ter ^ ^ member isTry_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(node.isTry()){
return;
}
IfStatement condition MethodInvocation qualifier node_ter ^ ^ member isVar_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(node.isVar()){
return;
}
IfStatement condition MethodInvocation qualifier node_ter ^ ^ member isVoid_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(node.isVoid()){
return;
}
LocalVariableDeclaration type ReferenceType name String_ter ^ ^ ^ ^ declarators VariableDeclarator name sourceFile_ter ^ ^ initializer MethodInvocation qualifier node_ter ^ ^ member addMapping_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
String sourceFile = node.addMapping();

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member outputStartPosition_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if((outputStartPosition == 0)){
return;
}
IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member outputStartPosition_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((outputStartPosition != null)){

LocalVariableDeclaration type ReferenceType name String_ter ^ ^ ^ ^ declarators VariableDeclarator name sourceFile_ter ^ ^ initializer MethodInvocation qualifier generator_ter ^ ^ member getSourceFileName_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
String sourceFile = generator.getSourceFileName();

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member outputStartPosition_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if((outputStartPosition != null)){
return;
}
LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name String_ter ^ ^ ^ ^ declarators VariableDeclarator name sourceFile_ter ^ ^ initializer MethodInvocation qualifier node_ter ^ ^ member getSourceFileName_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
final String sourceFile = node.getSourceFileName();

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member node_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if((node == 0)){
return;
}
IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member node_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((node != null)){

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member node_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if((node != null)){
return;
}
IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member sourceFile_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if((sourceFile == null)){
return;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier node_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(!node.hasChildren()){
return;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier node_ter ^ ^ member isFromExterns_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(!node.isFromExterns()){
return;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier node_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(!node.hasOneChild()){
return;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier node_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(!node.hasMoreThanOneChild()){
return;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier node_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(!node.isQualifiedName()){
return;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier node_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(!node.isUnscopedQualifiedName()){
return;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier node_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(!node.isVarArgs()){
return;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier node_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(!node.isOptionalArg()){
return;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier node_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(!node.isSyntheticBlock()){
return;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier node_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(!node.wasEmptyNode()){
return;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier node_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(!node.isOnlyModifiesThisCall()){
return;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier node_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(!node.isNoSideEffectsCall()){
return;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier node_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(!node.isLocalResultCall()){
return;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier node_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(!node.isQuotedString()){
return;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier node_ter ^ ^ member isAdd_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(!node.isAdd()){
return;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier node_ter ^ ^ member isAnd_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(!node.isAnd()){
return;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier node_ter ^ ^ member isArrayLit_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(!node.isArrayLit()){
return;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier node_ter ^ ^ member isAssign_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(!node.isAssign()){
return;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier node_ter ^ ^ member isBlock_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(!node.isBlock()){
return;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier node_ter ^ ^ member isCall_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(!node.isCall()){
return;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier node_ter ^ ^ member isCase_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(!node.isCase()){
return;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier node_ter ^ ^ member isCatch_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(!node.isCatch()){
return;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier node_ter ^ ^ member isComma_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(!node.isComma()){
return;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier node_ter ^ ^ member isDec_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(!node.isDec()){
return;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier node_ter ^ ^ member isDefaultCase_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(!node.isDefaultCase()){
return;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier node_ter ^ ^ member isDo_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(!node.isDo()){
return;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier node_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(!node.isEmpty()){
return;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier node_ter ^ ^ member isExprResult_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(!node.isExprResult()){
return;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier node_ter ^ ^ member isFalse_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(!node.isFalse()){
return;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier node_ter ^ ^ member isFor_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(!node.isFor()){
return;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier node_ter ^ ^ member isFunction_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(!node.isFunction()){
return;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier node_ter ^ ^ member isGetterDef_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(!node.isGetterDef()){
return;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier node_ter ^ ^ member isGetElem_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(!node.isGetElem()){
return;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier node_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(!node.isGetProp()){
return;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier node_ter ^ ^ member isHook_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(!node.isHook()){
return;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier node_ter ^ ^ member isIf_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(!node.isIf()){
return;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier node_ter ^ ^ member isInc_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(!node.isInc()){
return;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier node_ter ^ ^ member isLabel_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(!node.isLabel()){
return;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier node_ter ^ ^ member isLabelName_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(!node.isLabelName()){
return;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier node_ter ^ ^ member isName_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(!node.isName()){
return;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier node_ter ^ ^ member isNew_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(!node.isNew()){
return;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier node_ter ^ ^ member isNot_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(!node.isNot()){
return;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier node_ter ^ ^ member isNull_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(!node.isNull()){
return;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier node_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(!node.isNumber()){
return;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier node_ter ^ ^ member isObjectLit_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(!node.isObjectLit()){
return;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier node_ter ^ ^ member isOr_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(!node.isOr()){
return;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier node_ter ^ ^ member isParamList_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(!node.isParamList()){
return;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier node_ter ^ ^ member isRegExp_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(!node.isRegExp()){
return;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier node_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(!node.isReturn()){
return;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier node_ter ^ ^ member isScript_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(!node.isScript()){
return;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier node_ter ^ ^ member isSetterDef_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(!node.isSetterDef()){
return;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier node_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(!node.isString()){
return;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier node_ter ^ ^ member isSwitch_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(!node.isSwitch()){
return;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier node_ter ^ ^ member isThis_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(!node.isThis()){
return;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier node_ter ^ ^ member isThrow_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(!node.isThrow()){
return;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier node_ter ^ ^ member isTrue_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(!node.isTrue()){
return;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier node_ter ^ ^ member isTry_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(!node.isTry()){
return;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier node_ter ^ ^ member isVar_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(!node.isVar()){
return;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier node_ter ^ ^ member isVoid_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(!node.isVoid()){
return;
}
LocalVariableDeclaration type ReferenceType name String_ter ^ ^ ^ ^ declarators VariableDeclarator name sourceFile_ter ^ ^ initializer MethodInvocation qualifier node_ter ^ ^ arguments MemberReference member outputStartPosition_ter ^ ^ ^ ^ member getSourceFileName_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
String sourceFile = node.getSourceFileName(outputStartPosition);

LocalVariableDeclaration type ReferenceType name String_ter ^ ^ ^ ^ declarators VariableDeclarator name sourceFile_ter ^ ^ initializer MethodInvocation qualifier node_ter ^ ^ member fixupSourceLocation_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
String sourceFile = node.fixupSourceLocation();

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier node_ter ^ ^ member getSourceFileName_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if((node.getSourceFileName() == null)){
return;
}
StatementExpression expression SuperMethodInvocation member addMapping_ter ^ ^ ^ ^ ^ 
super.addMapping();

StatementExpression expression MethodInvocation qualifier generator_ter ^ ^ member reset_ter ^ ^ ^ ^ ^ 
generator.reset();

IfStatement condition BinaryOperation operator <_ter ^ ^ operandl MethodInvocation qualifier node_ter ^ ^ member getLineno_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if((node.getLineno() < 0)){
return;
}
LocalVariableDeclaration type ReferenceType name String_ter ^ ^ ^ ^ declarators VariableDeclarator name sourceFile_ter ^ ^ initializer MethodInvocation qualifier node_ter ^ ^ arguments Literal value false_ter ^ ^ ^ ^ member getSourceFileName_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
String sourceFile = node.getSourceFileName(false);

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member outputStartPosition_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((outputStartPosition == null)){

LocalVariableDeclaration type ReferenceType name String_ter ^ ^ ^ ^ declarators VariableDeclarator name sourceFile_ter ^ ^ initializer MethodInvocation qualifier par3 ^ ^ member getSourceFileName_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
String sourceFile = .getSourceFileName();


LocalVariableDeclaration type ReferenceType name String_ter ^ ^ ^ ^ declarators VariableDeclarator name sourceFile_ter ^ ^ initializer Cast type ReferenceType name String_ter ^ ^ ^ ^ expression MethodInvocation qualifier node_ter ^ ^ member getSourceFileName_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
arg 
arg 
String sourceFile = (String)node.getSourceFileName();

StatementExpression expression SuperConstructorInvocation_ter ^ ^ ^ 
1 SuperConstructorInvocation_ter
LocalVariableDeclaration type ReferenceType name String_ter ^ ^ ^ ^ declarators VariableDeclarator name sourceFile_ter ^ ^ initializer MethodInvocation arguments MemberReference member node_ter ^ ^ ^ ^ member getSourceFileName_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
String sourceFile = getSourceFileName(node);

StatementExpression expression MethodInvocation qualifier node_ter ^ ^ member getSourceFileName_ter ^ ^ ^ ^ ^ 
node.getSourceFileName();

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member outputStartPosition_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ 
if((outputStartPosition != 0)){

LocalVariableDeclaration type ReferenceType name String_ter ^ ^ ^ ^ declarators VariableDeclarator name sourceFile_ter ^ ^ initializer MethodInvocation qualifier node_ter ^ ^ arguments MemberReference member sourceFile_ter ^ ^ ^ ^ member getSourceFileName_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
String sourceFile = node.getSourceFileName(sourceFile);

LocalVariableDeclaration type ReferenceType name String_ter ^ ^ arguments TypeArgument pattern_type ?_ter ^ ^ ^ ^ ^ ^ declarators VariableDeclarator name sourceFile_ter ^ ^ initializer MethodInvocation qualifier node_ter ^ ^ member getSourceFileName_ter ^ ^ ^ ^ ^ ^ ^ 
arg ?
arg ?
String<?> sourceFile = node.getSourceFileName();

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member outputStartPosition_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if((outputStartPosition != 0)){
return;
}
StatementExpression expression SuperMethodInvocation arguments MemberReference member node_ter ^ ^ ^ ^ member addMapping_ter ^ ^ ^ ^ ^ 
super.addMapping(node);

LocalVariableDeclaration type ReferenceType name String_ter ^ ^ ^ ^ declarators VariableDeclarator name sourceFile_ter ^ ^ initializer MethodInvocation qualifier node_ter ^ ^ member getName_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
String sourceFile = node.getName();

StatementExpression expression MethodInvocation qualifier node_ter ^ ^ member detachChildren_ter ^ ^ ^ ^ ^ 
node.detachChildren();

StatementExpression expression MethodInvocation qualifier node_ter ^ ^ member setQuotedString_ter ^ ^ ^ ^ ^ 
node.setQuotedString();

stderr: 