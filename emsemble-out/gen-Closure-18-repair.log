stdout: IfStatement condition MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ ^ 
if(options.dependencyOptions.needsManagement()){

condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member manageClosureDependencies_ter ^ ^ ^ ^ ^ ^ 
if((options.dependencyOptions.needsManagement() && options.manageClosureDependencies)){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member acceptConstKeyword_ter ^ ^ ^ ^ ^ ^ 
if((options.dependencyOptions.needsManagement() && options.acceptConstKeyword)){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member assumeStrictThis_ter ^ ^ ^ ^ ^ ^ 
if((options.dependencyOptions.needsManagement() && options.assumeStrictThis)){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member ideMode_ter ^ ^ ^ ^ ^ ^ 
if((options.dependencyOptions.needsManagement() && options.ideMode)){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member inferTypes_ter ^ ^ ^ ^ ^ ^ 
if((options.dependencyOptions.needsManagement() && options.inferTypes)){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member skipAllPasses_ter ^ ^ ^ ^ ^ ^ 
if((options.dependencyOptions.needsManagement() && options.skipAllPasses)){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member nameAnonymousFunctionsOnly_ter ^ ^ ^ ^ ^ ^ 
if((options.dependencyOptions.needsManagement() && options.nameAnonymousFunctionsOnly)){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member checkSymbols_ter ^ ^ ^ ^ ^ ^ 
if((options.dependencyOptions.needsManagement() && options.checkSymbols)){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member checkSuspiciousCode_ter ^ ^ ^ ^ ^ ^ 
if((options.dependencyOptions.needsManagement() && options.checkSuspiciousCode)){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member checkControlStructures_ter ^ ^ ^ ^ ^ ^ 
if((options.dependencyOptions.needsManagement() && options.checkControlStructures)){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member checkTypes_ter ^ ^ ^ ^ ^ ^ 
if((options.dependencyOptions.needsManagement() && options.checkTypes)){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member tightenTypes_ter ^ ^ ^ ^ ^ ^ 
if((options.dependencyOptions.needsManagement() && options.tightenTypes)){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member checkCaja_ter ^ ^ ^ ^ ^ ^ 
if((options.dependencyOptions.needsManagement() && options.checkCaja)){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member foldConstants_ter ^ ^ ^ ^ ^ ^ 
if((options.dependencyOptions.needsManagement() && options.foldConstants)){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member deadAssignmentElimination_ter ^ ^ ^ ^ ^ ^ 
if((options.dependencyOptions.needsManagement() && options.deadAssignmentElimination)){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member inlineConstantVars_ter ^ ^ ^ ^ ^ ^ 
if((options.dependencyOptions.needsManagement() && options.inlineConstantVars)){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member inlineFunctions_ter ^ ^ ^ ^ ^ ^ 
if((options.dependencyOptions.needsManagement() && options.inlineFunctions)){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member inlineLocalFunctions_ter ^ ^ ^ ^ ^ ^ 
if((options.dependencyOptions.needsManagement() && options.inlineLocalFunctions)){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member assumeClosuresOnlyCaptureReferences_ter ^ ^ ^ ^ ^ ^ 
if((options.dependencyOptions.needsManagement() && options.assumeClosuresOnlyCaptureReferences)){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member inlineProperties_ter ^ ^ ^ ^ ^ ^ 
if((options.dependencyOptions.needsManagement() && options.inlineProperties)){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member crossModuleCodeMotion_ter ^ ^ ^ ^ ^ ^ 
if((options.dependencyOptions.needsManagement() && options.crossModuleCodeMotion)){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member coalesceVariableNames_ter ^ ^ ^ ^ ^ ^ 
if((options.dependencyOptions.needsManagement() && options.coalesceVariableNames)){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member crossModuleMethodMotion_ter ^ ^ ^ ^ ^ ^ 
if((options.dependencyOptions.needsManagement() && options.crossModuleMethodMotion)){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member inlineGetters_ter ^ ^ ^ ^ ^ ^ 
if((options.dependencyOptions.needsManagement() && options.inlineGetters)){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member inlineVariables_ter ^ ^ ^ ^ ^ ^ 
if((options.dependencyOptions.needsManagement() && options.inlineVariables)){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member inlineLocalVariables_ter ^ ^ ^ ^ ^ ^ 
if((options.dependencyOptions.needsManagement() && options.inlineLocalVariables)){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member flowSensitiveInlineVariables_ter ^ ^ ^ ^ ^ ^ 
if((options.dependencyOptions.needsManagement() && options.flowSensitiveInlineVariables)){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member smartNameRemoval_ter ^ ^ ^ ^ ^ ^ 
if((options.dependencyOptions.needsManagement() && options.smartNameRemoval)){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member removeDeadCode_ter ^ ^ ^ ^ ^ ^ 
if((options.dependencyOptions.needsManagement() && options.removeDeadCode)){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member extractPrototypeMemberDeclarations_ter ^ ^ ^ ^ ^ ^ 
if((options.dependencyOptions.needsManagement() && options.extractPrototypeMemberDeclarations)){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member removeUnusedPrototypeProperties_ter ^ ^ ^ ^ ^ ^ 
if((options.dependencyOptions.needsManagement() && options.removeUnusedPrototypeProperties)){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member removeUnusedPrototypePropertiesInExterns_ter ^ ^ ^ ^ ^ ^ 
if((options.dependencyOptions.needsManagement() && options.removeUnusedPrototypePropertiesInExterns)){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member removeUnusedClassProperties_ter ^ ^ ^ ^ ^ ^ 
if((options.dependencyOptions.needsManagement() && options.removeUnusedClassProperties)){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member removeUnusedVars_ter ^ ^ ^ ^ ^ ^ 
if((options.dependencyOptions.needsManagement() && options.removeUnusedVars)){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member removeUnusedLocalVars_ter ^ ^ ^ ^ ^ ^ 
if((options.dependencyOptions.needsManagement() && options.removeUnusedLocalVars)){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member aliasExternals_ter ^ ^ ^ ^ ^ ^ 
if((options.dependencyOptions.needsManagement() && options.aliasExternals)){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member collapseVariableDeclarations_ter ^ ^ ^ ^ ^ ^ 
if((options.dependencyOptions.needsManagement() && options.collapseVariableDeclarations)){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member groupVariableDeclarations_ter ^ ^ ^ ^ ^ ^ 
if((options.dependencyOptions.needsManagement() && options.groupVariableDeclarations)){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member collapseAnonymousFunctions_ter ^ ^ ^ ^ ^ ^ 
if((options.dependencyOptions.needsManagement() && options.collapseAnonymousFunctions)){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member aliasAllStrings_ter ^ ^ ^ ^ ^ ^ 
if((options.dependencyOptions.needsManagement() && options.aliasAllStrings)){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member outputJsStringUsage_ter ^ ^ ^ ^ ^ ^ 
if((options.dependencyOptions.needsManagement() && options.outputJsStringUsage)){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member convertToDottedProperties_ter ^ ^ ^ ^ ^ ^ 
if((options.dependencyOptions.needsManagement() && options.convertToDottedProperties)){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member rewriteFunctionExpressions_ter ^ ^ ^ ^ ^ ^ 
if((options.dependencyOptions.needsManagement() && options.rewriteFunctionExpressions)){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member optimizeParameters_ter ^ ^ ^ ^ ^ ^ 
if((options.dependencyOptions.needsManagement() && options.optimizeParameters)){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member optimizeReturns_ter ^ ^ ^ ^ ^ ^ 
if((options.dependencyOptions.needsManagement() && options.optimizeReturns)){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member optimizeCalls_ter ^ ^ ^ ^ ^ ^ 
if((options.dependencyOptions.needsManagement() && options.optimizeCalls)){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member optimizeArgumentsArray_ter ^ ^ ^ ^ ^ ^ 
if((options.dependencyOptions.needsManagement() && options.optimizeArgumentsArray)){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member chainCalls_ter ^ ^ ^ ^ ^ ^ 
if((options.dependencyOptions.needsManagement() && options.chainCalls)){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member propertyAffinity_ter ^ ^ ^ ^ ^ ^ 
if((options.dependencyOptions.needsManagement() && options.propertyAffinity)){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member labelRenaming_ter ^ ^ ^ ^ ^ ^ 
if((options.dependencyOptions.needsManagement() && options.labelRenaming)){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member reserveRawExports_ter ^ ^ ^ ^ ^ ^ 
if((options.dependencyOptions.needsManagement() && options.reserveRawExports)){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member shadowVariables_ter ^ ^ ^ ^ ^ ^ 
if((options.dependencyOptions.needsManagement() && options.shadowVariables)){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member generatePseudoNames_ter ^ ^ ^ ^ ^ ^ 
if((options.dependencyOptions.needsManagement() && options.generatePseudoNames)){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member aliasKeywords_ter ^ ^ ^ ^ ^ ^ 
if((options.dependencyOptions.needsManagement() && options.aliasKeywords)){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member collapseProperties_ter ^ ^ ^ ^ ^ ^ 
if((options.dependencyOptions.needsManagement() && options.collapseProperties)){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member collapseObjectLiterals_ter ^ ^ ^ ^ ^ ^ 
if((options.dependencyOptions.needsManagement() && options.collapseObjectLiterals)){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member collapsePropertiesOnExternTypes_ter ^ ^ ^ ^ ^ ^ 
if((options.dependencyOptions.needsManagement() && options.collapsePropertiesOnExternTypes)){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member devirtualizePrototypeMethods_ter ^ ^ ^ ^ ^ ^ 
if((options.dependencyOptions.needsManagement() && options.devirtualizePrototypeMethods)){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member computeFunctionSideEffects_ter ^ ^ ^ ^ ^ ^ 
if((options.dependencyOptions.needsManagement() && options.computeFunctionSideEffects)){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member disambiguateProperties_ter ^ ^ ^ ^ ^ ^ 
if((options.dependencyOptions.needsManagement() && options.disambiguateProperties)){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member ambiguateProperties_ter ^ ^ ^ ^ ^ ^ 
if((options.dependencyOptions.needsManagement() && options.ambiguateProperties)){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member exportTestFunctions_ter ^ ^ ^ ^ ^ ^ 
if((options.dependencyOptions.needsManagement() && options.exportTestFunctions)){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member specializeInitialModule_ter ^ ^ ^ ^ ^ ^ 
if((options.dependencyOptions.needsManagement() && options.specializeInitialModule)){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member runtimeTypeCheck_ter ^ ^ ^ ^ ^ ^ 
if((options.dependencyOptions.needsManagement() && options.runtimeTypeCheck)){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member ignoreCajaProperties_ter ^ ^ ^ ^ ^ ^ 
if((options.dependencyOptions.needsManagement() && options.ignoreCajaProperties)){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member markAsCompiled_ter ^ ^ ^ ^ ^ ^ 
if((options.dependencyOptions.needsManagement() && options.markAsCompiled)){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member removeTryCatchFinally_ter ^ ^ ^ ^ ^ ^ 
if((options.dependencyOptions.needsManagement() && options.removeTryCatchFinally)){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ 
if((options.dependencyOptions.needsManagement() && options.closurePass)){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member jqueryPass_ter ^ ^ ^ ^ ^ ^ 
if((options.dependencyOptions.needsManagement() && options.jqueryPass)){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member rewriteNewDateGoogNow_ter ^ ^ ^ ^ ^ ^ 
if((options.dependencyOptions.needsManagement() && options.rewriteNewDateGoogNow)){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member removeAbstractMethods_ter ^ ^ ^ ^ ^ ^ 
if((options.dependencyOptions.needsManagement() && options.removeAbstractMethods)){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member removeClosureAsserts_ter ^ ^ ^ ^ ^ ^ 
if((options.dependencyOptions.needsManagement() && options.removeClosureAsserts)){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member gatherCssNames_ter ^ ^ ^ ^ ^ ^ 
if((options.dependencyOptions.needsManagement() && options.gatherCssNames)){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member markNoSideEffectCalls_ter ^ ^ ^ ^ ^ ^ 
if((options.dependencyOptions.needsManagement() && options.markNoSideEffectCalls)){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member moveFunctionDeclarations_ter ^ ^ ^ ^ ^ ^ 
if((options.dependencyOptions.needsManagement() && options.moveFunctionDeclarations)){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member recordFunctionInformation_ter ^ ^ ^ ^ ^ ^ 
if((options.dependencyOptions.needsManagement() && options.recordFunctionInformation)){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member generateExports_ter ^ ^ ^ ^ ^ ^ 
if((options.dependencyOptions.needsManagement() && options.generateExports)){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member processObjectPropertyString_ter ^ ^ ^ ^ ^ ^ 
if((options.dependencyOptions.needsManagement() && options.processObjectPropertyString)){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member replaceIdGenerators_ter ^ ^ ^ ^ ^ ^ 
if((options.dependencyOptions.needsManagement() && options.replaceIdGenerators)){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member transformAMDToCJSModules_ter ^ ^ ^ ^ ^ ^ 
if((options.dependencyOptions.needsManagement() && options.transformAMDToCJSModules)){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member processCommonJSModules_ter ^ ^ ^ ^ ^ ^ 
if((options.dependencyOptions.needsManagement() && options.processCommonJSModules)){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member prettyPrint_ter ^ ^ ^ ^ ^ ^ 
if((options.dependencyOptions.needsManagement() && options.prettyPrint)){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member lineBreak_ter ^ ^ ^ ^ ^ ^ 
if((options.dependencyOptions.needsManagement() && options.lineBreak)){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member preferLineBreakAtEndOfFile_ter ^ ^ ^ ^ ^ ^ 
if((options.dependencyOptions.needsManagement() && options.preferLineBreakAtEndOfFile)){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member printInputDelimiter_ter ^ ^ ^ ^ ^ ^ 
if((options.dependencyOptions.needsManagement() && options.printInputDelimiter)){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member colorizeErrorOutput_ter ^ ^ ^ ^ ^ ^ 
if((options.dependencyOptions.needsManagement() && options.colorizeErrorOutput)){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member externExports_ter ^ ^ ^ ^ ^ ^ 
if((options.dependencyOptions.needsManagement() && options.externExports)){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member looseTypes_ter ^ ^ ^ ^ ^ ^ 
if((options.dependencyOptions.needsManagement() && options.looseTypes)){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member protectHiddenSideEffects_ter ^ ^ ^ ^ ^ ^ 
if((options.dependencyOptions.needsManagement() && options.protectHiddenSideEffects)){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier e_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ 
if((e.needsManagement() && options.closurePass)){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier staleInputs_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ 
if((staleInputs.needsManagement() && options.closurePass)){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier JSModule_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ 
if((options.dependencyOptions.needsManagement() && JSModule.closurePass)){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier JSError_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ 
if((JSError.needsManagement() && options.closurePass)){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference member staleInputs_ter ^ ^ ^ ^ ^ ^ 
if((options.dependencyOptions.needsManagement() && staleInputs)){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && options.closurePass) && options.closurePass)){

condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier loc9 ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ 
if((.needsManagement() && options.closurePass)){

condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier JSModule_ter ^ ^ member CIRCULAR_DEPENDENCY_ERROR_ter ^ ^ ^ ^ ^ ^ 
if((options.dependencyOptions.needsManagement() && JSModule.CIRCULAR_DEPENDENCY_ERROR)){
IfStatement condition MethodInvocation member precheck_ter ^ ^ ^ ^ ^ 
if(precheck()){

IfStatement condition MethodInvocation member isInliningForbidden_ter ^ ^ ^ ^ ^ 
if(isInliningForbidden()){

IfStatement condition MethodInvocation member isIdeMode_ter ^ ^ ^ ^ ^ 
if(isIdeMode()){

IfStatement condition MethodInvocation member acceptEcmaScript5_ter ^ ^ ^ ^ ^ 
if(acceptEcmaScript5()){

IfStatement condition MethodInvocation member acceptConstKeyword_ter ^ ^ ^ ^ ^ 
if(acceptConstKeyword()){

IfStatement condition MethodInvocation member isTypeCheckingEnabled_ter ^ ^ ^ ^ ^ 
if(isTypeCheckingEnabled()){

IfStatement condition MethodInvocation member hasHaltingErrors_ter ^ ^ ^ ^ ^ 
if(hasHaltingErrors()){

IfStatement condition MethodInvocation member hasErrors_ter ^ ^ ^ ^ ^ 
if(hasErrors()){

IfStatement condition MethodInvocation member hasRegExpGlobalReferences_ter ^ ^ ^ ^ ^ 
if(hasRegExpGlobalReferences()){

IfStatement condition MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member precheck_ter ^ ^ ^ ^ ^ 
if(options.dependencyOptions.precheck()){

IfStatement condition MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member isInliningForbidden_ter ^ ^ ^ ^ ^ 
if(options.dependencyOptions.isInliningForbidden()){

IfStatement condition MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member isIdeMode_ter ^ ^ ^ ^ ^ 
if(options.dependencyOptions.isIdeMode()){

IfStatement condition MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member acceptEcmaScript5_ter ^ ^ ^ ^ ^ 
if(options.dependencyOptions.acceptEcmaScript5()){

IfStatement condition MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member acceptConstKeyword_ter ^ ^ ^ ^ ^ 
if(options.dependencyOptions.acceptConstKeyword()){

IfStatement condition MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member isTypeCheckingEnabled_ter ^ ^ ^ ^ ^ 
if(options.dependencyOptions.isTypeCheckingEnabled()){

IfStatement condition MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member hasHaltingErrors_ter ^ ^ ^ ^ ^ 
if(options.dependencyOptions.hasHaltingErrors()){

IfStatement condition MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member hasErrors_ter ^ ^ ^ ^ ^ 
if(options.dependencyOptions.hasErrors()){

IfStatement condition MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member hasRegExpGlobalReferences_ter ^ ^ ^ ^ ^ 
if(options.dependencyOptions.hasRegExpGlobalReferences()){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ ^ 
if((options.dependencyOptions.needsManagement() && options.closurePass)){

condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference member moduleGraph_ter ^ ^ ^ ^ ^ ^ 
if((options.dependencyOptions.needsManagement() && moduleGraph)){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference member inputs_ter ^ ^ ^ ^ ^ ^ 
if((options.dependencyOptions.needsManagement() && inputs)){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member getMessage_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ 
if((options.dependencyOptions.getMessage() && options.closurePass)){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member getProvides_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ 
if((options.dependencyOptions.getProvides() && options.closurePass)){
IfStatement condition MethodInvocation qualifier input_ter ^ ^ member getProvides_ter ^ ^ ^ ^ ^ 
if(input.getProvides()){

condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference member modules_ter ^ ^ ^ ^ ^ ^ 
if((options.dependencyOptions.needsManagement() && modules)){
IfStatement condition MethodInvocation qualifier e_ter ^ ^ member getMessage_ter ^ ^ ^ ^ ^ 
if(e.getMessage()){

condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference member provide_ter ^ ^ ^ ^ ^ ^ 
if((options.dependencyOptions.needsManagement() && provide)){
IfStatement condition MethodInvocation qualifier e_ter ^ ^ member precheck_ter ^ ^ ^ ^ ^ 
if(e.precheck()){

IfStatement condition MethodInvocation qualifier e_ter ^ ^ member isInliningForbidden_ter ^ ^ ^ ^ ^ 
if(e.isInliningForbidden()){

IfStatement condition MethodInvocation qualifier e_ter ^ ^ member isIdeMode_ter ^ ^ ^ ^ ^ 
if(e.isIdeMode()){

IfStatement condition MethodInvocation qualifier e_ter ^ ^ member acceptEcmaScript5_ter ^ ^ ^ ^ ^ 
if(e.acceptEcmaScript5()){

IfStatement condition MethodInvocation qualifier e_ter ^ ^ member acceptConstKeyword_ter ^ ^ ^ ^ ^ 
if(e.acceptConstKeyword()){

IfStatement condition MethodInvocation qualifier e_ter ^ ^ member isTypeCheckingEnabled_ter ^ ^ ^ ^ ^ 
if(e.isTypeCheckingEnabled()){

IfStatement condition MethodInvocation qualifier e_ter ^ ^ member hasHaltingErrors_ter ^ ^ ^ ^ ^ 
if(e.hasHaltingErrors()){

IfStatement condition MethodInvocation qualifier e_ter ^ ^ member hasErrors_ter ^ ^ ^ ^ ^ 
if(e.hasErrors()){

IfStatement condition MethodInvocation qualifier e_ter ^ ^ member hasRegExpGlobalReferences_ter ^ ^ ^ ^ ^ 
if(e.hasRegExpGlobalReferences()){

StatementExpression expression MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ ^ 
options.dependencyOptions.needsManagement();


IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && options.closurePass) && null)){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member precheck_ter ^ ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && options.closurePass) && options.dependencyOptions.precheck())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member isInliningForbidden_ter ^ ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && options.closurePass) && options.dependencyOptions.isInliningForbidden())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member isIdeMode_ter ^ ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && options.closurePass) && options.dependencyOptions.isIdeMode())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member acceptEcmaScript5_ter ^ ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && options.closurePass) && options.dependencyOptions.acceptEcmaScript5())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member acceptConstKeyword_ter ^ ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && options.closurePass) && options.dependencyOptions.acceptConstKeyword())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member isTypeCheckingEnabled_ter ^ ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && options.closurePass) && options.dependencyOptions.isTypeCheckingEnabled())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member hasHaltingErrors_ter ^ ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && options.closurePass) && options.dependencyOptions.hasHaltingErrors())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member hasErrors_ter ^ ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && options.closurePass) && options.dependencyOptions.hasErrors())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member hasRegExpGlobalReferences_ter ^ ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && options.closurePass) && options.dependencyOptions.hasRegExpGlobalReferences())){

condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member CIRCULAR_DEPENDENCY_ERROR_ter ^ ^ ^ ^ ^ ^ 
if((options.dependencyOptions.needsManagement() && options.CIRCULAR_DEPENDENCY_ERROR)){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference member MISSING_ENTRY_ERROR_ter ^ ^ ^ ^ ^ ^ 
if((options.dependencyOptions.needsManagement() && MISSING_ENTRY_ERROR)){
IfStatement condition MethodInvocation qualifier JSError_ter ^ ^ member precheck_ter ^ ^ ^ ^ ^ 
if(JSError.precheck()){

IfStatement condition MethodInvocation qualifier JSError_ter ^ ^ member isInliningForbidden_ter ^ ^ ^ ^ ^ 
if(JSError.isInliningForbidden()){

IfStatement condition MethodInvocation qualifier JSError_ter ^ ^ member isIdeMode_ter ^ ^ ^ ^ ^ 
if(JSError.isIdeMode()){

IfStatement condition MethodInvocation qualifier JSError_ter ^ ^ member acceptEcmaScript5_ter ^ ^ ^ ^ ^ 
if(JSError.acceptEcmaScript5()){

IfStatement condition MethodInvocation qualifier JSError_ter ^ ^ member acceptConstKeyword_ter ^ ^ ^ ^ ^ 
if(JSError.acceptConstKeyword()){

IfStatement condition MethodInvocation qualifier JSError_ter ^ ^ member isTypeCheckingEnabled_ter ^ ^ ^ ^ ^ 
if(JSError.isTypeCheckingEnabled()){

IfStatement condition MethodInvocation qualifier JSError_ter ^ ^ member hasHaltingErrors_ter ^ ^ ^ ^ ^ 
if(JSError.hasHaltingErrors()){

IfStatement condition MethodInvocation qualifier JSError_ter ^ ^ member hasErrors_ter ^ ^ ^ ^ ^ 
if(JSError.hasErrors()){

IfStatement condition MethodInvocation qualifier JSError_ter ^ ^ member hasRegExpGlobalReferences_ter ^ ^ ^ ^ ^ 
if(JSError.hasRegExpGlobalReferences()){

condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ 
if((options.dependencyOptions.needsManagement() || options.closurePass)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ 
if((options.dependencyOptions.needsManagement() == options.closurePass)){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member parseInputs_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ 
if((options.dependencyOptions.parseInputs() && options.closurePass)){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier options.dependencyOptions_ter ^ ^ member precheck_ter ^ ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && options.closurePass) && !options.dependencyOptions.precheck())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier options.dependencyOptions_ter ^ ^ member isInliningForbidden_ter ^ ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && options.closurePass) && !options.dependencyOptions.isInliningForbidden())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier options.dependencyOptions_ter ^ ^ member isIdeMode_ter ^ ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && options.closurePass) && !options.dependencyOptions.isIdeMode())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier options.dependencyOptions_ter ^ ^ member acceptEcmaScript5_ter ^ ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && options.closurePass) && !options.dependencyOptions.acceptEcmaScript5())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier options.dependencyOptions_ter ^ ^ member acceptConstKeyword_ter ^ ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && options.closurePass) && !options.dependencyOptions.acceptConstKeyword())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier options.dependencyOptions_ter ^ ^ member isTypeCheckingEnabled_ter ^ ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && options.closurePass) && !options.dependencyOptions.isTypeCheckingEnabled())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier options.dependencyOptions_ter ^ ^ member hasHaltingErrors_ter ^ ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && options.closurePass) && !options.dependencyOptions.hasHaltingErrors())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier options.dependencyOptions_ter ^ ^ member hasErrors_ter ^ ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && options.closurePass) && !options.dependencyOptions.hasErrors())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier options.dependencyOptions_ter ^ ^ member hasRegExpGlobalReferences_ter ^ ^ ^ ^ ^ ^ ^ 
if(((options.dependencyOptions.needsManagement() && options.closurePass) && !options.dependencyOptions.hasRegExpGlobalReferences())){

IfStatement condition MethodInvocation qualifier options_ter ^ ^ member isRemoveUnusedClassProperties_ter ^ ^ ^ ^ ^ 
if(options.isRemoveUnusedClassProperties()){

IfStatement condition MethodInvocation qualifier options_ter ^ ^ member shouldColorizeErrorOutput_ter ^ ^ ^ ^ ^ 
if(options.shouldColorizeErrorOutput()){

IfStatement condition MethodInvocation qualifier options_ter ^ ^ member isExternExportsEnabled_ter ^ ^ ^ ^ ^ 
if(options.isExternExportsEnabled()){

IfStatement condition MethodInvocation qualifier options_ter ^ ^ member getInferTypes_ter ^ ^ ^ ^ ^ 
if(options.getInferTypes()){

IfStatement condition MethodInvocation qualifier options_ter ^ ^ member assumeStrictThis_ter ^ ^ ^ ^ ^ 
if(options.assumeStrictThis()){

IfStatement condition MethodInvocation qualifier options_ter ^ ^ member assumeClosuresOnlyCaptureReferences_ter ^ ^ ^ ^ ^ 
if(options.assumeClosuresOnlyCaptureReferences()){

condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier JSModule_ter ^ ^ member inputs_ter ^ ^ ^ ^ ^ ^ 
if((options.dependencyOptions.needsManagement() && JSModule.inputs)){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member getName_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ 
if((options.dependencyOptions.getName() && options.closurePass)){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member hasErrors_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ 
if((options.dependencyOptions.hasErrors() && options.closurePass)){
condition BinaryOperation operator >_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ 
if((options.dependencyOptions.needsManagement() > options.closurePass)){
IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member moduleGraph_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((moduleGraph == null)){

condition BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier options.dependencyOptions_ter ^ ^ member needsManagement_ter ^ ^ ^ ^ operandr MemberReference qualifier options_ter ^ ^ member closurePass_ter ^ ^ ^ ^ ^ ^ 
if((options.dependencyOptions.needsManagement() != options.closurePass)){
stderr: 