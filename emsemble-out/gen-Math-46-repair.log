stdout: ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member I_ter ^ ^ ^ ^ ^ ^ ^ 
return (isZero)?NaN:I;
ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member NaN_ter ^ ^ ^ ^ ^ ^ ^ 
return (isZero)?NaN:NaN;
ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ 
return (isZero)?NaN:INF;
ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member ONE_ter ^ ^ ^ ^ ^ ^ ^ 
return (isZero)?NaN:ONE;
ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member ZERO_ter ^ ^ ^ ^ ^ ^ ^ 
return (isZero)?NaN:ZERO;
ReturnStatement expression TernaryExpression condition MemberReference member isNaN_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ 
return (isNaN)?NaN:INF;
ReturnStatement expression TernaryExpression condition MemberReference member isInfinite_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ 
return (isInfinite)?NaN:INF;
ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member I_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ 
return (isZero)?I:INF;
ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member INF_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ 
return (isZero)?INF:INF;
ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member ONE_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ 
return (isZero)?ONE:INF;
ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member ZERO_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ 
return (isZero)?ZERO:INF;
ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member divisor_ter ^ ^ ^ ^ ^ ^ ^ 
return (isZero)?NaN:divisor;
ReturnStatement expression TernaryExpression condition MemberReference member divisor_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ 
return (divisor)?NaN:INF;
ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member isNaN_ter ^ ^ ^ ^ ^ ^ ^ 
return (isZero)?NaN:isNaN;
ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member divisor_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ 
return (isZero)?divisor:INF;
ReturnStatement expression TernaryExpression condition MemberReference member NaN_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ 
return (NaN)?NaN:INF;
StatementExpression expression MethodInvocation qualifier MathUtils_ter ^ ^ arguments MemberReference member divisor_ter ^ ^ ^ ^ member checkNotNull_ter ^ ^ ^ ^ ^ 
MathUtils.checkNotNull(divisor);

ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member isZero_ter ^ ^ ^ ^ ^ ^ ^ 
return (isZero)?NaN:isZero;
ReturnStatement expression TernaryExpression condition MemberReference member c_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ 
return (c)?NaN:INF;
ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member c_ter ^ ^ ^ ^ ^ ^ ^ 
return (isZero)?NaN:c;
ReturnStatement expression TernaryExpression condition MemberReference member ZERO_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ 
return (ZERO)?NaN:INF;
ReturnStatement expression TernaryExpression condition MemberReference member INF_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ 
return (INF)?NaN:INF;
ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member par1 ^ ^ ^ ^ ^ ^ ^ 
return (isZero)?NaN:;

ReturnStatement expression MemberReference member NaN_ter ^ ^ ^ ^ ^ 
return NaN;
ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member c_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ 
return (isZero)?c:INF;
ReturnStatement expression MemberReference member ZERO_ter ^ ^ ^ ^ ^ 
return ZERO;
ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member isNaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ 
return (isZero)?isNaN:INF;
ReturnStatement expression TernaryExpression condition MemberReference member par1 ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ 
return ()?NaN:INF;

ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member isZero_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ 
return (isZero)?isZero:INF;
ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member par1 ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ 
return (isZero)?:INF;

ReturnStatement expression Cast type ReferenceType name Complex_ter ^ ^ ^ ^ expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
return (Complex)(isZero)?NaN:INF;
ReturnStatement expression TernaryExpression condition MemberReference qualifier divisor_ter ^ ^ member isNaN_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ 
return (divisor.isNaN)?NaN:INF;
ReturnStatement expression TernaryExpression condition MemberReference qualifier divisor_ter ^ ^ member isInfinite_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ 
return (divisor.isInfinite)?NaN:INF;
ReturnStatement expression TernaryExpression condition MemberReference qualifier divisor_ter ^ ^ member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ 
return (divisor.isZero)?NaN:INF;
ReturnStatement expression MemberReference member isZero_ter ^ ^ ^ ^ ^ 
return isZero;
ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true Literal value null_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ 
return (isZero)?null:INF;
ReturnStatement expression MemberReference member INF_ter ^ ^ ^ ^ ^ 
return INF;
ReturnStatement expression MethodInvocation arguments BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member real_ter ^ ^ ^ ^ operandr MemberReference member q_ter ^ ^ ^ ^ ^ ^ operandr MemberReference member imaginary_ter ^ ^ ^ ^ ^ ^ operandr MemberReference member denominator_ter ^ ^ ^ ^ ^ BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member imaginary_ter ^ ^ ^ ^ operandr MemberReference member q_ter ^ ^ ^ ^ ^ ^ operandr MemberReference member real_ter ^ ^ ^ ^ ^ ^ operandr MemberReference member denominator_ter ^ ^ ^ ^ ^ ^ member createComplex_ter ^ ^ ^ ^ ^ 
return createComplex((((real * q) + imaginary) / denominator), (((imaginary * q) - real) / denominator));
ReturnStatement expression TernaryExpression condition MemberReference qualifier divisor_ter ^ ^ member INF_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ 
return (divisor.INF)?NaN:INF;
ReturnStatement expression MemberReference member NaN_ter ^ ^ ^ ^ ^ 
if (true) { return NaN; }

ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference qualifier divisor_ter ^ ^ member I_ter ^ ^ ^ ^ ^ ^ ^ 
return (isZero)?NaN:divisor.I;
ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference qualifier divisor_ter ^ ^ member NaN_ter ^ ^ ^ ^ ^ ^ ^ 
return (isZero)?NaN:divisor.NaN;
ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference qualifier divisor_ter ^ ^ member INF_ter ^ ^ ^ ^ ^ ^ ^ 
return (isZero)?NaN:divisor.INF;
ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference qualifier divisor_ter ^ ^ member ONE_ter ^ ^ ^ ^ ^ ^ ^ 
return (isZero)?NaN:divisor.ONE;
ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference qualifier divisor_ter ^ ^ member ZERO_ter ^ ^ ^ ^ ^ ^ ^ 
return (isZero)?NaN:divisor.ZERO;
ReturnStatement expression TernaryExpression condition MemberReference qualifier divisor_ter ^ ^ member NaN_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ 
return (divisor.NaN)?NaN:INF;
IfStatement condition MemberReference qualifier divisor_ter ^ ^ member isZero_ter ^ ^ ^ ^ ^ 
if(divisor.isZero){

ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false This selectors MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return (isZero)?NaN:this.INF;
ReturnStatement expression MemberReference member ZERO_ter ^ ^ ^ ^ ^ 
if (true) { return ZERO; }

ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member I_ter ^ ^ ^ ^ ^ ^ ^ 
return (isZero)?NaN:I;
ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member NaN_ter ^ ^ ^ ^ ^ ^ ^ 
return (isZero)?NaN:NaN;
ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ 
return (isZero)?NaN:INF;
ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member ONE_ter ^ ^ ^ ^ ^ ^ ^ 
return (isZero)?NaN:ONE;
ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member ZERO_ter ^ ^ ^ ^ ^ ^ ^ 
return (isZero)?NaN:ZERO;
ReturnStatement expression TernaryExpression condition MemberReference member isNaN_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ 
return (isNaN)?NaN:INF;
ReturnStatement expression TernaryExpression condition MemberReference member isInfinite_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ 
return (isInfinite)?NaN:INF;
ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member divisor_ter ^ ^ ^ ^ ^ ^ ^ 
return (isZero)?NaN:divisor;
ReturnStatement expression TernaryExpression condition MemberReference member divisor_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ 
return (divisor)?NaN:INF;
ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member isNaN_ter ^ ^ ^ ^ ^ ^ ^ 
return (isZero)?NaN:isNaN;
ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member I_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ 
return (isZero)?I:INF;
ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member INF_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ 
return (isZero)?INF:INF;
ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member ONE_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ 
return (isZero)?ONE:INF;
ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member ZERO_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ 
return (isZero)?ZERO:INF;
ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member divisor_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ 
return (isZero)?divisor:INF;
ReturnStatement expression TernaryExpression condition MemberReference member NaN_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ 
return (NaN)?NaN:INF;
ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member imaginary_ter ^ ^ ^ ^ ^ ^ ^ 
return (isZero)?NaN:imaginary;
ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member real_ter ^ ^ ^ ^ ^ ^ ^ 
return (isZero)?NaN:real;
ReturnStatement expression MemberReference member NaN_ter ^ ^ ^ ^ ^ 
return NaN;
ReturnStatement expression TernaryExpression condition MemberReference member ZERO_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ 
return (ZERO)?NaN:INF;
ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member isZero_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ 
return (isZero)?isZero:INF;
ReturnStatement expression TernaryExpression condition MemberReference member INF_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ 
return (INF)?NaN:INF;
ReturnStatement expression Cast type ReferenceType name Complex_ter ^ ^ ^ ^ expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
return (Complex)(isZero)?NaN:INF;
ReturnStatement expression TernaryExpression condition MemberReference member imaginary_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ 
return (imaginary)?NaN:INF;
ReturnStatement expression MemberReference member isZero_ter ^ ^ ^ ^ ^ 
return isZero;
ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member isZero_ter ^ ^ ^ ^ ^ ^ ^ 
return (isZero)?NaN:isZero;
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
return null;
ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member isNaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ 
return (isZero)?isNaN:INF;
ReturnStatement expression TernaryExpression condition MethodInvocation prefix_operators !_ter ^ ^ member isInfinite_ter ^ ^ ^ ^ if_true MemberReference member ZERO_ter ^ ^ ^ ^ if_false MemberReference member NaN_ter ^ ^ ^ ^ ^ ^ ^ 
return (!isInfinite())?ZERO:NaN;
ReturnStatement expression MemberReference member INF_ter ^ ^ ^ ^ ^ 
return INF;
ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true Literal value null_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ 
return (isZero)?null:INF;
ReturnStatement expression MethodInvocation arguments BinaryOperation operator /_ter ^ ^ operandl MemberReference member real_ter ^ ^ ^ ^ operandr MemberReference member divisor_ter ^ ^ ^ ^ ^ BinaryOperation operator /_ter ^ ^ operandl MemberReference member imaginary_ter ^ ^ ^ ^ operandr MemberReference member divisor_ter ^ ^ ^ ^ ^ ^ member createComplex_ter ^ ^ ^ ^ ^ 
return createComplex((real / divisor), (imaginary / divisor));
ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
return (isZero)?NaN:null;
ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member imaginary_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ 
return (isZero)?imaginary:INF;
ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return (isZero)?NaN:(isZero)?NaN:INF;
ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference prefix_operators -_ter ^ ^ member isZero_ter ^ ^ ^ ^ ^ ^ ^ 
return (isZero)?NaN:-isZero;
ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false This selectors MemberReference member isZero_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return (isZero)?NaN:this.isZero;
ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true This selectors MemberReference member isZero_ter ^ ^ ^ ^ ^ ^ if_false MemberReference member INF_ter ^ ^ ^ ^ ^ ^ ^ 
return (isZero)?this.isZero:INF;
ReturnStatement expression TernaryExpression condition MemberReference member isZero_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference prefix_operators -_ter ^ ^ member INF_ter ^ ^ ^ ^ ^ ^ ^ 
return (isZero)?NaN:-INF;
stderr: 