stdout: StatementExpression expression MethodInvocation qualifier Lists_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member TRUE_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
Lists.add(new Node(Token.TRUE));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member ERROR_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.ERROR));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member EOF_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.EOF));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member EOL_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.EOL));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member FIRST_BYTECODE_TOKEN_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.FIRST_BYTECODE_TOKEN));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member ENTERWITH_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.ENTERWITH));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member LEAVEWITH_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.LEAVEWITH));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member RETURN_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.RETURN));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member GOTO_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.GOTO));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member IFEQ_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.IFEQ));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member IFNE_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.IFNE));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member SETNAME_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.SETNAME));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member BITOR_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.BITOR));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member BITXOR_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.BITXOR));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member BITAND_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.BITAND));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member EQ_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.EQ));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member NE_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.NE));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member LT_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.LT));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member LE_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.LE));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member GT_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.GT));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member GE_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.GE));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member LSH_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.LSH));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member RSH_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.RSH));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member URSH_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.URSH));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member ADD_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.ADD));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member SUB_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.SUB));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member MUL_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.MUL));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member DIV_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.DIV));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member MOD_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.MOD));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member NOT_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.NOT));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member BITNOT_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.BITNOT));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member POS_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.POS));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member NEG_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.NEG));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member NEW_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.NEW));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member DELPROP_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.DELPROP));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member TYPEOF_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.TYPEOF));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member GETPROP_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.GETPROP));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member SETPROP_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.SETPROP));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member GETELEM_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.GETELEM));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member SETELEM_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.SETELEM));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member CALL_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.CALL));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member NAME_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.NAME));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member NUMBER_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.NUMBER));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member STRING_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.STRING));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member NULL_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.NULL));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member THIS_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.THIS));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member FALSE_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.FALSE));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member TRUE_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.TRUE));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member SHEQ_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.SHEQ));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member SHNE_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.SHNE));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member REGEXP_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.REGEXP));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member BINDNAME_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.BINDNAME));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member THROW_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.THROW));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member RETHROW_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.RETHROW));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member IN_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.IN));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member INSTANCEOF_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.INSTANCEOF));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member LOCAL_LOAD_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.LOCAL_LOAD));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member GETVAR_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.GETVAR));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member SETVAR_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.SETVAR));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member CATCH_SCOPE_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.CATCH_SCOPE));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member ENUM_INIT_KEYS_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.ENUM_INIT_KEYS));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member ENUM_INIT_VALUES_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.ENUM_INIT_VALUES));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member ENUM_NEXT_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.ENUM_NEXT));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member ENUM_ID_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.ENUM_ID));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member THISFN_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.THISFN));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member RETURN_RESULT_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.RETURN_RESULT));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member ARRAYLIT_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.ARRAYLIT));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member OBJECTLIT_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.OBJECTLIT));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member GET_REF_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.GET_REF));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member SET_REF_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.SET_REF));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member DEL_REF_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.DEL_REF));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member REF_CALL_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.REF_CALL));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member REF_SPECIAL_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.REF_SPECIAL));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member DEFAULTNAMESPACE_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.DEFAULTNAMESPACE));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member ESCXMLATTR_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.ESCXMLATTR));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member ESCXMLTEXT_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.ESCXMLTEXT));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member REF_MEMBER_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.REF_MEMBER));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member REF_NS_MEMBER_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.REF_NS_MEMBER));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member REF_NAME_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.REF_NAME));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member REF_NS_NAME_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.REF_NS_NAME));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member LAST_BYTECODE_TOKEN_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.LAST_BYTECODE_TOKEN));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member TRY_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.TRY));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member SEMI_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.SEMI));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member LB_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.LB));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member RB_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.RB));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member LC_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.LC));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member RC_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.RC));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member LP_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.LP));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member RP_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.RP));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member COMMA_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.COMMA));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member ASSIGN_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.ASSIGN));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member ASSIGN_BITOR_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.ASSIGN_BITOR));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member ASSIGN_BITXOR_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.ASSIGN_BITXOR));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member ASSIGN_BITAND_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.ASSIGN_BITAND));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member ASSIGN_LSH_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.ASSIGN_LSH));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member ASSIGN_RSH_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.ASSIGN_RSH));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member ASSIGN_URSH_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.ASSIGN_URSH));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member ASSIGN_ADD_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.ASSIGN_ADD));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member ASSIGN_SUB_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.ASSIGN_SUB));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member ASSIGN_MUL_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.ASSIGN_MUL));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member ASSIGN_DIV_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.ASSIGN_DIV));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member ASSIGN_MOD_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.ASSIGN_MOD));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member FIRST_ASSIGN_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.FIRST_ASSIGN));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member LAST_ASSIGN_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.LAST_ASSIGN));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member HOOK_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.HOOK));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member COLON_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.COLON));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member OR_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.OR));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member AND_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.AND));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member INC_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.INC));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member DEC_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.DEC));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member DOT_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.DOT));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member FUNCTION_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.FUNCTION));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member EXPORT_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.EXPORT));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member IMPORT_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.IMPORT));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member IF_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.IF));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member ELSE_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.ELSE));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member SWITCH_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.SWITCH));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member CASE_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.CASE));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member DEFAULT_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.DEFAULT));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member WHILE_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.WHILE));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member DO_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.DO));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member FOR_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.FOR));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member BREAK_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.BREAK));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member CONTINUE_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.CONTINUE));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member VAR_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.VAR));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member WITH_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.WITH));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member CATCH_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.CATCH));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member FINALLY_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.FINALLY));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member VOID_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.VOID));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member RESERVED_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.RESERVED));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member EMPTY_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.EMPTY));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member BLOCK_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.BLOCK));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member LABEL_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.LABEL));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member TARGET_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.TARGET));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member LOOP_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.LOOP));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member EXPR_VOID_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.EXPR_VOID));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member EXPR_RESULT_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.EXPR_RESULT));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member JSR_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.JSR));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member SCRIPT_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.SCRIPT));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member TYPEOFNAME_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.TYPEOFNAME));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member USE_STACK_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.USE_STACK));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member SETPROP_OP_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.SETPROP_OP));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member SETELEM_OP_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.SETELEM_OP));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member LOCAL_BLOCK_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.LOCAL_BLOCK));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member SET_REF_OP_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.SET_REF_OP));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member DOTDOT_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.DOTDOT));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member COLONCOLON_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.COLONCOLON));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member XML_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.XML));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member DOTQUERY_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.DOTQUERY));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member XMLATTR_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.XMLATTR));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member XMLEND_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.XMLEND));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member TO_OBJECT_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.TO_OBJECT));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member TO_DOUBLE_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.TO_DOUBLE));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member GET_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.GET));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member SET_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.SET));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member CONST_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.CONST));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member SETCONST_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.SETCONST));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member SETCONSTVAR_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.SETCONSTVAR));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member DEBUGGER_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.DEBUGGER));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member LABEL_NAME_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.LABEL_NAME));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member LAST_TOKEN_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.LAST_TOKEN));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member ANNOTATION_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.ANNOTATION));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member PIPE_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.PIPE));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member STAR_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.STAR));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member EOC_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.EOC));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member QMARK_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.QMARK));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member ELLIPSIS_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.ELLIPSIS));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member BANG_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.BANG));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member EQUALS_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.EQUALS));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member TRUE_ter ^ ^ ^ ^ ^ ^ member debug_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.debug(new Node(Token.TRUE));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member TRUE_ter ^ ^ ^ ^ ^ ^ member reverse_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.reverse(new Node(Token.TRUE));


StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference member nodes_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(nodes));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member TRUE_ter ^ ^ ^ ^ ^ ^ member put_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.put(new Node(Token.TRUE));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member TRUE_ter ^ ^ ^ ^ ^ ^ member replaceAssignmentExpression_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.replaceAssignmentExpression(new Node(Token.TRUE));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member TRUE_ter ^ ^ ^ ^ ^ ^ member e_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.e(new Node(Token.TRUE));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member TRUE_ter ^ ^ ^ ^ ^ ^ member i_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.i(new Node(Token.TRUE));

StatementExpression expression Assignment expressionl MemberReference member nodes_ter ^ ^ ^ ^ value MethodInvocation qualifier Lists_ter ^ ^ arguments MemberReference member nodes_ter ^ ^ ^ ^ member reverse_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
nodes = Lists.reverse(nodes);

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference member TRUE_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(TRUE));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference member loc0 ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node());

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member TRUE_ter ^ ^ ^ MemberReference qualifier Token_ter ^ ^ member TRUE_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.TRUE, Token.TRUE));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments Literal value false_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(false));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member TRUE_ter ^ ^ ^ Literal value false_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.TRUE, false));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments Literal value true_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(true));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member TRUE_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.TRUE, true));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member TRUE_ter ^ ^ ^ MemberReference member TRUE_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.TRUE, TRUE));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference member TRUE_ter ^ ^ ^ MemberReference qualifier Token_ter ^ ^ member TRUE_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(TRUE, Token.TRUE));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments Literal value null_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(null));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member TRUE_ter ^ ^ ^ Literal value null_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.TRUE, null));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments Literal value <string>_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node("null"));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference member TRUE_ter ^ ^ ^ Literal value false_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(TRUE, false));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments Literal value false_ter ^ ^ ^ MemberReference qualifier Token_ter ^ ^ member TRUE_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(false, Token.TRUE));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments Literal value true_ter ^ ^ ^ MemberReference qualifier Token_ter ^ ^ member TRUE_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(true, Token.TRUE));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference member TRUE_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(TRUE, true));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member TRUE_ter ^ ^ ^ Literal value <string>_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node(Token.TRUE, "null"));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member TRUE_ter ^ ^ ^ MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments MemberReference qualifier Token_ter ^ ^ member TRUE_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
arg 
arg 
nodes.add(new Node(Token.TRUE, nodes.add(new Node(Token.TRUE))));

StatementExpression expression MethodInvocation qualifier nodes_ter ^ ^ arguments ClassCreator type ReferenceType name Node_ter ^ ^ ^ ^ arguments BinaryOperation operator +_ter ^ ^ operandl MemberReference qualifier Token_ter ^ ^ member TRUE_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
arg 
arg 
nodes.add(new Node((Token.TRUE + 1)));

StatementExpression expression Assignment expressionl MemberReference member nodes_ter ^ ^ ^ ^ value MethodInvocation qualifier Lists_ter ^ ^ arguments MemberReference member nodes_ter ^ ^ ^ ^ member reverse_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
nodes = Lists.reverse(nodes);

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name replace_ter ^ ^ initializer MethodInvocation qualifier ref_ter ^ ^ member getName_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node replace = ref.getName();

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name replace_ter ^ ^ initializer MethodInvocation qualifier ref_ter ^ ^ member replaceAssignmentExpression_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node replace = ref.replaceAssignmentExpression();

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name replace_ter ^ ^ initializer MethodInvocation qualifier ref_ter ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node replace = ref.get();

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name replace_ter ^ ^ initializer MethodInvocation qualifier ref_ter ^ ^ member toString_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node replace = ref.toString();

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name replace_ter ^ ^ initializer MethodInvocation qualifier nodes_ter ^ ^ member getParent_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node replace = nodes.getParent();

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name replace_ter ^ ^ initializer MethodInvocation qualifier ref_ter ^ ^ member getParent_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node replace = ref.getParent();

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name replace_ter ^ ^ initializer MethodInvocation qualifier cur_ter ^ ^ member getParent_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node replace = cur.getParent();

StatementExpression expression MethodInvocation qualifier ref_ter ^ ^ member getParent_ter ^ ^ ^ ^ ^ 
ref.getParent();


LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name replace_ter ^ ^ initializer MethodInvocation qualifier ref_ter ^ ^ member getParent_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
final Node replace = ref.getParent();

StatementExpression expression Assignment expressionl MemberReference member loc0 ^ ^ ^ ^ value MethodInvocation qualifier ref_ter ^ ^ member getParent_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
 = ref.getParent();


LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer MethodInvocation qualifier ref_ter ^ ^ member getParent_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node  = ref.getParent();

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer Cast type ReferenceType name Node_ter ^ ^ ^ ^ expression MethodInvocation qualifier ref_ter ^ ^ member getParent_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
arg 
arg 
Node  = (Node)ref.getParent();

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer MethodInvocation qualifier nodes_ter ^ ^ member getParent_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node  = nodes.getParent();

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer MethodInvocation qualifier cur_ter ^ ^ member getParent_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node  = cur.getParent();

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ ^ ^ ^ 
arg 
arg 
Node  = ;


LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer MethodInvocation qualifier cur_ter ^ ^ arguments MethodInvocation qualifier ref_ter ^ ^ member getParent_ter ^ ^ ^ ^ member addChildToFront_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node  = cur.addChildToFront(ref.getParent());

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer MethodInvocation qualifier nodes_ter ^ ^ arguments MethodInvocation qualifier ref_ter ^ ^ member getParent_ter ^ ^ ^ ^ member addChildToFront_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node  = nodes.addChildToFront(ref.getParent());

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer MethodInvocation qualifier ref_ter ^ ^ arguments MethodInvocation qualifier ref_ter ^ ^ member getParent_ter ^ ^ ^ ^ member addChildToFront_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node  = ref.addChildToFront(ref.getParent());

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer MethodInvocation qualifier ref_ter ^ ^ arguments Literal value false_ter ^ ^ ^ ^ member getParent_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node  = ref.getParent(false);

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer MethodInvocation qualifier ref_ter ^ ^ arguments Literal value true_ter ^ ^ ^ ^ member getParent_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node  = ref.getParent(true);

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer MethodInvocation qualifier ref_ter ^ ^ arguments MethodInvocation qualifier ref_ter ^ ^ member getParent_ter ^ ^ ^ ^ member getParent_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node  = ref.getParent(ref.getParent());

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer MethodInvocation qualifier ref_ter ^ ^ arguments Literal value null_ter ^ ^ ^ ^ member getParent_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node  = ref.getParent(null);

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer MethodInvocation arguments MethodInvocation qualifier ref_ter ^ ^ member getParent_ter ^ ^ ^ ^ member addChildToFront_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node  = addChildToFront(ref.getParent());

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer MethodInvocation qualifier nodes_ter ^ ^ arguments Literal value false_ter ^ ^ ^ ^ member getParent_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node  = nodes.getParent(false);

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer MethodInvocation qualifier nodes_ter ^ ^ arguments Literal value true_ter ^ ^ ^ ^ member getParent_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node  = nodes.getParent(true);

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer MethodInvocation qualifier cur_ter ^ ^ arguments Literal value false_ter ^ ^ ^ ^ member getParent_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node  = cur.getParent(false);

ReturnStatement_ter ^ 
if (true) { return;
 }

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer MethodInvocation qualifier cur_ter ^ ^ arguments Literal value true_ter ^ ^ ^ ^ member getParent_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node  = cur.getParent(true);

parameters ^ 

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer MethodInvocation qualifier nodes_ter ^ ^ arguments Literal value null_ter ^ ^ ^ ^ member getParent_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node  = nodes.getParent(null);

stderr: 