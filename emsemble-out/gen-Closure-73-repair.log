stdout: IfStatement condition BinaryOperation operator <=_ter ^ ^ operandl MemberReference member c_ter ^ ^ ^ ^ operandr Literal value 0x7f_ter ^ ^ ^ ^ ^ ^ ^ 
if((c <= 0x7f)){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator >_ter ^ ^ operandl MemberReference member c_ter ^ ^ ^ ^ operandr Literal value 0x1f_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl MemberReference member c_ter ^ ^ ^ ^ operandr Literal value 2_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((c > 0x1f) && (c <= 2))){
IfStatement condition BinaryOperation operator >_ter ^ ^ operandl MemberReference member c_ter ^ ^ ^ ^ operandr Literal value 0x1f_ter ^ ^ ^ ^ ^ ^ ^ 
if((c > 0x1f)){

BreakStatement_ter ^ 
break;

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator >_ter ^ ^ operandl MemberReference member c_ter ^ ^ ^ ^ operandr Literal value 0x1f_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator >=_ter ^ ^ operandl MemberReference member c_ter ^ ^ ^ ^ operandr Literal value 0x7f_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((c > 0x1f) && (c >= 0x7f))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator >_ter ^ ^ operandl MemberReference member c_ter ^ ^ ^ ^ operandr Literal value 2_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl MemberReference member c_ter ^ ^ ^ ^ operandr Literal value 0x7f_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((c > 2) && (c <= 0x7f))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator >_ter ^ ^ operandl MemberReference member c_ter ^ ^ ^ ^ operandr Literal value 0x1f_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator >_ter ^ ^ operandl MemberReference member c_ter ^ ^ ^ ^ operandr Literal value 0x7f_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((c > 0x1f) && (c > 0x7f))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator >_ter ^ ^ operandl MemberReference member c_ter ^ ^ ^ ^ operandr Literal value 0x1f_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl MemberReference member c_ter ^ ^ ^ ^ operandr Literal value 0x7f_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((c > 0x1f) && (c <= 0x7f))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator >=_ter ^ ^ operandl MemberReference member c_ter ^ ^ ^ ^ operandr Literal value 0x1f_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl MemberReference member c_ter ^ ^ ^ ^ operandr Literal value 0x7f_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((c >= 0x1f) && (c <= 0x7f))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator >_ter ^ ^ operandl MemberReference member c_ter ^ ^ ^ ^ operandr Literal value 0x1f_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl MemberReference member c_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((c > 0x1f) && (c <= null))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator >_ter ^ ^ operandl MemberReference member c_ter ^ ^ ^ ^ operandr Literal value 0x1f_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl MemberReference member c_ter ^ ^ ^ ^ operandr Literal value false_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((c > 0x1f) && (c <= false))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator >_ter ^ ^ operandl MemberReference member c_ter ^ ^ ^ ^ operandr Literal value 0x1f_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl MemberReference member c_ter ^ ^ ^ ^ operandr Literal value 0x1f_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((c > 0x1f) && (c <= 0x1f))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator >_ter ^ ^ operandl MemberReference member c_ter ^ ^ ^ ^ operandr Literal value 0x1f_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl MemberReference member c_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((c > 0x1f) && (c <= 1))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator >_ter ^ ^ operandl MemberReference member c_ter ^ ^ ^ ^ operandr Literal value 0x1f_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl MemberReference member c_ter ^ ^ ^ ^ operandr Literal value true_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((c > 0x1f) && (c <= true))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator >_ter ^ ^ operandl MemberReference member c_ter ^ ^ ^ ^ operandr Literal value 0x1f_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl MemberReference member c_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((c > 0x1f) && (c <= 0))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator >_ter ^ ^ operandl MemberReference member c_ter ^ ^ ^ ^ operandr Literal value 0x1f_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member c_ter ^ ^ ^ ^ operandr Literal value 0x7f_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((c > 0x1f) && (c == 0x7f))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator >_ter ^ ^ operandl MemberReference member c_ter ^ ^ ^ ^ operandr Literal value 0x1f_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member c_ter ^ ^ ^ ^ operandr Literal value 0x7f_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((c > 0x1f) && (c < 0x7f))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator <=_ter ^ ^ operandl MemberReference member c_ter ^ ^ ^ ^ operandr Literal value 0x1f_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl MemberReference member c_ter ^ ^ ^ ^ operandr Literal value 0x7f_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((c <= 0x1f) && (c <= 0x7f))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator >_ter ^ ^ operandl MemberReference member c_ter ^ ^ ^ ^ operandr Literal value 0x1f_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl MemberReference member c_ter ^ ^ ^ ^ operandr Literal prefix_operators -_ter ^ ^ value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((c > 0x1f) && (c <= -1))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator >_ter ^ ^ operandl MemberReference member c_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl MemberReference member c_ter ^ ^ ^ ^ operandr Literal value 0x7f_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((c > null) && (c <= 0x7f))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator >_ter ^ ^ operandl MemberReference member c_ter ^ ^ ^ ^ operandr Literal value false_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl MemberReference member c_ter ^ ^ ^ ^ operandr Literal value 0x7f_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((c > false) && (c <= 0x7f))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator >_ter ^ ^ operandl MemberReference member c_ter ^ ^ ^ ^ operandr Literal value 0x1f_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member c_ter ^ ^ ^ ^ operandr Literal value 0x7f_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((c > 0x1f) && (c != 0x7f))){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator >_ter ^ ^ operandl MemberReference member c_ter ^ ^ ^ ^ operandr Literal value 0x1f_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl MemberReference member c_ter ^ ^ ^ ^ operandr Literal value 0x7f_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl MemberReference member c_ter ^ ^ ^ ^ operandr Literal value 0x7f_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((c > 0x1f) && (c <= 0x7f)) && (c <= 0x7f))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator >_ter ^ ^ operandl MemberReference member c_ter ^ ^ ^ ^ operandr Literal value 0x1f_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl MemberReference member c_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((c > 0x1f) && (c <= "null"))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator >_ter ^ ^ operandl MemberReference member c_ter ^ ^ ^ ^ operandr Literal value 0x7f_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl MemberReference member c_ter ^ ^ ^ ^ operandr Literal value 0x7f_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((c > 0x7f) && (c <= 0x7f))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member c_ter ^ ^ ^ ^ operandr Literal value 0x1f_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl MemberReference member c_ter ^ ^ ^ ^ operandr Literal value 0x7f_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((c == 0x1f) && (c <= 0x7f))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator >_ter ^ ^ operandl MemberReference member c_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl MemberReference member c_ter ^ ^ ^ ^ operandr Literal value 0x7f_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((c > 1) && (c <= 0x7f))){
StatementExpression expression MethodInvocation qualifier sb_ter ^ ^ arguments MemberReference member c_ter ^ ^ ^ ^ member append_ter ^ ^ ^ ^ ^ 
sb.append(c);

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator >_ter ^ ^ operandl MemberReference member c_ter ^ ^ ^ ^ operandr Literal value true_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl MemberReference member c_ter ^ ^ ^ ^ operandr Literal value 0x7f_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((c > true) && (c <= 0x7f))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator >_ter ^ ^ operandl MemberReference member c_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl MemberReference member c_ter ^ ^ ^ ^ operandr Literal value 0x7f_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((c > 0) && (c <= 0x7f))){
StatementExpression expression MethodInvocation arguments MemberReference member sb_ter ^ ^ ^ MemberReference member c_ter ^ ^ ^ ^ member appendHexJavaScriptRepresentation_ter ^ ^ ^ ^ ^ 
appendHexJavaScriptRepresentation(sb, c);

condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator >_ter ^ ^ operandl MemberReference member c_ter ^ ^ ^ ^ operandr Literal value 0x1f_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl MemberReference member c_ter ^ ^ ^ ^ operandr Literal value 0x7f_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((c > 0x1f) || (c <= 0x7f))){
ReturnStatement_ter ^ 
if (true) { return;
 }

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator >_ter ^ ^ operandl MemberReference member c_ter ^ ^ ^ ^ operandr Literal prefix_operators -_ter ^ ^ value 1_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl MemberReference member c_ter ^ ^ ^ ^ operandr Literal value 0x7f_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((c > -1) && (c <= 0x7f))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator <_ter ^ ^ operandl MemberReference member c_ter ^ ^ ^ ^ operandr Literal value 0x1f_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl MemberReference member c_ter ^ ^ ^ ^ operandr Literal value 0x7f_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((c < 0x1f) && (c <= 0x7f))){
StatementExpression expression MethodInvocation qualifier sb_ter ^ ^ arguments Literal value <string>_ter ^ ^ ^ ^ member append_ter ^ ^ ^ ^ ^ 
sb.append("null");

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator >_ter ^ ^ operandl MemberReference member c_ter ^ ^ ^ ^ operandr Literal value 0x1f_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl MemberReference member c_ter ^ ^ ^ ^ operandr Literal value 0x7f_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((c > 0x1f) && (c <= 0x7f))){

ContinueStatement_ter ^ 
continue;

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member c_ter ^ ^ ^ ^ operandr Literal value 0x1f_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl MemberReference member c_ter ^ ^ ^ ^ operandr Literal value 0x7f_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((c != 0x1f) && (c <= 0x7f))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator >_ter ^ ^ operandl MemberReference member c_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl MemberReference member c_ter ^ ^ ^ ^ operandr Literal value 0x7f_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((c > "null") && (c <= 0x7f))){
IfStatement condition MethodInvocation qualifier s_ter ^ ^ arguments Literal value true_ter ^ ^ ^ BinaryOperation operator +_ter ^ ^ operandl MemberReference member i_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ MemberReference member END_SCRIPT_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ MethodInvocation qualifier END_SCRIPT_ter ^ ^ member length_ter ^ ^ ^ ^ member regionMatches_ter ^ ^ ^ ^ ^ 
if(s.regionMatches(true, (i + 1), END_SCRIPT, 0, END_SCRIPT.length())){

IfStatement condition BinaryOperation operator <=_ter ^ ^ operandl MemberReference member c_ter ^ ^ ^ ^ operandr Literal value 0x7f_ter ^ ^ ^ ^ ^ ^ ^ 
if((c <= 0x7f)){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator >_ter ^ ^ operandl MemberReference member c_ter ^ ^ ^ ^ operandr Literal value 0x1f_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl MemberReference member sb_ter ^ ^ ^ ^ operandr Literal value 0x7f_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((c > 0x1f) && (sb <= 0x7f))){
IfStatement condition MethodInvocation qualifier s_ter ^ ^ arguments Literal value false_ter ^ ^ ^ BinaryOperation operator +_ter ^ ^ operandl MemberReference member i_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ MemberReference member START_COMMENT_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ MethodInvocation qualifier START_COMMENT_ter ^ ^ member length_ter ^ ^ ^ ^ member regionMatches_ter ^ ^ ^ ^ ^ 
if(s.regionMatches(false, (i + 1), START_COMMENT, 0, START_COMMENT.length())){

IfStatement condition MethodInvocation qualifier outputCharsetEncoder_ter ^ ^ arguments MemberReference member c_ter ^ ^ ^ ^ member canEncode_ter ^ ^ ^ ^ ^ 
if(outputCharsetEncoder.canEncode(c)){

IfStatement condition MethodInvocation qualifier sb_ter ^ ^ arguments MemberReference member c_ter ^ ^ ^ ^ member append_ter ^ ^ ^ ^ ^ 
if(sb.append(c)){

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member outputCharsetEncoder_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((outputCharsetEncoder != null)){

IfStatement condition BinaryOperation operator >_ter ^ ^ operandl MemberReference member c_ter ^ ^ ^ ^ operandr Literal value 0x1f_ter ^ ^ ^ ^ ^ ^ ^ 
if((c > 0x1f)){

StatementExpression expression MethodInvocation qualifier sb_ter ^ ^ arguments MemberReference member c_ter ^ ^ ^ ^ member append_ter ^ ^ ^ ^ ^ 
sb.append(c);


IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator >_ter ^ ^ operandl MemberReference member c_ter ^ ^ ^ ^ operandr Literal value 0x1f_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl MemberReference member c_ter ^ ^ ^ ^ operandr Literal value 0x7f_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl MemberReference member c_ter ^ ^ ^ ^ operandr Literal value 0x7f_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl MemberReference member c_ter ^ ^ ^ ^ operandr Literal value 0x7f_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((((c > 0x1f) && (c <= 0x7f)) && (c <= 0x7f)) && (c <= 0x7f))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator >_ter ^ ^ operandl MemberReference member c_ter ^ ^ ^ ^ operandr Literal value 0x1f_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl MemberReference member c_ter ^ ^ ^ ^ operandr Literal value 0x7f_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((c > 0x1f) && (c && 0x7f))){
stderr: 