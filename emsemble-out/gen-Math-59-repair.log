stdout: ReturnStatement expression TernaryExpression condition BinaryOperation operator <=_ter ^ ^ operandl MemberReference member a_ter ^ ^ ^ ^ operandr MemberReference member b_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member b_ter ^ ^ ^ ^ if_false TernaryExpression condition MethodInvocation qualifier Float_ter ^ ^ arguments BinaryOperation operator +_ter ^ ^ operandl MemberReference member a_ter ^ ^ ^ ^ operandr MemberReference member b_ter ^ ^ ^ ^ ^ ^ member isNaN_ter ^ ^ ^ ^ if_true MemberReference qualifier Float_ter ^ ^ member NaN_ter ^ ^ ^ ^ if_false MemberReference member b_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return ((a <= b))?b:(Float.isNaN((a + b)))?Float.NaN:b;
ReturnStatement expression TernaryExpression condition BinaryOperation operator >=_ter ^ ^ operandl MemberReference member a_ter ^ ^ ^ ^ operandr MemberReference member b_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member b_ter ^ ^ ^ ^ if_false TernaryExpression condition MethodInvocation qualifier Float_ter ^ ^ arguments BinaryOperation operator +_ter ^ ^ operandl MemberReference member a_ter ^ ^ ^ ^ operandr MemberReference member b_ter ^ ^ ^ ^ ^ ^ member isNaN_ter ^ ^ ^ ^ if_true MemberReference qualifier Float_ter ^ ^ member NaN_ter ^ ^ ^ ^ if_false MemberReference member b_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return ((a >= b))?b:(Float.isNaN((a + b)))?Float.NaN:b;
ReturnStatement expression TernaryExpression condition BinaryOperation operator <_ter ^ ^ operandl MemberReference member a_ter ^ ^ ^ ^ operandr MemberReference member b_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member b_ter ^ ^ ^ ^ if_false TernaryExpression condition MethodInvocation qualifier Float_ter ^ ^ arguments BinaryOperation operator +_ter ^ ^ operandl MemberReference member a_ter ^ ^ ^ ^ operandr MemberReference member b_ter ^ ^ ^ ^ ^ ^ member isNaN_ter ^ ^ ^ ^ if_true MemberReference qualifier Float_ter ^ ^ member NaN_ter ^ ^ ^ ^ if_false MemberReference member b_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return ((a < b))?b:(Float.isNaN((a + b)))?Float.NaN:b;
ReturnStatement expression TernaryExpression condition BinaryOperation operator <=_ter ^ ^ operandl MemberReference member a_ter ^ ^ ^ ^ operandr MemberReference member b_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member b_ter ^ ^ ^ ^ if_false TernaryExpression condition MethodInvocation qualifier Float_ter ^ ^ arguments BinaryOperation operator +_ter ^ ^ operandl MemberReference member a_ter ^ ^ ^ ^ operandr MemberReference member b_ter ^ ^ ^ ^ ^ ^ member max_ter ^ ^ ^ ^ if_true MemberReference qualifier Float_ter ^ ^ member NaN_ter ^ ^ ^ ^ if_false MemberReference member b_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return ((a <= b))?b:(Float.max((a + b)))?Float.NaN:b;
ReturnStatement expression TernaryExpression condition BinaryOperation operator >_ter ^ ^ operandl MemberReference member a_ter ^ ^ ^ ^ operandr MemberReference member b_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member b_ter ^ ^ ^ ^ if_false TernaryExpression condition MethodInvocation qualifier Float_ter ^ ^ arguments BinaryOperation operator +_ter ^ ^ operandl MemberReference member a_ter ^ ^ ^ ^ operandr MemberReference member b_ter ^ ^ ^ ^ ^ ^ member isNaN_ter ^ ^ ^ ^ if_true MemberReference qualifier Float_ter ^ ^ member NaN_ter ^ ^ ^ ^ if_false MemberReference member b_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return ((a > b))?b:(Float.isNaN((a + b)))?Float.NaN:b;
ReturnStatement expression TernaryExpression condition BinaryOperation operator <=_ter ^ ^ operandl MemberReference member a_ter ^ ^ ^ ^ operandr MemberReference member b_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member b_ter ^ ^ ^ ^ if_false TernaryExpression condition MethodInvocation qualifier Float_ter ^ ^ arguments BinaryOperation operator +_ter ^ ^ operandl MemberReference member a_ter ^ ^ ^ ^ operandr MemberReference member b_ter ^ ^ ^ ^ ^ ^ member debug_ter ^ ^ ^ ^ if_true MemberReference qualifier Float_ter ^ ^ member NaN_ter ^ ^ ^ ^ if_false MemberReference member b_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return ((a <= b))?b:(Float.debug((a + b)))?Float.NaN:b;
ReturnStatement expression TernaryExpression condition BinaryOperation operator <=_ter ^ ^ operandl MemberReference member a_ter ^ ^ ^ ^ operandr MemberReference member b_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member b_ter ^ ^ ^ ^ if_false TernaryExpression condition MethodInvocation qualifier Float_ter ^ ^ arguments BinaryOperation operator +_ter ^ ^ operandl MemberReference member a_ter ^ ^ ^ ^ operandr MemberReference member b_ter ^ ^ ^ ^ ^ ^ member e_ter ^ ^ ^ ^ if_true MemberReference qualifier Float_ter ^ ^ member NaN_ter ^ ^ ^ ^ if_false MemberReference member b_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return ((a <= b))?b:(Float.e((a + b)))?Float.NaN:b;
ReturnStatement expression TernaryExpression condition BinaryOperation operator <=_ter ^ ^ operandl MemberReference member a_ter ^ ^ ^ ^ operandr MemberReference member b_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member b_ter ^ ^ ^ ^ if_false TernaryExpression condition MethodInvocation qualifier Float_ter ^ ^ arguments BinaryOperation operator +_ter ^ ^ operandl MemberReference member a_ter ^ ^ ^ ^ operandr MemberReference member b_ter ^ ^ ^ ^ ^ ^ member add_ter ^ ^ ^ ^ if_true MemberReference qualifier Float_ter ^ ^ member NaN_ter ^ ^ ^ ^ if_false MemberReference member b_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return ((a <= b))?b:(Float.add((a + b)))?Float.NaN:b;
ReturnStatement expression TernaryExpression condition BinaryOperation operator <=_ter ^ ^ operandl MemberReference member a_ter ^ ^ ^ ^ operandr MemberReference member b_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member b_ter ^ ^ ^ ^ if_false TernaryExpression condition MethodInvocation qualifier Float_ter ^ ^ arguments BinaryOperation operator >=_ter ^ ^ operandl MemberReference member a_ter ^ ^ ^ ^ operandr MemberReference member b_ter ^ ^ ^ ^ ^ ^ member isNaN_ter ^ ^ ^ ^ if_true MemberReference qualifier Float_ter ^ ^ member NaN_ter ^ ^ ^ ^ if_false MemberReference member b_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return ((a <= b))?b:(Float.isNaN((a >= b)))?Float.NaN:b;
ReturnStatement expression TernaryExpression condition BinaryOperation operator <=_ter ^ ^ operandl MemberReference member a_ter ^ ^ ^ ^ operandr MemberReference member b_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member b_ter ^ ^ ^ ^ if_false TernaryExpression condition MethodInvocation qualifier Float_ter ^ ^ arguments BinaryOperation operator <=_ter ^ ^ operandl MemberReference member a_ter ^ ^ ^ ^ operandr MemberReference member b_ter ^ ^ ^ ^ ^ ^ member isNaN_ter ^ ^ ^ ^ if_true MemberReference qualifier Float_ter ^ ^ member NaN_ter ^ ^ ^ ^ if_false MemberReference member b_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return ((a <= b))?b:(Float.isNaN((a <= b)))?Float.NaN:b;
ReturnStatement expression TernaryExpression condition BinaryOperation operator >>>_ter ^ ^ operandl MemberReference member a_ter ^ ^ ^ ^ operandr MemberReference member b_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member b_ter ^ ^ ^ ^ if_false TernaryExpression condition MethodInvocation qualifier Float_ter ^ ^ arguments BinaryOperation operator +_ter ^ ^ operandl MemberReference member a_ter ^ ^ ^ ^ operandr MemberReference member b_ter ^ ^ ^ ^ ^ ^ member isNaN_ter ^ ^ ^ ^ if_true MemberReference qualifier Float_ter ^ ^ member NaN_ter ^ ^ ^ ^ if_false MemberReference member b_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return ((a >>> b))?b:(Float.isNaN((a + b)))?Float.NaN:b;
ReturnStatement expression TernaryExpression condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member a_ter ^ ^ ^ ^ operandr MemberReference member b_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member b_ter ^ ^ ^ ^ if_false TernaryExpression condition MethodInvocation qualifier Float_ter ^ ^ arguments BinaryOperation operator +_ter ^ ^ operandl MemberReference member a_ter ^ ^ ^ ^ operandr MemberReference member b_ter ^ ^ ^ ^ ^ ^ member isNaN_ter ^ ^ ^ ^ if_true MemberReference qualifier Float_ter ^ ^ member NaN_ter ^ ^ ^ ^ if_false MemberReference member b_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return ((a == b))?b:(Float.isNaN((a + b)))?Float.NaN:b;
ReturnStatement expression TernaryExpression condition BinaryOperation operator >>_ter ^ ^ operandl MemberReference member a_ter ^ ^ ^ ^ operandr MemberReference member b_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member b_ter ^ ^ ^ ^ if_false TernaryExpression condition MethodInvocation qualifier Float_ter ^ ^ arguments BinaryOperation operator +_ter ^ ^ operandl MemberReference member a_ter ^ ^ ^ ^ operandr MemberReference member b_ter ^ ^ ^ ^ ^ ^ member isNaN_ter ^ ^ ^ ^ if_true MemberReference qualifier Float_ter ^ ^ member NaN_ter ^ ^ ^ ^ if_false MemberReference member b_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return ((a >> b))?b:(Float.isNaN((a + b)))?Float.NaN:b;
ReturnStatement expression TernaryExpression condition BinaryOperation operator -_ter ^ ^ operandl MemberReference member a_ter ^ ^ ^ ^ operandr MemberReference member b_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member b_ter ^ ^ ^ ^ if_false TernaryExpression condition MethodInvocation qualifier Float_ter ^ ^ arguments BinaryOperation operator +_ter ^ ^ operandl MemberReference member a_ter ^ ^ ^ ^ operandr MemberReference member b_ter ^ ^ ^ ^ ^ ^ member isNaN_ter ^ ^ ^ ^ if_true MemberReference qualifier Float_ter ^ ^ member NaN_ter ^ ^ ^ ^ if_false MemberReference member b_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return ((a - b))?b:(Float.isNaN((a + b)))?Float.NaN:b;
ReturnStatement expression TernaryExpression condition BinaryOperation operator <=_ter ^ ^ operandl MemberReference member a_ter ^ ^ ^ ^ operandr MemberReference member b_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member b_ter ^ ^ ^ ^ if_false TernaryExpression condition MethodInvocation qualifier Float_ter ^ ^ arguments BinaryOperation operator +_ter ^ ^ operandl MemberReference member a_ter ^ ^ ^ ^ operandr MemberReference member b_ter ^ ^ ^ ^ ^ ^ member isNaN_ter ^ ^ ^ ^ if_true MemberReference member a_ter ^ ^ ^ ^ if_false MemberReference member b_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return ((a <= b))?b:(Float.isNaN((a + b)))?a:b;
ReturnStatement expression TernaryExpression condition BinaryOperation operator <=_ter ^ ^ operandl MemberReference member a_ter ^ ^ ^ ^ operandr MemberReference member b_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member b_ter ^ ^ ^ ^ if_false TernaryExpression condition MethodInvocation qualifier Float_ter ^ ^ arguments BinaryOperation operator >_ter ^ ^ operandl MemberReference member a_ter ^ ^ ^ ^ operandr MemberReference member b_ter ^ ^ ^ ^ ^ ^ member isNaN_ter ^ ^ ^ ^ if_true MemberReference qualifier Float_ter ^ ^ member NaN_ter ^ ^ ^ ^ if_false MemberReference member b_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return ((a <= b))?b:(Float.isNaN((a > b)))?Float.NaN:b;
ReturnStatement expression TernaryExpression condition BinaryOperation operator <=_ter ^ ^ operandl MemberReference member a_ter ^ ^ ^ ^ operandr MemberReference member b_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member b_ter ^ ^ ^ ^ if_false TernaryExpression condition MethodInvocation qualifier Float_ter ^ ^ arguments BinaryOperation operator +_ter ^ ^ operandl MemberReference member a_ter ^ ^ ^ ^ operandr MemberReference member b_ter ^ ^ ^ ^ ^ ^ member isNaN_ter ^ ^ ^ ^ if_true MemberReference member b_ter ^ ^ ^ ^ if_false MemberReference member b_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return ((a <= b))?b:(Float.isNaN((a + b)))?b:b;
ReturnStatement expression TernaryExpression condition BinaryOperation operator <=_ter ^ ^ operandl MemberReference member a_ter ^ ^ ^ ^ operandr MemberReference member b_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member b_ter ^ ^ ^ ^ if_false TernaryExpression condition MethodInvocation qualifier Float_ter ^ ^ arguments BinaryOperation operator +_ter ^ ^ operandl MemberReference member a_ter ^ ^ ^ ^ operandr MemberReference member b_ter ^ ^ ^ ^ ^ ^ member put_ter ^ ^ ^ ^ if_true MemberReference qualifier Float_ter ^ ^ member NaN_ter ^ ^ ^ ^ if_false MemberReference member b_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return ((a <= b))?b:(Float.put((a + b)))?Float.NaN:b;
ReturnStatement expression TernaryExpression condition BinaryOperation operator <=_ter ^ ^ operandl MemberReference member a_ter ^ ^ ^ ^ operandr MemberReference member b_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member b_ter ^ ^ ^ ^ if_false TernaryExpression condition MethodInvocation qualifier Float_ter ^ ^ arguments BinaryOperation operator +_ter ^ ^ operandl MemberReference member a_ter ^ ^ ^ ^ operandr MemberReference member b_ter ^ ^ ^ ^ ^ ^ member isNaN_ter ^ ^ ^ ^ if_true MemberReference member NaN_ter ^ ^ ^ ^ if_false MemberReference member b_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return ((a <= b))?b:(Float.isNaN((a + b)))?NaN:b;
ReturnStatement expression TernaryExpression condition BinaryOperation operator <=_ter ^ ^ operandl MemberReference member a_ter ^ ^ ^ ^ operandr MemberReference member b_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member b_ter ^ ^ ^ ^ if_false TernaryExpression condition MethodInvocation qualifier Float_ter ^ ^ arguments BinaryOperation operator <_ter ^ ^ operandl MemberReference member a_ter ^ ^ ^ ^ operandr MemberReference member b_ter ^ ^ ^ ^ ^ ^ member isNaN_ter ^ ^ ^ ^ if_true MemberReference qualifier Float_ter ^ ^ member NaN_ter ^ ^ ^ ^ if_false MemberReference member b_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return ((a <= b))?b:(Float.isNaN((a < b)))?Float.NaN:b;
StatementExpression expression MethodInvocation member buildSinCosTables_ter ^ ^ ^ ^ ^ 
buildSinCosTables();

ReturnStatement expression TernaryExpression condition BinaryOperation operator <=_ter ^ ^ operandl MemberReference member a_ter ^ ^ ^ ^ operandr MemberReference member b_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member b_ter ^ ^ ^ ^ if_false TernaryExpression condition MethodInvocation qualifier Float_ter ^ ^ arguments BinaryOperation operator ==_ter ^ ^ operandl MemberReference member a_ter ^ ^ ^ ^ operandr MemberReference member b_ter ^ ^ ^ ^ ^ ^ member isNaN_ter ^ ^ ^ ^ if_true MemberReference qualifier Float_ter ^ ^ member NaN_ter ^ ^ ^ ^ if_false MemberReference member b_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return ((a <= b))?b:(Float.isNaN((a == b)))?Float.NaN:b;
ReturnStatement expression TernaryExpression condition BinaryOperation operator <=_ter ^ ^ operandl MemberReference member a_ter ^ ^ ^ ^ operandr MemberReference member b_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member b_ter ^ ^ ^ ^ if_false TernaryExpression condition MethodInvocation qualifier Float_ter ^ ^ arguments BinaryOperation operator +_ter ^ ^ operandl MemberReference member a_ter ^ ^ ^ ^ operandr MemberReference member b_ter ^ ^ ^ ^ ^ ^ member get_ter ^ ^ ^ ^ if_true MemberReference qualifier Float_ter ^ ^ member NaN_ter ^ ^ ^ ^ if_false MemberReference member b_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return ((a <= b))?b:(Float.get((a + b)))?Float.NaN:b;
ReturnStatement expression TernaryExpression condition BinaryOperation operator &_ter ^ ^ operandl MemberReference member a_ter ^ ^ ^ ^ operandr MemberReference member b_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member b_ter ^ ^ ^ ^ if_false TernaryExpression condition MethodInvocation qualifier Float_ter ^ ^ arguments BinaryOperation operator +_ter ^ ^ operandl MemberReference member a_ter ^ ^ ^ ^ operandr MemberReference member b_ter ^ ^ ^ ^ ^ ^ member isNaN_ter ^ ^ ^ ^ if_true MemberReference qualifier Float_ter ^ ^ member NaN_ter ^ ^ ^ ^ if_false MemberReference member b_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return ((a & b))?b:(Float.isNaN((a + b)))?Float.NaN:b;
ReturnStatement expression TernaryExpression condition BinaryOperation operator <=_ter ^ ^ operandl MemberReference member a_ter ^ ^ ^ ^ operandr MemberReference member b_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member b_ter ^ ^ ^ ^ if_false TernaryExpression condition MethodInvocation qualifier Float_ter ^ ^ arguments BinaryOperation operator +_ter ^ ^ operandl MemberReference member a_ter ^ ^ ^ ^ operandr MemberReference member b_ter ^ ^ ^ ^ ^ ^ member a_ter ^ ^ ^ ^ if_true MemberReference qualifier Float_ter ^ ^ member NaN_ter ^ ^ ^ ^ if_false MemberReference member b_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return ((a <= b))?b:(Float.a((a + b)))?Float.NaN:b;
ReturnStatement expression TernaryExpression condition BinaryOperation operator <=_ter ^ ^ operandl MemberReference member a_ter ^ ^ ^ ^ operandr MemberReference member b_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member b_ter ^ ^ ^ ^ if_false TernaryExpression condition MethodInvocation qualifier Float_ter ^ ^ arguments BinaryOperation operator +_ter ^ ^ operandl MemberReference member b_ter ^ ^ ^ ^ operandr MemberReference member b_ter ^ ^ ^ ^ ^ ^ member isNaN_ter ^ ^ ^ ^ if_true MemberReference qualifier Float_ter ^ ^ member NaN_ter ^ ^ ^ ^ if_false MemberReference member b_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return ((a <= b))?b:(Float.isNaN((b + b)))?Float.NaN:b;
ReturnStatement expression TernaryExpression condition BinaryOperation operator <=_ter ^ ^ operandl MemberReference member a_ter ^ ^ ^ ^ operandr MemberReference member b_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member b_ter ^ ^ ^ ^ if_false TernaryExpression condition MethodInvocation qualifier Float_ter ^ ^ arguments BinaryOperation operator +_ter ^ ^ operandl MemberReference member a_ter ^ ^ ^ ^ operandr MemberReference member b_ter ^ ^ ^ ^ ^ ^ member i_ter ^ ^ ^ ^ if_true MemberReference qualifier Float_ter ^ ^ member NaN_ter ^ ^ ^ ^ if_false MemberReference member b_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return ((a <= b))?b:(Float.i((a + b)))?Float.NaN:b;
ReturnStatement expression TernaryExpression condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member a_ter ^ ^ ^ ^ operandr MemberReference member b_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member b_ter ^ ^ ^ ^ if_false TernaryExpression condition MethodInvocation qualifier Float_ter ^ ^ arguments BinaryOperation operator +_ter ^ ^ operandl MemberReference member a_ter ^ ^ ^ ^ operandr MemberReference member b_ter ^ ^ ^ ^ ^ ^ member isNaN_ter ^ ^ ^ ^ if_true MemberReference qualifier Float_ter ^ ^ member NaN_ter ^ ^ ^ ^ if_false MemberReference member b_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return ((a != b))?b:(Float.isNaN((a + b)))?Float.NaN:b;
ReturnStatement expression TernaryExpression condition BinaryOperation operator <=_ter ^ ^ operandl MemberReference member a_ter ^ ^ ^ ^ operandr MemberReference member b_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member b_ter ^ ^ ^ ^ if_false MemberReference member a_ter ^ ^ ^ ^ ^ ^ ^ 
return ((a <= b))?b:a;
ReturnStatement expression TernaryExpression condition BinaryOperation operator <=_ter ^ ^ operandl MemberReference member a_ter ^ ^ ^ ^ operandr MemberReference member b_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member b_ter ^ ^ ^ ^ if_false TernaryExpression condition MethodInvocation qualifier Float_ter ^ ^ arguments BinaryOperation operator -_ter ^ ^ operandl MemberReference member a_ter ^ ^ ^ ^ operandr MemberReference member b_ter ^ ^ ^ ^ ^ ^ member isNaN_ter ^ ^ ^ ^ if_true MemberReference qualifier Float_ter ^ ^ member NaN_ter ^ ^ ^ ^ if_false MemberReference member b_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return ((a <= b))?b:(Float.isNaN((a - b)))?Float.NaN:b;
ReturnStatement expression TernaryExpression condition BinaryOperation operator <=_ter ^ ^ operandl MemberReference member a_ter ^ ^ ^ ^ operandr MemberReference member b_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member b_ter ^ ^ ^ ^ if_false TernaryExpression condition MethodInvocation qualifier Float_ter ^ ^ arguments BinaryOperation operator +_ter ^ ^ operandl MemberReference member a_ter ^ ^ ^ ^ operandr MemberReference member b_ter ^ ^ ^ ^ ^ ^ member isNaN_ter ^ ^ ^ ^ if_true MemberReference member par2 ^ ^ ^ ^ if_false MemberReference member b_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return ((a <= b))?b:(Float.isNaN((a + b)))?:b;

ReturnStatement expression TernaryExpression condition BinaryOperation operator <=_ter ^ ^ operandl MemberReference member a_ter ^ ^ ^ ^ operandr MemberReference member b_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member a_ter ^ ^ ^ ^ if_false TernaryExpression condition MethodInvocation qualifier Float_ter ^ ^ arguments BinaryOperation operator +_ter ^ ^ operandl MemberReference member a_ter ^ ^ ^ ^ operandr MemberReference member b_ter ^ ^ ^ ^ ^ ^ member isNaN_ter ^ ^ ^ ^ if_true MemberReference qualifier Float_ter ^ ^ member NaN_ter ^ ^ ^ ^ if_false MemberReference member b_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return ((a <= b))?a:(Float.isNaN((a + b)))?Float.NaN:b;
ReturnStatement expression TernaryExpression condition BinaryOperation operator <=_ter ^ ^ operandl MemberReference member a_ter ^ ^ ^ ^ operandr MemberReference member b_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member b_ter ^ ^ ^ ^ if_false MemberReference member b_ter ^ ^ ^ ^ ^ ^ ^ 
return ((a <= b))?b:b;
ReturnStatement expression TernaryExpression condition BinaryOperation operator <=_ter ^ ^ operandl MemberReference member a_ter ^ ^ ^ ^ operandr MemberReference member b_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member b_ter ^ ^ ^ ^ if_false TernaryExpression condition MethodInvocation qualifier Float_ter ^ ^ arguments BinaryOperation operator +_ter ^ ^ operandl MemberReference member a_ter ^ ^ ^ ^ operandr MemberReference member b_ter ^ ^ ^ ^ ^ ^ member isNaN_ter ^ ^ ^ ^ if_true MemberReference qualifier a_ter ^ ^ member NaN_ter ^ ^ ^ ^ if_false MemberReference member b_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return ((a <= b))?b:(Float.isNaN((a + b)))?a.NaN:b;
ReturnStatement expression TernaryExpression condition BinaryOperation operator <=_ter ^ ^ operandl MemberReference member a_ter ^ ^ ^ ^ operandr MemberReference member b_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member b_ter ^ ^ ^ ^ if_false TernaryExpression condition MethodInvocation qualifier Float_ter ^ ^ arguments BinaryOperation operator +_ter ^ ^ operandl MemberReference member a_ter ^ ^ ^ ^ operandr MemberReference member a_ter ^ ^ ^ ^ ^ ^ member isNaN_ter ^ ^ ^ ^ if_true MemberReference qualifier Float_ter ^ ^ member NaN_ter ^ ^ ^ ^ if_false MemberReference member b_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return ((a <= b))?b:(Float.isNaN((a + a)))?Float.NaN:b;
ReturnStatement expression TernaryExpression condition BinaryOperation operator <=_ter ^ ^ operandl MemberReference member a_ter ^ ^ ^ ^ operandr MemberReference member b_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member b_ter ^ ^ ^ ^ if_false TernaryExpression condition MethodInvocation qualifier Float_ter ^ ^ arguments BinaryOperation operator >>_ter ^ ^ operandl MemberReference member a_ter ^ ^ ^ ^ operandr MemberReference member b_ter ^ ^ ^ ^ ^ ^ member isNaN_ter ^ ^ ^ ^ if_true MemberReference qualifier Float_ter ^ ^ member NaN_ter ^ ^ ^ ^ if_false MemberReference member b_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return ((a <= b))?b:(Float.isNaN((a >> b)))?Float.NaN:b;
ReturnStatement expression TernaryExpression condition BinaryOperation operator <=_ter ^ ^ operandl MemberReference member a_ter ^ ^ ^ ^ operandr MemberReference member b_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member b_ter ^ ^ ^ ^ if_false TernaryExpression condition MethodInvocation qualifier Float_ter ^ ^ arguments BinaryOperation operator >>>_ter ^ ^ operandl MemberReference member a_ter ^ ^ ^ ^ operandr MemberReference member b_ter ^ ^ ^ ^ ^ ^ member isNaN_ter ^ ^ ^ ^ if_true MemberReference qualifier Float_ter ^ ^ member NaN_ter ^ ^ ^ ^ if_false MemberReference member b_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return ((a <= b))?b:(Float.isNaN((a >>> b)))?Float.NaN:b;
ReturnStatement expression TernaryExpression condition BinaryOperation operator <=_ter ^ ^ operandl MemberReference member a_ter ^ ^ ^ ^ operandr MemberReference member b_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member b_ter ^ ^ ^ ^ if_false TernaryExpression condition MethodInvocation qualifier Float_ter ^ ^ arguments BinaryOperation operator !=_ter ^ ^ operandl MemberReference member a_ter ^ ^ ^ ^ operandr MemberReference member b_ter ^ ^ ^ ^ ^ ^ member isNaN_ter ^ ^ ^ ^ if_true MemberReference qualifier Float_ter ^ ^ member NaN_ter ^ ^ ^ ^ if_false MemberReference member b_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return ((a <= b))?b:(Float.isNaN((a != b)))?Float.NaN:b;
ReturnStatement expression TernaryExpression condition BinaryOperation operator <=_ter ^ ^ operandl MemberReference member a_ter ^ ^ ^ ^ operandr MemberReference member b_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member b_ter ^ ^ ^ ^ if_false TernaryExpression condition MethodInvocation qualifier Math_ter ^ ^ arguments BinaryOperation operator +_ter ^ ^ operandl MemberReference member a_ter ^ ^ ^ ^ operandr MemberReference member b_ter ^ ^ ^ ^ ^ ^ member isNaN_ter ^ ^ ^ ^ if_true MemberReference qualifier Float_ter ^ ^ member NaN_ter ^ ^ ^ ^ if_false MemberReference member b_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return ((a <= b))?b:(Math.isNaN((a + b)))?Float.NaN:b;
ReturnStatement expression TernaryExpression condition BinaryOperation operator <=_ter ^ ^ operandl MemberReference member a_ter ^ ^ ^ ^ operandr MemberReference member b_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member b_ter ^ ^ ^ ^ if_false TernaryExpression condition MethodInvocation qualifier Float_ter ^ ^ arguments BinaryOperation operator +_ter ^ ^ operandl MemberReference member a_ter ^ ^ ^ ^ operandr MemberReference member b_ter ^ ^ ^ ^ ^ ^ member isNaN_ter ^ ^ ^ ^ if_true MemberReference qualifier Float_ter ^ ^ member a_ter ^ ^ ^ ^ if_false MemberReference member b_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return ((a <= b))?b:(Float.isNaN((a + b)))?Float.a:b;
ReturnStatement expression BinaryOperation operator +_ter ^ ^ operandl MemberReference member a_ter ^ ^ ^ ^ operandr MemberReference member b_ter ^ ^ ^ ^ ^ ^ ^ 
return (a + b);
ReturnStatement expression BinaryOperation operator <=_ter ^ ^ operandl MemberReference member a_ter ^ ^ ^ ^ operandr MemberReference member b_ter ^ ^ ^ ^ ^ ^ ^ 
return (a <= b);
IfStatement condition BinaryOperation operator +_ter ^ ^ operandl MemberReference member a_ter ^ ^ ^ ^ operandr MemberReference member b_ter ^ ^ ^ ^ ^ ^ ^ 
if((a + b)){

ReturnStatement expression TernaryExpression condition BinaryOperation operator <=_ter ^ ^ operandl MemberReference member a_ter ^ ^ ^ ^ operandr MemberReference member b_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member b_ter ^ ^ ^ ^ if_false MethodInvocation qualifier Float_ter ^ ^ arguments BinaryOperation operator +_ter ^ ^ operandl MemberReference member a_ter ^ ^ ^ ^ operandr MemberReference member b_ter ^ ^ ^ ^ ^ ^ member isNaN_ter ^ ^ ^ ^ ^ ^ ^ 
return ((a <= b))?b:Float.isNaN((a + b));
ReturnStatement expression TernaryExpression condition BinaryOperation operator <=_ter ^ ^ operandl MemberReference member a_ter ^ ^ ^ ^ operandr MemberReference member b_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member b_ter ^ ^ ^ ^ if_false TernaryExpression condition MethodInvocation qualifier a_ter ^ ^ arguments BinaryOperation operator +_ter ^ ^ operandl MemberReference member a_ter ^ ^ ^ ^ operandr MemberReference member b_ter ^ ^ ^ ^ ^ ^ member isNaN_ter ^ ^ ^ ^ if_true MemberReference qualifier Float_ter ^ ^ member NaN_ter ^ ^ ^ ^ if_false MemberReference member b_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return ((a <= b))?b:(a.isNaN((a + b)))?Float.NaN:b;
StatementExpression expression SuperMethodInvocation member max_ter ^ ^ ^ ^ ^ 
super.max();

stderr: 