stdout: LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name nameNode_ter ^ ^ initializer MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MethodInvocation qualifier compiler_ter ^ ^ member getCodingConvention_ter ^ ^ ^ MemberReference member alias_ter ^ ^ ^ MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ MethodInvocation qualifier refName_ter ^ ^ member fullName_ter ^ ^ ^ ^ member newName_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node nameNode = NodeUtil.newName(compiler.getCodingConvention(), alias, gramps.getFirstChild(), refName.fullName());

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name nameNode_ter ^ ^ initializer MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MethodInvocation qualifier compiler_ter ^ ^ member getCodingConvention_ter ^ ^ ^ MemberReference member alias_ter ^ ^ ^ MethodInvocation qualifier gramps_ter ^ ^ member getLastChild_ter ^ ^ ^ MethodInvocation qualifier refName_ter ^ ^ member fullName_ter ^ ^ ^ ^ member newName_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node nameNode = NodeUtil.newName(compiler.getCodingConvention(), alias, gramps.getLastChild(), refName.fullName());

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name nameNode_ter ^ ^ initializer MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MethodInvocation qualifier compiler_ter ^ ^ member getCodingConvention_ter ^ ^ ^ MemberReference member alias_ter ^ ^ ^ MethodInvocation qualifier gramps_ter ^ ^ member getNext_ter ^ ^ ^ MethodInvocation qualifier refName_ter ^ ^ member fullName_ter ^ ^ ^ ^ member newName_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node nameNode = NodeUtil.newName(compiler.getCodingConvention(), alias, gramps.getNext(), refName.fullName());

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name nameNode_ter ^ ^ initializer MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MethodInvocation qualifier compiler_ter ^ ^ member getCodingConvention_ter ^ ^ ^ MemberReference member alias_ter ^ ^ ^ MethodInvocation qualifier gramps_ter ^ ^ member getLastSibling_ter ^ ^ ^ MethodInvocation qualifier refName_ter ^ ^ member fullName_ter ^ ^ ^ ^ member newName_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node nameNode = NodeUtil.newName(compiler.getCodingConvention(), alias, gramps.getLastSibling(), refName.fullName());

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name nameNode_ter ^ ^ initializer MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MethodInvocation qualifier compiler_ter ^ ^ member getCodingConvention_ter ^ ^ ^ MemberReference member alias_ter ^ ^ ^ MethodInvocation qualifier gramps_ter ^ ^ member getParent_ter ^ ^ ^ MethodInvocation qualifier refName_ter ^ ^ member fullName_ter ^ ^ ^ ^ member newName_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node nameNode = NodeUtil.newName(compiler.getCodingConvention(), alias, gramps.getParent(), refName.fullName());

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name nameNode_ter ^ ^ initializer MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MethodInvocation qualifier compiler_ter ^ ^ member getCodingConvention_ter ^ ^ ^ MemberReference member alias_ter ^ ^ ^ MethodInvocation qualifier gramps_ter ^ ^ member detachFromParent_ter ^ ^ ^ MethodInvocation qualifier refName_ter ^ ^ member fullName_ter ^ ^ ^ ^ member newName_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node nameNode = NodeUtil.newName(compiler.getCodingConvention(), alias, gramps.detachFromParent(), refName.fullName());

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name nameNode_ter ^ ^ initializer MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MethodInvocation qualifier compiler_ter ^ ^ member getCodingConvention_ter ^ ^ ^ MemberReference member alias_ter ^ ^ ^ MethodInvocation qualifier gramps_ter ^ ^ member removeFirstChild_ter ^ ^ ^ MethodInvocation qualifier refName_ter ^ ^ member fullName_ter ^ ^ ^ ^ member newName_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node nameNode = NodeUtil.newName(compiler.getCodingConvention(), alias, gramps.removeFirstChild(), refName.fullName());

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name nameNode_ter ^ ^ initializer MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MethodInvocation qualifier compiler_ter ^ ^ member getCodingConvention_ter ^ ^ ^ MemberReference member alias_ter ^ ^ ^ MethodInvocation qualifier gramps_ter ^ ^ member removeChildren_ter ^ ^ ^ MethodInvocation qualifier refName_ter ^ ^ member fullName_ter ^ ^ ^ ^ member newName_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node nameNode = NodeUtil.newName(compiler.getCodingConvention(), alias, gramps.removeChildren(), refName.fullName());

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name nameNode_ter ^ ^ initializer MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MethodInvocation qualifier compiler_ter ^ ^ member getCodingConvention_ter ^ ^ ^ MemberReference member alias_ter ^ ^ ^ MethodInvocation qualifier gramps_ter ^ ^ member cloneNode_ter ^ ^ ^ MethodInvocation qualifier refName_ter ^ ^ member fullName_ter ^ ^ ^ ^ member newName_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node nameNode = NodeUtil.newName(compiler.getCodingConvention(), alias, gramps.cloneNode(), refName.fullName());

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name nameNode_ter ^ ^ initializer MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MethodInvocation qualifier compiler_ter ^ ^ member getCodingConvention_ter ^ ^ ^ MemberReference member alias_ter ^ ^ ^ MethodInvocation qualifier gramps_ter ^ ^ member cloneTree_ter ^ ^ ^ MethodInvocation qualifier refName_ter ^ ^ member fullName_ter ^ ^ ^ ^ member newName_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node nameNode = NodeUtil.newName(compiler.getCodingConvention(), alias, gramps.cloneTree(), refName.fullName());

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name nameNode_ter ^ ^ initializer MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MethodInvocation qualifier compiler_ter ^ ^ member getName_ter ^ ^ ^ MemberReference member alias_ter ^ ^ ^ MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ MethodInvocation qualifier refName_ter ^ ^ member fullName_ter ^ ^ ^ ^ member newName_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node nameNode = NodeUtil.newName(compiler.getName(), alias, gramps.getFirstChild(), refName.fullName());

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name nameNode_ter ^ ^ initializer MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MethodInvocation qualifier compiler_ter ^ ^ member getLastChild_ter ^ ^ ^ MemberReference member alias_ter ^ ^ ^ MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ MethodInvocation qualifier refName_ter ^ ^ member fullName_ter ^ ^ ^ ^ member newName_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node nameNode = NodeUtil.newName(compiler.getLastChild(), alias, gramps.getFirstChild(), refName.fullName());

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name nameNode_ter ^ ^ initializer MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MethodInvocation qualifier compiler_ter ^ ^ member getTwin_ter ^ ^ ^ MemberReference member alias_ter ^ ^ ^ MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ MethodInvocation qualifier refName_ter ^ ^ member fullName_ter ^ ^ ^ ^ member newName_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node nameNode = NodeUtil.newName(compiler.getTwin(), alias, gramps.getFirstChild(), refName.fullName());

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name nameNode_ter ^ ^ initializer MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MethodInvocation qualifier compiler_ter ^ ^ member getCodingConvention_ter ^ ^ ^ MemberReference member alias_ter ^ ^ ^ MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ MethodInvocation qualifier refName_ter ^ ^ member getName_ter ^ ^ ^ ^ member newName_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node nameNode = NodeUtil.newName(compiler.getCodingConvention(), alias, gramps.getFirstChild(), refName.getName());

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name nameNode_ter ^ ^ initializer MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MethodInvocation qualifier compiler_ter ^ ^ member getCodingConvention_ter ^ ^ ^ MemberReference member alias_ter ^ ^ ^ MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ MethodInvocation qualifier refName_ter ^ ^ member getLastChild_ter ^ ^ ^ ^ member newName_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node nameNode = NodeUtil.newName(compiler.getCodingConvention(), alias, gramps.getFirstChild(), refName.getLastChild());

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name nameNode_ter ^ ^ initializer MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MethodInvocation qualifier compiler_ter ^ ^ member getType_ter ^ ^ ^ MemberReference member alias_ter ^ ^ ^ MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ MethodInvocation qualifier refName_ter ^ ^ member fullName_ter ^ ^ ^ ^ member newName_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node nameNode = NodeUtil.newName(compiler.getType(), alias, gramps.getFirstChild(), refName.fullName());

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name nameNode_ter ^ ^ initializer MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MethodInvocation qualifier compiler_ter ^ ^ member getCodingConvention_ter ^ ^ ^ MemberReference member alias_ter ^ ^ ^ MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ MethodInvocation qualifier refName_ter ^ ^ member getTwin_ter ^ ^ ^ ^ member newName_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node nameNode = NodeUtil.newName(compiler.getCodingConvention(), alias, gramps.getFirstChild(), refName.getTwin());

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name nameNode_ter ^ ^ initializer MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MethodInvocation qualifier compiler_ter ^ ^ member getParent_ter ^ ^ ^ MemberReference member alias_ter ^ ^ ^ MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ MethodInvocation qualifier refName_ter ^ ^ member fullName_ter ^ ^ ^ ^ member newName_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node nameNode = NodeUtil.newName(compiler.getParent(), alias, gramps.getFirstChild(), refName.fullName());

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name nameNode_ter ^ ^ initializer MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MethodInvocation qualifier compiler_ter ^ ^ member getCodingConvention_ter ^ ^ ^ MemberReference member alias_ter ^ ^ ^ MethodInvocation qualifier gramps_ter ^ ^ member getName_ter ^ ^ ^ MethodInvocation qualifier refName_ter ^ ^ member fullName_ter ^ ^ ^ ^ member newName_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node nameNode = NodeUtil.newName(compiler.getCodingConvention(), alias, gramps.getName(), refName.fullName());

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name nameNode_ter ^ ^ initializer MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MethodInvocation qualifier compiler_ter ^ ^ member getCodingConvention_ter ^ ^ ^ MemberReference member alias_ter ^ ^ ^ MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ MethodInvocation qualifier refName_ter ^ ^ member getType_ter ^ ^ ^ ^ member newName_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node nameNode = NodeUtil.newName(compiler.getCodingConvention(), alias, gramps.getFirstChild(), refName.getType());

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name nameNode_ter ^ ^ initializer MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MethodInvocation qualifier compiler_ter ^ ^ member getCodingConvention_ter ^ ^ ^ MemberReference member alias_ter ^ ^ ^ MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ MethodInvocation qualifier refName_ter ^ ^ member getParent_ter ^ ^ ^ ^ member newName_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node nameNode = NodeUtil.newName(compiler.getCodingConvention(), alias, gramps.getFirstChild(), refName.getParent());

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent != null)){

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name nameNode_ter ^ ^ initializer MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MethodInvocation qualifier compiler_ter ^ ^ member getCodingConvention_ter ^ ^ ^ MemberReference member alias_ter ^ ^ ^ MethodInvocation qualifier gramps_ter ^ ^ member getTwin_ter ^ ^ ^ MethodInvocation qualifier refName_ter ^ ^ member fullName_ter ^ ^ ^ ^ member newName_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node nameNode = NodeUtil.newName(compiler.getCodingConvention(), alias, gramps.getTwin(), refName.fullName());

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name nameNode_ter ^ ^ initializer MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MethodInvocation qualifier compiler_ter ^ ^ member getCodingConvention_ter ^ ^ ^ MemberReference member parent_ter ^ ^ ^ MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ MethodInvocation qualifier refName_ter ^ ^ member fullName_ter ^ ^ ^ ^ member newName_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node nameNode = NodeUtil.newName(compiler.getCodingConvention(), parent, gramps.getFirstChild(), refName.fullName());

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name nameNode_ter ^ ^ initializer MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MethodInvocation qualifier compiler_ter ^ ^ member getCodingConvention_ter ^ ^ ^ MemberReference member alias_ter ^ ^ ^ MethodInvocation qualifier gramps_ter ^ ^ member getType_ter ^ ^ ^ MethodInvocation qualifier refName_ter ^ ^ member fullName_ter ^ ^ ^ ^ member newName_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node nameNode = NodeUtil.newName(compiler.getCodingConvention(), alias, gramps.getType(), refName.fullName());

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name nameNode_ter ^ ^ initializer MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MethodInvocation qualifier compiler_ter ^ ^ member getCodingConvention_ter ^ ^ ^ MemberReference member alias_ter ^ ^ ^ MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ MethodInvocation qualifier rvalue_ter ^ ^ member fullName_ter ^ ^ ^ ^ member newName_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node nameNode = NodeUtil.newName(compiler.getCodingConvention(), alias, gramps.getFirstChild(), rvalue.fullName());

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name nameNode_ter ^ ^ initializer MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MethodInvocation qualifier compiler_ter ^ ^ member cloneTree_ter ^ ^ ^ MemberReference member alias_ter ^ ^ ^ MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ MethodInvocation qualifier refName_ter ^ ^ member fullName_ter ^ ^ ^ ^ member newName_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node nameNode = NodeUtil.newName(compiler.cloneTree(), alias, gramps.getFirstChild(), refName.fullName());

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name nameNode_ter ^ ^ initializer MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MethodInvocation qualifier compiler_ter ^ ^ member getCodingConvention_ter ^ ^ ^ MemberReference member greatGreatGramps_ter ^ ^ ^ MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ MethodInvocation qualifier refName_ter ^ ^ member fullName_ter ^ ^ ^ ^ member newName_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node nameNode = NodeUtil.newName(compiler.getCodingConvention(), greatGreatGramps, gramps.getFirstChild(), refName.fullName());

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name nameNode_ter ^ ^ initializer MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MemberReference member alias_ter ^ ^ ^ ^ member newName_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node nameNode = NodeUtil.newName(alias);

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member alias_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((alias != null)){

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name nameNode_ter ^ ^ initializer MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MethodInvocation qualifier compiler_ter ^ ^ member getCodingConvention_ter ^ ^ ^ MemberReference member alias_ter ^ ^ ^ MethodInvocation qualifier rvalue_ter ^ ^ member getFirstChild_ter ^ ^ ^ MethodInvocation qualifier refName_ter ^ ^ member fullName_ter ^ ^ ^ ^ member newName_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node nameNode = NodeUtil.newName(compiler.getCodingConvention(), alias, rvalue.getFirstChild(), refName.fullName());

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name nameNode_ter ^ ^ initializer Cast type ReferenceType name Node_ter ^ ^ ^ ^ expression MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MethodInvocation qualifier compiler_ter ^ ^ member getCodingConvention_ter ^ ^ ^ MemberReference member alias_ter ^ ^ ^ MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ MethodInvocation qualifier refName_ter ^ ^ member fullName_ter ^ ^ ^ ^ member newName_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
arg 
arg 
Node nameNode = (Node)NodeUtil.newName(compiler.getCodingConvention(), alias, gramps.getFirstChild(), refName.fullName());

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name nameNode_ter ^ ^ initializer MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MethodInvocation qualifier compiler_ter ^ ^ member getCodingConvention_ter ^ ^ ^ MemberReference member refName_ter ^ ^ ^ MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ MethodInvocation qualifier refName_ter ^ ^ member fullName_ter ^ ^ ^ ^ member newName_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node nameNode = NodeUtil.newName(compiler.getCodingConvention(), refName, gramps.getFirstChild(), refName.fullName());

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name nameNode_ter ^ ^ initializer MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MethodInvocation qualifier compiler_ter ^ ^ member getCodingConvention_ter ^ ^ ^ MemberReference member gramps_ter ^ ^ ^ MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ MethodInvocation qualifier refName_ter ^ ^ member fullName_ter ^ ^ ^ ^ member newName_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node nameNode = NodeUtil.newName(compiler.getCodingConvention(), gramps, gramps.getFirstChild(), refName.fullName());

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name nameNode_ter ^ ^ initializer MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MethodInvocation qualifier compiler_ter ^ ^ member getCodingConvention_ter ^ ^ ^ MemberReference member alias_ter ^ ^ ^ MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ MethodInvocation qualifier alias_ter ^ ^ member fullName_ter ^ ^ ^ ^ member newName_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node nameNode = NodeUtil.newName(compiler.getCodingConvention(), alias, gramps.getFirstChild(), alias.fullName());

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name nameNode_ter ^ ^ initializer MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MethodInvocation qualifier compiler_ter ^ ^ member getCodingConvention_ter ^ ^ ^ MemberReference member alias_ter ^ ^ ^ MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ MethodInvocation qualifier greatGramps_ter ^ ^ member fullName_ter ^ ^ ^ ^ member newName_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node nameNode = NodeUtil.newName(compiler.getCodingConvention(), alias, gramps.getFirstChild(), greatGramps.fullName());

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name nameNode_ter ^ ^ initializer MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MemberReference member alias_ter ^ ^ ^ MethodInvocation qualifier compiler_ter ^ ^ member getCodingConvention_ter ^ ^ ^ ^ member newName_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node nameNode = NodeUtil.newName(alias, compiler.getCodingConvention());

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member gramps_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps != null)){

StatementExpression expression MethodInvocation qualifier parent_ter ^ ^ member detachChildren_ter ^ ^ ^ ^ ^ 
parent.detachChildren();

StatementExpression expression MethodInvocation qualifier parent_ter ^ ^ member setQuotedString_ter ^ ^ ^ ^ ^ 
parent.setQuotedString();

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name nameNode_ter ^ ^ initializer MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MemberReference member alias_ter ^ ^ ^ MethodInvocation qualifier refName_ter ^ ^ member fullName_ter ^ ^ ^ ^ member newName_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node nameNode = NodeUtil.newName(alias, refName.fullName());

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name nameNode_ter ^ ^ initializer MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MethodInvocation qualifier compiler_ter ^ ^ member getCodingConvention_ter ^ ^ ^ MemberReference member greatGramps_ter ^ ^ ^ MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ MethodInvocation qualifier refName_ter ^ ^ member fullName_ter ^ ^ ^ ^ member newName_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node nameNode = NodeUtil.newName(compiler.getCodingConvention(), greatGramps, gramps.getFirstChild(), refName.fullName());

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name nameNode_ter ^ ^ initializer MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MethodInvocation qualifier rvalue_ter ^ ^ member getCodingConvention_ter ^ ^ ^ MemberReference member alias_ter ^ ^ ^ MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ MethodInvocation qualifier refName_ter ^ ^ member fullName_ter ^ ^ ^ ^ member newName_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node nameNode = NodeUtil.newName(rvalue.getCodingConvention(), alias, gramps.getFirstChild(), refName.fullName());

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name nameNode_ter ^ ^ initializer MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MethodInvocation qualifier compiler_ter ^ ^ member getCodingConvention_ter ^ ^ ^ MemberReference member alias_ter ^ ^ ^ MethodInvocation qualifier greatGramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ MethodInvocation qualifier refName_ter ^ ^ member fullName_ter ^ ^ ^ ^ member newName_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node nameNode = NodeUtil.newName(compiler.getCodingConvention(), alias, greatGramps.getFirstChild(), refName.fullName());

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name nameNode_ter ^ ^ initializer MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MethodInvocation qualifier compiler_ter ^ ^ member getCodingConvention_ter ^ ^ ^ MemberReference member rvalue_ter ^ ^ ^ MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ MethodInvocation qualifier refName_ter ^ ^ member fullName_ter ^ ^ ^ ^ member newName_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node nameNode = NodeUtil.newName(compiler.getCodingConvention(), rvalue, gramps.getFirstChild(), refName.fullName());

ReturnStatement_ter ^ 
if (true) { return;
 }

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name nameNode_ter ^ ^ initializer MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MethodInvocation qualifier compiler_ter ^ ^ member getCodingConvention_ter ^ ^ ^ MemberReference member alias_ter ^ ^ ^ MethodInvocation qualifier refName_ter ^ ^ member getFirstChild_ter ^ ^ ^ MethodInvocation qualifier refName_ter ^ ^ member fullName_ter ^ ^ ^ ^ member newName_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node nameNode = NodeUtil.newName(compiler.getCodingConvention(), alias, refName.getFirstChild(), refName.fullName());

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name nameNode_ter ^ ^ initializer MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MethodInvocation qualifier compiler_ter ^ ^ member getCodingConvention_ter ^ ^ ^ MemberReference member alias_ter ^ ^ ^ MethodInvocation qualifier alias_ter ^ ^ member getFirstChild_ter ^ ^ ^ MethodInvocation qualifier refName_ter ^ ^ member fullName_ter ^ ^ ^ ^ member newName_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node nameNode = NodeUtil.newName(compiler.getCodingConvention(), alias, alias.getFirstChild(), refName.fullName());

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name nameNode_ter ^ ^ initializer MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MemberReference member alias_ter ^ ^ ^ MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ member newName_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node nameNode = NodeUtil.newName(alias, gramps.getFirstChild());

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member rvalue_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((rvalue != null)){

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name nameNode_ter ^ ^ initializer MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MethodInvocation qualifier ref.node_ter ^ ^ member getCodingConvention_ter ^ ^ ^ MemberReference member alias_ter ^ ^ ^ MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ MethodInvocation qualifier refName_ter ^ ^ member fullName_ter ^ ^ ^ ^ member newName_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node nameNode = NodeUtil.newName(ref.node.getCodingConvention(), alias, gramps.getFirstChild(), refName.fullName());

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name nameNode_ter ^ ^ initializer MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MemberReference member alias_ter ^ ^ ^ MemberReference member refName_ter ^ ^ ^ ^ member newName_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node nameNode = NodeUtil.newName(alias, refName);

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name nameNode_ter ^ ^ initializer MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MethodInvocation qualifier compiler_ter ^ ^ member getCodingConvention_ter ^ ^ ^ MemberReference member alias_ter ^ ^ ^ MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ MethodInvocation qualifier parent_ter ^ ^ member fullName_ter ^ ^ ^ ^ member newName_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node nameNode = NodeUtil.newName(compiler.getCodingConvention(), alias, gramps.getFirstChild(), parent.fullName());

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name nameNode_ter ^ ^ initializer MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MethodInvocation qualifier compiler_ter ^ ^ member getCodingConvention_ter ^ ^ ^ MemberReference member alias_ter ^ ^ ^ MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ MethodInvocation qualifier ref_ter ^ ^ member fullName_ter ^ ^ ^ ^ member newName_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node nameNode = NodeUtil.newName(compiler.getCodingConvention(), alias, gramps.getFirstChild(), ref.fullName());

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member refName_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((refName != null)){

StatementExpression expression MethodInvocation member checkNamespaces_ter ^ ^ ^ ^ ^ 
checkNamespaces();

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name nameNode_ter ^ ^ initializer MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MethodInvocation qualifier compiler_ter ^ ^ member getCodingConvention_ter ^ ^ ^ MemberReference member alias_ter ^ ^ ^ MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ MethodInvocation qualifier par3 ^ ^ member fullName_ter ^ ^ ^ ^ member newName_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node nameNode = NodeUtil.newName(compiler.getCodingConvention(), alias, gramps.getFirstChild(), .fullName());


LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name nameNode_ter ^ ^ initializer MethodInvocation qualifier NodeUtil_ter ^ ^ arguments MemberReference member alias_ter ^ ^ ^ MethodInvocation qualifier compiler_ter ^ ^ member getCodingConvention_ter ^ ^ ^ MethodInvocation qualifier compiler_ter ^ ^ member getCodingConvention_ter ^ ^ ^ ^ member newName_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node nameNode = NodeUtil.newName(alias, compiler.getCodingConvention(), compiler.getCodingConvention());

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member type_ter ^ ^ ^ ^ operandr MemberReference qualifier Type_ter ^ ^ member FUNCTION_ter ^ ^ ^ ^ ^ ^ ^ 
if((type != Type.FUNCTION)){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member type_ter ^ ^ ^ ^ operandr MemberReference qualifier Type_ter ^ ^ member FUNCTION_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator >=_ter ^ ^ operandl MemberReference member aliasingGets_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((type != Type.FUNCTION) && (aliasingGets >= 0))){
IfStatement condition BinaryOperation operator >_ter ^ ^ operandl MemberReference member aliasingGets_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ 
if((aliasingGets > 0)){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member type_ter ^ ^ ^ ^ operandr MemberReference qualifier Type_ter ^ ^ member FUNCTION_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl MemberReference member aliasingGets_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((type != Type.FUNCTION) && (aliasingGets <= 0))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator >=_ter ^ ^ operandl MemberReference member type_ter ^ ^ ^ ^ operandr MemberReference qualifier Type_ter ^ ^ member FUNCTION_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator >_ter ^ ^ operandl MemberReference member aliasingGets_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((type >= Type.FUNCTION) && (aliasingGets > 0))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member type_ter ^ ^ ^ ^ operandr MemberReference qualifier Type_ter ^ ^ member FUNCTION_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator >_ter ^ ^ operandl MemberReference member aliasingGets_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((type != Type.FUNCTION) && (aliasingGets > 0))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member type_ter ^ ^ ^ ^ operandr MemberReference qualifier Type_ter ^ ^ member FUNCTION_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member aliasingGets_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((type != Type.FUNCTION) && (aliasingGets == 0))){
condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member type_ter ^ ^ ^ ^ operandr MemberReference qualifier Type_ter ^ ^ member FUNCTION_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator >_ter ^ ^ operandl MemberReference member aliasingGets_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((type != Type.FUNCTION) || (aliasingGets > 0))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member type_ter ^ ^ ^ ^ operandr MemberReference qualifier Type_ter ^ ^ member FUNCTION_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member aliasingGets_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((type != Type.FUNCTION) && (aliasingGets != 0))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator <=_ter ^ ^ operandl MemberReference member type_ter ^ ^ ^ ^ operandr MemberReference qualifier Type_ter ^ ^ member FUNCTION_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator >_ter ^ ^ operandl MemberReference member aliasingGets_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((type <= Type.FUNCTION) && (aliasingGets > 0))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member type_ter ^ ^ ^ ^ operandr MemberReference qualifier Type_ter ^ ^ member FUNCTION_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator >_ter ^ ^ operandl MemberReference member aliasingGets_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((type == Type.FUNCTION) && (aliasingGets > 0))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator >_ter ^ ^ operandl MemberReference member type_ter ^ ^ ^ ^ operandr MemberReference qualifier Type_ter ^ ^ member FUNCTION_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator >_ter ^ ^ operandl MemberReference member aliasingGets_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((type > Type.FUNCTION) && (aliasingGets > 0))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member type_ter ^ ^ ^ ^ operandr MemberReference qualifier Type_ter ^ ^ member FUNCTION_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator <_ter ^ ^ operandl MemberReference member aliasingGets_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((type != Type.FUNCTION) && (aliasingGets < 0))){
IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member type_ter ^ ^ ^ ^ operandr MemberReference qualifier Type_ter ^ ^ member OTHER_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member globalSets_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((type == Type.OTHER) || (globalSets != 1))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member isClassOrEnum_ter ^ ^ ^ ^ operandr MemberReference qualifier Type_ter ^ ^ member FUNCTION_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator >_ter ^ ^ operandl MemberReference member aliasingGets_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((isClassOrEnum != Type.FUNCTION) && (aliasingGets > 0))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator <_ter ^ ^ operandl MemberReference member type_ter ^ ^ ^ ^ operandr MemberReference qualifier Type_ter ^ ^ member FUNCTION_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator >_ter ^ ^ operandl MemberReference member aliasingGets_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((type < Type.FUNCTION) && (aliasingGets > 0))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member type_ter ^ ^ ^ ^ operandr MemberReference qualifier Type_ter ^ ^ member FUNCTION_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator >_ter ^ ^ operandl MemberReference member isClassOrEnum_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((type != Type.FUNCTION) && (isClassOrEnum > 0))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member declaration_ter ^ ^ ^ ^ operandr MemberReference qualifier Type_ter ^ ^ member FUNCTION_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator >_ter ^ ^ operandl MemberReference member aliasingGets_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((declaration != Type.FUNCTION) && (aliasingGets > 0))){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member type_ter ^ ^ ^ ^ operandr MemberReference qualifier Type_ter ^ ^ member FUNCTION_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator >_ter ^ ^ operandl MemberReference member aliasingGets_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator >_ter ^ ^ operandl MemberReference member aliasingGets_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((((type != Type.FUNCTION) && (aliasingGets > 0)) && (aliasingGets > 0))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member type_ter ^ ^ ^ ^ operandr MemberReference qualifier parent_ter ^ ^ member FUNCTION_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator >_ter ^ ^ operandl MemberReference member aliasingGets_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((type != parent.FUNCTION) && (aliasingGets > 0))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr MemberReference qualifier Type_ter ^ ^ member FUNCTION_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator >_ter ^ ^ operandl MemberReference member aliasingGets_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((parent != Type.FUNCTION) && (aliasingGets > 0))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member type_ter ^ ^ ^ ^ operandr MemberReference qualifier Type_ter ^ ^ member FUNCTION_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator >_ter ^ ^ operandl MemberReference member declaration_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((type != Type.FUNCTION) && (declaration > 0))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member localSets_ter ^ ^ ^ ^ operandr MemberReference qualifier Type_ter ^ ^ member FUNCTION_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator >_ter ^ ^ operandl MemberReference member aliasingGets_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((localSets != Type.FUNCTION) && (aliasingGets > 0))){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member type_ter ^ ^ ^ ^ operandr MemberReference qualifier Type_ter ^ ^ member FUNCTION_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator >_ter ^ ^ operandl MemberReference member aliasingGets_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((type != Type.FUNCTION) && (aliasingGets > 0))){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member type_ter ^ ^ ^ ^ operandr MemberReference qualifier Type_ter ^ ^ member FUNCTION_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator >_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((type != Type.FUNCTION) && (parent > 0))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member globalSets_ter ^ ^ ^ ^ operandr MemberReference qualifier Type_ter ^ ^ member FUNCTION_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator >_ter ^ ^ operandl MemberReference member aliasingGets_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((globalSets != Type.FUNCTION) && (aliasingGets > 0))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member type_ter ^ ^ ^ ^ operandr MemberReference qualifier Type_ter ^ ^ member FUNCTION_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator >_ter ^ ^ operandl MemberReference member localSets_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((type != Type.FUNCTION) && (localSets > 0))){
IfStatement condition MemberReference member aliasingGets_ter ^ ^ ^ ^ ^ 
if(aliasingGets){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member type_ter ^ ^ ^ ^ operandr MemberReference qualifier Type_ter ^ ^ member FUNCTION_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator >_ter ^ ^ operandl MemberReference member type_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((type != Type.FUNCTION) && (type > 0))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member type_ter ^ ^ ^ ^ operandr MemberReference qualifier declaration_ter ^ ^ member FUNCTION_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator >_ter ^ ^ operandl MemberReference member aliasingGets_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((type != declaration.FUNCTION) && (aliasingGets > 0))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member type_ter ^ ^ ^ ^ operandr MemberReference qualifier Type_ter ^ ^ member FUNCTION_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator >_ter ^ ^ operandl MemberReference member globalSets_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((type != Type.FUNCTION) && (globalSets > 0))){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member type_ter ^ ^ ^ ^ operandr MemberReference qualifier Type_ter ^ ^ member FUNCTION_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member type_ter ^ ^ ^ ^ operandr MemberReference qualifier Type_ter ^ ^ member FUNCTION_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((type != Type.FUNCTION) && (type != Type.FUNCTION))){

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MemberReference member declaration_ter ^ ^ ^ ^ member checkNotNull_ter ^ ^ ^ ^ ^ 
Preconditions.checkNotNull(declaration);

StatementExpression expression MethodInvocation member process_ter ^ ^ ^ ^ ^ 
process();

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member aliasingGets_ter ^ ^ ^ ^ operandr MemberReference qualifier Type_ter ^ ^ member FUNCTION_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator >_ter ^ ^ operandl MemberReference member aliasingGets_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((aliasingGets != Type.FUNCTION) && (aliasingGets > 0))){
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if (true) { return false; }

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member localSets_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ 
if((localSets != 0)){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member type_ter ^ ^ ^ ^ operandr MemberReference member isClassOrEnum_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator >_ter ^ ^ operandl MemberReference member aliasingGets_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((type != isClassOrEnum) && (aliasingGets > 0))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member type_ter ^ ^ ^ ^ operandr MemberReference qualifier Type_ter ^ ^ member FUNCTION_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator >>_ter ^ ^ operandl MemberReference member aliasingGets_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((type != Type.FUNCTION) && (aliasingGets >> 0))){
IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member parent_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((parent != null)){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member type_ter ^ ^ ^ ^ operandr MemberReference qualifier Type_ter ^ ^ member FUNCTION_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator >>>_ter ^ ^ operandl MemberReference member aliasingGets_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((type != Type.FUNCTION) && (aliasingGets >>> 0))){
IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member type_ter ^ ^ ^ ^ operandr MemberReference qualifier Type_ter ^ ^ member OTHER_ter ^ ^ ^ ^ ^ ^ ^ 
if((type == Type.OTHER)){

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member globalSets_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ 
if((globalSets != 1)){

IfStatement condition MemberReference member type_ter ^ ^ ^ ^ ^ 
if(type){

condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member type_ter ^ ^ ^ ^ operandr MemberReference qualifier Type_ter ^ ^ member FUNCTION_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member aliasingGets_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((type != Type.FUNCTION) && (aliasingGets - 0))){
condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member type_ter ^ ^ ^ ^ operandr MemberReference member type_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator >_ter ^ ^ operandl MemberReference member aliasingGets_ter ^ ^ ^ ^ operandr Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if(((type != type) && (aliasingGets > 0))){
stderr: 