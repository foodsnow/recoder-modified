stdout: StatementExpression expression ClassCreator selectors MethodInvocation arguments MemberReference member root_ter ^ ^ ^ ^ member traverse_ter ^ ^ ^ ^ type ReferenceType name NodeTraversal_ter ^ ^ ^ ^ arguments MemberReference member compiler_ter ^ ^ ^ This_ter ^ ^ ^ ^ ^ 
arg 
arg 
new NodeTraversal(compiler, this);

StatementExpression expression ClassCreator selectors MethodInvocation arguments MemberReference member root_ter ^ ^ ^ ^ member traverse_ter ^ ^ ^ ^ type ReferenceType name NodeTraversal_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
new NodeTraversal();

StatementExpression expression SuperMethodInvocation member process_ter ^ ^ ^ ^ ^ 
super.process();

StatementExpression expression SuperConstructorInvocation_ter ^ ^ ^ 
1 SuperConstructorInvocation_ter
IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member root_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((root != null)){

StatementExpression expression ExplicitConstructorInvocation_ter ^ ^ ^ 
1 ExplicitConstructorInvocation_ter
StatementExpression expression SuperMethodInvocation selectors MethodInvocation arguments MemberReference member root_ter ^ ^ ^ ^ member traverse_ter ^ ^ ^ ^ member traverse_ter ^ ^ ^ ^ ^ 
super.traverse().traverse(root);

StatementExpression expression ClassCreator selectors MethodInvocation arguments MemberReference member root_ter ^ ^ ^ ^ member traverse_ter ^ ^ ^ ^ type ReferenceType name NodeTraversal_ter ^ ^ ^ ^ arguments MemberReference member compiler_ter ^ ^ ^ MemberReference member root_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
new NodeTraversal(compiler, root);

StatementExpression expression ClassCreator selectors MethodInvocation arguments MemberReference member root_ter ^ ^ ^ ^ member traverse_ter ^ ^ ^ ^ type ReferenceType name NodeTraversal_ter ^ ^ ^ ^ arguments MemberReference member externs_ter ^ ^ ^ This_ter ^ ^ ^ ^ ^ 
arg 
arg 
new NodeTraversal(externs, this);

StatementExpression expression ExplicitConstructorInvocation_ter ^ ^ ^ 
1 ExplicitConstructorInvocation_ter
StatementExpression expression SuperConstructorInvocation_ter ^ ^ ^ 
1 SuperConstructorInvocation_ter
StatementExpression expression ClassCreator selectors MethodInvocation arguments MemberReference member root_ter ^ ^ ^ ^ member traverse_ter ^ ^ ^ ^ type ReferenceType name NodeTraversal_ter ^ ^ ^ ^ arguments This_ter ^ MemberReference member compiler_ter ^ ^ ^ MemberReference member root_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
new NodeTraversal(this, compiler, root);


IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member compiler_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((compiler != null)){

StatementExpression expression SuperMethodInvocation arguments MemberReference member root_ter ^ ^ ^ ^ member process_ter ^ ^ ^ ^ ^ 
super.process(root);

StatementExpression expression ClassCreator selectors MethodInvocation arguments MemberReference member root_ter ^ ^ ^ ^ member traverse_ter ^ ^ ^ ^ type ReferenceType name NodeTraversal_ter ^ ^ ^ ^ arguments MemberReference qualifier compiler_ter ^ ^ member compiler_ter ^ ^ ^ This_ter ^ ^ ^ ^ ^ 
arg 
arg 
new NodeTraversal(compiler.compiler, this);

StatementExpression expression ClassCreator selectors MethodInvocation arguments MemberReference member root_ter ^ ^ ^ ^ member traverse_ter ^ ^ ^ ^ type ReferenceType name NodeTraversal_ter ^ ^ ^ ^ arguments This_ter ^ ^ ^ ^ ^ 
arg 
arg 
new NodeTraversal(this);

StatementExpression expression ClassCreator type ReferenceType name NodeTraversal_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
new NodeTraversal();

StatementExpression expression MethodInvocation qualifier root_ter ^ ^ member detachChildren_ter ^ ^ ^ ^ ^ 
root.detachChildren();

StatementExpression expression MethodInvocation qualifier root_ter ^ ^ member setQuotedString_ter ^ ^ ^ ^ ^ 
root.setQuotedString();

StatementExpression expression ClassCreator selectors MethodInvocation arguments MemberReference member root_ter ^ ^ ^ ^ member traverse_ter ^ ^ ^ ^ type ReferenceType name NodeTraversal_ter ^ ^ ^ ^ arguments This_ter ^ MemberReference member root_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
new NodeTraversal(this, root);

StatementExpression expression SuperMethodInvocation selectors MethodInvocation arguments MemberReference member root_ter ^ ^ ^ ^ member traverse_ter ^ ^ ^ ^ member process_ter ^ ^ ^ ^ ^ 
super.process().traverse(root);

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member root_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((root == null)){

StatementExpression expression MethodInvocation arguments MemberReference member root_ter ^ ^ ^ ^ member traverse_ter ^ ^ ^ ^ ^ 
traverse(root);

StatementExpression expression ClassCreator selectors MethodInvocation arguments MemberReference member root_ter ^ ^ ^ ^ member traverse_ter ^ ^ ^ ^ type ReferenceType name NodeTraversal_ter ^ ^ ^ ^ arguments MemberReference member root_ter ^ ^ ^ This_ter ^ ^ ^ ^ ^ 
arg 
arg 
new NodeTraversal(root, this);

StatementExpression expression SuperMethodInvocation selectors MethodInvocation arguments MemberReference member root_ter ^ ^ ^ ^ member traverse_ter ^ ^ ^ ^ member compiler_ter ^ ^ ^ ^ ^ 
super.compiler().traverse(root);

ReturnStatement_ter ^ 
if (true) { return;
 }

StatementExpression expression ClassCreator selectors MethodInvocation arguments MemberReference member root_ter ^ ^ ^ ^ member traverse_ter ^ ^ ^ ^ type ReferenceType name NodeTraversal_ter ^ ^ ^ ^ arguments This_ter ^ MemberReference member compiler_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
new NodeTraversal(this, compiler);

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member externs_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((externs != null)){

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member compiler_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((compiler == null)){

StatementExpression expression SuperMethodInvocation arguments MemberReference member externs_ter ^ ^ ^ ^ member process_ter ^ ^ ^ ^ ^ 
super.process(externs);

StatementExpression expression ExplicitConstructorInvocation arguments MemberReference member root_ter ^ ^ ^ ^ ^ ^ ^ 
this(root);;

StatementExpression expression Assignment expressionl MemberReference member compiler_ter ^ ^ ^ ^ value ClassCreator selectors MethodInvocation arguments MemberReference member root_ter ^ ^ ^ ^ member traverse_ter ^ ^ ^ ^ type ReferenceType name NodeTraversal_ter ^ ^ ^ ^ arguments MemberReference member compiler_ter ^ ^ ^ This_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
arg 
arg 
compiler = new NodeTraversal(compiler, this);

StatementExpression expression SuperMethodInvocation arguments MemberReference member root_ter ^ ^ ^ ^ member traverse_ter ^ ^ ^ ^ ^ 
super.traverse(root);

StatementExpression expression MethodInvocation qualifier externs_ter ^ ^ member detachChildren_ter ^ ^ ^ ^ ^ 
externs.detachChildren();

StatementExpression expression MethodInvocation qualifier externs_ter ^ ^ member setQuotedString_ter ^ ^ ^ ^ ^ 
externs.setQuotedString();

condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ 
if((n.isName() && jsScope.isDeclared(n.getString(), true))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member toString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ 
if((n.isName() && jsScope.isDeclared(n.toString(), true))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member toStringTree_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ 
if((n.isName() && jsScope.isDeclared(n.toStringTree(), true))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member toStringTreeImpl_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ 
if((n.isName() && jsScope.isDeclared(n.toStringTreeImpl(), true))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getSourceFileName_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ 
if((n.isName() && jsScope.isDeclared(n.getSourceFileName(), true))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getQualifiedName_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ 
if((n.isName() && jsScope.isDeclared(n.getQualifiedName(), true))){
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ ^ 
if(n.isName()){

IfStatement condition MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ 
if(jsScope.isDeclared(n.getString(), true)){

condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value false_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ 
if((n.isName() && jsScope.isDeclared(n.getString(), false))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && jsScope.isDeclared(n.getString(), true))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isFromExterns_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ 
if((n.isFromExterns() && jsScope.isDeclared(n.getString(), true))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ 
if((n.hasOneChild() && jsScope.isDeclared(n.getString(), true))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ 
if((n.hasMoreThanOneChild() && jsScope.isDeclared(n.getString(), true))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ 
if((n.isQualifiedName() && jsScope.isDeclared(n.getString(), true))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ 
if((n.isUnscopedQualifiedName() && jsScope.isDeclared(n.getString(), true))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ 
if((n.isVarArgs() && jsScope.isDeclared(n.getString(), true))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ 
if((n.isOptionalArg() && jsScope.isDeclared(n.getString(), true))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ 
if((n.isSyntheticBlock() && jsScope.isDeclared(n.getString(), true))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ 
if((n.wasEmptyNode() && jsScope.isDeclared(n.getString(), true))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ 
if((n.isOnlyModifiesThisCall() && jsScope.isDeclared(n.getString(), true))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ 
if((n.isNoSideEffectsCall() && jsScope.isDeclared(n.getString(), true))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ 
if((n.isLocalResultCall() && jsScope.isDeclared(n.getString(), true))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ 
if((n.isQuotedString() && jsScope.isDeclared(n.getString(), true))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isAdd_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ 
if((n.isAdd() && jsScope.isDeclared(n.getString(), true))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isAnd_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ 
if((n.isAnd() && jsScope.isDeclared(n.getString(), true))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isArrayLit_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ 
if((n.isArrayLit() && jsScope.isDeclared(n.getString(), true))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isAssign_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ 
if((n.isAssign() && jsScope.isDeclared(n.getString(), true))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isAssignAdd_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ 
if((n.isAssignAdd() && jsScope.isDeclared(n.getString(), true))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isBlock_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ 
if((n.isBlock() && jsScope.isDeclared(n.getString(), true))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isBreak_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ 
if((n.isBreak() && jsScope.isDeclared(n.getString(), true))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ 
if((n.isCall() && jsScope.isDeclared(n.getString(), true))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isCase_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ 
if((n.isCase() && jsScope.isDeclared(n.getString(), true))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isCatch_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ 
if((n.isCatch() && jsScope.isDeclared(n.getString(), true))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isComma_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ 
if((n.isComma() && jsScope.isDeclared(n.getString(), true))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isContinue_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ 
if((n.isContinue() && jsScope.isDeclared(n.getString(), true))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isDebugger_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ 
if((n.isDebugger() && jsScope.isDeclared(n.getString(), true))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isDec_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ 
if((n.isDec() && jsScope.isDeclared(n.getString(), true))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isDefaultCase_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ 
if((n.isDefaultCase() && jsScope.isDeclared(n.getString(), true))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isDelProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ 
if((n.isDelProp() && jsScope.isDeclared(n.getString(), true))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isDo_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ 
if((n.isDo() && jsScope.isDeclared(n.getString(), true))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ 
if((n.isEmpty() && jsScope.isDeclared(n.getString(), true))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isExprResult_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ 
if((n.isExprResult() && jsScope.isDeclared(n.getString(), true))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isFalse_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ 
if((n.isFalse() && jsScope.isDeclared(n.getString(), true))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isFor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ 
if((n.isFor() && jsScope.isDeclared(n.getString(), true))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isFunction_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ 
if((n.isFunction() && jsScope.isDeclared(n.getString(), true))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetterDef_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ 
if((n.isGetterDef() && jsScope.isDeclared(n.getString(), true))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetElem_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ 
if((n.isGetElem() && jsScope.isDeclared(n.getString(), true))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && jsScope.isDeclared(n.getString(), true))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isHook_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ 
if((n.isHook() && jsScope.isDeclared(n.getString(), true))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isIf_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ 
if((n.isIf() && jsScope.isDeclared(n.getString(), true))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isIn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ 
if((n.isIn() && jsScope.isDeclared(n.getString(), true))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isInc_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ 
if((n.isInc() && jsScope.isDeclared(n.getString(), true))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isInstanceOf_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ 
if((n.isInstanceOf() && jsScope.isDeclared(n.getString(), true))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isLabel_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ 
if((n.isLabel() && jsScope.isDeclared(n.getString(), true))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isLabelName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ 
if((n.isLabelName() && jsScope.isDeclared(n.getString(), true))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isNE_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ 
if((n.isNE() && jsScope.isDeclared(n.getString(), true))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isNew_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ 
if((n.isNew() && jsScope.isDeclared(n.getString(), true))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isNot_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ 
if((n.isNot() && jsScope.isDeclared(n.getString(), true))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isNull_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ 
if((n.isNull() && jsScope.isDeclared(n.getString(), true))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isNumber_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ 
if((n.isNumber() && jsScope.isDeclared(n.getString(), true))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isObjectLit_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ 
if((n.isObjectLit() && jsScope.isDeclared(n.getString(), true))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isOr_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ 
if((n.isOr() && jsScope.isDeclared(n.getString(), true))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isParamList_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ 
if((n.isParamList() && jsScope.isDeclared(n.getString(), true))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isRegExp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ 
if((n.isRegExp() && jsScope.isDeclared(n.getString(), true))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ 
if((n.isReturn() && jsScope.isDeclared(n.getString(), true))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isScript_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ 
if((n.isScript() && jsScope.isDeclared(n.getString(), true))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isSetterDef_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ 
if((n.isSetterDef() && jsScope.isDeclared(n.getString(), true))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isString_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ 
if((n.isString() && jsScope.isDeclared(n.getString(), true))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isSwitch_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ 
if((n.isSwitch() && jsScope.isDeclared(n.getString(), true))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isThis_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ 
if((n.isThis() && jsScope.isDeclared(n.getString(), true))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isThrow_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ 
if((n.isThrow() && jsScope.isDeclared(n.getString(), true))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isTrue_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ 
if((n.isTrue() && jsScope.isDeclared(n.getString(), true))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isTry_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ 
if((n.isTry() && jsScope.isDeclared(n.getString(), true))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isTypeOf_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ 
if((n.isTypeOf() && jsScope.isDeclared(n.getString(), true))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ 
if((n.isVar() && jsScope.isDeclared(n.getString(), true))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isVoid_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ 
if((n.isVoid() && jsScope.isDeclared(n.getString(), true))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isWhile_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ 
if((n.isWhile() && jsScope.isDeclared(n.getString(), true))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isWith_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ 
if((n.isWith() && jsScope.isDeclared(n.getString(), true))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getName_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ 
if((n.isName() && jsScope.isDeclared(n.getName(), true))){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.isName() && jsScope.isDeclared(n.getString(), true)) && jsScope.isDeclared(n.getString(), true))){

condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ 
if((n.isName() || jsScope.isDeclared(n.getString(), true))){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MemberReference member n_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && jsScope.isDeclared(n))){

condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member visit_ter ^ ^ ^ ^ ^ ^ 
if((n.isName() && jsScope.visit(n.getString(), true))){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((jsScope.isDeclared(n.getString(), true) && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && jsScope.isDeclared(n.getString()))){

condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member visit_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ 
if((n.isName() && jsScope.isDeclared(n.visit(), true))){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && !jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier jsScope_ter ^ ^ arguments MemberReference member n_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((jsScope.isDeclared(n) && jsScope.isDeclared(n.getString(), true))){

condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member getVar_ter ^ ^ ^ ^ ^ ^ 
if((n.isName() && jsScope.getVar(n.getString(), true))){
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
if(n.hasChildren()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isFromExterns_ter ^ ^ ^ ^ ^ 
if(n.isFromExterns()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ ^ 
if(n.hasOneChild()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ ^ 
if(n.hasMoreThanOneChild()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ ^ 
if(n.isQualifiedName()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ ^ 
if(n.isUnscopedQualifiedName()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ ^ 
if(n.isVarArgs()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ ^ 
if(n.isOptionalArg()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ ^ 
if(n.isSyntheticBlock()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ ^ 
if(n.wasEmptyNode()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ ^ 
if(n.isOnlyModifiesThisCall()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ ^ 
if(n.isNoSideEffectsCall()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ ^ 
if(n.isLocalResultCall()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ ^ 
if(n.isQuotedString()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isAdd_ter ^ ^ ^ ^ ^ 
if(n.isAdd()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isAnd_ter ^ ^ ^ ^ ^ 
if(n.isAnd()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isArrayLit_ter ^ ^ ^ ^ ^ 
if(n.isArrayLit()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isAssign_ter ^ ^ ^ ^ ^ 
if(n.isAssign()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isAssignAdd_ter ^ ^ ^ ^ ^ 
if(n.isAssignAdd()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isBlock_ter ^ ^ ^ ^ ^ 
if(n.isBlock()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isBreak_ter ^ ^ ^ ^ ^ 
if(n.isBreak()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isCall_ter ^ ^ ^ ^ ^ 
if(n.isCall()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isCase_ter ^ ^ ^ ^ ^ 
if(n.isCase()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isCatch_ter ^ ^ ^ ^ ^ 
if(n.isCatch()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isComma_ter ^ ^ ^ ^ ^ 
if(n.isComma()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isContinue_ter ^ ^ ^ ^ ^ 
if(n.isContinue()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isDebugger_ter ^ ^ ^ ^ ^ 
if(n.isDebugger()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isDec_ter ^ ^ ^ ^ ^ 
if(n.isDec()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isDefaultCase_ter ^ ^ ^ ^ ^ 
if(n.isDefaultCase()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isDelProp_ter ^ ^ ^ ^ ^ 
if(n.isDelProp()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isDo_ter ^ ^ ^ ^ ^ 
if(n.isDo()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ ^ 
if(n.isEmpty()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isExprResult_ter ^ ^ ^ ^ ^ 
if(n.isExprResult()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isFalse_ter ^ ^ ^ ^ ^ 
if(n.isFalse()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isFor_ter ^ ^ ^ ^ ^ 
if(n.isFor()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isFunction_ter ^ ^ ^ ^ ^ 
if(n.isFunction()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isGetterDef_ter ^ ^ ^ ^ ^ 
if(n.isGetterDef()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isGetElem_ter ^ ^ ^ ^ ^ 
if(n.isGetElem()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ ^ 
if(n.isGetProp()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isHook_ter ^ ^ ^ ^ ^ 
if(n.isHook()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isIf_ter ^ ^ ^ ^ ^ 
if(n.isIf()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isIn_ter ^ ^ ^ ^ ^ 
if(n.isIn()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isInc_ter ^ ^ ^ ^ ^ 
if(n.isInc()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isInstanceOf_ter ^ ^ ^ ^ ^ 
if(n.isInstanceOf()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isLabel_ter ^ ^ ^ ^ ^ 
if(n.isLabel()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isLabelName_ter ^ ^ ^ ^ ^ 
if(n.isLabelName()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isNE_ter ^ ^ ^ ^ ^ 
if(n.isNE()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isNew_ter ^ ^ ^ ^ ^ 
if(n.isNew()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isNot_ter ^ ^ ^ ^ ^ 
if(n.isNot()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isNull_ter ^ ^ ^ ^ ^ 
if(n.isNull()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ 
if(n.isNumber()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isObjectLit_ter ^ ^ ^ ^ ^ 
if(n.isObjectLit()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isOr_ter ^ ^ ^ ^ ^ 
if(n.isOr()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isParamList_ter ^ ^ ^ ^ ^ 
if(n.isParamList()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isRegExp_ter ^ ^ ^ ^ ^ 
if(n.isRegExp()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ 
if(n.isReturn()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isScript_ter ^ ^ ^ ^ ^ 
if(n.isScript()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isSetterDef_ter ^ ^ ^ ^ ^ 
if(n.isSetterDef()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ 
if(n.isString()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isSwitch_ter ^ ^ ^ ^ ^ 
if(n.isSwitch()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isThis_ter ^ ^ ^ ^ ^ 
if(n.isThis()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isThrow_ter ^ ^ ^ ^ ^ 
if(n.isThrow()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isTrue_ter ^ ^ ^ ^ ^ 
if(n.isTrue()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isTry_ter ^ ^ ^ ^ ^ 
if(n.isTry()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isTypeOf_ter ^ ^ ^ ^ ^ 
if(n.isTypeOf()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isVar_ter ^ ^ ^ ^ ^ 
if(n.isVar()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isVoid_ter ^ ^ ^ ^ ^ 
if(n.isVoid()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isWhile_ter ^ ^ ^ ^ ^ 
if(n.isWhile()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isWith_ter ^ ^ ^ ^ ^ 
if(n.isWith()){

StatementExpression expression MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ 
jsScope.isDeclared(n.getString(), true);


StatementExpression expression MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ ^ 
n.isName();


IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && (n.isName() && jsScope.isDeclared(n.getString(), true)))){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(n.hasChildren()){
return;
}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isFromExterns_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(n.isFromExterns()){
return;
}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(n.hasOneChild()){
return;
}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(n.hasMoreThanOneChild()){
return;
}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(n.isQualifiedName()){
return;
}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(n.isUnscopedQualifiedName()){
return;
}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(n.isVarArgs()){
return;
}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(n.isOptionalArg()){
return;
}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(n.isSyntheticBlock()){
return;
}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(n.wasEmptyNode()){
return;
}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(n.isOnlyModifiesThisCall()){
return;
}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(n.isNoSideEffectsCall()){
return;
}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(n.isLocalResultCall()){
return;
}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(n.isQuotedString()){
return;
}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isAdd_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(n.isAdd()){
return;
}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isAnd_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(n.isAnd()){
return;
}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isArrayLit_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(n.isArrayLit()){
return;
}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isAssign_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(n.isAssign()){
return;
}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isAssignAdd_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(n.isAssignAdd()){
return;
}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isBlock_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(n.isBlock()){
return;
}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isBreak_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(n.isBreak()){
return;
}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isCall_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(n.isCall()){
return;
}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isCase_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(n.isCase()){
return;
}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isCatch_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(n.isCatch()){
return;
}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isComma_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(n.isComma()){
return;
}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isContinue_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(n.isContinue()){
return;
}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isDebugger_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(n.isDebugger()){
return;
}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isDec_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(n.isDec()){
return;
}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isDefaultCase_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(n.isDefaultCase()){
return;
}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isDelProp_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(n.isDelProp()){
return;
}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isDo_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(n.isDo()){
return;
}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(n.isEmpty()){
return;
}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isExprResult_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(n.isExprResult()){
return;
}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isFalse_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(n.isFalse()){
return;
}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isFor_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(n.isFor()){
return;
}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isFunction_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(n.isFunction()){
return;
}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isGetterDef_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(n.isGetterDef()){
return;
}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isGetElem_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(n.isGetElem()){
return;
}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(n.isGetProp()){
return;
}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isHook_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(n.isHook()){
return;
}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isIf_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(n.isIf()){
return;
}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isIn_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(n.isIn()){
return;
}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isInc_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(n.isInc()){
return;
}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isInstanceOf_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(n.isInstanceOf()){
return;
}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isLabel_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(n.isLabel()){
return;
}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isLabelName_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(n.isLabelName()){
return;
}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(n.isName()){
return;
}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isNE_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(n.isNE()){
return;
}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isNew_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(n.isNew()){
return;
}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isNot_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(n.isNot()){
return;
}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isNull_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(n.isNull()){
return;
}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(n.isNumber()){
return;
}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isObjectLit_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(n.isObjectLit()){
return;
}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isOr_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(n.isOr()){
return;
}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isParamList_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(n.isParamList()){
return;
}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isRegExp_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(n.isRegExp()){
return;
}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(n.isReturn()){
return;
}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isScript_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(n.isScript()){
return;
}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isSetterDef_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(n.isSetterDef()){
return;
}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(n.isString()){
return;
}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isSwitch_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(n.isSwitch()){
return;
}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isThis_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(n.isThis()){
return;
}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isThrow_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(n.isThrow()){
return;
}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isTrue_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(n.isTrue()){
return;
}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isTry_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(n.isTry()){
return;
}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isTypeOf_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(n.isTypeOf()){
return;
}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isVar_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(n.isVar()){
return;
}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isVoid_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(n.isVoid()){
return;
}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isWhile_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(n.isWhile()){
return;
}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isWith_ter ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if(n.isWith()){
return;
}
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && n.isName())){

condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier t_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ 
if((n.isName() && t.isDeclared(n.getString(), true))){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.isName() && jsScope.isDeclared(n.getString(), true)) && n.hasChildren())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isFromExterns_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.isName() && jsScope.isDeclared(n.getString(), true)) && n.isFromExterns())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.isName() && jsScope.isDeclared(n.getString(), true)) && n.hasOneChild())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.isName() && jsScope.isDeclared(n.getString(), true)) && n.hasMoreThanOneChild())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.isName() && jsScope.isDeclared(n.getString(), true)) && n.isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.isName() && jsScope.isDeclared(n.getString(), true)) && n.isUnscopedQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.isName() && jsScope.isDeclared(n.getString(), true)) && n.isVarArgs())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.isName() && jsScope.isDeclared(n.getString(), true)) && n.isOptionalArg())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.isName() && jsScope.isDeclared(n.getString(), true)) && n.isSyntheticBlock())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.isName() && jsScope.isDeclared(n.getString(), true)) && n.wasEmptyNode())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.isName() && jsScope.isDeclared(n.getString(), true)) && n.isOnlyModifiesThisCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.isName() && jsScope.isDeclared(n.getString(), true)) && n.isNoSideEffectsCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.isName() && jsScope.isDeclared(n.getString(), true)) && n.isLocalResultCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.isName() && jsScope.isDeclared(n.getString(), true)) && n.isQuotedString())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isAdd_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.isName() && jsScope.isDeclared(n.getString(), true)) && n.isAdd())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isAnd_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.isName() && jsScope.isDeclared(n.getString(), true)) && n.isAnd())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isArrayLit_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.isName() && jsScope.isDeclared(n.getString(), true)) && n.isArrayLit())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isAssign_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.isName() && jsScope.isDeclared(n.getString(), true)) && n.isAssign())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isAssignAdd_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.isName() && jsScope.isDeclared(n.getString(), true)) && n.isAssignAdd())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isBlock_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.isName() && jsScope.isDeclared(n.getString(), true)) && n.isBlock())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isBreak_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.isName() && jsScope.isDeclared(n.getString(), true)) && n.isBreak())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isCall_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.isName() && jsScope.isDeclared(n.getString(), true)) && n.isCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isCase_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.isName() && jsScope.isDeclared(n.getString(), true)) && n.isCase())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isCatch_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.isName() && jsScope.isDeclared(n.getString(), true)) && n.isCatch())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isComma_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.isName() && jsScope.isDeclared(n.getString(), true)) && n.isComma())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isContinue_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.isName() && jsScope.isDeclared(n.getString(), true)) && n.isContinue())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isDebugger_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.isName() && jsScope.isDeclared(n.getString(), true)) && n.isDebugger())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isDec_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.isName() && jsScope.isDeclared(n.getString(), true)) && n.isDec())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isDefaultCase_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.isName() && jsScope.isDeclared(n.getString(), true)) && n.isDefaultCase())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isDelProp_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.isName() && jsScope.isDeclared(n.getString(), true)) && n.isDelProp())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isDo_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.isName() && jsScope.isDeclared(n.getString(), true)) && n.isDo())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.isName() && jsScope.isDeclared(n.getString(), true)) && n.isEmpty())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isExprResult_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.isName() && jsScope.isDeclared(n.getString(), true)) && n.isExprResult())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isFalse_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.isName() && jsScope.isDeclared(n.getString(), true)) && n.isFalse())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isFor_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.isName() && jsScope.isDeclared(n.getString(), true)) && n.isFor())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isFunction_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.isName() && jsScope.isDeclared(n.getString(), true)) && n.isFunction())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isGetterDef_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.isName() && jsScope.isDeclared(n.getString(), true)) && n.isGetterDef())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isGetElem_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.isName() && jsScope.isDeclared(n.getString(), true)) && n.isGetElem())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.isName() && jsScope.isDeclared(n.getString(), true)) && n.isGetProp())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isHook_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.isName() && jsScope.isDeclared(n.getString(), true)) && n.isHook())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isIf_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.isName() && jsScope.isDeclared(n.getString(), true)) && n.isIf())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isIn_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.isName() && jsScope.isDeclared(n.getString(), true)) && n.isIn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isInc_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.isName() && jsScope.isDeclared(n.getString(), true)) && n.isInc())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isInstanceOf_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.isName() && jsScope.isDeclared(n.getString(), true)) && n.isInstanceOf())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isLabel_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.isName() && jsScope.isDeclared(n.getString(), true)) && n.isLabel())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isLabelName_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.isName() && jsScope.isDeclared(n.getString(), true)) && n.isLabelName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.isName() && jsScope.isDeclared(n.getString(), true)) && n.isName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isNE_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.isName() && jsScope.isDeclared(n.getString(), true)) && n.isNE())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isNew_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.isName() && jsScope.isDeclared(n.getString(), true)) && n.isNew())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isNot_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.isName() && jsScope.isDeclared(n.getString(), true)) && n.isNot())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isNull_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.isName() && jsScope.isDeclared(n.getString(), true)) && n.isNull())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.isName() && jsScope.isDeclared(n.getString(), true)) && n.isNumber())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isObjectLit_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.isName() && jsScope.isDeclared(n.getString(), true)) && n.isObjectLit())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isOr_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.isName() && jsScope.isDeclared(n.getString(), true)) && n.isOr())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isParamList_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.isName() && jsScope.isDeclared(n.getString(), true)) && n.isParamList())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isRegExp_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.isName() && jsScope.isDeclared(n.getString(), true)) && n.isRegExp())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.isName() && jsScope.isDeclared(n.getString(), true)) && n.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isScript_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.isName() && jsScope.isDeclared(n.getString(), true)) && n.isScript())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isSetterDef_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.isName() && jsScope.isDeclared(n.getString(), true)) && n.isSetterDef())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.isName() && jsScope.isDeclared(n.getString(), true)) && n.isString())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isSwitch_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.isName() && jsScope.isDeclared(n.getString(), true)) && n.isSwitch())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isThis_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.isName() && jsScope.isDeclared(n.getString(), true)) && n.isThis())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isThrow_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.isName() && jsScope.isDeclared(n.getString(), true)) && n.isThrow())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isTrue_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.isName() && jsScope.isDeclared(n.getString(), true)) && n.isTrue())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isTry_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.isName() && jsScope.isDeclared(n.getString(), true)) && n.isTry())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isTypeOf_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.isName() && jsScope.isDeclared(n.getString(), true)) && n.isTypeOf())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isVar_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.isName() && jsScope.isDeclared(n.getString(), true)) && n.isVar())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isVoid_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.isName() && jsScope.isDeclared(n.getString(), true)) && n.isVoid())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isWhile_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.isName() && jsScope.isDeclared(n.getString(), true)) && n.isWhile())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isWith_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.isName() && jsScope.isDeclared(n.getString(), true)) && n.isWith())){

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((n != null)){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && jsScope.isDeclared(n.hasChildren()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isFromExterns_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && jsScope.isDeclared(n.isFromExterns()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && jsScope.isDeclared(n.hasOneChild()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && jsScope.isDeclared(n.hasMoreThanOneChild()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && jsScope.isDeclared(n.isQualifiedName()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && jsScope.isDeclared(n.isUnscopedQualifiedName()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && jsScope.isDeclared(n.isVarArgs()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && jsScope.isDeclared(n.isOptionalArg()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && jsScope.isDeclared(n.isSyntheticBlock()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && jsScope.isDeclared(n.wasEmptyNode()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && jsScope.isDeclared(n.isOnlyModifiesThisCall()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && jsScope.isDeclared(n.isNoSideEffectsCall()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && jsScope.isDeclared(n.isLocalResultCall()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && jsScope.isDeclared(n.isQuotedString()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isAdd_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && jsScope.isDeclared(n.isAdd()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isAnd_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && jsScope.isDeclared(n.isAnd()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isArrayLit_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && jsScope.isDeclared(n.isArrayLit()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isAssign_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && jsScope.isDeclared(n.isAssign()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isAssignAdd_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && jsScope.isDeclared(n.isAssignAdd()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isBlock_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && jsScope.isDeclared(n.isBlock()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isBreak_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && jsScope.isDeclared(n.isBreak()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isCall_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && jsScope.isDeclared(n.isCall()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isCase_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && jsScope.isDeclared(n.isCase()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isCatch_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && jsScope.isDeclared(n.isCatch()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isComma_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && jsScope.isDeclared(n.isComma()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isContinue_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && jsScope.isDeclared(n.isContinue()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isDebugger_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && jsScope.isDeclared(n.isDebugger()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isDec_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && jsScope.isDeclared(n.isDec()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isDefaultCase_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && jsScope.isDeclared(n.isDefaultCase()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isDelProp_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && jsScope.isDeclared(n.isDelProp()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isDo_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && jsScope.isDeclared(n.isDo()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && jsScope.isDeclared(n.isEmpty()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isExprResult_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && jsScope.isDeclared(n.isExprResult()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isFalse_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && jsScope.isDeclared(n.isFalse()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isFor_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && jsScope.isDeclared(n.isFor()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isFunction_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && jsScope.isDeclared(n.isFunction()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isGetterDef_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && jsScope.isDeclared(n.isGetterDef()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isGetElem_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && jsScope.isDeclared(n.isGetElem()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && jsScope.isDeclared(n.isGetProp()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isHook_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && jsScope.isDeclared(n.isHook()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isIf_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && jsScope.isDeclared(n.isIf()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isIn_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && jsScope.isDeclared(n.isIn()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isInc_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && jsScope.isDeclared(n.isInc()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isInstanceOf_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && jsScope.isDeclared(n.isInstanceOf()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isLabel_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && jsScope.isDeclared(n.isLabel()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isLabelName_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && jsScope.isDeclared(n.isLabelName()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && jsScope.isDeclared(n.isName()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isNE_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && jsScope.isDeclared(n.isNE()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isNew_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && jsScope.isDeclared(n.isNew()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isNot_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && jsScope.isDeclared(n.isNot()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isNull_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && jsScope.isDeclared(n.isNull()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isNumber_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && jsScope.isDeclared(n.isNumber()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isObjectLit_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && jsScope.isDeclared(n.isObjectLit()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isOr_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && jsScope.isDeclared(n.isOr()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isParamList_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && jsScope.isDeclared(n.isParamList()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isRegExp_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && jsScope.isDeclared(n.isRegExp()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isReturn_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && jsScope.isDeclared(n.isReturn()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isScript_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && jsScope.isDeclared(n.isScript()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isSetterDef_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && jsScope.isDeclared(n.isSetterDef()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isString_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && jsScope.isDeclared(n.isString()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isSwitch_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && jsScope.isDeclared(n.isSwitch()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isThis_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && jsScope.isDeclared(n.isThis()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isThrow_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && jsScope.isDeclared(n.isThrow()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isTrue_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && jsScope.isDeclared(n.isTrue()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isTry_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && jsScope.isDeclared(n.isTry()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isTypeOf_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && jsScope.isDeclared(n.isTypeOf()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isVar_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && jsScope.isDeclared(n.isVar()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isVoid_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && jsScope.isDeclared(n.isVoid()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isWhile_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && jsScope.isDeclared(n.isWhile()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isWith_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && jsScope.isDeclared(n.isWith()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && n.hasChildren())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isFromExterns_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && n.isFromExterns())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && n.hasOneChild())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && n.hasMoreThanOneChild())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && n.isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && n.isUnscopedQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && n.isVarArgs())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && n.isOptionalArg())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && n.isSyntheticBlock())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && n.wasEmptyNode())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && n.isOnlyModifiesThisCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && n.isNoSideEffectsCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && n.isLocalResultCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && n.isQuotedString())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isAdd_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && n.isAdd())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isAnd_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && n.isAnd())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isArrayLit_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && n.isArrayLit())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isAssign_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && n.isAssign())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isAssignAdd_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && n.isAssignAdd())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isBlock_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && n.isBlock())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isBreak_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && n.isBreak())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isCall_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && n.isCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isCase_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && n.isCase())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isCatch_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && n.isCatch())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isComma_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && n.isComma())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isContinue_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && n.isContinue())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isDebugger_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && n.isDebugger())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isDec_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && n.isDec())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isDefaultCase_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && n.isDefaultCase())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isDelProp_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && n.isDelProp())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isDo_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && n.isDo())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && n.isEmpty())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isExprResult_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && n.isExprResult())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isFalse_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && n.isFalse())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isFor_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && n.isFor())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isFunction_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && n.isFunction())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isGetterDef_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && n.isGetterDef())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isGetElem_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && n.isGetElem())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && n.isGetProp())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isHook_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && n.isHook())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isIf_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && n.isIf())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isIn_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && n.isIn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isInc_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && n.isInc())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isInstanceOf_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && n.isInstanceOf())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isLabel_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && n.isLabel())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isLabelName_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && n.isLabelName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isNE_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && n.isNE())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isNew_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && n.isNew())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isNot_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && n.isNot())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isNull_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && n.isNull())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && n.isNumber())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isObjectLit_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && n.isObjectLit())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isOr_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && n.isOr())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isParamList_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && n.isParamList())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isRegExp_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && n.isRegExp())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && n.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isScript_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && n.isScript())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isSetterDef_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && n.isSetterDef())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && n.isString())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isSwitch_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && n.isSwitch())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isThis_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && n.isThis())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isThrow_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && n.isThrow())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isTrue_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && n.isTrue())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isTry_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && n.isTry())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isTypeOf_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && n.isTypeOf())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isVar_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && n.isVar())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isVoid_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && n.isVoid())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isWhile_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && n.isWhile())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isWith_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && n.isWith())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isFromExterns_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isFromExterns() && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasOneChild() && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasMoreThanOneChild() && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isQualifiedName() && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isUnscopedQualifiedName() && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isVarArgs() && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isOptionalArg() && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isSyntheticBlock() && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.wasEmptyNode() && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isOnlyModifiesThisCall() && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isNoSideEffectsCall() && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isLocalResultCall() && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isQuotedString() && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isAdd_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isAdd() && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isAnd_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isAnd() && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isArrayLit_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isArrayLit() && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isAssign_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isAssign() && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isAssignAdd_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isAssignAdd() && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isBlock_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isBlock() && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isBreak_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isBreak() && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isCall() && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isCase_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isCase() && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isCatch_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isCatch() && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isComma_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isComma() && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isContinue_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isContinue() && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isDebugger_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isDebugger() && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isDec_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isDec() && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isDefaultCase_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isDefaultCase() && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isDelProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isDelProp() && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isDo_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isDo() && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isEmpty() && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isExprResult_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isExprResult() && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isFalse_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isFalse() && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isFor_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isFor() && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isFunction_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isFunction() && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetterDef_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetterDef() && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetElem_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetElem() && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isGetProp() && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isHook_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isHook() && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isIf_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isIf() && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isIn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isIn() && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isInc_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isInc() && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isInstanceOf_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isInstanceOf() && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isLabel_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isLabel() && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isLabelName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isLabelName() && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isNE_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isNE() && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isNew_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isNew() && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isNot_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isNot() && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isNull_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isNull() && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isNumber_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isNumber() && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isObjectLit_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isObjectLit() && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isOr_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isOr() && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isParamList_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isParamList() && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isRegExp_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isRegExp() && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isReturn() && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isScript_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isScript() && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isSetterDef_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isSetterDef() && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isString_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isString() && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isSwitch_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isSwitch() && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isThis_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isThis() && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isThrow_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isThrow() && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isTrue_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isTrue() && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isTry_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isTry() && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isTypeOf_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isTypeOf() && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isVar() && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isVoid_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isVoid() && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isWhile_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isWhile() && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isWith_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isWith() && jsScope.isDeclared(n.getString(), true))){

condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier def.depends_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ 
if((n.isName() && def.depends.isDeclared(n.getString(), true))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier t_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ 
if((n.isName() && jsScope.isDeclared(t.getString(), true))){
StatementExpression expression MethodInvocation qualifier n_ter ^ ^ member detachChildren_ter ^ ^ ^ ^ ^ 
n.detachChildren();

StatementExpression expression MethodInvocation qualifier n_ter ^ ^ member setQuotedString_ter ^ ^ ^ ^ ^ 
n.setQuotedString();

IfStatement condition MethodInvocation member isForward_ter ^ ^ ^ ^ ^ 
if(isForward()){

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
ReturnStatement_ter ^ 
if((n == null)){
return;
}
IfStatement condition MemberReference member n_ter ^ ^ ^ ^ ^ 
if(n){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value false_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && jsScope.isDeclared(n.getString(), false))){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ ^ ^ 
if(n.getString()){

IfStatement condition MemberReference prefix_operators !_ter ^ ^ member n_ter ^ ^ ^ ^ ^ 
if(!n){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((jsScope.isDeclared(n.hasChildren()) && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isFromExterns_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((jsScope.isDeclared(n.isFromExterns()) && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((jsScope.isDeclared(n.hasOneChild()) && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((jsScope.isDeclared(n.hasMoreThanOneChild()) && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((jsScope.isDeclared(n.isQualifiedName()) && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((jsScope.isDeclared(n.isUnscopedQualifiedName()) && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((jsScope.isDeclared(n.isVarArgs()) && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((jsScope.isDeclared(n.isOptionalArg()) && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((jsScope.isDeclared(n.isSyntheticBlock()) && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((jsScope.isDeclared(n.wasEmptyNode()) && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((jsScope.isDeclared(n.isOnlyModifiesThisCall()) && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((jsScope.isDeclared(n.isNoSideEffectsCall()) && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((jsScope.isDeclared(n.isLocalResultCall()) && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((jsScope.isDeclared(n.isQuotedString()) && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isAdd_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((jsScope.isDeclared(n.isAdd()) && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isAnd_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((jsScope.isDeclared(n.isAnd()) && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isArrayLit_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((jsScope.isDeclared(n.isArrayLit()) && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isAssign_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((jsScope.isDeclared(n.isAssign()) && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isAssignAdd_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((jsScope.isDeclared(n.isAssignAdd()) && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isBlock_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((jsScope.isDeclared(n.isBlock()) && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isBreak_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((jsScope.isDeclared(n.isBreak()) && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isCall_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((jsScope.isDeclared(n.isCall()) && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isCase_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((jsScope.isDeclared(n.isCase()) && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isCatch_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((jsScope.isDeclared(n.isCatch()) && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isComma_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((jsScope.isDeclared(n.isComma()) && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isContinue_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((jsScope.isDeclared(n.isContinue()) && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isDebugger_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((jsScope.isDeclared(n.isDebugger()) && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isDec_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((jsScope.isDeclared(n.isDec()) && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isDefaultCase_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((jsScope.isDeclared(n.isDefaultCase()) && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isDelProp_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((jsScope.isDeclared(n.isDelProp()) && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isDo_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((jsScope.isDeclared(n.isDo()) && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((jsScope.isDeclared(n.isEmpty()) && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isExprResult_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((jsScope.isDeclared(n.isExprResult()) && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isFalse_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((jsScope.isDeclared(n.isFalse()) && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isFor_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((jsScope.isDeclared(n.isFor()) && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isFunction_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((jsScope.isDeclared(n.isFunction()) && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isGetterDef_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((jsScope.isDeclared(n.isGetterDef()) && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isGetElem_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((jsScope.isDeclared(n.isGetElem()) && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((jsScope.isDeclared(n.isGetProp()) && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isHook_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((jsScope.isDeclared(n.isHook()) && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isIf_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((jsScope.isDeclared(n.isIf()) && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isIn_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((jsScope.isDeclared(n.isIn()) && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isInc_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((jsScope.isDeclared(n.isInc()) && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isInstanceOf_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((jsScope.isDeclared(n.isInstanceOf()) && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isLabel_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((jsScope.isDeclared(n.isLabel()) && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isLabelName_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((jsScope.isDeclared(n.isLabelName()) && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((jsScope.isDeclared(n.isName()) && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isNE_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((jsScope.isDeclared(n.isNE()) && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isNew_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((jsScope.isDeclared(n.isNew()) && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isNot_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((jsScope.isDeclared(n.isNot()) && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isNull_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((jsScope.isDeclared(n.isNull()) && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isNumber_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((jsScope.isDeclared(n.isNumber()) && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isObjectLit_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((jsScope.isDeclared(n.isObjectLit()) && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isOr_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((jsScope.isDeclared(n.isOr()) && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isParamList_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((jsScope.isDeclared(n.isParamList()) && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isRegExp_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((jsScope.isDeclared(n.isRegExp()) && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isReturn_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((jsScope.isDeclared(n.isReturn()) && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isScript_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((jsScope.isDeclared(n.isScript()) && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isSetterDef_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((jsScope.isDeclared(n.isSetterDef()) && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isString_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((jsScope.isDeclared(n.isString()) && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isSwitch_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((jsScope.isDeclared(n.isSwitch()) && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isThis_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((jsScope.isDeclared(n.isThis()) && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isThrow_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((jsScope.isDeclared(n.isThrow()) && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isTrue_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((jsScope.isDeclared(n.isTrue()) && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isTry_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((jsScope.isDeclared(n.isTry()) && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isTypeOf_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((jsScope.isDeclared(n.isTypeOf()) && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isVar_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((jsScope.isDeclared(n.isVar()) && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isVoid_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((jsScope.isDeclared(n.isVoid()) && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isWhile_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((jsScope.isDeclared(n.isWhile()) && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member isWith_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((jsScope.isDeclared(n.isWith()) && jsScope.isDeclared(n.getString(), true))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MemberReference member n_ter ^ ^ ^ MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && jsScope.isDeclared(n, n.getString()))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr MethodInvocation qualifier jsScope_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ ^ member isDeclared_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.isName() && jsScope.isDeclared(n.getString(), n.getString()))){

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member dep_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((dep != null)){

StatementExpression expression MethodInvocation qualifier def.depends_ter ^ ^ arguments MemberReference member dep_ter ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
def.depends.add(dep);

StatementExpression expression MethodInvocation arguments MemberReference member dep_ter ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
add(dep);

StatementExpression expression MethodInvocation qualifier def.depends_ter ^ ^ arguments MemberReference member parent_ter ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
def.depends.add(parent);

StatementExpression expression MethodInvocation qualifier def.depends_ter ^ ^ arguments MemberReference member n_ter ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
def.depends.add(n);

StatementExpression expression MethodInvocation qualifier def.depends_ter ^ ^ arguments MemberReference member dep_ter ^ ^ ^ MemberReference member parent_ter ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
def.depends.add(dep, parent);

StatementExpression expression MethodInvocation qualifier def.depends_ter ^ ^ arguments MemberReference member t_ter ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
def.depends.add(t);

StatementExpression expression MethodInvocation qualifier t_ter ^ ^ arguments MemberReference member dep_ter ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
t.add(dep);

StatementExpression expression MethodInvocation qualifier def.depends_ter ^ ^ arguments MemberReference member loc1 ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
def.depends.add();

IfStatement condition MethodInvocation qualifier def.depends_ter ^ ^ arguments MemberReference member dep_ter ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
if(def.depends.add(dep)){


StatementExpression expression MethodInvocation qualifier def.depends_ter ^ ^ arguments MemberReference member dep_ter ^ ^ ^ MemberReference member n_ter ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
def.depends.add(dep, n);

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member dep_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((dep == null)){

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member t_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((t != null)){

StatementExpression expression MethodInvocation qualifier def.depends_ter ^ ^ arguments MemberReference member dep_ter ^ ^ ^ Literal value false_ter ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
def.depends.add(dep, false);

StatementExpression expression MethodInvocation qualifier def.depends_ter ^ ^ arguments MemberReference member dep_ter ^ ^ ^ MemberReference member dep_ter ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
def.depends.add(dep, dep);

StatementExpression expression MethodInvocation qualifier def.depends_ter ^ ^ arguments MemberReference member dep_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
def.depends.add(dep, true);

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if(( != null)){


ReturnStatement_ter ^ 
if (true) { return;
 }

StatementExpression expression MethodInvocation member add_ter ^ ^ ^ ^ ^ 
add();

StatementExpression expression MethodInvocation qualifier def.depends_ter ^ ^ member add_ter ^ ^ ^ ^ ^ 
def.depends.add();

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((n != null)){

StatementExpression expression MethodInvocation qualifier dep_ter ^ ^ arguments MemberReference member dep_ter ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
dep.add(dep);

IfStatement condition MemberReference member dep_ter ^ ^ ^ ^ ^ 
if(dep){

StatementExpression expression Assignment expressionl MemberReference member dep_ter ^ ^ ^ ^ value MethodInvocation qualifier def.depends_ter ^ ^ arguments MemberReference member dep_ter ^ ^ ^ ^ member add_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
dep = def.depends.add(dep);


StatementExpression expression MethodInvocation qualifier def.depends_ter ^ ^ arguments MemberReference member par3 ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
def.depends.add();

StatementExpression expression MethodInvocation qualifier def.depends_ter ^ ^ arguments MemberReference member dep_ter ^ ^ ^ ^ member visit_ter ^ ^ ^ ^ ^ 
def.depends.visit(dep);

ReturnStatement_ter ^ 
return;

StatementExpression expression MethodInvocation qualifier def.depends_ter ^ ^ arguments MemberReference member dep_ter ^ ^ ^ ^ member debug_ter ^ ^ ^ ^ ^ 
def.depends.debug(dep);

StatementExpression expression MethodInvocation qualifier def.depends_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
def.depends.add(n.getString());

StatementExpression expression MethodInvocation qualifier def.depends_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getString_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
def.depends.add(n.getString(), true);

StatementExpression expression MethodInvocation qualifier def.depends_ter ^ ^ arguments MemberReference member dep_ter ^ ^ ^ MemberReference member t_ter ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
def.depends.add(dep, t);

control EnhancedForControl var VariableDeclaration type ReferenceType name Var_ter ^ ^ ^ ^ declarators VariableDeclarator name s_ter ^ ^ ^ ^ ^ ^ iterable MemberReference qualifier def_ter ^ ^ member depends_ter ^ ^ ^ ^ ^ ^ 
arg 
arg 
(Var s = ;
:def.depends)

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member def_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((def != null)){

control EnhancedForControl var VariableDeclaration type ReferenceType name Var_ter ^ ^ ^ ^ declarators VariableDeclarator name s_ter ^ ^ ^ ^ ^ ^ iterable MemberReference member def_ter ^ ^ ^ ^ ^ ^ 
arg 
arg 
(Var s = ;
:def)

control EnhancedForControl var VariableDeclaration type ReferenceType name Var_ter ^ ^ ^ ^ declarators VariableDeclarator name s_ter ^ ^ ^ ^ ^ ^ iterable MemberReference member reachingDef_ter ^ ^ ^ ^ ^ ^ 
arg 
arg 
(Var s = ;
:reachingDef)

control EnhancedForControl var VariableDeclaration type ReferenceType name Var_ter ^ ^ ^ ^ declarators VariableDeclarator name s_ter ^ ^ ^ ^ ^ ^ iterable MemberReference member jsScope_ter ^ ^ ^ ^ ^ ^ 
arg 
arg 
(Var s = ;
:jsScope)

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MemberReference member useNode_ter ^ ^ ^ ^ member debug_ter ^ ^ ^ ^ ^ 
Preconditions.debug(useNode);

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference qualifier def_ter ^ ^ member depends_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((def.depends != null)){

control EnhancedForControl var VariableDeclaration type ReferenceType name Var_ter ^ ^ ^ ^ declarators VariableDeclarator name s_ter ^ ^ ^ ^ ^ ^ iterable MemberReference member state_ter ^ ^ ^ ^ ^ ^ 
arg 
arg 
(Var s = ;
:state)

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member def_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ 
if((def == null)){
return true;}
IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member def_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((def == null)){

control EnhancedForControl var VariableDeclaration type ReferenceType name Var_ter ^ ^ ^ ^ declarators VariableDeclarator name s_ter ^ ^ ^ ^ ^ ^ iterable MemberReference qualifier def_ter ^ ^ member jsScope_ter ^ ^ ^ ^ ^ ^ 
arg 
arg 
(Var s = ;
:def.jsScope)

ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ 
if (true) { return true; }

control EnhancedForControl var VariableDeclaration type ReferenceType name Var_ter ^ ^ ^ ^ declarators VariableDeclarator name s_ter ^ ^ ^ ^ ^ ^ iterable MemberReference member depends_ter ^ ^ ^ ^ ^ ^ 
arg 
arg 
(Var s = ;
:depends)

control EnhancedForControl var VariableDeclaration type ReferenceType name Var_ter ^ ^ ^ ^ declarators VariableDeclarator name s_ter ^ ^ ^ ^ ^ ^ iterable MemberReference member name_ter ^ ^ ^ ^ ^ ^ 
arg 
arg 
(Var s = ;
:name)

ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if (true) { return false; }

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation selectors MethodInvocation arguments MemberReference member useNode_ter ^ ^ ^ ^ member hasNode_ter ^ ^ ^ ^ member getCfg_ter ^ ^ ^ ^ member checkArgument_ter ^ ^ ^ ^ ^ 
Preconditions.checkArgument(getCfg().hasNode(useNode));

control EnhancedForControl var VariableDeclaration type ReferenceType name Var_ter ^ ^ ^ ^ declarators VariableDeclarator name s_ter ^ ^ ^ ^ ^ ^ iterable MemberReference qualifier state_ter ^ ^ member depends_ter ^ ^ ^ ^ ^ ^ 
arg 
arg 
(Var s = ;
:state.depends)

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member jsScope_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((jsScope != null)){

control EnhancedForControl var VariableDeclaration modifiers final_ter ^ ^ type ReferenceType name Var_ter ^ ^ ^ ^ declarators VariableDeclarator name s_ter ^ ^ ^ ^ ^ ^ iterable MemberReference qualifier def_ter ^ ^ member depends_ter ^ ^ ^ ^ ^ ^ 
arg 
arg 
(final Var s = ;
:def.depends)

control EnhancedForControl var VariableDeclaration type ReferenceType name Var_ter ^ ^ ^ ^ declarators VariableDeclarator name s_ter ^ ^ ^ ^ ^ ^ iterable MemberReference qualifier def_ter ^ ^ member scope_ter ^ ^ ^ ^ ^ ^ 
arg 
arg 
(Var s = ;
:def.scope)

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member def_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ 
if((def != null)){
return true;}
control EnhancedForControl var VariableDeclaration type ReferenceType name Var_ter ^ ^ ^ ^ declarators VariableDeclarator name s_ter ^ ^ ^ ^ ^ ^ iterable MemberReference member n_ter ^ ^ ^ ^ ^ ^ 
arg 
arg 
(Var s = ;
:n)

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference qualifier def_ter ^ ^ member depends_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ 
if((def.depends == null)){
return true;}
IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference qualifier def_ter ^ ^ member depends_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((def.depends == null)){

control EnhancedForControl var VariableDeclaration type ReferenceType name Var_ter ^ ^ ^ ^ declarators VariableDeclarator name s_ter ^ ^ ^ ^ ^ ^ iterable MemberReference qualifier def_ter ^ ^ member reachingDef_ter ^ ^ ^ ^ ^ ^ 
arg 
arg 
(Var s = ;
:def.reachingDef)

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member def_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if((def == null)){
return false;}
IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member reachingDef_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((reachingDef != null)){

control EnhancedForControl var VariableDeclaration type ReferenceType name Var_ter ^ ^ ^ ^ declarators VariableDeclarator name s_ter ^ ^ ^ ^ ^ ^ iterable MethodInvocation qualifier def_ter ^ ^ member getIn_ter ^ ^ ^ ^ ^ ^ 
arg 
arg 
(Var s = ;
:def.getIn())

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MemberReference member useNode_ter ^ ^ ^ ^ member checkArgument_ter ^ ^ ^ ^ ^ 
Preconditions.checkArgument(useNode);

stderr: 