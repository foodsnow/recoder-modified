stdout: condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member locale_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ 
if((locale == null)){
condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member locale_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ 
if((locale != null)){
ReturnStatement expression MemberReference member format_ter ^ ^ ^ ^ ^ 
if (true) { return format; }

condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member key_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ 
if((key != null)){
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if (true) { return null; }

StatementExpression expression MethodInvocation member init_ter ^ ^ ^ ^ ^ 
init();

StatementExpression expression Assignment expressionl MemberReference member key_ter ^ ^ ^ ^ value ClassCreator type ReferenceType name Pair_ter ^ ^ ^ ^ arguments MemberReference member key_ter ^ ^ ^ MemberReference member timeZone_ter ^ ^ ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
arg 
arg 
key = new Pair(key, timeZone);

StatementExpression expression Assignment expressionl MemberReference member locale_ter ^ ^ ^ ^ value MethodInvocation qualifier Locale_ter ^ ^ member getDefault_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
locale = Locale.getDefault();

ReturnStatement_ter ^ 
if (true) { return;
 }

StatementExpression expression Assignment expressionl MemberReference member key_ter ^ ^ ^ ^ value ClassCreator type ReferenceType name Pair_ter ^ ^ ^ ^ arguments MemberReference member key_ter ^ ^ ^ MemberReference member locale_ter ^ ^ ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
arg 
arg 
key = new Pair(key, locale);

StatementExpression expression Assignment expressionl MemberReference member format_ter ^ ^ ^ ^ value MethodInvocation arguments MemberReference member pattern_ter ^ ^ ^ MemberReference member timeZone_ter ^ ^ ^ MemberReference member locale_ter ^ ^ ^ ^ member getInstance_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
format = getInstance(pattern, timeZone, locale);

BreakStatement_ter ^ 
break;

condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member timeZone_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ 
if((timeZone != null)){
ReturnStatement expression MemberReference member key_ter ^ ^ ^ ^ ^ 
if (true) { return key; }

StatementExpression expression MethodInvocation qualifier cDateInstanceCache_ter ^ ^ arguments MemberReference member key_ter ^ ^ ^ MemberReference member format_ter ^ ^ ^ ^ member put_ter ^ ^ ^ ^ ^ 
cDateInstanceCache.put(key, format);

StatementExpression expression Assignment expressionl MemberReference member key_ter ^ ^ ^ ^ value Literal value null_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
key = null;

IfStatement condition MethodInvocation member getTimeZoneOverridesCalendar_ter ^ ^ ^ ^ ^ 
if(getTimeZoneOverridesCalendar()){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member locale_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member timeZone_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((locale != null) && (timeZone == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member locale_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member locale_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((locale != null) && (locale != null))){

IfStatement condition BinaryOperation operator +_ter ^ ^ operandl Literal value <string>_ter ^ ^ ^ ^ operandr MemberReference member locale_ter ^ ^ ^ ^ ^ ^ ^ 
if(("null" + locale)){



condition BinaryOperation operator >=_ter ^ ^ operandl MemberReference member locale_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ 
if((locale >= null)){
condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member style_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ 
if((style != null)){
condition BinaryOperation operator >_ter ^ ^ operandl MemberReference member locale_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ 
if((locale > null)){
condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member format_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ 
if((format != null)){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member locale_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator +_ter ^ ^ operandl Literal value <string>_ter ^ ^ ^ ^ operandr MemberReference member locale_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((locale != null) && ("null" + locale))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member locale_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation member getTimeZoneOverridesCalendar_ter ^ ^ ^ ^ ^ ^ ^ 
if(((locale != null) && getTimeZoneOverridesCalendar())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member locale_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member timeZone_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((locale != null) && (timeZone != null))){

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member locale_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((locale != null)){

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member key_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((key != null)){

IfStatement condition MemberReference member locale_ter ^ ^ ^ ^ ^ 
if(locale){

ReturnStatement expression MemberReference member timeZone_ter ^ ^ ^ ^ ^ 
if (true) { return timeZone; }

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member locale_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member locale_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((locale != null) && (locale == null))){

StatementExpression expression MemberReference postfix_operators ++_ter ^ ^ member key_ter ^ ^ ^ ^ ^ 
key++;

StatementExpression expression Assignment expressionl MemberReference member key_ter ^ ^ ^ ^ value MemberReference member key_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
key = key;

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member locale_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member format_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((locale != null) && (format == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member locale_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member style_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((locale != null) && (style != null))){

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member locale_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((locale != null)){

StatementExpression expression MethodInvocation qualifier DateFormat_ter ^ ^ member init_ter ^ ^ ^ ^ ^ 
DateFormat.init();

ReturnStatement expression MemberReference member locale_ter ^ ^ ^ ^ ^ 
if (true) { return locale; }

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member locale_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier locale_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ ^ ^ ^ 
if(((locale != null) && locale.isEmpty())){

StatementExpression expression Assignment expressionl MemberReference member locale_ter ^ ^ ^ ^ value Literal value null_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
locale = null;

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member locale_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member getTimeZoneOverridesCalendar_ter ^ ^ ^ ^ ^ ^ ^ 
if(((locale != null) && !getTimeZoneOverridesCalendar())){

condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member locale_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ 
if((locale == null)){
condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member locale_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ 
if((locale != null)){
condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member key_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ 
if((key != null)){
ReturnStatement expression MemberReference member format_ter ^ ^ ^ ^ ^ 
if (true) { return format; }

StatementExpression expression Assignment expressionl MemberReference member key_ter ^ ^ ^ ^ value ClassCreator type ReferenceType name Pair_ter ^ ^ ^ ^ arguments MemberReference member key_ter ^ ^ ^ MemberReference member timeZone_ter ^ ^ ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
arg 
arg 
key = new Pair(key, timeZone);

ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if (true) { return null; }

StatementExpression expression MethodInvocation member init_ter ^ ^ ^ ^ ^ 
init();

StatementExpression expression Assignment expressionl MemberReference member locale_ter ^ ^ ^ ^ value MethodInvocation qualifier Locale_ter ^ ^ member getDefault_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
locale = Locale.getDefault();

ReturnStatement_ter ^ 
if (true) { return;
 }

StatementExpression expression Assignment expressionl MemberReference member key_ter ^ ^ ^ ^ value ClassCreator type ReferenceType name Pair_ter ^ ^ ^ ^ arguments MemberReference member key_ter ^ ^ ^ MemberReference member locale_ter ^ ^ ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
arg 
arg 
key = new Pair(key, locale);

condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member timeZone_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ 
if((timeZone != null)){
BreakStatement_ter ^ 
break;

condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member timeStyle_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ 
if((timeStyle != null)){
StatementExpression expression Assignment expressionl MemberReference member format_ter ^ ^ ^ ^ value MethodInvocation arguments MemberReference member pattern_ter ^ ^ ^ MemberReference member timeZone_ter ^ ^ ^ MemberReference member locale_ter ^ ^ ^ ^ member getInstance_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
format = getInstance(pattern, timeZone, locale);

ReturnStatement expression MemberReference member key_ter ^ ^ ^ ^ ^ 
if (true) { return key; }

condition BinaryOperation operator >=_ter ^ ^ operandl MemberReference member locale_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ 
if((locale >= null)){
condition BinaryOperation operator >_ter ^ ^ operandl MemberReference member locale_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ 
if((locale > null)){
StatementExpression expression MethodInvocation qualifier cDateTimeInstanceCache_ter ^ ^ arguments MemberReference member key_ter ^ ^ ^ MemberReference member format_ter ^ ^ ^ ^ member put_ter ^ ^ ^ ^ ^ 
cDateTimeInstanceCache.put(key, format);

condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member dateStyle_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ 
if((dateStyle != null)){
IfStatement condition MethodInvocation member getTimeZoneOverridesCalendar_ter ^ ^ ^ ^ ^ 
if(getTimeZoneOverridesCalendar()){

StatementExpression expression Assignment expressionl MemberReference member key_ter ^ ^ ^ ^ value Literal value null_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
key = null;

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member locale_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator +_ter ^ ^ operandl Literal value <string>_ter ^ ^ ^ ^ operandr MemberReference member locale_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((locale != null) && ("null" + locale))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member locale_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member timeZone_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((locale != null) && (timeZone == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member locale_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member locale_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((locale != null) && (locale != null))){

ReturnStatement expression MemberReference member timeZone_ter ^ ^ ^ ^ ^ 
if (true) { return timeZone; }

condition BinaryOperation operator <=_ter ^ ^ operandl MemberReference member locale_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ 
if((locale <= null)){
condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member format_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ 
if((format != null)){
IfStatement condition BinaryOperation operator +_ter ^ ^ operandl Literal value <string>_ter ^ ^ ^ ^ operandr MemberReference member locale_ter ^ ^ ^ ^ ^ ^ ^ 
if(("null" + locale)){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member locale_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation member getTimeZoneOverridesCalendar_ter ^ ^ ^ ^ ^ ^ ^ 
if(((locale != null) && getTimeZoneOverridesCalendar())){

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member key_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((key != null)){

StatementExpression expression MethodInvocation qualifier DateFormat_ter ^ ^ member init_ter ^ ^ ^ ^ ^ 
DateFormat.init();

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member locale_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member format_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((locale != null) && (format == null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member locale_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member timeZone_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((locale != null) && (timeZone != null))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member locale_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member timeStyle_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((locale != null) && (timeStyle != null))){

StatementExpression expression MemberReference postfix_operators ++_ter ^ ^ member key_ter ^ ^ ^ ^ ^ 
key++;

StatementExpression expression Assignment expressionl MemberReference member key_ter ^ ^ ^ ^ value MemberReference member key_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
key = key;

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member locale_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MemberReference member locale_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((locale != null) && (locale == null))){

ReturnStatement expression MemberReference member timeStyle_ter ^ ^ ^ ^ ^ 
if (true) { return timeStyle; }

ReturnStatement expression This_ter ^ ^ ^ 
if (true) { return this; }

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member locale_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ member getTimeZoneOverridesCalendar_ter ^ ^ ^ ^ ^ ^ ^ 
if(((locale != null) && !getTimeZoneOverridesCalendar())){

IfStatement condition MemberReference member locale_ter ^ ^ ^ ^ ^ 
if(locale){

condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member locale_ter ^ ^ ^ ^ operandr Literal value <string>_ter ^ ^ ^ ^ ^ ^ 
if((locale != "null")){
stderr: 