stdout: LocalVariableDeclaration type BasicType name boolean_ter ^ ^ ^ ^ declarators VariableDeclarator name ret_ter ^ ^ initializer Literal value true_ter ^ ^ ^ ^ ^ ^ ^ 
boolean ret = true;

LocalVariableDeclaration type BasicType name boolean_ter ^ ^ ^ ^ declarators VariableDeclarator name ret_ter ^ ^ ^ ^ ^ 
boolean ret = ;


LocalVariableDeclaration type BasicType name long_ter ^ ^ ^ ^ declarators VariableDeclarator name ret_ter ^ ^ initializer Literal value false_ter ^ ^ ^ ^ ^ ^ ^ 
long ret = false;

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name ret_ter ^ ^ initializer Literal value false_ter ^ ^ ^ ^ ^ ^ ^ 
int ret = false;

LocalVariableDeclaration type BasicType name boolean_ter ^ ^ ^ ^ declarators VariableDeclarator name ret_ter ^ ^ initializer Literal value false_ter ^ ^ ^ ^ ^ ^ ^ 
boolean ret = false;

ReturnStatement_ter ^ 
if (true) { return;
 }

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member refs_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if((refs == null)){
return false;}
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if (true) { return false; }

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member refs_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((refs != null)){

ReturnStatement expression MemberReference member ret_ter ^ ^ ^ ^ ^ 
if (true) { return ret; }

StatementExpression expression SuperMethodInvocation member isInlinableObject_ter ^ ^ ^ ^ ^ 
super.isInlinableObject();

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member refs_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if((refs != null)){
return false;}
StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member name_ter ^ ^ ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState((parent.getFirstChild() == name));

BreakStatement_ter ^ 
break;

LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name boolean_ter ^ ^ ^ ^ declarators VariableDeclarator name ret_ter ^ ^ initializer Literal value false_ter ^ ^ ^ ^ ^ ^ ^ 
final boolean ret = false;

StatementExpression expression Assignment expressionl MemberReference member refNode_ter ^ ^ ^ ^ value MethodInvocation qualifier refNode_ter ^ ^ member getParent_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
refNode = refNode.getParent();

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member refs_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference member ret_ter ^ ^ ^ ^ ^ 
if((refs == null)){
return ret;}
StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MemberReference member name_ter ^ ^ ^ ^ member debug_ter ^ ^ ^ ^ ^ 
Preconditions.debug(name);

LocalVariableDeclaration type BasicType name boolean_ter ^ ^ ^ ^ declarators VariableDeclarator name ret_ter ^ ^ initializer Literal prefix_operators -_ter ^ ^ value false_ter ^ ^ ^ ^ ^ ^ ^ 
boolean ret = -false;

ContinueStatement_ter ^ 
continue;

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member refs_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((refs == null)){

StatementExpression expression Assignment expressionl MemberReference member ret_ter ^ ^ ^ ^ value Literal value true_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
ret = true;


IfStatement condition MemberReference prefix_operators !_ter ^ ^ member refs_ter ^ ^ ^ ^ ^ 
if(!refs){

LocalVariableDeclaration type BasicType name boolean_ter ^ ^ ^ ^ declarators VariableDeclarator name ret_ter ^ ^ initializer Literal prefix_operators -_ter ^ ^ value true_ter ^ ^ ^ ^ ^ ^ ^ 
boolean ret = -true;

control EnhancedForControl var VariableDeclaration type ReferenceType name Reference_ter ^ ^ ^ ^ declarators VariableDeclarator name ref_ter ^ ^ ^ ^ ^ ^ iterable MemberReference member refs_ter ^ ^ ^ ^ ^ ^ 
arg 
arg 
(Reference ref = ;
:refs)

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.getFirstChild() == parent)){

LocalVariableDeclaration type BasicType name boolean_ter ^ ^ ^ ^ declarators VariableDeclarator name ret_ter ^ ^ initializer Literal value <string>_ter ^ ^ ^ ^ ^ ^ ^ 
boolean ret = "null";

StatementExpression expression SuperConstructorInvocation_ter ^ ^ ^ 
1 SuperConstructorInvocation_ter
LocalVariableDeclaration type BasicType name boolean_ter ^ ^ ^ ^ declarators VariableDeclarator name ret_ter ^ ^ initializer Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
boolean ret = null;

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.getFirstChild() == parent)){

IfStatement condition MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ ^ 
if(gramps.isCall()){

condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.hasChildren() && (gramps.getFirstChild() == parent))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isFromExterns_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isFromExterns() && (gramps.getFirstChild() == parent))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.hasOneChild() && (gramps.getFirstChild() == parent))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.hasMoreThanOneChild() && (gramps.getFirstChild() == parent))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isQualifiedName() && (gramps.getFirstChild() == parent))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isUnscopedQualifiedName() && (gramps.getFirstChild() == parent))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isVarArgs() && (gramps.getFirstChild() == parent))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isOptionalArg() && (gramps.getFirstChild() == parent))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isSyntheticBlock() && (gramps.getFirstChild() == parent))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.wasEmptyNode() && (gramps.getFirstChild() == parent))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isOnlyModifiesThisCall() && (gramps.getFirstChild() == parent))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isNoSideEffectsCall() && (gramps.getFirstChild() == parent))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isLocalResultCall() && (gramps.getFirstChild() == parent))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isQuotedString() && (gramps.getFirstChild() == parent))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isAdd_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isAdd() && (gramps.getFirstChild() == parent))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isAnd_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isAnd() && (gramps.getFirstChild() == parent))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isArrayLit_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isArrayLit() && (gramps.getFirstChild() == parent))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isAssign_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isAssign() && (gramps.getFirstChild() == parent))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isAssignAdd_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isAssignAdd() && (gramps.getFirstChild() == parent))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isBlock_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isBlock() && (gramps.getFirstChild() == parent))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isBreak_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isBreak() && (gramps.getFirstChild() == parent))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && (gramps.getFirstChild() == parent))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCase_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCase() && (gramps.getFirstChild() == parent))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCatch_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCatch() && (gramps.getFirstChild() == parent))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isComma_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isComma() && (gramps.getFirstChild() == parent))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isContinue_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isContinue() && (gramps.getFirstChild() == parent))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isDebugger_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isDebugger() && (gramps.getFirstChild() == parent))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isDec_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isDec() && (gramps.getFirstChild() == parent))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isDefaultCase_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isDefaultCase() && (gramps.getFirstChild() == parent))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isDelProp_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isDelProp() && (gramps.getFirstChild() == parent))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isDo_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isDo() && (gramps.getFirstChild() == parent))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isEmpty() && (gramps.getFirstChild() == parent))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isExprResult_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isExprResult() && (gramps.getFirstChild() == parent))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isFalse_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isFalse() && (gramps.getFirstChild() == parent))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isFor_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isFor() && (gramps.getFirstChild() == parent))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isFunction_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isFunction() && (gramps.getFirstChild() == parent))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isGetterDef_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isGetterDef() && (gramps.getFirstChild() == parent))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isGetElem_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isGetElem() && (gramps.getFirstChild() == parent))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isGetProp() && (gramps.getFirstChild() == parent))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isHook_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isHook() && (gramps.getFirstChild() == parent))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isIf_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isIf() && (gramps.getFirstChild() == parent))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isIn_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isIn() && (gramps.getFirstChild() == parent))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isInc_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isInc() && (gramps.getFirstChild() == parent))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isInstanceOf_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isInstanceOf() && (gramps.getFirstChild() == parent))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isLabel_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isLabel() && (gramps.getFirstChild() == parent))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isLabelName_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isLabelName() && (gramps.getFirstChild() == parent))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isName_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isName() && (gramps.getFirstChild() == parent))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isNE_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isNE() && (gramps.getFirstChild() == parent))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isNew_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isNew() && (gramps.getFirstChild() == parent))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isNot_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isNot() && (gramps.getFirstChild() == parent))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isNull_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isNull() && (gramps.getFirstChild() == parent))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isNumber_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isNumber() && (gramps.getFirstChild() == parent))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isObjectLit_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isObjectLit() && (gramps.getFirstChild() == parent))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isOr_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isOr() && (gramps.getFirstChild() == parent))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isParamList_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isParamList() && (gramps.getFirstChild() == parent))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isRegExp_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isRegExp() && (gramps.getFirstChild() == parent))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isReturn_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isReturn() && (gramps.getFirstChild() == parent))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isScript_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isScript() && (gramps.getFirstChild() == parent))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isSetterDef_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isSetterDef() && (gramps.getFirstChild() == parent))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isString_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isString() && (gramps.getFirstChild() == parent))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isStringKey_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isStringKey() && (gramps.getFirstChild() == parent))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isSwitch_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isSwitch() && (gramps.getFirstChild() == parent))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isThis_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isThis() && (gramps.getFirstChild() == parent))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isThrow_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isThrow() && (gramps.getFirstChild() == parent))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isTrue_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isTrue() && (gramps.getFirstChild() == parent))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isTry_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isTry() && (gramps.getFirstChild() == parent))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isTypeOf_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isTypeOf() && (gramps.getFirstChild() == parent))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isVar_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isVar() && (gramps.getFirstChild() == parent))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isVoid_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isVoid() && (gramps.getFirstChild() == parent))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isWhile_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isWhile() && (gramps.getFirstChild() == parent))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isWith_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isWith() && (gramps.getFirstChild() == parent))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getLastChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && (gramps.getLastChild() == parent))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getNext_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && (gramps.getNext() == parent))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getLastSibling_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && (gramps.getLastSibling() == parent))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getParent_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && (gramps.getParent() == parent))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member detachFromParent_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && (gramps.detachFromParent() == parent))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member removeFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && (gramps.removeFirstChild() == parent))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member removeChildren_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && (gramps.removeChildren() == parent))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member cloneNode_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && (gramps.cloneNode() == parent))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member cloneTree_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && (gramps.cloneTree() == parent))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && (gramps.getFirstChild() != parent))){
condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() || (gramps.getFirstChild() == parent))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getName_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && (gramps.getName() == parent))){
IfStatement condition MemberReference member parent_ter ^ ^ ^ ^ ^ 
if(parent){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
if(parent.hasChildren()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isFromExterns_ter ^ ^ ^ ^ ^ 
if(parent.isFromExterns()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ ^ 
if(parent.hasOneChild()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ ^ 
if(parent.hasMoreThanOneChild()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ ^ 
if(parent.isQualifiedName()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ ^ 
if(parent.isUnscopedQualifiedName()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ ^ 
if(parent.isVarArgs()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ ^ 
if(parent.isOptionalArg()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ ^ 
if(parent.isSyntheticBlock()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ ^ 
if(parent.wasEmptyNode()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ ^ 
if(parent.isOnlyModifiesThisCall()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ ^ 
if(parent.isNoSideEffectsCall()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ ^ 
if(parent.isLocalResultCall()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ ^ 
if(parent.isQuotedString()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isAdd_ter ^ ^ ^ ^ ^ 
if(parent.isAdd()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isAnd_ter ^ ^ ^ ^ ^ 
if(parent.isAnd()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isArrayLit_ter ^ ^ ^ ^ ^ 
if(parent.isArrayLit()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isAssign_ter ^ ^ ^ ^ ^ 
if(parent.isAssign()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isAssignAdd_ter ^ ^ ^ ^ ^ 
if(parent.isAssignAdd()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isBlock_ter ^ ^ ^ ^ ^ 
if(parent.isBlock()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isBreak_ter ^ ^ ^ ^ ^ 
if(parent.isBreak()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isCall_ter ^ ^ ^ ^ ^ 
if(parent.isCall()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isCase_ter ^ ^ ^ ^ ^ 
if(parent.isCase()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isCatch_ter ^ ^ ^ ^ ^ 
if(parent.isCatch()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isComma_ter ^ ^ ^ ^ ^ 
if(parent.isComma()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isContinue_ter ^ ^ ^ ^ ^ 
if(parent.isContinue()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isDebugger_ter ^ ^ ^ ^ ^ 
if(parent.isDebugger()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isDec_ter ^ ^ ^ ^ ^ 
if(parent.isDec()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isDefaultCase_ter ^ ^ ^ ^ ^ 
if(parent.isDefaultCase()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isDelProp_ter ^ ^ ^ ^ ^ 
if(parent.isDelProp()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isDo_ter ^ ^ ^ ^ ^ 
if(parent.isDo()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ ^ 
if(parent.isEmpty()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isExprResult_ter ^ ^ ^ ^ ^ 
if(parent.isExprResult()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isFalse_ter ^ ^ ^ ^ ^ 
if(parent.isFalse()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isFor_ter ^ ^ ^ ^ ^ 
if(parent.isFor()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isFunction_ter ^ ^ ^ ^ ^ 
if(parent.isFunction()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isGetterDef_ter ^ ^ ^ ^ ^ 
if(parent.isGetterDef()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isGetElem_ter ^ ^ ^ ^ ^ 
if(parent.isGetElem()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ ^ 
if(parent.isGetProp()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isHook_ter ^ ^ ^ ^ ^ 
if(parent.isHook()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isIf_ter ^ ^ ^ ^ ^ 
if(parent.isIf()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isIn_ter ^ ^ ^ ^ ^ 
if(parent.isIn()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isInc_ter ^ ^ ^ ^ ^ 
if(parent.isInc()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isInstanceOf_ter ^ ^ ^ ^ ^ 
if(parent.isInstanceOf()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isLabel_ter ^ ^ ^ ^ ^ 
if(parent.isLabel()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isLabelName_ter ^ ^ ^ ^ ^ 
if(parent.isLabelName()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isName_ter ^ ^ ^ ^ ^ 
if(parent.isName()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isNE_ter ^ ^ ^ ^ ^ 
if(parent.isNE()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isNew_ter ^ ^ ^ ^ ^ 
if(parent.isNew()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isNot_ter ^ ^ ^ ^ ^ 
if(parent.isNot()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isNull_ter ^ ^ ^ ^ ^ 
if(parent.isNull()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ 
if(parent.isNumber()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isObjectLit_ter ^ ^ ^ ^ ^ 
if(parent.isObjectLit()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isOr_ter ^ ^ ^ ^ ^ 
if(parent.isOr()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isParamList_ter ^ ^ ^ ^ ^ 
if(parent.isParamList()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isRegExp_ter ^ ^ ^ ^ ^ 
if(parent.isRegExp()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ 
if(parent.isReturn()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isScript_ter ^ ^ ^ ^ ^ 
if(parent.isScript()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isSetterDef_ter ^ ^ ^ ^ ^ 
if(parent.isSetterDef()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ 
if(parent.isString()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isStringKey_ter ^ ^ ^ ^ ^ 
if(parent.isStringKey()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isSwitch_ter ^ ^ ^ ^ ^ 
if(parent.isSwitch()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isThis_ter ^ ^ ^ ^ ^ 
if(parent.isThis()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isThrow_ter ^ ^ ^ ^ ^ 
if(parent.isThrow()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isTrue_ter ^ ^ ^ ^ ^ 
if(parent.isTrue()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isTry_ter ^ ^ ^ ^ ^ 
if(parent.isTry()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isTypeOf_ter ^ ^ ^ ^ ^ 
if(parent.isTypeOf()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ ^ 
if(parent.isVar()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isVoid_ter ^ ^ ^ ^ ^ 
if(parent.isVoid()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isWhile_ter ^ ^ ^ ^ ^ 
if(parent.isWhile()){

IfStatement condition MethodInvocation qualifier parent_ter ^ ^ member isWith_ter ^ ^ ^ ^ ^ 
if(parent.isWith()){

condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member name_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && (gramps.getFirstChild() == name))){
IfStatement condition MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ 
if(gramps.getFirstChild()){

condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && (parent.getFirstChild() == parent))){
BreakStatement_ter ^ 
break;

condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier child_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && (child.getFirstChild() == parent))){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && (gramps.getFirstChild() == parent))){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && (gramps.getFirstChild() == parent))){

condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier ret_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && (ret.getFirstChild() == parent))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier NodeUtil_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && (NodeUtil.getFirstChild() == parent))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator >=_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && (gramps.getFirstChild() >= parent))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member ref_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && (gramps.getFirstChild() == ref))){
StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member name_ter ^ ^ ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState((parent.getFirstChild() == name));

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && gramps.hasChildren())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isFromExterns_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && gramps.isFromExterns())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && gramps.hasOneChild())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && gramps.hasMoreThanOneChild())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && gramps.isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && gramps.isUnscopedQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && gramps.isVarArgs())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && gramps.isOptionalArg())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && gramps.isSyntheticBlock())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && gramps.wasEmptyNode())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && gramps.isOnlyModifiesThisCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && gramps.isNoSideEffectsCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && gramps.isLocalResultCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && gramps.isQuotedString())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isAdd_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && gramps.isAdd())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isAnd_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && gramps.isAnd())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isArrayLit_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && gramps.isArrayLit())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isAssign_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && gramps.isAssign())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isAssignAdd_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && gramps.isAssignAdd())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isBlock_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && gramps.isBlock())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isBreak_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && gramps.isBreak())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && gramps.isCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isCase_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && gramps.isCase())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isCatch_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && gramps.isCatch())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isComma_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && gramps.isComma())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isContinue_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && gramps.isContinue())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isDebugger_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && gramps.isDebugger())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isDec_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && gramps.isDec())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isDefaultCase_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && gramps.isDefaultCase())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isDelProp_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && gramps.isDelProp())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isDo_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && gramps.isDo())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && gramps.isEmpty())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isExprResult_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && gramps.isExprResult())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isFalse_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && gramps.isFalse())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isFor_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && gramps.isFor())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isFunction_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && gramps.isFunction())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isGetterDef_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && gramps.isGetterDef())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isGetElem_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && gramps.isGetElem())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && gramps.isGetProp())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isHook_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && gramps.isHook())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isIf_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && gramps.isIf())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isIn_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && gramps.isIn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isInc_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && gramps.isInc())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isInstanceOf_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && gramps.isInstanceOf())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isLabel_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && gramps.isLabel())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isLabelName_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && gramps.isLabelName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isName_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && gramps.isName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isNE_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && gramps.isNE())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isNew_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && gramps.isNew())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isNot_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && gramps.isNot())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isNull_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && gramps.isNull())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && gramps.isNumber())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isObjectLit_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && gramps.isObjectLit())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isOr_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && gramps.isOr())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isParamList_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && gramps.isParamList())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isRegExp_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && gramps.isRegExp())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && gramps.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isScript_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && gramps.isScript())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isSetterDef_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && gramps.isSetterDef())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && gramps.isString())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isStringKey_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && gramps.isStringKey())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isSwitch_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && gramps.isSwitch())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isThis_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && gramps.isThis())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isThrow_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && gramps.isThrow())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isTrue_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && gramps.isTrue())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isTry_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && gramps.isTry())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isTypeOf_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && gramps.isTypeOf())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isVar_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && gramps.isVar())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isVoid_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && gramps.isVoid())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isWhile_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && gramps.isWhile())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier gramps_ter ^ ^ member isWith_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && gramps.isWith())){

IfStatement condition MemberReference prefix_operators !_ter ^ ^ member parent_ter ^ ^ ^ ^ ^ 
if(!parent){

condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getGrandparent_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && (gramps.getGrandparent() == parent))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getName_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.getName() && (gramps.getFirstChild() == parent))){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && parent.hasChildren())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isFromExterns_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && parent.isFromExterns())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && parent.hasOneChild())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && parent.hasMoreThanOneChild())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && parent.isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && parent.isUnscopedQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && parent.isVarArgs())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && parent.isOptionalArg())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && parent.isSyntheticBlock())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && parent.wasEmptyNode())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && parent.isOnlyModifiesThisCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && parent.isNoSideEffectsCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && parent.isLocalResultCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && parent.isQuotedString())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isAdd_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && parent.isAdd())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isAnd_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && parent.isAnd())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isArrayLit_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && parent.isArrayLit())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isAssign_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && parent.isAssign())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isAssignAdd_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && parent.isAssignAdd())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isBlock_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && parent.isBlock())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isBreak_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && parent.isBreak())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isCall_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && parent.isCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isCase_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && parent.isCase())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isCatch_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && parent.isCatch())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isComma_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && parent.isComma())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isContinue_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && parent.isContinue())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isDebugger_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && parent.isDebugger())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isDec_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && parent.isDec())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isDefaultCase_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && parent.isDefaultCase())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isDelProp_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && parent.isDelProp())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isDo_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && parent.isDo())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && parent.isEmpty())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isExprResult_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && parent.isExprResult())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isFalse_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && parent.isFalse())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isFor_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && parent.isFor())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isFunction_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && parent.isFunction())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isGetterDef_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && parent.isGetterDef())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isGetElem_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && parent.isGetElem())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && parent.isGetProp())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isHook_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && parent.isHook())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isIf_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && parent.isIf())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isIn_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && parent.isIn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isInc_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && parent.isInc())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isInstanceOf_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && parent.isInstanceOf())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isLabel_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && parent.isLabel())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isLabelName_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && parent.isLabelName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isName_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && parent.isName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isNE_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && parent.isNE())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isNew_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && parent.isNew())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isNot_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && parent.isNot())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isNull_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && parent.isNull())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && parent.isNumber())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isObjectLit_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && parent.isObjectLit())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isOr_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && parent.isOr())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isParamList_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && parent.isParamList())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isRegExp_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && parent.isRegExp())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && parent.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isScript_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && parent.isScript())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isSetterDef_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && parent.isSetterDef())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && parent.isString())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isStringKey_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && parent.isStringKey())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isSwitch_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && parent.isSwitch())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isThis_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && parent.isThis())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isThrow_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && parent.isThrow())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isTrue_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && parent.isTrue())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isTry_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && parent.isTry())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isTypeOf_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && parent.isTypeOf())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && parent.isVar())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isVoid_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && parent.isVoid())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isWhile_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && parent.isWhile())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isWith_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && parent.isWith())){

condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isSetterDef_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && (gramps.isSetterDef() == parent))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator >_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && (gramps.getFirstChild() > parent))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.getFirstChild() && (gramps.getFirstChild() == parent))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getAssignedValue_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && (gramps.getAssignedValue() == parent))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isGetterDef_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && (gramps.isGetterDef() == parent))){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && parent.hasChildren())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isFromExterns_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && parent.isFromExterns())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && parent.hasOneChild())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && parent.hasMoreThanOneChild())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && parent.isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && parent.isUnscopedQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && parent.isVarArgs())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && parent.isOptionalArg())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && parent.isSyntheticBlock())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && parent.wasEmptyNode())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && parent.isOnlyModifiesThisCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && parent.isNoSideEffectsCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && parent.isLocalResultCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && parent.isQuotedString())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isAdd_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && parent.isAdd())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isAnd_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && parent.isAnd())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isArrayLit_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && parent.isArrayLit())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isAssign_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && parent.isAssign())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isAssignAdd_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && parent.isAssignAdd())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isBlock_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && parent.isBlock())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isBreak_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && parent.isBreak())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isCall_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && parent.isCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isCase_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && parent.isCase())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isCatch_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && parent.isCatch())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isComma_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && parent.isComma())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isContinue_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && parent.isContinue())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isDebugger_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && parent.isDebugger())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isDec_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && parent.isDec())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isDefaultCase_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && parent.isDefaultCase())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isDelProp_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && parent.isDelProp())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isDo_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && parent.isDo())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && parent.isEmpty())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isExprResult_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && parent.isExprResult())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isFalse_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && parent.isFalse())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isFor_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && parent.isFor())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isFunction_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && parent.isFunction())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isGetterDef_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && parent.isGetterDef())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isGetElem_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && parent.isGetElem())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && parent.isGetProp())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isHook_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && parent.isHook())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isIf_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && parent.isIf())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isIn_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && parent.isIn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isInc_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && parent.isInc())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isInstanceOf_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && parent.isInstanceOf())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isLabel_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && parent.isLabel())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isLabelName_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && parent.isLabelName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isName_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && parent.isName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isNE_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && parent.isNE())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isNew_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && parent.isNew())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isNot_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && parent.isNot())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isNull_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && parent.isNull())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && parent.isNumber())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isObjectLit_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && parent.isObjectLit())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isOr_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && parent.isOr())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isParamList_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && parent.isParamList())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isRegExp_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && parent.isRegExp())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && parent.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isScript_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && parent.isScript())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isSetterDef_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && parent.isSetterDef())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && parent.isString())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isStringKey_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && parent.isStringKey())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isSwitch_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && parent.isSwitch())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isThis_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && parent.isThis())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isThrow_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && parent.isThrow())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isTrue_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && parent.isTrue())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isTry_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && parent.isTry())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isTypeOf_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && parent.isTypeOf())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && parent.isVar())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isVoid_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && parent.isVoid())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isWhile_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && parent.isWhile())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr MethodInvocation qualifier parent_ter ^ ^ member isWith_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && parent.isWith())){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
if(!parent.hasChildren()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isFromExterns_ter ^ ^ ^ ^ ^ 
if(!parent.isFromExterns()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ ^ 
if(!parent.hasOneChild()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ ^ 
if(!parent.hasMoreThanOneChild()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ ^ 
if(!parent.isQualifiedName()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ ^ 
if(!parent.isUnscopedQualifiedName()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ ^ 
if(!parent.isVarArgs()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ ^ 
if(!parent.isOptionalArg()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ ^ 
if(!parent.isSyntheticBlock()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ ^ 
if(!parent.wasEmptyNode()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ ^ 
if(!parent.isOnlyModifiesThisCall()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ ^ 
if(!parent.isNoSideEffectsCall()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ ^ 
if(!parent.isLocalResultCall()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ ^ 
if(!parent.isQuotedString()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isAdd_ter ^ ^ ^ ^ ^ 
if(!parent.isAdd()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isAnd_ter ^ ^ ^ ^ ^ 
if(!parent.isAnd()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isArrayLit_ter ^ ^ ^ ^ ^ 
if(!parent.isArrayLit()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isAssign_ter ^ ^ ^ ^ ^ 
if(!parent.isAssign()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isAssignAdd_ter ^ ^ ^ ^ ^ 
if(!parent.isAssignAdd()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isBlock_ter ^ ^ ^ ^ ^ 
if(!parent.isBlock()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isBreak_ter ^ ^ ^ ^ ^ 
if(!parent.isBreak()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isCall_ter ^ ^ ^ ^ ^ 
if(!parent.isCall()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isCase_ter ^ ^ ^ ^ ^ 
if(!parent.isCase()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isCatch_ter ^ ^ ^ ^ ^ 
if(!parent.isCatch()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isComma_ter ^ ^ ^ ^ ^ 
if(!parent.isComma()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isContinue_ter ^ ^ ^ ^ ^ 
if(!parent.isContinue()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isDebugger_ter ^ ^ ^ ^ ^ 
if(!parent.isDebugger()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isDec_ter ^ ^ ^ ^ ^ 
if(!parent.isDec()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isDefaultCase_ter ^ ^ ^ ^ ^ 
if(!parent.isDefaultCase()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isDelProp_ter ^ ^ ^ ^ ^ 
if(!parent.isDelProp()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isDo_ter ^ ^ ^ ^ ^ 
if(!parent.isDo()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ ^ 
if(!parent.isEmpty()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isExprResult_ter ^ ^ ^ ^ ^ 
if(!parent.isExprResult()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isFalse_ter ^ ^ ^ ^ ^ 
if(!parent.isFalse()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isFor_ter ^ ^ ^ ^ ^ 
if(!parent.isFor()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isFunction_ter ^ ^ ^ ^ ^ 
if(!parent.isFunction()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isGetterDef_ter ^ ^ ^ ^ ^ 
if(!parent.isGetterDef()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isGetElem_ter ^ ^ ^ ^ ^ 
if(!parent.isGetElem()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ ^ 
if(!parent.isGetProp()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isHook_ter ^ ^ ^ ^ ^ 
if(!parent.isHook()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isIf_ter ^ ^ ^ ^ ^ 
if(!parent.isIf()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isIn_ter ^ ^ ^ ^ ^ 
if(!parent.isIn()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isInc_ter ^ ^ ^ ^ ^ 
if(!parent.isInc()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isInstanceOf_ter ^ ^ ^ ^ ^ 
if(!parent.isInstanceOf()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isLabel_ter ^ ^ ^ ^ ^ 
if(!parent.isLabel()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isLabelName_ter ^ ^ ^ ^ ^ 
if(!parent.isLabelName()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isName_ter ^ ^ ^ ^ ^ 
if(!parent.isName()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isNE_ter ^ ^ ^ ^ ^ 
if(!parent.isNE()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isNew_ter ^ ^ ^ ^ ^ 
if(!parent.isNew()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isNot_ter ^ ^ ^ ^ ^ 
if(!parent.isNot()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isNull_ter ^ ^ ^ ^ ^ 
if(!parent.isNull()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ 
if(!parent.isNumber()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isObjectLit_ter ^ ^ ^ ^ ^ 
if(!parent.isObjectLit()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isOr_ter ^ ^ ^ ^ ^ 
if(!parent.isOr()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isParamList_ter ^ ^ ^ ^ ^ 
if(!parent.isParamList()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isRegExp_ter ^ ^ ^ ^ ^ 
if(!parent.isRegExp()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ 
if(!parent.isReturn()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isScript_ter ^ ^ ^ ^ ^ 
if(!parent.isScript()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isSetterDef_ter ^ ^ ^ ^ ^ 
if(!parent.isSetterDef()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ 
if(!parent.isString()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isStringKey_ter ^ ^ ^ ^ ^ 
if(!parent.isStringKey()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isSwitch_ter ^ ^ ^ ^ ^ 
if(!parent.isSwitch()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isThis_ter ^ ^ ^ ^ ^ 
if(!parent.isThis()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isThrow_ter ^ ^ ^ ^ ^ 
if(!parent.isThrow()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isTrue_ter ^ ^ ^ ^ ^ 
if(!parent.isTrue()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isTry_ter ^ ^ ^ ^ ^ 
if(!parent.isTry()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isTypeOf_ter ^ ^ ^ ^ ^ 
if(!parent.isTypeOf()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ ^ 
if(!parent.isVar()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isVoid_ter ^ ^ ^ ^ ^ 
if(!parent.isVoid()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isWhile_ter ^ ^ ^ ^ ^ 
if(!parent.isWhile()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isWith_ter ^ ^ ^ ^ ^ 
if(!parent.isWith()){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !gramps.hasChildren())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isFromExterns_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !gramps.isFromExterns())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !gramps.hasOneChild())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !gramps.hasMoreThanOneChild())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !gramps.isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !gramps.isUnscopedQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !gramps.isVarArgs())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !gramps.isOptionalArg())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !gramps.isSyntheticBlock())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !gramps.wasEmptyNode())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !gramps.isOnlyModifiesThisCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !gramps.isNoSideEffectsCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !gramps.isLocalResultCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !gramps.isQuotedString())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isAdd_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !gramps.isAdd())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isAnd_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !gramps.isAnd())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isArrayLit_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !gramps.isArrayLit())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isAssign_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !gramps.isAssign())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isAssignAdd_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !gramps.isAssignAdd())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isBlock_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !gramps.isBlock())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isBreak_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !gramps.isBreak())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !gramps.isCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isCase_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !gramps.isCase())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isCatch_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !gramps.isCatch())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isComma_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !gramps.isComma())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isContinue_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !gramps.isContinue())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isDebugger_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !gramps.isDebugger())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isDec_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !gramps.isDec())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isDefaultCase_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !gramps.isDefaultCase())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isDelProp_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !gramps.isDelProp())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isDo_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !gramps.isDo())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !gramps.isEmpty())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isExprResult_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !gramps.isExprResult())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isFalse_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !gramps.isFalse())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isFor_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !gramps.isFor())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isFunction_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !gramps.isFunction())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isGetterDef_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !gramps.isGetterDef())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isGetElem_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !gramps.isGetElem())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !gramps.isGetProp())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isHook_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !gramps.isHook())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isIf_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !gramps.isIf())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isIn_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !gramps.isIn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isInc_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !gramps.isInc())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isInstanceOf_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !gramps.isInstanceOf())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isLabel_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !gramps.isLabel())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isLabelName_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !gramps.isLabelName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isName_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !gramps.isName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isNE_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !gramps.isNE())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isNew_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !gramps.isNew())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isNot_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !gramps.isNot())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isNull_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !gramps.isNull())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !gramps.isNumber())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isObjectLit_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !gramps.isObjectLit())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isOr_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !gramps.isOr())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isParamList_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !gramps.isParamList())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isRegExp_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !gramps.isRegExp())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !gramps.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isScript_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !gramps.isScript())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isSetterDef_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !gramps.isSetterDef())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !gramps.isString())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isStringKey_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !gramps.isStringKey())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isSwitch_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !gramps.isSwitch())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isThis_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !gramps.isThis())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isThrow_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !gramps.isThrow())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isTrue_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !gramps.isTrue())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isTry_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !gramps.isTry())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isTypeOf_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !gramps.isTypeOf())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isVar_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !gramps.isVar())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isVoid_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !gramps.isVoid())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isWhile_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !gramps.isWhile())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier gramps_ter ^ ^ member isWith_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !gramps.isWith())){

condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator <=_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && (gramps.getFirstChild() <= parent))){
StatementExpression expression Assignment expressionl MemberReference member refNode_ter ^ ^ ^ ^ value MethodInvocation qualifier refNode_ter ^ ^ member getParent_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
refNode = refNode.getParent();

condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member ret_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && (gramps.getFirstChild() == ret))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && (gramps.isGetProp() == parent))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member par1 ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && (gramps.getFirstChild() == ))){

condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier val_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && (val.getFirstChild() == parent))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getGrandparent_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.getGrandparent() && (gramps.getFirstChild() == parent))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier Preconditions_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && (Preconditions.getFirstChild() == parent))){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !parent.hasChildren())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isFromExterns_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !parent.isFromExterns())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !parent.hasOneChild())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !parent.hasMoreThanOneChild())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !parent.isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !parent.isUnscopedQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !parent.isVarArgs())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !parent.isOptionalArg())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !parent.isSyntheticBlock())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !parent.wasEmptyNode())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !parent.isOnlyModifiesThisCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !parent.isNoSideEffectsCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !parent.isLocalResultCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !parent.isQuotedString())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isAdd_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !parent.isAdd())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isAnd_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !parent.isAnd())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isArrayLit_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !parent.isArrayLit())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isAssign_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !parent.isAssign())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isAssignAdd_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !parent.isAssignAdd())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isBlock_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !parent.isBlock())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isBreak_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !parent.isBreak())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isCall_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !parent.isCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isCase_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !parent.isCase())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isCatch_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !parent.isCatch())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isComma_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !parent.isComma())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isContinue_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !parent.isContinue())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isDebugger_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !parent.isDebugger())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isDec_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !parent.isDec())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isDefaultCase_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !parent.isDefaultCase())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isDelProp_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !parent.isDelProp())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isDo_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !parent.isDo())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !parent.isEmpty())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isExprResult_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !parent.isExprResult())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isFalse_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !parent.isFalse())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isFor_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !parent.isFor())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isFunction_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !parent.isFunction())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isGetterDef_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !parent.isGetterDef())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isGetElem_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !parent.isGetElem())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !parent.isGetProp())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isHook_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !parent.isHook())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isIf_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !parent.isIf())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isIn_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !parent.isIn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isInc_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !parent.isInc())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isInstanceOf_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !parent.isInstanceOf())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isLabel_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !parent.isLabel())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isLabelName_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !parent.isLabelName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isName_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !parent.isName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isNE_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !parent.isNE())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isNew_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !parent.isNew())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isNot_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !parent.isNot())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isNull_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !parent.isNull())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !parent.isNumber())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isObjectLit_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !parent.isObjectLit())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isOr_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !parent.isOr())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isParamList_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !parent.isParamList())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isRegExp_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !parent.isRegExp())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !parent.isReturn())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isScript_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !parent.isScript())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isSetterDef_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !parent.isSetterDef())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !parent.isString())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isStringKey_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !parent.isStringKey())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isSwitch_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !parent.isSwitch())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isThis_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !parent.isThis())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isThrow_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !parent.isThrow())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isTrue_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !parent.isTrue())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isTry_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !parent.isTry())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isTypeOf_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !parent.isTypeOf())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isVar_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !parent.isVar())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isVoid_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !parent.isVoid())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isWhile_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !parent.isWhile())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier parent_ter ^ ^ member isWith_ter ^ ^ ^ ^ ^ ^ ^ 
if(((gramps.isCall() && (gramps.getFirstChild() == parent)) && !parent.isWith())){

condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getParent_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.getParent() && (gramps.getFirstChild() == parent))){
condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier refs_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && (refs.getFirstChild() == parent))){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member isCall_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.isCall() && (gramps.isCall() && (gramps.getFirstChild() == parent)))){

condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getNode_ter ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ ^ 
if((gramps.getNode() && (gramps.getFirstChild() == parent))){
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if (true) { return false; }

ReturnStatement expression MemberReference member ret_ter ^ ^ ^ ^ ^ 
if (true) { return ret; }

BreakStatement_ter ^ 
break;

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member name_ter ^ ^ ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState((parent.getFirstChild() == name));

StatementExpression expression Assignment expressionl MemberReference member refNode_ter ^ ^ ^ ^ value MethodInvocation qualifier refNode_ter ^ ^ member getParent_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
refNode = refNode.getParent();

StatementExpression expression Assignment expressionl MemberReference member ret_ter ^ ^ ^ ^ value Literal value true_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
ret = true;

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member name_ter ^ ^ ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState((parent.getFirstChild() == name));

StatementExpression expression Assignment expressionl MemberReference member refNode_ter ^ ^ ^ ^ value MethodInvocation qualifier refNode_ter ^ ^ member getParent_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
refNode = refNode.getParent();

StatementExpression expression Assignment expressionl MemberReference member ret_ter ^ ^ ^ ^ value Literal value true_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
ret = true;

ReturnStatement_ter ^ 
return;

control EnhancedForControl var VariableDeclaration type ReferenceType name Reference_ter ^ ^ ^ ^ declarators VariableDeclarator name t_ter ^ ^ ^ ^ ^ ^ iterable MemberReference member refs_ter ^ ^ ^ ^ ^ ^ 
arg 
arg 
(Reference t = ;
:refs)

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.getFirstChild() == parent)){


control EnhancedForControl var VariableDeclaration type ReferenceType name Reference_ter ^ ^ ^ ^ declarators VariableDeclarator name t_ter ^ ^ ^ ^ ^ ^ iterable MemberReference member refs_ter ^ ^ ^ ^ ^ ^ 
arg 
arg 
(Reference t = ;
:refs)

ReturnStatement_ter ^ 
if (true) { return;
 }

BreakStatement_ter ^ 
break;

ContinueStatement_ter ^ 
continue;

StatementExpression expression MethodInvocation qualifier parent_ter ^ ^ member detachChildren_ter ^ ^ ^ ^ ^ 
parent.detachChildren();

StatementExpression expression MethodInvocation qualifier parent_ter ^ ^ member setQuotedString_ter ^ ^ ^ ^ ^ 
parent.setQuotedString();

ContinueStatement_ter ^ 
continue;

StatementExpression expression MethodInvocation qualifier name_ter ^ ^ member detachChildren_ter ^ ^ ^ ^ ^ 
name.detachChildren();

StatementExpression expression MethodInvocation qualifier name_ter ^ ^ member setQuotedString_ter ^ ^ ^ ^ ^ 
name.setQuotedString();

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.getFirstChild() == parent)){

ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
return false;
ReturnStatement expression Literal value true_ter ^ ^ ^ ^ ^ 
if (true) { return true; }


control ForControl init VariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name child_ter ^ ^ initializer MethodInvocation qualifier val_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member child_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ update Assignment expressionl MemberReference member child_ter ^ ^ ^ ^ value MethodInvocation qualifier child_ter ^ ^ member getNext_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ 
arg 
arg 
for(Node child = val.getFirstChild();(child != null);child = child.getNext()) {

ReturnStatement expression MemberReference member ret_ter ^ ^ ^ ^ ^ 
return ret;
LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name refNode_ter ^ ^ initializer MethodInvocation qualifier t_ter ^ ^ member getParent_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node refNode = t.getParent();

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name childVal_ter ^ ^ initializer MethodInvocation qualifier child_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node childVal = child.getFirstChild();

control ForControl init VariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name child_ter ^ ^ initializer MethodInvocation qualifier val_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member child_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ update Assignment expressionl MemberReference member child_ter ^ ^ ^ ^ value MethodInvocation qualifier child_ter ^ ^ member getNext_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ 
arg 
arg 
for(Node child = val.getFirstChild();(child != null);child = child.getNext()) {

control EnhancedForControl var VariableDeclaration type ReferenceType name Reference_ter ^ ^ ^ ^ declarators VariableDeclarator name ref_ter ^ ^ ^ ^ ^ ^ iterable MemberReference member refs_ter ^ ^ ^ ^ ^ ^ 
arg 
arg 
(Reference ref = ;
:refs)

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member name_ter ^ ^ ^ ^ ^ ^ member debug_ter ^ ^ ^ ^ ^ 
Preconditions.debug((parent.getFirstChild() == name));

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name childVal_ter ^ ^ initializer MethodInvocation qualifier child_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node childVal = child.getFirstChild();

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name childVal_ter ^ ^ initializer MethodInvocation qualifier child_ter ^ ^ member getLastChild_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node childVal = child.getLastChild();

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name childVal_ter ^ ^ initializer MethodInvocation qualifier child_ter ^ ^ member getNext_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node childVal = child.getNext();

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name childVal_ter ^ ^ initializer MethodInvocation qualifier child_ter ^ ^ member getLastSibling_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node childVal = child.getLastSibling();

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name childVal_ter ^ ^ initializer MethodInvocation qualifier child_ter ^ ^ member getParent_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node childVal = child.getParent();

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name childVal_ter ^ ^ initializer MethodInvocation qualifier child_ter ^ ^ member detachFromParent_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node childVal = child.detachFromParent();

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name childVal_ter ^ ^ initializer MethodInvocation qualifier child_ter ^ ^ member removeFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node childVal = child.removeFirstChild();

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name childVal_ter ^ ^ initializer MethodInvocation qualifier child_ter ^ ^ member removeChildren_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node childVal = child.removeChildren();

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name childVal_ter ^ ^ initializer MethodInvocation qualifier child_ter ^ ^ member cloneNode_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node childVal = child.cloneNode();

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name childVal_ter ^ ^ initializer MethodInvocation qualifier child_ter ^ ^ member cloneTree_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node childVal = child.cloneTree();

ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if (true) { return false; }

BreakStatement_ter ^ 
break;

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name childVal_ter ^ ^ initializer MethodInvocation qualifier parent_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node childVal = parent.getFirstChild();

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member child_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((child != null)){

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name childVal_ter ^ ^ initializer MethodInvocation qualifier val_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node childVal = val.getFirstChild();

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name childVal_ter ^ ^ initializer MethodInvocation qualifier NodeUtil_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node childVal = NodeUtil.getFirstChild();

ReturnStatement expression MemberReference member ret_ter ^ ^ ^ ^ ^ 
if (true) { return ret; }

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name childVal_ter ^ ^ initializer MethodInvocation qualifier ret_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node childVal = ret.getFirstChild();

ContinueStatement_ter ^ 
continue;

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name childVal_ter ^ ^ initializer MethodInvocation qualifier child_ter ^ ^ member isInlinableObject_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node childVal = child.isInlinableObject();

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name childVal_ter ^ ^ initializer MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node childVal = gramps.getFirstChild();

IfStatement condition MethodInvocation qualifier child_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(child.hasChildren()){
continue;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isFromExterns_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(child.isFromExterns()){
continue;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(child.hasOneChild()){
continue;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(child.hasMoreThanOneChild()){
continue;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(child.isQualifiedName()){
continue;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(child.isUnscopedQualifiedName()){
continue;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(child.isVarArgs()){
continue;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(child.isOptionalArg()){
continue;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(child.isSyntheticBlock()){
continue;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(child.wasEmptyNode()){
continue;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(child.isOnlyModifiesThisCall()){
continue;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(child.isNoSideEffectsCall()){
continue;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(child.isLocalResultCall()){
continue;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(child.isQuotedString()){
continue;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isAdd_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(child.isAdd()){
continue;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isAnd_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(child.isAnd()){
continue;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isArrayLit_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(child.isArrayLit()){
continue;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isAssign_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(child.isAssign()){
continue;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isAssignAdd_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(child.isAssignAdd()){
continue;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isBlock_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(child.isBlock()){
continue;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isBreak_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(child.isBreak()){
continue;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isCall_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(child.isCall()){
continue;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isCase_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(child.isCase()){
continue;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isCatch_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(child.isCatch()){
continue;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isComma_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(child.isComma()){
continue;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isContinue_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(child.isContinue()){
continue;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isDebugger_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(child.isDebugger()){
continue;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isDec_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(child.isDec()){
continue;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isDefaultCase_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(child.isDefaultCase()){
continue;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isDelProp_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(child.isDelProp()){
continue;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isDo_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(child.isDo()){
continue;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(child.isEmpty()){
continue;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isExprResult_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(child.isExprResult()){
continue;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isFalse_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(child.isFalse()){
continue;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isFor_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(child.isFor()){
continue;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isFunction_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(child.isFunction()){
continue;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isGetterDef_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(child.isGetterDef()){
continue;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isGetElem_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(child.isGetElem()){
continue;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(child.isGetProp()){
continue;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isHook_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(child.isHook()){
continue;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isIf_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(child.isIf()){
continue;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isIn_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(child.isIn()){
continue;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isInc_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(child.isInc()){
continue;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isInstanceOf_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(child.isInstanceOf()){
continue;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isLabel_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(child.isLabel()){
continue;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isLabelName_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(child.isLabelName()){
continue;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isName_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(child.isName()){
continue;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isNE_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(child.isNE()){
continue;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isNew_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(child.isNew()){
continue;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isNot_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(child.isNot()){
continue;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isNull_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(child.isNull()){
continue;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(child.isNumber()){
continue;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isObjectLit_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(child.isObjectLit()){
continue;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isOr_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(child.isOr()){
continue;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isParamList_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(child.isParamList()){
continue;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isRegExp_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(child.isRegExp()){
continue;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(child.isReturn()){
continue;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isScript_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(child.isScript()){
continue;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isSetterDef_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(child.isSetterDef()){
continue;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(child.isString()){
continue;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isStringKey_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(child.isStringKey()){
continue;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isSwitch_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(child.isSwitch()){
continue;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isThis_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(child.isThis()){
continue;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isThrow_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(child.isThrow()){
continue;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isTrue_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(child.isTrue()){
continue;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isTry_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(child.isTry()){
continue;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isTypeOf_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(child.isTypeOf()){
continue;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isVar_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(child.isVar()){
continue;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isVoid_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(child.isVoid()){
continue;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isWhile_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(child.isWhile()){
continue;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isWith_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(child.isWith()){
continue;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(child.hasChildren()){
return false;}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isFromExterns_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(child.isFromExterns()){
return false;}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(child.hasOneChild()){
return false;}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(child.hasMoreThanOneChild()){
return false;}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(child.isQualifiedName()){
return false;}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(child.isUnscopedQualifiedName()){
return false;}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(child.isVarArgs()){
return false;}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(child.isOptionalArg()){
return false;}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(child.isSyntheticBlock()){
return false;}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(child.wasEmptyNode()){
return false;}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(child.isOnlyModifiesThisCall()){
return false;}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(child.isNoSideEffectsCall()){
return false;}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(child.isLocalResultCall()){
return false;}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(child.isQuotedString()){
return false;}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isAdd_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(child.isAdd()){
return false;}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isAnd_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(child.isAnd()){
return false;}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isArrayLit_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(child.isArrayLit()){
return false;}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isAssign_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(child.isAssign()){
return false;}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isAssignAdd_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(child.isAssignAdd()){
return false;}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isBlock_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(child.isBlock()){
return false;}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isBreak_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(child.isBreak()){
return false;}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isCall_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(child.isCall()){
return false;}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isCase_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(child.isCase()){
return false;}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isCatch_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(child.isCatch()){
return false;}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isComma_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(child.isComma()){
return false;}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isContinue_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(child.isContinue()){
return false;}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isDebugger_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(child.isDebugger()){
return false;}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isDec_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(child.isDec()){
return false;}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isDefaultCase_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(child.isDefaultCase()){
return false;}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isDelProp_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(child.isDelProp()){
return false;}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isDo_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(child.isDo()){
return false;}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(child.isEmpty()){
return false;}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isExprResult_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(child.isExprResult()){
return false;}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isFalse_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(child.isFalse()){
return false;}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isFor_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(child.isFor()){
return false;}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isFunction_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(child.isFunction()){
return false;}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isGetterDef_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(child.isGetterDef()){
return false;}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isGetElem_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(child.isGetElem()){
return false;}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(child.isGetProp()){
return false;}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isHook_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(child.isHook()){
return false;}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isIf_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(child.isIf()){
return false;}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isIn_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(child.isIn()){
return false;}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isInc_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(child.isInc()){
return false;}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isInstanceOf_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(child.isInstanceOf()){
return false;}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isLabel_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(child.isLabel()){
return false;}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isLabelName_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(child.isLabelName()){
return false;}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isName_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(child.isName()){
return false;}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isNE_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(child.isNE()){
return false;}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isNew_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(child.isNew()){
return false;}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isNot_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(child.isNot()){
return false;}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isNull_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(child.isNull()){
return false;}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(child.isNumber()){
return false;}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isObjectLit_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(child.isObjectLit()){
return false;}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isOr_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(child.isOr()){
return false;}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isParamList_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(child.isParamList()){
return false;}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isRegExp_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(child.isRegExp()){
return false;}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(child.isReturn()){
return false;}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isScript_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(child.isScript()){
return false;}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isSetterDef_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(child.isSetterDef()){
return false;}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(child.isString()){
return false;}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isStringKey_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(child.isStringKey()){
return false;}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isSwitch_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(child.isSwitch()){
return false;}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isThis_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(child.isThis()){
return false;}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isThrow_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(child.isThrow()){
return false;}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isTrue_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(child.isTrue()){
return false;}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isTry_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(child.isTry()){
return false;}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isTypeOf_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(child.isTypeOf()){
return false;}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isVar_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(child.isVar()){
return false;}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isVoid_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(child.isVoid()){
return false;}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isWhile_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(child.isWhile()){
return false;}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isWith_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if(child.isWith()){
return false;}
ReturnStatement_ter ^ 
if (true) { return;
 }

StatementExpression expression Assignment expressionl MemberReference member refNode_ter ^ ^ ^ ^ value MethodInvocation qualifier refNode_ter ^ ^ member getParent_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
refNode = refNode.getParent();

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name childVal_ter ^ ^ initializer MethodInvocation qualifier name_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node childVal = name.getFirstChild();

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name childVal_ter ^ ^ initializer MethodInvocation qualifier child_ter ^ ^ member isGetterDef_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node childVal = child.isGetterDef();

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier parent_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member name_ter ^ ^ ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState((parent.getFirstChild() == name));

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name childVal_ter ^ ^ initializer MethodInvocation qualifier childVal_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node childVal = childVal.getFirstChild();

StatementExpression expression MethodInvocation qualifier child_ter ^ ^ member detachChildren_ter ^ ^ ^ ^ ^ 
child.detachChildren();

StatementExpression expression MethodInvocation qualifier child_ter ^ ^ member setQuotedString_ter ^ ^ ^ ^ ^ 
child.setQuotedString();

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name childVal_ter ^ ^ initializer MethodInvocation qualifier t_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node childVal = t.getFirstChild();

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name childVal_ter ^ ^ initializer MethodInvocation qualifier child_ter ^ ^ member isSetterDef_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node childVal = child.isSetterDef();

StatementExpression expression MethodInvocation qualifier parent_ter ^ ^ member detachChildren_ter ^ ^ ^ ^ ^ 
parent.detachChildren();

StatementExpression expression MethodInvocation qualifier parent_ter ^ ^ member setQuotedString_ter ^ ^ ^ ^ ^ 
parent.setQuotedString();

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name childVal_ter ^ ^ initializer MethodInvocation qualifier child_ter ^ ^ member getAssignedValue_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node childVal = child.getAssignedValue();

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name childVal_ter ^ ^ initializer MethodInvocation qualifier child_ter ^ ^ member isCall_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node childVal = child.isCall();


control EnhancedForControl var VariableDeclaration type ReferenceType name Reference_ter ^ ^ ^ ^ declarators VariableDeclarator name t_ter ^ ^ ^ ^ ^ ^ iterable MemberReference member refs_ter ^ ^ ^ ^ ^ ^ 
arg 
arg 
(Reference t = ;
:refs)

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member child_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if((child != null)){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier child_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!child.hasChildren()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier child_ter ^ ^ member isFromExterns_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!child.isFromExterns()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier child_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!child.hasOneChild()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier child_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!child.hasMoreThanOneChild()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier child_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!child.isQualifiedName()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier child_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!child.isUnscopedQualifiedName()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier child_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!child.isVarArgs()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier child_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!child.isOptionalArg()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier child_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!child.isSyntheticBlock()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier child_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!child.wasEmptyNode()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier child_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!child.isOnlyModifiesThisCall()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier child_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!child.isNoSideEffectsCall()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier child_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!child.isLocalResultCall()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier child_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!child.isQuotedString()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier child_ter ^ ^ member isAdd_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!child.isAdd()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier child_ter ^ ^ member isAnd_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!child.isAnd()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier child_ter ^ ^ member isArrayLit_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!child.isArrayLit()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier child_ter ^ ^ member isAssign_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!child.isAssign()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier child_ter ^ ^ member isAssignAdd_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!child.isAssignAdd()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier child_ter ^ ^ member isBlock_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!child.isBlock()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier child_ter ^ ^ member isBreak_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!child.isBreak()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier child_ter ^ ^ member isCall_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!child.isCall()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier child_ter ^ ^ member isCase_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!child.isCase()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier child_ter ^ ^ member isCatch_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!child.isCatch()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier child_ter ^ ^ member isComma_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!child.isComma()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier child_ter ^ ^ member isContinue_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!child.isContinue()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier child_ter ^ ^ member isDebugger_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!child.isDebugger()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier child_ter ^ ^ member isDec_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!child.isDec()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier child_ter ^ ^ member isDefaultCase_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!child.isDefaultCase()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier child_ter ^ ^ member isDelProp_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!child.isDelProp()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier child_ter ^ ^ member isDo_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!child.isDo()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier child_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!child.isEmpty()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier child_ter ^ ^ member isExprResult_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!child.isExprResult()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier child_ter ^ ^ member isFalse_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!child.isFalse()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier child_ter ^ ^ member isFor_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!child.isFor()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier child_ter ^ ^ member isFunction_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!child.isFunction()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier child_ter ^ ^ member isGetterDef_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!child.isGetterDef()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier child_ter ^ ^ member isGetElem_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!child.isGetElem()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier child_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!child.isGetProp()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier child_ter ^ ^ member isHook_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!child.isHook()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier child_ter ^ ^ member isIf_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!child.isIf()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier child_ter ^ ^ member isIn_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!child.isIn()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier child_ter ^ ^ member isInc_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!child.isInc()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier child_ter ^ ^ member isInstanceOf_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!child.isInstanceOf()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier child_ter ^ ^ member isLabel_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!child.isLabel()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier child_ter ^ ^ member isLabelName_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!child.isLabelName()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier child_ter ^ ^ member isName_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!child.isName()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier child_ter ^ ^ member isNE_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!child.isNE()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier child_ter ^ ^ member isNew_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!child.isNew()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier child_ter ^ ^ member isNot_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!child.isNot()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier child_ter ^ ^ member isNull_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!child.isNull()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier child_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!child.isNumber()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier child_ter ^ ^ member isObjectLit_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!child.isObjectLit()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier child_ter ^ ^ member isOr_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!child.isOr()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier child_ter ^ ^ member isParamList_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!child.isParamList()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier child_ter ^ ^ member isRegExp_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!child.isRegExp()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier child_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!child.isReturn()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier child_ter ^ ^ member isScript_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!child.isScript()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier child_ter ^ ^ member isSetterDef_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!child.isSetterDef()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier child_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!child.isString()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier child_ter ^ ^ member isStringKey_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!child.isStringKey()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier child_ter ^ ^ member isSwitch_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!child.isSwitch()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier child_ter ^ ^ member isThis_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!child.isThis()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier child_ter ^ ^ member isThrow_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!child.isThrow()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier child_ter ^ ^ member isTrue_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!child.isTrue()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier child_ter ^ ^ member isTry_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!child.isTry()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier child_ter ^ ^ member isTypeOf_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!child.isTypeOf()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier child_ter ^ ^ member isVar_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!child.isVar()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier child_ter ^ ^ member isVoid_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!child.isVoid()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier child_ter ^ ^ member isWhile_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!child.isWhile()){
continue;
}
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier child_ter ^ ^ member isWith_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(!child.isWith()){
continue;
}
StatementExpression expression MethodInvocation qualifier val_ter ^ ^ member detachChildren_ter ^ ^ ^ ^ ^ 
val.detachChildren();

StatementExpression expression MethodInvocation qualifier val_ter ^ ^ member setQuotedString_ter ^ ^ ^ ^ ^ 
val.setQuotedString();

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member child_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((child == null)){

IfStatement condition MethodInvocation qualifier child_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(child.hasChildren()){
break;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isFromExterns_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(child.isFromExterns()){
break;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(child.hasOneChild()){
break;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(child.hasMoreThanOneChild()){
break;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(child.isQualifiedName()){
break;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(child.isUnscopedQualifiedName()){
break;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(child.isVarArgs()){
break;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(child.isOptionalArg()){
break;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(child.isSyntheticBlock()){
break;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(child.wasEmptyNode()){
break;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(child.isOnlyModifiesThisCall()){
break;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(child.isNoSideEffectsCall()){
break;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(child.isLocalResultCall()){
break;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(child.isQuotedString()){
break;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isAdd_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(child.isAdd()){
break;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isAnd_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(child.isAnd()){
break;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isArrayLit_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(child.isArrayLit()){
break;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isAssign_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(child.isAssign()){
break;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isAssignAdd_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(child.isAssignAdd()){
break;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isBlock_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(child.isBlock()){
break;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isBreak_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(child.isBreak()){
break;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isCall_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(child.isCall()){
break;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isCase_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(child.isCase()){
break;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isCatch_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(child.isCatch()){
break;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isComma_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(child.isComma()){
break;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isContinue_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(child.isContinue()){
break;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isDebugger_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(child.isDebugger()){
break;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isDec_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(child.isDec()){
break;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isDefaultCase_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(child.isDefaultCase()){
break;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isDelProp_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(child.isDelProp()){
break;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isDo_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(child.isDo()){
break;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(child.isEmpty()){
break;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isExprResult_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(child.isExprResult()){
break;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isFalse_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(child.isFalse()){
break;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isFor_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(child.isFor()){
break;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isFunction_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(child.isFunction()){
break;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isGetterDef_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(child.isGetterDef()){
break;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isGetElem_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(child.isGetElem()){
break;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isGetProp_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(child.isGetProp()){
break;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isHook_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(child.isHook()){
break;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isIf_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(child.isIf()){
break;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isIn_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(child.isIn()){
break;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isInc_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(child.isInc()){
break;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isInstanceOf_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(child.isInstanceOf()){
break;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isLabel_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(child.isLabel()){
break;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isLabelName_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(child.isLabelName()){
break;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isName_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(child.isName()){
break;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isNE_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(child.isNE()){
break;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isNew_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(child.isNew()){
break;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isNot_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(child.isNot()){
break;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isNull_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(child.isNull()){
break;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isNumber_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(child.isNumber()){
break;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isObjectLit_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(child.isObjectLit()){
break;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isOr_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(child.isOr()){
break;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isParamList_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(child.isParamList()){
break;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isRegExp_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(child.isRegExp()){
break;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isReturn_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(child.isReturn()){
break;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isScript_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(child.isScript()){
break;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isSetterDef_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(child.isSetterDef()){
break;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isString_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(child.isString()){
break;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isStringKey_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(child.isStringKey()){
break;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isSwitch_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(child.isSwitch()){
break;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isThis_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(child.isThis()){
break;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isThrow_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(child.isThrow()){
break;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isTrue_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(child.isTrue()){
break;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isTry_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(child.isTry()){
break;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isTypeOf_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(child.isTypeOf()){
break;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isVar_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(child.isVar()){
break;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isVoid_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(child.isVoid()){
break;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isWhile_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(child.isWhile()){
break;
}
IfStatement condition MethodInvocation qualifier child_ter ^ ^ member isWith_ter ^ ^ ^ ^ ^ 
BreakStatement_ter ^ 
if(child.isWith()){
break;
}
StatementExpression expression Assignment expressionl MemberReference member ret_ter ^ ^ ^ ^ value Literal value true_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
ret = true;

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member child_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if((child == null)){
continue;
}
StatementExpression expression MethodInvocation qualifier child_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ 
child.getFirstChild();

control ForControl init VariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name child_ter ^ ^ initializer MethodInvocation qualifier val_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member child_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ update Assignment expressionl MemberReference member child_ter ^ ^ ^ ^ value MethodInvocation qualifier child_ter ^ ^ member getNext_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ ^ 
arg 
arg 
for(Node child = val.getFirstChild();(child != null);child = child.getNext()) {

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gramps_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr MemberReference member parent_ter ^ ^ ^ ^ ^ ^ ^ 
if((gramps.getFirstChild() == parent)){

LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name childVal_ter ^ ^ initializer MethodInvocation qualifier child_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
final Node childVal = child.getFirstChild();

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ arguments TypeArgument pattern_type ?_ter ^ ^ ^ ^ ^ ^ declarators VariableDeclarator name childVal_ter ^ ^ initializer MethodInvocation qualifier child_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
arg ?
arg ?
Node<?> childVal = child.getFirstChild();

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member child_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value false_ter ^ ^ ^ ^ ^ 
if((child == null)){
return false;}
stderr: 