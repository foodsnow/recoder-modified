stdout: condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ 
if((n.getFirstChild() == null)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getLastChild_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ 
if((n.getLastChild() == null)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getNext_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ 
if((n.getNext() == null)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getLastSibling_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ 
if((n.getLastSibling() == null)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getParent_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ 
if((n.getParent() == null)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member detachFromParent_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ 
if((n.detachFromParent() == null)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member removeFirstChild_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ 
if((n.removeFirstChild() == null)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member removeChildren_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ 
if((n.removeChildren() == null)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member cloneNode_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ 
if((n.cloneNode() == null)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member cloneTree_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ 
if((n.cloneTree() == null)){
condition BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getParent_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ 
if((n.getParent() != null)){
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
if(n.hasChildren()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ ^ 
if(n.hasOneChild()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ ^ 
if(n.hasMoreThanOneChild()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member hasSideEffects_ter ^ ^ ^ ^ ^ 
if(n.hasSideEffects()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ ^ 
if(n.isQualifiedName()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ ^ 
if(n.isUnscopedQualifiedName()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ ^ 
if(n.isVarArgs()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ ^ 
if(n.isOptionalArg()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ ^ 
if(n.isSyntheticBlock()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ ^ 
if(n.wasEmptyNode()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ ^ 
if(n.isOnlyModifiesThisCall()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ ^ 
if(n.isNoSideEffectsCall()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ ^ 
if(n.isLocalResultCall()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ ^ 
if(n.isQuotedString()){

condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gNode_ter ^ ^ member getParent_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ 
if((gNode.getParent() == null)){
BreakStatement_ter ^ 
break;

condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getName_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ 
if((n.getName() == null)){
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
if(!n.hasChildren()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ ^ 
if(!n.hasOneChild()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ ^ 
if(!n.hasMoreThanOneChild()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member hasSideEffects_ter ^ ^ ^ ^ ^ 
if(!n.hasSideEffects()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ ^ 
if(!n.isQualifiedName()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ ^ 
if(!n.isUnscopedQualifiedName()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ ^ 
if(!n.isVarArgs()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ ^ 
if(!n.isOptionalArg()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ ^ 
if(!n.isSyntheticBlock()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ ^ 
if(!n.wasEmptyNode()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ ^ 
if(!n.isOnlyModifiesThisCall()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ ^ 
if(!n.isNoSideEffectsCall()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ ^ 
if(!n.isLocalResultCall()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ ^ 
if(!n.isQuotedString()){

condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier par1 ^ ^ member getParent_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ 
if((.getParent() == null)){

ReturnStatement expression MemberReference member n_ter ^ ^ ^ ^ ^ 
if (true) { return n; }

condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getValue_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ 
if((n.getValue() == null)){
IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getParent_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.getParent() == null) || n.hasChildren())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getParent_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.getParent() == null) || n.hasOneChild())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getParent_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.getParent() == null) || n.hasMoreThanOneChild())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getParent_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member hasSideEffects_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.getParent() == null) || n.hasSideEffects())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getParent_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.getParent() == null) || n.isQualifiedName())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getParent_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.getParent() == null) || n.isUnscopedQualifiedName())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getParent_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.getParent() == null) || n.isVarArgs())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getParent_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.getParent() == null) || n.isOptionalArg())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getParent_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.getParent() == null) || n.isSyntheticBlock())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getParent_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.getParent() == null) || n.wasEmptyNode())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getParent_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.getParent() == null) || n.isOnlyModifiesThisCall())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getParent_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.getParent() == null) || n.isNoSideEffectsCall())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getParent_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.getParent() == null) || n.isLocalResultCall())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getParent_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.getParent() == null) || n.isQuotedString())){

condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getOutEdges_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ 
if((n.getOutEdges() == null)){
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member getParent_ter ^ ^ ^ ^ ^ 
if(n.getParent()){

condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getDestination_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ 
if((n.getDestination() == null)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ 
if((n.getType() == null)){
IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getParent_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.getParent() == null) || !n.hasChildren())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getParent_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.getParent() == null) || !n.hasOneChild())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getParent_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.getParent() == null) || !n.hasMoreThanOneChild())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getParent_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member hasSideEffects_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.getParent() == null) || !n.hasSideEffects())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getParent_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.getParent() == null) || !n.isQualifiedName())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getParent_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.getParent() == null) || !n.isUnscopedQualifiedName())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getParent_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.getParent() == null) || !n.isVarArgs())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getParent_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.getParent() == null) || !n.isOptionalArg())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getParent_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.getParent() == null) || !n.isSyntheticBlock())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getParent_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.getParent() == null) || !n.wasEmptyNode())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getParent_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.getParent() == null) || !n.isOnlyModifiesThisCall())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getParent_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.getParent() == null) || !n.isNoSideEffectsCall())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getParent_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.getParent() == null) || !n.isLocalResultCall())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getParent_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.getParent() == null) || !n.isQuotedString())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getParent_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.getParent() == null) && n.hasChildren())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getParent_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.getParent() == null) && n.hasOneChild())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getParent_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.getParent() == null) && n.hasMoreThanOneChild())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getParent_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member hasSideEffects_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.getParent() == null) && n.hasSideEffects())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getParent_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.getParent() == null) && n.isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getParent_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.getParent() == null) && n.isUnscopedQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getParent_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.getParent() == null) && n.isVarArgs())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getParent_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.getParent() == null) && n.isOptionalArg())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getParent_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.getParent() == null) && n.isSyntheticBlock())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getParent_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.getParent() == null) && n.wasEmptyNode())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getParent_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.getParent() == null) && n.isOnlyModifiesThisCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getParent_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.getParent() == null) && n.isNoSideEffectsCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getParent_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.getParent() == null) && n.isLocalResultCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getParent_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.getParent() == null) && n.isQuotedString())){

ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if (true) { return null; }

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getParent_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.getParent() == null) && !n.hasChildren())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getParent_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.getParent() == null) && !n.hasOneChild())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getParent_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.getParent() == null) && !n.hasMoreThanOneChild())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getParent_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member hasSideEffects_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.getParent() == null) && !n.hasSideEffects())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getParent_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.getParent() == null) && !n.isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getParent_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.getParent() == null) && !n.isUnscopedQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getParent_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.getParent() == null) && !n.isVarArgs())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getParent_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.getParent() == null) && !n.isOptionalArg())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getParent_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.getParent() == null) && !n.isSyntheticBlock())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getParent_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.getParent() == null) && !n.wasEmptyNode())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getParent_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.getParent() == null) && !n.isOnlyModifiesThisCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getParent_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.getParent() == null) && !n.isNoSideEffectsCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getParent_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.getParent() == null) && !n.isLocalResultCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getParent_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.getParent() == null) && !n.isQuotedString())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getNext_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member getType_ter ^ ^ ^ ^ member getNext_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member FUNCTION_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((n.getNext() == null) || (n.getNext().getType() == Token.FUNCTION))){

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getNext_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.getNext() == null)){

condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier loc1 ^ ^ member getParent_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ 
if((.getParent() == null)){

condition BinaryOperation operator >=_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getParent_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ 
if((n.getParent() >= null)){
StatementExpression expression MethodInvocation arguments MemberReference member n_ter ^ ^ ^ ^ member removeDeadExprStatementSafely_ter ^ ^ ^ ^ ^ 
removeDeadExprStatementSafely(n);

condition BinaryOperation operator >_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getParent_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ 
if((n.getParent() > null)){
StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier outEdges_ter ^ ^ selectors MethodInvocation member getValue_ter ^ ^ ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MemberReference qualifier Branch_ter ^ ^ member UNCOND_ter ^ ^ ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState((outEdges.get(0).getValue() == Branch.UNCOND));

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier outEdges_ter ^ ^ member size_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ 
if((outEdges.size() == 1)){

condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier ControlFlowAnalysis_ter ^ ^ member getParent_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ 
if((ControlFlowAnalysis.getParent() == null)){
IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member getType_ter ^ ^ ^ ^ member getNext_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member FUNCTION_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.getNext().getType() == Token.FUNCTION)){

condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier curCfg_ter ^ ^ member getParent_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ 
if((curCfg.getParent() == null)){
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ ^ 
if(!n.isEmpty()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference member n_ter ^ ^ ^ ^ ^ 
if(n.hasChildren()){
return n;}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference member n_ter ^ ^ ^ ^ ^ 
if(n.hasOneChild()){
return n;}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference member n_ter ^ ^ ^ ^ ^ 
if(n.hasMoreThanOneChild()){
return n;}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member hasSideEffects_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference member n_ter ^ ^ ^ ^ ^ 
if(n.hasSideEffects()){
return n;}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference member n_ter ^ ^ ^ ^ ^ 
if(n.isQualifiedName()){
return n;}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference member n_ter ^ ^ ^ ^ ^ 
if(n.isUnscopedQualifiedName()){
return n;}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference member n_ter ^ ^ ^ ^ ^ 
if(n.isVarArgs()){
return n;}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference member n_ter ^ ^ ^ ^ ^ 
if(n.isOptionalArg()){
return n;}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference member n_ter ^ ^ ^ ^ ^ 
if(n.isSyntheticBlock()){
return n;}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference member n_ter ^ ^ ^ ^ ^ 
if(n.wasEmptyNode()){
return n;}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference member n_ter ^ ^ ^ ^ ^ 
if(n.isOnlyModifiesThisCall()){
return n;}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference member n_ter ^ ^ ^ ^ ^ 
if(n.isNoSideEffectsCall()){
return n;}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference member n_ter ^ ^ ^ ^ ^ 
if(n.isLocalResultCall()){
return n;}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference member n_ter ^ ^ ^ ^ ^ 
if(n.isQuotedString()){
return n;}
ReturnStatement_ter ^ 
if (true) { return;
 }

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member getParent_ter ^ ^ ^ ^ ^ 
if(!n.getParent()){

ContinueStatement_ter ^ 
continue;

condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier outEdges_ter ^ ^ member getParent_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ 
if((outEdges.getParent() == null)){
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ ^ 
if(n.isEmpty()){

ReturnStatement expression MemberReference member fallThrough_ter ^ ^ ^ ^ ^ 
if (true) { return fallThrough; }

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getParent_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getParent_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((n.getParent() == null) || (n.getParent() == null))){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getParent_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((n != null) || (n.getParent() == null))){

condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getParent_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ 
if((n.getParent() == 1)){
IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getParent_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getParent_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((n.getParent() == null) || (n.getParent() != null))){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getParent_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((n.getParent() == null) || (n != null))){

condition BinaryOperation operator <=_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getParent_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ 
if((n.getParent() <= null)){
IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getParent_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.getParent() == null) || !n.isEmpty())){

StatementExpression expression MethodInvocation qualifier n_ter ^ ^ member detachChildren_ter ^ ^ ^ ^ ^ 
n.detachChildren();

StatementExpression expression MethodInvocation qualifier n_ter ^ ^ member setQuotedString_ter ^ ^ ^ ^ ^ 
n.setQuotedString();

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getParent_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getParent_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((n.getParent() == null) && (n.getParent() != null))){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getParent_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ ^ ^ ^ 
if(((n.getParent() == null) || n.isEmpty())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getParent_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((n != null) && (n.getParent() == null))){

LocalVariableDeclaration type ReferenceType name List_ter ^ ^ arguments TypeArgument type ReferenceType name DiGraphEdge_ter ^ ^ arguments TypeArgument type ReferenceType name Node_ter ^ ^ ^ ^ ^ TypeArgument type ReferenceType name Branch_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ declarators VariableDeclarator name outEdges_ter ^ ^ initializer MethodInvocation qualifier gNode_ter ^ ^ member getDestination_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
arg Node, Branch
arg DiGraphEdge<Node, Branch>
arg 
arg 
arg Node, Branch
arg DiGraphEdge<Node, Branch>
List<DiGraphEdge<Node, Branch>> outEdges = gNode.getDestination();

LocalVariableDeclaration type ReferenceType name List_ter ^ ^ arguments TypeArgument type ReferenceType name DiGraphEdge_ter ^ ^ arguments TypeArgument type ReferenceType name Node_ter ^ ^ ^ ^ ^ TypeArgument type ReferenceType name Branch_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ declarators VariableDeclarator name outEdges_ter ^ ^ initializer MethodInvocation qualifier gNode_ter ^ ^ member getParent_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
arg Node, Branch
arg DiGraphEdge<Node, Branch>
arg 
arg 
arg Node, Branch
arg DiGraphEdge<Node, Branch>
List<DiGraphEdge<Node, Branch>> outEdges = gNode.getParent();

LocalVariableDeclaration type ReferenceType name List_ter ^ ^ arguments TypeArgument type ReferenceType name DiGraphEdge_ter ^ ^ arguments TypeArgument type ReferenceType name Node_ter ^ ^ ^ ^ ^ TypeArgument type ReferenceType name Branch_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ declarators VariableDeclarator name outEdges_ter ^ ^ initializer MethodInvocation qualifier gNode_ter ^ ^ member getValue_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
arg Node, Branch
arg DiGraphEdge<Node, Branch>
arg 
arg 
arg Node, Branch
arg DiGraphEdge<Node, Branch>
List<DiGraphEdge<Node, Branch>> outEdges = gNode.getValue();

LocalVariableDeclaration type ReferenceType name List_ter ^ ^ arguments TypeArgument pattern_type ?_ter ^ ^ ^ ^ ^ ^ declarators VariableDeclarator name outEdges_ter ^ ^ initializer MethodInvocation qualifier gNode_ter ^ ^ member getOutEdges_ter ^ ^ ^ ^ ^ ^ ^ 
arg ?
arg ?
List<?> outEdges = gNode.getOutEdges();

LocalVariableDeclaration type ReferenceType name List_ter ^ ^ ^ ^ declarators VariableDeclarator name outEdges_ter ^ ^ initializer MethodInvocation qualifier gNode_ter ^ ^ member getOutEdges_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
List outEdges = gNode.getOutEdges();

LocalVariableDeclaration type ReferenceType name List_ter ^ ^ arguments TypeArgument type ReferenceType name DiGraphEdge_ter ^ ^ arguments TypeArgument type ReferenceType name Node_ter ^ ^ ^ ^ ^ TypeArgument type ReferenceType name Branch_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ declarators VariableDeclarator name outEdges_ter ^ ^ initializer MethodInvocation qualifier gNode_ter ^ ^ member getOutEdges_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
arg Node, Branch
arg DiGraphEdge<Node, Branch>
arg 
arg 
arg Node, Branch
arg DiGraphEdge<Node, Branch>
List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();

LocalVariableDeclaration type ReferenceType name List_ter ^ ^ arguments TypeArgument type ReferenceType name DiGraphEdge_ter ^ ^ arguments TypeArgument type ReferenceType name Node_ter ^ ^ ^ ^ ^ TypeArgument type ReferenceType name Branch_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ declarators VariableDeclarator name outEdges_ter ^ ^ initializer MethodInvocation qualifier gNode_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
arg Node, Branch
arg DiGraphEdge<Node, Branch>
arg 
arg 
arg Node, Branch
arg DiGraphEdge<Node, Branch>
List<DiGraphEdge<Node, Branch>> outEdges = gNode.hasChildren();

LocalVariableDeclaration type ReferenceType name List_ter ^ ^ arguments TypeArgument type ReferenceType name DiGraphEdge_ter ^ ^ arguments TypeArgument type ReferenceType name Node_ter ^ ^ ^ ^ ^ TypeArgument type ReferenceType name Branch_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ declarators VariableDeclarator name outEdges_ter ^ ^ initializer MethodInvocation qualifier gNode_ter ^ ^ member getType_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
arg Node, Branch
arg DiGraphEdge<Node, Branch>
arg 
arg 
arg Node, Branch
arg DiGraphEdge<Node, Branch>
List<DiGraphEdge<Node, Branch>> outEdges = gNode.getType();

LocalVariableDeclaration type ReferenceType name List_ter ^ ^ arguments TypeArgument type ReferenceType name DiGraphEdge_ter ^ ^ arguments TypeArgument type ReferenceType name Node_ter ^ ^ ^ ^ ^ TypeArgument type ReferenceType name Branch_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ declarators VariableDeclarator name outEdges_ter ^ ^ initializer MethodInvocation qualifier gNode_ter ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
arg Node, Branch
arg DiGraphEdge<Node, Branch>
arg 
arg 
arg Node, Branch
arg DiGraphEdge<Node, Branch>
List<DiGraphEdge<Node, Branch>> outEdges = gNode.tryRemoveUnconditionalBranching();

BreakStatement_ter ^ 
break;

LocalVariableDeclaration type ReferenceType name List_ter ^ ^ arguments TypeArgument type ReferenceType name DiGraphEdge_ter ^ ^ arguments TypeArgument type ReferenceType name Node_ter ^ ^ ^ ^ ^ TypeArgument type ReferenceType name Branch_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ declarators VariableDeclarator name outEdges_ter ^ ^ initializer MethodInvocation qualifier n_ter ^ ^ member getOutEdges_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
arg Node, Branch
arg DiGraphEdge<Node, Branch>
arg 
arg 
arg Node, Branch
arg DiGraphEdge<Node, Branch>
List<DiGraphEdge<Node, Branch>> outEdges = n.getOutEdges();

LocalVariableDeclaration type ReferenceType name List_ter ^ ^ arguments TypeArgument type ReferenceType name DiGraphEdge_ter ^ ^ arguments TypeArgument type ReferenceType name Node_ter ^ ^ ^ ^ ^ TypeArgument type ReferenceType name Branch_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ declarators VariableDeclarator name outEdges_ter ^ ^ initializer MethodInvocation qualifier par1 ^ ^ member getOutEdges_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
arg Node, Branch
arg DiGraphEdge<Node, Branch>
arg 
arg 
arg Node, Branch
arg DiGraphEdge<Node, Branch>
List<DiGraphEdge<Node, Branch>> outEdges = .getOutEdges();


LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name List_ter ^ ^ arguments TypeArgument type ReferenceType name DiGraphEdge_ter ^ ^ arguments TypeArgument type ReferenceType name Node_ter ^ ^ ^ ^ ^ TypeArgument type ReferenceType name Branch_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ declarators VariableDeclarator name outEdges_ter ^ ^ initializer MethodInvocation qualifier gNode_ter ^ ^ member getOutEdges_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
arg Node, Branch
arg DiGraphEdge<Node, Branch>
arg 
arg 
arg Node, Branch
arg DiGraphEdge<Node, Branch>
final List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();

LocalVariableDeclaration type ReferenceType name List_ter ^ ^ arguments TypeArgument type ReferenceType name Node_ter ^ ^ ^ ^ ^ TypeArgument type ReferenceType name Branch_ter ^ ^ ^ ^ ^ ^ ^ ^ declarators VariableDeclarator name outEdges_ter ^ ^ initializer MethodInvocation qualifier gNode_ter ^ ^ member getOutEdges_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
arg Node, Branch
arg 
arg 
arg Node, Branch
List<Node, Branch> outEdges = gNode.getOutEdges();


ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if (true) { return null; }

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member gNode_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((gNode != null)){

ReturnStatement expression MemberReference member n_ter ^ ^ ^ ^ ^ 
if (true) { return n; }

LocalVariableDeclaration type ReferenceType name List_ter ^ ^ arguments TypeArgument type ReferenceType name DiGraphEdge_ter ^ ^ arguments TypeArgument type ReferenceType name Node_ter ^ ^ ^ ^ ^ TypeArgument type ReferenceType name Branch_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ declarators VariableDeclarator name outEdges_ter ^ ^ initializer MethodInvocation qualifier loc1 ^ ^ member getOutEdges_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
arg Node, Branch
arg DiGraphEdge<Node, Branch>
arg 
arg 
arg Node, Branch
arg DiGraphEdge<Node, Branch>
List<DiGraphEdge<Node, Branch>> outEdges = .getOutEdges();


ReturnStatement expression MemberReference member fallThrough_ter ^ ^ ^ ^ ^ 
if (true) { return fallThrough; }

LocalVariableDeclaration type ReferenceType name List_ter ^ ^ arguments TypeArgument type ReferenceType name Branch_ter ^ ^ ^ ^ ^ ^ ^ ^ declarators VariableDeclarator name outEdges_ter ^ ^ initializer MethodInvocation qualifier gNode_ter ^ ^ member getOutEdges_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg Branch
arg 
arg Branch
List<Branch> outEdges = gNode.getOutEdges();

LocalVariableDeclaration type ReferenceType name List_ter ^ ^ arguments TypeArgument type ReferenceType name Node_ter ^ ^ ^ ^ ^ ^ ^ ^ declarators VariableDeclarator name outEdges_ter ^ ^ initializer MethodInvocation qualifier gNode_ter ^ ^ member getOutEdges_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg Node
arg 
arg Node
List<Node> outEdges = gNode.getOutEdges();

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier outEdges_ter ^ ^ selectors MethodInvocation member getValue_ter ^ ^ ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MemberReference qualifier Branch_ter ^ ^ member UNCOND_ter ^ ^ ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState((outEdges.get(0).getValue() == Branch.UNCOND));

StatementExpression expression MethodInvocation arguments MemberReference member n_ter ^ ^ ^ ^ member removeDeadExprStatementSafely_ter ^ ^ ^ ^ ^ 
removeDeadExprStatementSafely(n);

ContinueStatement_ter ^ 
continue;

StatementExpression expression Assignment expressionl MemberReference member outEdges_ter ^ ^ ^ ^ value MethodInvocation qualifier gNode_ter ^ ^ member getOutEdges_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
outEdges = gNode.getOutEdges();

LocalVariableDeclaration type ReferenceType name List_ter ^ ^ arguments TypeArgument type ReferenceType name DiGraphEdge_ter ^ ^ arguments TypeArgument type ReferenceType name Node_ter ^ ^ ^ ^ ^ TypeArgument type ReferenceType name Branch_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ declarators VariableDeclarator name outEdges_ter ^ ^ initializer Cast type ReferenceType name DiGraphEdge_ter ^ ^ arguments TypeArgument type ReferenceType name Node_ter ^ ^ ^ ^ ^ TypeArgument type ReferenceType name Branch_ter ^ ^ ^ ^ ^ ^ ^ ^ expression MethodInvocation qualifier gNode_ter ^ ^ member getOutEdges_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
arg Node, Branch
arg DiGraphEdge<Node, Branch>
arg 
arg 
arg Node, Branch
arg 
arg 
arg Node, Branch
arg DiGraphEdge<Node, Branch>
arg 
arg 
arg Node, Branch
List<DiGraphEdge<Node, Branch>> outEdges = (DiGraphEdge<Node, Branch>)gNode.getOutEdges();

LocalVariableDeclaration type ReferenceType name DiGraphEdge_ter ^ ^ ^ ^ declarators VariableDeclarator name outEdges_ter ^ ^ initializer MethodInvocation qualifier gNode_ter ^ ^ member getOutEdges_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
DiGraphEdge outEdges = gNode.getOutEdges();

StatementExpression expression MethodInvocation qualifier gNode_ter ^ ^ member getOutEdges_ter ^ ^ ^ ^ ^ 
gNode.getOutEdges();

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member gNode_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ 
if((gNode != 1)){

LocalVariableDeclaration type ReferenceType name DiGraphNode_ter ^ ^ arguments TypeArgument type ReferenceType name Node_ter ^ ^ ^ ^ ^ TypeArgument type ReferenceType name Branch_ter ^ ^ ^ ^ ^ ^ ^ ^ declarators VariableDeclarator name outEdges_ter ^ ^ initializer MethodInvocation qualifier gNode_ter ^ ^ member getOutEdges_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
arg Node, Branch
arg 
arg 
arg Node, Branch
DiGraphNode<Node, Branch> outEdges = gNode.getOutEdges();

LocalVariableDeclaration type ReferenceType name DiGraphNode_ter ^ ^ arguments TypeArgument type ReferenceType name Node_ter ^ ^ ^ ^ ^ TypeArgument type ReferenceType name Branch_ter ^ ^ ^ ^ ^ ^ ^ ^ declarators VariableDeclarator name gNode_ter ^ ^ initializer MethodInvocation qualifier curCfg_ter ^ ^ arguments MemberReference member n_ter ^ ^ ^ ^ member getDirectedGraphNode_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
arg Node, Branch
arg 
arg 
arg Node, Branch
DiGraphNode<Node, Branch> gNode = curCfg.getDirectedGraphNode(n);

LocalVariableDeclaration type ReferenceType name List_ter ^ ^ arguments TypeArgument type ReferenceType name DiGraphEdge_ter ^ ^ arguments TypeArgument type ReferenceType name Node_ter ^ ^ ^ ^ ^ TypeArgument type ReferenceType name Branch_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ declarators VariableDeclarator name outEdges_ter ^ ^ initializer MethodInvocation qualifier gNode_ter ^ ^ arguments Literal value false_ter ^ ^ ^ ^ member getOutEdges_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
arg Node, Branch
arg DiGraphEdge<Node, Branch>
arg 
arg 
arg Node, Branch
arg DiGraphEdge<Node, Branch>
List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges(false);

LocalVariableDeclaration type ReferenceType name List_ter ^ ^ arguments TypeArgument type ReferenceType name DiGraphEdge_ter ^ ^ arguments TypeArgument type ReferenceType name Node_ter ^ ^ ^ ^ ^ TypeArgument type ReferenceType name Branch_ter ^ ^ ^ ^ ^ ^ ^ ^ pattern_type ?_ter ^ ^ ^ ^ ^ ^ declarators VariableDeclarator name outEdges_ter ^ ^ initializer MethodInvocation qualifier gNode_ter ^ ^ member getOutEdges_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
arg Node, Branch
arg ?
arg 
arg 
arg Node, Branch
arg ?
List<?> outEdges = gNode.getOutEdges();

ReturnStatement_ter ^ 
if (true) { return;
 }

LocalVariableDeclaration type ReferenceType name DiGraphEdge_ter ^ ^ arguments TypeArgument pattern_type ?_ter ^ ^ ^ ^ ^ ^ declarators VariableDeclarator name outEdges_ter ^ ^ initializer MethodInvocation qualifier gNode_ter ^ ^ member getOutEdges_ter ^ ^ ^ ^ ^ ^ ^ 
arg ?
arg ?
DiGraphEdge<?> outEdges = gNode.getOutEdges();

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name first_ter ^ ^ initializer MethodInvocation qualifier n_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node first = n.getFirstChild();

LocalVariableDeclaration type ReferenceType name List_ter ^ ^ arguments TypeArgument type ReferenceType name DiGraphEdge_ter ^ ^ arguments TypeArgument type ReferenceType name Node_ter ^ ^ ^ ^ ^ TypeArgument type ReferenceType name Branch_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ declarators VariableDeclarator name outEdges_ter ^ ^ initializer MethodInvocation qualifier gNode_ter ^ ^ arguments Literal value true_ter ^ ^ ^ ^ member getOutEdges_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
arg Node, Branch
arg DiGraphEdge<Node, Branch>
arg 
arg 
arg Node, Branch
arg DiGraphEdge<Node, Branch>
List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges(true);

LocalVariableDeclaration type ReferenceType name List_ter ^ ^ arguments TypeArgument type ReferenceType name DiGraphEdge_ter ^ ^ arguments TypeArgument type ReferenceType name Node_ter ^ ^ ^ ^ ^ TypeArgument type ReferenceType name Branch_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ declarators VariableDeclarator name outEdges_ter ^ ^ initializer MethodInvocation qualifier gNode_ter ^ ^ arguments MemberReference member n_ter ^ ^ ^ ^ member getOutEdges_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
arg Node, Branch
arg DiGraphEdge<Node, Branch>
arg 
arg 
arg Node, Branch
arg DiGraphEdge<Node, Branch>
List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges(n);

LocalVariableDeclaration type ReferenceType name List_ter ^ ^ arguments TypeArgument type ReferenceType name DiGraphEdge_ter ^ ^ arguments TypeArgument type ReferenceType name Node_ter ^ ^ ^ ^ ^ TypeArgument type ReferenceType name Branch_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ declarators VariableDeclarator name outEdges_ter ^ ^ initializer MethodInvocation qualifier gNode_ter ^ ^ arguments Literal value null_ter ^ ^ ^ ^ member getOutEdges_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
arg Node, Branch
arg DiGraphEdge<Node, Branch>
arg 
arg 
arg Node, Branch
arg DiGraphEdge<Node, Branch>
List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges(null);

LocalVariableDeclaration type ReferenceType name List_ter ^ ^ arguments TypeArgument type ReferenceType name Node_ter ^ ^ ^ ^ pattern_type ?_ter ^ ^ ^ ^ ^ ^ declarators VariableDeclarator name outEdges_ter ^ ^ initializer MethodInvocation qualifier gNode_ter ^ ^ member getOutEdges_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg ?
arg 
arg ?
List<?> outEdges = gNode.getOutEdges();

LocalVariableDeclaration type ReferenceType name List_ter ^ ^ arguments TypeArgument type ReferenceType name DiGraphEdge_ter ^ ^ arguments TypeArgument type ReferenceType name Node_ter ^ ^ ^ ^ ^ TypeArgument type ReferenceType name Branch_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ declarators VariableDeclarator name outEdges_ter ^ ^ initializer MethodInvocation arguments MemberReference member n_ter ^ ^ ^ ^ member removeDeadExprStatementSafely_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
arg Node, Branch
arg DiGraphEdge<Node, Branch>
arg 
arg 
arg Node, Branch
arg DiGraphEdge<Node, Branch>
List<DiGraphEdge<Node, Branch>> outEdges = removeDeadExprStatementSafely(n);

LocalVariableDeclaration type ReferenceType name List_ter ^ ^ arguments TypeArgument type ReferenceType name DiGraphEdge_ter ^ ^ arguments TypeArgument type ReferenceType name Node_ter ^ ^ ^ ^ ^ TypeArgument type ReferenceType name Branch_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ declarators VariableDeclarator name outEdges_ter ^ ^ initializer MethodInvocation qualifier gNode_ter ^ ^ arguments This_ter ^ ^ member getOutEdges_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
arg Node, Branch
arg DiGraphEdge<Node, Branch>
arg 
arg 
arg Node, Branch
arg DiGraphEdge<Node, Branch>
List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges(this);

LocalVariableDeclaration type ReferenceType name List_ter ^ ^ arguments TypeArgument type ReferenceType name DiGraphEdge_ter ^ ^ arguments TypeArgument type ReferenceType name Node_ter ^ ^ ^ ^ ^ TypeArgument type ReferenceType name Branch_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ TypeArgument pattern_type ?_ter ^ ^ ^ ^ ^ ^ declarators VariableDeclarator name outEdges_ter ^ ^ initializer MethodInvocation qualifier gNode_ter ^ ^ member getOutEdges_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
arg Node, Branch
arg DiGraphEdge<Node, Branch>, ?
arg 
arg 
arg Node, Branch
arg DiGraphEdge<Node, Branch>, ?
List<DiGraphEdge<Node, Branch>, ?> outEdges = gNode.getOutEdges();

LocalVariableDeclaration type ReferenceType name List_ter ^ ^ arguments TypeArgument type ReferenceType name Branch_ter ^ ^ ^ ^ pattern_type ?_ter ^ ^ ^ ^ ^ ^ declarators VariableDeclarator name outEdges_ter ^ ^ initializer MethodInvocation qualifier gNode_ter ^ ^ member getOutEdges_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg ?
arg 
arg ?
List<?> outEdges = gNode.getOutEdges();

condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier outEdges_ter ^ ^ member size_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ 
if((outEdges.size() == 1)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier outEdges_ter ^ ^ member size_ter ^ ^ ^ ^ operandr Literal value 2_ter ^ ^ ^ ^ ^ ^ 
if((outEdges.size() == 2)){
condition BinaryOperation operator !=_ter ^ ^ operandl MethodInvocation qualifier outEdges_ter ^ ^ member size_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ 
if((outEdges.size() != 1)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier par1 ^ ^ member size_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ 
if((.size() == 1)){

condition BinaryOperation operator >=_ter ^ ^ operandl MethodInvocation qualifier outEdges_ter ^ ^ member size_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ 
if((outEdges.size() >= 1)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier gNode_ter ^ ^ member size_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ 
if((gNode.size() == 1)){
IfStatement condition MethodInvocation qualifier outEdges_ter ^ ^ member size_ter ^ ^ ^ ^ ^ 
if(outEdges.size()){

condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member size_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ 
if((n.size() == 1)){
condition BinaryOperation operator >_ter ^ ^ operandl MethodInvocation qualifier outEdges_ter ^ ^ member size_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ 
if((outEdges.size() > 1)){
IfStatement condition MethodInvocation qualifier outEdges_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ ^ 
if(outEdges.isEmpty()){

condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier first_ter ^ ^ member size_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ 
if((first.size() == 1)){
condition BinaryOperation operator <=_ter ^ ^ operandl MethodInvocation qualifier outEdges_ter ^ ^ member size_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ 
if((outEdges.size() <= 1)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier outEdges_ter ^ ^ member getName_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ 
if((outEdges.getName() == 1)){
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier outEdges_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ ^ 
if(!outEdges.isEmpty()){

IfStatement condition MemberReference member outEdges_ter ^ ^ ^ ^ ^ 
if(outEdges){

condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier loc1 ^ ^ member size_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ 
if((.size() == 1)){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier outEdges_ter ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member equals_ter ^ ^ ^ ^ ^ 
if(!outEdges.equals(0)){

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member outEdges_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ 
if((outEdges != 1)){

IfStatement condition MethodInvocation qualifier outEdges_ter ^ ^ arguments MethodInvocation qualifier outEdges_ter ^ ^ member size_ter ^ ^ ^ ^ member equals_ter ^ ^ ^ ^ ^ 
if(outEdges.equals(outEdges.size())){

condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier outEdges_ter ^ ^ member size_ter ^ ^ ^ ^ operandr Literal prefix_operators -_ter ^ ^ value 1_ter ^ ^ ^ ^ ^ ^ 
if((outEdges.size() == -1)){
IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getNext_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member getType_ter ^ ^ ^ ^ member getNext_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member FUNCTION_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((n.getNext() == null) || (n.getNext().getType() == Token.FUNCTION))){

condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier outEdges_ter ^ ^ member getOutEdges_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ 
if((outEdges.getOutEdges() == 1)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier outEdges_ter ^ ^ member getParent_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ 
if((outEdges.getParent() == 1)){
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier outEdges_ter ^ ^ arguments MethodInvocation qualifier outEdges_ter ^ ^ member size_ter ^ ^ ^ ^ member equals_ter ^ ^ ^ ^ ^ 
if(!outEdges.equals(outEdges.size())){

condition BinaryOperation operator <_ter ^ ^ operandl MethodInvocation qualifier outEdges_ter ^ ^ member size_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ 
if((outEdges.size() < 1)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier ControlFlowAnalysis_ter ^ ^ member size_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ 
if((ControlFlowAnalysis.size() == 1)){
IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member getNext_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.getNext() == null)){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member outEdges_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier outEdges_ter ^ ^ member size_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((outEdges != 1) || (outEdges.size() == 1))){

IfStatement condition MemberReference prefix_operators !_ter ^ ^ member outEdges_ter ^ ^ ^ ^ ^ 
if(!outEdges){

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member outEdges_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ 
if((outEdges != 1)){

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier outEdges_ter ^ ^ member size_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ 
if((outEdges.size() == 1)){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator !=_ter ^ ^ operandl MemberReference member outEdges_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier outEdges_ter ^ ^ member size_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((outEdges != 1) && (outEdges.size() == 1))){

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member getType_ter ^ ^ ^ ^ member getNext_ter ^ ^ ^ ^ operandr MemberReference qualifier Token_ter ^ ^ member FUNCTION_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.getNext().getType() == Token.FUNCTION)){

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member outEdges_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ 
if((outEdges == 1)){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MemberReference member outEdges_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier outEdges_ter ^ ^ member size_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
if(((outEdges == 1) || (outEdges.size() == 1))){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier outEdges_ter ^ ^ member size_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier outEdges_ter ^ ^ member isEmpty_ter ^ ^ ^ ^ ^ ^ ^ 
if(((outEdges.size() == 1) || outEdges.isEmpty())){

IfStatement condition MethodInvocation qualifier outEdges_ter ^ ^ arguments MemberReference member outEdges_ter ^ ^ ^ ^ member equals_ter ^ ^ ^ ^ ^ 
if(outEdges.equals(outEdges)){

condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier outEdges_ter ^ ^ member getType_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ 
if((outEdges.getType() == 1)){
condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier outEdges_ter ^ ^ member getNext_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ 
if((outEdges.getNext() == 1)){
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier outEdges_ter ^ ^ member size_ter ^ ^ ^ ^ ^ 
if(!outEdges.size()){

condition BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier outEdges_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ 
if((outEdges.getFirstChild() == 1)){
ReturnStatement expression MethodInvocation arguments MemberReference member outEdges_ter ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ 
return tryRemoveUnconditionalBranching(outEdges);
ReturnStatement expression MethodInvocation arguments Literal value 0_ter ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ 
return tryRemoveUnconditionalBranching(0);
ReturnStatement expression MethodInvocation arguments MethodInvocation qualifier outEdges_ter ^ ^ selectors MethodInvocation member getDestination_ter ^ ^ ^ MethodInvocation member getValue_ter ^ ^ ^ ^ arguments Literal value 1_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ 
return tryRemoveUnconditionalBranching(outEdges.get(1).getDestination().getValue());
ReturnStatement expression MethodInvocation arguments MemberReference member n_ter ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ 
return tryRemoveUnconditionalBranching(n);
ReturnStatement expression MethodInvocation arguments MethodInvocation qualifier outEdges_ter ^ ^ selectors MethodInvocation member getDestination_ter ^ ^ ^ MethodInvocation member getValue_ter ^ ^ ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ 
return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
ReturnStatement expression MethodInvocation arguments MethodInvocation qualifier outEdges_ter ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ 
return tryRemoveUnconditionalBranching(outEdges.get(0));
ReturnStatement expression MethodInvocation arguments MethodInvocation qualifier gNode_ter ^ ^ selectors MethodInvocation member getDestination_ter ^ ^ ^ MethodInvocation member getValue_ter ^ ^ ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ 
return tryRemoveUnconditionalBranching(gNode.get(0).getDestination().getValue());
ReturnStatement expression MethodInvocation arguments MemberReference member par1 ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ 
return tryRemoveUnconditionalBranching();
ReturnStatement expression MethodInvocation member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ 
return tryRemoveUnconditionalBranching();
ReturnStatement expression MethodInvocation arguments MethodInvocation qualifier outEdges_ter ^ ^ selectors MethodInvocation member tryRemoveUnconditionalBranching_ter ^ ^ ^ MethodInvocation member getValue_ter ^ ^ ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ 
return tryRemoveUnconditionalBranching(outEdges.get(0).tryRemoveUnconditionalBranching().getValue());
ReturnStatement expression MethodInvocation arguments MethodInvocation qualifier n_ter ^ ^ selectors MethodInvocation member getDestination_ter ^ ^ ^ MethodInvocation member getValue_ter ^ ^ ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ 
return tryRemoveUnconditionalBranching(n.get(0).getDestination().getValue());
ReturnStatement expression MethodInvocation arguments MethodInvocation qualifier outEdges_ter ^ ^ selectors MethodInvocation member getDestination_ter ^ ^ ^ MethodInvocation member getName_ter ^ ^ ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ 
return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getName());
ReturnStatement expression MethodInvocation arguments MethodInvocation qualifier loc1 ^ ^ selectors MethodInvocation member getDestination_ter ^ ^ ^ MethodInvocation member getValue_ter ^ ^ ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ 
return tryRemoveUnconditionalBranching(.get(0).getDestination().getValue());

ReturnStatement expression MethodInvocation arguments MethodInvocation qualifier outEdges_ter ^ ^ selectors MethodInvocation member getName_ter ^ ^ ^ MethodInvocation member getValue_ter ^ ^ ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ 
return tryRemoveUnconditionalBranching(outEdges.get(0).getName().getValue());
ReturnStatement expression MemberReference member n_ter ^ ^ ^ ^ ^ 
return n;
ReturnStatement expression MethodInvocation arguments MethodInvocation qualifier outEdges_ter ^ ^ selectors MethodInvocation member getDestination_ter ^ ^ ^ MethodInvocation member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ 
return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().tryRemoveUnconditionalBranching());
ReturnStatement expression MethodInvocation arguments MethodInvocation qualifier outEdges_ter ^ ^ selectors MethodInvocation member getDestination_ter ^ ^ ^ MethodInvocation member getValue_ter ^ ^ ^ ^ arguments Literal value 2_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ 
return tryRemoveUnconditionalBranching(outEdges.get(2).getDestination().getValue());
ReturnStatement expression MethodInvocation arguments MethodInvocation qualifier par1 ^ ^ selectors MethodInvocation member getDestination_ter ^ ^ ^ MethodInvocation member getValue_ter ^ ^ ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ 
return tryRemoveUnconditionalBranching(.get(0).getDestination().getValue());

ReturnStatement expression MethodInvocation qualifier outEdges_ter ^ ^ selectors MethodInvocation member getDestination_ter ^ ^ ^ MethodInvocation member getValue_ter ^ ^ ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ 
return outEdges.get(0).getDestination().getValue();
ReturnStatement expression MethodInvocation arguments MethodInvocation qualifier outEdges_ter ^ ^ selectors MethodInvocation member getDestination_ter ^ ^ ^ MethodInvocation member getValue_ter ^ ^ ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ member debug_ter ^ ^ ^ ^ ^ 
return debug(outEdges.get(0).getDestination().getValue());
ReturnStatement expression MethodInvocation arguments MethodInvocation qualifier outEdges_ter ^ ^ selectors MethodInvocation member size_ter ^ ^ ^ MethodInvocation member getValue_ter ^ ^ ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ 
return tryRemoveUnconditionalBranching(outEdges.get(0).size().getValue());
ReturnStatement expression MethodInvocation arguments MethodInvocation qualifier outEdges_ter ^ ^ selectors MethodInvocation member getDestination_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ 
return tryRemoveUnconditionalBranching(outEdges.get().getDestination());
ReturnStatement expression MethodInvocation arguments MethodInvocation qualifier outEdges_ter ^ ^ selectors MethodInvocation member getDestination_ter ^ ^ ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ 
return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination());
ReturnStatement expression MethodInvocation arguments MethodInvocation qualifier first_ter ^ ^ selectors MethodInvocation member getDestination_ter ^ ^ ^ MethodInvocation member getValue_ter ^ ^ ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ 
return tryRemoveUnconditionalBranching(first.get(0).getDestination().getValue());
ReturnStatement expression MethodInvocation arguments MethodInvocation qualifier outEdges_ter ^ ^ selectors MethodInvocation member getDestination_ter ^ ^ ^ MethodInvocation member getValue_ter ^ ^ ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
return add(outEdges.get(0).getDestination().getValue());
ReturnStatement expression MethodInvocation arguments MemberReference member gNode_ter ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ 
return tryRemoveUnconditionalBranching(gNode);
ReturnStatement expression MethodInvocation arguments MethodInvocation qualifier outEdges_ter ^ ^ selectors MethodInvocation member getValue_ter ^ ^ ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ 
return tryRemoveUnconditionalBranching(outEdges.get(0).getValue());
ReturnStatement expression MethodInvocation arguments MethodInvocation qualifier outEdges_ter ^ ^ selectors MethodInvocation member getValue_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ 
return tryRemoveUnconditionalBranching(outEdges.get().getValue());
ReturnStatement expression MethodInvocation arguments MethodInvocation qualifier outEdges_ter ^ ^ selectors MethodInvocation member getDestination_ter ^ ^ ^ MethodInvocation member getValue_ter ^ ^ ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member get_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ 
return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue(), 0);
ReturnStatement expression MethodInvocation arguments MemberReference member loc1 ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ 
return tryRemoveUnconditionalBranching();
ReturnStatement expression MethodInvocation arguments MethodInvocation qualifier outEdges_ter ^ ^ selectors MethodInvocation member getDestination_ter ^ ^ ^ MethodInvocation member size_ter ^ ^ ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ 
return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().size());
ReturnStatement expression MethodInvocation arguments MethodInvocation qualifier outEdges_ter ^ ^ selectors MethodInvocation member hasChildren_ter ^ ^ ^ MethodInvocation member getValue_ter ^ ^ ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ 
return tryRemoveUnconditionalBranching(outEdges.get(0).hasChildren().getValue());
ReturnStatement expression MethodInvocation arguments MethodInvocation qualifier outEdges_ter ^ ^ selectors MethodInvocation member getParent_ter ^ ^ ^ MethodInvocation member getValue_ter ^ ^ ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ 
return tryRemoveUnconditionalBranching(outEdges.get(0).getParent().getValue());
ReturnStatement expression MethodInvocation qualifier outEdges_ter ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ 
return outEdges.tryRemoveUnconditionalBranching();
ReturnStatement expression MethodInvocation arguments MethodInvocation qualifier outEdges_ter ^ ^ selectors MethodInvocation member getDestination_ter ^ ^ ^ MethodInvocation member getValue_ter ^ ^ ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ member removeDeadExprStatementSafely_ter ^ ^ ^ ^ ^ 
return removeDeadExprStatementSafely(outEdges.get(0).getDestination().getValue());
ReturnStatement expression MethodInvocation arguments MethodInvocation qualifier outEdges_ter ^ ^ selectors MethodInvocation member getOutEdges_ter ^ ^ ^ MethodInvocation member getValue_ter ^ ^ ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ 
return tryRemoveUnconditionalBranching(outEdges.get(0).getOutEdges().getValue());
ReturnStatement expression MethodInvocation arguments MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ 
return tryRemoveUnconditionalBranching(n.hasChildren());
ReturnStatement expression MethodInvocation arguments MethodInvocation qualifier ControlFlowAnalysis_ter ^ ^ selectors MethodInvocation member getDestination_ter ^ ^ ^ MethodInvocation member getValue_ter ^ ^ ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ 
return tryRemoveUnconditionalBranching(ControlFlowAnalysis.get(0).getDestination().getValue());
ReturnStatement expression MethodInvocation arguments MethodInvocation qualifier outEdges_ter ^ ^ selectors MethodInvocation member getDestination_ter ^ ^ ^ MethodInvocation member getValue_ter ^ ^ ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
return checkState(outEdges.get(0).getDestination().getValue());
ReturnStatement expression MethodInvocation arguments MethodInvocation qualifier outEdges_ter ^ ^ selectors MethodInvocation member getDestination_ter ^ ^ ^ MethodInvocation member getParent_ter ^ ^ ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ 
return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getParent());
ReturnStatement expression MethodInvocation arguments MethodInvocation qualifier outEdges_ter ^ ^ selectors MethodInvocation member getValue_ter ^ ^ ^ MethodInvocation member getValue_ter ^ ^ ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ 
return tryRemoveUnconditionalBranching(outEdges.get(0).getValue().getValue());
ReturnStatement expression MethodInvocation arguments MethodInvocation qualifier outEdges_ter ^ ^ selectors MethodInvocation member getType_ter ^ ^ ^ MethodInvocation member getValue_ter ^ ^ ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ 
return tryRemoveUnconditionalBranching(outEdges.get(0).getType().getValue());
ReturnStatement expression MethodInvocation arguments MethodInvocation qualifier outEdges_ter ^ ^ member get_ter ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ 
return tryRemoveUnconditionalBranching(outEdges.get());
ReturnStatement expression MethodInvocation arguments MethodInvocation qualifier outEdges_ter ^ ^ selectors MethodInvocation member getDestination_ter ^ ^ ^ MethodInvocation member getOutEdges_ter ^ ^ ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ 
return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getOutEdges());
ReturnStatement expression MethodInvocation arguments MethodInvocation arguments Literal value 0_ter ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ 
return tryRemoveUnconditionalBranching(tryRemoveUnconditionalBranching(0));
ReturnStatement expression MethodInvocation arguments MethodInvocation qualifier outEdges_ter ^ ^ selectors MethodInvocation member getDestination_ter ^ ^ ^ MethodInvocation member hasChildren_ter ^ ^ ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ 
return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().hasChildren());
ReturnStatement expression MemberReference member fallThrough_ter ^ ^ ^ ^ ^ 
return fallThrough;
condition MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ 
if(n.hasChildren()){
condition MethodInvocation qualifier n_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ 
if(n.hasOneChild()){
condition MethodInvocation qualifier n_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ 
if(n.hasMoreThanOneChild()){
condition MethodInvocation qualifier n_ter ^ ^ member hasSideEffects_ter ^ ^ ^ ^ 
if(n.hasSideEffects()){
condition MethodInvocation qualifier n_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ 
if(n.isQualifiedName()){
condition MethodInvocation qualifier n_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ 
if(n.isUnscopedQualifiedName()){
condition MethodInvocation qualifier n_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ 
if(n.isVarArgs()){
condition MethodInvocation qualifier n_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ 
if(n.isOptionalArg()){
condition MethodInvocation qualifier n_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ 
if(n.isSyntheticBlock()){
condition MethodInvocation qualifier n_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ 
if(n.wasEmptyNode()){
condition MethodInvocation qualifier n_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ 
if(n.isOnlyModifiesThisCall()){
condition MethodInvocation qualifier n_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ 
if(n.isNoSideEffectsCall()){
condition MethodInvocation qualifier n_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ 
if(n.isLocalResultCall()){
condition MethodInvocation qualifier n_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ 
if(n.isQuotedString()){
condition MethodInvocation qualifier outEdges_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ 
if(outEdges.hasChildren()){
BreakStatement_ter ^ 
break;

ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if (true) { return null; }

ReturnStatement expression MemberReference member fallThrough_ter ^ ^ ^ ^ ^ 
if (true) { return fallThrough; }

ReturnStatement expression MethodInvocation arguments MethodInvocation qualifier outEdges_ter ^ ^ selectors MethodInvocation member getDestination_ter ^ ^ ^ MethodInvocation member getValue_ter ^ ^ ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ 
if (true) { return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); }

ReturnStatement expression MemberReference member n_ter ^ ^ ^ ^ ^ 
if (true) { return n; }

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
if(!n.hasChildren()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
if(n.hasChildren()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ ^ 
if(n.hasOneChild()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ ^ 
if(n.hasMoreThanOneChild()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member hasSideEffects_ter ^ ^ ^ ^ ^ 
if(n.hasSideEffects()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ ^ 
if(n.isQualifiedName()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ ^ 
if(n.isUnscopedQualifiedName()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ ^ 
if(n.isVarArgs()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ ^ 
if(n.isOptionalArg()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ ^ 
if(n.isSyntheticBlock()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ ^ 
if(n.wasEmptyNode()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ ^ 
if(n.isOnlyModifiesThisCall()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ ^ 
if(n.isNoSideEffectsCall()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ ^ 
if(n.isLocalResultCall()){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ ^ 
if(n.isQuotedString()){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && n.hasChildren())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && n.hasOneChild())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && n.hasMoreThanOneChild())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member hasSideEffects_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && n.hasSideEffects())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && n.isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && n.isUnscopedQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && n.isVarArgs())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && n.isOptionalArg())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && n.isSyntheticBlock())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && n.wasEmptyNode())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && n.isOnlyModifiesThisCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && n.isNoSideEffectsCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && n.isLocalResultCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && n.isQuotedString())){



condition MethodInvocation qualifier par1 ^ ^ member hasChildren_ter ^ ^ ^ ^ 
if(.hasChildren()){

condition MethodInvocation qualifier first_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ 
if(first.hasChildren()){
IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && !n.hasChildren())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && !n.hasOneChild())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && !n.hasMoreThanOneChild())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member hasSideEffects_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && !n.hasSideEffects())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && !n.isQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && !n.isUnscopedQualifiedName())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && !n.isVarArgs())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && !n.isOptionalArg())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && !n.isSyntheticBlock())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && !n.wasEmptyNode())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && !n.isOnlyModifiesThisCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && !n.isNoSideEffectsCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && !n.isLocalResultCall())){

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() && !n.isQuotedString())){

ReturnStatement expression MethodInvocation arguments MemberReference member first_ter ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ 
if (true) { return tryRemoveUnconditionalBranching(first); }

condition MethodInvocation qualifier gNode_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ 
if(gNode.hasChildren()){
condition MethodInvocation qualifier loc1 ^ ^ member hasChildren_ter ^ ^ ^ ^ 
if(.hasChildren()){

ReturnStatement expression MethodInvocation arguments MethodInvocation qualifier ControlFlowAnalysis_ter ^ ^ arguments MemberReference member n_ter ^ ^ ^ ^ member computeFollowNode_ter ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ 
if (true) { return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n)); }

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() || n.hasChildren())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() || n.hasOneChild())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() || n.hasMoreThanOneChild())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member hasSideEffects_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() || n.hasSideEffects())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() || n.isQualifiedName())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() || n.isUnscopedQualifiedName())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() || n.isVarArgs())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() || n.isOptionalArg())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() || n.isSyntheticBlock())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() || n.wasEmptyNode())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() || n.isOnlyModifiesThisCall())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() || n.isNoSideEffectsCall())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() || n.isLocalResultCall())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() || n.isQuotedString())){

condition MethodInvocation qualifier n_ter ^ ^ member getDirectedGraphNode_ter ^ ^ ^ ^ 
if(n.getDirectedGraphNode()){
ReturnStatement_ter ^ 
if (true) { return;
 }

condition MethodInvocation qualifier n_ter ^ ^ member computeFollowNode_ter ^ ^ ^ ^ 
if(n.computeFollowNode()){
ReturnStatement expression MemberReference member outEdges_ter ^ ^ ^ ^ ^ 
if (true) { return outEdges; }

ContinueStatement_ter ^ 
continue;

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier outEdges_ter ^ ^ selectors MethodInvocation member getValue_ter ^ ^ ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MemberReference qualifier Branch_ter ^ ^ member UNCOND_ter ^ ^ ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState((outEdges.get(0).getValue() == Branch.UNCOND));

StatementExpression expression MethodInvocation arguments MemberReference member n_ter ^ ^ ^ ^ member removeDeadExprStatementSafely_ter ^ ^ ^ ^ ^ 
removeDeadExprStatementSafely(n);

condition MethodInvocation qualifier n_ter ^ ^ member getType_ter ^ ^ ^ ^ 
if(n.getType()){
IfStatement condition MemberReference member n_ter ^ ^ ^ ^ ^ 
if(n){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() || !n.hasChildren())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() || !n.hasOneChild())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() || !n.hasMoreThanOneChild())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member hasSideEffects_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() || !n.hasSideEffects())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() || !n.isQualifiedName())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() || !n.isUnscopedQualifiedName())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() || !n.isVarArgs())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() || !n.isOptionalArg())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() || !n.isSyntheticBlock())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() || !n.wasEmptyNode())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() || !n.isOnlyModifiesThisCall())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() || !n.isNoSideEffectsCall())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() || !n.isLocalResultCall())){

IfStatement condition BinaryOperation operator ||_ter ^ ^ operandl MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ operandr MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ ^ ^ ^ 
if((n.hasChildren() || !n.isQuotedString())){

condition MethodInvocation qualifier ControlFlowAnalysis_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ 
if(ControlFlowAnalysis.hasChildren()){
IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ ^ 
if(!n.hasOneChild()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ ^ 
if(!n.hasMoreThanOneChild()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member hasSideEffects_ter ^ ^ ^ ^ ^ 
if(!n.hasSideEffects()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ ^ 
if(!n.isQualifiedName()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ ^ 
if(!n.isUnscopedQualifiedName()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ ^ 
if(!n.isVarArgs()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ ^ 
if(!n.isOptionalArg()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ ^ 
if(!n.isSyntheticBlock()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ ^ 
if(!n.wasEmptyNode()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ ^ 
if(!n.isOnlyModifiesThisCall()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ ^ 
if(!n.isNoSideEffectsCall()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ ^ 
if(!n.isLocalResultCall()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ ^ 
if(!n.isQuotedString()){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
if(!n.hasChildren(0)){

condition MethodInvocation qualifier n_ter ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ 
if(n.tryRemoveUnconditionalBranching()){
IfStatement condition MemberReference prefix_operators !_ter ^ ^ member n_ter ^ ^ ^ ^ ^ 
if(!n){

IfStatement condition MethodInvocation member hasChildren_ter ^ ^ ^ ^ ^ 
if(hasChildren()){

ReturnStatement expression MemberReference member loc1 ^ ^ ^ ^ ^ 
if (true) { return ; }

condition MethodInvocation qualifier n_ter ^ ^ member get_ter ^ ^ ^ ^ 
if(n.get()){
BreakStatement_ter ^ 
BreakStatement_ter ^ 
break;
break;

condition MethodInvocation qualifier n_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ 
if(n.getFirstChild()){
condition MethodInvocation qualifier Preconditions_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ 
if(Preconditions.hasChildren()){
ReturnStatement expression MemberReference member first_ter ^ ^ ^ ^ ^ 
if (true) { return first; }

condition MethodInvocation qualifier n_ter ^ ^ member getOutEdges_ter ^ ^ ^ ^ 
if(n.getOutEdges()){
ReturnStatement expression MemberReference member par1 ^ ^ ^ ^ ^ 
if (true) { return ; }

IfStatement condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
if((n && n.hasChildren())){

IfStatement condition MethodInvocation prefix_operators !_ter ^ ^ qualifier n_ter ^ ^ arguments MemberReference member n_ter ^ ^ ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
if(!n.hasChildren(n)){

condition MethodInvocation qualifier n_ter ^ ^ member getDestination_ter ^ ^ ^ ^ 
if(n.getDestination()){
condition MethodInvocation qualifier curCfg_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ 
if(curCfg.hasChildren()){
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference member fallThrough_ter ^ ^ ^ ^ ^ 
if(n.hasChildren()){
return fallThrough;}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference member fallThrough_ter ^ ^ ^ ^ ^ 
if(n.hasOneChild()){
return fallThrough;}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference member fallThrough_ter ^ ^ ^ ^ ^ 
if(n.hasMoreThanOneChild()){
return fallThrough;}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member hasSideEffects_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference member fallThrough_ter ^ ^ ^ ^ ^ 
if(n.hasSideEffects()){
return fallThrough;}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference member fallThrough_ter ^ ^ ^ ^ ^ 
if(n.isQualifiedName()){
return fallThrough;}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference member fallThrough_ter ^ ^ ^ ^ ^ 
if(n.isUnscopedQualifiedName()){
return fallThrough;}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference member fallThrough_ter ^ ^ ^ ^ ^ 
if(n.isVarArgs()){
return fallThrough;}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference member fallThrough_ter ^ ^ ^ ^ ^ 
if(n.isOptionalArg()){
return fallThrough;}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference member fallThrough_ter ^ ^ ^ ^ ^ 
if(n.isSyntheticBlock()){
return fallThrough;}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference member fallThrough_ter ^ ^ ^ ^ ^ 
if(n.wasEmptyNode()){
return fallThrough;}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference member fallThrough_ter ^ ^ ^ ^ ^ 
if(n.isOnlyModifiesThisCall()){
return fallThrough;}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference member fallThrough_ter ^ ^ ^ ^ ^ 
if(n.isNoSideEffectsCall()){
return fallThrough;}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference member fallThrough_ter ^ ^ ^ ^ ^ 
if(n.isLocalResultCall()){
return fallThrough;}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference member fallThrough_ter ^ ^ ^ ^ ^ 
if(n.isQuotedString()){
return fallThrough;}
ReturnStatement expression Literal value <string>_ter ^ ^ ^ ^ ^ 
if (true) { return "null"; }

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name first_ter ^ ^ initializer MethodInvocation qualifier n_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node first = n.getFirstChild();

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name first_ter ^ ^ initializer MethodInvocation qualifier n_ter ^ ^ member getLastChild_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node first = n.getLastChild();

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name first_ter ^ ^ initializer MethodInvocation qualifier n_ter ^ ^ member getNext_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node first = n.getNext();

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name first_ter ^ ^ initializer MethodInvocation qualifier n_ter ^ ^ member getLastSibling_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node first = n.getLastSibling();

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name first_ter ^ ^ initializer MethodInvocation qualifier n_ter ^ ^ member getParent_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node first = n.getParent();

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name first_ter ^ ^ initializer MethodInvocation qualifier n_ter ^ ^ member detachFromParent_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node first = n.detachFromParent();

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name first_ter ^ ^ initializer MethodInvocation qualifier n_ter ^ ^ member removeFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node first = n.removeFirstChild();

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name first_ter ^ ^ initializer MethodInvocation qualifier n_ter ^ ^ member removeChildren_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node first = n.removeChildren();

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name first_ter ^ ^ initializer MethodInvocation qualifier n_ter ^ ^ member cloneNode_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node first = n.cloneNode();

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name first_ter ^ ^ initializer MethodInvocation qualifier n_ter ^ ^ member cloneTree_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node first = n.cloneTree();

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name first_ter ^ ^ initializer MethodInvocation qualifier gNode_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node first = gNode.getFirstChild();

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name first_ter ^ ^ initializer MethodInvocation qualifier outEdges_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node first = outEdges.getFirstChild();

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name first_ter ^ ^ initializer MethodInvocation qualifier par1 ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node first = .getFirstChild();


LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name first_ter ^ ^ initializer MethodInvocation qualifier loc1 ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node first = .getFirstChild();


LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name first_ter ^ ^ initializer MethodInvocation qualifier n_ter ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node first = n.tryRemoveUnconditionalBranching();

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name first_ter ^ ^ initializer MethodInvocation qualifier n_ter ^ ^ member getDestination_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node first = n.getDestination();

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name first_ter ^ ^ initializer MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node first = n.hasChildren();

BreakStatement_ter ^ 
break;

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name first_ter ^ ^ initializer MethodInvocation qualifier n_ter ^ ^ member getValue_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node first = n.getValue();

StatementExpression expression MethodInvocation arguments MemberReference member n_ter ^ ^ ^ ^ member removeDeadExprStatementSafely_ter ^ ^ ^ ^ ^ 
removeDeadExprStatementSafely(n);

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name first_ter ^ ^ initializer MethodInvocation qualifier n_ter ^ ^ member getType_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node first = n.getType();

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier outEdges_ter ^ ^ selectors MethodInvocation member getValue_ter ^ ^ ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MemberReference qualifier Branch_ter ^ ^ member UNCOND_ter ^ ^ ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState((outEdges.get(0).getValue() == Branch.UNCOND));

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name first_ter ^ ^ initializer MethodInvocation qualifier first_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node first = first.getFirstChild();

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((n != null)){

ReturnStatement expression MemberReference member fallThrough_ter ^ ^ ^ ^ ^ 
if (true) { return fallThrough; }


LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name first_ter ^ ^ initializer MethodInvocation arguments MemberReference member n_ter ^ ^ ^ ^ member removeDeadExprStatementSafely_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node first = removeDeadExprStatementSafely(n);

LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name first_ter ^ ^ initializer MethodInvocation qualifier n_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
final Node first = n.getFirstChild();

ContinueStatement_ter ^ 
continue;

ReturnStatement expression MemberReference member n_ter ^ ^ ^ ^ ^ 
if (true) { return n; }

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ arguments TypeArgument pattern_type ?_ter ^ ^ ^ ^ ^ ^ declarators VariableDeclarator name first_ter ^ ^ initializer MethodInvocation qualifier n_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
arg ?
arg ?
Node<?> first = n.getFirstChild();

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name first_ter ^ ^ initializer MethodInvocation qualifier ControlFlowAnalysis_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node first = ControlFlowAnalysis.getFirstChild();

ReturnStatement_ter ^ 
if (true) { return;
 }

StatementExpression expression MethodInvocation qualifier n_ter ^ ^ member detachChildren_ter ^ ^ ^ ^ ^ 
n.detachChildren();

StatementExpression expression MethodInvocation qualifier n_ter ^ ^ member setQuotedString_ter ^ ^ ^ ^ ^ 
n.setQuotedString();

StatementExpression expression MethodInvocation qualifier n_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ 
n.getFirstChild();

ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if (true) { return null; }

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name first_ter ^ ^ initializer MethodInvocation qualifier par2 ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node first = .getFirstChild();


LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name first_ter ^ ^ initializer MethodInvocation qualifier fallThrough_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node first = fallThrough.getFirstChild();

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference member fallThrough_ter ^ ^ ^ ^ ^ 
if(n.hasChildren()){
return fallThrough;}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference member fallThrough_ter ^ ^ ^ ^ ^ 
if(n.hasOneChild()){
return fallThrough;}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference member fallThrough_ter ^ ^ ^ ^ ^ 
if(n.hasMoreThanOneChild()){
return fallThrough;}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member hasSideEffects_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference member fallThrough_ter ^ ^ ^ ^ ^ 
if(n.hasSideEffects()){
return fallThrough;}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference member fallThrough_ter ^ ^ ^ ^ ^ 
if(n.isQualifiedName()){
return fallThrough;}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference member fallThrough_ter ^ ^ ^ ^ ^ 
if(n.isUnscopedQualifiedName()){
return fallThrough;}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference member fallThrough_ter ^ ^ ^ ^ ^ 
if(n.isVarArgs()){
return fallThrough;}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference member fallThrough_ter ^ ^ ^ ^ ^ 
if(n.isOptionalArg()){
return fallThrough;}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference member fallThrough_ter ^ ^ ^ ^ ^ 
if(n.isSyntheticBlock()){
return fallThrough;}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference member fallThrough_ter ^ ^ ^ ^ ^ 
if(n.wasEmptyNode()){
return fallThrough;}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference member fallThrough_ter ^ ^ ^ ^ ^ 
if(n.isOnlyModifiesThisCall()){
return fallThrough;}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference member fallThrough_ter ^ ^ ^ ^ ^ 
if(n.isNoSideEffectsCall()){
return fallThrough;}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference member fallThrough_ter ^ ^ ^ ^ ^ 
if(n.isLocalResultCall()){
return fallThrough;}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference member fallThrough_ter ^ ^ ^ ^ ^ 
if(n.isQuotedString()){
return fallThrough;}
IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ 
if((n != 1)){

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference member n_ter ^ ^ ^ ^ ^ 
if(n.hasChildren()){
return n;}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference member n_ter ^ ^ ^ ^ ^ 
if(n.hasOneChild()){
return n;}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference member n_ter ^ ^ ^ ^ ^ 
if(n.hasMoreThanOneChild()){
return n;}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member hasSideEffects_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference member n_ter ^ ^ ^ ^ ^ 
if(n.hasSideEffects()){
return n;}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference member n_ter ^ ^ ^ ^ ^ 
if(n.isQualifiedName()){
return n;}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference member n_ter ^ ^ ^ ^ ^ 
if(n.isUnscopedQualifiedName()){
return n;}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference member n_ter ^ ^ ^ ^ ^ 
if(n.isVarArgs()){
return n;}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference member n_ter ^ ^ ^ ^ ^ 
if(n.isOptionalArg()){
return n;}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference member n_ter ^ ^ ^ ^ ^ 
if(n.isSyntheticBlock()){
return n;}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference member n_ter ^ ^ ^ ^ ^ 
if(n.wasEmptyNode()){
return n;}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference member n_ter ^ ^ ^ ^ ^ 
if(n.isOnlyModifiesThisCall()){
return n;}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference member n_ter ^ ^ ^ ^ ^ 
if(n.isNoSideEffectsCall()){
return n;}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference member n_ter ^ ^ ^ ^ ^ 
if(n.isLocalResultCall()){
return n;}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference member n_ter ^ ^ ^ ^ ^ 
if(n.isQuotedString()){
return n;}
LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name first_ter ^ ^ initializer MethodInvocation qualifier n_ter ^ ^ arguments MethodInvocation qualifier n_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node first = n.tryRemoveUnconditionalBranching(n.getFirstChild());

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(n.hasChildren()){
return null;}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(n.hasOneChild()){
return null;}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(n.hasMoreThanOneChild()){
return null;}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member hasSideEffects_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(n.hasSideEffects()){
return null;}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(n.isQualifiedName()){
return null;}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(n.isUnscopedQualifiedName()){
return null;}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(n.isVarArgs()){
return null;}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(n.isOptionalArg()){
return null;}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(n.isSyntheticBlock()){
return null;}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(n.wasEmptyNode()){
return null;}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(n.isOnlyModifiesThisCall()){
return null;}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(n.isNoSideEffectsCall()){
return null;}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(n.isLocalResultCall()){
return null;}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if(n.isQuotedString()){
return null;}
ReturnStatement expression MethodInvocation arguments MemberReference member first_ter ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ 
if (true) { return tryRemoveUnconditionalBranching(first); }

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name first_ter ^ ^ initializer Cast type ReferenceType name Node_ter ^ ^ ^ ^ expression MethodInvocation qualifier n_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
arg 
arg 
Node first = (Node)n.getFirstChild();

StatementExpression expression Assignment expressionl MemberReference member first_ter ^ ^ ^ ^ value MethodInvocation qualifier n_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
first = n.getFirstChild();

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name first_ter ^ ^ ^ ^ ^ 
arg 
arg 
Node first = ;


LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name first_ter ^ ^ initializer MemberReference member n_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node first = n;

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
if(n.hasChildren()){

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name first_ter ^ ^ initializer MethodInvocation qualifier n_ter ^ ^ arguments MemberReference member first_ter ^ ^ ^ ^ member addChildToFront_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node first = n.addChildToFront(first);

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name first_ter ^ ^ initializer MethodInvocation qualifier n_ter ^ ^ arguments MemberReference member first_ter ^ ^ ^ ^ member addChildToBack_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node first = n.addChildToBack(first);

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name first_ter ^ ^ initializer MethodInvocation qualifier n_ter ^ ^ arguments MemberReference member first_ter ^ ^ ^ ^ member addChildrenToFront_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node first = n.addChildrenToFront(first);

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name first_ter ^ ^ initializer MethodInvocation qualifier n_ter ^ ^ arguments MemberReference member first_ter ^ ^ ^ ^ member addChildrenToBack_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node first = n.addChildrenToBack(first);

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name first_ter ^ ^ initializer MethodInvocation qualifier n_ter ^ ^ arguments MemberReference member first_ter ^ ^ ^ ^ member removeChild_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node first = n.removeChild(first);

ReturnStatement expression MethodInvocation arguments MethodInvocation qualifier outEdges_ter ^ ^ selectors MethodInvocation member getDestination_ter ^ ^ ^ MethodInvocation member getValue_ter ^ ^ ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ 
if (true) { return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); }

IfStatement condition MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(n.hasChildren()){
continue;
}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member hasOneChild_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(n.hasOneChild()){
continue;
}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member hasMoreThanOneChild_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(n.hasMoreThanOneChild()){
continue;
}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member hasSideEffects_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(n.hasSideEffects()){
continue;
}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isQualifiedName_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(n.isQualifiedName()){
continue;
}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isUnscopedQualifiedName_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(n.isUnscopedQualifiedName()){
continue;
}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isVarArgs_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(n.isVarArgs()){
continue;
}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isOptionalArg_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(n.isOptionalArg()){
continue;
}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isSyntheticBlock_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(n.isSyntheticBlock()){
continue;
}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member wasEmptyNode_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(n.wasEmptyNode()){
continue;
}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isOnlyModifiesThisCall_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(n.isOnlyModifiesThisCall()){
continue;
}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isNoSideEffectsCall_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(n.isNoSideEffectsCall()){
continue;
}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isLocalResultCall_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(n.isLocalResultCall()){
continue;
}
IfStatement condition MethodInvocation qualifier n_ter ^ ^ member isQuotedString_ter ^ ^ ^ ^ ^ 
ContinueStatement_ter ^ 
if(n.isQuotedString()){
continue;
}
ReturnStatement expression MethodInvocation arguments MemberReference member first_ter ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ 
return tryRemoveUnconditionalBranching(first);
ReturnStatement expression MethodInvocation arguments MemberReference member first_ter ^ ^ ^ ^ member computeFollowing_ter ^ ^ ^ ^ ^ 
return computeFollowing(first);
ReturnStatement expression MethodInvocation arguments MemberReference member n_ter ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ 
return tryRemoveUnconditionalBranching(n);
ReturnStatement expression MethodInvocation arguments MemberReference member first_ter ^ ^ ^ ^ member removeDeadExprStatementSafely_ter ^ ^ ^ ^ ^ 
return removeDeadExprStatementSafely(first);
BreakStatement_ter ^ 
break;

ReturnStatement expression MemberReference member first_ter ^ ^ ^ ^ ^ 
return first;
ReturnStatement expression MethodInvocation arguments MemberReference member first_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
return checkState(first);
ReturnStatement expression MethodInvocation arguments MemberReference member loc1 ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ 
return tryRemoveUnconditionalBranching();
ReturnStatement expression MemberReference member n_ter ^ ^ ^ ^ ^ 
return n;
ReturnStatement expression MethodInvocation member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ 
return tryRemoveUnconditionalBranching();
ReturnStatement expression MemberReference member fallThrough_ter ^ ^ ^ ^ ^ 
return fallThrough;
ReturnStatement expression MethodInvocation arguments MemberReference member first_ter ^ ^ ^ MemberReference member first_ter ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ 
return tryRemoveUnconditionalBranching(first, first);
ReturnStatement expression MethodInvocation arguments MemberReference member first_ter ^ ^ ^ ^ member debug_ter ^ ^ ^ ^ ^ 
return debug(first);
ReturnStatement expression MethodInvocation arguments Literal value 0_ter ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ 
return tryRemoveUnconditionalBranching(0);
ReturnStatement expression MethodInvocation qualifier first_ter ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ 
return first.tryRemoveUnconditionalBranching();
ReturnStatement expression MethodInvocation arguments MemberReference member outEdges_ter ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ 
return tryRemoveUnconditionalBranching(outEdges);
ReturnStatement expression MethodInvocation qualifier ControlFlowAnalysis_ter ^ ^ arguments MemberReference member first_ter ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ 
return ControlFlowAnalysis.tryRemoveUnconditionalBranching(first);
ReturnStatement expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments MemberReference member first_ter ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ 
return Preconditions.tryRemoveUnconditionalBranching(first);
ReturnStatement expression MethodInvocation arguments MemberReference member first_ter ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ 
return add(first);
ReturnStatement expression MethodInvocation arguments MemberReference member first_ter ^ ^ ^ Literal value false_ter ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ 
return tryRemoveUnconditionalBranching(first, false);
ReturnStatement expression MethodInvocation arguments MemberReference member first_ter ^ ^ ^ ^ member e_ter ^ ^ ^ ^ ^ 
return e(first);

ReturnStatement expression MemberReference member fallThrough_ter ^ ^ ^ ^ ^ 
if (true) { return fallThrough; }

ReturnStatement expression MethodInvocation arguments MemberReference member first_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ 
return tryRemoveUnconditionalBranching(first, true);
ReturnStatement expression MethodInvocation arguments MethodInvocation qualifier outEdges_ter ^ ^ selectors MethodInvocation member getDestination_ter ^ ^ ^ MethodInvocation member getValue_ter ^ ^ ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ 
return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
ReturnStatement expression MethodInvocation arguments MemberReference member par1 ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ 
return tryRemoveUnconditionalBranching();
ReturnStatement expression MemberReference member first_ter ^ ^ ^ ^ ^ 
if (true) { return first; }

ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if (true) { return null; }

StatementExpression expression MethodInvocation qualifier first_ter ^ ^ member detachChildren_ter ^ ^ ^ ^ ^ 
first.detachChildren();

StatementExpression expression MethodInvocation qualifier first_ter ^ ^ member setQuotedString_ter ^ ^ ^ ^ ^ 
first.setQuotedString();

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member first_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((first != null)){

ReturnStatement expression MethodInvocation arguments MemberReference member first_ter ^ ^ ^ MemberReference member par1 ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ 
return tryRemoveUnconditionalBranching(first, );

ReturnStatement expression MethodInvocation arguments MemberReference member first_ter ^ ^ ^ MemberReference member loc1 ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ 
return tryRemoveUnconditionalBranching(first, );

ReturnStatement expression MethodInvocation arguments MemberReference member gNode_ter ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ 
return tryRemoveUnconditionalBranching(gNode);
ReturnStatement expression MethodInvocation arguments MemberReference member first_ter ^ ^ ^ Literal value null_ter ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ 
return tryRemoveUnconditionalBranching(first, null);
ReturnStatement expression MethodInvocation arguments MemberReference member first_ter ^ ^ ^ ^ member computeFollowNode_ter ^ ^ ^ ^ ^ 
return computeFollowNode(first);
ContinueStatement_ter ^ 
continue;

ReturnStatement expression MethodInvocation qualifier ControlFlowAnalysis_ter ^ ^ arguments MemberReference member n_ter ^ ^ ^ ^ member computeFollowNode_ter ^ ^ ^ ^ ^ 
return ControlFlowAnalysis.computeFollowNode(n);
ReturnStatement expression MethodInvocation arguments MemberReference member first_ter ^ ^ ^ MemberReference member n_ter ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ 
return tryRemoveUnconditionalBranching(first, n);
ReturnStatement expression MethodInvocation qualifier curCfg_ter ^ ^ arguments MemberReference member first_ter ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ 
return curCfg.tryRemoveUnconditionalBranching(first);
ReturnStatement expression MethodInvocation arguments MemberReference member n_ter ^ ^ ^ ^ member removeDeadExprStatementSafely_ter ^ ^ ^ ^ ^ 
return removeDeadExprStatementSafely(n);
ReturnStatement expression MethodInvocation arguments MemberReference member first_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ 
return get(first);
ReturnStatement expression MethodInvocation arguments MemberReference member first_ter ^ ^ ^ This_ter ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ 
return tryRemoveUnconditionalBranching(first, this);
StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier outEdges_ter ^ ^ selectors MethodInvocation member getValue_ter ^ ^ ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MemberReference qualifier Branch_ter ^ ^ member UNCOND_ter ^ ^ ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState((outEdges.get(0).getValue() == Branch.UNCOND));

ReturnStatement expression MethodInvocation arguments MemberReference member first_ter ^ ^ ^ MemberReference member first_ter ^ ^ ^ ^ member process_ter ^ ^ ^ ^ ^ 
return process(first, first);
ReturnStatement expression MethodInvocation arguments MemberReference member first_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ 
return tryRemoveUnconditionalBranching(first, 0);
ReturnStatement expression MethodInvocation arguments MethodInvocation qualifier curCfg_ter ^ ^ arguments MemberReference member n_ter ^ ^ ^ ^ member computeFollowNode_ter ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ 
return tryRemoveUnconditionalBranching(curCfg.computeFollowNode(n));
ReturnStatement expression MethodInvocation arguments MemberReference member n_ter ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ 
return tryRemoveUnconditionalBranching(n);
ReturnStatement expression MethodInvocation arguments MethodInvocation qualifier ControlFlowAnalysis_ter ^ ^ arguments MemberReference member n_ter ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ 
return tryRemoveUnconditionalBranching(ControlFlowAnalysis.tryRemoveUnconditionalBranching(n));
ReturnStatement expression MethodInvocation arguments MethodInvocation qualifier Preconditions_ter ^ ^ arguments MemberReference member n_ter ^ ^ ^ ^ member computeFollowNode_ter ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ 
return tryRemoveUnconditionalBranching(Preconditions.computeFollowNode(n));
ReturnStatement expression MethodInvocation arguments MethodInvocation qualifier ControlFlowAnalysis_ter ^ ^ arguments MemberReference member n_ter ^ ^ ^ ^ member computeFollowing_ter ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ 
return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowing(n));
ReturnStatement expression MethodInvocation arguments MethodInvocation qualifier ControlFlowAnalysis_ter ^ ^ arguments MemberReference member n_ter ^ ^ ^ ^ member hasChildren_ter ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ 
return tryRemoveUnconditionalBranching(ControlFlowAnalysis.hasChildren(n));
ReturnStatement expression MemberReference member fallThrough_ter ^ ^ ^ ^ ^ 
if (true) { return fallThrough; }

ReturnStatement expression MethodInvocation arguments MethodInvocation qualifier ControlFlowAnalysis_ter ^ ^ arguments MemberReference member n_ter ^ ^ ^ ^ member removeDeadExprStatementSafely_ter ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ 
return tryRemoveUnconditionalBranching(ControlFlowAnalysis.removeDeadExprStatementSafely(n));
ReturnStatement expression MethodInvocation arguments MethodInvocation qualifier ControlFlowAnalysis_ter ^ ^ arguments MemberReference member n_ter ^ ^ ^ ^ member getType_ter ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ 
return tryRemoveUnconditionalBranching(ControlFlowAnalysis.getType(n));
BreakStatement_ter ^ 
break;

ReturnStatement expression MemberReference member n_ter ^ ^ ^ ^ ^ 
return n;
ReturnStatement expression MethodInvocation arguments MethodInvocation qualifier ControlFlowAnalysis_ter ^ ^ arguments MemberReference member n_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ 
return tryRemoveUnconditionalBranching(ControlFlowAnalysis.get(n));
ReturnStatement expression MethodInvocation arguments MethodInvocation qualifier ControlFlowAnalysis_ter ^ ^ arguments MemberReference member n_ter ^ ^ ^ ^ member getDirectedGraphNode_ter ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ 
return tryRemoveUnconditionalBranching(ControlFlowAnalysis.getDirectedGraphNode(n));
ReturnStatement expression MemberReference member fallThrough_ter ^ ^ ^ ^ ^ 
return fallThrough;
ReturnStatement expression MethodInvocation arguments MethodInvocation qualifier ControlFlowAnalysis_ter ^ ^ arguments MemberReference member first_ter ^ ^ ^ ^ member computeFollowNode_ter ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ 
return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(first));
ReturnStatement expression MethodInvocation arguments MethodInvocation qualifier Token_ter ^ ^ arguments MemberReference member n_ter ^ ^ ^ ^ member computeFollowNode_ter ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ 
return tryRemoveUnconditionalBranching(Token.computeFollowNode(n));
ReturnStatement expression MethodInvocation arguments MethodInvocation qualifier Branch_ter ^ ^ arguments MemberReference member n_ter ^ ^ ^ ^ member computeFollowNode_ter ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ 
return tryRemoveUnconditionalBranching(Branch.computeFollowNode(n));
ReturnStatement expression MethodInvocation arguments MethodInvocation qualifier n_ter ^ ^ arguments MemberReference member n_ter ^ ^ ^ ^ member computeFollowNode_ter ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ 
return tryRemoveUnconditionalBranching(n.computeFollowNode(n));

ReturnStatement expression MethodInvocation arguments MemberReference member loc1 ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ 
return tryRemoveUnconditionalBranching();
ReturnStatement expression MethodInvocation arguments MemberReference member par1 ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ 
return tryRemoveUnconditionalBranching();
ReturnStatement expression MemberReference member n_ter ^ ^ ^ ^ ^ 
if (true) { return n; }

ReturnStatement expression MethodInvocation arguments MethodInvocation qualifier gNode_ter ^ ^ arguments MemberReference member n_ter ^ ^ ^ ^ member computeFollowNode_ter ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ 
return tryRemoveUnconditionalBranching(gNode.computeFollowNode(n));
ReturnStatement expression MethodInvocation arguments MemberReference member first_ter ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ 
return tryRemoveUnconditionalBranching(first);
ReturnStatement expression MethodInvocation arguments MethodInvocation qualifier ControlFlowAnalysis_ter ^ ^ arguments MemberReference member n_ter ^ ^ ^ ^ member computeFollowNode_ter ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ 
return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
ReturnStatement expression MethodInvocation arguments MemberReference member n_ter ^ ^ ^ ^ member removeDeadExprStatementSafely_ter ^ ^ ^ ^ ^ 
return removeDeadExprStatementSafely(n);
ReturnStatement expression MethodInvocation arguments MemberReference member first_ter ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ 
if (true) { return tryRemoveUnconditionalBranching(first); }

ReturnStatement expression MethodInvocation arguments MethodInvocation qualifier ControlFlowAnalysis_ter ^ ^ arguments MemberReference member n_ter ^ ^ ^ ^ member computeFollowNode_ter ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
return checkState(ControlFlowAnalysis.computeFollowNode(n));
StatementExpression expression MethodInvocation arguments MemberReference member n_ter ^ ^ ^ ^ member removeDeadExprStatementSafely_ter ^ ^ ^ ^ ^ 
removeDeadExprStatementSafely(n);

ReturnStatement expression MethodInvocation arguments Literal value 0_ter ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ 
return tryRemoveUnconditionalBranching(0);
ReturnStatement expression MethodInvocation arguments MethodInvocation qualifier outEdges_ter ^ ^ selectors MethodInvocation member getDestination_ter ^ ^ ^ MethodInvocation member getValue_ter ^ ^ ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ 
return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
ReturnStatement expression MethodInvocation arguments MethodInvocation qualifier ControlFlowAnalysis_ter ^ ^ arguments MemberReference member loc1 ^ ^ ^ ^ member computeFollowNode_ter ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ 
return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode());
ReturnStatement expression MethodInvocation member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ 
return tryRemoveUnconditionalBranching();
ReturnStatement expression MethodInvocation arguments MethodInvocation qualifier ControlFlowAnalysis_ter ^ ^ arguments MemberReference member n_ter ^ ^ ^ ^ member computeFollowNode_ter ^ ^ ^ ^ member removeDeadExprStatementSafely_ter ^ ^ ^ ^ ^ 
return removeDeadExprStatementSafely(ControlFlowAnalysis.computeFollowNode(n));
ReturnStatement expression MethodInvocation arguments MethodInvocation qualifier ControlFlowAnalysis_ter ^ ^ arguments MemberReference member outEdges_ter ^ ^ ^ ^ member computeFollowNode_ter ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ 
return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(outEdges));
ReturnStatement expression MethodInvocation arguments MethodInvocation arguments MemberReference member n_ter ^ ^ ^ ^ member removeDeadExprStatementSafely_ter ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ 
return tryRemoveUnconditionalBranching(removeDeadExprStatementSafely(n));
StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier outEdges_ter ^ ^ selectors MethodInvocation member getValue_ter ^ ^ ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MemberReference qualifier Branch_ter ^ ^ member UNCOND_ter ^ ^ ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState((outEdges.get(0).getValue() == Branch.UNCOND));

ReturnStatement expression MethodInvocation qualifier ControlFlowAnalysis_ter ^ ^ arguments MemberReference member n_ter ^ ^ ^ ^ member computeFollowNode_ter ^ ^ ^ ^ ^ 
return ControlFlowAnalysis.computeFollowNode(n);
ReturnStatement expression MethodInvocation arguments MethodInvocation qualifier ControlFlowAnalysis_ter ^ ^ arguments MemberReference member n_ter ^ ^ ^ ^ member computeFollowNode_ter ^ ^ ^ ^ member debug_ter ^ ^ ^ ^ ^ 
return debug(ControlFlowAnalysis.computeFollowNode(n));
ReturnStatement expression MethodInvocation arguments MemberReference member gNode_ter ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ 
return tryRemoveUnconditionalBranching(gNode);
ReturnStatement expression MethodInvocation arguments MethodInvocation qualifier n_ter ^ ^ member getNext_ter ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ 
return tryRemoveUnconditionalBranching(n.getNext());
ReturnStatement expression MemberReference member first_ter ^ ^ ^ ^ ^ 
if (true) { return first; }

ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if (true) { return null; }

ContinueStatement_ter ^ 
continue;

ReturnStatement expression MethodInvocation arguments MethodInvocation qualifier n_ter ^ ^ member getParent_ter ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ 
return tryRemoveUnconditionalBranching(n.getParent());
ReturnStatement expression MethodInvocation arguments MemberReference member first_ter ^ ^ ^ ^ member removeDeadExprStatementSafely_ter ^ ^ ^ ^ ^ 
return removeDeadExprStatementSafely(first);
ReturnStatement expression MethodInvocation arguments MethodInvocation qualifier n_ter ^ ^ member hasChildren_ter ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ 
return tryRemoveUnconditionalBranching(n.hasChildren());
LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name fallThrough_ter ^ ^ initializer MethodInvocation arguments MethodInvocation arguments MemberReference member n_ter ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node fallThrough = tryRemoveUnconditionalBranching(tryRemoveUnconditionalBranching(n));

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name fallThrough_ter ^ ^ initializer MethodInvocation arguments MethodInvocation arguments MemberReference member n_ter ^ ^ ^ ^ member computeFollowing_ter ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node fallThrough = tryRemoveUnconditionalBranching(computeFollowing(n));

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name fallThrough_ter ^ ^ initializer MethodInvocation arguments MemberReference member n_ter ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node fallThrough = tryRemoveUnconditionalBranching(n);

BreakStatement_ter ^ 
break;

StatementExpression expression MethodInvocation arguments MemberReference member n_ter ^ ^ ^ ^ member removeDeadExprStatementSafely_ter ^ ^ ^ ^ ^ 
removeDeadExprStatementSafely(n);

StatementExpression expression MethodInvocation qualifier Preconditions_ter ^ ^ arguments BinaryOperation operator ==_ter ^ ^ operandl MethodInvocation qualifier outEdges_ter ^ ^ selectors MethodInvocation member getValue_ter ^ ^ ^ ^ arguments Literal value 0_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ operandr MemberReference qualifier Branch_ter ^ ^ member UNCOND_ter ^ ^ ^ ^ ^ ^ member checkState_ter ^ ^ ^ ^ ^ 
Preconditions.checkState((outEdges.get(0).getValue() == Branch.UNCOND));

ReturnStatement expression MemberReference member fallThrough_ter ^ ^ ^ ^ ^ 
if (true) { return fallThrough; }

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name fallThrough_ter ^ ^ initializer MethodInvocation arguments MemberReference member n_ter ^ ^ ^ ^ member computeFollowing_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node fallThrough = computeFollowing(n);

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name fallThrough_ter ^ ^ initializer MethodInvocation member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node fallThrough = tryRemoveUnconditionalBranching();

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name fallThrough_ter ^ ^ initializer MethodInvocation arguments MethodInvocation arguments MemberReference member n_ter ^ ^ ^ ^ member removeDeadExprStatementSafely_ter ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node fallThrough = tryRemoveUnconditionalBranching(removeDeadExprStatementSafely(n));

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name fallThrough_ter ^ ^ initializer MethodInvocation arguments MethodInvocation arguments MemberReference member n_ter ^ ^ ^ ^ member computeFollowNode_ter ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node fallThrough = tryRemoveUnconditionalBranching(computeFollowNode(n));

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name fallThrough_ter ^ ^ initializer MethodInvocation arguments MethodInvocation arguments MemberReference member fallThrough_ter ^ ^ ^ ^ member computeFollowing_ter ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node fallThrough = tryRemoveUnconditionalBranching(computeFollowing(fallThrough));

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name fallThrough_ter ^ ^ initializer MethodInvocation arguments MemberReference member n_ter ^ ^ ^ ^ member removeDeadExprStatementSafely_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node fallThrough = removeDeadExprStatementSafely(n);

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name fallThrough_ter ^ ^ initializer MethodInvocation arguments MethodInvocation member getDestination_ter ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node fallThrough = tryRemoveUnconditionalBranching(getDestination());

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name fallThrough_ter ^ ^ initializer MethodInvocation qualifier n_ter ^ ^ arguments MemberReference member n_ter ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node fallThrough = n.tryRemoveUnconditionalBranching(n);

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name fallThrough_ter ^ ^ initializer MethodInvocation arguments MethodInvocation arguments MemberReference member n_ter ^ ^ ^ ^ member getDestination_ter ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node fallThrough = tryRemoveUnconditionalBranching(getDestination(n));

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name fallThrough_ter ^ ^ initializer MethodInvocation arguments MethodInvocation member getValue_ter ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node fallThrough = tryRemoveUnconditionalBranching(getValue());

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name fallThrough_ter ^ ^ initializer MethodInvocation arguments MethodInvocation arguments MemberReference member n_ter ^ ^ ^ ^ member hasChildren_ter ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node fallThrough = tryRemoveUnconditionalBranching(hasChildren(n));

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name fallThrough_ter ^ ^ initializer MethodInvocation arguments MethodInvocation arguments MemberReference member outEdges_ter ^ ^ ^ ^ member computeFollowing_ter ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node fallThrough = tryRemoveUnconditionalBranching(computeFollowing(outEdges));

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name fallThrough_ter ^ ^ initializer MethodInvocation arguments MethodInvocation arguments MemberReference member n_ter ^ ^ ^ ^ member getValue_ter ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node fallThrough = tryRemoveUnconditionalBranching(getValue(n));

ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if (true) { return null; }

LocalVariableDeclaration type ReferenceType name DiGraphNode_ter ^ ^ arguments TypeArgument type ReferenceType name Node_ter ^ ^ ^ ^ ^ TypeArgument type ReferenceType name Branch_ter ^ ^ ^ ^ ^ ^ ^ ^ declarators VariableDeclarator name gNode_ter ^ ^ initializer MethodInvocation qualifier curCfg_ter ^ ^ arguments MemberReference member n_ter ^ ^ ^ ^ member getDirectedGraphNode_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
arg Node, Branch
arg 
arg 
arg Node, Branch
DiGraphNode<Node, Branch> gNode = curCfg.getDirectedGraphNode(n);

LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name fallThrough_ter ^ ^ initializer MethodInvocation arguments MethodInvocation arguments MemberReference member n_ter ^ ^ ^ ^ member computeFollowing_ter ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
final Node fallThrough = tryRemoveUnconditionalBranching(computeFollowing(n));

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name fallThrough_ter ^ ^ initializer MethodInvocation arguments MethodInvocation arguments MemberReference member first_ter ^ ^ ^ ^ member computeFollowing_ter ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node fallThrough = tryRemoveUnconditionalBranching(computeFollowing(first));

StatementExpression expression MethodInvocation arguments MethodInvocation arguments MemberReference member n_ter ^ ^ ^ ^ member computeFollowing_ter ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ 
tryRemoveUnconditionalBranching(computeFollowing(n));

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name fallThrough_ter ^ ^ initializer MethodInvocation arguments Literal value 0_ter ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node fallThrough = tryRemoveUnconditionalBranching(0);

LocalVariableDeclaration type ReferenceType name List_ter ^ ^ arguments TypeArgument type ReferenceType name DiGraphEdge_ter ^ ^ arguments TypeArgument type ReferenceType name Node_ter ^ ^ ^ ^ ^ TypeArgument type ReferenceType name Branch_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ declarators VariableDeclarator name outEdges_ter ^ ^ initializer MethodInvocation qualifier gNode_ter ^ ^ member getOutEdges_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
arg Node, Branch
arg DiGraphEdge<Node, Branch>
arg 
arg 
arg Node, Branch
arg DiGraphEdge<Node, Branch>
List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();


LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name fallThrough_ter ^ ^ ^ ^ ^ 
arg 
arg 
Node fallThrough = ;


LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name fallThrough_ter ^ ^ initializer MethodInvocation arguments MethodInvocation arguments MemberReference member n_ter ^ ^ ^ ^ member getType_ter ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node fallThrough = tryRemoveUnconditionalBranching(getType(n));

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name fallThrough_ter ^ ^ initializer MethodInvocation arguments MethodInvocation arguments MethodInvocation arguments MemberReference member n_ter ^ ^ ^ ^ member computeFollowing_ter ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node fallThrough = tryRemoveUnconditionalBranching(tryRemoveUnconditionalBranching(computeFollowing(n)));

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name first_ter ^ ^ initializer MethodInvocation qualifier n_ter ^ ^ member getFirstChild_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node first = n.getFirstChild();

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name fallThrough_ter ^ ^ initializer MethodInvocation qualifier Preconditions_ter ^ ^ arguments MemberReference member n_ter ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node fallThrough = Preconditions.tryRemoveUnconditionalBranching(n);

ContinueStatement_ter ^ 
continue;

ReturnStatement expression MemberReference member n_ter ^ ^ ^ ^ ^ 
if (true) { return n; }

LocalVariableDeclaration type ReferenceType name List_ter ^ ^ arguments TypeArgument type ReferenceType name DiGraphEdge_ter ^ ^ arguments TypeArgument type ReferenceType name Node_ter ^ ^ ^ ^ ^ TypeArgument type ReferenceType name Branch_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ declarators VariableDeclarator name fallThrough_ter ^ ^ initializer MethodInvocation arguments MethodInvocation arguments MemberReference member n_ter ^ ^ ^ ^ member computeFollowing_ter ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
arg Node, Branch
arg DiGraphEdge<Node, Branch>
arg 
arg 
arg Node, Branch
arg DiGraphEdge<Node, Branch>
List<DiGraphEdge<Node, Branch>> fallThrough = tryRemoveUnconditionalBranching(computeFollowing(n));

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name fallThrough_ter ^ ^ initializer MethodInvocation arguments MethodInvocation arguments MemberReference member loc1 ^ ^ ^ ^ member computeFollowing_ter ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node fallThrough = tryRemoveUnconditionalBranching(computeFollowing());

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name fallThrough_ter ^ ^ initializer MethodInvocation qualifier Preconditions_ter ^ ^ arguments MethodInvocation arguments MemberReference member n_ter ^ ^ ^ ^ member computeFollowing_ter ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node fallThrough = Preconditions.tryRemoveUnconditionalBranching(computeFollowing(n));

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name fallThrough_ter ^ ^ initializer Cast type ReferenceType name Node_ter ^ ^ ^ ^ expression MethodInvocation arguments MemberReference member n_ter ^ ^ ^ ^ member computeFollowing_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
arg 
arg 
Node fallThrough = (Node)computeFollowing(n);

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name fallThrough_ter ^ ^ initializer MethodInvocation arguments MethodInvocation arguments MemberReference member n_ter ^ ^ ^ ^ member computeFollowing_ter ^ ^ ^ Literal value false_ter ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node fallThrough = tryRemoveUnconditionalBranching(computeFollowing(n), false);

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name fallThrough_ter ^ ^ initializer MethodInvocation qualifier n_ter ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node fallThrough = n.tryRemoveUnconditionalBranching();

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name fallThrough_ter ^ ^ initializer MethodInvocation arguments MethodInvocation arguments MemberReference member n_ter ^ ^ ^ ^ member computeFollowing_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node fallThrough = tryRemoveUnconditionalBranching(computeFollowing(n), true);

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name fallThrough_ter ^ ^ initializer MethodInvocation arguments MethodInvocation arguments MemberReference member nextCfgNode_ter ^ ^ ^ ^ member computeFollowing_ter ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node fallThrough = tryRemoveUnconditionalBranching(computeFollowing(nextCfgNode));

LocalVariableDeclaration type ReferenceType name DiGraphNode_ter ^ ^ arguments TypeArgument type ReferenceType name Node_ter ^ ^ ^ ^ ^ TypeArgument type ReferenceType name Branch_ter ^ ^ ^ ^ ^ ^ ^ ^ declarators VariableDeclarator name fallThrough_ter ^ ^ initializer MethodInvocation arguments MethodInvocation arguments MemberReference member n_ter ^ ^ ^ ^ member computeFollowing_ter ^ ^ ^ ^ member tryRemoveUnconditionalBranching_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
arg Node, Branch
arg 
arg 
arg Node, Branch
DiGraphNode<Node, Branch> fallThrough = tryRemoveUnconditionalBranching(computeFollowing(n));

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name next_ter ^ ^ initializer MethodInvocation qualifier ControlFlowAnalysis_ter ^ ^ arguments MemberReference member n_ter ^ ^ ^ ^ member computeFollowing_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node next = ControlFlowAnalysis.computeFollowing(n);

StatementExpression expression MethodInvocation qualifier ControlFlowAnalysis_ter ^ ^ arguments MemberReference member n_ter ^ ^ ^ ^ member computeFollowNode_ter ^ ^ ^ ^ ^ 
ControlFlowAnalysis.computeFollowNode(n);

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name next_ter ^ ^ initializer MethodInvocation arguments MemberReference member n_ter ^ ^ ^ ^ member removeDeadExprStatementSafely_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node next = removeDeadExprStatementSafely(n);

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name next_ter ^ ^ initializer MethodInvocation arguments MemberReference member n_ter ^ ^ ^ ^ member computeFollowNode_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node next = computeFollowNode(n);

LocalVariableDeclaration modifiers final_ter ^ ^ type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name next_ter ^ ^ initializer MethodInvocation qualifier ControlFlowAnalysis_ter ^ ^ arguments MemberReference member n_ter ^ ^ ^ ^ member computeFollowNode_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
final Node next = ControlFlowAnalysis.computeFollowNode(n);

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name next_ter ^ ^ initializer MethodInvocation qualifier ControlFlowAnalysis_ter ^ ^ arguments MemberReference member n_ter ^ ^ ^ Literal value false_ter ^ ^ ^ ^ member computeFollowNode_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node next = ControlFlowAnalysis.computeFollowNode(n, false);

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name next_ter ^ ^ initializer MethodInvocation qualifier ControlFlowAnalysis_ter ^ ^ arguments MemberReference member n_ter ^ ^ ^ Literal value true_ter ^ ^ ^ ^ member computeFollowNode_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node next = ControlFlowAnalysis.computeFollowNode(n, true);

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name next_ter ^ ^ initializer MethodInvocation qualifier ControlFlowAnalysis_ter ^ ^ arguments MemberReference member n_ter ^ ^ ^ ^ member removeDeadExprStatementSafely_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node next = ControlFlowAnalysis.removeDeadExprStatementSafely(n);

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
ReturnStatement expression Literal value null_ter ^ ^ ^ ^ ^ 
if((n == null)){
return null;}
LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name next_ter ^ ^ initializer MethodInvocation qualifier ControlFlowAnalysis_ter ^ ^ arguments MemberReference member n_ter ^ ^ ^ Literal value null_ter ^ ^ ^ ^ member computeFollowNode_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node next = ControlFlowAnalysis.computeFollowNode(n, null);

StatementExpression expression Assignment expressionl MemberReference member next_ter ^ ^ ^ ^ value MethodInvocation qualifier ControlFlowAnalysis_ter ^ ^ arguments MemberReference member n_ter ^ ^ ^ ^ member computeFollowNode_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
next = ControlFlowAnalysis.computeFollowNode(n);

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name next_ter ^ ^ initializer MethodInvocation qualifier ControlFlowAnalysis_ter ^ ^ arguments MemberReference member n_ter ^ ^ ^ ^ member add_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node next = ControlFlowAnalysis.add(n);

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name next_ter ^ ^ initializer MethodInvocation qualifier ControlFlowAnalysis_ter ^ ^ arguments MemberReference member n_ter ^ ^ ^ ^ member debug_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node next = ControlFlowAnalysis.debug(n);

IfStatement condition BinaryOperation operator !=_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((n != null)){

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
if((n == null)){

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name next_ter ^ ^ initializer MethodInvocation qualifier ControlFlowAnalysis_ter ^ ^ arguments MemberReference member n_ter ^ ^ ^ ^ member computeFollowNode_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node next = ControlFlowAnalysis.computeFollowNode(n);

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name next_ter ^ ^ initializer MethodInvocation qualifier ControlFlowAnalysis_ter ^ ^ arguments MemberReference member n_ter ^ ^ ^ ^ member e_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node next = ControlFlowAnalysis.e(n);

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name next_ter ^ ^ initializer MethodInvocation qualifier n_ter ^ ^ member computeFollowNode_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node next = n.computeFollowNode();

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name next_ter ^ ^ initializer MethodInvocation qualifier ControlFlowAnalysis_ter ^ ^ member computeFollowNode_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node next = ControlFlowAnalysis.computeFollowNode();

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name next_ter ^ ^ initializer MethodInvocation member computeFollowNode_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node next = computeFollowNode();

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name next_ter ^ ^ initializer MethodInvocation qualifier ControlFlowAnalysis_ter ^ ^ arguments MemberReference member n_ter ^ ^ ^ Literal value <string>_ter ^ ^ ^ ^ member computeFollowNode_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node next = ControlFlowAnalysis.computeFollowNode(n, "null");

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name next_ter ^ ^ initializer MethodInvocation qualifier ControlFlowAnalysis_ter ^ ^ arguments MemberReference member n_ter ^ ^ ^ ^ member max_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node next = ControlFlowAnalysis.max(n);

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ arguments TypeArgument pattern_type ?_ter ^ ^ ^ ^ ^ ^ declarators VariableDeclarator name next_ter ^ ^ initializer MethodInvocation qualifier ControlFlowAnalysis_ter ^ ^ arguments MemberReference member n_ter ^ ^ ^ ^ member computeFollowNode_ter ^ ^ ^ ^ ^ ^ ^ 
arg ?
arg ?
Node<?> next = ControlFlowAnalysis.computeFollowNode(n);

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name next_ter ^ ^ initializer MethodInvocation qualifier ControlFlowAnalysis_ter ^ ^ arguments MemberReference member n_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node next = ControlFlowAnalysis.get(n);

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name next_ter ^ ^ initializer MethodInvocation qualifier ControlFlowAnalysis_ter ^ ^ arguments MemberReference member n_ter ^ ^ ^ Literal value 0_ter ^ ^ ^ ^ member computeFollowNode_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node next = ControlFlowAnalysis.computeFollowNode(n, 0);

StatementExpression expression Assignment expressionl MemberReference member n_ter ^ ^ ^ ^ value MethodInvocation qualifier n_ter ^ ^ member detachChildren_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
n = n.detachChildren();

StatementExpression expression Assignment expressionl MemberReference member n_ter ^ ^ ^ ^ value MethodInvocation qualifier n_ter ^ ^ member setQuotedString_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
n = n.setQuotedString();

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name next_ter ^ ^ initializer MethodInvocation qualifier ControlFlowAnalysis_ter ^ ^ arguments MemberReference member n_ter ^ ^ ^ MemberReference member n_ter ^ ^ ^ ^ member computeFollowNode_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node next = ControlFlowAnalysis.computeFollowNode(n, n);

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name next_ter ^ ^ initializer MethodInvocation qualifier n_ter ^ ^ arguments MemberReference member n_ter ^ ^ ^ ^ member computeFollowNode_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node next = n.computeFollowNode(n);

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name next_ter ^ ^ ^ ^ ^ 
arg 
arg 
Node next = ;


StatementExpression expression MethodInvocation qualifier n_ter ^ ^ member detachChildren_ter ^ ^ ^ ^ ^ 
n.detachChildren();

StatementExpression expression MethodInvocation qualifier n_ter ^ ^ member setQuotedString_ter ^ ^ ^ ^ ^ 
n.setQuotedString();

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name next_ter ^ ^ initializer MethodInvocation qualifier ControlFlowAnalysis_ter ^ ^ arguments MemberReference member n_ter ^ ^ ^ This_ter ^ ^ member computeFollowNode_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node next = ControlFlowAnalysis.computeFollowNode(n, this);

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name next_ter ^ ^ initializer MethodInvocation qualifier ControlFlowAnalysis_ter ^ ^ arguments MemberReference member n_ter ^ ^ ^ Literal value 1_ter ^ ^ ^ ^ member computeFollowNode_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node next = ControlFlowAnalysis.computeFollowNode(n, 1);

IfStatement condition BinaryOperation operator ==_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
ReturnStatement expression MemberReference member next_ter ^ ^ ^ ^ ^ 
if((n == null)){
return next;}
LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name next_ter ^ ^ initializer MethodInvocation qualifier ControlFlowAnalysis_ter ^ ^ arguments MemberReference member n_ter ^ ^ ^ ^ member put_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
Node next = ControlFlowAnalysis.put(n);

LocalVariableDeclaration type ReferenceType name Node_ter ^ ^ ^ ^ declarators VariableDeclarator name next_ter ^ ^ initializer Cast type ReferenceType name Node_ter ^ ^ ^ ^ expression MethodInvocation qualifier ControlFlowAnalysis_ter ^ ^ arguments MemberReference member n_ter ^ ^ ^ ^ member computeFollowNode_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
arg 
arg 
Node next = (Node)ControlFlowAnalysis.computeFollowNode(n);

stderr: 