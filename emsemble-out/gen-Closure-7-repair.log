stdout: ReturnStatement expression TernaryExpression condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member resultEqualsValue_ter ^ ^ ^ ^ operandr MethodInvocation qualifier ctorType_ter ^ ^ arguments MemberReference member type_ter ^ ^ ^ ^ member isEquivalentTo_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member ctorType_ter ^ ^ ^ ^ if_false Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
return ((resultEqualsValue && ctorType.isEquivalentTo(type)))?ctorType:null;
ReturnStatement expression TernaryExpression condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member resultEqualsValue_ter ^ ^ ^ ^ operandr MethodInvocation qualifier ctorType_ter ^ ^ arguments MemberReference member type_ter ^ ^ ^ ^ member differsFrom_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member ctorType_ter ^ ^ ^ ^ if_false Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
return ((resultEqualsValue && ctorType.differsFrom(type)))?ctorType:null;
ReturnStatement expression TernaryExpression condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member resultEqualsValue_ter ^ ^ ^ ^ operandr MethodInvocation qualifier ctorType_ter ^ ^ arguments MemberReference member type_ter ^ ^ ^ ^ member canAssignTo_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member ctorType_ter ^ ^ ^ ^ if_false Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
return ((resultEqualsValue && ctorType.canAssignTo(type)))?ctorType:null;
ReturnStatement expression TernaryExpression condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member resultEqualsValue_ter ^ ^ ^ ^ operandr MethodInvocation qualifier ctorType_ter ^ ^ arguments MemberReference member type_ter ^ ^ ^ ^ member canTestForEqualityWith_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member ctorType_ter ^ ^ ^ ^ if_false Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
return ((resultEqualsValue && ctorType.canTestForEqualityWith(type)))?ctorType:null;
ReturnStatement expression TernaryExpression condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member resultEqualsValue_ter ^ ^ ^ ^ operandr MethodInvocation qualifier ctorType_ter ^ ^ arguments MemberReference member type_ter ^ ^ ^ ^ member canTestForShallowEqualityWith_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member ctorType_ter ^ ^ ^ ^ if_false Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
return ((resultEqualsValue && ctorType.canTestForShallowEqualityWith(type)))?ctorType:null;
ReturnStatement expression TernaryExpression condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member resultEqualsValue_ter ^ ^ ^ ^ operandr MethodInvocation qualifier ctorType_ter ^ ^ arguments MemberReference member type_ter ^ ^ ^ ^ member isSubtype_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member ctorType_ter ^ ^ ^ ^ if_false Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
return ((resultEqualsValue && ctorType.isSubtype(type)))?ctorType:null;
ReturnStatement expression TernaryExpression condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member ctorType_ter ^ ^ ^ ^ operandr MethodInvocation qualifier ctorType_ter ^ ^ arguments MemberReference member type_ter ^ ^ ^ ^ member isSubtype_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member ctorType_ter ^ ^ ^ ^ if_false Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
return ((ctorType && ctorType.isSubtype(type)))?ctorType:null;
ReturnStatement expression TernaryExpression condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member resultEqualsValue_ter ^ ^ ^ ^ operandr MethodInvocation qualifier ctorType_ter ^ ^ arguments MemberReference member type_ter ^ ^ ^ ^ member caseObjectType_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member ctorType_ter ^ ^ ^ ^ if_false Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
return ((resultEqualsValue && ctorType.caseObjectType(type)))?ctorType:null;
ReturnStatement expression TernaryExpression condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member resultEqualsValue_ter ^ ^ ^ ^ operandr MethodInvocation qualifier ctorType_ter ^ ^ arguments MemberReference member type_ter ^ ^ ^ ^ member isSubtype_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member ctorType_ter ^ ^ ^ ^ if_false MethodInvocation qualifier ctorType_ter ^ ^ arguments MemberReference member type_ter ^ ^ ^ ^ member isSubtype_ter ^ ^ ^ ^ ^ ^ ^ 
return ((resultEqualsValue && ctorType.isSubtype(type)))?ctorType:ctorType.isSubtype(type);
ReturnStatement expression TernaryExpression condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member type_ter ^ ^ ^ ^ operandr MethodInvocation qualifier ctorType_ter ^ ^ arguments MemberReference member type_ter ^ ^ ^ ^ member isSubtype_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member ctorType_ter ^ ^ ^ ^ if_false Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
return ((type && ctorType.isSubtype(type)))?ctorType:null;
ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl MemberReference member resultEqualsValue_ter ^ ^ ^ ^ operandr MethodInvocation qualifier ctorType_ter ^ ^ arguments MemberReference member type_ter ^ ^ ^ ^ member isSubtype_ter ^ ^ ^ ^ ^ ^ ^ 
return (resultEqualsValue && ctorType.isSubtype(type));
ReturnStatement expression TernaryExpression condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member U2U_CONSTRUCTOR_TYPE_ter ^ ^ ^ ^ operandr MethodInvocation qualifier ctorType_ter ^ ^ arguments MemberReference member type_ter ^ ^ ^ ^ member isSubtype_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member ctorType_ter ^ ^ ^ ^ if_false Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
return ((U2U_CONSTRUCTOR_TYPE && ctorType.isSubtype(type)))?ctorType:null;
ReturnStatement expression TernaryExpression condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member resultEqualsValue_ter ^ ^ ^ ^ operandr MethodInvocation qualifier ctorType_ter ^ ^ arguments MemberReference member ctorType_ter ^ ^ ^ ^ member isSubtype_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member ctorType_ter ^ ^ ^ ^ if_false Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
return ((resultEqualsValue && ctorType.isSubtype(ctorType)))?ctorType:null;
ReturnStatement expression TernaryExpression condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member resultEqualsValue_ter ^ ^ ^ ^ operandr MethodInvocation qualifier ctorType_ter ^ ^ arguments MemberReference member type_ter ^ ^ ^ ^ member isSubtype_ter ^ ^ ^ ^ ^ ^ if_true MethodInvocation qualifier ctorType_ter ^ ^ arguments MemberReference member type_ter ^ ^ ^ ^ member isSubtype_ter ^ ^ ^ ^ if_false Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
return ((resultEqualsValue && ctorType.isSubtype(type)))?ctorType.isSubtype(type):null;
ReturnStatement expression MethodInvocation qualifier ctorType_ter ^ ^ arguments MemberReference member type_ter ^ ^ ^ ^ member isSubtype_ter ^ ^ ^ ^ ^ 
return ctorType.isSubtype(type);
ReturnStatement expression TernaryExpression condition BinaryOperation operator ||_ter ^ ^ operandl MemberReference member resultEqualsValue_ter ^ ^ ^ ^ operandr MethodInvocation qualifier ctorType_ter ^ ^ arguments MemberReference member type_ter ^ ^ ^ ^ member isSubtype_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member ctorType_ter ^ ^ ^ ^ if_false Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
return ((resultEqualsValue || ctorType.isSubtype(type)))?ctorType:null;
ReturnStatement expression TernaryExpression condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member resultEqualsValue_ter ^ ^ ^ ^ operandr MethodInvocation qualifier type_ter ^ ^ arguments MemberReference member type_ter ^ ^ ^ ^ member isSubtype_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member ctorType_ter ^ ^ ^ ^ if_false Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
return ((resultEqualsValue && type.isSubtype(type)))?ctorType:null;
ReturnStatement expression TernaryExpression condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member resultEqualsValue_ter ^ ^ ^ ^ operandr MethodInvocation qualifier ctorType_ter ^ ^ arguments MemberReference member type_ter ^ ^ ^ ^ member isSubtype_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member ctorType_ter ^ ^ ^ ^ if_false BinaryOperation operator &&_ter ^ ^ operandl MemberReference member resultEqualsValue_ter ^ ^ ^ ^ operandr MethodInvocation qualifier ctorType_ter ^ ^ arguments MemberReference member type_ter ^ ^ ^ ^ member isSubtype_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return ((resultEqualsValue && ctorType.isSubtype(type)))?ctorType:(resultEqualsValue && ctorType.isSubtype(type));
ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MemberReference member resultEqualsValue_ter ^ ^ ^ ^ operandr MethodInvocation qualifier ctorType_ter ^ ^ arguments MemberReference member type_ter ^ ^ ^ ^ member isSubtype_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier ctorType_ter ^ ^ arguments MemberReference member type_ter ^ ^ ^ ^ member isSubtype_ter ^ ^ ^ ^ ^ ^ ^ 
return ((resultEqualsValue && ctorType.isSubtype(type)) && ctorType.isSubtype(type));
ReturnStatement expression TernaryExpression condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member resultEqualsValue_ter ^ ^ ^ ^ operandr MethodInvocation qualifier ctorType_ter ^ ^ arguments MemberReference member type_ter ^ ^ ^ ^ member isSubtype_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member ctorType_ter ^ ^ ^ ^ if_false MemberReference member ctorType_ter ^ ^ ^ ^ ^ ^ ^ 
return ((resultEqualsValue && ctorType.isSubtype(type)))?ctorType:ctorType;
ReturnStatement expression TernaryExpression condition MethodInvocation qualifier ctorType_ter ^ ^ arguments MemberReference member type_ter ^ ^ ^ ^ member isSubtype_ter ^ ^ ^ ^ if_true MemberReference member ctorType_ter ^ ^ ^ ^ if_false Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
return (ctorType.isSubtype(type))?ctorType:null;
ReturnStatement expression TernaryExpression condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member resultEqualsValue_ter ^ ^ ^ ^ operandr MethodInvocation qualifier ctorType_ter ^ ^ arguments MemberReference member type_ter ^ ^ ^ ^ member isSubtype_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member ctorType_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member resultEqualsValue_ter ^ ^ ^ ^ operandr MethodInvocation qualifier ctorType_ter ^ ^ arguments MemberReference member type_ter ^ ^ ^ ^ member isSubtype_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member ctorType_ter ^ ^ ^ ^ if_false Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return ((resultEqualsValue && ctorType.isSubtype(type)))?ctorType:((resultEqualsValue && ctorType.isSubtype(type)))?ctorType:null;
ReturnStatement expression TernaryExpression condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member resultEqualsValue_ter ^ ^ ^ ^ operandr MethodInvocation qualifier ctorType_ter ^ ^ arguments MemberReference member type_ter ^ ^ ^ ^ member isSubtype_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member ctorType_ter ^ ^ ^ ^ if_false MethodInvocation qualifier ctorType_ter ^ ^ member isSubtype_ter ^ ^ ^ ^ ^ ^ ^ 
return ((resultEqualsValue && ctorType.isSubtype(type)))?ctorType:ctorType.isSubtype();
ReturnStatement expression TernaryExpression condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member resultEqualsValue_ter ^ ^ ^ ^ operandr MethodInvocation qualifier ctorType_ter ^ ^ arguments MemberReference member type_ter ^ ^ ^ ^ member isSubtype_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member ctorType_ter ^ ^ ^ ^ if_false MemberReference member type_ter ^ ^ ^ ^ ^ ^ ^ 
return ((resultEqualsValue && ctorType.isSubtype(type)))?ctorType:type;
ReturnStatement expression TernaryExpression condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member resultEqualsValue_ter ^ ^ ^ ^ operandr MethodInvocation qualifier ctorType_ter ^ ^ arguments MemberReference member type_ter ^ ^ ^ ^ member isSubtype_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member resultEqualsValue_ter ^ ^ ^ ^ if_false Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
return ((resultEqualsValue && ctorType.isSubtype(type)))?resultEqualsValue:null;
ReturnStatement expression TernaryExpression condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member resultEqualsValue_ter ^ ^ ^ ^ operandr MethodInvocation qualifier ctorType_ter ^ ^ arguments MemberReference member type_ter ^ ^ ^ ^ member getName_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member ctorType_ter ^ ^ ^ ^ if_false Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
return ((resultEqualsValue && ctorType.getName(type)))?ctorType:null;
ReturnStatement expression TernaryExpression condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member resultEqualsValue_ter ^ ^ ^ ^ operandr MethodInvocation qualifier ctorType_ter ^ ^ arguments MemberReference member type_ter ^ ^ ^ ^ member isSubtype_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member type_ter ^ ^ ^ ^ if_false Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
return ((resultEqualsValue && ctorType.isSubtype(type)))?type:null;
ReturnStatement expression TernaryExpression condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member loc1 ^ ^ ^ ^ operandr MethodInvocation qualifier ctorType_ter ^ ^ arguments MemberReference member type_ter ^ ^ ^ ^ member isSubtype_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member ctorType_ter ^ ^ ^ ^ if_false Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
return (( && ctorType.isSubtype(type)))?ctorType:null;

ReturnStatement expression TernaryExpression condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member resultEqualsValue_ter ^ ^ ^ ^ operandr MethodInvocation qualifier ctorType_ter ^ ^ arguments MemberReference member type_ter ^ ^ ^ ^ member get_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member ctorType_ter ^ ^ ^ ^ if_false Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
return ((resultEqualsValue && ctorType.get(type)))?ctorType:null;
ReturnStatement expression BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier ctorType_ter ^ ^ arguments MemberReference member type_ter ^ ^ ^ ^ member isSubtype_ter ^ ^ ^ ^ operandr MethodInvocation qualifier ctorType_ter ^ ^ arguments MemberReference member type_ter ^ ^ ^ ^ member isSubtype_ter ^ ^ ^ ^ ^ ^ ^ 
return (ctorType.isSubtype(type) && ctorType.isSubtype(type));
ReturnStatement expression TernaryExpression condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member resultEqualsValue_ter ^ ^ ^ ^ operandr MethodInvocation qualifier ctorType_ter ^ ^ arguments MemberReference member type_ter ^ ^ ^ ^ member isSubtype_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member ctorType_ter ^ ^ ^ ^ if_false MemberReference member resultEqualsValue_ter ^ ^ ^ ^ ^ ^ ^ 
return ((resultEqualsValue && ctorType.isSubtype(type)))?ctorType:resultEqualsValue;
ReturnStatement expression TernaryExpression condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member par1 ^ ^ ^ ^ operandr MethodInvocation qualifier ctorType_ter ^ ^ arguments MemberReference member type_ter ^ ^ ^ ^ member isSubtype_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member ctorType_ter ^ ^ ^ ^ if_false Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
return (( && ctorType.isSubtype(type)))?ctorType:null;

ReturnStatement expression TernaryExpression condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member resultEqualsValue_ter ^ ^ ^ ^ operandr MethodInvocation qualifier ctorType_ter ^ ^ arguments MemberReference member type_ter ^ ^ ^ ^ member isSubtype_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member ctorType_ter ^ ^ ^ ^ if_false This selectors MemberReference member resultEqualsValue_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return ((resultEqualsValue && ctorType.isSubtype(type)))?ctorType:this.resultEqualsValue;
ReturnStatement expression MemberReference member ctorType_ter ^ ^ ^ ^ ^ 
return ctorType;
ReturnStatement expression TernaryExpression condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member resultEqualsValue_ter ^ ^ ^ ^ operandr MethodInvocation qualifier ctorType_ter ^ ^ arguments MemberReference member type_ter ^ ^ ^ ^ member isSubtype_ter ^ ^ ^ ^ ^ ^ if_true MethodInvocation qualifier ctorType_ter ^ ^ member isSubtype_ter ^ ^ ^ ^ if_false Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
return ((resultEqualsValue && ctorType.isSubtype(type)))?ctorType.isSubtype():null;
ReturnStatement expression TernaryExpression condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member resultEqualsValue_ter ^ ^ ^ ^ operandr MethodInvocation qualifier ctorType_ter ^ ^ arguments MemberReference member type_ter ^ ^ ^ ^ member isSubtype_ter ^ ^ ^ ^ ^ ^ if_true Cast type ReferenceType name ObjectType_ter ^ ^ ^ ^ expression MethodInvocation qualifier ctorType_ter ^ ^ arguments MemberReference member type_ter ^ ^ ^ ^ member isSubtype_ter ^ ^ ^ ^ ^ ^ if_false Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
return ((resultEqualsValue && ctorType.isSubtype(type)))?(ObjectType)ctorType.isSubtype(type):null;
ReturnStatement expression TernaryExpression condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member resultEqualsValue_ter ^ ^ ^ ^ operandr MethodInvocation qualifier ctorType_ter ^ ^ arguments MemberReference member type_ter ^ ^ ^ ^ member isSubtype_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member ctorType_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member resultEqualsValue_ter ^ ^ ^ ^ operandr MethodInvocation qualifier ctorType_ter ^ ^ arguments MemberReference member type_ter ^ ^ ^ ^ member isSubtype_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member ctorType_ter ^ ^ ^ ^ if_false MethodInvocation qualifier ctorType_ter ^ ^ arguments MemberReference member type_ter ^ ^ ^ ^ member isSubtype_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return ((resultEqualsValue && ctorType.isSubtype(type)))?ctorType:((resultEqualsValue && ctorType.isSubtype(type)))?ctorType:ctorType.isSubtype(type);
ReturnStatement expression TernaryExpression condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member resultEqualsValue_ter ^ ^ ^ ^ operandr MethodInvocation qualifier ctorType_ter ^ ^ arguments MemberReference member type_ter ^ ^ ^ ^ member isSubtype_ter ^ ^ ^ ^ ^ ^ if_true Cast type ReferenceType name JSType_ter ^ ^ ^ ^ expression MethodInvocation qualifier ctorType_ter ^ ^ arguments MemberReference member type_ter ^ ^ ^ ^ member isSubtype_ter ^ ^ ^ ^ ^ ^ if_false Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
return ((resultEqualsValue && ctorType.isSubtype(type)))?(JSType)ctorType.isSubtype(type):null;
ReturnStatement expression TernaryExpression condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member resultEqualsValue_ter ^ ^ ^ ^ operandr MethodInvocation qualifier ctorType_ter ^ ^ arguments MemberReference member type_ter ^ ^ ^ ^ member isSubtype_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member ctorType_ter ^ ^ ^ ^ if_false BinaryOperation operator &&_ter ^ ^ operandl MethodInvocation qualifier ctorType_ter ^ ^ arguments MemberReference member type_ter ^ ^ ^ ^ member isSubtype_ter ^ ^ ^ ^ operandr MethodInvocation qualifier ctorType_ter ^ ^ arguments MemberReference member type_ter ^ ^ ^ ^ member isSubtype_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return ((resultEqualsValue && ctorType.isSubtype(type)))?ctorType:(ctorType.isSubtype(type) && ctorType.isSubtype(type));
ReturnStatement expression TernaryExpression condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member resultEqualsValue_ter ^ ^ ^ ^ operandr MethodInvocation qualifier ctorType_ter ^ ^ arguments MemberReference member type_ter ^ ^ ^ ^ member isSubtype_ter ^ ^ ^ ^ ^ ^ if_true Cast type ReferenceType name JSType_ter ^ ^ ^ ^ expression MemberReference member ctorType_ter ^ ^ ^ ^ ^ ^ if_false Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
return ((resultEqualsValue && ctorType.isSubtype(type)))?(JSType)ctorType:null;
ReturnStatement expression TernaryExpression condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member resultEqualsValue_ter ^ ^ ^ ^ operandr MethodInvocation qualifier ctorType_ter ^ ^ arguments MemberReference member type_ter ^ ^ ^ ^ member isSubtype_ter ^ ^ ^ ^ ^ ^ if_true Cast type ReferenceType name ObjectType_ter ^ ^ ^ ^ expression MemberReference member ctorType_ter ^ ^ ^ ^ ^ ^ if_false Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
return ((resultEqualsValue && ctorType.isSubtype(type)))?(ObjectType)ctorType:null;
ReturnStatement expression TernaryExpression condition BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MemberReference member resultEqualsValue_ter ^ ^ ^ ^ operandr MethodInvocation qualifier ctorType_ter ^ ^ arguments MemberReference member type_ter ^ ^ ^ ^ member isSubtype_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier ctorType_ter ^ ^ arguments MemberReference member type_ter ^ ^ ^ ^ member isSubtype_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member ctorType_ter ^ ^ ^ ^ if_false Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
return (((resultEqualsValue && ctorType.isSubtype(type)) && ctorType.isSubtype(type)))?ctorType:null;
ReturnStatement expression TernaryExpression condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member resultEqualsValue_ter ^ ^ ^ ^ operandr MethodInvocation qualifier ctorType_ter ^ ^ arguments MemberReference member type_ter ^ ^ ^ ^ member isSubtype_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member ctorType_ter ^ ^ ^ ^ if_false BinaryOperation operator &&_ter ^ ^ operandl BinaryOperation operator &&_ter ^ ^ operandl MemberReference member resultEqualsValue_ter ^ ^ ^ ^ operandr MethodInvocation qualifier ctorType_ter ^ ^ arguments MemberReference member type_ter ^ ^ ^ ^ member isSubtype_ter ^ ^ ^ ^ ^ ^ operandr MethodInvocation qualifier ctorType_ter ^ ^ arguments MemberReference member type_ter ^ ^ ^ ^ member isSubtype_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return ((resultEqualsValue && ctorType.isSubtype(type)))?ctorType:((resultEqualsValue && ctorType.isSubtype(type)) && ctorType.isSubtype(type));
ReturnStatement expression TernaryExpression condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member resultEqualsValue_ter ^ ^ ^ ^ operandr MethodInvocation qualifier ctorType_ter ^ ^ arguments MemberReference member type_ter ^ ^ ^ ^ member isSubtype_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member ctorType_ter ^ ^ ^ ^ if_false TernaryExpression condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member resultEqualsValue_ter ^ ^ ^ ^ operandr MethodInvocation qualifier ctorType_ter ^ ^ arguments MemberReference member type_ter ^ ^ ^ ^ member isSubtype_ter ^ ^ ^ ^ ^ ^ if_true MethodInvocation qualifier ctorType_ter ^ ^ arguments MemberReference member type_ter ^ ^ ^ ^ member isSubtype_ter ^ ^ ^ ^ if_false Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
return ((resultEqualsValue && ctorType.isSubtype(type)))?ctorType:((resultEqualsValue && ctorType.isSubtype(type)))?ctorType.isSubtype(type):null;
ReturnStatement expression TernaryExpression condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member resultEqualsValue_ter ^ ^ ^ ^ operandr MethodInvocation qualifier ctorType_ter ^ ^ arguments MemberReference member type_ter ^ ^ ^ ^ member getNativeType_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member ctorType_ter ^ ^ ^ ^ if_false Literal value null_ter ^ ^ ^ ^ ^ ^ ^ 
return ((resultEqualsValue && ctorType.getNativeType(type)))?ctorType:null;
ReturnStatement expression Cast type ReferenceType name JSType_ter ^ ^ ^ ^ expression TernaryExpression condition BinaryOperation operator &&_ter ^ ^ operandl MemberReference member resultEqualsValue_ter ^ ^ ^ ^ operandr MethodInvocation qualifier ctorType_ter ^ ^ arguments MemberReference member type_ter ^ ^ ^ ^ member isSubtype_ter ^ ^ ^ ^ ^ ^ if_true MemberReference member ctorType_ter ^ ^ ^ ^ if_false Literal value null_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
arg 
arg 
return (JSType)((resultEqualsValue && ctorType.isSubtype(type)))?ctorType:null;
StatementExpression expression MethodInvocation qualifier ctorType_ter ^ ^ member clearResolved_ter ^ ^ ^ ^ ^ 
ctorType.clearResolved();

stderr: 