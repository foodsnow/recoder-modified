stdout: LocalVariableDeclaration type BasicType name long_ter ^ ^ ^ ^ declarators VariableDeclarator name p0_ter ^ ^ initializer Literal value 1.0_ter ^ ^ ^ ^ ^ ^ ^ 
long p0 = 1.0;

LocalVariableDeclaration type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name loc3 ^ ^ ^ ^ ^ 
double  = ;


LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name p0_ter ^ ^ initializer Literal value 1.0_ter ^ ^ ^ ^ ^ ^ ^ 
int p0 = 1.0;

LocalVariableDeclaration type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name loc6 ^ ^ ^ ^ ^ 
double  = ;


LocalVariableDeclaration type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name p0_ter ^ ^ initializer Literal value 1.0_ter ^ ^ ^ ^ ^ ^ ^ 
double p0 = 1.0;

LocalVariableDeclaration type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ ^ ^ ^ 
double  = ;


LocalVariableDeclaration type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name loc3 ^ ^ initializer Literal value 0_ter ^ ^ ^ ^ ^ ^ ^ 
double  = 0;


LocalVariableDeclaration type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name loc3 ^ ^ initializer Literal value 1_ter ^ ^ ^ ^ ^ ^ ^ 
double  = 1;



LocalVariableDeclaration type BasicType name boolean_ter ^ ^ ^ ^ declarators VariableDeclarator name p0_ter ^ ^ initializer Literal value 1.0_ter ^ ^ ^ ^ ^ ^ ^ 
boolean p0 = 1.0;

LocalVariableDeclaration type BasicType name Object_ter ^ ^ ^ ^ declarators VariableDeclarator name p0_ter ^ ^ initializer Literal value 1.0_ter ^ ^ ^ ^ ^ ^ ^ 
Object p0 = 1.0;

ReturnStatement_ter ^ 
if (true) { return;
 }

LocalVariableDeclaration type BasicType name String_ter ^ ^ ^ ^ declarators VariableDeclarator name p0_ter ^ ^ initializer Literal value 1.0_ter ^ ^ ^ ^ ^ ^ ^ 
String p0 = 1.0;

LocalVariableDeclaration type BasicType name List_ter ^ ^ ^ ^ declarators VariableDeclarator name p0_ter ^ ^ initializer Literal value 1.0_ter ^ ^ ^ ^ ^ ^ ^ 
List p0 = 1.0;

LocalVariableDeclaration type BasicType name par0 ^ ^ ^ ^ declarators VariableDeclarator name p0_ter ^ ^ initializer Literal value 1.0_ter ^ ^ ^ ^ ^ ^ ^ 
 p0 = 1.0;


parameters ^ 

LocalVariableDeclaration type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name dPrev_ter ^ ^ initializer Literal value 0.0_ter ^ ^ ^ ^ ^ ^ ^ 
double dPrev = 0.0;

BreakStatement_ter ^ 
break;

LocalVariableDeclaration type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name cN_ter ^ ^ initializer BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member a_ter ^ ^ ^ ^ operandr MemberReference member hPrev_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MemberReference member b_ter ^ ^ ^ ^ operandr MemberReference member n_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
double cN = ((a * hPrev) + (b * n));

LocalVariableDeclaration type BasicType name long_ter ^ ^ ^ ^ declarators VariableDeclarator name cN_ter ^ ^ initializer BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member a_ter ^ ^ ^ ^ operandr MemberReference member hPrev_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MemberReference member b_ter ^ ^ ^ ^ operandr MemberReference member p0_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
long cN = ((a * hPrev) + (b * p0));

LocalVariableDeclaration type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name cN_ter ^ ^ initializer BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member a_ter ^ ^ ^ ^ operandr MemberReference member hPrev_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MemberReference member b_ter ^ ^ ^ ^ operandr MemberReference member x_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
double cN = ((a * hPrev) + (b * x));

LocalVariableDeclaration type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name cN_ter ^ ^ initializer BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member a_ter ^ ^ ^ ^ operandr MemberReference member hPrev_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MemberReference member b_ter ^ ^ ^ ^ operandr MemberReference member dPrev_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
double cN = ((a * hPrev) + (b * dPrev));

LocalVariableDeclaration type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name cN_ter ^ ^ initializer BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member a_ter ^ ^ ^ ^ operandr MemberReference member hPrev_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MemberReference member b_ter ^ ^ ^ ^ operandr MemberReference member p0_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
double cN = ((a * hPrev) + (b * p0));

LocalVariableDeclaration type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name cN_ter ^ ^ initializer BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member a_ter ^ ^ ^ ^ operandr MemberReference member hPrev_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MemberReference member b_ter ^ ^ ^ ^ operandr MemberReference member q1_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
double cN = ((a * hPrev) + (b * q1));

LocalVariableDeclaration type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name cN_ter ^ ^ initializer BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member a_ter ^ ^ ^ ^ operandr MemberReference member hPrev_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MemberReference member b_ter ^ ^ ^ ^ operandr MemberReference member a_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
double cN = ((a * hPrev) + (b * a));

LocalVariableDeclaration type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name cN_ter ^ ^ initializer BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member a_ter ^ ^ ^ ^ operandr MemberReference member hPrev_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator -_ter ^ ^ operandl MemberReference member b_ter ^ ^ ^ ^ operandr MemberReference member p0_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
double cN = ((a * hPrev) + (b - p0));

LocalVariableDeclaration type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name cN_ter ^ ^ initializer BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member a_ter ^ ^ ^ ^ operandr MemberReference member hPrev_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator /_ter ^ ^ operandl MemberReference member b_ter ^ ^ ^ ^ operandr MemberReference member p0_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
double cN = ((a * hPrev) + (b / p0));

LocalVariableDeclaration type BasicType name int_ter ^ ^ ^ ^ declarators VariableDeclarator name cN_ter ^ ^ initializer BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member a_ter ^ ^ ^ ^ operandr MemberReference member hPrev_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MemberReference member b_ter ^ ^ ^ ^ operandr MemberReference member p0_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
int cN = ((a * hPrev) + (b * p0));

LocalVariableDeclaration type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name cN_ter ^ ^ initializer BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member a_ter ^ ^ ^ ^ operandr MemberReference member hPrev_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator +_ter ^ ^ operandl MemberReference member b_ter ^ ^ ^ ^ operandr MemberReference member p0_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
double cN = ((a * hPrev) + (b + p0));

LocalVariableDeclaration type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name cN_ter ^ ^ initializer BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member a_ter ^ ^ ^ ^ operandr MemberReference member dPrev_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MemberReference member b_ter ^ ^ ^ ^ operandr MemberReference member p0_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
double cN = ((a * dPrev) + (b * p0));

LocalVariableDeclaration type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name cN_ter ^ ^ initializer BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member a_ter ^ ^ ^ ^ operandr MemberReference member p0_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MemberReference member b_ter ^ ^ ^ ^ operandr MemberReference member p0_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
double cN = ((a * p0) + (b * p0));

LocalVariableDeclaration type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name cN_ter ^ ^ initializer BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member a_ter ^ ^ ^ ^ operandr MemberReference member n_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MemberReference member b_ter ^ ^ ^ ^ operandr MemberReference member p0_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
double cN = ((a * n) + (b * p0));

LocalVariableDeclaration type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name cN_ter ^ ^ initializer BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member a_ter ^ ^ ^ ^ operandr MemberReference member x_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MemberReference member b_ter ^ ^ ^ ^ operandr MemberReference member p0_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
double cN = ((a * x) + (b * p0));

LocalVariableDeclaration type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name cN_ter ^ ^ initializer BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member a_ter ^ ^ ^ ^ operandr MemberReference member a_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MemberReference member b_ter ^ ^ ^ ^ operandr MemberReference member p0_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
double cN = ((a * a) + (b * p0));

LocalVariableDeclaration type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name cN_ter ^ ^ initializer BinaryOperation operator -_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member a_ter ^ ^ ^ ^ operandr MemberReference member hPrev_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MemberReference member b_ter ^ ^ ^ ^ operandr MemberReference member p0_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
double cN = ((a * hPrev) - (b * p0));

LocalVariableDeclaration type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name cN_ter ^ ^ initializer BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member dPrev_ter ^ ^ ^ ^ operandr MemberReference member hPrev_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MemberReference member b_ter ^ ^ ^ ^ operandr MemberReference member p0_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
double cN = ((dPrev * hPrev) + (b * p0));

LocalVariableDeclaration type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name cN_ter ^ ^ initializer BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member a_ter ^ ^ ^ ^ operandr MemberReference member q1_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MemberReference member b_ter ^ ^ ^ ^ operandr MemberReference member p0_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
double cN = ((a * q1) + (b * p0));

LocalVariableDeclaration type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator *_ter ^ ^ operandl MemberReference member b_ter ^ ^ ^ ^ operandr MemberReference member p0_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
double  = (b * p0);


LocalVariableDeclaration type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name cN_ter ^ ^ initializer BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member p0_ter ^ ^ ^ ^ operandr MemberReference member hPrev_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MemberReference member b_ter ^ ^ ^ ^ operandr MemberReference member p0_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
double cN = ((p0 * hPrev) + (b * p0));

LocalVariableDeclaration type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name cN_ter ^ ^ initializer BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr MemberReference member hPrev_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MemberReference member b_ter ^ ^ ^ ^ operandr MemberReference member p0_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
double cN = ((n * hPrev) + (b * p0));

LocalVariableDeclaration type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name cN_ter ^ ^ initializer BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member q1_ter ^ ^ ^ ^ operandr MemberReference member hPrev_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MemberReference member b_ter ^ ^ ^ ^ operandr MemberReference member p0_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
double cN = ((q1 * hPrev) + (b * p0));

LocalVariableDeclaration type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name cN_ter ^ ^ initializer BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member a_ter ^ ^ ^ ^ operandr MemberReference member hPrev_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MemberReference member dPrev_ter ^ ^ ^ ^ operandr MemberReference member p0_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
double cN = ((a * hPrev) + (dPrev * p0));

LocalVariableDeclaration type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name cN_ter ^ ^ initializer BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member x_ter ^ ^ ^ ^ operandr MemberReference member hPrev_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MemberReference member b_ter ^ ^ ^ ^ operandr MemberReference member p0_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
double cN = ((x * hPrev) + (b * p0));

LocalVariableDeclaration type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name cN_ter ^ ^ initializer BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member hPrev_ter ^ ^ ^ ^ operandr MemberReference member hPrev_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MemberReference member b_ter ^ ^ ^ ^ operandr MemberReference member p0_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
double cN = ((hPrev * hPrev) + (b * p0));

LocalVariableDeclaration type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name cN_ter ^ ^ initializer BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member a_ter ^ ^ ^ ^ operandr MemberReference member hPrev_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MemberReference member p0_ter ^ ^ ^ ^ operandr MemberReference member p0_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
double cN = ((a * hPrev) + (p0 * p0));

LocalVariableDeclaration type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member a_ter ^ ^ ^ ^ operandr MemberReference member hPrev_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MemberReference member b_ter ^ ^ ^ ^ operandr MemberReference member p0_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
double  = ((a * hPrev) + (b * p0));


LocalVariableDeclaration type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name cN_ter ^ ^ initializer BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member a_ter ^ ^ ^ ^ operandr MemberReference member hPrev_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MemberReference member n_ter ^ ^ ^ ^ operandr MemberReference member p0_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
double cN = ((a * hPrev) + (n * p0));

LocalVariableDeclaration type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name cN_ter ^ ^ initializer BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member a_ter ^ ^ ^ ^ operandr MemberReference member hPrev_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MemberReference member a_ter ^ ^ ^ ^ operandr MemberReference member p0_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
double cN = ((a * hPrev) + (a * p0));

LocalVariableDeclaration type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name cN_ter ^ ^ initializer BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member a_ter ^ ^ ^ ^ operandr MemberReference member hPrev_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MemberReference member q1_ter ^ ^ ^ ^ operandr MemberReference member p0_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
double cN = ((a * hPrev) + (q1 * p0));

LocalVariableDeclaration type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name cN_ter ^ ^ initializer BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member a_ter ^ ^ ^ ^ operandr MemberReference member hPrev_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MemberReference member x_ter ^ ^ ^ ^ operandr MemberReference member p0_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
double cN = ((a * hPrev) + (x * p0));

LocalVariableDeclaration type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name cN_ter ^ ^ initializer BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member a_ter ^ ^ ^ ^ operandr MemberReference member hPrev_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MemberReference member hPrev_ter ^ ^ ^ ^ operandr MemberReference member p0_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
double cN = ((a * hPrev) + (hPrev * p0));

LocalVariableDeclaration type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator *_ter ^ ^ operandl MemberReference member a_ter ^ ^ ^ ^ operandr MemberReference member hPrev_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
double  = (a * hPrev);


LocalVariableDeclaration modifiers final_ter ^ ^ type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name cN_ter ^ ^ initializer BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member a_ter ^ ^ ^ ^ operandr MemberReference member hPrev_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MemberReference member b_ter ^ ^ ^ ^ operandr MemberReference member p0_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
final double cN = ((a * hPrev) + (b * p0));

LocalVariableDeclaration type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer MemberReference member p0_ter ^ ^ ^ ^ ^ ^ ^ 
double  = p0;


LocalVariableDeclaration type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member a_ter ^ ^ ^ ^ operandr MemberReference member hPrev_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MemberReference member b_ter ^ ^ ^ ^ operandr MemberReference member p0_ter ^ ^ ^ ^ ^ ^ ^ ^ operandr MemberReference member p0_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
double  = (((a * hPrev) + (b * p0)) + p0);


LocalVariableDeclaration type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member a_ter ^ ^ ^ ^ operandr MemberReference member hPrev_ter ^ ^ ^ ^ ^ ^ operandr MemberReference member p0_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ 
double  = ((a * hPrev) + p0);


LocalVariableDeclaration type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member a_ter ^ ^ ^ ^ operandr MemberReference member hPrev_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MemberReference member p0_ter ^ ^ ^ ^ operandr MemberReference member p0_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
double  = ((a * hPrev) + (p0 * p0));


LocalVariableDeclaration type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name cN_ter ^ ^ initializer BinaryOperation operator /_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member a_ter ^ ^ ^ ^ operandr MemberReference member hPrev_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MemberReference member b_ter ^ ^ ^ ^ operandr MemberReference member p0_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
double cN = ((a * hPrev) / (b * p0));

LocalVariableDeclaration type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member p0_ter ^ ^ ^ ^ operandr MemberReference member p0_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MemberReference member b_ter ^ ^ ^ ^ operandr MemberReference member p0_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
double  = ((p0 * p0) + (b * p0));


LocalVariableDeclaration type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name cN_ter ^ ^ initializer BinaryOperation operator *_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member a_ter ^ ^ ^ ^ operandr MemberReference member hPrev_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MemberReference member b_ter ^ ^ ^ ^ operandr MemberReference member p0_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
double cN = ((a * hPrev) * (b * p0));

LocalVariableDeclaration type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name cN_ter ^ ^ initializer BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator *_ter ^ ^ operandl MemberReference member a_ter ^ ^ ^ ^ operandr MemberReference member hPrev_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator %_ter ^ ^ operandl MemberReference member b_ter ^ ^ ^ ^ operandr MemberReference member p0_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
double cN = ((a * hPrev) + (b % p0));

LocalVariableDeclaration type BasicType name double_ter ^ ^ ^ ^ declarators VariableDeclarator name loc0 ^ ^ initializer BinaryOperation operator +_ter ^ ^ operandl BinaryOperation operator +_ter ^ ^ operandl MemberReference member p0_ter ^ ^ ^ ^ operandr MemberReference member p0_ter ^ ^ ^ ^ ^ ^ operandr BinaryOperation operator *_ter ^ ^ operandl MemberReference member b_ter ^ ^ ^ ^ operandr MemberReference member p0_ter ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 
double  = ((p0 + p0) + (b * p0));



StatementExpression expression Assignment expressionl MemberReference member dPrev_ter ^ ^ ^ ^ value MemberReference member dPrev_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
dPrev = dPrev;

StatementExpression expression Assignment expressionl MemberReference member dPrev_ter ^ ^ ^ ^ value MemberReference member deltaN_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
dPrev = deltaN;

StatementExpression expression Assignment expressionl MemberReference member dPrev_ter ^ ^ ^ ^ value MemberReference member q2_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
dPrev = q2;

StatementExpression expression Assignment expressionl MemberReference member dPrev_ter ^ ^ ^ ^ value MemberReference member cN_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
dPrev = cN;

StatementExpression expression Assignment expressionl MemberReference member dPrev_ter ^ ^ ^ ^ value MemberReference member cPrev_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
dPrev = cPrev;

StatementExpression expression Assignment expressionl MemberReference member dPrev_ter ^ ^ ^ ^ value MemberReference member epsilon_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
dPrev = epsilon;

StatementExpression expression Assignment expressionl MemberReference member deltaN_ter ^ ^ ^ ^ value MemberReference member q1_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
deltaN = q1;

StatementExpression expression Assignment expressionl MemberReference member q2_ter ^ ^ ^ ^ value MemberReference member q1_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
q2 = q1;

StatementExpression expression Assignment expressionl MemberReference member epsilon_ter ^ ^ ^ ^ value MemberReference member q1_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
epsilon = q1;

StatementExpression expression Assignment expressionl MemberReference member cN_ter ^ ^ ^ ^ value MemberReference member q1_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
cN = q1;

StatementExpression expression Assignment expressionl MemberReference member cPrev_ter ^ ^ ^ ^ value MemberReference member q1_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
cPrev = q1;

StatementExpression expression Assignment expressionl MemberReference member cPrev_ter ^ ^ ^ ^ value BinaryOperation operator /_ter ^ ^ operandl MemberReference member cN_ter ^ ^ ^ ^ operandr MemberReference member q2_ter ^ ^ ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
cPrev = (cN / q2);

StatementExpression expression Assignment expressionl MemberReference member dPrev_ter ^ ^ ^ ^ value BinaryOperation operator /_ter ^ ^ operandl MemberReference member cN_ter ^ ^ ^ ^ operandr MemberReference member q2_ter ^ ^ ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
dPrev = (cN / q2);

BreakStatement_ter ^ 
break;

StatementExpression expression Assignment expressionl MemberReference member dPrev_ter ^ ^ ^ ^ value MethodInvocation qualifier FastMath_ter ^ ^ arguments BinaryOperation operator -_ter ^ ^ operandl MemberReference member deltaN_ter ^ ^ ^ ^ operandr Literal value 1.0_ter ^ ^ ^ ^ ^ ^ member abs_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
dPrev = FastMath.abs((deltaN - 1.0));

StatementExpression expression Assignment expressionl MemberReference member dPrev_ter ^ ^ ^ ^ value Literal value false_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
dPrev = false;

StatementExpression expression Assignment expressionl MemberReference member dPrev_ter ^ ^ ^ ^ value Literal value true_ter ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
dPrev = true;

StatementExpression expression MethodInvocation qualifier FastMath_ter ^ ^ arguments BinaryOperation operator -_ter ^ ^ operandl MemberReference member deltaN_ter ^ ^ ^ ^ operandr Literal value 1.0_ter ^ ^ ^ ^ ^ ^ member abs_ter ^ ^ ^ ^ ^ 
FastMath.abs((deltaN - 1.0));

ReturnStatement_ter ^ 
if (true) { return;
 }

StatementExpression expression Assignment expressionl MemberReference member cPrev_ter ^ ^ ^ ^ value BinaryOperation operator /_ter ^ ^ operandl MemberReference member cN_ter ^ ^ ^ ^ operandr MemberReference member q2_ter ^ ^ ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
cPrev = (cN / q2);

ContinueStatement_ter ^ 
continue;

IfStatement condition BinaryOperation operator <_ter ^ ^ operandl MethodInvocation qualifier FastMath_ter ^ ^ arguments BinaryOperation operator -_ter ^ ^ operandl MemberReference member deltaN_ter ^ ^ ^ ^ operandr Literal value 1.0_ter ^ ^ ^ ^ ^ ^ member abs_ter ^ ^ ^ ^ operandr MemberReference member epsilon_ter ^ ^ ^ ^ ^ ^ ^ 
if((FastMath.abs((deltaN - 1.0)) < epsilon)){

StatementExpression expression Assignment expressionl MemberReference member dPrev_ter ^ ^ ^ ^ value BinaryOperation operator +_ter ^ ^ operandl MemberReference member q1_ter ^ ^ ^ ^ operandr MemberReference member q1_ter ^ ^ ^ ^ ^ ^ type =_ter ^ ^ ^ ^ ^ 
dPrev = (q1 + q1);

stderr: 